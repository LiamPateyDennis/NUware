
NUFSR.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00004fa0  08000188  08000188  00010188  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000038  08005128  08005128  00015128  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08005160  08005160  0002000c  2**0
                  CONTENTS
  4 .ARM          00000000  08005160  08005160  0002000c  2**0
                  CONTENTS
  5 .preinit_array 00000000  08005160  08005160  0002000c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08005160  08005160  00015160  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08005164  08005164  00015164  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000000c  20000000  08005168  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000188  2000000c  08005174  0002000c  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20000194  08005174  00020194  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0002000c  2**0
                  CONTENTS, READONLY
 12 .debug_info   00014fc0  00000000  00000000  0002003c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00002d17  00000000  00000000  00034ffc  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001090  00000000  00000000  00037d18  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000f58  00000000  00000000  00038da8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0001d191  00000000  00000000  00039d00  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00016068  00000000  00000000  00056e91  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000a98f3  00000000  00000000  0006cef9  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  001167ec  2**0
                  CONTENTS, READONLY
 20 .debug_frame  0000442c  00000000  00000000  00116840  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000188 <__do_global_dtors_aux>:
 8000188:	b510      	push	{r4, lr}
 800018a:	4c05      	ldr	r4, [pc, #20]	; (80001a0 <__do_global_dtors_aux+0x18>)
 800018c:	7823      	ldrb	r3, [r4, #0]
 800018e:	b933      	cbnz	r3, 800019e <__do_global_dtors_aux+0x16>
 8000190:	4b04      	ldr	r3, [pc, #16]	; (80001a4 <__do_global_dtors_aux+0x1c>)
 8000192:	b113      	cbz	r3, 800019a <__do_global_dtors_aux+0x12>
 8000194:	4804      	ldr	r0, [pc, #16]	; (80001a8 <__do_global_dtors_aux+0x20>)
 8000196:	f3af 8000 	nop.w
 800019a:	2301      	movs	r3, #1
 800019c:	7023      	strb	r3, [r4, #0]
 800019e:	bd10      	pop	{r4, pc}
 80001a0:	2000000c 	.word	0x2000000c
 80001a4:	00000000 	.word	0x00000000
 80001a8:	08005110 	.word	0x08005110

080001ac <frame_dummy>:
 80001ac:	b508      	push	{r3, lr}
 80001ae:	4b03      	ldr	r3, [pc, #12]	; (80001bc <frame_dummy+0x10>)
 80001b0:	b11b      	cbz	r3, 80001ba <frame_dummy+0xe>
 80001b2:	4903      	ldr	r1, [pc, #12]	; (80001c0 <frame_dummy+0x14>)
 80001b4:	4803      	ldr	r0, [pc, #12]	; (80001c4 <frame_dummy+0x18>)
 80001b6:	f3af 8000 	nop.w
 80001ba:	bd08      	pop	{r3, pc}
 80001bc:	00000000 	.word	0x00000000
 80001c0:	20000010 	.word	0x20000010
 80001c4:	08005110 	.word	0x08005110

080001c8 <MX_ADC1_Init>:

ADC_HandleTypeDef hadc1;

/* ADC1 init function */
void MX_ADC1_Init(void)
{
 80001c8:	b580      	push	{r7, lr}
 80001ca:	b084      	sub	sp, #16
 80001cc:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 80001ce:	1d3b      	adds	r3, r7, #4
 80001d0:	2200      	movs	r2, #0
 80001d2:	601a      	str	r2, [r3, #0]
 80001d4:	605a      	str	r2, [r3, #4]
 80001d6:	609a      	str	r2, [r3, #8]
  /* USER CODE BEGIN ADC1_Init 1 */

  /* USER CODE END ADC1_Init 1 */
  /** Common config
  */
  hadc1.Instance = ADC1;
 80001d8:	4b2b      	ldr	r3, [pc, #172]	; (8000288 <MX_ADC1_Init+0xc0>)
 80001da:	4a2c      	ldr	r2, [pc, #176]	; (800028c <MX_ADC1_Init+0xc4>)
 80001dc:	601a      	str	r2, [r3, #0]
  hadc1.Init.ScanConvMode = ADC_SCAN_ENABLE;
 80001de:	4b2a      	ldr	r3, [pc, #168]	; (8000288 <MX_ADC1_Init+0xc0>)
 80001e0:	f44f 7280 	mov.w	r2, #256	; 0x100
 80001e4:	609a      	str	r2, [r3, #8]
  hadc1.Init.ContinuousConvMode = ENABLE;
 80001e6:	4b28      	ldr	r3, [pc, #160]	; (8000288 <MX_ADC1_Init+0xc0>)
 80001e8:	2201      	movs	r2, #1
 80001ea:	731a      	strb	r2, [r3, #12]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 80001ec:	4b26      	ldr	r3, [pc, #152]	; (8000288 <MX_ADC1_Init+0xc0>)
 80001ee:	2200      	movs	r2, #0
 80001f0:	751a      	strb	r2, [r3, #20]
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 80001f2:	4b25      	ldr	r3, [pc, #148]	; (8000288 <MX_ADC1_Init+0xc0>)
 80001f4:	f44f 2260 	mov.w	r2, #917504	; 0xe0000
 80001f8:	61da      	str	r2, [r3, #28]
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 80001fa:	4b23      	ldr	r3, [pc, #140]	; (8000288 <MX_ADC1_Init+0xc0>)
 80001fc:	2200      	movs	r2, #0
 80001fe:	605a      	str	r2, [r3, #4]
  hadc1.Init.NbrOfConversion = 4;
 8000200:	4b21      	ldr	r3, [pc, #132]	; (8000288 <MX_ADC1_Init+0xc0>)
 8000202:	2204      	movs	r2, #4
 8000204:	611a      	str	r2, [r3, #16]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8000206:	4820      	ldr	r0, [pc, #128]	; (8000288 <MX_ADC1_Init+0xc0>)
 8000208:	f000 fd86 	bl	8000d18 <HAL_ADC_Init>
 800020c:	4603      	mov	r3, r0
 800020e:	2b00      	cmp	r3, #0
 8000210:	d001      	beq.n	8000216 <MX_ADC1_Init+0x4e>
  {
    Error_Handler();
 8000212:	f000 fa5f 	bl	80006d4 <Error_Handler>
  }
  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_0;
 8000216:	2300      	movs	r3, #0
 8000218:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 800021a:	2301      	movs	r3, #1
 800021c:	60bb      	str	r3, [r7, #8]
  sConfig.SamplingTime = ADC_SAMPLETIME_1CYCLE_5;
 800021e:	2300      	movs	r3, #0
 8000220:	60fb      	str	r3, [r7, #12]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000222:	1d3b      	adds	r3, r7, #4
 8000224:	4619      	mov	r1, r3
 8000226:	4818      	ldr	r0, [pc, #96]	; (8000288 <MX_ADC1_Init+0xc0>)
 8000228:	f000 fe4e 	bl	8000ec8 <HAL_ADC_ConfigChannel>
 800022c:	4603      	mov	r3, r0
 800022e:	2b00      	cmp	r3, #0
 8000230:	d001      	beq.n	8000236 <MX_ADC1_Init+0x6e>
  {
    Error_Handler();
 8000232:	f000 fa4f 	bl	80006d4 <Error_Handler>
  }
  /** Configure Regular Channel
  */
  sConfig.Rank = ADC_REGULAR_RANK_2;
 8000236:	2302      	movs	r3, #2
 8000238:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 800023a:	1d3b      	adds	r3, r7, #4
 800023c:	4619      	mov	r1, r3
 800023e:	4812      	ldr	r0, [pc, #72]	; (8000288 <MX_ADC1_Init+0xc0>)
 8000240:	f000 fe42 	bl	8000ec8 <HAL_ADC_ConfigChannel>
 8000244:	4603      	mov	r3, r0
 8000246:	2b00      	cmp	r3, #0
 8000248:	d001      	beq.n	800024e <MX_ADC1_Init+0x86>
  {
    Error_Handler();
 800024a:	f000 fa43 	bl	80006d4 <Error_Handler>
  }
  /** Configure Regular Channel
  */
  sConfig.Rank = ADC_REGULAR_RANK_3;
 800024e:	2303      	movs	r3, #3
 8000250:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000252:	1d3b      	adds	r3, r7, #4
 8000254:	4619      	mov	r1, r3
 8000256:	480c      	ldr	r0, [pc, #48]	; (8000288 <MX_ADC1_Init+0xc0>)
 8000258:	f000 fe36 	bl	8000ec8 <HAL_ADC_ConfigChannel>
 800025c:	4603      	mov	r3, r0
 800025e:	2b00      	cmp	r3, #0
 8000260:	d001      	beq.n	8000266 <MX_ADC1_Init+0x9e>
  {
    Error_Handler();
 8000262:	f000 fa37 	bl	80006d4 <Error_Handler>
  }
  /** Configure Regular Channel
  */
  sConfig.Rank = ADC_REGULAR_RANK_4;
 8000266:	2304      	movs	r3, #4
 8000268:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 800026a:	1d3b      	adds	r3, r7, #4
 800026c:	4619      	mov	r1, r3
 800026e:	4806      	ldr	r0, [pc, #24]	; (8000288 <MX_ADC1_Init+0xc0>)
 8000270:	f000 fe2a 	bl	8000ec8 <HAL_ADC_ConfigChannel>
 8000274:	4603      	mov	r3, r0
 8000276:	2b00      	cmp	r3, #0
 8000278:	d001      	beq.n	800027e <MX_ADC1_Init+0xb6>
  {
    Error_Handler();
 800027a:	f000 fa2b 	bl	80006d4 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 800027e:	bf00      	nop
 8000280:	3710      	adds	r7, #16
 8000282:	46bd      	mov	sp, r7
 8000284:	bd80      	pop	{r7, pc}
 8000286:	bf00      	nop
 8000288:	20000028 	.word	0x20000028
 800028c:	40012400 	.word	0x40012400

08000290 <HAL_ADC_MspInit>:

void HAL_ADC_MspInit(ADC_HandleTypeDef* adcHandle)
{
 8000290:	b580      	push	{r7, lr}
 8000292:	b08a      	sub	sp, #40	; 0x28
 8000294:	af00      	add	r7, sp, #0
 8000296:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000298:	f107 0314 	add.w	r3, r7, #20
 800029c:	2200      	movs	r2, #0
 800029e:	601a      	str	r2, [r3, #0]
 80002a0:	605a      	str	r2, [r3, #4]
 80002a2:	609a      	str	r2, [r3, #8]
 80002a4:	60da      	str	r2, [r3, #12]
 80002a6:	611a      	str	r2, [r3, #16]
  if(adcHandle->Instance==ADC1)
 80002a8:	687b      	ldr	r3, [r7, #4]
 80002aa:	681b      	ldr	r3, [r3, #0]
 80002ac:	4a15      	ldr	r2, [pc, #84]	; (8000304 <HAL_ADC_MspInit+0x74>)
 80002ae:	4293      	cmp	r3, r2
 80002b0:	d124      	bne.n	80002fc <HAL_ADC_MspInit+0x6c>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* ADC1 clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 80002b2:	4b15      	ldr	r3, [pc, #84]	; (8000308 <HAL_ADC_MspInit+0x78>)
 80002b4:	699b      	ldr	r3, [r3, #24]
 80002b6:	4a14      	ldr	r2, [pc, #80]	; (8000308 <HAL_ADC_MspInit+0x78>)
 80002b8:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80002bc:	6193      	str	r3, [r2, #24]
 80002be:	4b12      	ldr	r3, [pc, #72]	; (8000308 <HAL_ADC_MspInit+0x78>)
 80002c0:	699b      	ldr	r3, [r3, #24]
 80002c2:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80002c6:	613b      	str	r3, [r7, #16]
 80002c8:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80002ca:	4b0f      	ldr	r3, [pc, #60]	; (8000308 <HAL_ADC_MspInit+0x78>)
 80002cc:	695b      	ldr	r3, [r3, #20]
 80002ce:	4a0e      	ldr	r2, [pc, #56]	; (8000308 <HAL_ADC_MspInit+0x78>)
 80002d0:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80002d4:	6153      	str	r3, [r2, #20]
 80002d6:	4b0c      	ldr	r3, [pc, #48]	; (8000308 <HAL_ADC_MspInit+0x78>)
 80002d8:	695b      	ldr	r3, [r3, #20]
 80002da:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80002de:	60fb      	str	r3, [r7, #12]
 80002e0:	68fb      	ldr	r3, [r7, #12]
    PA0     ------> ADC1_IN0
    PA1     ------> ADC1_IN1
    PA2     ------> ADC1_IN2
    PA3     ------> ADC1_IN3
    */
    GPIO_InitStruct.Pin = FSR1_Pin|FSR2_Pin|FSR3_Pin|FSR4_Pin;
 80002e2:	230f      	movs	r3, #15
 80002e4:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80002e6:	2303      	movs	r3, #3
 80002e8:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80002ea:	2300      	movs	r3, #0
 80002ec:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80002ee:	f107 0314 	add.w	r3, r7, #20
 80002f2:	4619      	mov	r1, r3
 80002f4:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80002f8:	f001 f8a0 	bl	800143c <HAL_GPIO_Init>

  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }
}
 80002fc:	bf00      	nop
 80002fe:	3728      	adds	r7, #40	; 0x28
 8000300:	46bd      	mov	sp, r7
 8000302:	bd80      	pop	{r7, pc}
 8000304:	40012400 	.word	0x40012400
 8000308:	40021000 	.word	0x40021000

0800030c <MX_GPIO_Init>:
        * EXTI
        * Free pins are configured automatically as Analog (this feature is enabled through
        * the Code Generation settings)
*/
void MX_GPIO_Init(void)
{
 800030c:	b580      	push	{r7, lr}
 800030e:	b08c      	sub	sp, #48	; 0x30
 8000310:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000312:	f107 031c 	add.w	r3, r7, #28
 8000316:	2200      	movs	r2, #0
 8000318:	601a      	str	r2, [r3, #0]
 800031a:	605a      	str	r2, [r3, #4]
 800031c:	609a      	str	r2, [r3, #8]
 800031e:	60da      	str	r2, [r3, #12]
 8000320:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000322:	4b69      	ldr	r3, [pc, #420]	; (80004c8 <MX_GPIO_Init+0x1bc>)
 8000324:	695b      	ldr	r3, [r3, #20]
 8000326:	4a68      	ldr	r2, [pc, #416]	; (80004c8 <MX_GPIO_Init+0x1bc>)
 8000328:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 800032c:	6153      	str	r3, [r2, #20]
 800032e:	4b66      	ldr	r3, [pc, #408]	; (80004c8 <MX_GPIO_Init+0x1bc>)
 8000330:	695b      	ldr	r3, [r3, #20]
 8000332:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8000336:	61bb      	str	r3, [r7, #24]
 8000338:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 800033a:	4b63      	ldr	r3, [pc, #396]	; (80004c8 <MX_GPIO_Init+0x1bc>)
 800033c:	695b      	ldr	r3, [r3, #20]
 800033e:	4a62      	ldr	r2, [pc, #392]	; (80004c8 <MX_GPIO_Init+0x1bc>)
 8000340:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8000344:	6153      	str	r3, [r2, #20]
 8000346:	4b60      	ldr	r3, [pc, #384]	; (80004c8 <MX_GPIO_Init+0x1bc>)
 8000348:	695b      	ldr	r3, [r3, #20]
 800034a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800034e:	617b      	str	r3, [r7, #20]
 8000350:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000352:	4b5d      	ldr	r3, [pc, #372]	; (80004c8 <MX_GPIO_Init+0x1bc>)
 8000354:	695b      	ldr	r3, [r3, #20]
 8000356:	4a5c      	ldr	r2, [pc, #368]	; (80004c8 <MX_GPIO_Init+0x1bc>)
 8000358:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800035c:	6153      	str	r3, [r2, #20]
 800035e:	4b5a      	ldr	r3, [pc, #360]	; (80004c8 <MX_GPIO_Init+0x1bc>)
 8000360:	695b      	ldr	r3, [r3, #20]
 8000362:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000366:	613b      	str	r3, [r7, #16]
 8000368:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800036a:	4b57      	ldr	r3, [pc, #348]	; (80004c8 <MX_GPIO_Init+0x1bc>)
 800036c:	695b      	ldr	r3, [r3, #20]
 800036e:	4a56      	ldr	r2, [pc, #344]	; (80004c8 <MX_GPIO_Init+0x1bc>)
 8000370:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8000374:	6153      	str	r3, [r2, #20]
 8000376:	4b54      	ldr	r3, [pc, #336]	; (80004c8 <MX_GPIO_Init+0x1bc>)
 8000378:	695b      	ldr	r3, [r3, #20]
 800037a:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800037e:	60fb      	str	r3, [r7, #12]
 8000380:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8000382:	4b51      	ldr	r3, [pc, #324]	; (80004c8 <MX_GPIO_Init+0x1bc>)
 8000384:	695b      	ldr	r3, [r3, #20]
 8000386:	4a50      	ldr	r2, [pc, #320]	; (80004c8 <MX_GPIO_Init+0x1bc>)
 8000388:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 800038c:	6153      	str	r3, [r2, #20]
 800038e:	4b4e      	ldr	r3, [pc, #312]	; (80004c8 <MX_GPIO_Init+0x1bc>)
 8000390:	695b      	ldr	r3, [r3, #20]
 8000392:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8000396:	60bb      	str	r3, [r7, #8]
 8000398:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 800039a:	4b4b      	ldr	r3, [pc, #300]	; (80004c8 <MX_GPIO_Init+0x1bc>)
 800039c:	695b      	ldr	r3, [r3, #20]
 800039e:	4a4a      	ldr	r2, [pc, #296]	; (80004c8 <MX_GPIO_Init+0x1bc>)
 80003a0:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80003a4:	6153      	str	r3, [r2, #20]
 80003a6:	4b48      	ldr	r3, [pc, #288]	; (80004c8 <MX_GPIO_Init+0x1bc>)
 80003a8:	695b      	ldr	r3, [r3, #20]
 80003aa:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80003ae:	607b      	str	r3, [r7, #4]
 80003b0:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_8, GPIO_PIN_RESET);
 80003b2:	2200      	movs	r2, #0
 80003b4:	f44f 7180 	mov.w	r1, #256	; 0x100
 80003b8:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80003bc:	f001 f9b8 	bl	8001730 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, LED1_Pin|LED2_Pin, GPIO_PIN_RESET);
 80003c0:	2200      	movs	r2, #0
 80003c2:	f44f 7140 	mov.w	r1, #768	; 0x300
 80003c6:	4841      	ldr	r0, [pc, #260]	; (80004cc <MX_GPIO_Init+0x1c0>)
 80003c8:	f001 f9b2 	bl	8001730 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PC13 PC14 PC15 PC0
                           PC1 PC2 PC3 PC4
                           PC5 PC10 PC11 PC12 */
  GPIO_InitStruct.Pin = GPIO_PIN_13|GPIO_PIN_14|GPIO_PIN_15|GPIO_PIN_0
 80003cc:	f64f 433f 	movw	r3, #64575	; 0xfc3f
 80003d0:	61fb      	str	r3, [r7, #28]
                          |GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_3|GPIO_PIN_4
                          |GPIO_PIN_5|GPIO_PIN_10|GPIO_PIN_11|GPIO_PIN_12;
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80003d2:	2303      	movs	r3, #3
 80003d4:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80003d6:	2300      	movs	r3, #0
 80003d8:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80003da:	f107 031c 	add.w	r3, r7, #28
 80003de:	4619      	mov	r1, r3
 80003e0:	483b      	ldr	r0, [pc, #236]	; (80004d0 <MX_GPIO_Init+0x1c4>)
 80003e2:	f001 f82b 	bl	800143c <HAL_GPIO_Init>

  /*Configure GPIO pins : PA4 PA5 PA6 PA7
                           PA11 PA12 */
  GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7
 80003e6:	f641 03f0 	movw	r3, #6384	; 0x18f0
 80003ea:	61fb      	str	r3, [r7, #28]
                          |GPIO_PIN_11|GPIO_PIN_12;
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80003ec:	2303      	movs	r3, #3
 80003ee:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80003f0:	2300      	movs	r3, #0
 80003f2:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80003f4:	f107 031c 	add.w	r3, r7, #28
 80003f8:	4619      	mov	r1, r3
 80003fa:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80003fe:	f001 f81d 	bl	800143c <HAL_GPIO_Init>

  /*Configure GPIO pins : PB0 PB1 PB2 PB14
                           PB15 PB5 PB6 PB7 */
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_14
 8000402:	f24c 03e7 	movw	r3, #49383	; 0xc0e7
 8000406:	61fb      	str	r3, [r7, #28]
                          |GPIO_PIN_15|GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7;
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000408:	2303      	movs	r3, #3
 800040a:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800040c:	2300      	movs	r3, #0
 800040e:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000410:	f107 031c 	add.w	r3, r7, #28
 8000414:	4619      	mov	r1, r3
 8000416:	482d      	ldr	r0, [pc, #180]	; (80004cc <MX_GPIO_Init+0x1c0>)
 8000418:	f001 f810 	bl	800143c <HAL_GPIO_Init>

  /*Configure GPIO pins : PE8 PE9 */
  GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 800041c:	f44f 7340 	mov.w	r3, #768	; 0x300
 8000420:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000422:	2303      	movs	r3, #3
 8000424:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000426:	2300      	movs	r3, #0
 8000428:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 800042a:	f107 031c 	add.w	r3, r7, #28
 800042e:	4619      	mov	r1, r3
 8000430:	4828      	ldr	r0, [pc, #160]	; (80004d4 <MX_GPIO_Init+0x1c8>)
 8000432:	f001 f803 	bl	800143c <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = MPU_INT_Pin;
 8000436:	f44f 7380 	mov.w	r3, #256	; 0x100
 800043a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 800043c:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 8000440:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000442:	2300      	movs	r3, #0
 8000444:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(MPU_INT_GPIO_Port, &GPIO_InitStruct);
 8000446:	f107 031c 	add.w	r3, r7, #28
 800044a:	4619      	mov	r1, r3
 800044c:	4822      	ldr	r0, [pc, #136]	; (80004d8 <MX_GPIO_Init+0x1cc>)
 800044e:	f000 fff5 	bl	800143c <HAL_GPIO_Init>

  /*Configure GPIO pin : PA8 */
  GPIO_InitStruct.Pin = GPIO_PIN_8;
 8000452:	f44f 7380 	mov.w	r3, #256	; 0x100
 8000456:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000458:	2301      	movs	r3, #1
 800045a:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800045c:	2300      	movs	r3, #0
 800045e:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000460:	2300      	movs	r3, #0
 8000462:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000464:	f107 031c 	add.w	r3, r7, #28
 8000468:	4619      	mov	r1, r3
 800046a:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800046e:	f000 ffe5 	bl	800143c <HAL_GPIO_Init>

  /*Configure GPIO pins : PF6 PF7 */
  GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8000472:	23c0      	movs	r3, #192	; 0xc0
 8000474:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000476:	2303      	movs	r3, #3
 8000478:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800047a:	2300      	movs	r3, #0
 800047c:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 800047e:	f107 031c 	add.w	r3, r7, #28
 8000482:	4619      	mov	r1, r3
 8000484:	4815      	ldr	r0, [pc, #84]	; (80004dc <MX_GPIO_Init+0x1d0>)
 8000486:	f000 ffd9 	bl	800143c <HAL_GPIO_Init>

  /*Configure GPIO pin : PD2 */
  GPIO_InitStruct.Pin = GPIO_PIN_2;
 800048a:	2304      	movs	r3, #4
 800048c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 800048e:	2303      	movs	r3, #3
 8000490:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000492:	2300      	movs	r3, #0
 8000494:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000496:	f107 031c 	add.w	r3, r7, #28
 800049a:	4619      	mov	r1, r3
 800049c:	480e      	ldr	r0, [pc, #56]	; (80004d8 <MX_GPIO_Init+0x1cc>)
 800049e:	f000 ffcd 	bl	800143c <HAL_GPIO_Init>

  /*Configure GPIO pins : PBPin PBPin */
  GPIO_InitStruct.Pin = LED1_Pin|LED2_Pin;
 80004a2:	f44f 7340 	mov.w	r3, #768	; 0x300
 80004a6:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80004a8:	2301      	movs	r3, #1
 80004aa:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80004ac:	2300      	movs	r3, #0
 80004ae:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80004b0:	2300      	movs	r3, #0
 80004b2:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80004b4:	f107 031c 	add.w	r3, r7, #28
 80004b8:	4619      	mov	r1, r3
 80004ba:	4804      	ldr	r0, [pc, #16]	; (80004cc <MX_GPIO_Init+0x1c0>)
 80004bc:	f000 ffbe 	bl	800143c <HAL_GPIO_Init>

}
 80004c0:	bf00      	nop
 80004c2:	3730      	adds	r7, #48	; 0x30
 80004c4:	46bd      	mov	sp, r7
 80004c6:	bd80      	pop	{r7, pc}
 80004c8:	40021000 	.word	0x40021000
 80004cc:	48000400 	.word	0x48000400
 80004d0:	48000800 	.word	0x48000800
 80004d4:	48001000 	.word	0x48001000
 80004d8:	48000c00 	.word	0x48000c00
 80004dc:	48001400 	.word	0x48001400

080004e0 <NUfsr_IMU_Transmit>:

#include "imu.h"
#include "spi.h"

void NUfsr_IMU_Transmit(uint8_t adr, uint8_t dat, int byte_size)
{
 80004e0:	b580      	push	{r7, lr}
 80004e2:	b084      	sub	sp, #16
 80004e4:	af00      	add	r7, sp, #0
 80004e6:	4603      	mov	r3, r0
 80004e8:	603a      	str	r2, [r7, #0]
 80004ea:	71fb      	strb	r3, [r7, #7]
 80004ec:	460b      	mov	r3, r1
 80004ee:	71bb      	strb	r3, [r7, #6]
	uint8_t pak[2] = {adr,dat};
 80004f0:	79fb      	ldrb	r3, [r7, #7]
 80004f2:	733b      	strb	r3, [r7, #12]
 80004f4:	79bb      	ldrb	r3, [r7, #6]
 80004f6:	737b      	strb	r3, [r7, #13]

	HAL_SPI_Transmit(&hspi1, pak, byte_size, HAL_MAX_DELAY);
 80004f8:	683b      	ldr	r3, [r7, #0]
 80004fa:	b29a      	uxth	r2, r3
 80004fc:	f107 010c 	add.w	r1, r7, #12
 8000500:	f04f 33ff 	mov.w	r3, #4294967295
 8000504:	4803      	ldr	r0, [pc, #12]	; (8000514 <NUfsr_IMU_Transmit+0x34>)
 8000506:	f002 fca4 	bl	8002e52 <HAL_SPI_Transmit>

}
 800050a:	bf00      	nop
 800050c:	3710      	adds	r7, #16
 800050e:	46bd      	mov	sp, r7
 8000510:	bd80      	pop	{r7, pc}
 8000512:	bf00      	nop
 8000514:	20000058 	.word	0x20000058

08000518 <NUfsr_IMU_TransmitReceive>:

void NUfsr_IMU_TransmitReceive(uint8_t adr, uint8_t dat, uint8_t* dat_return, int byte_size)
{
 8000518:	b580      	push	{r7, lr}
 800051a:	b088      	sub	sp, #32
 800051c:	af02      	add	r7, sp, #8
 800051e:	60ba      	str	r2, [r7, #8]
 8000520:	607b      	str	r3, [r7, #4]
 8000522:	4603      	mov	r3, r0
 8000524:	73fb      	strb	r3, [r7, #15]
 8000526:	460b      	mov	r3, r1
 8000528:	73bb      	strb	r3, [r7, #14]
	uint8_t pak[2] = {adr,dat};
 800052a:	7bfb      	ldrb	r3, [r7, #15]
 800052c:	753b      	strb	r3, [r7, #20]
 800052e:	7bbb      	ldrb	r3, [r7, #14]
 8000530:	757b      	strb	r3, [r7, #21]

	HAL_SPI_TransmitReceive(&hspi1, pak, (uint8_t*)dat_return, byte_size, HAL_MAX_DELAY);
 8000532:	687b      	ldr	r3, [r7, #4]
 8000534:	b29b      	uxth	r3, r3
 8000536:	f107 0114 	add.w	r1, r7, #20
 800053a:	f04f 32ff 	mov.w	r2, #4294967295
 800053e:	9200      	str	r2, [sp, #0]
 8000540:	68ba      	ldr	r2, [r7, #8]
 8000542:	4803      	ldr	r0, [pc, #12]	; (8000550 <NUfsr_IMU_TransmitReceive+0x38>)
 8000544:	f002 fdf3 	bl	800312e <HAL_SPI_TransmitReceive>
}
 8000548:	bf00      	nop
 800054a:	3718      	adds	r7, #24
 800054c:	46bd      	mov	sp, r7
 800054e:	bd80      	pop	{r7, pc}
 8000550:	20000058 	.word	0x20000058

08000554 <NUfsr_IMU_Init>:

void NUfsr_IMU_Init()
{
 8000554:	b580      	push	{r7, lr}
 8000556:	af00      	add	r7, sp, #0

	// Ensure R/W registers are set from power-up
	//HAL_Delay(100);

	// Ensure we are in SPI mode
	NUfsr_IMU_Transmit(USER_CTRL, 0x1D, 2);
 8000558:	2202      	movs	r2, #2
 800055a:	211d      	movs	r1, #29
 800055c:	206a      	movs	r0, #106	; 0x6a
 800055e:	f7ff ffbf 	bl	80004e0 <NUfsr_IMU_Transmit>

	// Reset device: 0x6b, 0x80
	NUfsr_IMU_Transmit(PWR_MGMT_1, 0x00, 2);
 8000562:	2202      	movs	r2, #2
 8000564:	2100      	movs	r1, #0
 8000566:	206b      	movs	r0, #107	; 0x6b
 8000568:	f7ff ffba 	bl	80004e0 <NUfsr_IMU_Transmit>

	// Turn off sleep mode:
	NUfsr_IMU_Transmit(PWR_MGMT_2, 0x00, 2);
 800056c:	2202      	movs	r2, #2
 800056e:	2100      	movs	r1, #0
 8000570:	206c      	movs	r0, #108	; 0x6c
 8000572:	f7ff ffb5 	bl	80004e0 <NUfsr_IMU_Transmit>

	// Config settings
	NUfsr_IMU_Transmit(CONFIG, 0x00, 2);
 8000576:	2202      	movs	r2, #2
 8000578:	2100      	movs	r1, #0
 800057a:	201a      	movs	r0, #26
 800057c:	f7ff ffb0 	bl	80004e0 <NUfsr_IMU_Transmit>

	// Gyro Config
	NUfsr_IMU_Transmit(GYRO_CONFIG, 0x00, 2);
 8000580:	2202      	movs	r2, #2
 8000582:	2100      	movs	r1, #0
 8000584:	201b      	movs	r0, #27
 8000586:	f7ff ffab 	bl	80004e0 <NUfsr_IMU_Transmit>

	// Accel Config
	NUfsr_IMU_Transmit(ACCEL_CONFIG, 0x00, 2);
 800058a:	2202      	movs	r2, #2
 800058c:	2100      	movs	r1, #0
 800058e:	201c      	movs	r0, #28
 8000590:	f7ff ffa6 	bl	80004e0 <NUfsr_IMU_Transmit>
	//NUfsr_IMU_Transmit(INT_ENABLE, 0x01, 2);

	// Reset IMU int status
	//NUfsr_IMU_Transmit(INT_STATUS | IMU_READ, 0x00, 2);

}
 8000594:	bf00      	nop
 8000596:	bd80      	pop	{r7, pc}

08000598 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000598:	b580      	push	{r7, lr}
 800059a:	b082      	sub	sp, #8
 800059c:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800059e:	f000 fb31 	bl	8000c04 <HAL_Init>

  /* USER CODE BEGIN Init */
  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80005a2:	f000 f83b 	bl	800061c <SystemClock_Config>

  /* USER CODE BEGIN SysInit */
  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80005a6:	f7ff feb1 	bl	800030c <MX_GPIO_Init>
  MX_ADC1_Init();
 80005aa:	f7ff fe0d 	bl	80001c8 <MX_ADC1_Init>
  MX_SPI1_Init();
 80005ae:	f000 f897 	bl	80006e0 <MX_SPI1_Init>
  MX_TIM3_Init();
 80005b2:	f000 f98b 	bl	80008cc <MX_TIM3_Init>
  MX_USART1_UART_Init();
 80005b6:	f000 f9fd 	bl	80009b4 <MX_USART1_UART_Init>
  /* USER CODE BEGIN 2 */

  NUfsr_IMU_Init();
 80005ba:	f7ff ffcb 	bl	8000554 <NUfsr_IMU_Init>
  uint8_t return_Data[2] = {1,2};
 80005be:	f240 2301 	movw	r3, #513	; 0x201
 80005c2:	80bb      	strh	r3, [r7, #4]
  NUfsr_UART_Transmit(&huart1, return_Data, 2);
 80005c4:	1d3b      	adds	r3, r7, #4
 80005c6:	2202      	movs	r2, #2
 80005c8:	4619      	mov	r1, r3
 80005ca:	4812      	ldr	r0, [pc, #72]	; (8000614 <main+0x7c>)
 80005cc:	f000 fa7e 	bl	8000acc <NUfsr_UART_Transmit>
  NUfsr_IMU_TransmitReceive(WHO_AM_I, 0x00, return_Data, 1);
 80005d0:	1d3a      	adds	r2, r7, #4
 80005d2:	2301      	movs	r3, #1
 80005d4:	2100      	movs	r1, #0
 80005d6:	2075      	movs	r0, #117	; 0x75
 80005d8:	f7ff ff9e 	bl	8000518 <NUfsr_IMU_TransmitReceive>

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
	  NUfsr_UART_Transmit(&huart1, return_Data, 2);
 80005dc:	1d3b      	adds	r3, r7, #4
 80005de:	2202      	movs	r2, #2
 80005e0:	4619      	mov	r1, r3
 80005e2:	480c      	ldr	r0, [pc, #48]	; (8000614 <main+0x7c>)
 80005e4:	f000 fa72 	bl	8000acc <NUfsr_UART_Transmit>
	  HAL_GPIO_TogglePin(GPIOB,LED1_Pin);
 80005e8:	f44f 7180 	mov.w	r1, #256	; 0x100
 80005ec:	480a      	ldr	r0, [pc, #40]	; (8000618 <main+0x80>)
 80005ee:	f001 f8b7 	bl	8001760 <HAL_GPIO_TogglePin>
	  HAL_GPIO_TogglePin(GPIOB,LED2_Pin);
 80005f2:	f44f 7100 	mov.w	r1, #512	; 0x200
 80005f6:	4808      	ldr	r0, [pc, #32]	; (8000618 <main+0x80>)
 80005f8:	f001 f8b2 	bl	8001760 <HAL_GPIO_TogglePin>
	  NUfsr_IMU_TransmitReceive(WHO_AM_I, 0x00, return_Data, 1);
 80005fc:	1d3a      	adds	r2, r7, #4
 80005fe:	2301      	movs	r3, #1
 8000600:	2100      	movs	r1, #0
 8000602:	2075      	movs	r0, #117	; 0x75
 8000604:	f7ff ff88 	bl	8000518 <NUfsr_IMU_TransmitReceive>
	  HAL_Delay(500);
 8000608:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 800060c:	f000 fb60 	bl	8000cd0 <HAL_Delay>
	  NUfsr_UART_Transmit(&huart1, return_Data, 2);
 8000610:	e7e4      	b.n	80005dc <main+0x44>
 8000612:	bf00      	nop
 8000614:	2000010c 	.word	0x2000010c
 8000618:	48000400 	.word	0x48000400

0800061c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 800061c:	b580      	push	{r7, lr}
 800061e:	b09a      	sub	sp, #104	; 0x68
 8000620:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000622:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8000626:	2228      	movs	r2, #40	; 0x28
 8000628:	2100      	movs	r1, #0
 800062a:	4618      	mov	r0, r3
 800062c:	f004 fd68 	bl	8005100 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000630:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8000634:	2200      	movs	r2, #0
 8000636:	601a      	str	r2, [r3, #0]
 8000638:	605a      	str	r2, [r3, #4]
 800063a:	609a      	str	r2, [r3, #8]
 800063c:	60da      	str	r2, [r3, #12]
 800063e:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000640:	463b      	mov	r3, r7
 8000642:	222c      	movs	r2, #44	; 0x2c
 8000644:	2100      	movs	r1, #0
 8000646:	4618      	mov	r0, r3
 8000648:	f004 fd5a 	bl	8005100 <memset>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 800064c:	2301      	movs	r3, #1
 800064e:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8000650:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8000654:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV4;
 8000656:	2303      	movs	r3, #3
 8000658:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 800065a:	2301      	movs	r3, #1
 800065c:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800065e:	2302      	movs	r3, #2
 8000660:	65fb      	str	r3, [r7, #92]	; 0x5c
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000662:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8000666:	663b      	str	r3, [r7, #96]	; 0x60
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 8000668:	f44f 13e0 	mov.w	r3, #1835008	; 0x1c0000
 800066c:	667b      	str	r3, [r7, #100]	; 0x64
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800066e:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8000672:	4618      	mov	r0, r3
 8000674:	f001 f88e 	bl	8001794 <HAL_RCC_OscConfig>
 8000678:	4603      	mov	r3, r0
 800067a:	2b00      	cmp	r3, #0
 800067c:	d001      	beq.n	8000682 <SystemClock_Config+0x66>
  {
    Error_Handler();
 800067e:	f000 f829 	bl	80006d4 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000682:	230f      	movs	r3, #15
 8000684:	62fb      	str	r3, [r7, #44]	; 0x2c
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000686:	2302      	movs	r3, #2
 8000688:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800068a:	2300      	movs	r3, #0
 800068c:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 800068e:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000692:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000694:	2300      	movs	r3, #0
 8000696:	63fb      	str	r3, [r7, #60]	; 0x3c

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8000698:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800069c:	2102      	movs	r1, #2
 800069e:	4618      	mov	r0, r3
 80006a0:	f001 ff80 	bl	80025a4 <HAL_RCC_ClockConfig>
 80006a4:	4603      	mov	r3, r0
 80006a6:	2b00      	cmp	r3, #0
 80006a8:	d001      	beq.n	80006ae <SystemClock_Config+0x92>
  {
    Error_Handler();
 80006aa:	f000 f813 	bl	80006d4 <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART1|RCC_PERIPHCLK_ADC1;
 80006ae:	2381      	movs	r3, #129	; 0x81
 80006b0:	603b      	str	r3, [r7, #0]
  PeriphClkInit.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK2;
 80006b2:	2300      	movs	r3, #0
 80006b4:	60bb      	str	r3, [r7, #8]
  PeriphClkInit.Adc1ClockSelection = RCC_ADC1PCLK2_DIV2;
 80006b6:	2300      	movs	r3, #0
 80006b8:	61fb      	str	r3, [r7, #28]

  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80006ba:	463b      	mov	r3, r7
 80006bc:	4618      	mov	r0, r3
 80006be:	f002 f9a9 	bl	8002a14 <HAL_RCCEx_PeriphCLKConfig>
 80006c2:	4603      	mov	r3, r0
 80006c4:	2b00      	cmp	r3, #0
 80006c6:	d001      	beq.n	80006cc <SystemClock_Config+0xb0>
  {
    Error_Handler();
 80006c8:	f000 f804 	bl	80006d4 <Error_Handler>
  }
}
 80006cc:	bf00      	nop
 80006ce:	3768      	adds	r7, #104	; 0x68
 80006d0:	46bd      	mov	sp, r7
 80006d2:	bd80      	pop	{r7, pc}

080006d4 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80006d4:	b480      	push	{r7}
 80006d6:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80006d8:	b672      	cpsid	i
}
 80006da:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80006dc:	e7fe      	b.n	80006dc <Error_Handler+0x8>
	...

080006e0 <MX_SPI1_Init>:

SPI_HandleTypeDef hspi1;

/* SPI1 init function */
void MX_SPI1_Init(void)
{
 80006e0:	b580      	push	{r7, lr}
 80006e2:	af00      	add	r7, sp, #0
  /* USER CODE END SPI1_Init 0 */

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  hspi1.Instance = SPI1;
 80006e4:	4b1b      	ldr	r3, [pc, #108]	; (8000754 <MX_SPI1_Init+0x74>)
 80006e6:	4a1c      	ldr	r2, [pc, #112]	; (8000758 <MX_SPI1_Init+0x78>)
 80006e8:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 80006ea:	4b1a      	ldr	r3, [pc, #104]	; (8000754 <MX_SPI1_Init+0x74>)
 80006ec:	f44f 7282 	mov.w	r2, #260	; 0x104
 80006f0:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 80006f2:	4b18      	ldr	r3, [pc, #96]	; (8000754 <MX_SPI1_Init+0x74>)
 80006f4:	2200      	movs	r2, #0
 80006f6:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_16BIT;
 80006f8:	4b16      	ldr	r3, [pc, #88]	; (8000754 <MX_SPI1_Init+0x74>)
 80006fa:	f44f 6270 	mov.w	r2, #3840	; 0xf00
 80006fe:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_HIGH;
 8000700:	4b14      	ldr	r3, [pc, #80]	; (8000754 <MX_SPI1_Init+0x74>)
 8000702:	2202      	movs	r2, #2
 8000704:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_2EDGE;
 8000706:	4b13      	ldr	r3, [pc, #76]	; (8000754 <MX_SPI1_Init+0x74>)
 8000708:	2201      	movs	r2, #1
 800070a:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_HARD_OUTPUT;
 800070c:	4b11      	ldr	r3, [pc, #68]	; (8000754 <MX_SPI1_Init+0x74>)
 800070e:	f44f 2280 	mov.w	r2, #262144	; 0x40000
 8000712:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_256;
 8000714:	4b0f      	ldr	r3, [pc, #60]	; (8000754 <MX_SPI1_Init+0x74>)
 8000716:	2238      	movs	r2, #56	; 0x38
 8000718:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 800071a:	4b0e      	ldr	r3, [pc, #56]	; (8000754 <MX_SPI1_Init+0x74>)
 800071c:	2200      	movs	r2, #0
 800071e:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8000720:	4b0c      	ldr	r3, [pc, #48]	; (8000754 <MX_SPI1_Init+0x74>)
 8000722:	2200      	movs	r2, #0
 8000724:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8000726:	4b0b      	ldr	r3, [pc, #44]	; (8000754 <MX_SPI1_Init+0x74>)
 8000728:	2200      	movs	r2, #0
 800072a:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 7;
 800072c:	4b09      	ldr	r3, [pc, #36]	; (8000754 <MX_SPI1_Init+0x74>)
 800072e:	2207      	movs	r2, #7
 8000730:	62da      	str	r2, [r3, #44]	; 0x2c
  hspi1.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 8000732:	4b08      	ldr	r3, [pc, #32]	; (8000754 <MX_SPI1_Init+0x74>)
 8000734:	2200      	movs	r2, #0
 8000736:	631a      	str	r2, [r3, #48]	; 0x30
  hspi1.Init.NSSPMode = SPI_NSS_PULSE_DISABLE;
 8000738:	4b06      	ldr	r3, [pc, #24]	; (8000754 <MX_SPI1_Init+0x74>)
 800073a:	2200      	movs	r2, #0
 800073c:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 800073e:	4805      	ldr	r0, [pc, #20]	; (8000754 <MX_SPI1_Init+0x74>)
 8000740:	f002 fadc 	bl	8002cfc <HAL_SPI_Init>
 8000744:	4603      	mov	r3, r0
 8000746:	2b00      	cmp	r3, #0
 8000748:	d001      	beq.n	800074e <MX_SPI1_Init+0x6e>
  {
    Error_Handler();
 800074a:	f7ff ffc3 	bl	80006d4 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 800074e:	bf00      	nop
 8000750:	bd80      	pop	{r7, pc}
 8000752:	bf00      	nop
 8000754:	20000058 	.word	0x20000058
 8000758:	40013000 	.word	0x40013000

0800075c <HAL_SPI_MspInit>:

void HAL_SPI_MspInit(SPI_HandleTypeDef* spiHandle)
{
 800075c:	b580      	push	{r7, lr}
 800075e:	b08a      	sub	sp, #40	; 0x28
 8000760:	af00      	add	r7, sp, #0
 8000762:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000764:	f107 0314 	add.w	r3, r7, #20
 8000768:	2200      	movs	r2, #0
 800076a:	601a      	str	r2, [r3, #0]
 800076c:	605a      	str	r2, [r3, #4]
 800076e:	609a      	str	r2, [r3, #8]
 8000770:	60da      	str	r2, [r3, #12]
 8000772:	611a      	str	r2, [r3, #16]
  if(spiHandle->Instance==SPI1)
 8000774:	687b      	ldr	r3, [r7, #4]
 8000776:	681b      	ldr	r3, [r3, #0]
 8000778:	4a17      	ldr	r2, [pc, #92]	; (80007d8 <HAL_SPI_MspInit+0x7c>)
 800077a:	4293      	cmp	r3, r2
 800077c:	d128      	bne.n	80007d0 <HAL_SPI_MspInit+0x74>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* SPI1 clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 800077e:	4b17      	ldr	r3, [pc, #92]	; (80007dc <HAL_SPI_MspInit+0x80>)
 8000780:	699b      	ldr	r3, [r3, #24]
 8000782:	4a16      	ldr	r2, [pc, #88]	; (80007dc <HAL_SPI_MspInit+0x80>)
 8000784:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8000788:	6193      	str	r3, [r2, #24]
 800078a:	4b14      	ldr	r3, [pc, #80]	; (80007dc <HAL_SPI_MspInit+0x80>)
 800078c:	699b      	ldr	r3, [r3, #24]
 800078e:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8000792:	613b      	str	r3, [r7, #16]
 8000794:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8000796:	4b11      	ldr	r3, [pc, #68]	; (80007dc <HAL_SPI_MspInit+0x80>)
 8000798:	695b      	ldr	r3, [r3, #20]
 800079a:	4a10      	ldr	r2, [pc, #64]	; (80007dc <HAL_SPI_MspInit+0x80>)
 800079c:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 80007a0:	6153      	str	r3, [r2, #20]
 80007a2:	4b0e      	ldr	r3, [pc, #56]	; (80007dc <HAL_SPI_MspInit+0x80>)
 80007a4:	695b      	ldr	r3, [r3, #20]
 80007a6:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80007aa:	60fb      	str	r3, [r7, #12]
 80007ac:	68fb      	ldr	r3, [r7, #12]
    PC6     ------> SPI1_NSS
    PC7     ------> SPI1_SCK
    PC8     ------> SPI1_MISO
    PC9     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = MPU_NSS_Pin|MPU_CLK_Pin|MPU_MISO_Pin|MPU_MOSI_Pin;
 80007ae:	f44f 7370 	mov.w	r3, #960	; 0x3c0
 80007b2:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80007b4:	2302      	movs	r3, #2
 80007b6:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80007b8:	2300      	movs	r3, #0
 80007ba:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80007bc:	2303      	movs	r3, #3
 80007be:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 80007c0:	2305      	movs	r3, #5
 80007c2:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80007c4:	f107 0314 	add.w	r3, r7, #20
 80007c8:	4619      	mov	r1, r3
 80007ca:	4805      	ldr	r0, [pc, #20]	; (80007e0 <HAL_SPI_MspInit+0x84>)
 80007cc:	f000 fe36 	bl	800143c <HAL_GPIO_Init>

  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }
}
 80007d0:	bf00      	nop
 80007d2:	3728      	adds	r7, #40	; 0x28
 80007d4:	46bd      	mov	sp, r7
 80007d6:	bd80      	pop	{r7, pc}
 80007d8:	40013000 	.word	0x40013000
 80007dc:	40021000 	.word	0x40021000
 80007e0:	48000800 	.word	0x48000800

080007e4 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80007e4:	b480      	push	{r7}
 80007e6:	b083      	sub	sp, #12
 80007e8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80007ea:	4b0f      	ldr	r3, [pc, #60]	; (8000828 <HAL_MspInit+0x44>)
 80007ec:	699b      	ldr	r3, [r3, #24]
 80007ee:	4a0e      	ldr	r2, [pc, #56]	; (8000828 <HAL_MspInit+0x44>)
 80007f0:	f043 0301 	orr.w	r3, r3, #1
 80007f4:	6193      	str	r3, [r2, #24]
 80007f6:	4b0c      	ldr	r3, [pc, #48]	; (8000828 <HAL_MspInit+0x44>)
 80007f8:	699b      	ldr	r3, [r3, #24]
 80007fa:	f003 0301 	and.w	r3, r3, #1
 80007fe:	607b      	str	r3, [r7, #4]
 8000800:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000802:	4b09      	ldr	r3, [pc, #36]	; (8000828 <HAL_MspInit+0x44>)
 8000804:	69db      	ldr	r3, [r3, #28]
 8000806:	4a08      	ldr	r2, [pc, #32]	; (8000828 <HAL_MspInit+0x44>)
 8000808:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800080c:	61d3      	str	r3, [r2, #28]
 800080e:	4b06      	ldr	r3, [pc, #24]	; (8000828 <HAL_MspInit+0x44>)
 8000810:	69db      	ldr	r3, [r3, #28]
 8000812:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000816:	603b      	str	r3, [r7, #0]
 8000818:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800081a:	bf00      	nop
 800081c:	370c      	adds	r7, #12
 800081e:	46bd      	mov	sp, r7
 8000820:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000824:	4770      	bx	lr
 8000826:	bf00      	nop
 8000828:	40021000 	.word	0x40021000

0800082c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 800082c:	b480      	push	{r7}
 800082e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000830:	e7fe      	b.n	8000830 <NMI_Handler+0x4>

08000832 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000832:	b480      	push	{r7}
 8000834:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000836:	e7fe      	b.n	8000836 <HardFault_Handler+0x4>

08000838 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000838:	b480      	push	{r7}
 800083a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 800083c:	e7fe      	b.n	800083c <MemManage_Handler+0x4>

0800083e <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800083e:	b480      	push	{r7}
 8000840:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000842:	e7fe      	b.n	8000842 <BusFault_Handler+0x4>

08000844 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000844:	b480      	push	{r7}
 8000846:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000848:	e7fe      	b.n	8000848 <UsageFault_Handler+0x4>

0800084a <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800084a:	b480      	push	{r7}
 800084c:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 800084e:	bf00      	nop
 8000850:	46bd      	mov	sp, r7
 8000852:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000856:	4770      	bx	lr

08000858 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000858:	b480      	push	{r7}
 800085a:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800085c:	bf00      	nop
 800085e:	46bd      	mov	sp, r7
 8000860:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000864:	4770      	bx	lr

08000866 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000866:	b480      	push	{r7}
 8000868:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800086a:	bf00      	nop
 800086c:	46bd      	mov	sp, r7
 800086e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000872:	4770      	bx	lr

08000874 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000874:	b580      	push	{r7, lr}
 8000876:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000878:	f000 fa0a 	bl	8000c90 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 800087c:	bf00      	nop
 800087e:	bd80      	pop	{r7, pc}

08000880 <TIM3_IRQHandler>:

/**
  * @brief This function handles TIM3 global interrupt.
  */
void TIM3_IRQHandler(void)
{
 8000880:	b580      	push	{r7, lr}
 8000882:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM3_IRQn 0 */

  /* USER CODE END TIM3_IRQn 0 */
  HAL_TIM_IRQHandler(&htim3);
 8000884:	4802      	ldr	r0, [pc, #8]	; (8000890 <TIM3_IRQHandler+0x10>)
 8000886:	f003 f818 	bl	80038ba <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM3_IRQn 1 */

  /* USER CODE END TIM3_IRQn 1 */
}
 800088a:	bf00      	nop
 800088c:	bd80      	pop	{r7, pc}
 800088e:	bf00      	nop
 8000890:	200000bc 	.word	0x200000bc

08000894 <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt / USART1 wake-up interrupt through EXTI line 25.
  */
void USART1_IRQHandler(void)
{
 8000894:	b580      	push	{r7, lr}
 8000896:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 8000898:	4802      	ldr	r0, [pc, #8]	; (80008a4 <USART1_IRQHandler+0x10>)
 800089a:	f003 fc87 	bl	80041ac <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 800089e:	bf00      	nop
 80008a0:	bd80      	pop	{r7, pc}
 80008a2:	bf00      	nop
 80008a4:	2000010c 	.word	0x2000010c

080008a8 <SystemInit>:
  * @brief  Setup the microcontroller system
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80008a8:	b480      	push	{r7}
 80008aa:	af00      	add	r7, sp, #0
/* FPU settings --------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 80008ac:	4b06      	ldr	r3, [pc, #24]	; (80008c8 <SystemInit+0x20>)
 80008ae:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80008b2:	4a05      	ldr	r2, [pc, #20]	; (80008c8 <SystemInit+0x20>)
 80008b4:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80008b8:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80008bc:	bf00      	nop
 80008be:	46bd      	mov	sp, r7
 80008c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80008c4:	4770      	bx	lr
 80008c6:	bf00      	nop
 80008c8:	e000ed00 	.word	0xe000ed00

080008cc <MX_TIM3_Init>:

TIM_HandleTypeDef htim3;

/* TIM3 init function */
void MX_TIM3_Init(void)
{
 80008cc:	b580      	push	{r7, lr}
 80008ce:	b086      	sub	sp, #24
 80008d0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80008d2:	f107 0308 	add.w	r3, r7, #8
 80008d6:	2200      	movs	r2, #0
 80008d8:	601a      	str	r2, [r3, #0]
 80008da:	605a      	str	r2, [r3, #4]
 80008dc:	609a      	str	r2, [r3, #8]
 80008de:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80008e0:	463b      	mov	r3, r7
 80008e2:	2200      	movs	r2, #0
 80008e4:	601a      	str	r2, [r3, #0]
 80008e6:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 80008e8:	4b1d      	ldr	r3, [pc, #116]	; (8000960 <MX_TIM3_Init+0x94>)
 80008ea:	4a1e      	ldr	r2, [pc, #120]	; (8000964 <MX_TIM3_Init+0x98>)
 80008ec:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 1112;
 80008ee:	4b1c      	ldr	r3, [pc, #112]	; (8000960 <MX_TIM3_Init+0x94>)
 80008f0:	f44f 628b 	mov.w	r2, #1112	; 0x458
 80008f4:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 80008f6:	4b1a      	ldr	r3, [pc, #104]	; (8000960 <MX_TIM3_Init+0x94>)
 80008f8:	2200      	movs	r2, #0
 80008fa:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 64689;
 80008fc:	4b18      	ldr	r3, [pc, #96]	; (8000960 <MX_TIM3_Init+0x94>)
 80008fe:	f64f 42b1 	movw	r2, #64689	; 0xfcb1
 8000902:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000904:	4b16      	ldr	r3, [pc, #88]	; (8000960 <MX_TIM3_Init+0x94>)
 8000906:	2200      	movs	r2, #0
 8000908:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800090a:	4b15      	ldr	r3, [pc, #84]	; (8000960 <MX_TIM3_Init+0x94>)
 800090c:	2200      	movs	r2, #0
 800090e:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 8000910:	4813      	ldr	r0, [pc, #76]	; (8000960 <MX_TIM3_Init+0x94>)
 8000912:	f002 ff83 	bl	800381c <HAL_TIM_Base_Init>
 8000916:	4603      	mov	r3, r0
 8000918:	2b00      	cmp	r3, #0
 800091a:	d001      	beq.n	8000920 <MX_TIM3_Init+0x54>
  {
    Error_Handler();
 800091c:	f7ff feda 	bl	80006d4 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000920:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000924:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 8000926:	f107 0308 	add.w	r3, r7, #8
 800092a:	4619      	mov	r1, r3
 800092c:	480c      	ldr	r0, [pc, #48]	; (8000960 <MX_TIM3_Init+0x94>)
 800092e:	f003 f8cc 	bl	8003aca <HAL_TIM_ConfigClockSource>
 8000932:	4603      	mov	r3, r0
 8000934:	2b00      	cmp	r3, #0
 8000936:	d001      	beq.n	800093c <MX_TIM3_Init+0x70>
  {
    Error_Handler();
 8000938:	f7ff fecc 	bl	80006d4 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800093c:	2300      	movs	r3, #0
 800093e:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000940:	2300      	movs	r3, #0
 8000942:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8000944:	463b      	mov	r3, r7
 8000946:	4619      	mov	r1, r3
 8000948:	4805      	ldr	r0, [pc, #20]	; (8000960 <MX_TIM3_Init+0x94>)
 800094a:	f003 faeb 	bl	8003f24 <HAL_TIMEx_MasterConfigSynchronization>
 800094e:	4603      	mov	r3, r0
 8000950:	2b00      	cmp	r3, #0
 8000952:	d001      	beq.n	8000958 <MX_TIM3_Init+0x8c>
  {
    Error_Handler();
 8000954:	f7ff febe 	bl	80006d4 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */

}
 8000958:	bf00      	nop
 800095a:	3718      	adds	r7, #24
 800095c:	46bd      	mov	sp, r7
 800095e:	bd80      	pop	{r7, pc}
 8000960:	200000bc 	.word	0x200000bc
 8000964:	40000400 	.word	0x40000400

08000968 <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 8000968:	b580      	push	{r7, lr}
 800096a:	b084      	sub	sp, #16
 800096c:	af00      	add	r7, sp, #0
 800096e:	6078      	str	r0, [r7, #4]

  if(tim_baseHandle->Instance==TIM3)
 8000970:	687b      	ldr	r3, [r7, #4]
 8000972:	681b      	ldr	r3, [r3, #0]
 8000974:	4a0d      	ldr	r2, [pc, #52]	; (80009ac <HAL_TIM_Base_MspInit+0x44>)
 8000976:	4293      	cmp	r3, r2
 8000978:	d113      	bne.n	80009a2 <HAL_TIM_Base_MspInit+0x3a>
  {
  /* USER CODE BEGIN TIM3_MspInit 0 */

  /* USER CODE END TIM3_MspInit 0 */
    /* TIM3 clock enable */
    __HAL_RCC_TIM3_CLK_ENABLE();
 800097a:	4b0d      	ldr	r3, [pc, #52]	; (80009b0 <HAL_TIM_Base_MspInit+0x48>)
 800097c:	69db      	ldr	r3, [r3, #28]
 800097e:	4a0c      	ldr	r2, [pc, #48]	; (80009b0 <HAL_TIM_Base_MspInit+0x48>)
 8000980:	f043 0302 	orr.w	r3, r3, #2
 8000984:	61d3      	str	r3, [r2, #28]
 8000986:	4b0a      	ldr	r3, [pc, #40]	; (80009b0 <HAL_TIM_Base_MspInit+0x48>)
 8000988:	69db      	ldr	r3, [r3, #28]
 800098a:	f003 0302 	and.w	r3, r3, #2
 800098e:	60fb      	str	r3, [r7, #12]
 8000990:	68fb      	ldr	r3, [r7, #12]

    /* TIM3 interrupt Init */
    HAL_NVIC_SetPriority(TIM3_IRQn, 0, 0);
 8000992:	2200      	movs	r2, #0
 8000994:	2100      	movs	r1, #0
 8000996:	201d      	movs	r0, #29
 8000998:	f000 fca3 	bl	80012e2 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM3_IRQn);
 800099c:	201d      	movs	r0, #29
 800099e:	f000 fcbc 	bl	800131a <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM3_MspInit 1 */

  /* USER CODE END TIM3_MspInit 1 */
  }
}
 80009a2:	bf00      	nop
 80009a4:	3710      	adds	r7, #16
 80009a6:	46bd      	mov	sp, r7
 80009a8:	bd80      	pop	{r7, pc}
 80009aa:	bf00      	nop
 80009ac:	40000400 	.word	0x40000400
 80009b0:	40021000 	.word	0x40021000

080009b4 <MX_USART1_UART_Init>:
UART_HandleTypeDef huart1;

/* USART1 init function */

void MX_USART1_UART_Init(void)
{
 80009b4:	b580      	push	{r7, lr}
 80009b6:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 80009b8:	4b14      	ldr	r3, [pc, #80]	; (8000a0c <MX_USART1_UART_Init+0x58>)
 80009ba:	4a15      	ldr	r2, [pc, #84]	; (8000a10 <MX_USART1_UART_Init+0x5c>)
 80009bc:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 38400;
 80009be:	4b13      	ldr	r3, [pc, #76]	; (8000a0c <MX_USART1_UART_Init+0x58>)
 80009c0:	f44f 4216 	mov.w	r2, #38400	; 0x9600
 80009c4:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 80009c6:	4b11      	ldr	r3, [pc, #68]	; (8000a0c <MX_USART1_UART_Init+0x58>)
 80009c8:	2200      	movs	r2, #0
 80009ca:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 80009cc:	4b0f      	ldr	r3, [pc, #60]	; (8000a0c <MX_USART1_UART_Init+0x58>)
 80009ce:	2200      	movs	r2, #0
 80009d0:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 80009d2:	4b0e      	ldr	r3, [pc, #56]	; (8000a0c <MX_USART1_UART_Init+0x58>)
 80009d4:	2200      	movs	r2, #0
 80009d6:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 80009d8:	4b0c      	ldr	r3, [pc, #48]	; (8000a0c <MX_USART1_UART_Init+0x58>)
 80009da:	220c      	movs	r2, #12
 80009dc:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80009de:	4b0b      	ldr	r3, [pc, #44]	; (8000a0c <MX_USART1_UART_Init+0x58>)
 80009e0:	2200      	movs	r2, #0
 80009e2:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 80009e4:	4b09      	ldr	r3, [pc, #36]	; (8000a0c <MX_USART1_UART_Init+0x58>)
 80009e6:	2200      	movs	r2, #0
 80009e8:	61da      	str	r2, [r3, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80009ea:	4b08      	ldr	r3, [pc, #32]	; (8000a0c <MX_USART1_UART_Init+0x58>)
 80009ec:	2200      	movs	r2, #0
 80009ee:	621a      	str	r2, [r3, #32]
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 80009f0:	4b06      	ldr	r3, [pc, #24]	; (8000a0c <MX_USART1_UART_Init+0x58>)
 80009f2:	2200      	movs	r2, #0
 80009f4:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart1) != HAL_OK)
 80009f6:	4805      	ldr	r0, [pc, #20]	; (8000a0c <MX_USART1_UART_Init+0x58>)
 80009f8:	f003 fb1c 	bl	8004034 <HAL_UART_Init>
 80009fc:	4603      	mov	r3, r0
 80009fe:	2b00      	cmp	r3, #0
 8000a00:	d001      	beq.n	8000a06 <MX_USART1_UART_Init+0x52>
  {
    Error_Handler();
 8000a02:	f7ff fe67 	bl	80006d4 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8000a06:	bf00      	nop
 8000a08:	bd80      	pop	{r7, pc}
 8000a0a:	bf00      	nop
 8000a0c:	2000010c 	.word	0x2000010c
 8000a10:	40013800 	.word	0x40013800

08000a14 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8000a14:	b580      	push	{r7, lr}
 8000a16:	b08a      	sub	sp, #40	; 0x28
 8000a18:	af00      	add	r7, sp, #0
 8000a1a:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000a1c:	f107 0314 	add.w	r3, r7, #20
 8000a20:	2200      	movs	r2, #0
 8000a22:	601a      	str	r2, [r3, #0]
 8000a24:	605a      	str	r2, [r3, #4]
 8000a26:	609a      	str	r2, [r3, #8]
 8000a28:	60da      	str	r2, [r3, #12]
 8000a2a:	611a      	str	r2, [r3, #16]
  if(uartHandle->Instance==USART1)
 8000a2c:	687b      	ldr	r3, [r7, #4]
 8000a2e:	681b      	ldr	r3, [r3, #0]
 8000a30:	4a1c      	ldr	r2, [pc, #112]	; (8000aa4 <HAL_UART_MspInit+0x90>)
 8000a32:	4293      	cmp	r3, r2
 8000a34:	d131      	bne.n	8000a9a <HAL_UART_MspInit+0x86>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* USART1 clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8000a36:	4b1c      	ldr	r3, [pc, #112]	; (8000aa8 <HAL_UART_MspInit+0x94>)
 8000a38:	699b      	ldr	r3, [r3, #24]
 8000a3a:	4a1b      	ldr	r2, [pc, #108]	; (8000aa8 <HAL_UART_MspInit+0x94>)
 8000a3c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000a40:	6193      	str	r3, [r2, #24]
 8000a42:	4b19      	ldr	r3, [pc, #100]	; (8000aa8 <HAL_UART_MspInit+0x94>)
 8000a44:	699b      	ldr	r3, [r3, #24]
 8000a46:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000a4a:	613b      	str	r3, [r7, #16]
 8000a4c:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000a4e:	4b16      	ldr	r3, [pc, #88]	; (8000aa8 <HAL_UART_MspInit+0x94>)
 8000a50:	695b      	ldr	r3, [r3, #20]
 8000a52:	4a15      	ldr	r2, [pc, #84]	; (8000aa8 <HAL_UART_MspInit+0x94>)
 8000a54:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000a58:	6153      	str	r3, [r2, #20]
 8000a5a:	4b13      	ldr	r3, [pc, #76]	; (8000aa8 <HAL_UART_MspInit+0x94>)
 8000a5c:	695b      	ldr	r3, [r3, #20]
 8000a5e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000a62:	60fb      	str	r3, [r7, #12]
 8000a64:	68fb      	ldr	r3, [r7, #12]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = DXL_P_Pin|DXL_N_Pin;
 8000a66:	f44f 63c0 	mov.w	r3, #1536	; 0x600
 8000a6a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000a6c:	2302      	movs	r3, #2
 8000a6e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a70:	2300      	movs	r3, #0
 8000a72:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000a74:	2303      	movs	r3, #3
 8000a76:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8000a78:	2307      	movs	r3, #7
 8000a7a:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000a7c:	f107 0314 	add.w	r3, r7, #20
 8000a80:	4619      	mov	r1, r3
 8000a82:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000a86:	f000 fcd9 	bl	800143c <HAL_GPIO_Init>

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 0, 0);
 8000a8a:	2200      	movs	r2, #0
 8000a8c:	2100      	movs	r1, #0
 8000a8e:	2025      	movs	r0, #37	; 0x25
 8000a90:	f000 fc27 	bl	80012e2 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 8000a94:	2025      	movs	r0, #37	; 0x25
 8000a96:	f000 fc40 	bl	800131a <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }
}
 8000a9a:	bf00      	nop
 8000a9c:	3728      	adds	r7, #40	; 0x28
 8000a9e:	46bd      	mov	sp, r7
 8000aa0:	bd80      	pop	{r7, pc}
 8000aa2:	bf00      	nop
 8000aa4:	40013800 	.word	0x40013800
 8000aa8:	40021000 	.word	0x40021000

08000aac <HAL_UART_TxCpltCallback>:
}

/* USER CODE BEGIN 1 */
/* ISR */
void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8000aac:	b480      	push	{r7}
 8000aae:	b083      	sub	sp, #12
 8000ab0:	af00      	add	r7, sp, #0
 8000ab2:	6078      	str	r0, [r7, #4]
	/* Tx Complete Signal */
	huart1_ITh.Tx_State = Tx_FINISHED;
 8000ab4:	4b04      	ldr	r3, [pc, #16]	; (8000ac8 <HAL_UART_TxCpltCallback+0x1c>)
 8000ab6:	2200      	movs	r2, #0
 8000ab8:	701a      	strb	r2, [r3, #0]
}
 8000aba:	bf00      	nop
 8000abc:	370c      	adds	r7, #12
 8000abe:	46bd      	mov	sp, r7
 8000ac0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ac4:	4770      	bx	lr
 8000ac6:	bf00      	nop
 8000ac8:	20000108 	.word	0x20000108

08000acc <NUfsr_UART_Transmit>:
	huart1_ITh.Rx_State = Rx_FINISHED;
}

/* Tx and Rx operations */
HAL_StatusTypeDef NUfsr_UART_Transmit(UART_HandleTypeDef *huart, void *pData, uint16_t Byte_Size)
{
 8000acc:	b580      	push	{r7, lr}
 8000ace:	b086      	sub	sp, #24
 8000ad0:	af00      	add	r7, sp, #0
 8000ad2:	60f8      	str	r0, [r7, #12]
 8000ad4:	60b9      	str	r1, [r7, #8]
 8000ad6:	4613      	mov	r3, r2
 8000ad8:	80fb      	strh	r3, [r7, #6]
	// Error checking
	if((huart == NULL) || (pData == NULL) || (Byte_Size == 0U))
 8000ada:	68fb      	ldr	r3, [r7, #12]
 8000adc:	2b00      	cmp	r3, #0
 8000ade:	d005      	beq.n	8000aec <NUfsr_UART_Transmit+0x20>
 8000ae0:	68bb      	ldr	r3, [r7, #8]
 8000ae2:	2b00      	cmp	r3, #0
 8000ae4:	d002      	beq.n	8000aec <NUfsr_UART_Transmit+0x20>
 8000ae6:	88fb      	ldrh	r3, [r7, #6]
 8000ae8:	2b00      	cmp	r3, #0
 8000aea:	d101      	bne.n	8000af0 <NUfsr_UART_Transmit+0x24>
		return HAL_ERROR;
 8000aec:	2301      	movs	r3, #1
 8000aee:	e01c      	b.n	8000b2a <NUfsr_UART_Transmit+0x5e>

	HAL_StatusTypeDef state;

	// Wait for Rx poll
	if((state = NUfsr_UART_Poll_Rx(huart, HAL_MAX_DELAY)) != HAL_OK)
 8000af0:	f04f 31ff 	mov.w	r1, #4294967295
 8000af4:	68f8      	ldr	r0, [r7, #12]
 8000af6:	f000 f81f 	bl	8000b38 <NUfsr_UART_Poll_Rx>
 8000afa:	4603      	mov	r3, r0
 8000afc:	75fb      	strb	r3, [r7, #23]
 8000afe:	7dfb      	ldrb	r3, [r7, #23]
 8000b00:	2b00      	cmp	r3, #0
 8000b02:	d001      	beq.n	8000b08 <NUfsr_UART_Transmit+0x3c>
		return state;
 8000b04:	7dfb      	ldrb	r3, [r7, #23]
 8000b06:	e010      	b.n	8000b2a <NUfsr_UART_Transmit+0x5e>

	// Update Tx state
	huart1_ITh.Tx_State = Tx_NOT_FINISHED;
 8000b08:	4b0a      	ldr	r3, [pc, #40]	; (8000b34 <NUfsr_UART_Transmit+0x68>)
 8000b0a:	2201      	movs	r2, #1
 8000b0c:	701a      	strb	r2, [r3, #0]

	// Set DXL_DIR
	HAL_GPIO_WritePin(GPIOA, GPIO_PIN_8, Tx);
 8000b0e:	2201      	movs	r2, #1
 8000b10:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000b14:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000b18:	f000 fe0a 	bl	8001730 <HAL_GPIO_WritePin>

	// Begin transmission
	return HAL_UART_Transmit_IT(huart, (uint8_t*)pData, Byte_Size);
 8000b1c:	88fb      	ldrh	r3, [r7, #6]
 8000b1e:	461a      	mov	r2, r3
 8000b20:	68b9      	ldr	r1, [r7, #8]
 8000b22:	68f8      	ldr	r0, [r7, #12]
 8000b24:	f003 fad4 	bl	80040d0 <HAL_UART_Transmit_IT>
 8000b28:	4603      	mov	r3, r0

}
 8000b2a:	4618      	mov	r0, r3
 8000b2c:	3718      	adds	r7, #24
 8000b2e:	46bd      	mov	sp, r7
 8000b30:	bd80      	pop	{r7, pc}
 8000b32:	bf00      	nop
 8000b34:	20000108 	.word	0x20000108

08000b38 <NUfsr_UART_Poll_Rx>:

	return HAL_OK;
}

HAL_StatusTypeDef NUfsr_UART_Poll_Rx(UART_HandleTypeDef *huart, uint32_t Timeout)
{
 8000b38:	b580      	push	{r7, lr}
 8000b3a:	b084      	sub	sp, #16
 8000b3c:	af00      	add	r7, sp, #0
 8000b3e:	6078      	str	r0, [r7, #4]
 8000b40:	6039      	str	r1, [r7, #0]
	// Error checking
	if(huart == NULL)
 8000b42:	687b      	ldr	r3, [r7, #4]
 8000b44:	2b00      	cmp	r3, #0
 8000b46:	d101      	bne.n	8000b4c <NUfsr_UART_Poll_Rx+0x14>
		return HAL_ERROR;
 8000b48:	2301      	movs	r3, #1
 8000b4a:	e018      	b.n	8000b7e <NUfsr_UART_Poll_Rx+0x46>

	uint32_t tickstart = HAL_GetTick();
 8000b4c:	f000 f8b4 	bl	8000cb8 <HAL_GetTick>
 8000b50:	60f8      	str	r0, [r7, #12]

	// Begin Polling
	while(!NUfsr_UART_Rx_StatusComplete(huart))
 8000b52:	e00d      	b.n	8000b70 <NUfsr_UART_Poll_Rx+0x38>
	{
		if(Timeout != HAL_MAX_DELAY)
 8000b54:	683b      	ldr	r3, [r7, #0]
 8000b56:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000b5a:	d009      	beq.n	8000b70 <NUfsr_UART_Poll_Rx+0x38>
		{
			if(HAL_GetTick() - tickstart > Timeout)
 8000b5c:	f000 f8ac 	bl	8000cb8 <HAL_GetTick>
 8000b60:	4602      	mov	r2, r0
 8000b62:	68fb      	ldr	r3, [r7, #12]
 8000b64:	1ad3      	subs	r3, r2, r3
 8000b66:	683a      	ldr	r2, [r7, #0]
 8000b68:	429a      	cmp	r2, r3
 8000b6a:	d201      	bcs.n	8000b70 <NUfsr_UART_Poll_Rx+0x38>
			{
				// Handle Error
				return HAL_ERROR;
 8000b6c:	2301      	movs	r3, #1
 8000b6e:	e006      	b.n	8000b7e <NUfsr_UART_Poll_Rx+0x46>
	while(!NUfsr_UART_Rx_StatusComplete(huart))
 8000b70:	6878      	ldr	r0, [r7, #4]
 8000b72:	f000 f809 	bl	8000b88 <NUfsr_UART_Rx_StatusComplete>
 8000b76:	4603      	mov	r3, r0
 8000b78:	2b00      	cmp	r3, #0
 8000b7a:	d0eb      	beq.n	8000b54 <NUfsr_UART_Poll_Rx+0x1c>
			}
		}
	}

	return HAL_OK;
 8000b7c:	2300      	movs	r3, #0
}
 8000b7e:	4618      	mov	r0, r3
 8000b80:	3710      	adds	r7, #16
 8000b82:	46bd      	mov	sp, r7
 8000b84:	bd80      	pop	{r7, pc}
	...

08000b88 <NUfsr_UART_Rx_StatusComplete>:

	return 0;
}

uint32_t NUfsr_UART_Rx_StatusComplete(UART_HandleTypeDef *huart)
{
 8000b88:	b480      	push	{r7}
 8000b8a:	b083      	sub	sp, #12
 8000b8c:	af00      	add	r7, sp, #0
 8000b8e:	6078      	str	r0, [r7, #4]
	if(huart1_ITh.Rx_State == Rx_FINISHED)
 8000b90:	4b06      	ldr	r3, [pc, #24]	; (8000bac <NUfsr_UART_Rx_StatusComplete+0x24>)
 8000b92:	785b      	ldrb	r3, [r3, #1]
 8000b94:	b2db      	uxtb	r3, r3
 8000b96:	2b00      	cmp	r3, #0
 8000b98:	d101      	bne.n	8000b9e <NUfsr_UART_Rx_StatusComplete+0x16>
		return 1;
 8000b9a:	2301      	movs	r3, #1
 8000b9c:	e000      	b.n	8000ba0 <NUfsr_UART_Rx_StatusComplete+0x18>

	return 0;
 8000b9e:	2300      	movs	r3, #0
}
 8000ba0:	4618      	mov	r0, r3
 8000ba2:	370c      	adds	r7, #12
 8000ba4:	46bd      	mov	sp, r7
 8000ba6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000baa:	4770      	bx	lr
 8000bac:	20000108 	.word	0x20000108

08000bb0 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 8000bb0:	f8df d034 	ldr.w	sp, [pc, #52]	; 8000be8 <LoopForever+0x2>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000bb4:	480d      	ldr	r0, [pc, #52]	; (8000bec <LoopForever+0x6>)
  ldr r1, =_edata
 8000bb6:	490e      	ldr	r1, [pc, #56]	; (8000bf0 <LoopForever+0xa>)
  ldr r2, =_sidata
 8000bb8:	4a0e      	ldr	r2, [pc, #56]	; (8000bf4 <LoopForever+0xe>)
  movs r3, #0
 8000bba:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000bbc:	e002      	b.n	8000bc4 <LoopCopyDataInit>

08000bbe <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000bbe:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000bc0:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000bc2:	3304      	adds	r3, #4

08000bc4 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000bc4:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000bc6:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000bc8:	d3f9      	bcc.n	8000bbe <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000bca:	4a0b      	ldr	r2, [pc, #44]	; (8000bf8 <LoopForever+0x12>)
  ldr r4, =_ebss
 8000bcc:	4c0b      	ldr	r4, [pc, #44]	; (8000bfc <LoopForever+0x16>)
  movs r3, #0
 8000bce:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000bd0:	e001      	b.n	8000bd6 <LoopFillZerobss>

08000bd2 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000bd2:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000bd4:	3204      	adds	r2, #4

08000bd6 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000bd6:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000bd8:	d3fb      	bcc.n	8000bd2 <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 8000bda:	f7ff fe65 	bl	80008a8 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8000bde:	f004 fa6b 	bl	80050b8 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8000be2:	f7ff fcd9 	bl	8000598 <main>

08000be6 <LoopForever>:

LoopForever:
    b LoopForever
 8000be6:	e7fe      	b.n	8000be6 <LoopForever>
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 8000be8:	20008000 	.word	0x20008000
  ldr r0, =_sdata
 8000bec:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000bf0:	2000000c 	.word	0x2000000c
  ldr r2, =_sidata
 8000bf4:	08005168 	.word	0x08005168
  ldr r2, =_sbss
 8000bf8:	2000000c 	.word	0x2000000c
  ldr r4, =_ebss
 8000bfc:	20000194 	.word	0x20000194

08000c00 <ADC1_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8000c00:	e7fe      	b.n	8000c00 <ADC1_IRQHandler>
	...

08000c04 <HAL_Init>:
  *         In the default implementation,Systick is used as source of time base.
  *       The tick variable is incremented each 1ms in its ISR.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000c04:	b580      	push	{r7, lr}
 8000c06:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch */
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000c08:	4b08      	ldr	r3, [pc, #32]	; (8000c2c <HAL_Init+0x28>)
 8000c0a:	681b      	ldr	r3, [r3, #0]
 8000c0c:	4a07      	ldr	r2, [pc, #28]	; (8000c2c <HAL_Init+0x28>)
 8000c0e:	f043 0310 	orr.w	r3, r3, #16
 8000c12:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000c14:	2003      	movs	r0, #3
 8000c16:	f000 fb59 	bl	80012cc <HAL_NVIC_SetPriorityGrouping>

  /* Enable systick and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000c1a:	2000      	movs	r0, #0
 8000c1c:	f000 f808 	bl	8000c30 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000c20:	f7ff fde0 	bl	80007e4 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000c24:	2300      	movs	r3, #0
}
 8000c26:	4618      	mov	r0, r3
 8000c28:	bd80      	pop	{r7, pc}
 8000c2a:	bf00      	nop
 8000c2c:	40022000 	.word	0x40022000

08000c30 <HAL_InitTick>:
  *         implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000c30:	b580      	push	{r7, lr}
 8000c32:	b082      	sub	sp, #8
 8000c34:	af00      	add	r7, sp, #0
 8000c36:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000c38:	4b12      	ldr	r3, [pc, #72]	; (8000c84 <HAL_InitTick+0x54>)
 8000c3a:	681a      	ldr	r2, [r3, #0]
 8000c3c:	4b12      	ldr	r3, [pc, #72]	; (8000c88 <HAL_InitTick+0x58>)
 8000c3e:	781b      	ldrb	r3, [r3, #0]
 8000c40:	4619      	mov	r1, r3
 8000c42:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000c46:	fbb3 f3f1 	udiv	r3, r3, r1
 8000c4a:	fbb2 f3f3 	udiv	r3, r2, r3
 8000c4e:	4618      	mov	r0, r3
 8000c50:	f000 fb71 	bl	8001336 <HAL_SYSTICK_Config>
 8000c54:	4603      	mov	r3, r0
 8000c56:	2b00      	cmp	r3, #0
 8000c58:	d001      	beq.n	8000c5e <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8000c5a:	2301      	movs	r3, #1
 8000c5c:	e00e      	b.n	8000c7c <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000c5e:	687b      	ldr	r3, [r7, #4]
 8000c60:	2b0f      	cmp	r3, #15
 8000c62:	d80a      	bhi.n	8000c7a <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000c64:	2200      	movs	r2, #0
 8000c66:	6879      	ldr	r1, [r7, #4]
 8000c68:	f04f 30ff 	mov.w	r0, #4294967295
 8000c6c:	f000 fb39 	bl	80012e2 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000c70:	4a06      	ldr	r2, [pc, #24]	; (8000c8c <HAL_InitTick+0x5c>)
 8000c72:	687b      	ldr	r3, [r7, #4]
 8000c74:	6013      	str	r3, [r2, #0]
  else
  {
    return HAL_ERROR;
  }
   /* Return function status */
  return HAL_OK;
 8000c76:	2300      	movs	r3, #0
 8000c78:	e000      	b.n	8000c7c <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8000c7a:	2301      	movs	r3, #1
}
 8000c7c:	4618      	mov	r0, r3
 8000c7e:	3708      	adds	r7, #8
 8000c80:	46bd      	mov	sp, r7
 8000c82:	bd80      	pop	{r7, pc}
 8000c84:	20000000 	.word	0x20000000
 8000c88:	20000008 	.word	0x20000008
 8000c8c:	20000004 	.word	0x20000004

08000c90 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *         implementations  in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000c90:	b480      	push	{r7}
 8000c92:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000c94:	4b06      	ldr	r3, [pc, #24]	; (8000cb0 <HAL_IncTick+0x20>)
 8000c96:	781b      	ldrb	r3, [r3, #0]
 8000c98:	461a      	mov	r2, r3
 8000c9a:	4b06      	ldr	r3, [pc, #24]	; (8000cb4 <HAL_IncTick+0x24>)
 8000c9c:	681b      	ldr	r3, [r3, #0]
 8000c9e:	4413      	add	r3, r2
 8000ca0:	4a04      	ldr	r2, [pc, #16]	; (8000cb4 <HAL_IncTick+0x24>)
 8000ca2:	6013      	str	r3, [r2, #0]
}
 8000ca4:	bf00      	nop
 8000ca6:	46bd      	mov	sp, r7
 8000ca8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cac:	4770      	bx	lr
 8000cae:	bf00      	nop
 8000cb0:	20000008 	.word	0x20000008
 8000cb4:	20000190 	.word	0x20000190

08000cb8 <HAL_GetTick>:
  * @note   The function is declared as __Weak  to be overwritten  in case of other 
  *         implementations  in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000cb8:	b480      	push	{r7}
 8000cba:	af00      	add	r7, sp, #0
  return uwTick;  
 8000cbc:	4b03      	ldr	r3, [pc, #12]	; (8000ccc <HAL_GetTick+0x14>)
 8000cbe:	681b      	ldr	r3, [r3, #0]
}
 8000cc0:	4618      	mov	r0, r3
 8000cc2:	46bd      	mov	sp, r7
 8000cc4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cc8:	4770      	bx	lr
 8000cca:	bf00      	nop
 8000ccc:	20000190 	.word	0x20000190

08000cd0 <HAL_Delay>:
  *         implementations  in user file.
  * @param  Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000cd0:	b580      	push	{r7, lr}
 8000cd2:	b084      	sub	sp, #16
 8000cd4:	af00      	add	r7, sp, #0
 8000cd6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8000cd8:	f7ff ffee 	bl	8000cb8 <HAL_GetTick>
 8000cdc:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8000cde:	687b      	ldr	r3, [r7, #4]
 8000ce0:	60fb      	str	r3, [r7, #12]
  
  /* Add freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000ce2:	68fb      	ldr	r3, [r7, #12]
 8000ce4:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000ce8:	d005      	beq.n	8000cf6 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8000cea:	4b0a      	ldr	r3, [pc, #40]	; (8000d14 <HAL_Delay+0x44>)
 8000cec:	781b      	ldrb	r3, [r3, #0]
 8000cee:	461a      	mov	r2, r3
 8000cf0:	68fb      	ldr	r3, [r7, #12]
 8000cf2:	4413      	add	r3, r2
 8000cf4:	60fb      	str	r3, [r7, #12]
  }
  
  while((HAL_GetTick() - tickstart) < wait)
 8000cf6:	bf00      	nop
 8000cf8:	f7ff ffde 	bl	8000cb8 <HAL_GetTick>
 8000cfc:	4602      	mov	r2, r0
 8000cfe:	68bb      	ldr	r3, [r7, #8]
 8000d00:	1ad3      	subs	r3, r2, r3
 8000d02:	68fa      	ldr	r2, [r7, #12]
 8000d04:	429a      	cmp	r2, r3
 8000d06:	d8f7      	bhi.n	8000cf8 <HAL_Delay+0x28>
  {
  }
}
 8000d08:	bf00      	nop
 8000d0a:	bf00      	nop
 8000d0c:	3710      	adds	r7, #16
 8000d0e:	46bd      	mov	sp, r7
 8000d10:	bd80      	pop	{r7, pc}
 8000d12:	bf00      	nop
 8000d14:	20000008 	.word	0x20000008

08000d18 <HAL_ADC_Init>:
  *         of structure "ADC_InitTypeDef".
  * @param  hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 8000d18:	b580      	push	{r7, lr}
 8000d1a:	b086      	sub	sp, #24
 8000d1c:	af00      	add	r7, sp, #0
 8000d1e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8000d20:	2300      	movs	r3, #0
 8000d22:	75fb      	strb	r3, [r7, #23]
  uint32_t tmp_cr1 = 0U;
 8000d24:	2300      	movs	r3, #0
 8000d26:	613b      	str	r3, [r7, #16]
  uint32_t tmp_cr2 = 0U;
 8000d28:	2300      	movs	r3, #0
 8000d2a:	60bb      	str	r3, [r7, #8]
  uint32_t tmp_sqr1 = 0U;
 8000d2c:	2300      	movs	r3, #0
 8000d2e:	60fb      	str	r3, [r7, #12]
  
  /* Check ADC handle */
  if(hadc == NULL)
 8000d30:	687b      	ldr	r3, [r7, #4]
 8000d32:	2b00      	cmp	r3, #0
 8000d34:	d101      	bne.n	8000d3a <HAL_ADC_Init+0x22>
  {
    return HAL_ERROR;
 8000d36:	2301      	movs	r3, #1
 8000d38:	e0be      	b.n	8000eb8 <HAL_ADC_Init+0x1a0>
  assert_param(IS_ADC_DATA_ALIGN(hadc->Init.DataAlign));
  assert_param(IS_ADC_SCAN_MODE(hadc->Init.ScanConvMode));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXTTRIG(hadc->Init.ExternalTrigConv));
  
  if(hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 8000d3a:	687b      	ldr	r3, [r7, #4]
 8000d3c:	689b      	ldr	r3, [r3, #8]
 8000d3e:	2b00      	cmp	r3, #0
  /* Refer to header of this file for more details on clock enabling          */
  /* procedure.                                                               */

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 8000d40:	687b      	ldr	r3, [r7, #4]
 8000d42:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000d44:	2b00      	cmp	r3, #0
 8000d46:	d109      	bne.n	8000d5c <HAL_ADC_Init+0x44>
  {
    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 8000d48:	687b      	ldr	r3, [r7, #4]
 8000d4a:	2200      	movs	r2, #0
 8000d4c:	62da      	str	r2, [r3, #44]	; 0x2c
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 8000d4e:	687b      	ldr	r3, [r7, #4]
 8000d50:	2200      	movs	r2, #0
 8000d52:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
    
    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8000d56:	6878      	ldr	r0, [r7, #4]
 8000d58:	f7ff fa9a 	bl	8000290 <HAL_ADC_MspInit>
  /* Stop potential conversion on going, on regular and injected groups */
  /* Disable ADC peripheral */
  /* Note: In case of ADC already enabled, precaution to not launch an        */
  /*       unwanted conversion while modifying register CR2 by writing 1 to   */
  /*       bit ADON.                                                          */
  tmp_hal_status = ADC_ConversionStop_Disable(hadc);
 8000d5c:	6878      	ldr	r0, [r7, #4]
 8000d5e:	f000 f9a3 	bl	80010a8 <ADC_ConversionStop_Disable>
 8000d62:	4603      	mov	r3, r0
 8000d64:	75fb      	strb	r3, [r7, #23]
  
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL) &&
 8000d66:	687b      	ldr	r3, [r7, #4]
 8000d68:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000d6a:	f003 0310 	and.w	r3, r3, #16
 8000d6e:	2b00      	cmp	r3, #0
 8000d70:	f040 8099 	bne.w	8000ea6 <HAL_ADC_Init+0x18e>
 8000d74:	7dfb      	ldrb	r3, [r7, #23]
 8000d76:	2b00      	cmp	r3, #0
 8000d78:	f040 8095 	bne.w	8000ea6 <HAL_ADC_Init+0x18e>
      (tmp_hal_status == HAL_OK)                                  )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8000d7c:	687b      	ldr	r3, [r7, #4]
 8000d7e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000d80:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 8000d84:	f023 0302 	bic.w	r3, r3, #2
 8000d88:	f043 0202 	orr.w	r2, r3, #2
 8000d8c:	687b      	ldr	r3, [r7, #4]
 8000d8e:	629a      	str	r2, [r3, #40]	; 0x28
    /*  - continuous conversion mode                                          */
    /* Note: External trigger polarity (ADC_CR2_EXTTRIG) is set into          */
    /*       HAL_ADC_Start_xxx functions because if set in this function,     */
    /*       a conversion on injected group would start a conversion also on  */
    /*       regular group after ADC enabling.                                */
    tmp_cr2 |= (hadc->Init.DataAlign                             |
 8000d90:	687b      	ldr	r3, [r7, #4]
 8000d92:	685a      	ldr	r2, [r3, #4]
                hadc->Init.ExternalTrigConv                      |
 8000d94:	687b      	ldr	r3, [r7, #4]
 8000d96:	69db      	ldr	r3, [r3, #28]
    tmp_cr2 |= (hadc->Init.DataAlign                             |
 8000d98:	431a      	orrs	r2, r3
                ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode) );
 8000d9a:	687b      	ldr	r3, [r7, #4]
 8000d9c:	7b1b      	ldrb	r3, [r3, #12]
 8000d9e:	005b      	lsls	r3, r3, #1
                hadc->Init.ExternalTrigConv                      |
 8000da0:	4313      	orrs	r3, r2
    tmp_cr2 |= (hadc->Init.DataAlign                             |
 8000da2:	68ba      	ldr	r2, [r7, #8]
 8000da4:	4313      	orrs	r3, r2
 8000da6:	60bb      	str	r3, [r7, #8]
    
    /* Configuration of ADC:                                                  */
    /*  - scan mode                                                           */
    /*  - discontinuous mode disable/enable                                   */
    /*  - discontinuous mode number of conversions                            */
    tmp_cr1 |= (ADC_CR1_SCAN_SET(hadc->Init.ScanConvMode));
 8000da8:	687b      	ldr	r3, [r7, #4]
 8000daa:	689b      	ldr	r3, [r3, #8]
 8000dac:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8000db0:	d003      	beq.n	8000dba <HAL_ADC_Init+0xa2>
 8000db2:	687b      	ldr	r3, [r7, #4]
 8000db4:	689b      	ldr	r3, [r3, #8]
 8000db6:	2b01      	cmp	r3, #1
 8000db8:	d102      	bne.n	8000dc0 <HAL_ADC_Init+0xa8>
 8000dba:	f44f 7380 	mov.w	r3, #256	; 0x100
 8000dbe:	e000      	b.n	8000dc2 <HAL_ADC_Init+0xaa>
 8000dc0:	2300      	movs	r3, #0
 8000dc2:	693a      	ldr	r2, [r7, #16]
 8000dc4:	4313      	orrs	r3, r2
 8000dc6:	613b      	str	r3, [r7, #16]

    /* Enable discontinuous mode only if continuous mode is disabled */
    /* Note: If parameter "Init.ScanConvMode" is set to disable, parameter    */
    /*       discontinuous is set anyway, but will have no effect on ADC HW.  */
    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8000dc8:	687b      	ldr	r3, [r7, #4]
 8000dca:	7d1b      	ldrb	r3, [r3, #20]
 8000dcc:	2b01      	cmp	r3, #1
 8000dce:	d119      	bne.n	8000e04 <HAL_ADC_Init+0xec>
    {
      if (hadc->Init.ContinuousConvMode == DISABLE)
 8000dd0:	687b      	ldr	r3, [r7, #4]
 8000dd2:	7b1b      	ldrb	r3, [r3, #12]
 8000dd4:	2b00      	cmp	r3, #0
 8000dd6:	d109      	bne.n	8000dec <HAL_ADC_Init+0xd4>
      {
        /* Enable the selected ADC regular discontinuous mode */
        /* Set the number of channels to be converted in discontinuous mode */
      tmp_cr1 |= (ADC_CR1_DISCEN                                           |
                  ADC_CR1_DISCONTINUOUS_NUM(hadc->Init.NbrOfDiscConversion) );
 8000dd8:	687b      	ldr	r3, [r7, #4]
 8000dda:	699b      	ldr	r3, [r3, #24]
 8000ddc:	3b01      	subs	r3, #1
 8000dde:	035a      	lsls	r2, r3, #13
      tmp_cr1 |= (ADC_CR1_DISCEN                                           |
 8000de0:	693b      	ldr	r3, [r7, #16]
 8000de2:	4313      	orrs	r3, r2
 8000de4:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8000de8:	613b      	str	r3, [r7, #16]
 8000dea:	e00b      	b.n	8000e04 <HAL_ADC_Init+0xec>
        /* ADC regular group discontinuous was intended to be enabled,        */
        /* but ADC regular group modes continuous and sequencer discontinuous */
        /* cannot be enabled simultaneously.                                  */
        
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8000dec:	687b      	ldr	r3, [r7, #4]
 8000dee:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000df0:	f043 0220 	orr.w	r2, r3, #32
 8000df4:	687b      	ldr	r3, [r7, #4]
 8000df6:	629a      	str	r2, [r3, #40]	; 0x28
        
        /* Set ADC error code to ADC IP internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8000df8:	687b      	ldr	r3, [r7, #4]
 8000dfa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000dfc:	f043 0201 	orr.w	r2, r3, #1
 8000e00:	687b      	ldr	r3, [r7, #4]
 8000e02:	62da      	str	r2, [r3, #44]	; 0x2c
      }
    }
    
    /* Update ADC configuration register CR1 with previous settings */
      MODIFY_REG(hadc->Instance->CR1,
 8000e04:	687b      	ldr	r3, [r7, #4]
 8000e06:	681b      	ldr	r3, [r3, #0]
 8000e08:	685b      	ldr	r3, [r3, #4]
 8000e0a:	f423 4169 	bic.w	r1, r3, #59648	; 0xe900
 8000e0e:	687b      	ldr	r3, [r7, #4]
 8000e10:	681b      	ldr	r3, [r3, #0]
 8000e12:	693a      	ldr	r2, [r7, #16]
 8000e14:	430a      	orrs	r2, r1
 8000e16:	605a      	str	r2, [r3, #4]
                 ADC_CR1_DISCEN  |
                 ADC_CR1_DISCNUM    ,
                 tmp_cr1             );
    
    /* Update ADC configuration register CR2 with previous settings */
      MODIFY_REG(hadc->Instance->CR2,
 8000e18:	687b      	ldr	r3, [r7, #4]
 8000e1a:	681b      	ldr	r3, [r3, #0]
 8000e1c:	689a      	ldr	r2, [r3, #8]
 8000e1e:	4b28      	ldr	r3, [pc, #160]	; (8000ec0 <HAL_ADC_Init+0x1a8>)
 8000e20:	4013      	ands	r3, r2
 8000e22:	687a      	ldr	r2, [r7, #4]
 8000e24:	6812      	ldr	r2, [r2, #0]
 8000e26:	68b9      	ldr	r1, [r7, #8]
 8000e28:	430b      	orrs	r3, r1
 8000e2a:	6093      	str	r3, [r2, #8]
    /*   Note: Scan mode is present by hardware on this device and, if        */
    /*   disabled, discards automatically nb of conversions. Anyway, nb of    */
    /*   conversions is forced to 0x00 for alignment over all STM32 devices.  */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion"                                          */
    if (ADC_CR1_SCAN_SET(hadc->Init.ScanConvMode) == ADC_SCAN_ENABLE)
 8000e2c:	687b      	ldr	r3, [r7, #4]
 8000e2e:	689b      	ldr	r3, [r3, #8]
 8000e30:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8000e34:	d003      	beq.n	8000e3e <HAL_ADC_Init+0x126>
 8000e36:	687b      	ldr	r3, [r7, #4]
 8000e38:	689b      	ldr	r3, [r3, #8]
 8000e3a:	2b01      	cmp	r3, #1
 8000e3c:	d104      	bne.n	8000e48 <HAL_ADC_Init+0x130>
    {
      tmp_sqr1 = ADC_SQR1_L_SHIFT(hadc->Init.NbrOfConversion);
 8000e3e:	687b      	ldr	r3, [r7, #4]
 8000e40:	691b      	ldr	r3, [r3, #16]
 8000e42:	3b01      	subs	r3, #1
 8000e44:	051b      	lsls	r3, r3, #20
 8000e46:	60fb      	str	r3, [r7, #12]
    }
    
    MODIFY_REG(hadc->Instance->SQR1,
 8000e48:	687b      	ldr	r3, [r7, #4]
 8000e4a:	681b      	ldr	r3, [r3, #0]
 8000e4c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000e4e:	f423 0170 	bic.w	r1, r3, #15728640	; 0xf00000
 8000e52:	687b      	ldr	r3, [r7, #4]
 8000e54:	681b      	ldr	r3, [r3, #0]
 8000e56:	68fa      	ldr	r2, [r7, #12]
 8000e58:	430a      	orrs	r2, r1
 8000e5a:	62da      	str	r2, [r3, #44]	; 0x2c
    /* ensure of no potential problem of ADC core IP clocking.                */
    /* Check through register CR2 (excluding bits set in other functions:     */
    /* execution control bits (ADON, JSWSTART, SWSTART), regular group bits   */
    /* (DMA), injected group bits (JEXTTRIG and JEXTSEL), channel internal    */
    /* measurement path bit (TSVREFE).                                        */
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 8000e5c:	687b      	ldr	r3, [r7, #4]
 8000e5e:	681b      	ldr	r3, [r3, #0]
 8000e60:	689a      	ldr	r2, [r3, #8]
 8000e62:	4b18      	ldr	r3, [pc, #96]	; (8000ec4 <HAL_ADC_Init+0x1ac>)
 8000e64:	4013      	ands	r3, r2
 8000e66:	68ba      	ldr	r2, [r7, #8]
 8000e68:	429a      	cmp	r2, r3
 8000e6a:	d10b      	bne.n	8000e84 <HAL_ADC_Init+0x16c>
                                        ADC_CR2_JEXTTRIG | ADC_CR2_JEXTSEL |
                                        ADC_CR2_TSVREFE                     ))
         == tmp_cr2)
    {
      /* Set ADC error code to none */
      ADC_CLEAR_ERRORCODE(hadc);
 8000e6c:	687b      	ldr	r3, [r7, #4]
 8000e6e:	2200      	movs	r2, #0
 8000e70:	62da      	str	r2, [r3, #44]	; 0x2c
      
      /* Set the ADC state */
      ADC_STATE_CLR_SET(hadc->State,
 8000e72:	687b      	ldr	r3, [r7, #4]
 8000e74:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000e76:	f023 0303 	bic.w	r3, r3, #3
 8000e7a:	f043 0201 	orr.w	r2, r3, #1
 8000e7e:	687b      	ldr	r3, [r7, #4]
 8000e80:	629a      	str	r2, [r3, #40]	; 0x28
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 8000e82:	e018      	b.n	8000eb6 <HAL_ADC_Init+0x19e>
                        HAL_ADC_STATE_READY);
    }
    else
    {
      /* Update ADC state machine to error */
      ADC_STATE_CLR_SET(hadc->State,
 8000e84:	687b      	ldr	r3, [r7, #4]
 8000e86:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000e88:	f023 0312 	bic.w	r3, r3, #18
 8000e8c:	f043 0210 	orr.w	r2, r3, #16
 8000e90:	687b      	ldr	r3, [r7, #4]
 8000e92:	629a      	str	r2, [r3, #40]	; 0x28
                        HAL_ADC_STATE_BUSY_INTERNAL,
                        HAL_ADC_STATE_ERROR_INTERNAL);
      
      /* Set ADC error code to ADC IP internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8000e94:	687b      	ldr	r3, [r7, #4]
 8000e96:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000e98:	f043 0201 	orr.w	r2, r3, #1
 8000e9c:	687b      	ldr	r3, [r7, #4]
 8000e9e:	62da      	str	r2, [r3, #44]	; 0x2c
      
      tmp_hal_status = HAL_ERROR;
 8000ea0:	2301      	movs	r3, #1
 8000ea2:	75fb      	strb	r3, [r7, #23]
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 8000ea4:	e007      	b.n	8000eb6 <HAL_ADC_Init+0x19e>
  
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8000ea6:	687b      	ldr	r3, [r7, #4]
 8000ea8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000eaa:	f043 0210 	orr.w	r2, r3, #16
 8000eae:	687b      	ldr	r3, [r7, #4]
 8000eb0:	629a      	str	r2, [r3, #40]	; 0x28
        
    tmp_hal_status = HAL_ERROR;
 8000eb2:	2301      	movs	r3, #1
 8000eb4:	75fb      	strb	r3, [r7, #23]
  }
  
  /* Return function status */
  return tmp_hal_status;
 8000eb6:	7dfb      	ldrb	r3, [r7, #23]
}
 8000eb8:	4618      	mov	r0, r3
 8000eba:	3718      	adds	r7, #24
 8000ebc:	46bd      	mov	sp, r7
 8000ebe:	bd80      	pop	{r7, pc}
 8000ec0:	ffe1f7fd 	.word	0xffe1f7fd
 8000ec4:	ff1f0efe 	.word	0xff1f0efe

08000ec8 <HAL_ADC_ConfigChannel>:
  * @param  hadc ADC handle
  * @param  sConfig Structure of ADC channel for regular group.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{ 
 8000ec8:	b480      	push	{r7}
 8000eca:	b085      	sub	sp, #20
 8000ecc:	af00      	add	r7, sp, #0
 8000ece:	6078      	str	r0, [r7, #4]
 8000ed0:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8000ed2:	2300      	movs	r3, #0
 8000ed4:	73fb      	strb	r3, [r7, #15]
  __IO uint32_t wait_loop_index = 0U;
 8000ed6:	2300      	movs	r3, #0
 8000ed8:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8000eda:	687b      	ldr	r3, [r7, #4]
 8000edc:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8000ee0:	2b01      	cmp	r3, #1
 8000ee2:	d101      	bne.n	8000ee8 <HAL_ADC_ConfigChannel+0x20>
 8000ee4:	2302      	movs	r3, #2
 8000ee6:	e0d2      	b.n	800108e <HAL_ADC_ConfigChannel+0x1c6>
 8000ee8:	687b      	ldr	r3, [r7, #4]
 8000eea:	2201      	movs	r2, #1
 8000eec:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  
  
  /* Regular sequence configuration */
  /* For Rank 1 to 6U */
  if (sConfig->Rank < 7U)
 8000ef0:	683b      	ldr	r3, [r7, #0]
 8000ef2:	685b      	ldr	r3, [r3, #4]
 8000ef4:	2b06      	cmp	r3, #6
 8000ef6:	d81c      	bhi.n	8000f32 <HAL_ADC_ConfigChannel+0x6a>
  {
    MODIFY_REG(hadc->Instance->SQR3                        ,
 8000ef8:	687b      	ldr	r3, [r7, #4]
 8000efa:	681b      	ldr	r3, [r3, #0]
 8000efc:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8000efe:	683b      	ldr	r3, [r7, #0]
 8000f00:	685a      	ldr	r2, [r3, #4]
 8000f02:	4613      	mov	r3, r2
 8000f04:	009b      	lsls	r3, r3, #2
 8000f06:	4413      	add	r3, r2
 8000f08:	3b05      	subs	r3, #5
 8000f0a:	221f      	movs	r2, #31
 8000f0c:	fa02 f303 	lsl.w	r3, r2, r3
 8000f10:	43db      	mvns	r3, r3
 8000f12:	4019      	ands	r1, r3
 8000f14:	683b      	ldr	r3, [r7, #0]
 8000f16:	6818      	ldr	r0, [r3, #0]
 8000f18:	683b      	ldr	r3, [r7, #0]
 8000f1a:	685a      	ldr	r2, [r3, #4]
 8000f1c:	4613      	mov	r3, r2
 8000f1e:	009b      	lsls	r3, r3, #2
 8000f20:	4413      	add	r3, r2
 8000f22:	3b05      	subs	r3, #5
 8000f24:	fa00 f203 	lsl.w	r2, r0, r3
 8000f28:	687b      	ldr	r3, [r7, #4]
 8000f2a:	681b      	ldr	r3, [r3, #0]
 8000f2c:	430a      	orrs	r2, r1
 8000f2e:	635a      	str	r2, [r3, #52]	; 0x34
 8000f30:	e03c      	b.n	8000fac <HAL_ADC_ConfigChannel+0xe4>
               ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank)    ,
               ADC_SQR3_RK(sConfig->Channel, sConfig->Rank) );
  }
  /* For Rank 7 to 12U */
  else if (sConfig->Rank < 13U)
 8000f32:	683b      	ldr	r3, [r7, #0]
 8000f34:	685b      	ldr	r3, [r3, #4]
 8000f36:	2b0c      	cmp	r3, #12
 8000f38:	d81c      	bhi.n	8000f74 <HAL_ADC_ConfigChannel+0xac>
  {
    MODIFY_REG(hadc->Instance->SQR2                        ,
 8000f3a:	687b      	ldr	r3, [r7, #4]
 8000f3c:	681b      	ldr	r3, [r3, #0]
 8000f3e:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8000f40:	683b      	ldr	r3, [r7, #0]
 8000f42:	685a      	ldr	r2, [r3, #4]
 8000f44:	4613      	mov	r3, r2
 8000f46:	009b      	lsls	r3, r3, #2
 8000f48:	4413      	add	r3, r2
 8000f4a:	3b23      	subs	r3, #35	; 0x23
 8000f4c:	221f      	movs	r2, #31
 8000f4e:	fa02 f303 	lsl.w	r3, r2, r3
 8000f52:	43db      	mvns	r3, r3
 8000f54:	4019      	ands	r1, r3
 8000f56:	683b      	ldr	r3, [r7, #0]
 8000f58:	6818      	ldr	r0, [r3, #0]
 8000f5a:	683b      	ldr	r3, [r7, #0]
 8000f5c:	685a      	ldr	r2, [r3, #4]
 8000f5e:	4613      	mov	r3, r2
 8000f60:	009b      	lsls	r3, r3, #2
 8000f62:	4413      	add	r3, r2
 8000f64:	3b23      	subs	r3, #35	; 0x23
 8000f66:	fa00 f203 	lsl.w	r2, r0, r3
 8000f6a:	687b      	ldr	r3, [r7, #4]
 8000f6c:	681b      	ldr	r3, [r3, #0]
 8000f6e:	430a      	orrs	r2, r1
 8000f70:	631a      	str	r2, [r3, #48]	; 0x30
 8000f72:	e01b      	b.n	8000fac <HAL_ADC_ConfigChannel+0xe4>
               ADC_SQR2_RK(sConfig->Channel, sConfig->Rank) );
  }
  /* For Rank 13 to 16U */
  else
  {
    MODIFY_REG(hadc->Instance->SQR1                        ,
 8000f74:	687b      	ldr	r3, [r7, #4]
 8000f76:	681b      	ldr	r3, [r3, #0]
 8000f78:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8000f7a:	683b      	ldr	r3, [r7, #0]
 8000f7c:	685a      	ldr	r2, [r3, #4]
 8000f7e:	4613      	mov	r3, r2
 8000f80:	009b      	lsls	r3, r3, #2
 8000f82:	4413      	add	r3, r2
 8000f84:	3b41      	subs	r3, #65	; 0x41
 8000f86:	221f      	movs	r2, #31
 8000f88:	fa02 f303 	lsl.w	r3, r2, r3
 8000f8c:	43db      	mvns	r3, r3
 8000f8e:	4019      	ands	r1, r3
 8000f90:	683b      	ldr	r3, [r7, #0]
 8000f92:	6818      	ldr	r0, [r3, #0]
 8000f94:	683b      	ldr	r3, [r7, #0]
 8000f96:	685a      	ldr	r2, [r3, #4]
 8000f98:	4613      	mov	r3, r2
 8000f9a:	009b      	lsls	r3, r3, #2
 8000f9c:	4413      	add	r3, r2
 8000f9e:	3b41      	subs	r3, #65	; 0x41
 8000fa0:	fa00 f203 	lsl.w	r2, r0, r3
 8000fa4:	687b      	ldr	r3, [r7, #4]
 8000fa6:	681b      	ldr	r3, [r3, #0]
 8000fa8:	430a      	orrs	r2, r1
 8000faa:	62da      	str	r2, [r3, #44]	; 0x2c
  }
  
  
  /* Channel sampling time configuration */
  /* For channels 10 to 18U */
  if (sConfig->Channel > ADC_CHANNEL_10)
 8000fac:	683b      	ldr	r3, [r7, #0]
 8000fae:	681b      	ldr	r3, [r3, #0]
 8000fb0:	2b0a      	cmp	r3, #10
 8000fb2:	d91c      	bls.n	8000fee <HAL_ADC_ConfigChannel+0x126>
  {
    MODIFY_REG(hadc->Instance->SMPR1                             ,
 8000fb4:	687b      	ldr	r3, [r7, #4]
 8000fb6:	681b      	ldr	r3, [r3, #0]
 8000fb8:	68d9      	ldr	r1, [r3, #12]
 8000fba:	683b      	ldr	r3, [r7, #0]
 8000fbc:	681a      	ldr	r2, [r3, #0]
 8000fbe:	4613      	mov	r3, r2
 8000fc0:	005b      	lsls	r3, r3, #1
 8000fc2:	4413      	add	r3, r2
 8000fc4:	3b1e      	subs	r3, #30
 8000fc6:	2207      	movs	r2, #7
 8000fc8:	fa02 f303 	lsl.w	r3, r2, r3
 8000fcc:	43db      	mvns	r3, r3
 8000fce:	4019      	ands	r1, r3
 8000fd0:	683b      	ldr	r3, [r7, #0]
 8000fd2:	6898      	ldr	r0, [r3, #8]
 8000fd4:	683b      	ldr	r3, [r7, #0]
 8000fd6:	681a      	ldr	r2, [r3, #0]
 8000fd8:	4613      	mov	r3, r2
 8000fda:	005b      	lsls	r3, r3, #1
 8000fdc:	4413      	add	r3, r2
 8000fde:	3b1e      	subs	r3, #30
 8000fe0:	fa00 f203 	lsl.w	r2, r0, r3
 8000fe4:	687b      	ldr	r3, [r7, #4]
 8000fe6:	681b      	ldr	r3, [r3, #0]
 8000fe8:	430a      	orrs	r2, r1
 8000fea:	60da      	str	r2, [r3, #12]
 8000fec:	e019      	b.n	8001022 <HAL_ADC_ConfigChannel+0x15a>
               ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel)      ,
               ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel) );
  }
  else   /* For channels 0 to 9U */
  {
    MODIFY_REG(hadc->Instance->SMPR2                             ,
 8000fee:	687b      	ldr	r3, [r7, #4]
 8000ff0:	681b      	ldr	r3, [r3, #0]
 8000ff2:	6919      	ldr	r1, [r3, #16]
 8000ff4:	683b      	ldr	r3, [r7, #0]
 8000ff6:	681a      	ldr	r2, [r3, #0]
 8000ff8:	4613      	mov	r3, r2
 8000ffa:	005b      	lsls	r3, r3, #1
 8000ffc:	4413      	add	r3, r2
 8000ffe:	2207      	movs	r2, #7
 8001000:	fa02 f303 	lsl.w	r3, r2, r3
 8001004:	43db      	mvns	r3, r3
 8001006:	4019      	ands	r1, r3
 8001008:	683b      	ldr	r3, [r7, #0]
 800100a:	6898      	ldr	r0, [r3, #8]
 800100c:	683b      	ldr	r3, [r7, #0]
 800100e:	681a      	ldr	r2, [r3, #0]
 8001010:	4613      	mov	r3, r2
 8001012:	005b      	lsls	r3, r3, #1
 8001014:	4413      	add	r3, r2
 8001016:	fa00 f203 	lsl.w	r2, r0, r3
 800101a:	687b      	ldr	r3, [r7, #4]
 800101c:	681b      	ldr	r3, [r3, #0]
 800101e:	430a      	orrs	r2, r1
 8001020:	611a      	str	r2, [r3, #16]
               ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel) );
  }
  
  /* If ADC1 Channel_16 or Channel_17 is selected, enable Temperature sensor  */
  /* and VREFINT measurement path.                                            */
  if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) ||
 8001022:	683b      	ldr	r3, [r7, #0]
 8001024:	681b      	ldr	r3, [r3, #0]
 8001026:	2b10      	cmp	r3, #16
 8001028:	d003      	beq.n	8001032 <HAL_ADC_ConfigChannel+0x16a>
      (sConfig->Channel == ADC_CHANNEL_VREFINT)      )
 800102a:	683b      	ldr	r3, [r7, #0]
 800102c:	681b      	ldr	r3, [r3, #0]
  if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) ||
 800102e:	2b11      	cmp	r3, #17
 8001030:	d11e      	bne.n	8001070 <HAL_ADC_ConfigChannel+0x1a8>
  {
    SET_BIT(hadc->Instance->CR2, ADC_CR2_TSVREFE);
 8001032:	687b      	ldr	r3, [r7, #4]
 8001034:	681b      	ldr	r3, [r3, #0]
 8001036:	689a      	ldr	r2, [r3, #8]
 8001038:	687b      	ldr	r3, [r7, #4]
 800103a:	681b      	ldr	r3, [r3, #0]
 800103c:	f442 0200 	orr.w	r2, r2, #8388608	; 0x800000
 8001040:	609a      	str	r2, [r3, #8]
    
    if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR))
 8001042:	683b      	ldr	r3, [r7, #0]
 8001044:	681b      	ldr	r3, [r3, #0]
 8001046:	2b10      	cmp	r3, #16
 8001048:	d11c      	bne.n	8001084 <HAL_ADC_ConfigChannel+0x1bc>
    {
      /* Delay for temperature sensor stabilization time */
      /* Compute number of CPU cycles to wait for */
      wait_loop_index = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 800104a:	4b14      	ldr	r3, [pc, #80]	; (800109c <HAL_ADC_ConfigChannel+0x1d4>)
 800104c:	681b      	ldr	r3, [r3, #0]
 800104e:	4a14      	ldr	r2, [pc, #80]	; (80010a0 <HAL_ADC_ConfigChannel+0x1d8>)
 8001050:	fba2 2303 	umull	r2, r3, r2, r3
 8001054:	0c9a      	lsrs	r2, r3, #18
 8001056:	4613      	mov	r3, r2
 8001058:	009b      	lsls	r3, r3, #2
 800105a:	4413      	add	r3, r2
 800105c:	005b      	lsls	r3, r3, #1
 800105e:	60bb      	str	r3, [r7, #8]
      while(wait_loop_index != 0U)
 8001060:	e002      	b.n	8001068 <HAL_ADC_ConfigChannel+0x1a0>
      {
        wait_loop_index--;
 8001062:	68bb      	ldr	r3, [r7, #8]
 8001064:	3b01      	subs	r3, #1
 8001066:	60bb      	str	r3, [r7, #8]
      while(wait_loop_index != 0U)
 8001068:	68bb      	ldr	r3, [r7, #8]
 800106a:	2b00      	cmp	r3, #0
 800106c:	d1f9      	bne.n	8001062 <HAL_ADC_ConfigChannel+0x19a>
    if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR))
 800106e:	e009      	b.n	8001084 <HAL_ADC_ConfigChannel+0x1bc>
      }
    }
  }
  /* if ADC1 Channel_18 is selected, enable VBAT measurement path */
  else if (sConfig->Channel == ADC_CHANNEL_VBAT)
 8001070:	683b      	ldr	r3, [r7, #0]
 8001072:	681b      	ldr	r3, [r3, #0]
 8001074:	2b12      	cmp	r3, #18
 8001076:	d105      	bne.n	8001084 <HAL_ADC_ConfigChannel+0x1bc>
  {
    SET_BIT(SYSCFG->CFGR1, SYSCFG_CFGR1_VBAT);
 8001078:	4b0a      	ldr	r3, [pc, #40]	; (80010a4 <HAL_ADC_ConfigChannel+0x1dc>)
 800107a:	681b      	ldr	r3, [r3, #0]
 800107c:	4a09      	ldr	r2, [pc, #36]	; (80010a4 <HAL_ADC_ConfigChannel+0x1dc>)
 800107e:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8001082:	6013      	str	r3, [r2, #0]
  }

   
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8001084:	687b      	ldr	r3, [r7, #4]
 8001086:	2200      	movs	r2, #0
 8001088:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  
  /* Return function status */
  return tmp_hal_status;
 800108c:	7bfb      	ldrb	r3, [r7, #15]
}
 800108e:	4618      	mov	r0, r3
 8001090:	3714      	adds	r7, #20
 8001092:	46bd      	mov	sp, r7
 8001094:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001098:	4770      	bx	lr
 800109a:	bf00      	nop
 800109c:	20000000 	.word	0x20000000
 80010a0:	431bde83 	.word	0x431bde83
 80010a4:	40010000 	.word	0x40010000

080010a8 <ADC_ConversionStop_Disable>:
  * @brief  Stop ADC conversion and disable the selected ADC
  * @param  hadc ADC handle
  * @retval HAL status.
  */
static HAL_StatusTypeDef ADC_ConversionStop_Disable(ADC_HandleTypeDef* hadc)
{
 80010a8:	b580      	push	{r7, lr}
 80010aa:	b084      	sub	sp, #16
 80010ac:	af00      	add	r7, sp, #0
 80010ae:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 80010b0:	2300      	movs	r3, #0
 80010b2:	60fb      	str	r3, [r7, #12]
  
  /* Verification if ADC is not already disabled:                             */
  if (ADC_IS_ENABLE(hadc) != RESET)
 80010b4:	687b      	ldr	r3, [r7, #4]
 80010b6:	681b      	ldr	r3, [r3, #0]
 80010b8:	689b      	ldr	r3, [r3, #8]
 80010ba:	f003 0301 	and.w	r3, r3, #1
 80010be:	2b01      	cmp	r3, #1
 80010c0:	d12e      	bne.n	8001120 <ADC_ConversionStop_Disable+0x78>
  {
    /* Disable the ADC peripheral */
    __HAL_ADC_DISABLE(hadc);
 80010c2:	687b      	ldr	r3, [r7, #4]
 80010c4:	681b      	ldr	r3, [r3, #0]
 80010c6:	689a      	ldr	r2, [r3, #8]
 80010c8:	687b      	ldr	r3, [r7, #4]
 80010ca:	681b      	ldr	r3, [r3, #0]
 80010cc:	f022 0201 	bic.w	r2, r2, #1
 80010d0:	609a      	str	r2, [r3, #8]
     
    /* Get tick count */
    tickstart = HAL_GetTick();
 80010d2:	f7ff fdf1 	bl	8000cb8 <HAL_GetTick>
 80010d6:	60f8      	str	r0, [r7, #12]
    
    /* Wait for ADC effectively disabled */
    while(ADC_IS_ENABLE(hadc) != RESET)
 80010d8:	e01b      	b.n	8001112 <ADC_ConversionStop_Disable+0x6a>
    {
      if((HAL_GetTick() - tickstart) > ADC_DISABLE_TIMEOUT)
 80010da:	f7ff fded 	bl	8000cb8 <HAL_GetTick>
 80010de:	4602      	mov	r2, r0
 80010e0:	68fb      	ldr	r3, [r7, #12]
 80010e2:	1ad3      	subs	r3, r2, r3
 80010e4:	2b02      	cmp	r3, #2
 80010e6:	d914      	bls.n	8001112 <ADC_ConversionStop_Disable+0x6a>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(ADC_IS_ENABLE(hadc) != RESET)
 80010e8:	687b      	ldr	r3, [r7, #4]
 80010ea:	681b      	ldr	r3, [r3, #0]
 80010ec:	689b      	ldr	r3, [r3, #8]
 80010ee:	f003 0301 	and.w	r3, r3, #1
 80010f2:	2b01      	cmp	r3, #1
 80010f4:	d10d      	bne.n	8001112 <ADC_ConversionStop_Disable+0x6a>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80010f6:	687b      	ldr	r3, [r7, #4]
 80010f8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80010fa:	f043 0210 	orr.w	r2, r3, #16
 80010fe:	687b      	ldr	r3, [r7, #4]
 8001100:	629a      	str	r2, [r3, #40]	; 0x28

          /* Set ADC error code to ADC IP internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001102:	687b      	ldr	r3, [r7, #4]
 8001104:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001106:	f043 0201 	orr.w	r2, r3, #1
 800110a:	687b      	ldr	r3, [r7, #4]
 800110c:	62da      	str	r2, [r3, #44]	; 0x2c

          return HAL_ERROR;
 800110e:	2301      	movs	r3, #1
 8001110:	e007      	b.n	8001122 <ADC_ConversionStop_Disable+0x7a>
    while(ADC_IS_ENABLE(hadc) != RESET)
 8001112:	687b      	ldr	r3, [r7, #4]
 8001114:	681b      	ldr	r3, [r3, #0]
 8001116:	689b      	ldr	r3, [r3, #8]
 8001118:	f003 0301 	and.w	r3, r3, #1
 800111c:	2b01      	cmp	r3, #1
 800111e:	d0dc      	beq.n	80010da <ADC_ConversionStop_Disable+0x32>
      }
    }
  }
  
  /* Return HAL status */
  return HAL_OK;
 8001120:	2300      	movs	r3, #0
}
 8001122:	4618      	mov	r0, r3
 8001124:	3710      	adds	r7, #16
 8001126:	46bd      	mov	sp, r7
 8001128:	bd80      	pop	{r7, pc}
	...

0800112c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800112c:	b480      	push	{r7}
 800112e:	b085      	sub	sp, #20
 8001130:	af00      	add	r7, sp, #0
 8001132:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001134:	687b      	ldr	r3, [r7, #4]
 8001136:	f003 0307 	and.w	r3, r3, #7
 800113a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 800113c:	4b0c      	ldr	r3, [pc, #48]	; (8001170 <__NVIC_SetPriorityGrouping+0x44>)
 800113e:	68db      	ldr	r3, [r3, #12]
 8001140:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001142:	68ba      	ldr	r2, [r7, #8]
 8001144:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001148:	4013      	ands	r3, r2
 800114a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 800114c:	68fb      	ldr	r3, [r7, #12]
 800114e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001150:	68bb      	ldr	r3, [r7, #8]
 8001152:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001154:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8001158:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800115c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800115e:	4a04      	ldr	r2, [pc, #16]	; (8001170 <__NVIC_SetPriorityGrouping+0x44>)
 8001160:	68bb      	ldr	r3, [r7, #8]
 8001162:	60d3      	str	r3, [r2, #12]
}
 8001164:	bf00      	nop
 8001166:	3714      	adds	r7, #20
 8001168:	46bd      	mov	sp, r7
 800116a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800116e:	4770      	bx	lr
 8001170:	e000ed00 	.word	0xe000ed00

08001174 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001174:	b480      	push	{r7}
 8001176:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001178:	4b04      	ldr	r3, [pc, #16]	; (800118c <__NVIC_GetPriorityGrouping+0x18>)
 800117a:	68db      	ldr	r3, [r3, #12]
 800117c:	0a1b      	lsrs	r3, r3, #8
 800117e:	f003 0307 	and.w	r3, r3, #7
}
 8001182:	4618      	mov	r0, r3
 8001184:	46bd      	mov	sp, r7
 8001186:	f85d 7b04 	ldr.w	r7, [sp], #4
 800118a:	4770      	bx	lr
 800118c:	e000ed00 	.word	0xe000ed00

08001190 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001190:	b480      	push	{r7}
 8001192:	b083      	sub	sp, #12
 8001194:	af00      	add	r7, sp, #0
 8001196:	4603      	mov	r3, r0
 8001198:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800119a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800119e:	2b00      	cmp	r3, #0
 80011a0:	db0b      	blt.n	80011ba <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80011a2:	79fb      	ldrb	r3, [r7, #7]
 80011a4:	f003 021f 	and.w	r2, r3, #31
 80011a8:	4907      	ldr	r1, [pc, #28]	; (80011c8 <__NVIC_EnableIRQ+0x38>)
 80011aa:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80011ae:	095b      	lsrs	r3, r3, #5
 80011b0:	2001      	movs	r0, #1
 80011b2:	fa00 f202 	lsl.w	r2, r0, r2
 80011b6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 80011ba:	bf00      	nop
 80011bc:	370c      	adds	r7, #12
 80011be:	46bd      	mov	sp, r7
 80011c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011c4:	4770      	bx	lr
 80011c6:	bf00      	nop
 80011c8:	e000e100 	.word	0xe000e100

080011cc <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80011cc:	b480      	push	{r7}
 80011ce:	b083      	sub	sp, #12
 80011d0:	af00      	add	r7, sp, #0
 80011d2:	4603      	mov	r3, r0
 80011d4:	6039      	str	r1, [r7, #0]
 80011d6:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80011d8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80011dc:	2b00      	cmp	r3, #0
 80011de:	db0a      	blt.n	80011f6 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80011e0:	683b      	ldr	r3, [r7, #0]
 80011e2:	b2da      	uxtb	r2, r3
 80011e4:	490c      	ldr	r1, [pc, #48]	; (8001218 <__NVIC_SetPriority+0x4c>)
 80011e6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80011ea:	0112      	lsls	r2, r2, #4
 80011ec:	b2d2      	uxtb	r2, r2
 80011ee:	440b      	add	r3, r1
 80011f0:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80011f4:	e00a      	b.n	800120c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80011f6:	683b      	ldr	r3, [r7, #0]
 80011f8:	b2da      	uxtb	r2, r3
 80011fa:	4908      	ldr	r1, [pc, #32]	; (800121c <__NVIC_SetPriority+0x50>)
 80011fc:	79fb      	ldrb	r3, [r7, #7]
 80011fe:	f003 030f 	and.w	r3, r3, #15
 8001202:	3b04      	subs	r3, #4
 8001204:	0112      	lsls	r2, r2, #4
 8001206:	b2d2      	uxtb	r2, r2
 8001208:	440b      	add	r3, r1
 800120a:	761a      	strb	r2, [r3, #24]
}
 800120c:	bf00      	nop
 800120e:	370c      	adds	r7, #12
 8001210:	46bd      	mov	sp, r7
 8001212:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001216:	4770      	bx	lr
 8001218:	e000e100 	.word	0xe000e100
 800121c:	e000ed00 	.word	0xe000ed00

08001220 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001220:	b480      	push	{r7}
 8001222:	b089      	sub	sp, #36	; 0x24
 8001224:	af00      	add	r7, sp, #0
 8001226:	60f8      	str	r0, [r7, #12]
 8001228:	60b9      	str	r1, [r7, #8]
 800122a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 800122c:	68fb      	ldr	r3, [r7, #12]
 800122e:	f003 0307 	and.w	r3, r3, #7
 8001232:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001234:	69fb      	ldr	r3, [r7, #28]
 8001236:	f1c3 0307 	rsb	r3, r3, #7
 800123a:	2b04      	cmp	r3, #4
 800123c:	bf28      	it	cs
 800123e:	2304      	movcs	r3, #4
 8001240:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001242:	69fb      	ldr	r3, [r7, #28]
 8001244:	3304      	adds	r3, #4
 8001246:	2b06      	cmp	r3, #6
 8001248:	d902      	bls.n	8001250 <NVIC_EncodePriority+0x30>
 800124a:	69fb      	ldr	r3, [r7, #28]
 800124c:	3b03      	subs	r3, #3
 800124e:	e000      	b.n	8001252 <NVIC_EncodePriority+0x32>
 8001250:	2300      	movs	r3, #0
 8001252:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001254:	f04f 32ff 	mov.w	r2, #4294967295
 8001258:	69bb      	ldr	r3, [r7, #24]
 800125a:	fa02 f303 	lsl.w	r3, r2, r3
 800125e:	43da      	mvns	r2, r3
 8001260:	68bb      	ldr	r3, [r7, #8]
 8001262:	401a      	ands	r2, r3
 8001264:	697b      	ldr	r3, [r7, #20]
 8001266:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001268:	f04f 31ff 	mov.w	r1, #4294967295
 800126c:	697b      	ldr	r3, [r7, #20]
 800126e:	fa01 f303 	lsl.w	r3, r1, r3
 8001272:	43d9      	mvns	r1, r3
 8001274:	687b      	ldr	r3, [r7, #4]
 8001276:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001278:	4313      	orrs	r3, r2
         );
}
 800127a:	4618      	mov	r0, r3
 800127c:	3724      	adds	r7, #36	; 0x24
 800127e:	46bd      	mov	sp, r7
 8001280:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001284:	4770      	bx	lr
	...

08001288 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001288:	b580      	push	{r7, lr}
 800128a:	b082      	sub	sp, #8
 800128c:	af00      	add	r7, sp, #0
 800128e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001290:	687b      	ldr	r3, [r7, #4]
 8001292:	3b01      	subs	r3, #1
 8001294:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001298:	d301      	bcc.n	800129e <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800129a:	2301      	movs	r3, #1
 800129c:	e00f      	b.n	80012be <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800129e:	4a0a      	ldr	r2, [pc, #40]	; (80012c8 <SysTick_Config+0x40>)
 80012a0:	687b      	ldr	r3, [r7, #4]
 80012a2:	3b01      	subs	r3, #1
 80012a4:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80012a6:	210f      	movs	r1, #15
 80012a8:	f04f 30ff 	mov.w	r0, #4294967295
 80012ac:	f7ff ff8e 	bl	80011cc <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80012b0:	4b05      	ldr	r3, [pc, #20]	; (80012c8 <SysTick_Config+0x40>)
 80012b2:	2200      	movs	r2, #0
 80012b4:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80012b6:	4b04      	ldr	r3, [pc, #16]	; (80012c8 <SysTick_Config+0x40>)
 80012b8:	2207      	movs	r2, #7
 80012ba:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80012bc:	2300      	movs	r3, #0
}
 80012be:	4618      	mov	r0, r3
 80012c0:	3708      	adds	r7, #8
 80012c2:	46bd      	mov	sp, r7
 80012c4:	bd80      	pop	{r7, pc}
 80012c6:	bf00      	nop
 80012c8:	e000e010 	.word	0xe000e010

080012cc <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80012cc:	b580      	push	{r7, lr}
 80012ce:	b082      	sub	sp, #8
 80012d0:	af00      	add	r7, sp, #0
 80012d2:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80012d4:	6878      	ldr	r0, [r7, #4]
 80012d6:	f7ff ff29 	bl	800112c <__NVIC_SetPriorityGrouping>
}
 80012da:	bf00      	nop
 80012dc:	3708      	adds	r7, #8
 80012de:	46bd      	mov	sp, r7
 80012e0:	bd80      	pop	{r7, pc}

080012e2 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15 as described in the table CORTEX_NVIC_Priority_Table
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80012e2:	b580      	push	{r7, lr}
 80012e4:	b086      	sub	sp, #24
 80012e6:	af00      	add	r7, sp, #0
 80012e8:	4603      	mov	r3, r0
 80012ea:	60b9      	str	r1, [r7, #8]
 80012ec:	607a      	str	r2, [r7, #4]
 80012ee:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80012f0:	2300      	movs	r3, #0
 80012f2:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80012f4:	f7ff ff3e 	bl	8001174 <__NVIC_GetPriorityGrouping>
 80012f8:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80012fa:	687a      	ldr	r2, [r7, #4]
 80012fc:	68b9      	ldr	r1, [r7, #8]
 80012fe:	6978      	ldr	r0, [r7, #20]
 8001300:	f7ff ff8e 	bl	8001220 <NVIC_EncodePriority>
 8001304:	4602      	mov	r2, r0
 8001306:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800130a:	4611      	mov	r1, r2
 800130c:	4618      	mov	r0, r3
 800130e:	f7ff ff5d 	bl	80011cc <__NVIC_SetPriority>
}
 8001312:	bf00      	nop
 8001314:	3718      	adds	r7, #24
 8001316:	46bd      	mov	sp, r7
 8001318:	bd80      	pop	{r7, pc}

0800131a <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f3xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800131a:	b580      	push	{r7, lr}
 800131c:	b082      	sub	sp, #8
 800131e:	af00      	add	r7, sp, #0
 8001320:	4603      	mov	r3, r0
 8001322:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001324:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001328:	4618      	mov	r0, r3
 800132a:	f7ff ff31 	bl	8001190 <__NVIC_EnableIRQ>
}
 800132e:	bf00      	nop
 8001330:	3708      	adds	r7, #8
 8001332:	46bd      	mov	sp, r7
 8001334:	bd80      	pop	{r7, pc}

08001336 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001336:	b580      	push	{r7, lr}
 8001338:	b082      	sub	sp, #8
 800133a:	af00      	add	r7, sp, #0
 800133c:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800133e:	6878      	ldr	r0, [r7, #4]
 8001340:	f7ff ffa2 	bl	8001288 <SysTick_Config>
 8001344:	4603      	mov	r3, r0
}
 8001346:	4618      	mov	r0, r3
 8001348:	3708      	adds	r7, #8
 800134a:	46bd      	mov	sp, r7
 800134c:	bd80      	pop	{r7, pc}

0800134e <HAL_DMA_Abort>:
  * @param  hdma  : pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 800134e:	b480      	push	{r7}
 8001350:	b083      	sub	sp, #12
 8001352:	af00      	add	r7, sp, #0
 8001354:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8001356:	687b      	ldr	r3, [r7, #4]
 8001358:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 800135c:	2b02      	cmp	r3, #2
 800135e:	d008      	beq.n	8001372 <HAL_DMA_Abort+0x24>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8001360:	687b      	ldr	r3, [r7, #4]
 8001362:	2204      	movs	r2, #4
 8001364:	639a      	str	r2, [r3, #56]	; 0x38
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001366:	687b      	ldr	r3, [r7, #4]
 8001368:	2200      	movs	r2, #0
 800136a:	f883 2020 	strb.w	r2, [r3, #32]
    
    return HAL_ERROR;
 800136e:	2301      	movs	r3, #1
 8001370:	e020      	b.n	80013b4 <HAL_DMA_Abort+0x66>
  }
  else
  {
    /* Disable DMA IT */
     hdma->Instance->CCR &= ~(DMA_IT_TC | DMA_IT_HT | DMA_IT_TE);
 8001372:	687b      	ldr	r3, [r7, #4]
 8001374:	681b      	ldr	r3, [r3, #0]
 8001376:	681a      	ldr	r2, [r3, #0]
 8001378:	687b      	ldr	r3, [r7, #4]
 800137a:	681b      	ldr	r3, [r3, #0]
 800137c:	f022 020e 	bic.w	r2, r2, #14
 8001380:	601a      	str	r2, [r3, #0]
    
    /* Disable the channel */
    hdma->Instance->CCR &= ~DMA_CCR_EN;
 8001382:	687b      	ldr	r3, [r7, #4]
 8001384:	681b      	ldr	r3, [r3, #0]
 8001386:	681a      	ldr	r2, [r3, #0]
 8001388:	687b      	ldr	r3, [r7, #4]
 800138a:	681b      	ldr	r3, [r3, #0]
 800138c:	f022 0201 	bic.w	r2, r2, #1
 8001390:	601a      	str	r2, [r3, #0]
    
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_FLAG_GL1 << hdma->ChannelIndex);
 8001392:	687b      	ldr	r3, [r7, #4]
 8001394:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8001396:	687b      	ldr	r3, [r7, #4]
 8001398:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800139a:	2101      	movs	r1, #1
 800139c:	fa01 f202 	lsl.w	r2, r1, r2
 80013a0:	605a      	str	r2, [r3, #4]
  }
  /* Change the DMA state*/
  hdma->State = HAL_DMA_STATE_READY; 
 80013a2:	687b      	ldr	r3, [r7, #4]
 80013a4:	2201      	movs	r2, #1
 80013a6:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
  
  /* Process Unlocked */
  __HAL_UNLOCK(hdma);
 80013aa:	687b      	ldr	r3, [r7, #4]
 80013ac:	2200      	movs	r2, #0
 80013ae:	f883 2020 	strb.w	r2, [r3, #32]
  
  return HAL_OK;
 80013b2:	2300      	movs	r3, #0
}
 80013b4:	4618      	mov	r0, r3
 80013b6:	370c      	adds	r7, #12
 80013b8:	46bd      	mov	sp, r7
 80013ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013be:	4770      	bx	lr

080013c0 <HAL_DMA_Abort_IT>:
  * @param  hdma  : pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{  
 80013c0:	b580      	push	{r7, lr}
 80013c2:	b084      	sub	sp, #16
 80013c4:	af00      	add	r7, sp, #0
 80013c6:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80013c8:	2300      	movs	r3, #0
 80013ca:	73fb      	strb	r3, [r7, #15]
  
  if(HAL_DMA_STATE_BUSY != hdma->State)
 80013cc:	687b      	ldr	r3, [r7, #4]
 80013ce:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 80013d2:	2b02      	cmp	r3, #2
 80013d4:	d005      	beq.n	80013e2 <HAL_DMA_Abort_IT+0x22>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80013d6:	687b      	ldr	r3, [r7, #4]
 80013d8:	2204      	movs	r2, #4
 80013da:	639a      	str	r2, [r3, #56]	; 0x38
        
    status = HAL_ERROR;
 80013dc:	2301      	movs	r3, #1
 80013de:	73fb      	strb	r3, [r7, #15]
 80013e0:	e027      	b.n	8001432 <HAL_DMA_Abort_IT+0x72>
  }
  else
  { 
  
    /* Disable DMA IT */
    hdma->Instance->CCR &= ~(DMA_IT_TC | DMA_IT_HT | DMA_IT_TE);
 80013e2:	687b      	ldr	r3, [r7, #4]
 80013e4:	681b      	ldr	r3, [r3, #0]
 80013e6:	681a      	ldr	r2, [r3, #0]
 80013e8:	687b      	ldr	r3, [r7, #4]
 80013ea:	681b      	ldr	r3, [r3, #0]
 80013ec:	f022 020e 	bic.w	r2, r2, #14
 80013f0:	601a      	str	r2, [r3, #0]
    
    /* Disable the channel */
    hdma->Instance->CCR &= ~DMA_CCR_EN;
 80013f2:	687b      	ldr	r3, [r7, #4]
 80013f4:	681b      	ldr	r3, [r3, #0]
 80013f6:	681a      	ldr	r2, [r3, #0]
 80013f8:	687b      	ldr	r3, [r7, #4]
 80013fa:	681b      	ldr	r3, [r3, #0]
 80013fc:	f022 0201 	bic.w	r2, r2, #1
 8001400:	601a      	str	r2, [r3, #0]
    
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = DMA_FLAG_GL1 << hdma->ChannelIndex;
 8001402:	687b      	ldr	r3, [r7, #4]
 8001404:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8001406:	687b      	ldr	r3, [r7, #4]
 8001408:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800140a:	2101      	movs	r1, #1
 800140c:	fa01 f202 	lsl.w	r2, r1, r2
 8001410:	605a      	str	r2, [r3, #4]
    
    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8001412:	687b      	ldr	r3, [r7, #4]
 8001414:	2201      	movs	r2, #1
 8001416:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800141a:	687b      	ldr	r3, [r7, #4]
 800141c:	2200      	movs	r2, #0
 800141e:	f883 2020 	strb.w	r2, [r3, #32]
    
    /* Call User Abort callback */ 
    if(hdma->XferAbortCallback != NULL)
 8001422:	687b      	ldr	r3, [r7, #4]
 8001424:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001426:	2b00      	cmp	r3, #0
 8001428:	d003      	beq.n	8001432 <HAL_DMA_Abort_IT+0x72>
    {
      hdma->XferAbortCallback(hdma);
 800142a:	687b      	ldr	r3, [r7, #4]
 800142c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800142e:	6878      	ldr	r0, [r7, #4]
 8001430:	4798      	blx	r3
    } 
  }
  return status;
 8001432:	7bfb      	ldrb	r3, [r7, #15]
}
 8001434:	4618      	mov	r0, r3
 8001436:	3710      	adds	r7, #16
 8001438:	46bd      	mov	sp, r7
 800143a:	bd80      	pop	{r7, pc}

0800143c <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 800143c:	b480      	push	{r7}
 800143e:	b087      	sub	sp, #28
 8001440:	af00      	add	r7, sp, #0
 8001442:	6078      	str	r0, [r7, #4]
 8001444:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8001446:	2300      	movs	r3, #0
 8001448:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800144a:	e154      	b.n	80016f6 <HAL_GPIO_Init+0x2ba>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 800144c:	683b      	ldr	r3, [r7, #0]
 800144e:	681a      	ldr	r2, [r3, #0]
 8001450:	2101      	movs	r1, #1
 8001452:	697b      	ldr	r3, [r7, #20]
 8001454:	fa01 f303 	lsl.w	r3, r1, r3
 8001458:	4013      	ands	r3, r2
 800145a:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 800145c:	68fb      	ldr	r3, [r7, #12]
 800145e:	2b00      	cmp	r3, #0
 8001460:	f000 8146 	beq.w	80016f0 <HAL_GPIO_Init+0x2b4>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8001464:	683b      	ldr	r3, [r7, #0]
 8001466:	685b      	ldr	r3, [r3, #4]
 8001468:	f003 0303 	and.w	r3, r3, #3
 800146c:	2b01      	cmp	r3, #1
 800146e:	d005      	beq.n	800147c <HAL_GPIO_Init+0x40>
 8001470:	683b      	ldr	r3, [r7, #0]
 8001472:	685b      	ldr	r3, [r3, #4]
 8001474:	f003 0303 	and.w	r3, r3, #3
 8001478:	2b02      	cmp	r3, #2
 800147a:	d130      	bne.n	80014de <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 800147c:	687b      	ldr	r3, [r7, #4]
 800147e:	689b      	ldr	r3, [r3, #8]
 8001480:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2u));
 8001482:	697b      	ldr	r3, [r7, #20]
 8001484:	005b      	lsls	r3, r3, #1
 8001486:	2203      	movs	r2, #3
 8001488:	fa02 f303 	lsl.w	r3, r2, r3
 800148c:	43db      	mvns	r3, r3
 800148e:	693a      	ldr	r2, [r7, #16]
 8001490:	4013      	ands	r3, r2
 8001492:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8001494:	683b      	ldr	r3, [r7, #0]
 8001496:	68da      	ldr	r2, [r3, #12]
 8001498:	697b      	ldr	r3, [r7, #20]
 800149a:	005b      	lsls	r3, r3, #1
 800149c:	fa02 f303 	lsl.w	r3, r2, r3
 80014a0:	693a      	ldr	r2, [r7, #16]
 80014a2:	4313      	orrs	r3, r2
 80014a4:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 80014a6:	687b      	ldr	r3, [r7, #4]
 80014a8:	693a      	ldr	r2, [r7, #16]
 80014aa:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80014ac:	687b      	ldr	r3, [r7, #4]
 80014ae:	685b      	ldr	r3, [r3, #4]
 80014b0:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 80014b2:	2201      	movs	r2, #1
 80014b4:	697b      	ldr	r3, [r7, #20]
 80014b6:	fa02 f303 	lsl.w	r3, r2, r3
 80014ba:	43db      	mvns	r3, r3
 80014bc:	693a      	ldr	r2, [r7, #16]
 80014be:	4013      	ands	r3, r2
 80014c0:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80014c2:	683b      	ldr	r3, [r7, #0]
 80014c4:	685b      	ldr	r3, [r3, #4]
 80014c6:	091b      	lsrs	r3, r3, #4
 80014c8:	f003 0201 	and.w	r2, r3, #1
 80014cc:	697b      	ldr	r3, [r7, #20]
 80014ce:	fa02 f303 	lsl.w	r3, r2, r3
 80014d2:	693a      	ldr	r2, [r7, #16]
 80014d4:	4313      	orrs	r3, r2
 80014d6:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 80014d8:	687b      	ldr	r3, [r7, #4]
 80014da:	693a      	ldr	r2, [r7, #16]
 80014dc:	605a      	str	r2, [r3, #4]
      }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80014de:	683b      	ldr	r3, [r7, #0]
 80014e0:	685b      	ldr	r3, [r3, #4]
 80014e2:	f003 0303 	and.w	r3, r3, #3
 80014e6:	2b03      	cmp	r3, #3
 80014e8:	d017      	beq.n	800151a <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 80014ea:	687b      	ldr	r3, [r7, #4]
 80014ec:	68db      	ldr	r3, [r3, #12]
 80014ee:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2u));
 80014f0:	697b      	ldr	r3, [r7, #20]
 80014f2:	005b      	lsls	r3, r3, #1
 80014f4:	2203      	movs	r2, #3
 80014f6:	fa02 f303 	lsl.w	r3, r2, r3
 80014fa:	43db      	mvns	r3, r3
 80014fc:	693a      	ldr	r2, [r7, #16]
 80014fe:	4013      	ands	r3, r2
 8001500:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2u));
 8001502:	683b      	ldr	r3, [r7, #0]
 8001504:	689a      	ldr	r2, [r3, #8]
 8001506:	697b      	ldr	r3, [r7, #20]
 8001508:	005b      	lsls	r3, r3, #1
 800150a:	fa02 f303 	lsl.w	r3, r2, r3
 800150e:	693a      	ldr	r2, [r7, #16]
 8001510:	4313      	orrs	r3, r2
 8001512:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8001514:	687b      	ldr	r3, [r7, #4]
 8001516:	693a      	ldr	r2, [r7, #16]
 8001518:	60da      	str	r2, [r3, #12]
      }

      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800151a:	683b      	ldr	r3, [r7, #0]
 800151c:	685b      	ldr	r3, [r3, #4]
 800151e:	f003 0303 	and.w	r3, r3, #3
 8001522:	2b02      	cmp	r3, #2
 8001524:	d123      	bne.n	800156e <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8001526:	697b      	ldr	r3, [r7, #20]
 8001528:	08da      	lsrs	r2, r3, #3
 800152a:	687b      	ldr	r3, [r7, #4]
 800152c:	3208      	adds	r2, #8
 800152e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001532:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8001534:	697b      	ldr	r3, [r7, #20]
 8001536:	f003 0307 	and.w	r3, r3, #7
 800153a:	009b      	lsls	r3, r3, #2
 800153c:	220f      	movs	r2, #15
 800153e:	fa02 f303 	lsl.w	r3, r2, r3
 8001542:	43db      	mvns	r3, r3
 8001544:	693a      	ldr	r2, [r7, #16]
 8001546:	4013      	ands	r3, r2
 8001548:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 800154a:	683b      	ldr	r3, [r7, #0]
 800154c:	691a      	ldr	r2, [r3, #16]
 800154e:	697b      	ldr	r3, [r7, #20]
 8001550:	f003 0307 	and.w	r3, r3, #7
 8001554:	009b      	lsls	r3, r3, #2
 8001556:	fa02 f303 	lsl.w	r3, r2, r3
 800155a:	693a      	ldr	r2, [r7, #16]
 800155c:	4313      	orrs	r3, r2
 800155e:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8001560:	697b      	ldr	r3, [r7, #20]
 8001562:	08da      	lsrs	r2, r3, #3
 8001564:	687b      	ldr	r3, [r7, #4]
 8001566:	3208      	adds	r2, #8
 8001568:	6939      	ldr	r1, [r7, #16]
 800156a:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800156e:	687b      	ldr	r3, [r7, #4]
 8001570:	681b      	ldr	r3, [r3, #0]
 8001572:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2u));
 8001574:	697b      	ldr	r3, [r7, #20]
 8001576:	005b      	lsls	r3, r3, #1
 8001578:	2203      	movs	r2, #3
 800157a:	fa02 f303 	lsl.w	r3, r2, r3
 800157e:	43db      	mvns	r3, r3
 8001580:	693a      	ldr	r2, [r7, #16]
 8001582:	4013      	ands	r3, r2
 8001584:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8001586:	683b      	ldr	r3, [r7, #0]
 8001588:	685b      	ldr	r3, [r3, #4]
 800158a:	f003 0203 	and.w	r2, r3, #3
 800158e:	697b      	ldr	r3, [r7, #20]
 8001590:	005b      	lsls	r3, r3, #1
 8001592:	fa02 f303 	lsl.w	r3, r2, r3
 8001596:	693a      	ldr	r2, [r7, #16]
 8001598:	4313      	orrs	r3, r2
 800159a:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 800159c:	687b      	ldr	r3, [r7, #4]
 800159e:	693a      	ldr	r2, [r7, #16]
 80015a0:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 80015a2:	683b      	ldr	r3, [r7, #0]
 80015a4:	685b      	ldr	r3, [r3, #4]
 80015a6:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 80015aa:	2b00      	cmp	r3, #0
 80015ac:	f000 80a0 	beq.w	80016f0 <HAL_GPIO_Init+0x2b4>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80015b0:	4b58      	ldr	r3, [pc, #352]	; (8001714 <HAL_GPIO_Init+0x2d8>)
 80015b2:	699b      	ldr	r3, [r3, #24]
 80015b4:	4a57      	ldr	r2, [pc, #348]	; (8001714 <HAL_GPIO_Init+0x2d8>)
 80015b6:	f043 0301 	orr.w	r3, r3, #1
 80015ba:	6193      	str	r3, [r2, #24]
 80015bc:	4b55      	ldr	r3, [pc, #340]	; (8001714 <HAL_GPIO_Init+0x2d8>)
 80015be:	699b      	ldr	r3, [r3, #24]
 80015c0:	f003 0301 	and.w	r3, r3, #1
 80015c4:	60bb      	str	r3, [r7, #8]
 80015c6:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 80015c8:	4a53      	ldr	r2, [pc, #332]	; (8001718 <HAL_GPIO_Init+0x2dc>)
 80015ca:	697b      	ldr	r3, [r7, #20]
 80015cc:	089b      	lsrs	r3, r3, #2
 80015ce:	3302      	adds	r3, #2
 80015d0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80015d4:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 80015d6:	697b      	ldr	r3, [r7, #20]
 80015d8:	f003 0303 	and.w	r3, r3, #3
 80015dc:	009b      	lsls	r3, r3, #2
 80015de:	220f      	movs	r2, #15
 80015e0:	fa02 f303 	lsl.w	r3, r2, r3
 80015e4:	43db      	mvns	r3, r3
 80015e6:	693a      	ldr	r2, [r7, #16]
 80015e8:	4013      	ands	r3, r2
 80015ea:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 80015ec:	687b      	ldr	r3, [r7, #4]
 80015ee:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 80015f2:	d019      	beq.n	8001628 <HAL_GPIO_Init+0x1ec>
 80015f4:	687b      	ldr	r3, [r7, #4]
 80015f6:	4a49      	ldr	r2, [pc, #292]	; (800171c <HAL_GPIO_Init+0x2e0>)
 80015f8:	4293      	cmp	r3, r2
 80015fa:	d013      	beq.n	8001624 <HAL_GPIO_Init+0x1e8>
 80015fc:	687b      	ldr	r3, [r7, #4]
 80015fe:	4a48      	ldr	r2, [pc, #288]	; (8001720 <HAL_GPIO_Init+0x2e4>)
 8001600:	4293      	cmp	r3, r2
 8001602:	d00d      	beq.n	8001620 <HAL_GPIO_Init+0x1e4>
 8001604:	687b      	ldr	r3, [r7, #4]
 8001606:	4a47      	ldr	r2, [pc, #284]	; (8001724 <HAL_GPIO_Init+0x2e8>)
 8001608:	4293      	cmp	r3, r2
 800160a:	d007      	beq.n	800161c <HAL_GPIO_Init+0x1e0>
 800160c:	687b      	ldr	r3, [r7, #4]
 800160e:	4a46      	ldr	r2, [pc, #280]	; (8001728 <HAL_GPIO_Init+0x2ec>)
 8001610:	4293      	cmp	r3, r2
 8001612:	d101      	bne.n	8001618 <HAL_GPIO_Init+0x1dc>
 8001614:	2304      	movs	r3, #4
 8001616:	e008      	b.n	800162a <HAL_GPIO_Init+0x1ee>
 8001618:	2305      	movs	r3, #5
 800161a:	e006      	b.n	800162a <HAL_GPIO_Init+0x1ee>
 800161c:	2303      	movs	r3, #3
 800161e:	e004      	b.n	800162a <HAL_GPIO_Init+0x1ee>
 8001620:	2302      	movs	r3, #2
 8001622:	e002      	b.n	800162a <HAL_GPIO_Init+0x1ee>
 8001624:	2301      	movs	r3, #1
 8001626:	e000      	b.n	800162a <HAL_GPIO_Init+0x1ee>
 8001628:	2300      	movs	r3, #0
 800162a:	697a      	ldr	r2, [r7, #20]
 800162c:	f002 0203 	and.w	r2, r2, #3
 8001630:	0092      	lsls	r2, r2, #2
 8001632:	4093      	lsls	r3, r2
 8001634:	693a      	ldr	r2, [r7, #16]
 8001636:	4313      	orrs	r3, r2
 8001638:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 800163a:	4937      	ldr	r1, [pc, #220]	; (8001718 <HAL_GPIO_Init+0x2dc>)
 800163c:	697b      	ldr	r3, [r7, #20]
 800163e:	089b      	lsrs	r3, r3, #2
 8001640:	3302      	adds	r3, #2
 8001642:	693a      	ldr	r2, [r7, #16]
 8001644:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8001648:	4b38      	ldr	r3, [pc, #224]	; (800172c <HAL_GPIO_Init+0x2f0>)
 800164a:	681b      	ldr	r3, [r3, #0]
 800164c:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800164e:	68fb      	ldr	r3, [r7, #12]
 8001650:	43db      	mvns	r3, r3
 8001652:	693a      	ldr	r2, [r7, #16]
 8001654:	4013      	ands	r3, r2
 8001656:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8001658:	683b      	ldr	r3, [r7, #0]
 800165a:	685b      	ldr	r3, [r3, #4]
 800165c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001660:	2b00      	cmp	r3, #0
 8001662:	d003      	beq.n	800166c <HAL_GPIO_Init+0x230>
        {
          temp |= iocurrent;
 8001664:	693a      	ldr	r2, [r7, #16]
 8001666:	68fb      	ldr	r3, [r7, #12]
 8001668:	4313      	orrs	r3, r2
 800166a:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR = temp;
 800166c:	4a2f      	ldr	r2, [pc, #188]	; (800172c <HAL_GPIO_Init+0x2f0>)
 800166e:	693b      	ldr	r3, [r7, #16]
 8001670:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 8001672:	4b2e      	ldr	r3, [pc, #184]	; (800172c <HAL_GPIO_Init+0x2f0>)
 8001674:	685b      	ldr	r3, [r3, #4]
 8001676:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001678:	68fb      	ldr	r3, [r7, #12]
 800167a:	43db      	mvns	r3, r3
 800167c:	693a      	ldr	r2, [r7, #16]
 800167e:	4013      	ands	r3, r2
 8001680:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8001682:	683b      	ldr	r3, [r7, #0]
 8001684:	685b      	ldr	r3, [r3, #4]
 8001686:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800168a:	2b00      	cmp	r3, #0
 800168c:	d003      	beq.n	8001696 <HAL_GPIO_Init+0x25a>
        {
          temp |= iocurrent;
 800168e:	693a      	ldr	r2, [r7, #16]
 8001690:	68fb      	ldr	r3, [r7, #12]
 8001692:	4313      	orrs	r3, r2
 8001694:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR = temp;
 8001696:	4a25      	ldr	r2, [pc, #148]	; (800172c <HAL_GPIO_Init+0x2f0>)
 8001698:	693b      	ldr	r3, [r7, #16]
 800169a:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 800169c:	4b23      	ldr	r3, [pc, #140]	; (800172c <HAL_GPIO_Init+0x2f0>)
 800169e:	689b      	ldr	r3, [r3, #8]
 80016a0:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80016a2:	68fb      	ldr	r3, [r7, #12]
 80016a4:	43db      	mvns	r3, r3
 80016a6:	693a      	ldr	r2, [r7, #16]
 80016a8:	4013      	ands	r3, r2
 80016aa:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 80016ac:	683b      	ldr	r3, [r7, #0]
 80016ae:	685b      	ldr	r3, [r3, #4]
 80016b0:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80016b4:	2b00      	cmp	r3, #0
 80016b6:	d003      	beq.n	80016c0 <HAL_GPIO_Init+0x284>
        {
          temp |= iocurrent;
 80016b8:	693a      	ldr	r2, [r7, #16]
 80016ba:	68fb      	ldr	r3, [r7, #12]
 80016bc:	4313      	orrs	r3, r2
 80016be:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR = temp;
 80016c0:	4a1a      	ldr	r2, [pc, #104]	; (800172c <HAL_GPIO_Init+0x2f0>)
 80016c2:	693b      	ldr	r3, [r7, #16]
 80016c4:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 80016c6:	4b19      	ldr	r3, [pc, #100]	; (800172c <HAL_GPIO_Init+0x2f0>)
 80016c8:	68db      	ldr	r3, [r3, #12]
 80016ca:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80016cc:	68fb      	ldr	r3, [r7, #12]
 80016ce:	43db      	mvns	r3, r3
 80016d0:	693a      	ldr	r2, [r7, #16]
 80016d2:	4013      	ands	r3, r2
 80016d4:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 80016d6:	683b      	ldr	r3, [r7, #0]
 80016d8:	685b      	ldr	r3, [r3, #4]
 80016da:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80016de:	2b00      	cmp	r3, #0
 80016e0:	d003      	beq.n	80016ea <HAL_GPIO_Init+0x2ae>
        {
          temp |= iocurrent;
 80016e2:	693a      	ldr	r2, [r7, #16]
 80016e4:	68fb      	ldr	r3, [r7, #12]
 80016e6:	4313      	orrs	r3, r2
 80016e8:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR = temp;
 80016ea:	4a10      	ldr	r2, [pc, #64]	; (800172c <HAL_GPIO_Init+0x2f0>)
 80016ec:	693b      	ldr	r3, [r7, #16]
 80016ee:	60d3      	str	r3, [r2, #12]
      }
    }

    position++;
 80016f0:	697b      	ldr	r3, [r7, #20]
 80016f2:	3301      	adds	r3, #1
 80016f4:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80016f6:	683b      	ldr	r3, [r7, #0]
 80016f8:	681a      	ldr	r2, [r3, #0]
 80016fa:	697b      	ldr	r3, [r7, #20]
 80016fc:	fa22 f303 	lsr.w	r3, r2, r3
 8001700:	2b00      	cmp	r3, #0
 8001702:	f47f aea3 	bne.w	800144c <HAL_GPIO_Init+0x10>
  }
}
 8001706:	bf00      	nop
 8001708:	bf00      	nop
 800170a:	371c      	adds	r7, #28
 800170c:	46bd      	mov	sp, r7
 800170e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001712:	4770      	bx	lr
 8001714:	40021000 	.word	0x40021000
 8001718:	40010000 	.word	0x40010000
 800171c:	48000400 	.word	0x48000400
 8001720:	48000800 	.word	0x48000800
 8001724:	48000c00 	.word	0x48000c00
 8001728:	48001000 	.word	0x48001000
 800172c:	40010400 	.word	0x40010400

08001730 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001730:	b480      	push	{r7}
 8001732:	b083      	sub	sp, #12
 8001734:	af00      	add	r7, sp, #0
 8001736:	6078      	str	r0, [r7, #4]
 8001738:	460b      	mov	r3, r1
 800173a:	807b      	strh	r3, [r7, #2]
 800173c:	4613      	mov	r3, r2
 800173e:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8001740:	787b      	ldrb	r3, [r7, #1]
 8001742:	2b00      	cmp	r3, #0
 8001744:	d003      	beq.n	800174e <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8001746:	887a      	ldrh	r2, [r7, #2]
 8001748:	687b      	ldr	r3, [r7, #4]
 800174a:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 800174c:	e002      	b.n	8001754 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 800174e:	887a      	ldrh	r2, [r7, #2]
 8001750:	687b      	ldr	r3, [r7, #4]
 8001752:	629a      	str	r2, [r3, #40]	; 0x28
}
 8001754:	bf00      	nop
 8001756:	370c      	adds	r7, #12
 8001758:	46bd      	mov	sp, r7
 800175a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800175e:	4770      	bx	lr

08001760 <HAL_GPIO_TogglePin>:
  * @param  GPIOx where x can be (A..F) to select the GPIO peripheral for STM32F3 family
  * @param  GPIO_Pin specifies the pin to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8001760:	b480      	push	{r7}
 8001762:	b085      	sub	sp, #20
 8001764:	af00      	add	r7, sp, #0
 8001766:	6078      	str	r0, [r7, #4]
 8001768:	460b      	mov	r3, r1
 800176a:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Ouput Data Register value */
  odr = GPIOx->ODR;
 800176c:	687b      	ldr	r3, [r7, #4]
 800176e:	695b      	ldr	r3, [r3, #20]
 8001770:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8001772:	887a      	ldrh	r2, [r7, #2]
 8001774:	68fb      	ldr	r3, [r7, #12]
 8001776:	4013      	ands	r3, r2
 8001778:	041a      	lsls	r2, r3, #16
 800177a:	68fb      	ldr	r3, [r7, #12]
 800177c:	43d9      	mvns	r1, r3
 800177e:	887b      	ldrh	r3, [r7, #2]
 8001780:	400b      	ands	r3, r1
 8001782:	431a      	orrs	r2, r3
 8001784:	687b      	ldr	r3, [r7, #4]
 8001786:	619a      	str	r2, [r3, #24]
}
 8001788:	bf00      	nop
 800178a:	3714      	adds	r7, #20
 800178c:	46bd      	mov	sp, r7
 800178e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001792:	4770      	bx	lr

08001794 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001794:	b580      	push	{r7, lr}
 8001796:	f5ad 7d00 	sub.w	sp, sp, #512	; 0x200
 800179a:	af00      	add	r7, sp, #0
 800179c:	1d3b      	adds	r3, r7, #4
 800179e:	6018      	str	r0, [r3, #0]
#if defined(RCC_CFGR_PLLSRC_HSI_PREDIV)
  uint32_t pll_config2;
#endif /* RCC_CFGR_PLLSRC_HSI_PREDIV */

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 80017a0:	1d3b      	adds	r3, r7, #4
 80017a2:	681b      	ldr	r3, [r3, #0]
 80017a4:	2b00      	cmp	r3, #0
 80017a6:	d102      	bne.n	80017ae <HAL_RCC_OscConfig+0x1a>
  {
    return HAL_ERROR;
 80017a8:	2301      	movs	r3, #1
 80017aa:	f000 bef4 	b.w	8002596 <HAL_RCC_OscConfig+0xe02>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80017ae:	1d3b      	adds	r3, r7, #4
 80017b0:	681b      	ldr	r3, [r3, #0]
 80017b2:	681b      	ldr	r3, [r3, #0]
 80017b4:	f003 0301 	and.w	r3, r3, #1
 80017b8:	2b00      	cmp	r3, #0
 80017ba:	f000 816a 	beq.w	8001a92 <HAL_RCC_OscConfig+0x2fe>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE) 
 80017be:	4bb3      	ldr	r3, [pc, #716]	; (8001a8c <HAL_RCC_OscConfig+0x2f8>)
 80017c0:	685b      	ldr	r3, [r3, #4]
 80017c2:	f003 030c 	and.w	r3, r3, #12
 80017c6:	2b04      	cmp	r3, #4
 80017c8:	d00c      	beq.n	80017e4 <HAL_RCC_OscConfig+0x50>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 80017ca:	4bb0      	ldr	r3, [pc, #704]	; (8001a8c <HAL_RCC_OscConfig+0x2f8>)
 80017cc:	685b      	ldr	r3, [r3, #4]
 80017ce:	f003 030c 	and.w	r3, r3, #12
 80017d2:	2b08      	cmp	r3, #8
 80017d4:	d159      	bne.n	800188a <HAL_RCC_OscConfig+0xf6>
 80017d6:	4bad      	ldr	r3, [pc, #692]	; (8001a8c <HAL_RCC_OscConfig+0x2f8>)
 80017d8:	685b      	ldr	r3, [r3, #4]
 80017da:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80017de:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80017e2:	d152      	bne.n	800188a <HAL_RCC_OscConfig+0xf6>
 80017e4:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80017e8:	f8c7 31f0 	str.w	r3, [r7, #496]	; 0x1f0
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80017ec:	f8d7 31f0 	ldr.w	r3, [r7, #496]	; 0x1f0
 80017f0:	fa93 f3a3 	rbit	r3, r3
 80017f4:	f8c7 31ec 	str.w	r3, [r7, #492]	; 0x1ec
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 80017f8:	f8d7 31ec 	ldr.w	r3, [r7, #492]	; 0x1ec
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80017fc:	fab3 f383 	clz	r3, r3
 8001800:	b2db      	uxtb	r3, r3
 8001802:	095b      	lsrs	r3, r3, #5
 8001804:	b2db      	uxtb	r3, r3
 8001806:	f043 0301 	orr.w	r3, r3, #1
 800180a:	b2db      	uxtb	r3, r3
 800180c:	2b01      	cmp	r3, #1
 800180e:	d102      	bne.n	8001816 <HAL_RCC_OscConfig+0x82>
 8001810:	4b9e      	ldr	r3, [pc, #632]	; (8001a8c <HAL_RCC_OscConfig+0x2f8>)
 8001812:	681b      	ldr	r3, [r3, #0]
 8001814:	e015      	b.n	8001842 <HAL_RCC_OscConfig+0xae>
 8001816:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 800181a:	f8c7 31e8 	str.w	r3, [r7, #488]	; 0x1e8
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800181e:	f8d7 31e8 	ldr.w	r3, [r7, #488]	; 0x1e8
 8001822:	fa93 f3a3 	rbit	r3, r3
 8001826:	f8c7 31e4 	str.w	r3, [r7, #484]	; 0x1e4
 800182a:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 800182e:	f8c7 31e0 	str.w	r3, [r7, #480]	; 0x1e0
 8001832:	f8d7 31e0 	ldr.w	r3, [r7, #480]	; 0x1e0
 8001836:	fa93 f3a3 	rbit	r3, r3
 800183a:	f8c7 31dc 	str.w	r3, [r7, #476]	; 0x1dc
 800183e:	4b93      	ldr	r3, [pc, #588]	; (8001a8c <HAL_RCC_OscConfig+0x2f8>)
 8001840:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001842:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8001846:	f8c7 21d8 	str.w	r2, [r7, #472]	; 0x1d8
 800184a:	f8d7 21d8 	ldr.w	r2, [r7, #472]	; 0x1d8
 800184e:	fa92 f2a2 	rbit	r2, r2
 8001852:	f8c7 21d4 	str.w	r2, [r7, #468]	; 0x1d4
  return result;
 8001856:	f8d7 21d4 	ldr.w	r2, [r7, #468]	; 0x1d4
 800185a:	fab2 f282 	clz	r2, r2
 800185e:	b2d2      	uxtb	r2, r2
 8001860:	f042 0220 	orr.w	r2, r2, #32
 8001864:	b2d2      	uxtb	r2, r2
 8001866:	f002 021f 	and.w	r2, r2, #31
 800186a:	2101      	movs	r1, #1
 800186c:	fa01 f202 	lsl.w	r2, r1, r2
 8001870:	4013      	ands	r3, r2
 8001872:	2b00      	cmp	r3, #0
 8001874:	f000 810c 	beq.w	8001a90 <HAL_RCC_OscConfig+0x2fc>
 8001878:	1d3b      	adds	r3, r7, #4
 800187a:	681b      	ldr	r3, [r3, #0]
 800187c:	685b      	ldr	r3, [r3, #4]
 800187e:	2b00      	cmp	r3, #0
 8001880:	f040 8106 	bne.w	8001a90 <HAL_RCC_OscConfig+0x2fc>
      {
        return HAL_ERROR;
 8001884:	2301      	movs	r3, #1
 8001886:	f000 be86 	b.w	8002596 <HAL_RCC_OscConfig+0xe02>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800188a:	1d3b      	adds	r3, r7, #4
 800188c:	681b      	ldr	r3, [r3, #0]
 800188e:	685b      	ldr	r3, [r3, #4]
 8001890:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001894:	d106      	bne.n	80018a4 <HAL_RCC_OscConfig+0x110>
 8001896:	4b7d      	ldr	r3, [pc, #500]	; (8001a8c <HAL_RCC_OscConfig+0x2f8>)
 8001898:	681b      	ldr	r3, [r3, #0]
 800189a:	4a7c      	ldr	r2, [pc, #496]	; (8001a8c <HAL_RCC_OscConfig+0x2f8>)
 800189c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80018a0:	6013      	str	r3, [r2, #0]
 80018a2:	e030      	b.n	8001906 <HAL_RCC_OscConfig+0x172>
 80018a4:	1d3b      	adds	r3, r7, #4
 80018a6:	681b      	ldr	r3, [r3, #0]
 80018a8:	685b      	ldr	r3, [r3, #4]
 80018aa:	2b00      	cmp	r3, #0
 80018ac:	d10c      	bne.n	80018c8 <HAL_RCC_OscConfig+0x134>
 80018ae:	4b77      	ldr	r3, [pc, #476]	; (8001a8c <HAL_RCC_OscConfig+0x2f8>)
 80018b0:	681b      	ldr	r3, [r3, #0]
 80018b2:	4a76      	ldr	r2, [pc, #472]	; (8001a8c <HAL_RCC_OscConfig+0x2f8>)
 80018b4:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80018b8:	6013      	str	r3, [r2, #0]
 80018ba:	4b74      	ldr	r3, [pc, #464]	; (8001a8c <HAL_RCC_OscConfig+0x2f8>)
 80018bc:	681b      	ldr	r3, [r3, #0]
 80018be:	4a73      	ldr	r2, [pc, #460]	; (8001a8c <HAL_RCC_OscConfig+0x2f8>)
 80018c0:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80018c4:	6013      	str	r3, [r2, #0]
 80018c6:	e01e      	b.n	8001906 <HAL_RCC_OscConfig+0x172>
 80018c8:	1d3b      	adds	r3, r7, #4
 80018ca:	681b      	ldr	r3, [r3, #0]
 80018cc:	685b      	ldr	r3, [r3, #4]
 80018ce:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80018d2:	d10c      	bne.n	80018ee <HAL_RCC_OscConfig+0x15a>
 80018d4:	4b6d      	ldr	r3, [pc, #436]	; (8001a8c <HAL_RCC_OscConfig+0x2f8>)
 80018d6:	681b      	ldr	r3, [r3, #0]
 80018d8:	4a6c      	ldr	r2, [pc, #432]	; (8001a8c <HAL_RCC_OscConfig+0x2f8>)
 80018da:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80018de:	6013      	str	r3, [r2, #0]
 80018e0:	4b6a      	ldr	r3, [pc, #424]	; (8001a8c <HAL_RCC_OscConfig+0x2f8>)
 80018e2:	681b      	ldr	r3, [r3, #0]
 80018e4:	4a69      	ldr	r2, [pc, #420]	; (8001a8c <HAL_RCC_OscConfig+0x2f8>)
 80018e6:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80018ea:	6013      	str	r3, [r2, #0]
 80018ec:	e00b      	b.n	8001906 <HAL_RCC_OscConfig+0x172>
 80018ee:	4b67      	ldr	r3, [pc, #412]	; (8001a8c <HAL_RCC_OscConfig+0x2f8>)
 80018f0:	681b      	ldr	r3, [r3, #0]
 80018f2:	4a66      	ldr	r2, [pc, #408]	; (8001a8c <HAL_RCC_OscConfig+0x2f8>)
 80018f4:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80018f8:	6013      	str	r3, [r2, #0]
 80018fa:	4b64      	ldr	r3, [pc, #400]	; (8001a8c <HAL_RCC_OscConfig+0x2f8>)
 80018fc:	681b      	ldr	r3, [r3, #0]
 80018fe:	4a63      	ldr	r2, [pc, #396]	; (8001a8c <HAL_RCC_OscConfig+0x2f8>)
 8001900:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001904:	6013      	str	r3, [r2, #0]
      
#if defined(RCC_CFGR_PLLSRC_HSI_DIV2)
      /* Configure the HSE predivision factor --------------------------------*/
      __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8001906:	4b61      	ldr	r3, [pc, #388]	; (8001a8c <HAL_RCC_OscConfig+0x2f8>)
 8001908:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800190a:	f023 020f 	bic.w	r2, r3, #15
 800190e:	1d3b      	adds	r3, r7, #4
 8001910:	681b      	ldr	r3, [r3, #0]
 8001912:	689b      	ldr	r3, [r3, #8]
 8001914:	495d      	ldr	r1, [pc, #372]	; (8001a8c <HAL_RCC_OscConfig+0x2f8>)
 8001916:	4313      	orrs	r3, r2
 8001918:	62cb      	str	r3, [r1, #44]	; 0x2c
#endif /* RCC_CFGR_PLLSRC_HSI_DIV2 */

       /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 800191a:	1d3b      	adds	r3, r7, #4
 800191c:	681b      	ldr	r3, [r3, #0]
 800191e:	685b      	ldr	r3, [r3, #4]
 8001920:	2b00      	cmp	r3, #0
 8001922:	d059      	beq.n	80019d8 <HAL_RCC_OscConfig+0x244>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001924:	f7ff f9c8 	bl	8000cb8 <HAL_GetTick>
 8001928:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800192c:	e00a      	b.n	8001944 <HAL_RCC_OscConfig+0x1b0>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800192e:	f7ff f9c3 	bl	8000cb8 <HAL_GetTick>
 8001932:	4602      	mov	r2, r0
 8001934:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8001938:	1ad3      	subs	r3, r2, r3
 800193a:	2b64      	cmp	r3, #100	; 0x64
 800193c:	d902      	bls.n	8001944 <HAL_RCC_OscConfig+0x1b0>
          {
            return HAL_TIMEOUT;
 800193e:	2303      	movs	r3, #3
 8001940:	f000 be29 	b.w	8002596 <HAL_RCC_OscConfig+0xe02>
 8001944:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8001948:	f8c7 31d0 	str.w	r3, [r7, #464]	; 0x1d0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800194c:	f8d7 31d0 	ldr.w	r3, [r7, #464]	; 0x1d0
 8001950:	fa93 f3a3 	rbit	r3, r3
 8001954:	f8c7 31cc 	str.w	r3, [r7, #460]	; 0x1cc
  return result;
 8001958:	f8d7 31cc 	ldr.w	r3, [r7, #460]	; 0x1cc
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800195c:	fab3 f383 	clz	r3, r3
 8001960:	b2db      	uxtb	r3, r3
 8001962:	095b      	lsrs	r3, r3, #5
 8001964:	b2db      	uxtb	r3, r3
 8001966:	f043 0301 	orr.w	r3, r3, #1
 800196a:	b2db      	uxtb	r3, r3
 800196c:	2b01      	cmp	r3, #1
 800196e:	d102      	bne.n	8001976 <HAL_RCC_OscConfig+0x1e2>
 8001970:	4b46      	ldr	r3, [pc, #280]	; (8001a8c <HAL_RCC_OscConfig+0x2f8>)
 8001972:	681b      	ldr	r3, [r3, #0]
 8001974:	e015      	b.n	80019a2 <HAL_RCC_OscConfig+0x20e>
 8001976:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 800197a:	f8c7 31c8 	str.w	r3, [r7, #456]	; 0x1c8
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800197e:	f8d7 31c8 	ldr.w	r3, [r7, #456]	; 0x1c8
 8001982:	fa93 f3a3 	rbit	r3, r3
 8001986:	f8c7 31c4 	str.w	r3, [r7, #452]	; 0x1c4
 800198a:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 800198e:	f8c7 31c0 	str.w	r3, [r7, #448]	; 0x1c0
 8001992:	f8d7 31c0 	ldr.w	r3, [r7, #448]	; 0x1c0
 8001996:	fa93 f3a3 	rbit	r3, r3
 800199a:	f8c7 31bc 	str.w	r3, [r7, #444]	; 0x1bc
 800199e:	4b3b      	ldr	r3, [pc, #236]	; (8001a8c <HAL_RCC_OscConfig+0x2f8>)
 80019a0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80019a2:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 80019a6:	f8c7 21b8 	str.w	r2, [r7, #440]	; 0x1b8
 80019aa:	f8d7 21b8 	ldr.w	r2, [r7, #440]	; 0x1b8
 80019ae:	fa92 f2a2 	rbit	r2, r2
 80019b2:	f8c7 21b4 	str.w	r2, [r7, #436]	; 0x1b4
  return result;
 80019b6:	f8d7 21b4 	ldr.w	r2, [r7, #436]	; 0x1b4
 80019ba:	fab2 f282 	clz	r2, r2
 80019be:	b2d2      	uxtb	r2, r2
 80019c0:	f042 0220 	orr.w	r2, r2, #32
 80019c4:	b2d2      	uxtb	r2, r2
 80019c6:	f002 021f 	and.w	r2, r2, #31
 80019ca:	2101      	movs	r1, #1
 80019cc:	fa01 f202 	lsl.w	r2, r1, r2
 80019d0:	4013      	ands	r3, r2
 80019d2:	2b00      	cmp	r3, #0
 80019d4:	d0ab      	beq.n	800192e <HAL_RCC_OscConfig+0x19a>
 80019d6:	e05c      	b.n	8001a92 <HAL_RCC_OscConfig+0x2fe>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80019d8:	f7ff f96e 	bl	8000cb8 <HAL_GetTick>
 80019dc:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80019e0:	e00a      	b.n	80019f8 <HAL_RCC_OscConfig+0x264>
        {
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80019e2:	f7ff f969 	bl	8000cb8 <HAL_GetTick>
 80019e6:	4602      	mov	r2, r0
 80019e8:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 80019ec:	1ad3      	subs	r3, r2, r3
 80019ee:	2b64      	cmp	r3, #100	; 0x64
 80019f0:	d902      	bls.n	80019f8 <HAL_RCC_OscConfig+0x264>
          {
            return HAL_TIMEOUT;
 80019f2:	2303      	movs	r3, #3
 80019f4:	f000 bdcf 	b.w	8002596 <HAL_RCC_OscConfig+0xe02>
 80019f8:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80019fc:	f8c7 31b0 	str.w	r3, [r7, #432]	; 0x1b0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001a00:	f8d7 31b0 	ldr.w	r3, [r7, #432]	; 0x1b0
 8001a04:	fa93 f3a3 	rbit	r3, r3
 8001a08:	f8c7 31ac 	str.w	r3, [r7, #428]	; 0x1ac
  return result;
 8001a0c:	f8d7 31ac 	ldr.w	r3, [r7, #428]	; 0x1ac
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001a10:	fab3 f383 	clz	r3, r3
 8001a14:	b2db      	uxtb	r3, r3
 8001a16:	095b      	lsrs	r3, r3, #5
 8001a18:	b2db      	uxtb	r3, r3
 8001a1a:	f043 0301 	orr.w	r3, r3, #1
 8001a1e:	b2db      	uxtb	r3, r3
 8001a20:	2b01      	cmp	r3, #1
 8001a22:	d102      	bne.n	8001a2a <HAL_RCC_OscConfig+0x296>
 8001a24:	4b19      	ldr	r3, [pc, #100]	; (8001a8c <HAL_RCC_OscConfig+0x2f8>)
 8001a26:	681b      	ldr	r3, [r3, #0]
 8001a28:	e015      	b.n	8001a56 <HAL_RCC_OscConfig+0x2c2>
 8001a2a:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8001a2e:	f8c7 31a8 	str.w	r3, [r7, #424]	; 0x1a8
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001a32:	f8d7 31a8 	ldr.w	r3, [r7, #424]	; 0x1a8
 8001a36:	fa93 f3a3 	rbit	r3, r3
 8001a3a:	f8c7 31a4 	str.w	r3, [r7, #420]	; 0x1a4
 8001a3e:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8001a42:	f8c7 31a0 	str.w	r3, [r7, #416]	; 0x1a0
 8001a46:	f8d7 31a0 	ldr.w	r3, [r7, #416]	; 0x1a0
 8001a4a:	fa93 f3a3 	rbit	r3, r3
 8001a4e:	f8c7 319c 	str.w	r3, [r7, #412]	; 0x19c
 8001a52:	4b0e      	ldr	r3, [pc, #56]	; (8001a8c <HAL_RCC_OscConfig+0x2f8>)
 8001a54:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001a56:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8001a5a:	f8c7 2198 	str.w	r2, [r7, #408]	; 0x198
 8001a5e:	f8d7 2198 	ldr.w	r2, [r7, #408]	; 0x198
 8001a62:	fa92 f2a2 	rbit	r2, r2
 8001a66:	f8c7 2194 	str.w	r2, [r7, #404]	; 0x194
  return result;
 8001a6a:	f8d7 2194 	ldr.w	r2, [r7, #404]	; 0x194
 8001a6e:	fab2 f282 	clz	r2, r2
 8001a72:	b2d2      	uxtb	r2, r2
 8001a74:	f042 0220 	orr.w	r2, r2, #32
 8001a78:	b2d2      	uxtb	r2, r2
 8001a7a:	f002 021f 	and.w	r2, r2, #31
 8001a7e:	2101      	movs	r1, #1
 8001a80:	fa01 f202 	lsl.w	r2, r1, r2
 8001a84:	4013      	ands	r3, r2
 8001a86:	2b00      	cmp	r3, #0
 8001a88:	d1ab      	bne.n	80019e2 <HAL_RCC_OscConfig+0x24e>
 8001a8a:	e002      	b.n	8001a92 <HAL_RCC_OscConfig+0x2fe>
 8001a8c:	40021000 	.word	0x40021000
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001a90:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001a92:	1d3b      	adds	r3, r7, #4
 8001a94:	681b      	ldr	r3, [r3, #0]
 8001a96:	681b      	ldr	r3, [r3, #0]
 8001a98:	f003 0302 	and.w	r3, r3, #2
 8001a9c:	2b00      	cmp	r3, #0
 8001a9e:	f000 816f 	beq.w	8001d80 <HAL_RCC_OscConfig+0x5ec>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
    
    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */ 
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI) 
 8001aa2:	4bd0      	ldr	r3, [pc, #832]	; (8001de4 <HAL_RCC_OscConfig+0x650>)
 8001aa4:	685b      	ldr	r3, [r3, #4]
 8001aa6:	f003 030c 	and.w	r3, r3, #12
 8001aaa:	2b00      	cmp	r3, #0
 8001aac:	d00b      	beq.n	8001ac6 <HAL_RCC_OscConfig+0x332>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI)))
 8001aae:	4bcd      	ldr	r3, [pc, #820]	; (8001de4 <HAL_RCC_OscConfig+0x650>)
 8001ab0:	685b      	ldr	r3, [r3, #4]
 8001ab2:	f003 030c 	and.w	r3, r3, #12
 8001ab6:	2b08      	cmp	r3, #8
 8001ab8:	d16c      	bne.n	8001b94 <HAL_RCC_OscConfig+0x400>
 8001aba:	4bca      	ldr	r3, [pc, #808]	; (8001de4 <HAL_RCC_OscConfig+0x650>)
 8001abc:	685b      	ldr	r3, [r3, #4]
 8001abe:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001ac2:	2b00      	cmp	r3, #0
 8001ac4:	d166      	bne.n	8001b94 <HAL_RCC_OscConfig+0x400>
 8001ac6:	2302      	movs	r3, #2
 8001ac8:	f8c7 3190 	str.w	r3, [r7, #400]	; 0x190
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001acc:	f8d7 3190 	ldr.w	r3, [r7, #400]	; 0x190
 8001ad0:	fa93 f3a3 	rbit	r3, r3
 8001ad4:	f8c7 318c 	str.w	r3, [r7, #396]	; 0x18c
  return result;
 8001ad8:	f8d7 318c 	ldr.w	r3, [r7, #396]	; 0x18c
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001adc:	fab3 f383 	clz	r3, r3
 8001ae0:	b2db      	uxtb	r3, r3
 8001ae2:	095b      	lsrs	r3, r3, #5
 8001ae4:	b2db      	uxtb	r3, r3
 8001ae6:	f043 0301 	orr.w	r3, r3, #1
 8001aea:	b2db      	uxtb	r3, r3
 8001aec:	2b01      	cmp	r3, #1
 8001aee:	d102      	bne.n	8001af6 <HAL_RCC_OscConfig+0x362>
 8001af0:	4bbc      	ldr	r3, [pc, #752]	; (8001de4 <HAL_RCC_OscConfig+0x650>)
 8001af2:	681b      	ldr	r3, [r3, #0]
 8001af4:	e013      	b.n	8001b1e <HAL_RCC_OscConfig+0x38a>
 8001af6:	2302      	movs	r3, #2
 8001af8:	f8c7 3188 	str.w	r3, [r7, #392]	; 0x188
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001afc:	f8d7 3188 	ldr.w	r3, [r7, #392]	; 0x188
 8001b00:	fa93 f3a3 	rbit	r3, r3
 8001b04:	f8c7 3184 	str.w	r3, [r7, #388]	; 0x184
 8001b08:	2302      	movs	r3, #2
 8001b0a:	f8c7 3180 	str.w	r3, [r7, #384]	; 0x180
 8001b0e:	f8d7 3180 	ldr.w	r3, [r7, #384]	; 0x180
 8001b12:	fa93 f3a3 	rbit	r3, r3
 8001b16:	f8c7 317c 	str.w	r3, [r7, #380]	; 0x17c
 8001b1a:	4bb2      	ldr	r3, [pc, #712]	; (8001de4 <HAL_RCC_OscConfig+0x650>)
 8001b1c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001b1e:	2202      	movs	r2, #2
 8001b20:	f8c7 2178 	str.w	r2, [r7, #376]	; 0x178
 8001b24:	f8d7 2178 	ldr.w	r2, [r7, #376]	; 0x178
 8001b28:	fa92 f2a2 	rbit	r2, r2
 8001b2c:	f8c7 2174 	str.w	r2, [r7, #372]	; 0x174
  return result;
 8001b30:	f8d7 2174 	ldr.w	r2, [r7, #372]	; 0x174
 8001b34:	fab2 f282 	clz	r2, r2
 8001b38:	b2d2      	uxtb	r2, r2
 8001b3a:	f042 0220 	orr.w	r2, r2, #32
 8001b3e:	b2d2      	uxtb	r2, r2
 8001b40:	f002 021f 	and.w	r2, r2, #31
 8001b44:	2101      	movs	r1, #1
 8001b46:	fa01 f202 	lsl.w	r2, r1, r2
 8001b4a:	4013      	ands	r3, r2
 8001b4c:	2b00      	cmp	r3, #0
 8001b4e:	d007      	beq.n	8001b60 <HAL_RCC_OscConfig+0x3cc>
 8001b50:	1d3b      	adds	r3, r7, #4
 8001b52:	681b      	ldr	r3, [r3, #0]
 8001b54:	691b      	ldr	r3, [r3, #16]
 8001b56:	2b01      	cmp	r3, #1
 8001b58:	d002      	beq.n	8001b60 <HAL_RCC_OscConfig+0x3cc>
      {
        return HAL_ERROR;
 8001b5a:	2301      	movs	r3, #1
 8001b5c:	f000 bd1b 	b.w	8002596 <HAL_RCC_OscConfig+0xe02>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001b60:	4ba0      	ldr	r3, [pc, #640]	; (8001de4 <HAL_RCC_OscConfig+0x650>)
 8001b62:	681b      	ldr	r3, [r3, #0]
 8001b64:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001b68:	1d3b      	adds	r3, r7, #4
 8001b6a:	681b      	ldr	r3, [r3, #0]
 8001b6c:	695b      	ldr	r3, [r3, #20]
 8001b6e:	21f8      	movs	r1, #248	; 0xf8
 8001b70:	f8c7 1170 	str.w	r1, [r7, #368]	; 0x170
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001b74:	f8d7 1170 	ldr.w	r1, [r7, #368]	; 0x170
 8001b78:	fa91 f1a1 	rbit	r1, r1
 8001b7c:	f8c7 116c 	str.w	r1, [r7, #364]	; 0x16c
  return result;
 8001b80:	f8d7 116c 	ldr.w	r1, [r7, #364]	; 0x16c
 8001b84:	fab1 f181 	clz	r1, r1
 8001b88:	b2c9      	uxtb	r1, r1
 8001b8a:	408b      	lsls	r3, r1
 8001b8c:	4995      	ldr	r1, [pc, #596]	; (8001de4 <HAL_RCC_OscConfig+0x650>)
 8001b8e:	4313      	orrs	r3, r2
 8001b90:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001b92:	e0f5      	b.n	8001d80 <HAL_RCC_OscConfig+0x5ec>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8001b94:	1d3b      	adds	r3, r7, #4
 8001b96:	681b      	ldr	r3, [r3, #0]
 8001b98:	691b      	ldr	r3, [r3, #16]
 8001b9a:	2b00      	cmp	r3, #0
 8001b9c:	f000 8085 	beq.w	8001caa <HAL_RCC_OscConfig+0x516>
 8001ba0:	2301      	movs	r3, #1
 8001ba2:	f8c7 3168 	str.w	r3, [r7, #360]	; 0x168
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001ba6:	f8d7 3168 	ldr.w	r3, [r7, #360]	; 0x168
 8001baa:	fa93 f3a3 	rbit	r3, r3
 8001bae:	f8c7 3164 	str.w	r3, [r7, #356]	; 0x164
  return result;
 8001bb2:	f8d7 3164 	ldr.w	r3, [r7, #356]	; 0x164
      {
       /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001bb6:	fab3 f383 	clz	r3, r3
 8001bba:	b2db      	uxtb	r3, r3
 8001bbc:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8001bc0:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8001bc4:	009b      	lsls	r3, r3, #2
 8001bc6:	461a      	mov	r2, r3
 8001bc8:	2301      	movs	r3, #1
 8001bca:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001bcc:	f7ff f874 	bl	8000cb8 <HAL_GetTick>
 8001bd0:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001bd4:	e00a      	b.n	8001bec <HAL_RCC_OscConfig+0x458>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001bd6:	f7ff f86f 	bl	8000cb8 <HAL_GetTick>
 8001bda:	4602      	mov	r2, r0
 8001bdc:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8001be0:	1ad3      	subs	r3, r2, r3
 8001be2:	2b02      	cmp	r3, #2
 8001be4:	d902      	bls.n	8001bec <HAL_RCC_OscConfig+0x458>
          {
            return HAL_TIMEOUT;
 8001be6:	2303      	movs	r3, #3
 8001be8:	f000 bcd5 	b.w	8002596 <HAL_RCC_OscConfig+0xe02>
 8001bec:	2302      	movs	r3, #2
 8001bee:	f8c7 3160 	str.w	r3, [r7, #352]	; 0x160
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001bf2:	f8d7 3160 	ldr.w	r3, [r7, #352]	; 0x160
 8001bf6:	fa93 f3a3 	rbit	r3, r3
 8001bfa:	f8c7 315c 	str.w	r3, [r7, #348]	; 0x15c
  return result;
 8001bfe:	f8d7 315c 	ldr.w	r3, [r7, #348]	; 0x15c
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001c02:	fab3 f383 	clz	r3, r3
 8001c06:	b2db      	uxtb	r3, r3
 8001c08:	095b      	lsrs	r3, r3, #5
 8001c0a:	b2db      	uxtb	r3, r3
 8001c0c:	f043 0301 	orr.w	r3, r3, #1
 8001c10:	b2db      	uxtb	r3, r3
 8001c12:	2b01      	cmp	r3, #1
 8001c14:	d102      	bne.n	8001c1c <HAL_RCC_OscConfig+0x488>
 8001c16:	4b73      	ldr	r3, [pc, #460]	; (8001de4 <HAL_RCC_OscConfig+0x650>)
 8001c18:	681b      	ldr	r3, [r3, #0]
 8001c1a:	e013      	b.n	8001c44 <HAL_RCC_OscConfig+0x4b0>
 8001c1c:	2302      	movs	r3, #2
 8001c1e:	f8c7 3158 	str.w	r3, [r7, #344]	; 0x158
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001c22:	f8d7 3158 	ldr.w	r3, [r7, #344]	; 0x158
 8001c26:	fa93 f3a3 	rbit	r3, r3
 8001c2a:	f8c7 3154 	str.w	r3, [r7, #340]	; 0x154
 8001c2e:	2302      	movs	r3, #2
 8001c30:	f8c7 3150 	str.w	r3, [r7, #336]	; 0x150
 8001c34:	f8d7 3150 	ldr.w	r3, [r7, #336]	; 0x150
 8001c38:	fa93 f3a3 	rbit	r3, r3
 8001c3c:	f8c7 314c 	str.w	r3, [r7, #332]	; 0x14c
 8001c40:	4b68      	ldr	r3, [pc, #416]	; (8001de4 <HAL_RCC_OscConfig+0x650>)
 8001c42:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001c44:	2202      	movs	r2, #2
 8001c46:	f8c7 2148 	str.w	r2, [r7, #328]	; 0x148
 8001c4a:	f8d7 2148 	ldr.w	r2, [r7, #328]	; 0x148
 8001c4e:	fa92 f2a2 	rbit	r2, r2
 8001c52:	f8c7 2144 	str.w	r2, [r7, #324]	; 0x144
  return result;
 8001c56:	f8d7 2144 	ldr.w	r2, [r7, #324]	; 0x144
 8001c5a:	fab2 f282 	clz	r2, r2
 8001c5e:	b2d2      	uxtb	r2, r2
 8001c60:	f042 0220 	orr.w	r2, r2, #32
 8001c64:	b2d2      	uxtb	r2, r2
 8001c66:	f002 021f 	and.w	r2, r2, #31
 8001c6a:	2101      	movs	r1, #1
 8001c6c:	fa01 f202 	lsl.w	r2, r1, r2
 8001c70:	4013      	ands	r3, r2
 8001c72:	2b00      	cmp	r3, #0
 8001c74:	d0af      	beq.n	8001bd6 <HAL_RCC_OscConfig+0x442>
          }
        }
                
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001c76:	4b5b      	ldr	r3, [pc, #364]	; (8001de4 <HAL_RCC_OscConfig+0x650>)
 8001c78:	681b      	ldr	r3, [r3, #0]
 8001c7a:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001c7e:	1d3b      	adds	r3, r7, #4
 8001c80:	681b      	ldr	r3, [r3, #0]
 8001c82:	695b      	ldr	r3, [r3, #20]
 8001c84:	21f8      	movs	r1, #248	; 0xf8
 8001c86:	f8c7 1140 	str.w	r1, [r7, #320]	; 0x140
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001c8a:	f8d7 1140 	ldr.w	r1, [r7, #320]	; 0x140
 8001c8e:	fa91 f1a1 	rbit	r1, r1
 8001c92:	f8c7 113c 	str.w	r1, [r7, #316]	; 0x13c
  return result;
 8001c96:	f8d7 113c 	ldr.w	r1, [r7, #316]	; 0x13c
 8001c9a:	fab1 f181 	clz	r1, r1
 8001c9e:	b2c9      	uxtb	r1, r1
 8001ca0:	408b      	lsls	r3, r1
 8001ca2:	4950      	ldr	r1, [pc, #320]	; (8001de4 <HAL_RCC_OscConfig+0x650>)
 8001ca4:	4313      	orrs	r3, r2
 8001ca6:	600b      	str	r3, [r1, #0]
 8001ca8:	e06a      	b.n	8001d80 <HAL_RCC_OscConfig+0x5ec>
 8001caa:	2301      	movs	r3, #1
 8001cac:	f8c7 3138 	str.w	r3, [r7, #312]	; 0x138
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001cb0:	f8d7 3138 	ldr.w	r3, [r7, #312]	; 0x138
 8001cb4:	fa93 f3a3 	rbit	r3, r3
 8001cb8:	f8c7 3134 	str.w	r3, [r7, #308]	; 0x134
  return result;
 8001cbc:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001cc0:	fab3 f383 	clz	r3, r3
 8001cc4:	b2db      	uxtb	r3, r3
 8001cc6:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8001cca:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8001cce:	009b      	lsls	r3, r3, #2
 8001cd0:	461a      	mov	r2, r3
 8001cd2:	2300      	movs	r3, #0
 8001cd4:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001cd6:	f7fe ffef 	bl	8000cb8 <HAL_GetTick>
 8001cda:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001cde:	e00a      	b.n	8001cf6 <HAL_RCC_OscConfig+0x562>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001ce0:	f7fe ffea 	bl	8000cb8 <HAL_GetTick>
 8001ce4:	4602      	mov	r2, r0
 8001ce6:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8001cea:	1ad3      	subs	r3, r2, r3
 8001cec:	2b02      	cmp	r3, #2
 8001cee:	d902      	bls.n	8001cf6 <HAL_RCC_OscConfig+0x562>
          {
            return HAL_TIMEOUT;
 8001cf0:	2303      	movs	r3, #3
 8001cf2:	f000 bc50 	b.w	8002596 <HAL_RCC_OscConfig+0xe02>
 8001cf6:	2302      	movs	r3, #2
 8001cf8:	f8c7 3130 	str.w	r3, [r7, #304]	; 0x130
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001cfc:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
 8001d00:	fa93 f3a3 	rbit	r3, r3
 8001d04:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
  return result;
 8001d08:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001d0c:	fab3 f383 	clz	r3, r3
 8001d10:	b2db      	uxtb	r3, r3
 8001d12:	095b      	lsrs	r3, r3, #5
 8001d14:	b2db      	uxtb	r3, r3
 8001d16:	f043 0301 	orr.w	r3, r3, #1
 8001d1a:	b2db      	uxtb	r3, r3
 8001d1c:	2b01      	cmp	r3, #1
 8001d1e:	d102      	bne.n	8001d26 <HAL_RCC_OscConfig+0x592>
 8001d20:	4b30      	ldr	r3, [pc, #192]	; (8001de4 <HAL_RCC_OscConfig+0x650>)
 8001d22:	681b      	ldr	r3, [r3, #0]
 8001d24:	e013      	b.n	8001d4e <HAL_RCC_OscConfig+0x5ba>
 8001d26:	2302      	movs	r3, #2
 8001d28:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001d2c:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8001d30:	fa93 f3a3 	rbit	r3, r3
 8001d34:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
 8001d38:	2302      	movs	r3, #2
 8001d3a:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
 8001d3e:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 8001d42:	fa93 f3a3 	rbit	r3, r3
 8001d46:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
 8001d4a:	4b26      	ldr	r3, [pc, #152]	; (8001de4 <HAL_RCC_OscConfig+0x650>)
 8001d4c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001d4e:	2202      	movs	r2, #2
 8001d50:	f8c7 2118 	str.w	r2, [r7, #280]	; 0x118
 8001d54:	f8d7 2118 	ldr.w	r2, [r7, #280]	; 0x118
 8001d58:	fa92 f2a2 	rbit	r2, r2
 8001d5c:	f8c7 2114 	str.w	r2, [r7, #276]	; 0x114
  return result;
 8001d60:	f8d7 2114 	ldr.w	r2, [r7, #276]	; 0x114
 8001d64:	fab2 f282 	clz	r2, r2
 8001d68:	b2d2      	uxtb	r2, r2
 8001d6a:	f042 0220 	orr.w	r2, r2, #32
 8001d6e:	b2d2      	uxtb	r2, r2
 8001d70:	f002 021f 	and.w	r2, r2, #31
 8001d74:	2101      	movs	r1, #1
 8001d76:	fa01 f202 	lsl.w	r2, r1, r2
 8001d7a:	4013      	ands	r3, r2
 8001d7c:	2b00      	cmp	r3, #0
 8001d7e:	d1af      	bne.n	8001ce0 <HAL_RCC_OscConfig+0x54c>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001d80:	1d3b      	adds	r3, r7, #4
 8001d82:	681b      	ldr	r3, [r3, #0]
 8001d84:	681b      	ldr	r3, [r3, #0]
 8001d86:	f003 0308 	and.w	r3, r3, #8
 8001d8a:	2b00      	cmp	r3, #0
 8001d8c:	f000 80da 	beq.w	8001f44 <HAL_RCC_OscConfig+0x7b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));
    
    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8001d90:	1d3b      	adds	r3, r7, #4
 8001d92:	681b      	ldr	r3, [r3, #0]
 8001d94:	699b      	ldr	r3, [r3, #24]
 8001d96:	2b00      	cmp	r3, #0
 8001d98:	d069      	beq.n	8001e6e <HAL_RCC_OscConfig+0x6da>
 8001d9a:	2301      	movs	r3, #1
 8001d9c:	f8c7 3110 	str.w	r3, [r7, #272]	; 0x110
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001da0:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
 8001da4:	fa93 f3a3 	rbit	r3, r3
 8001da8:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
  return result;
 8001dac:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001db0:	fab3 f383 	clz	r3, r3
 8001db4:	b2db      	uxtb	r3, r3
 8001db6:	461a      	mov	r2, r3
 8001db8:	4b0b      	ldr	r3, [pc, #44]	; (8001de8 <HAL_RCC_OscConfig+0x654>)
 8001dba:	4413      	add	r3, r2
 8001dbc:	009b      	lsls	r3, r3, #2
 8001dbe:	461a      	mov	r2, r3
 8001dc0:	2301      	movs	r3, #1
 8001dc2:	6013      	str	r3, [r2, #0]
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001dc4:	f7fe ff78 	bl	8000cb8 <HAL_GetTick>
 8001dc8:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
      
      /* Wait till LSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001dcc:	e00e      	b.n	8001dec <HAL_RCC_OscConfig+0x658>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8001dce:	f7fe ff73 	bl	8000cb8 <HAL_GetTick>
 8001dd2:	4602      	mov	r2, r0
 8001dd4:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8001dd8:	1ad3      	subs	r3, r2, r3
 8001dda:	2b02      	cmp	r3, #2
 8001ddc:	d906      	bls.n	8001dec <HAL_RCC_OscConfig+0x658>
        {
          return HAL_TIMEOUT;
 8001dde:	2303      	movs	r3, #3
 8001de0:	e3d9      	b.n	8002596 <HAL_RCC_OscConfig+0xe02>
 8001de2:	bf00      	nop
 8001de4:	40021000 	.word	0x40021000
 8001de8:	10908120 	.word	0x10908120
 8001dec:	2302      	movs	r3, #2
 8001dee:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001df2:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 8001df6:	fa93 f3a3 	rbit	r3, r3
 8001dfa:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
 8001dfe:	f507 7380 	add.w	r3, r7, #256	; 0x100
 8001e02:	2202      	movs	r2, #2
 8001e04:	601a      	str	r2, [r3, #0]
 8001e06:	f507 7380 	add.w	r3, r7, #256	; 0x100
 8001e0a:	681b      	ldr	r3, [r3, #0]
 8001e0c:	fa93 f2a3 	rbit	r2, r3
 8001e10:	f107 03fc 	add.w	r3, r7, #252	; 0xfc
 8001e14:	601a      	str	r2, [r3, #0]
 8001e16:	f107 03f8 	add.w	r3, r7, #248	; 0xf8
 8001e1a:	2202      	movs	r2, #2
 8001e1c:	601a      	str	r2, [r3, #0]
 8001e1e:	f107 03f8 	add.w	r3, r7, #248	; 0xf8
 8001e22:	681b      	ldr	r3, [r3, #0]
 8001e24:	fa93 f2a3 	rbit	r2, r3
 8001e28:	f107 03f4 	add.w	r3, r7, #244	; 0xf4
 8001e2c:	601a      	str	r2, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001e2e:	4ba5      	ldr	r3, [pc, #660]	; (80020c4 <HAL_RCC_OscConfig+0x930>)
 8001e30:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8001e32:	f107 03f0 	add.w	r3, r7, #240	; 0xf0
 8001e36:	2102      	movs	r1, #2
 8001e38:	6019      	str	r1, [r3, #0]
 8001e3a:	f107 03f0 	add.w	r3, r7, #240	; 0xf0
 8001e3e:	681b      	ldr	r3, [r3, #0]
 8001e40:	fa93 f1a3 	rbit	r1, r3
 8001e44:	f107 03ec 	add.w	r3, r7, #236	; 0xec
 8001e48:	6019      	str	r1, [r3, #0]
  return result;
 8001e4a:	f107 03ec 	add.w	r3, r7, #236	; 0xec
 8001e4e:	681b      	ldr	r3, [r3, #0]
 8001e50:	fab3 f383 	clz	r3, r3
 8001e54:	b2db      	uxtb	r3, r3
 8001e56:	f043 0360 	orr.w	r3, r3, #96	; 0x60
 8001e5a:	b2db      	uxtb	r3, r3
 8001e5c:	f003 031f 	and.w	r3, r3, #31
 8001e60:	2101      	movs	r1, #1
 8001e62:	fa01 f303 	lsl.w	r3, r1, r3
 8001e66:	4013      	ands	r3, r2
 8001e68:	2b00      	cmp	r3, #0
 8001e6a:	d0b0      	beq.n	8001dce <HAL_RCC_OscConfig+0x63a>
 8001e6c:	e06a      	b.n	8001f44 <HAL_RCC_OscConfig+0x7b0>
 8001e6e:	f107 03e8 	add.w	r3, r7, #232	; 0xe8
 8001e72:	2201      	movs	r2, #1
 8001e74:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001e76:	f107 03e8 	add.w	r3, r7, #232	; 0xe8
 8001e7a:	681b      	ldr	r3, [r3, #0]
 8001e7c:	fa93 f2a3 	rbit	r2, r3
 8001e80:	f107 03e4 	add.w	r3, r7, #228	; 0xe4
 8001e84:	601a      	str	r2, [r3, #0]
  return result;
 8001e86:	f107 03e4 	add.w	r3, r7, #228	; 0xe4
 8001e8a:	681b      	ldr	r3, [r3, #0]
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001e8c:	fab3 f383 	clz	r3, r3
 8001e90:	b2db      	uxtb	r3, r3
 8001e92:	461a      	mov	r2, r3
 8001e94:	4b8c      	ldr	r3, [pc, #560]	; (80020c8 <HAL_RCC_OscConfig+0x934>)
 8001e96:	4413      	add	r3, r2
 8001e98:	009b      	lsls	r3, r3, #2
 8001e9a:	461a      	mov	r2, r3
 8001e9c:	2300      	movs	r3, #0
 8001e9e:	6013      	str	r3, [r2, #0]
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001ea0:	f7fe ff0a 	bl	8000cb8 <HAL_GetTick>
 8001ea4:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
      
      /* Wait till LSI is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001ea8:	e009      	b.n	8001ebe <HAL_RCC_OscConfig+0x72a>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8001eaa:	f7fe ff05 	bl	8000cb8 <HAL_GetTick>
 8001eae:	4602      	mov	r2, r0
 8001eb0:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8001eb4:	1ad3      	subs	r3, r2, r3
 8001eb6:	2b02      	cmp	r3, #2
 8001eb8:	d901      	bls.n	8001ebe <HAL_RCC_OscConfig+0x72a>
        {
          return HAL_TIMEOUT;
 8001eba:	2303      	movs	r3, #3
 8001ebc:	e36b      	b.n	8002596 <HAL_RCC_OscConfig+0xe02>
 8001ebe:	f107 03e0 	add.w	r3, r7, #224	; 0xe0
 8001ec2:	2202      	movs	r2, #2
 8001ec4:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001ec6:	f107 03e0 	add.w	r3, r7, #224	; 0xe0
 8001eca:	681b      	ldr	r3, [r3, #0]
 8001ecc:	fa93 f2a3 	rbit	r2, r3
 8001ed0:	f107 03dc 	add.w	r3, r7, #220	; 0xdc
 8001ed4:	601a      	str	r2, [r3, #0]
 8001ed6:	f107 03d8 	add.w	r3, r7, #216	; 0xd8
 8001eda:	2202      	movs	r2, #2
 8001edc:	601a      	str	r2, [r3, #0]
 8001ede:	f107 03d8 	add.w	r3, r7, #216	; 0xd8
 8001ee2:	681b      	ldr	r3, [r3, #0]
 8001ee4:	fa93 f2a3 	rbit	r2, r3
 8001ee8:	f107 03d4 	add.w	r3, r7, #212	; 0xd4
 8001eec:	601a      	str	r2, [r3, #0]
 8001eee:	f107 03d0 	add.w	r3, r7, #208	; 0xd0
 8001ef2:	2202      	movs	r2, #2
 8001ef4:	601a      	str	r2, [r3, #0]
 8001ef6:	f107 03d0 	add.w	r3, r7, #208	; 0xd0
 8001efa:	681b      	ldr	r3, [r3, #0]
 8001efc:	fa93 f2a3 	rbit	r2, r3
 8001f00:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 8001f04:	601a      	str	r2, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001f06:	4b6f      	ldr	r3, [pc, #444]	; (80020c4 <HAL_RCC_OscConfig+0x930>)
 8001f08:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8001f0a:	f107 03c8 	add.w	r3, r7, #200	; 0xc8
 8001f0e:	2102      	movs	r1, #2
 8001f10:	6019      	str	r1, [r3, #0]
 8001f12:	f107 03c8 	add.w	r3, r7, #200	; 0xc8
 8001f16:	681b      	ldr	r3, [r3, #0]
 8001f18:	fa93 f1a3 	rbit	r1, r3
 8001f1c:	f107 03c4 	add.w	r3, r7, #196	; 0xc4
 8001f20:	6019      	str	r1, [r3, #0]
  return result;
 8001f22:	f107 03c4 	add.w	r3, r7, #196	; 0xc4
 8001f26:	681b      	ldr	r3, [r3, #0]
 8001f28:	fab3 f383 	clz	r3, r3
 8001f2c:	b2db      	uxtb	r3, r3
 8001f2e:	f043 0360 	orr.w	r3, r3, #96	; 0x60
 8001f32:	b2db      	uxtb	r3, r3
 8001f34:	f003 031f 	and.w	r3, r3, #31
 8001f38:	2101      	movs	r1, #1
 8001f3a:	fa01 f303 	lsl.w	r3, r1, r3
 8001f3e:	4013      	ands	r3, r2
 8001f40:	2b00      	cmp	r3, #0
 8001f42:	d1b2      	bne.n	8001eaa <HAL_RCC_OscConfig+0x716>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001f44:	1d3b      	adds	r3, r7, #4
 8001f46:	681b      	ldr	r3, [r3, #0]
 8001f48:	681b      	ldr	r3, [r3, #0]
 8001f4a:	f003 0304 	and.w	r3, r3, #4
 8001f4e:	2b00      	cmp	r3, #0
 8001f50:	f000 8158 	beq.w	8002204 <HAL_RCC_OscConfig+0xa70>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001f54:	2300      	movs	r3, #0
 8001f56:	f887 31ff 	strb.w	r3, [r7, #511]	; 0x1ff
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001f5a:	4b5a      	ldr	r3, [pc, #360]	; (80020c4 <HAL_RCC_OscConfig+0x930>)
 8001f5c:	69db      	ldr	r3, [r3, #28]
 8001f5e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001f62:	2b00      	cmp	r3, #0
 8001f64:	d112      	bne.n	8001f8c <HAL_RCC_OscConfig+0x7f8>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001f66:	4b57      	ldr	r3, [pc, #348]	; (80020c4 <HAL_RCC_OscConfig+0x930>)
 8001f68:	69db      	ldr	r3, [r3, #28]
 8001f6a:	4a56      	ldr	r2, [pc, #344]	; (80020c4 <HAL_RCC_OscConfig+0x930>)
 8001f6c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001f70:	61d3      	str	r3, [r2, #28]
 8001f72:	4b54      	ldr	r3, [pc, #336]	; (80020c4 <HAL_RCC_OscConfig+0x930>)
 8001f74:	69db      	ldr	r3, [r3, #28]
 8001f76:	f003 5280 	and.w	r2, r3, #268435456	; 0x10000000
 8001f7a:	f107 0308 	add.w	r3, r7, #8
 8001f7e:	601a      	str	r2, [r3, #0]
 8001f80:	f107 0308 	add.w	r3, r7, #8
 8001f84:	681b      	ldr	r3, [r3, #0]
      pwrclkchanged = SET;
 8001f86:	2301      	movs	r3, #1
 8001f88:	f887 31ff 	strb.w	r3, [r7, #511]	; 0x1ff
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001f8c:	4b4f      	ldr	r3, [pc, #316]	; (80020cc <HAL_RCC_OscConfig+0x938>)
 8001f8e:	681b      	ldr	r3, [r3, #0]
 8001f90:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001f94:	2b00      	cmp	r3, #0
 8001f96:	d11a      	bne.n	8001fce <HAL_RCC_OscConfig+0x83a>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8001f98:	4b4c      	ldr	r3, [pc, #304]	; (80020cc <HAL_RCC_OscConfig+0x938>)
 8001f9a:	681b      	ldr	r3, [r3, #0]
 8001f9c:	4a4b      	ldr	r2, [pc, #300]	; (80020cc <HAL_RCC_OscConfig+0x938>)
 8001f9e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001fa2:	6013      	str	r3, [r2, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001fa4:	f7fe fe88 	bl	8000cb8 <HAL_GetTick>
 8001fa8:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001fac:	e009      	b.n	8001fc2 <HAL_RCC_OscConfig+0x82e>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001fae:	f7fe fe83 	bl	8000cb8 <HAL_GetTick>
 8001fb2:	4602      	mov	r2, r0
 8001fb4:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8001fb8:	1ad3      	subs	r3, r2, r3
 8001fba:	2b64      	cmp	r3, #100	; 0x64
 8001fbc:	d901      	bls.n	8001fc2 <HAL_RCC_OscConfig+0x82e>
        {
          return HAL_TIMEOUT;
 8001fbe:	2303      	movs	r3, #3
 8001fc0:	e2e9      	b.n	8002596 <HAL_RCC_OscConfig+0xe02>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001fc2:	4b42      	ldr	r3, [pc, #264]	; (80020cc <HAL_RCC_OscConfig+0x938>)
 8001fc4:	681b      	ldr	r3, [r3, #0]
 8001fc6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001fca:	2b00      	cmp	r3, #0
 8001fcc:	d0ef      	beq.n	8001fae <HAL_RCC_OscConfig+0x81a>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001fce:	1d3b      	adds	r3, r7, #4
 8001fd0:	681b      	ldr	r3, [r3, #0]
 8001fd2:	68db      	ldr	r3, [r3, #12]
 8001fd4:	2b01      	cmp	r3, #1
 8001fd6:	d106      	bne.n	8001fe6 <HAL_RCC_OscConfig+0x852>
 8001fd8:	4b3a      	ldr	r3, [pc, #232]	; (80020c4 <HAL_RCC_OscConfig+0x930>)
 8001fda:	6a1b      	ldr	r3, [r3, #32]
 8001fdc:	4a39      	ldr	r2, [pc, #228]	; (80020c4 <HAL_RCC_OscConfig+0x930>)
 8001fde:	f043 0301 	orr.w	r3, r3, #1
 8001fe2:	6213      	str	r3, [r2, #32]
 8001fe4:	e02f      	b.n	8002046 <HAL_RCC_OscConfig+0x8b2>
 8001fe6:	1d3b      	adds	r3, r7, #4
 8001fe8:	681b      	ldr	r3, [r3, #0]
 8001fea:	68db      	ldr	r3, [r3, #12]
 8001fec:	2b00      	cmp	r3, #0
 8001fee:	d10c      	bne.n	800200a <HAL_RCC_OscConfig+0x876>
 8001ff0:	4b34      	ldr	r3, [pc, #208]	; (80020c4 <HAL_RCC_OscConfig+0x930>)
 8001ff2:	6a1b      	ldr	r3, [r3, #32]
 8001ff4:	4a33      	ldr	r2, [pc, #204]	; (80020c4 <HAL_RCC_OscConfig+0x930>)
 8001ff6:	f023 0301 	bic.w	r3, r3, #1
 8001ffa:	6213      	str	r3, [r2, #32]
 8001ffc:	4b31      	ldr	r3, [pc, #196]	; (80020c4 <HAL_RCC_OscConfig+0x930>)
 8001ffe:	6a1b      	ldr	r3, [r3, #32]
 8002000:	4a30      	ldr	r2, [pc, #192]	; (80020c4 <HAL_RCC_OscConfig+0x930>)
 8002002:	f023 0304 	bic.w	r3, r3, #4
 8002006:	6213      	str	r3, [r2, #32]
 8002008:	e01d      	b.n	8002046 <HAL_RCC_OscConfig+0x8b2>
 800200a:	1d3b      	adds	r3, r7, #4
 800200c:	681b      	ldr	r3, [r3, #0]
 800200e:	68db      	ldr	r3, [r3, #12]
 8002010:	2b05      	cmp	r3, #5
 8002012:	d10c      	bne.n	800202e <HAL_RCC_OscConfig+0x89a>
 8002014:	4b2b      	ldr	r3, [pc, #172]	; (80020c4 <HAL_RCC_OscConfig+0x930>)
 8002016:	6a1b      	ldr	r3, [r3, #32]
 8002018:	4a2a      	ldr	r2, [pc, #168]	; (80020c4 <HAL_RCC_OscConfig+0x930>)
 800201a:	f043 0304 	orr.w	r3, r3, #4
 800201e:	6213      	str	r3, [r2, #32]
 8002020:	4b28      	ldr	r3, [pc, #160]	; (80020c4 <HAL_RCC_OscConfig+0x930>)
 8002022:	6a1b      	ldr	r3, [r3, #32]
 8002024:	4a27      	ldr	r2, [pc, #156]	; (80020c4 <HAL_RCC_OscConfig+0x930>)
 8002026:	f043 0301 	orr.w	r3, r3, #1
 800202a:	6213      	str	r3, [r2, #32]
 800202c:	e00b      	b.n	8002046 <HAL_RCC_OscConfig+0x8b2>
 800202e:	4b25      	ldr	r3, [pc, #148]	; (80020c4 <HAL_RCC_OscConfig+0x930>)
 8002030:	6a1b      	ldr	r3, [r3, #32]
 8002032:	4a24      	ldr	r2, [pc, #144]	; (80020c4 <HAL_RCC_OscConfig+0x930>)
 8002034:	f023 0301 	bic.w	r3, r3, #1
 8002038:	6213      	str	r3, [r2, #32]
 800203a:	4b22      	ldr	r3, [pc, #136]	; (80020c4 <HAL_RCC_OscConfig+0x930>)
 800203c:	6a1b      	ldr	r3, [r3, #32]
 800203e:	4a21      	ldr	r2, [pc, #132]	; (80020c4 <HAL_RCC_OscConfig+0x930>)
 8002040:	f023 0304 	bic.w	r3, r3, #4
 8002044:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8002046:	1d3b      	adds	r3, r7, #4
 8002048:	681b      	ldr	r3, [r3, #0]
 800204a:	68db      	ldr	r3, [r3, #12]
 800204c:	2b00      	cmp	r3, #0
 800204e:	d06b      	beq.n	8002128 <HAL_RCC_OscConfig+0x994>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002050:	f7fe fe32 	bl	8000cb8 <HAL_GetTick>
 8002054:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
      
      /* Wait till LSE is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002058:	e00b      	b.n	8002072 <HAL_RCC_OscConfig+0x8de>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800205a:	f7fe fe2d 	bl	8000cb8 <HAL_GetTick>
 800205e:	4602      	mov	r2, r0
 8002060:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8002064:	1ad3      	subs	r3, r2, r3
 8002066:	f241 3288 	movw	r2, #5000	; 0x1388
 800206a:	4293      	cmp	r3, r2
 800206c:	d901      	bls.n	8002072 <HAL_RCC_OscConfig+0x8de>
        {
          return HAL_TIMEOUT;
 800206e:	2303      	movs	r3, #3
 8002070:	e291      	b.n	8002596 <HAL_RCC_OscConfig+0xe02>
 8002072:	f107 03c0 	add.w	r3, r7, #192	; 0xc0
 8002076:	2202      	movs	r2, #2
 8002078:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800207a:	f107 03c0 	add.w	r3, r7, #192	; 0xc0
 800207e:	681b      	ldr	r3, [r3, #0]
 8002080:	fa93 f2a3 	rbit	r2, r3
 8002084:	f107 03bc 	add.w	r3, r7, #188	; 0xbc
 8002088:	601a      	str	r2, [r3, #0]
 800208a:	f107 03b8 	add.w	r3, r7, #184	; 0xb8
 800208e:	2202      	movs	r2, #2
 8002090:	601a      	str	r2, [r3, #0]
 8002092:	f107 03b8 	add.w	r3, r7, #184	; 0xb8
 8002096:	681b      	ldr	r3, [r3, #0]
 8002098:	fa93 f2a3 	rbit	r2, r3
 800209c:	f107 03b4 	add.w	r3, r7, #180	; 0xb4
 80020a0:	601a      	str	r2, [r3, #0]
  return result;
 80020a2:	f107 03b4 	add.w	r3, r7, #180	; 0xb4
 80020a6:	681b      	ldr	r3, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80020a8:	fab3 f383 	clz	r3, r3
 80020ac:	b2db      	uxtb	r3, r3
 80020ae:	095b      	lsrs	r3, r3, #5
 80020b0:	b2db      	uxtb	r3, r3
 80020b2:	f043 0302 	orr.w	r3, r3, #2
 80020b6:	b2db      	uxtb	r3, r3
 80020b8:	2b02      	cmp	r3, #2
 80020ba:	d109      	bne.n	80020d0 <HAL_RCC_OscConfig+0x93c>
 80020bc:	4b01      	ldr	r3, [pc, #4]	; (80020c4 <HAL_RCC_OscConfig+0x930>)
 80020be:	6a1b      	ldr	r3, [r3, #32]
 80020c0:	e014      	b.n	80020ec <HAL_RCC_OscConfig+0x958>
 80020c2:	bf00      	nop
 80020c4:	40021000 	.word	0x40021000
 80020c8:	10908120 	.word	0x10908120
 80020cc:	40007000 	.word	0x40007000
 80020d0:	f107 03b0 	add.w	r3, r7, #176	; 0xb0
 80020d4:	2202      	movs	r2, #2
 80020d6:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80020d8:	f107 03b0 	add.w	r3, r7, #176	; 0xb0
 80020dc:	681b      	ldr	r3, [r3, #0]
 80020de:	fa93 f2a3 	rbit	r2, r3
 80020e2:	f107 03ac 	add.w	r3, r7, #172	; 0xac
 80020e6:	601a      	str	r2, [r3, #0]
 80020e8:	4bbb      	ldr	r3, [pc, #748]	; (80023d8 <HAL_RCC_OscConfig+0xc44>)
 80020ea:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80020ec:	f107 02a8 	add.w	r2, r7, #168	; 0xa8
 80020f0:	2102      	movs	r1, #2
 80020f2:	6011      	str	r1, [r2, #0]
 80020f4:	f107 02a8 	add.w	r2, r7, #168	; 0xa8
 80020f8:	6812      	ldr	r2, [r2, #0]
 80020fa:	fa92 f1a2 	rbit	r1, r2
 80020fe:	f107 02a4 	add.w	r2, r7, #164	; 0xa4
 8002102:	6011      	str	r1, [r2, #0]
  return result;
 8002104:	f107 02a4 	add.w	r2, r7, #164	; 0xa4
 8002108:	6812      	ldr	r2, [r2, #0]
 800210a:	fab2 f282 	clz	r2, r2
 800210e:	b2d2      	uxtb	r2, r2
 8002110:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8002114:	b2d2      	uxtb	r2, r2
 8002116:	f002 021f 	and.w	r2, r2, #31
 800211a:	2101      	movs	r1, #1
 800211c:	fa01 f202 	lsl.w	r2, r1, r2
 8002120:	4013      	ands	r3, r2
 8002122:	2b00      	cmp	r3, #0
 8002124:	d099      	beq.n	800205a <HAL_RCC_OscConfig+0x8c6>
 8002126:	e063      	b.n	80021f0 <HAL_RCC_OscConfig+0xa5c>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002128:	f7fe fdc6 	bl	8000cb8 <HAL_GetTick>
 800212c:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
      
      /* Wait till LSE is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002130:	e00b      	b.n	800214a <HAL_RCC_OscConfig+0x9b6>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002132:	f7fe fdc1 	bl	8000cb8 <HAL_GetTick>
 8002136:	4602      	mov	r2, r0
 8002138:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 800213c:	1ad3      	subs	r3, r2, r3
 800213e:	f241 3288 	movw	r2, #5000	; 0x1388
 8002142:	4293      	cmp	r3, r2
 8002144:	d901      	bls.n	800214a <HAL_RCC_OscConfig+0x9b6>
        {
          return HAL_TIMEOUT;
 8002146:	2303      	movs	r3, #3
 8002148:	e225      	b.n	8002596 <HAL_RCC_OscConfig+0xe02>
 800214a:	f107 03a0 	add.w	r3, r7, #160	; 0xa0
 800214e:	2202      	movs	r2, #2
 8002150:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002152:	f107 03a0 	add.w	r3, r7, #160	; 0xa0
 8002156:	681b      	ldr	r3, [r3, #0]
 8002158:	fa93 f2a3 	rbit	r2, r3
 800215c:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 8002160:	601a      	str	r2, [r3, #0]
 8002162:	f107 0398 	add.w	r3, r7, #152	; 0x98
 8002166:	2202      	movs	r2, #2
 8002168:	601a      	str	r2, [r3, #0]
 800216a:	f107 0398 	add.w	r3, r7, #152	; 0x98
 800216e:	681b      	ldr	r3, [r3, #0]
 8002170:	fa93 f2a3 	rbit	r2, r3
 8002174:	f107 0394 	add.w	r3, r7, #148	; 0x94
 8002178:	601a      	str	r2, [r3, #0]
  return result;
 800217a:	f107 0394 	add.w	r3, r7, #148	; 0x94
 800217e:	681b      	ldr	r3, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002180:	fab3 f383 	clz	r3, r3
 8002184:	b2db      	uxtb	r3, r3
 8002186:	095b      	lsrs	r3, r3, #5
 8002188:	b2db      	uxtb	r3, r3
 800218a:	f043 0302 	orr.w	r3, r3, #2
 800218e:	b2db      	uxtb	r3, r3
 8002190:	2b02      	cmp	r3, #2
 8002192:	d102      	bne.n	800219a <HAL_RCC_OscConfig+0xa06>
 8002194:	4b90      	ldr	r3, [pc, #576]	; (80023d8 <HAL_RCC_OscConfig+0xc44>)
 8002196:	6a1b      	ldr	r3, [r3, #32]
 8002198:	e00d      	b.n	80021b6 <HAL_RCC_OscConfig+0xa22>
 800219a:	f107 0390 	add.w	r3, r7, #144	; 0x90
 800219e:	2202      	movs	r2, #2
 80021a0:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80021a2:	f107 0390 	add.w	r3, r7, #144	; 0x90
 80021a6:	681b      	ldr	r3, [r3, #0]
 80021a8:	fa93 f2a3 	rbit	r2, r3
 80021ac:	f107 038c 	add.w	r3, r7, #140	; 0x8c
 80021b0:	601a      	str	r2, [r3, #0]
 80021b2:	4b89      	ldr	r3, [pc, #548]	; (80023d8 <HAL_RCC_OscConfig+0xc44>)
 80021b4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80021b6:	f107 0288 	add.w	r2, r7, #136	; 0x88
 80021ba:	2102      	movs	r1, #2
 80021bc:	6011      	str	r1, [r2, #0]
 80021be:	f107 0288 	add.w	r2, r7, #136	; 0x88
 80021c2:	6812      	ldr	r2, [r2, #0]
 80021c4:	fa92 f1a2 	rbit	r1, r2
 80021c8:	f107 0284 	add.w	r2, r7, #132	; 0x84
 80021cc:	6011      	str	r1, [r2, #0]
  return result;
 80021ce:	f107 0284 	add.w	r2, r7, #132	; 0x84
 80021d2:	6812      	ldr	r2, [r2, #0]
 80021d4:	fab2 f282 	clz	r2, r2
 80021d8:	b2d2      	uxtb	r2, r2
 80021da:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80021de:	b2d2      	uxtb	r2, r2
 80021e0:	f002 021f 	and.w	r2, r2, #31
 80021e4:	2101      	movs	r1, #1
 80021e6:	fa01 f202 	lsl.w	r2, r1, r2
 80021ea:	4013      	ands	r3, r2
 80021ec:	2b00      	cmp	r3, #0
 80021ee:	d1a0      	bne.n	8002132 <HAL_RCC_OscConfig+0x99e>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 80021f0:	f897 31ff 	ldrb.w	r3, [r7, #511]	; 0x1ff
 80021f4:	2b01      	cmp	r3, #1
 80021f6:	d105      	bne.n	8002204 <HAL_RCC_OscConfig+0xa70>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80021f8:	4b77      	ldr	r3, [pc, #476]	; (80023d8 <HAL_RCC_OscConfig+0xc44>)
 80021fa:	69db      	ldr	r3, [r3, #28]
 80021fc:	4a76      	ldr	r2, [pc, #472]	; (80023d8 <HAL_RCC_OscConfig+0xc44>)
 80021fe:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002202:	61d3      	str	r3, [r2, #28]
  }

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8002204:	1d3b      	adds	r3, r7, #4
 8002206:	681b      	ldr	r3, [r3, #0]
 8002208:	69db      	ldr	r3, [r3, #28]
 800220a:	2b00      	cmp	r3, #0
 800220c:	f000 81c2 	beq.w	8002594 <HAL_RCC_OscConfig+0xe00>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8002210:	4b71      	ldr	r3, [pc, #452]	; (80023d8 <HAL_RCC_OscConfig+0xc44>)
 8002212:	685b      	ldr	r3, [r3, #4]
 8002214:	f003 030c 	and.w	r3, r3, #12
 8002218:	2b08      	cmp	r3, #8
 800221a:	f000 819c 	beq.w	8002556 <HAL_RCC_OscConfig+0xdc2>
    { 
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800221e:	1d3b      	adds	r3, r7, #4
 8002220:	681b      	ldr	r3, [r3, #0]
 8002222:	69db      	ldr	r3, [r3, #28]
 8002224:	2b02      	cmp	r3, #2
 8002226:	f040 8114 	bne.w	8002452 <HAL_RCC_OscConfig+0xcbe>
 800222a:	f107 0380 	add.w	r3, r7, #128	; 0x80
 800222e:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8002232:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002234:	f107 0380 	add.w	r3, r7, #128	; 0x80
 8002238:	681b      	ldr	r3, [r3, #0]
 800223a:	fa93 f2a3 	rbit	r2, r3
 800223e:	f107 037c 	add.w	r3, r7, #124	; 0x7c
 8002242:	601a      	str	r2, [r3, #0]
  return result;
 8002244:	f107 037c 	add.w	r3, r7, #124	; 0x7c
 8002248:	681b      	ldr	r3, [r3, #0]
#if   defined(RCC_CFGR_PLLSRC_HSI_PREDIV)
        assert_param(IS_RCC_PREDIV(RCC_OscInitStruct->PLL.PREDIV));
#endif
  
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800224a:	fab3 f383 	clz	r3, r3
 800224e:	b2db      	uxtb	r3, r3
 8002250:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8002254:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8002258:	009b      	lsls	r3, r3, #2
 800225a:	461a      	mov	r2, r3
 800225c:	2300      	movs	r3, #0
 800225e:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002260:	f7fe fd2a 	bl	8000cb8 <HAL_GetTick>
 8002264:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002268:	e009      	b.n	800227e <HAL_RCC_OscConfig+0xaea>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800226a:	f7fe fd25 	bl	8000cb8 <HAL_GetTick>
 800226e:	4602      	mov	r2, r0
 8002270:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8002274:	1ad3      	subs	r3, r2, r3
 8002276:	2b02      	cmp	r3, #2
 8002278:	d901      	bls.n	800227e <HAL_RCC_OscConfig+0xaea>
          {
            return HAL_TIMEOUT;
 800227a:	2303      	movs	r3, #3
 800227c:	e18b      	b.n	8002596 <HAL_RCC_OscConfig+0xe02>
 800227e:	f107 0378 	add.w	r3, r7, #120	; 0x78
 8002282:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8002286:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002288:	f107 0378 	add.w	r3, r7, #120	; 0x78
 800228c:	681b      	ldr	r3, [r3, #0]
 800228e:	fa93 f2a3 	rbit	r2, r3
 8002292:	f107 0374 	add.w	r3, r7, #116	; 0x74
 8002296:	601a      	str	r2, [r3, #0]
  return result;
 8002298:	f107 0374 	add.w	r3, r7, #116	; 0x74
 800229c:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800229e:	fab3 f383 	clz	r3, r3
 80022a2:	b2db      	uxtb	r3, r3
 80022a4:	095b      	lsrs	r3, r3, #5
 80022a6:	b2db      	uxtb	r3, r3
 80022a8:	f043 0301 	orr.w	r3, r3, #1
 80022ac:	b2db      	uxtb	r3, r3
 80022ae:	2b01      	cmp	r3, #1
 80022b0:	d102      	bne.n	80022b8 <HAL_RCC_OscConfig+0xb24>
 80022b2:	4b49      	ldr	r3, [pc, #292]	; (80023d8 <HAL_RCC_OscConfig+0xc44>)
 80022b4:	681b      	ldr	r3, [r3, #0]
 80022b6:	e01b      	b.n	80022f0 <HAL_RCC_OscConfig+0xb5c>
 80022b8:	f107 0370 	add.w	r3, r7, #112	; 0x70
 80022bc:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 80022c0:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80022c2:	f107 0370 	add.w	r3, r7, #112	; 0x70
 80022c6:	681b      	ldr	r3, [r3, #0]
 80022c8:	fa93 f2a3 	rbit	r2, r3
 80022cc:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 80022d0:	601a      	str	r2, [r3, #0]
 80022d2:	f107 0368 	add.w	r3, r7, #104	; 0x68
 80022d6:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 80022da:	601a      	str	r2, [r3, #0]
 80022dc:	f107 0368 	add.w	r3, r7, #104	; 0x68
 80022e0:	681b      	ldr	r3, [r3, #0]
 80022e2:	fa93 f2a3 	rbit	r2, r3
 80022e6:	f107 0364 	add.w	r3, r7, #100	; 0x64
 80022ea:	601a      	str	r2, [r3, #0]
 80022ec:	4b3a      	ldr	r3, [pc, #232]	; (80023d8 <HAL_RCC_OscConfig+0xc44>)
 80022ee:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80022f0:	f107 0260 	add.w	r2, r7, #96	; 0x60
 80022f4:	f04f 7100 	mov.w	r1, #33554432	; 0x2000000
 80022f8:	6011      	str	r1, [r2, #0]
 80022fa:	f107 0260 	add.w	r2, r7, #96	; 0x60
 80022fe:	6812      	ldr	r2, [r2, #0]
 8002300:	fa92 f1a2 	rbit	r1, r2
 8002304:	f107 025c 	add.w	r2, r7, #92	; 0x5c
 8002308:	6011      	str	r1, [r2, #0]
  return result;
 800230a:	f107 025c 	add.w	r2, r7, #92	; 0x5c
 800230e:	6812      	ldr	r2, [r2, #0]
 8002310:	fab2 f282 	clz	r2, r2
 8002314:	b2d2      	uxtb	r2, r2
 8002316:	f042 0220 	orr.w	r2, r2, #32
 800231a:	b2d2      	uxtb	r2, r2
 800231c:	f002 021f 	and.w	r2, r2, #31
 8002320:	2101      	movs	r1, #1
 8002322:	fa01 f202 	lsl.w	r2, r1, r2
 8002326:	4013      	ands	r3, r2
 8002328:	2b00      	cmp	r3, #0
 800232a:	d19e      	bne.n	800226a <HAL_RCC_OscConfig+0xad6>
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
                             RCC_OscInitStruct->PLL.PREDIV,
                             RCC_OscInitStruct->PLL.PLLMUL);
#else
      /* Configure the main PLL clock source and multiplication factor. */
      __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 800232c:	4b2a      	ldr	r3, [pc, #168]	; (80023d8 <HAL_RCC_OscConfig+0xc44>)
 800232e:	685b      	ldr	r3, [r3, #4]
 8002330:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 8002334:	1d3b      	adds	r3, r7, #4
 8002336:	681b      	ldr	r3, [r3, #0]
 8002338:	6a59      	ldr	r1, [r3, #36]	; 0x24
 800233a:	1d3b      	adds	r3, r7, #4
 800233c:	681b      	ldr	r3, [r3, #0]
 800233e:	6a1b      	ldr	r3, [r3, #32]
 8002340:	430b      	orrs	r3, r1
 8002342:	4925      	ldr	r1, [pc, #148]	; (80023d8 <HAL_RCC_OscConfig+0xc44>)
 8002344:	4313      	orrs	r3, r2
 8002346:	604b      	str	r3, [r1, #4]
 8002348:	f107 0358 	add.w	r3, r7, #88	; 0x58
 800234c:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8002350:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002352:	f107 0358 	add.w	r3, r7, #88	; 0x58
 8002356:	681b      	ldr	r3, [r3, #0]
 8002358:	fa93 f2a3 	rbit	r2, r3
 800235c:	f107 0354 	add.w	r3, r7, #84	; 0x54
 8002360:	601a      	str	r2, [r3, #0]
  return result;
 8002362:	f107 0354 	add.w	r3, r7, #84	; 0x54
 8002366:	681b      	ldr	r3, [r3, #0]
                           RCC_OscInitStruct->PLL.PLLMUL);
#endif /* RCC_CFGR_PLLSRC_HSI_PREDIV */
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002368:	fab3 f383 	clz	r3, r3
 800236c:	b2db      	uxtb	r3, r3
 800236e:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8002372:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8002376:	009b      	lsls	r3, r3, #2
 8002378:	461a      	mov	r2, r3
 800237a:	2301      	movs	r3, #1
 800237c:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800237e:	f7fe fc9b 	bl	8000cb8 <HAL_GetTick>
 8002382:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8002386:	e009      	b.n	800239c <HAL_RCC_OscConfig+0xc08>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002388:	f7fe fc96 	bl	8000cb8 <HAL_GetTick>
 800238c:	4602      	mov	r2, r0
 800238e:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8002392:	1ad3      	subs	r3, r2, r3
 8002394:	2b02      	cmp	r3, #2
 8002396:	d901      	bls.n	800239c <HAL_RCC_OscConfig+0xc08>
          {
            return HAL_TIMEOUT;
 8002398:	2303      	movs	r3, #3
 800239a:	e0fc      	b.n	8002596 <HAL_RCC_OscConfig+0xe02>
 800239c:	f107 0350 	add.w	r3, r7, #80	; 0x50
 80023a0:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 80023a4:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80023a6:	f107 0350 	add.w	r3, r7, #80	; 0x50
 80023aa:	681b      	ldr	r3, [r3, #0]
 80023ac:	fa93 f2a3 	rbit	r2, r3
 80023b0:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 80023b4:	601a      	str	r2, [r3, #0]
  return result;
 80023b6:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 80023ba:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 80023bc:	fab3 f383 	clz	r3, r3
 80023c0:	b2db      	uxtb	r3, r3
 80023c2:	095b      	lsrs	r3, r3, #5
 80023c4:	b2db      	uxtb	r3, r3
 80023c6:	f043 0301 	orr.w	r3, r3, #1
 80023ca:	b2db      	uxtb	r3, r3
 80023cc:	2b01      	cmp	r3, #1
 80023ce:	d105      	bne.n	80023dc <HAL_RCC_OscConfig+0xc48>
 80023d0:	4b01      	ldr	r3, [pc, #4]	; (80023d8 <HAL_RCC_OscConfig+0xc44>)
 80023d2:	681b      	ldr	r3, [r3, #0]
 80023d4:	e01e      	b.n	8002414 <HAL_RCC_OscConfig+0xc80>
 80023d6:	bf00      	nop
 80023d8:	40021000 	.word	0x40021000
 80023dc:	f107 0348 	add.w	r3, r7, #72	; 0x48
 80023e0:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 80023e4:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80023e6:	f107 0348 	add.w	r3, r7, #72	; 0x48
 80023ea:	681b      	ldr	r3, [r3, #0]
 80023ec:	fa93 f2a3 	rbit	r2, r3
 80023f0:	f107 0344 	add.w	r3, r7, #68	; 0x44
 80023f4:	601a      	str	r2, [r3, #0]
 80023f6:	f107 0340 	add.w	r3, r7, #64	; 0x40
 80023fa:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 80023fe:	601a      	str	r2, [r3, #0]
 8002400:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8002404:	681b      	ldr	r3, [r3, #0]
 8002406:	fa93 f2a3 	rbit	r2, r3
 800240a:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 800240e:	601a      	str	r2, [r3, #0]
 8002410:	4b63      	ldr	r3, [pc, #396]	; (80025a0 <HAL_RCC_OscConfig+0xe0c>)
 8002412:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002414:	f107 0238 	add.w	r2, r7, #56	; 0x38
 8002418:	f04f 7100 	mov.w	r1, #33554432	; 0x2000000
 800241c:	6011      	str	r1, [r2, #0]
 800241e:	f107 0238 	add.w	r2, r7, #56	; 0x38
 8002422:	6812      	ldr	r2, [r2, #0]
 8002424:	fa92 f1a2 	rbit	r1, r2
 8002428:	f107 0234 	add.w	r2, r7, #52	; 0x34
 800242c:	6011      	str	r1, [r2, #0]
  return result;
 800242e:	f107 0234 	add.w	r2, r7, #52	; 0x34
 8002432:	6812      	ldr	r2, [r2, #0]
 8002434:	fab2 f282 	clz	r2, r2
 8002438:	b2d2      	uxtb	r2, r2
 800243a:	f042 0220 	orr.w	r2, r2, #32
 800243e:	b2d2      	uxtb	r2, r2
 8002440:	f002 021f 	and.w	r2, r2, #31
 8002444:	2101      	movs	r1, #1
 8002446:	fa01 f202 	lsl.w	r2, r1, r2
 800244a:	4013      	ands	r3, r2
 800244c:	2b00      	cmp	r3, #0
 800244e:	d09b      	beq.n	8002388 <HAL_RCC_OscConfig+0xbf4>
 8002450:	e0a0      	b.n	8002594 <HAL_RCC_OscConfig+0xe00>
 8002452:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8002456:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 800245a:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800245c:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8002460:	681b      	ldr	r3, [r3, #0]
 8002462:	fa93 f2a3 	rbit	r2, r3
 8002466:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800246a:	601a      	str	r2, [r3, #0]
  return result;
 800246c:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8002470:	681b      	ldr	r3, [r3, #0]
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002472:	fab3 f383 	clz	r3, r3
 8002476:	b2db      	uxtb	r3, r3
 8002478:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 800247c:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8002480:	009b      	lsls	r3, r3, #2
 8002482:	461a      	mov	r2, r3
 8002484:	2300      	movs	r3, #0
 8002486:	6013      	str	r3, [r2, #0]
 
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002488:	f7fe fc16 	bl	8000cb8 <HAL_GetTick>
 800248c:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till PLL is disabled */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002490:	e009      	b.n	80024a6 <HAL_RCC_OscConfig+0xd12>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002492:	f7fe fc11 	bl	8000cb8 <HAL_GetTick>
 8002496:	4602      	mov	r2, r0
 8002498:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 800249c:	1ad3      	subs	r3, r2, r3
 800249e:	2b02      	cmp	r3, #2
 80024a0:	d901      	bls.n	80024a6 <HAL_RCC_OscConfig+0xd12>
          {
            return HAL_TIMEOUT;
 80024a2:	2303      	movs	r3, #3
 80024a4:	e077      	b.n	8002596 <HAL_RCC_OscConfig+0xe02>
 80024a6:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80024aa:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 80024ae:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80024b0:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80024b4:	681b      	ldr	r3, [r3, #0]
 80024b6:	fa93 f2a3 	rbit	r2, r3
 80024ba:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80024be:	601a      	str	r2, [r3, #0]
  return result;
 80024c0:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80024c4:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80024c6:	fab3 f383 	clz	r3, r3
 80024ca:	b2db      	uxtb	r3, r3
 80024cc:	095b      	lsrs	r3, r3, #5
 80024ce:	b2db      	uxtb	r3, r3
 80024d0:	f043 0301 	orr.w	r3, r3, #1
 80024d4:	b2db      	uxtb	r3, r3
 80024d6:	2b01      	cmp	r3, #1
 80024d8:	d102      	bne.n	80024e0 <HAL_RCC_OscConfig+0xd4c>
 80024da:	4b31      	ldr	r3, [pc, #196]	; (80025a0 <HAL_RCC_OscConfig+0xe0c>)
 80024dc:	681b      	ldr	r3, [r3, #0]
 80024de:	e01b      	b.n	8002518 <HAL_RCC_OscConfig+0xd84>
 80024e0:	f107 0320 	add.w	r3, r7, #32
 80024e4:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 80024e8:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80024ea:	f107 0320 	add.w	r3, r7, #32
 80024ee:	681b      	ldr	r3, [r3, #0]
 80024f0:	fa93 f2a3 	rbit	r2, r3
 80024f4:	f107 031c 	add.w	r3, r7, #28
 80024f8:	601a      	str	r2, [r3, #0]
 80024fa:	f107 0318 	add.w	r3, r7, #24
 80024fe:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8002502:	601a      	str	r2, [r3, #0]
 8002504:	f107 0318 	add.w	r3, r7, #24
 8002508:	681b      	ldr	r3, [r3, #0]
 800250a:	fa93 f2a3 	rbit	r2, r3
 800250e:	f107 0314 	add.w	r3, r7, #20
 8002512:	601a      	str	r2, [r3, #0]
 8002514:	4b22      	ldr	r3, [pc, #136]	; (80025a0 <HAL_RCC_OscConfig+0xe0c>)
 8002516:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002518:	f107 0210 	add.w	r2, r7, #16
 800251c:	f04f 7100 	mov.w	r1, #33554432	; 0x2000000
 8002520:	6011      	str	r1, [r2, #0]
 8002522:	f107 0210 	add.w	r2, r7, #16
 8002526:	6812      	ldr	r2, [r2, #0]
 8002528:	fa92 f1a2 	rbit	r1, r2
 800252c:	f107 020c 	add.w	r2, r7, #12
 8002530:	6011      	str	r1, [r2, #0]
  return result;
 8002532:	f107 020c 	add.w	r2, r7, #12
 8002536:	6812      	ldr	r2, [r2, #0]
 8002538:	fab2 f282 	clz	r2, r2
 800253c:	b2d2      	uxtb	r2, r2
 800253e:	f042 0220 	orr.w	r2, r2, #32
 8002542:	b2d2      	uxtb	r2, r2
 8002544:	f002 021f 	and.w	r2, r2, #31
 8002548:	2101      	movs	r1, #1
 800254a:	fa01 f202 	lsl.w	r2, r1, r2
 800254e:	4013      	ands	r3, r2
 8002550:	2b00      	cmp	r3, #0
 8002552:	d19e      	bne.n	8002492 <HAL_RCC_OscConfig+0xcfe>
 8002554:	e01e      	b.n	8002594 <HAL_RCC_OscConfig+0xe00>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8002556:	1d3b      	adds	r3, r7, #4
 8002558:	681b      	ldr	r3, [r3, #0]
 800255a:	69db      	ldr	r3, [r3, #28]
 800255c:	2b01      	cmp	r3, #1
 800255e:	d101      	bne.n	8002564 <HAL_RCC_OscConfig+0xdd0>
      {
        return HAL_ERROR;
 8002560:	2301      	movs	r3, #1
 8002562:	e018      	b.n	8002596 <HAL_RCC_OscConfig+0xe02>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8002564:	4b0e      	ldr	r3, [pc, #56]	; (80025a0 <HAL_RCC_OscConfig+0xe0c>)
 8002566:	685b      	ldr	r3, [r3, #4]
 8002568:	f8c7 31f4 	str.w	r3, [r7, #500]	; 0x1f4
        pll_config2 = RCC->CFGR2;
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL)   != RCC_OscInitStruct->PLL.PLLMUL)    ||      
           (READ_BIT(pll_config2, RCC_CFGR2_PREDIV)  != RCC_OscInitStruct->PLL.PREDIV))     
#else
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
 800256c:	f8d7 31f4 	ldr.w	r3, [r7, #500]	; 0x1f4
 8002570:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 8002574:	1d3b      	adds	r3, r7, #4
 8002576:	681b      	ldr	r3, [r3, #0]
 8002578:	6a1b      	ldr	r3, [r3, #32]
 800257a:	429a      	cmp	r2, r3
 800257c:	d108      	bne.n	8002590 <HAL_RCC_OscConfig+0xdfc>
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL)   != RCC_OscInitStruct->PLL.PLLMUL))
 800257e:	f8d7 31f4 	ldr.w	r3, [r7, #500]	; 0x1f4
 8002582:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 8002586:	1d3b      	adds	r3, r7, #4
 8002588:	681b      	ldr	r3, [r3, #0]
 800258a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
 800258c:	429a      	cmp	r2, r3
 800258e:	d001      	beq.n	8002594 <HAL_RCC_OscConfig+0xe00>
#endif
        {
          return HAL_ERROR;
 8002590:	2301      	movs	r3, #1
 8002592:	e000      	b.n	8002596 <HAL_RCC_OscConfig+0xe02>
        }
      }
    }
  }

  return HAL_OK;
 8002594:	2300      	movs	r3, #0
}
 8002596:	4618      	mov	r0, r3
 8002598:	f507 7700 	add.w	r7, r7, #512	; 0x200
 800259c:	46bd      	mov	sp, r7
 800259e:	bd80      	pop	{r7, pc}
 80025a0:	40021000 	.word	0x40021000

080025a4 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80025a4:	b580      	push	{r7, lr}
 80025a6:	b09e      	sub	sp, #120	; 0x78
 80025a8:	af00      	add	r7, sp, #0
 80025aa:	6078      	str	r0, [r7, #4]
 80025ac:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0U;
 80025ae:	2300      	movs	r3, #0
 80025b0:	677b      	str	r3, [r7, #116]	; 0x74

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 80025b2:	687b      	ldr	r3, [r7, #4]
 80025b4:	2b00      	cmp	r3, #0
 80025b6:	d101      	bne.n	80025bc <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 80025b8:	2301      	movs	r3, #1
 80025ba:	e162      	b.n	8002882 <HAL_RCC_ClockConfig+0x2de>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY) 
  must be correctly programmed according to the frequency of the CPU clock 
    (HCLK) of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80025bc:	4b90      	ldr	r3, [pc, #576]	; (8002800 <HAL_RCC_ClockConfig+0x25c>)
 80025be:	681b      	ldr	r3, [r3, #0]
 80025c0:	f003 0307 	and.w	r3, r3, #7
 80025c4:	683a      	ldr	r2, [r7, #0]
 80025c6:	429a      	cmp	r2, r3
 80025c8:	d910      	bls.n	80025ec <HAL_RCC_ClockConfig+0x48>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80025ca:	4b8d      	ldr	r3, [pc, #564]	; (8002800 <HAL_RCC_ClockConfig+0x25c>)
 80025cc:	681b      	ldr	r3, [r3, #0]
 80025ce:	f023 0207 	bic.w	r2, r3, #7
 80025d2:	498b      	ldr	r1, [pc, #556]	; (8002800 <HAL_RCC_ClockConfig+0x25c>)
 80025d4:	683b      	ldr	r3, [r7, #0]
 80025d6:	4313      	orrs	r3, r2
 80025d8:	600b      	str	r3, [r1, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80025da:	4b89      	ldr	r3, [pc, #548]	; (8002800 <HAL_RCC_ClockConfig+0x25c>)
 80025dc:	681b      	ldr	r3, [r3, #0]
 80025de:	f003 0307 	and.w	r3, r3, #7
 80025e2:	683a      	ldr	r2, [r7, #0]
 80025e4:	429a      	cmp	r2, r3
 80025e6:	d001      	beq.n	80025ec <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 80025e8:	2301      	movs	r3, #1
 80025ea:	e14a      	b.n	8002882 <HAL_RCC_ClockConfig+0x2de>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80025ec:	687b      	ldr	r3, [r7, #4]
 80025ee:	681b      	ldr	r3, [r3, #0]
 80025f0:	f003 0302 	and.w	r3, r3, #2
 80025f4:	2b00      	cmp	r3, #0
 80025f6:	d008      	beq.n	800260a <HAL_RCC_ClockConfig+0x66>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80025f8:	4b82      	ldr	r3, [pc, #520]	; (8002804 <HAL_RCC_ClockConfig+0x260>)
 80025fa:	685b      	ldr	r3, [r3, #4]
 80025fc:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002600:	687b      	ldr	r3, [r7, #4]
 8002602:	689b      	ldr	r3, [r3, #8]
 8002604:	497f      	ldr	r1, [pc, #508]	; (8002804 <HAL_RCC_ClockConfig+0x260>)
 8002606:	4313      	orrs	r3, r2
 8002608:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800260a:	687b      	ldr	r3, [r7, #4]
 800260c:	681b      	ldr	r3, [r3, #0]
 800260e:	f003 0301 	and.w	r3, r3, #1
 8002612:	2b00      	cmp	r3, #0
 8002614:	f000 80dc 	beq.w	80027d0 <HAL_RCC_ClockConfig+0x22c>
  {    
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
    
    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002618:	687b      	ldr	r3, [r7, #4]
 800261a:	685b      	ldr	r3, [r3, #4]
 800261c:	2b01      	cmp	r3, #1
 800261e:	d13c      	bne.n	800269a <HAL_RCC_ClockConfig+0xf6>
 8002620:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8002624:	673b      	str	r3, [r7, #112]	; 0x70
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002626:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8002628:	fa93 f3a3 	rbit	r3, r3
 800262c:	66fb      	str	r3, [r7, #108]	; 0x6c
  return result;
 800262e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
    {
      /* Check the HSE ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002630:	fab3 f383 	clz	r3, r3
 8002634:	b2db      	uxtb	r3, r3
 8002636:	095b      	lsrs	r3, r3, #5
 8002638:	b2db      	uxtb	r3, r3
 800263a:	f043 0301 	orr.w	r3, r3, #1
 800263e:	b2db      	uxtb	r3, r3
 8002640:	2b01      	cmp	r3, #1
 8002642:	d102      	bne.n	800264a <HAL_RCC_ClockConfig+0xa6>
 8002644:	4b6f      	ldr	r3, [pc, #444]	; (8002804 <HAL_RCC_ClockConfig+0x260>)
 8002646:	681b      	ldr	r3, [r3, #0]
 8002648:	e00f      	b.n	800266a <HAL_RCC_ClockConfig+0xc6>
 800264a:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 800264e:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002650:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8002652:	fa93 f3a3 	rbit	r3, r3
 8002656:	667b      	str	r3, [r7, #100]	; 0x64
 8002658:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 800265c:	663b      	str	r3, [r7, #96]	; 0x60
 800265e:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8002660:	fa93 f3a3 	rbit	r3, r3
 8002664:	65fb      	str	r3, [r7, #92]	; 0x5c
 8002666:	4b67      	ldr	r3, [pc, #412]	; (8002804 <HAL_RCC_ClockConfig+0x260>)
 8002668:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800266a:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 800266e:	65ba      	str	r2, [r7, #88]	; 0x58
 8002670:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8002672:	fa92 f2a2 	rbit	r2, r2
 8002676:	657a      	str	r2, [r7, #84]	; 0x54
  return result;
 8002678:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 800267a:	fab2 f282 	clz	r2, r2
 800267e:	b2d2      	uxtb	r2, r2
 8002680:	f042 0220 	orr.w	r2, r2, #32
 8002684:	b2d2      	uxtb	r2, r2
 8002686:	f002 021f 	and.w	r2, r2, #31
 800268a:	2101      	movs	r1, #1
 800268c:	fa01 f202 	lsl.w	r2, r1, r2
 8002690:	4013      	ands	r3, r2
 8002692:	2b00      	cmp	r3, #0
 8002694:	d17b      	bne.n	800278e <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 8002696:	2301      	movs	r3, #1
 8002698:	e0f3      	b.n	8002882 <HAL_RCC_ClockConfig+0x2de>
      }
    }
    /* PLL is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800269a:	687b      	ldr	r3, [r7, #4]
 800269c:	685b      	ldr	r3, [r3, #4]
 800269e:	2b02      	cmp	r3, #2
 80026a0:	d13c      	bne.n	800271c <HAL_RCC_ClockConfig+0x178>
 80026a2:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80026a6:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80026a8:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80026aa:	fa93 f3a3 	rbit	r3, r3
 80026ae:	64fb      	str	r3, [r7, #76]	; 0x4c
  return result;
 80026b0:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
    {
      /* Check the PLL ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80026b2:	fab3 f383 	clz	r3, r3
 80026b6:	b2db      	uxtb	r3, r3
 80026b8:	095b      	lsrs	r3, r3, #5
 80026ba:	b2db      	uxtb	r3, r3
 80026bc:	f043 0301 	orr.w	r3, r3, #1
 80026c0:	b2db      	uxtb	r3, r3
 80026c2:	2b01      	cmp	r3, #1
 80026c4:	d102      	bne.n	80026cc <HAL_RCC_ClockConfig+0x128>
 80026c6:	4b4f      	ldr	r3, [pc, #316]	; (8002804 <HAL_RCC_ClockConfig+0x260>)
 80026c8:	681b      	ldr	r3, [r3, #0]
 80026ca:	e00f      	b.n	80026ec <HAL_RCC_ClockConfig+0x148>
 80026cc:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80026d0:	64bb      	str	r3, [r7, #72]	; 0x48
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80026d2:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80026d4:	fa93 f3a3 	rbit	r3, r3
 80026d8:	647b      	str	r3, [r7, #68]	; 0x44
 80026da:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80026de:	643b      	str	r3, [r7, #64]	; 0x40
 80026e0:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80026e2:	fa93 f3a3 	rbit	r3, r3
 80026e6:	63fb      	str	r3, [r7, #60]	; 0x3c
 80026e8:	4b46      	ldr	r3, [pc, #280]	; (8002804 <HAL_RCC_ClockConfig+0x260>)
 80026ea:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80026ec:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 80026f0:	63ba      	str	r2, [r7, #56]	; 0x38
 80026f2:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80026f4:	fa92 f2a2 	rbit	r2, r2
 80026f8:	637a      	str	r2, [r7, #52]	; 0x34
  return result;
 80026fa:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80026fc:	fab2 f282 	clz	r2, r2
 8002700:	b2d2      	uxtb	r2, r2
 8002702:	f042 0220 	orr.w	r2, r2, #32
 8002706:	b2d2      	uxtb	r2, r2
 8002708:	f002 021f 	and.w	r2, r2, #31
 800270c:	2101      	movs	r1, #1
 800270e:	fa01 f202 	lsl.w	r2, r1, r2
 8002712:	4013      	ands	r3, r2
 8002714:	2b00      	cmp	r3, #0
 8002716:	d13a      	bne.n	800278e <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 8002718:	2301      	movs	r3, #1
 800271a:	e0b2      	b.n	8002882 <HAL_RCC_ClockConfig+0x2de>
 800271c:	2302      	movs	r3, #2
 800271e:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002720:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002722:	fa93 f3a3 	rbit	r3, r3
 8002726:	62fb      	str	r3, [r7, #44]	; 0x2c
  return result;
 8002728:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800272a:	fab3 f383 	clz	r3, r3
 800272e:	b2db      	uxtb	r3, r3
 8002730:	095b      	lsrs	r3, r3, #5
 8002732:	b2db      	uxtb	r3, r3
 8002734:	f043 0301 	orr.w	r3, r3, #1
 8002738:	b2db      	uxtb	r3, r3
 800273a:	2b01      	cmp	r3, #1
 800273c:	d102      	bne.n	8002744 <HAL_RCC_ClockConfig+0x1a0>
 800273e:	4b31      	ldr	r3, [pc, #196]	; (8002804 <HAL_RCC_ClockConfig+0x260>)
 8002740:	681b      	ldr	r3, [r3, #0]
 8002742:	e00d      	b.n	8002760 <HAL_RCC_ClockConfig+0x1bc>
 8002744:	2302      	movs	r3, #2
 8002746:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002748:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800274a:	fa93 f3a3 	rbit	r3, r3
 800274e:	627b      	str	r3, [r7, #36]	; 0x24
 8002750:	2302      	movs	r3, #2
 8002752:	623b      	str	r3, [r7, #32]
 8002754:	6a3b      	ldr	r3, [r7, #32]
 8002756:	fa93 f3a3 	rbit	r3, r3
 800275a:	61fb      	str	r3, [r7, #28]
 800275c:	4b29      	ldr	r3, [pc, #164]	; (8002804 <HAL_RCC_ClockConfig+0x260>)
 800275e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002760:	2202      	movs	r2, #2
 8002762:	61ba      	str	r2, [r7, #24]
 8002764:	69ba      	ldr	r2, [r7, #24]
 8002766:	fa92 f2a2 	rbit	r2, r2
 800276a:	617a      	str	r2, [r7, #20]
  return result;
 800276c:	697a      	ldr	r2, [r7, #20]
 800276e:	fab2 f282 	clz	r2, r2
 8002772:	b2d2      	uxtb	r2, r2
 8002774:	f042 0220 	orr.w	r2, r2, #32
 8002778:	b2d2      	uxtb	r2, r2
 800277a:	f002 021f 	and.w	r2, r2, #31
 800277e:	2101      	movs	r1, #1
 8002780:	fa01 f202 	lsl.w	r2, r1, r2
 8002784:	4013      	ands	r3, r2
 8002786:	2b00      	cmp	r3, #0
 8002788:	d101      	bne.n	800278e <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 800278a:	2301      	movs	r3, #1
 800278c:	e079      	b.n	8002882 <HAL_RCC_ClockConfig+0x2de>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800278e:	4b1d      	ldr	r3, [pc, #116]	; (8002804 <HAL_RCC_ClockConfig+0x260>)
 8002790:	685b      	ldr	r3, [r3, #4]
 8002792:	f023 0203 	bic.w	r2, r3, #3
 8002796:	687b      	ldr	r3, [r7, #4]
 8002798:	685b      	ldr	r3, [r3, #4]
 800279a:	491a      	ldr	r1, [pc, #104]	; (8002804 <HAL_RCC_ClockConfig+0x260>)
 800279c:	4313      	orrs	r3, r2
 800279e:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80027a0:	f7fe fa8a 	bl	8000cb8 <HAL_GetTick>
 80027a4:	6778      	str	r0, [r7, #116]	; 0x74
    
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80027a6:	e00a      	b.n	80027be <HAL_RCC_ClockConfig+0x21a>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80027a8:	f7fe fa86 	bl	8000cb8 <HAL_GetTick>
 80027ac:	4602      	mov	r2, r0
 80027ae:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80027b0:	1ad3      	subs	r3, r2, r3
 80027b2:	f241 3288 	movw	r2, #5000	; 0x1388
 80027b6:	4293      	cmp	r3, r2
 80027b8:	d901      	bls.n	80027be <HAL_RCC_ClockConfig+0x21a>
      {
        return HAL_TIMEOUT;
 80027ba:	2303      	movs	r3, #3
 80027bc:	e061      	b.n	8002882 <HAL_RCC_ClockConfig+0x2de>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80027be:	4b11      	ldr	r3, [pc, #68]	; (8002804 <HAL_RCC_ClockConfig+0x260>)
 80027c0:	685b      	ldr	r3, [r3, #4]
 80027c2:	f003 020c 	and.w	r2, r3, #12
 80027c6:	687b      	ldr	r3, [r7, #4]
 80027c8:	685b      	ldr	r3, [r3, #4]
 80027ca:	009b      	lsls	r3, r3, #2
 80027cc:	429a      	cmp	r2, r3
 80027ce:	d1eb      	bne.n	80027a8 <HAL_RCC_ClockConfig+0x204>
      }
    }
  }
  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80027d0:	4b0b      	ldr	r3, [pc, #44]	; (8002800 <HAL_RCC_ClockConfig+0x25c>)
 80027d2:	681b      	ldr	r3, [r3, #0]
 80027d4:	f003 0307 	and.w	r3, r3, #7
 80027d8:	683a      	ldr	r2, [r7, #0]
 80027da:	429a      	cmp	r2, r3
 80027dc:	d214      	bcs.n	8002808 <HAL_RCC_ClockConfig+0x264>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80027de:	4b08      	ldr	r3, [pc, #32]	; (8002800 <HAL_RCC_ClockConfig+0x25c>)
 80027e0:	681b      	ldr	r3, [r3, #0]
 80027e2:	f023 0207 	bic.w	r2, r3, #7
 80027e6:	4906      	ldr	r1, [pc, #24]	; (8002800 <HAL_RCC_ClockConfig+0x25c>)
 80027e8:	683b      	ldr	r3, [r7, #0]
 80027ea:	4313      	orrs	r3, r2
 80027ec:	600b      	str	r3, [r1, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80027ee:	4b04      	ldr	r3, [pc, #16]	; (8002800 <HAL_RCC_ClockConfig+0x25c>)
 80027f0:	681b      	ldr	r3, [r3, #0]
 80027f2:	f003 0307 	and.w	r3, r3, #7
 80027f6:	683a      	ldr	r2, [r7, #0]
 80027f8:	429a      	cmp	r2, r3
 80027fa:	d005      	beq.n	8002808 <HAL_RCC_ClockConfig+0x264>
    {
      return HAL_ERROR;
 80027fc:	2301      	movs	r3, #1
 80027fe:	e040      	b.n	8002882 <HAL_RCC_ClockConfig+0x2de>
 8002800:	40022000 	.word	0x40022000
 8002804:	40021000 	.word	0x40021000
    }
  }    

  /*-------------------------- PCLK1 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002808:	687b      	ldr	r3, [r7, #4]
 800280a:	681b      	ldr	r3, [r3, #0]
 800280c:	f003 0304 	and.w	r3, r3, #4
 8002810:	2b00      	cmp	r3, #0
 8002812:	d008      	beq.n	8002826 <HAL_RCC_ClockConfig+0x282>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002814:	4b1d      	ldr	r3, [pc, #116]	; (800288c <HAL_RCC_ClockConfig+0x2e8>)
 8002816:	685b      	ldr	r3, [r3, #4]
 8002818:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 800281c:	687b      	ldr	r3, [r7, #4]
 800281e:	68db      	ldr	r3, [r3, #12]
 8002820:	491a      	ldr	r1, [pc, #104]	; (800288c <HAL_RCC_ClockConfig+0x2e8>)
 8002822:	4313      	orrs	r3, r2
 8002824:	604b      	str	r3, [r1, #4]
  }
  
  /*-------------------------- PCLK2 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002826:	687b      	ldr	r3, [r7, #4]
 8002828:	681b      	ldr	r3, [r3, #0]
 800282a:	f003 0308 	and.w	r3, r3, #8
 800282e:	2b00      	cmp	r3, #0
 8002830:	d009      	beq.n	8002846 <HAL_RCC_ClockConfig+0x2a2>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8002832:	4b16      	ldr	r3, [pc, #88]	; (800288c <HAL_RCC_ClockConfig+0x2e8>)
 8002834:	685b      	ldr	r3, [r3, #4]
 8002836:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 800283a:	687b      	ldr	r3, [r7, #4]
 800283c:	691b      	ldr	r3, [r3, #16]
 800283e:	00db      	lsls	r3, r3, #3
 8002840:	4912      	ldr	r1, [pc, #72]	; (800288c <HAL_RCC_ClockConfig+0x2e8>)
 8002842:	4313      	orrs	r3, r2
 8002844:	604b      	str	r3, [r1, #4]
  }
 
  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_BITNUMBER];
 8002846:	f000 f829 	bl	800289c <HAL_RCC_GetSysClockFreq>
 800284a:	4601      	mov	r1, r0
 800284c:	4b0f      	ldr	r3, [pc, #60]	; (800288c <HAL_RCC_ClockConfig+0x2e8>)
 800284e:	685b      	ldr	r3, [r3, #4]
 8002850:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8002854:	22f0      	movs	r2, #240	; 0xf0
 8002856:	613a      	str	r2, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002858:	693a      	ldr	r2, [r7, #16]
 800285a:	fa92 f2a2 	rbit	r2, r2
 800285e:	60fa      	str	r2, [r7, #12]
  return result;
 8002860:	68fa      	ldr	r2, [r7, #12]
 8002862:	fab2 f282 	clz	r2, r2
 8002866:	b2d2      	uxtb	r2, r2
 8002868:	40d3      	lsrs	r3, r2
 800286a:	4a09      	ldr	r2, [pc, #36]	; (8002890 <HAL_RCC_ClockConfig+0x2ec>)
 800286c:	5cd3      	ldrb	r3, [r2, r3]
 800286e:	fa21 f303 	lsr.w	r3, r1, r3
 8002872:	4a08      	ldr	r2, [pc, #32]	; (8002894 <HAL_RCC_ClockConfig+0x2f0>)
 8002874:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick (uwTickPrio);
 8002876:	4b08      	ldr	r3, [pc, #32]	; (8002898 <HAL_RCC_ClockConfig+0x2f4>)
 8002878:	681b      	ldr	r3, [r3, #0]
 800287a:	4618      	mov	r0, r3
 800287c:	f7fe f9d8 	bl	8000c30 <HAL_InitTick>
  
  return HAL_OK;
 8002880:	2300      	movs	r3, #0
}
 8002882:	4618      	mov	r0, r3
 8002884:	3778      	adds	r7, #120	; 0x78
 8002886:	46bd      	mov	sp, r7
 8002888:	bd80      	pop	{r7, pc}
 800288a:	bf00      	nop
 800288c:	40021000 	.word	0x40021000
 8002890:	08005128 	.word	0x08005128
 8002894:	20000000 	.word	0x20000000
 8002898:	20000004 	.word	0x20000004

0800289c <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *         
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800289c:	b480      	push	{r7}
 800289e:	b08b      	sub	sp, #44	; 0x2c
 80028a0:	af00      	add	r7, sp, #0
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 80028a2:	2300      	movs	r3, #0
 80028a4:	61fb      	str	r3, [r7, #28]
 80028a6:	2300      	movs	r3, #0
 80028a8:	61bb      	str	r3, [r7, #24]
 80028aa:	2300      	movs	r3, #0
 80028ac:	627b      	str	r3, [r7, #36]	; 0x24
 80028ae:	2300      	movs	r3, #0
 80028b0:	617b      	str	r3, [r7, #20]
  uint32_t sysclockfreq = 0U;
 80028b2:	2300      	movs	r3, #0
 80028b4:	623b      	str	r3, [r7, #32]
  
  tmpreg = RCC->CFGR;
 80028b6:	4b29      	ldr	r3, [pc, #164]	; (800295c <HAL_RCC_GetSysClockFreq+0xc0>)
 80028b8:	685b      	ldr	r3, [r3, #4]
 80028ba:	61fb      	str	r3, [r7, #28]
  
  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 80028bc:	69fb      	ldr	r3, [r7, #28]
 80028be:	f003 030c 	and.w	r3, r3, #12
 80028c2:	2b04      	cmp	r3, #4
 80028c4:	d002      	beq.n	80028cc <HAL_RCC_GetSysClockFreq+0x30>
 80028c6:	2b08      	cmp	r3, #8
 80028c8:	d003      	beq.n	80028d2 <HAL_RCC_GetSysClockFreq+0x36>
 80028ca:	e03c      	b.n	8002946 <HAL_RCC_GetSysClockFreq+0xaa>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 80028cc:	4b24      	ldr	r3, [pc, #144]	; (8002960 <HAL_RCC_GetSysClockFreq+0xc4>)
 80028ce:	623b      	str	r3, [r7, #32]
      break;
 80028d0:	e03c      	b.n	800294c <HAL_RCC_GetSysClockFreq+0xb0>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> POSITION_VAL(RCC_CFGR_PLLMUL)];
 80028d2:	69fb      	ldr	r3, [r7, #28]
 80028d4:	f403 1370 	and.w	r3, r3, #3932160	; 0x3c0000
 80028d8:	f44f 1270 	mov.w	r2, #3932160	; 0x3c0000
 80028dc:	60ba      	str	r2, [r7, #8]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80028de:	68ba      	ldr	r2, [r7, #8]
 80028e0:	fa92 f2a2 	rbit	r2, r2
 80028e4:	607a      	str	r2, [r7, #4]
  return result;
 80028e6:	687a      	ldr	r2, [r7, #4]
 80028e8:	fab2 f282 	clz	r2, r2
 80028ec:	b2d2      	uxtb	r2, r2
 80028ee:	40d3      	lsrs	r3, r2
 80028f0:	4a1c      	ldr	r2, [pc, #112]	; (8002964 <HAL_RCC_GetSysClockFreq+0xc8>)
 80028f2:	5cd3      	ldrb	r3, [r2, r3]
 80028f4:	617b      	str	r3, [r7, #20]
      prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV) >> POSITION_VAL(RCC_CFGR2_PREDIV)];
 80028f6:	4b19      	ldr	r3, [pc, #100]	; (800295c <HAL_RCC_GetSysClockFreq+0xc0>)
 80028f8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80028fa:	f003 030f 	and.w	r3, r3, #15
 80028fe:	220f      	movs	r2, #15
 8002900:	613a      	str	r2, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002902:	693a      	ldr	r2, [r7, #16]
 8002904:	fa92 f2a2 	rbit	r2, r2
 8002908:	60fa      	str	r2, [r7, #12]
  return result;
 800290a:	68fa      	ldr	r2, [r7, #12]
 800290c:	fab2 f282 	clz	r2, r2
 8002910:	b2d2      	uxtb	r2, r2
 8002912:	40d3      	lsrs	r3, r2
 8002914:	4a14      	ldr	r2, [pc, #80]	; (8002968 <HAL_RCC_GetSysClockFreq+0xcc>)
 8002916:	5cd3      	ldrb	r3, [r2, r3]
 8002918:	61bb      	str	r3, [r7, #24]
#if defined(RCC_CFGR_PLLSRC_HSI_DIV2)
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI)
 800291a:	69fb      	ldr	r3, [r7, #28]
 800291c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002920:	2b00      	cmp	r3, #0
 8002922:	d008      	beq.n	8002936 <HAL_RCC_GetSysClockFreq+0x9a>
      {
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSE_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 8002924:	4a0e      	ldr	r2, [pc, #56]	; (8002960 <HAL_RCC_GetSysClockFreq+0xc4>)
 8002926:	69bb      	ldr	r3, [r7, #24]
 8002928:	fbb2 f2f3 	udiv	r2, r2, r3
 800292c:	697b      	ldr	r3, [r7, #20]
 800292e:	fb02 f303 	mul.w	r3, r2, r3
 8002932:	627b      	str	r3, [r7, #36]	; 0x24
 8002934:	e004      	b.n	8002940 <HAL_RCC_GetSysClockFreq+0xa4>
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((uint64_t) (HSI_VALUE >> 1U) * ((uint64_t) pllmul));
 8002936:	697b      	ldr	r3, [r7, #20]
 8002938:	4a0c      	ldr	r2, [pc, #48]	; (800296c <HAL_RCC_GetSysClockFreq+0xd0>)
 800293a:	fb02 f303 	mul.w	r3, r2, r3
 800293e:	627b      	str	r3, [r7, #36]	; 0x24
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSI_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
      }
#endif /* RCC_CFGR_PLLSRC_HSI_DIV2 */
      sysclockfreq = pllclk;
 8002940:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002942:	623b      	str	r3, [r7, #32]
      break;
 8002944:	e002      	b.n	800294c <HAL_RCC_GetSysClockFreq+0xb0>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8002946:	4b0a      	ldr	r3, [pc, #40]	; (8002970 <HAL_RCC_GetSysClockFreq+0xd4>)
 8002948:	623b      	str	r3, [r7, #32]
      break;
 800294a:	bf00      	nop
    }
  }
  return sysclockfreq;
 800294c:	6a3b      	ldr	r3, [r7, #32]
}
 800294e:	4618      	mov	r0, r3
 8002950:	372c      	adds	r7, #44	; 0x2c
 8002952:	46bd      	mov	sp, r7
 8002954:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002958:	4770      	bx	lr
 800295a:	bf00      	nop
 800295c:	40021000 	.word	0x40021000
 8002960:	01e84800 	.word	0x01e84800
 8002964:	08005140 	.word	0x08005140
 8002968:	08005150 	.word	0x08005150
 800296c:	003d0900 	.word	0x003d0900
 8002970:	007a1200 	.word	0x007a1200

08002974 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency 
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002974:	b480      	push	{r7}
 8002976:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8002978:	4b03      	ldr	r3, [pc, #12]	; (8002988 <HAL_RCC_GetHCLKFreq+0x14>)
 800297a:	681b      	ldr	r3, [r3, #0]
}
 800297c:	4618      	mov	r0, r3
 800297e:	46bd      	mov	sp, r7
 8002980:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002984:	4770      	bx	lr
 8002986:	bf00      	nop
 8002988:	20000000 	.word	0x20000000

0800298c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 800298c:	b580      	push	{r7, lr}
 800298e:	b082      	sub	sp, #8
 8002990:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_BITNUMBER]);
 8002992:	f7ff ffef 	bl	8002974 <HAL_RCC_GetHCLKFreq>
 8002996:	4601      	mov	r1, r0
 8002998:	4b0b      	ldr	r3, [pc, #44]	; (80029c8 <HAL_RCC_GetPCLK1Freq+0x3c>)
 800299a:	685b      	ldr	r3, [r3, #4]
 800299c:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 80029a0:	f44f 62e0 	mov.w	r2, #1792	; 0x700
 80029a4:	607a      	str	r2, [r7, #4]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80029a6:	687a      	ldr	r2, [r7, #4]
 80029a8:	fa92 f2a2 	rbit	r2, r2
 80029ac:	603a      	str	r2, [r7, #0]
  return result;
 80029ae:	683a      	ldr	r2, [r7, #0]
 80029b0:	fab2 f282 	clz	r2, r2
 80029b4:	b2d2      	uxtb	r2, r2
 80029b6:	40d3      	lsrs	r3, r2
 80029b8:	4a04      	ldr	r2, [pc, #16]	; (80029cc <HAL_RCC_GetPCLK1Freq+0x40>)
 80029ba:	5cd3      	ldrb	r3, [r2, r3]
 80029bc:	fa21 f303 	lsr.w	r3, r1, r3
}    
 80029c0:	4618      	mov	r0, r3
 80029c2:	3708      	adds	r7, #8
 80029c4:	46bd      	mov	sp, r7
 80029c6:	bd80      	pop	{r7, pc}
 80029c8:	40021000 	.word	0x40021000
 80029cc:	08005138 	.word	0x08005138

080029d0 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80029d0:	b580      	push	{r7, lr}
 80029d2:	b082      	sub	sp, #8
 80029d4:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_BITNUMBER]);
 80029d6:	f7ff ffcd 	bl	8002974 <HAL_RCC_GetHCLKFreq>
 80029da:	4601      	mov	r1, r0
 80029dc:	4b0b      	ldr	r3, [pc, #44]	; (8002a0c <HAL_RCC_GetPCLK2Freq+0x3c>)
 80029de:	685b      	ldr	r3, [r3, #4]
 80029e0:	f403 5360 	and.w	r3, r3, #14336	; 0x3800
 80029e4:	f44f 5260 	mov.w	r2, #14336	; 0x3800
 80029e8:	607a      	str	r2, [r7, #4]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80029ea:	687a      	ldr	r2, [r7, #4]
 80029ec:	fa92 f2a2 	rbit	r2, r2
 80029f0:	603a      	str	r2, [r7, #0]
  return result;
 80029f2:	683a      	ldr	r2, [r7, #0]
 80029f4:	fab2 f282 	clz	r2, r2
 80029f8:	b2d2      	uxtb	r2, r2
 80029fa:	40d3      	lsrs	r3, r2
 80029fc:	4a04      	ldr	r2, [pc, #16]	; (8002a10 <HAL_RCC_GetPCLK2Freq+0x40>)
 80029fe:	5cd3      	ldrb	r3, [r2, r3]
 8002a00:	fa21 f303 	lsr.w	r3, r1, r3
} 
 8002a04:	4618      	mov	r0, r3
 8002a06:	3708      	adds	r7, #8
 8002a08:	46bd      	mov	sp, r7
 8002a0a:	bd80      	pop	{r7, pc}
 8002a0c:	40021000 	.word	0x40021000
 8002a10:	08005138 	.word	0x08005138

08002a14 <HAL_RCCEx_PeriphCLKConfig>:
  *         When the TIMx clock source is PLL clock, so the TIMx clock is PLL clock x 2.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8002a14:	b580      	push	{r7, lr}
 8002a16:	b092      	sub	sp, #72	; 0x48
 8002a18:	af00      	add	r7, sp, #0
 8002a1a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8002a1c:	2300      	movs	r3, #0
 8002a1e:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t temp_reg = 0U;
 8002a20:	2300      	movs	r3, #0
 8002a22:	63fb      	str	r3, [r7, #60]	; 0x3c
  FlagStatus       pwrclkchanged = RESET;
 8002a24:	2300      	movs	r3, #0
 8002a26:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
    
  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));
  
  /*---------------------------- RTC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8002a2a:	687b      	ldr	r3, [r7, #4]
 8002a2c:	681b      	ldr	r3, [r3, #0]
 8002a2e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002a32:	2b00      	cmp	r3, #0
 8002a34:	f000 80d4 	beq.w	8002be0 <HAL_RCCEx_PeriphCLKConfig+0x1cc>


    /* As soon as function is called to change RTC clock source, activation of the 
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002a38:	4b4e      	ldr	r3, [pc, #312]	; (8002b74 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002a3a:	69db      	ldr	r3, [r3, #28]
 8002a3c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002a40:	2b00      	cmp	r3, #0
 8002a42:	d10e      	bne.n	8002a62 <HAL_RCCEx_PeriphCLKConfig+0x4e>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002a44:	4b4b      	ldr	r3, [pc, #300]	; (8002b74 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002a46:	69db      	ldr	r3, [r3, #28]
 8002a48:	4a4a      	ldr	r2, [pc, #296]	; (8002b74 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002a4a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002a4e:	61d3      	str	r3, [r2, #28]
 8002a50:	4b48      	ldr	r3, [pc, #288]	; (8002b74 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002a52:	69db      	ldr	r3, [r3, #28]
 8002a54:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002a58:	60bb      	str	r3, [r7, #8]
 8002a5a:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002a5c:	2301      	movs	r3, #1
 8002a5e:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002a62:	4b45      	ldr	r3, [pc, #276]	; (8002b78 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8002a64:	681b      	ldr	r3, [r3, #0]
 8002a66:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002a6a:	2b00      	cmp	r3, #0
 8002a6c:	d118      	bne.n	8002aa0 <HAL_RCCEx_PeriphCLKConfig+0x8c>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8002a6e:	4b42      	ldr	r3, [pc, #264]	; (8002b78 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8002a70:	681b      	ldr	r3, [r3, #0]
 8002a72:	4a41      	ldr	r2, [pc, #260]	; (8002b78 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8002a74:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002a78:	6013      	str	r3, [r2, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002a7a:	f7fe f91d 	bl	8000cb8 <HAL_GetTick>
 8002a7e:	6438      	str	r0, [r7, #64]	; 0x40
      
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002a80:	e008      	b.n	8002a94 <HAL_RCCEx_PeriphCLKConfig+0x80>
      {
          if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002a82:	f7fe f919 	bl	8000cb8 <HAL_GetTick>
 8002a86:	4602      	mov	r2, r0
 8002a88:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8002a8a:	1ad3      	subs	r3, r2, r3
 8002a8c:	2b64      	cmp	r3, #100	; 0x64
 8002a8e:	d901      	bls.n	8002a94 <HAL_RCCEx_PeriphCLKConfig+0x80>
        {
          return HAL_TIMEOUT;
 8002a90:	2303      	movs	r3, #3
 8002a92:	e12d      	b.n	8002cf0 <HAL_RCCEx_PeriphCLKConfig+0x2dc>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002a94:	4b38      	ldr	r3, [pc, #224]	; (8002b78 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8002a96:	681b      	ldr	r3, [r3, #0]
 8002a98:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002a9c:	2b00      	cmp	r3, #0
 8002a9e:	d0f0      	beq.n	8002a82 <HAL_RCCEx_PeriphCLKConfig+0x6e>
        }
      }
    }
    
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */ 
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8002aa0:	4b34      	ldr	r3, [pc, #208]	; (8002b74 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002aa2:	6a1b      	ldr	r3, [r3, #32]
 8002aa4:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002aa8:	63fb      	str	r3, [r7, #60]	; 0x3c
    if((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8002aaa:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8002aac:	2b00      	cmp	r3, #0
 8002aae:	f000 8084 	beq.w	8002bba <HAL_RCCEx_PeriphCLKConfig+0x1a6>
 8002ab2:	687b      	ldr	r3, [r7, #4]
 8002ab4:	685b      	ldr	r3, [r3, #4]
 8002ab6:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002aba:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8002abc:	429a      	cmp	r2, r3
 8002abe:	d07c      	beq.n	8002bba <HAL_RCCEx_PeriphCLKConfig+0x1a6>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8002ac0:	4b2c      	ldr	r3, [pc, #176]	; (8002b74 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002ac2:	6a1b      	ldr	r3, [r3, #32]
 8002ac4:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002ac8:	63fb      	str	r3, [r7, #60]	; 0x3c
 8002aca:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8002ace:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002ad0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002ad2:	fa93 f3a3 	rbit	r3, r3
 8002ad6:	62fb      	str	r3, [r7, #44]	; 0x2c
  return result;
 8002ad8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8002ada:	fab3 f383 	clz	r3, r3
 8002ade:	b2db      	uxtb	r3, r3
 8002ae0:	461a      	mov	r2, r3
 8002ae2:	4b26      	ldr	r3, [pc, #152]	; (8002b7c <HAL_RCCEx_PeriphCLKConfig+0x168>)
 8002ae4:	4413      	add	r3, r2
 8002ae6:	009b      	lsls	r3, r3, #2
 8002ae8:	461a      	mov	r2, r3
 8002aea:	2301      	movs	r3, #1
 8002aec:	6013      	str	r3, [r2, #0]
 8002aee:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8002af2:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002af4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002af6:	fa93 f3a3 	rbit	r3, r3
 8002afa:	637b      	str	r3, [r7, #52]	; 0x34
  return result;
 8002afc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
      __HAL_RCC_BACKUPRESET_RELEASE();
 8002afe:	fab3 f383 	clz	r3, r3
 8002b02:	b2db      	uxtb	r3, r3
 8002b04:	461a      	mov	r2, r3
 8002b06:	4b1d      	ldr	r3, [pc, #116]	; (8002b7c <HAL_RCCEx_PeriphCLKConfig+0x168>)
 8002b08:	4413      	add	r3, r2
 8002b0a:	009b      	lsls	r3, r3, #2
 8002b0c:	461a      	mov	r2, r3
 8002b0e:	2300      	movs	r3, #0
 8002b10:	6013      	str	r3, [r2, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
 8002b12:	4a18      	ldr	r2, [pc, #96]	; (8002b74 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002b14:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8002b16:	6213      	str	r3, [r2, #32]
    
      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 8002b18:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8002b1a:	f003 0301 	and.w	r3, r3, #1
 8002b1e:	2b00      	cmp	r3, #0
 8002b20:	d04b      	beq.n	8002bba <HAL_RCCEx_PeriphCLKConfig+0x1a6>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002b22:	f7fe f8c9 	bl	8000cb8 <HAL_GetTick>
 8002b26:	6438      	str	r0, [r7, #64]	; 0x40
        
        /* Wait till LSE is ready */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002b28:	e00a      	b.n	8002b40 <HAL_RCCEx_PeriphCLKConfig+0x12c>
        {
            if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002b2a:	f7fe f8c5 	bl	8000cb8 <HAL_GetTick>
 8002b2e:	4602      	mov	r2, r0
 8002b30:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8002b32:	1ad3      	subs	r3, r2, r3
 8002b34:	f241 3288 	movw	r2, #5000	; 0x1388
 8002b38:	4293      	cmp	r3, r2
 8002b3a:	d901      	bls.n	8002b40 <HAL_RCCEx_PeriphCLKConfig+0x12c>
          {
            return HAL_TIMEOUT;
 8002b3c:	2303      	movs	r3, #3
 8002b3e:	e0d7      	b.n	8002cf0 <HAL_RCCEx_PeriphCLKConfig+0x2dc>
 8002b40:	2302      	movs	r3, #2
 8002b42:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002b44:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002b46:	fa93 f3a3 	rbit	r3, r3
 8002b4a:	627b      	str	r3, [r7, #36]	; 0x24
 8002b4c:	2302      	movs	r3, #2
 8002b4e:	623b      	str	r3, [r7, #32]
 8002b50:	6a3b      	ldr	r3, [r7, #32]
 8002b52:	fa93 f3a3 	rbit	r3, r3
 8002b56:	61fb      	str	r3, [r7, #28]
  return result;
 8002b58:	69fb      	ldr	r3, [r7, #28]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002b5a:	fab3 f383 	clz	r3, r3
 8002b5e:	b2db      	uxtb	r3, r3
 8002b60:	095b      	lsrs	r3, r3, #5
 8002b62:	b2db      	uxtb	r3, r3
 8002b64:	f043 0302 	orr.w	r3, r3, #2
 8002b68:	b2db      	uxtb	r3, r3
 8002b6a:	2b02      	cmp	r3, #2
 8002b6c:	d108      	bne.n	8002b80 <HAL_RCCEx_PeriphCLKConfig+0x16c>
 8002b6e:	4b01      	ldr	r3, [pc, #4]	; (8002b74 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002b70:	6a1b      	ldr	r3, [r3, #32]
 8002b72:	e00d      	b.n	8002b90 <HAL_RCCEx_PeriphCLKConfig+0x17c>
 8002b74:	40021000 	.word	0x40021000
 8002b78:	40007000 	.word	0x40007000
 8002b7c:	10908100 	.word	0x10908100
 8002b80:	2302      	movs	r3, #2
 8002b82:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002b84:	69bb      	ldr	r3, [r7, #24]
 8002b86:	fa93 f3a3 	rbit	r3, r3
 8002b8a:	617b      	str	r3, [r7, #20]
 8002b8c:	4b5a      	ldr	r3, [pc, #360]	; (8002cf8 <HAL_RCCEx_PeriphCLKConfig+0x2e4>)
 8002b8e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002b90:	2202      	movs	r2, #2
 8002b92:	613a      	str	r2, [r7, #16]
 8002b94:	693a      	ldr	r2, [r7, #16]
 8002b96:	fa92 f2a2 	rbit	r2, r2
 8002b9a:	60fa      	str	r2, [r7, #12]
  return result;
 8002b9c:	68fa      	ldr	r2, [r7, #12]
 8002b9e:	fab2 f282 	clz	r2, r2
 8002ba2:	b2d2      	uxtb	r2, r2
 8002ba4:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8002ba8:	b2d2      	uxtb	r2, r2
 8002baa:	f002 021f 	and.w	r2, r2, #31
 8002bae:	2101      	movs	r1, #1
 8002bb0:	fa01 f202 	lsl.w	r2, r1, r2
 8002bb4:	4013      	ands	r3, r2
 8002bb6:	2b00      	cmp	r3, #0
 8002bb8:	d0b7      	beq.n	8002b2a <HAL_RCCEx_PeriphCLKConfig+0x116>
          }      
        }  
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection); 
 8002bba:	4b4f      	ldr	r3, [pc, #316]	; (8002cf8 <HAL_RCCEx_PeriphCLKConfig+0x2e4>)
 8002bbc:	6a1b      	ldr	r3, [r3, #32]
 8002bbe:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8002bc2:	687b      	ldr	r3, [r7, #4]
 8002bc4:	685b      	ldr	r3, [r3, #4]
 8002bc6:	494c      	ldr	r1, [pc, #304]	; (8002cf8 <HAL_RCCEx_PeriphCLKConfig+0x2e4>)
 8002bc8:	4313      	orrs	r3, r2
 8002bca:	620b      	str	r3, [r1, #32]

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 8002bcc:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 8002bd0:	2b01      	cmp	r3, #1
 8002bd2:	d105      	bne.n	8002be0 <HAL_RCCEx_PeriphCLKConfig+0x1cc>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002bd4:	4b48      	ldr	r3, [pc, #288]	; (8002cf8 <HAL_RCCEx_PeriphCLKConfig+0x2e4>)
 8002bd6:	69db      	ldr	r3, [r3, #28]
 8002bd8:	4a47      	ldr	r2, [pc, #284]	; (8002cf8 <HAL_RCCEx_PeriphCLKConfig+0x2e4>)
 8002bda:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002bde:	61d3      	str	r3, [r2, #28]
    }
  }

  /*------------------------------- USART1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8002be0:	687b      	ldr	r3, [r7, #4]
 8002be2:	681b      	ldr	r3, [r3, #0]
 8002be4:	f003 0301 	and.w	r3, r3, #1
 8002be8:	2b00      	cmp	r3, #0
 8002bea:	d008      	beq.n	8002bfe <HAL_RCCEx_PeriphCLKConfig+0x1ea>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));
    
    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8002bec:	4b42      	ldr	r3, [pc, #264]	; (8002cf8 <HAL_RCCEx_PeriphCLKConfig+0x2e4>)
 8002bee:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002bf0:	f023 0203 	bic.w	r2, r3, #3
 8002bf4:	687b      	ldr	r3, [r7, #4]
 8002bf6:	689b      	ldr	r3, [r3, #8]
 8002bf8:	493f      	ldr	r1, [pc, #252]	; (8002cf8 <HAL_RCCEx_PeriphCLKConfig+0x2e4>)
 8002bfa:	4313      	orrs	r3, r2
 8002bfc:	630b      	str	r3, [r1, #48]	; 0x30
  }

#if defined(RCC_CFGR3_USART2SW)
  /*----------------------------- USART2 Configuration --------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8002bfe:	687b      	ldr	r3, [r7, #4]
 8002c00:	681b      	ldr	r3, [r3, #0]
 8002c02:	f003 0302 	and.w	r3, r3, #2
 8002c06:	2b00      	cmp	r3, #0
 8002c08:	d008      	beq.n	8002c1c <HAL_RCCEx_PeriphCLKConfig+0x208>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));
    
    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8002c0a:	4b3b      	ldr	r3, [pc, #236]	; (8002cf8 <HAL_RCCEx_PeriphCLKConfig+0x2e4>)
 8002c0c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002c0e:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8002c12:	687b      	ldr	r3, [r7, #4]
 8002c14:	68db      	ldr	r3, [r3, #12]
 8002c16:	4938      	ldr	r1, [pc, #224]	; (8002cf8 <HAL_RCCEx_PeriphCLKConfig+0x2e4>)
 8002c18:	4313      	orrs	r3, r2
 8002c1a:	630b      	str	r3, [r1, #48]	; 0x30
  }
#endif /* RCC_CFGR3_USART2SW */

#if defined(RCC_CFGR3_USART3SW)
  /*------------------------------ USART3 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8002c1c:	687b      	ldr	r3, [r7, #4]
 8002c1e:	681b      	ldr	r3, [r3, #0]
 8002c20:	f003 0304 	and.w	r3, r3, #4
 8002c24:	2b00      	cmp	r3, #0
 8002c26:	d008      	beq.n	8002c3a <HAL_RCCEx_PeriphCLKConfig+0x226>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));
    
    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8002c28:	4b33      	ldr	r3, [pc, #204]	; (8002cf8 <HAL_RCCEx_PeriphCLKConfig+0x2e4>)
 8002c2a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002c2c:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 8002c30:	687b      	ldr	r3, [r7, #4]
 8002c32:	691b      	ldr	r3, [r3, #16]
 8002c34:	4930      	ldr	r1, [pc, #192]	; (8002cf8 <HAL_RCCEx_PeriphCLKConfig+0x2e4>)
 8002c36:	4313      	orrs	r3, r2
 8002c38:	630b      	str	r3, [r1, #48]	; 0x30
  }
#endif /* RCC_CFGR3_USART3SW */

  /*------------------------------ I2C1 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8002c3a:	687b      	ldr	r3, [r7, #4]
 8002c3c:	681b      	ldr	r3, [r3, #0]
 8002c3e:	f003 0320 	and.w	r3, r3, #32
 8002c42:	2b00      	cmp	r3, #0
 8002c44:	d008      	beq.n	8002c58 <HAL_RCCEx_PeriphCLKConfig+0x244>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));
    
    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8002c46:	4b2c      	ldr	r3, [pc, #176]	; (8002cf8 <HAL_RCCEx_PeriphCLKConfig+0x2e4>)
 8002c48:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002c4a:	f023 0210 	bic.w	r2, r3, #16
 8002c4e:	687b      	ldr	r3, [r7, #4]
 8002c50:	695b      	ldr	r3, [r3, #20]
 8002c52:	4929      	ldr	r1, [pc, #164]	; (8002cf8 <HAL_RCCEx_PeriphCLKConfig+0x2e4>)
 8002c54:	4313      	orrs	r3, r2
 8002c56:	630b      	str	r3, [r1, #48]	; 0x30
#if defined(STM32F302xE) || defined(STM32F303xE)\
 || defined(STM32F302xC) || defined(STM32F303xC)\
 || defined(STM32F302x8)                        \
 || defined(STM32F373xC)
  /*------------------------------ USB Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 8002c58:	687b      	ldr	r3, [r7, #4]
 8002c5a:	681b      	ldr	r3, [r3, #0]
 8002c5c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002c60:	2b00      	cmp	r3, #0
 8002c62:	d008      	beq.n	8002c76 <HAL_RCCEx_PeriphCLKConfig+0x262>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->USBClockSelection));
    
    /* Configure the USB clock source */
    __HAL_RCC_USB_CONFIG(PeriphClkInit->USBClockSelection);
 8002c64:	4b24      	ldr	r3, [pc, #144]	; (8002cf8 <HAL_RCCEx_PeriphCLKConfig+0x2e4>)
 8002c66:	685b      	ldr	r3, [r3, #4]
 8002c68:	f423 0280 	bic.w	r2, r3, #4194304	; 0x400000
 8002c6c:	687b      	ldr	r3, [r7, #4]
 8002c6e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002c70:	4921      	ldr	r1, [pc, #132]	; (8002cf8 <HAL_RCCEx_PeriphCLKConfig+0x2e4>)
 8002c72:	4313      	orrs	r3, r2
 8002c74:	604b      	str	r3, [r1, #4]
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)\
 || defined(STM32F373xC) || defined(STM32F378xx)

  /*------------------------------ I2C2 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8002c76:	687b      	ldr	r3, [r7, #4]
 8002c78:	681b      	ldr	r3, [r3, #0]
 8002c7a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002c7e:	2b00      	cmp	r3, #0
 8002c80:	d008      	beq.n	8002c94 <HAL_RCCEx_PeriphCLKConfig+0x280>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));
    
    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8002c82:	4b1d      	ldr	r3, [pc, #116]	; (8002cf8 <HAL_RCCEx_PeriphCLKConfig+0x2e4>)
 8002c84:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002c86:	f023 0220 	bic.w	r2, r3, #32
 8002c8a:	687b      	ldr	r3, [r7, #4]
 8002c8c:	699b      	ldr	r3, [r3, #24]
 8002c8e:	491a      	ldr	r1, [pc, #104]	; (8002cf8 <HAL_RCCEx_PeriphCLKConfig+0x2e4>)
 8002c90:	4313      	orrs	r3, r2
 8002c92:	630b      	str	r3, [r1, #48]	; 0x30
       /* STM32F303xC || STM32F358xx    */

#if defined(STM32F373xC) || defined(STM32F378xx)
      
  /*------------------------------ ADC1 clock Configuration ------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC1) == RCC_PERIPHCLK_ADC1)
 8002c94:	687b      	ldr	r3, [r7, #4]
 8002c96:	681b      	ldr	r3, [r3, #0]
 8002c98:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002c9c:	2b00      	cmp	r3, #0
 8002c9e:	d008      	beq.n	8002cb2 <HAL_RCCEx_PeriphCLKConfig+0x29e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC1PCLK2_DIV(PeriphClkInit->Adc1ClockSelection));
    
    /* Configure the ADC1 clock source */
    __HAL_RCC_ADC1_CONFIG(PeriphClkInit->Adc1ClockSelection);
 8002ca0:	4b15      	ldr	r3, [pc, #84]	; (8002cf8 <HAL_RCCEx_PeriphCLKConfig+0x2e4>)
 8002ca2:	685b      	ldr	r3, [r3, #4]
 8002ca4:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8002ca8:	687b      	ldr	r3, [r7, #4]
 8002caa:	69db      	ldr	r3, [r3, #28]
 8002cac:	4912      	ldr	r1, [pc, #72]	; (8002cf8 <HAL_RCCEx_PeriphCLKConfig+0x2e4>)
 8002cae:	4313      	orrs	r3, r2
 8002cb0:	604b      	str	r3, [r1, #4]
#endif /* STM32F334x8 */

#if defined(STM32F373xC) || defined(STM32F378xx)
  
  /*------------------------------ SDADC clock Configuration -------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDADC) == RCC_PERIPHCLK_SDADC)
 8002cb2:	687b      	ldr	r3, [r7, #4]
 8002cb4:	681b      	ldr	r3, [r3, #0]
 8002cb6:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8002cba:	2b00      	cmp	r3, #0
 8002cbc:	d008      	beq.n	8002cd0 <HAL_RCCEx_PeriphCLKConfig+0x2bc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDADCSYSCLK_DIV(PeriphClkInit->SdadcClockSelection));
    
    /* Configure the SDADC clock prescaler */
    __HAL_RCC_SDADC_CONFIG(PeriphClkInit->SdadcClockSelection);
 8002cbe:	4b0e      	ldr	r3, [pc, #56]	; (8002cf8 <HAL_RCCEx_PeriphCLKConfig+0x2e4>)
 8002cc0:	685b      	ldr	r3, [r3, #4]
 8002cc2:	f023 4278 	bic.w	r2, r3, #4160749568	; 0xf8000000
 8002cc6:	687b      	ldr	r3, [r7, #4]
 8002cc8:	6a1b      	ldr	r3, [r3, #32]
 8002cca:	490b      	ldr	r1, [pc, #44]	; (8002cf8 <HAL_RCCEx_PeriphCLKConfig+0x2e4>)
 8002ccc:	4313      	orrs	r3, r2
 8002cce:	604b      	str	r3, [r1, #4]
  }

  /*------------------------------ CEC clock Configuration -------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 8002cd0:	687b      	ldr	r3, [r7, #4]
 8002cd2:	681b      	ldr	r3, [r3, #0]
 8002cd4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002cd8:	2b00      	cmp	r3, #0
 8002cda:	d008      	beq.n	8002cee <HAL_RCCEx_PeriphCLKConfig+0x2da>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));
    
    /* Configure the CEC clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 8002cdc:	4b06      	ldr	r3, [pc, #24]	; (8002cf8 <HAL_RCCEx_PeriphCLKConfig+0x2e4>)
 8002cde:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002ce0:	f023 0240 	bic.w	r2, r3, #64	; 0x40
 8002ce4:	687b      	ldr	r3, [r7, #4]
 8002ce6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002ce8:	4903      	ldr	r1, [pc, #12]	; (8002cf8 <HAL_RCCEx_PeriphCLKConfig+0x2e4>)
 8002cea:	4313      	orrs	r3, r2
 8002cec:	630b      	str	r3, [r1, #48]	; 0x30
    __HAL_RCC_TIM20_CONFIG(PeriphClkInit->Tim20ClockSelection);
  }
#endif /* STM32F303xE || STM32F398xx */  

  
  return HAL_OK;
 8002cee:	2300      	movs	r3, #0
}
 8002cf0:	4618      	mov	r0, r3
 8002cf2:	3748      	adds	r7, #72	; 0x48
 8002cf4:	46bd      	mov	sp, r7
 8002cf6:	bd80      	pop	{r7, pc}
 8002cf8:	40021000 	.word	0x40021000

08002cfc <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8002cfc:	b580      	push	{r7, lr}
 8002cfe:	b084      	sub	sp, #16
 8002d00:	af00      	add	r7, sp, #0
 8002d02:	6078      	str	r0, [r7, #4]
  uint32_t frxth;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8002d04:	687b      	ldr	r3, [r7, #4]
 8002d06:	2b00      	cmp	r3, #0
 8002d08:	d101      	bne.n	8002d0e <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8002d0a:	2301      	movs	r3, #1
 8002d0c:	e09d      	b.n	8002e4a <HAL_SPI_Init+0x14e>
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_NSSP(hspi->Init.NSSPMode));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8002d0e:	687b      	ldr	r3, [r7, #4]
 8002d10:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002d12:	2b00      	cmp	r3, #0
 8002d14:	d108      	bne.n	8002d28 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8002d16:	687b      	ldr	r3, [r7, #4]
 8002d18:	685b      	ldr	r3, [r3, #4]
 8002d1a:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8002d1e:	d009      	beq.n	8002d34 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8002d20:	687b      	ldr	r3, [r7, #4]
 8002d22:	2200      	movs	r2, #0
 8002d24:	61da      	str	r2, [r3, #28]
 8002d26:	e005      	b.n	8002d34 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8002d28:	687b      	ldr	r3, [r7, #4]
 8002d2a:	2200      	movs	r2, #0
 8002d2c:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8002d2e:	687b      	ldr	r3, [r7, #4]
 8002d30:	2200      	movs	r2, #0
 8002d32:	615a      	str	r2, [r3, #20]
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_LENGTH(hspi->Init.CRCLength));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8002d34:	687b      	ldr	r3, [r7, #4]
 8002d36:	2200      	movs	r2, #0
 8002d38:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8002d3a:	687b      	ldr	r3, [r7, #4]
 8002d3c:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 8002d40:	b2db      	uxtb	r3, r3
 8002d42:	2b00      	cmp	r3, #0
 8002d44:	d106      	bne.n	8002d54 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8002d46:	687b      	ldr	r3, [r7, #4]
 8002d48:	2200      	movs	r2, #0
 8002d4a:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8002d4e:	6878      	ldr	r0, [r7, #4]
 8002d50:	f7fd fd04 	bl	800075c <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8002d54:	687b      	ldr	r3, [r7, #4]
 8002d56:	2202      	movs	r2, #2
 8002d58:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8002d5c:	687b      	ldr	r3, [r7, #4]
 8002d5e:	681b      	ldr	r3, [r3, #0]
 8002d60:	681a      	ldr	r2, [r3, #0]
 8002d62:	687b      	ldr	r3, [r7, #4]
 8002d64:	681b      	ldr	r3, [r3, #0]
 8002d66:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8002d6a:	601a      	str	r2, [r3, #0]

  /* Align by default the rs fifo threshold on the data size */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8002d6c:	687b      	ldr	r3, [r7, #4]
 8002d6e:	68db      	ldr	r3, [r3, #12]
 8002d70:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8002d74:	d902      	bls.n	8002d7c <HAL_SPI_Init+0x80>
  {
    frxth = SPI_RXFIFO_THRESHOLD_HF;
 8002d76:	2300      	movs	r3, #0
 8002d78:	60fb      	str	r3, [r7, #12]
 8002d7a:	e002      	b.n	8002d82 <HAL_SPI_Init+0x86>
  }
  else
  {
    frxth = SPI_RXFIFO_THRESHOLD_QF;
 8002d7c:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8002d80:	60fb      	str	r3, [r7, #12]
  }

  /* CRC calculation is valid only for 16Bit and 8 Bit */
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
 8002d82:	687b      	ldr	r3, [r7, #4]
 8002d84:	68db      	ldr	r3, [r3, #12]
 8002d86:	f5b3 6f70 	cmp.w	r3, #3840	; 0xf00
 8002d8a:	d007      	beq.n	8002d9c <HAL_SPI_Init+0xa0>
 8002d8c:	687b      	ldr	r3, [r7, #4]
 8002d8e:	68db      	ldr	r3, [r3, #12]
 8002d90:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8002d94:	d002      	beq.n	8002d9c <HAL_SPI_Init+0xa0>
  {
    /* CRC must be disabled */
    hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8002d96:	687b      	ldr	r3, [r7, #4]
 8002d98:	2200      	movs	r2, #0
 8002d9a:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8002d9c:	687b      	ldr	r3, [r7, #4]
 8002d9e:	685b      	ldr	r3, [r3, #4]
 8002da0:	f403 7282 	and.w	r2, r3, #260	; 0x104
 8002da4:	687b      	ldr	r3, [r7, #4]
 8002da6:	689b      	ldr	r3, [r3, #8]
 8002da8:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 8002dac:	431a      	orrs	r2, r3
 8002dae:	687b      	ldr	r3, [r7, #4]
 8002db0:	691b      	ldr	r3, [r3, #16]
 8002db2:	f003 0302 	and.w	r3, r3, #2
 8002db6:	431a      	orrs	r2, r3
 8002db8:	687b      	ldr	r3, [r7, #4]
 8002dba:	695b      	ldr	r3, [r3, #20]
 8002dbc:	f003 0301 	and.w	r3, r3, #1
 8002dc0:	431a      	orrs	r2, r3
 8002dc2:	687b      	ldr	r3, [r7, #4]
 8002dc4:	699b      	ldr	r3, [r3, #24]
 8002dc6:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8002dca:	431a      	orrs	r2, r3
 8002dcc:	687b      	ldr	r3, [r7, #4]
 8002dce:	69db      	ldr	r3, [r3, #28]
 8002dd0:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8002dd4:	431a      	orrs	r2, r3
 8002dd6:	687b      	ldr	r3, [r7, #4]
 8002dd8:	6a1b      	ldr	r3, [r3, #32]
 8002dda:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002dde:	ea42 0103 	orr.w	r1, r2, r3
 8002de2:	687b      	ldr	r3, [r7, #4]
 8002de4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002de6:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 8002dea:	687b      	ldr	r3, [r7, #4]
 8002dec:	681b      	ldr	r3, [r3, #0]
 8002dee:	430a      	orrs	r2, r1
 8002df0:	601a      	str	r2, [r3, #0]
    }
  }
#endif /* USE_SPI_CRC */

  /* Configure : NSS management, TI Mode, NSS Pulse, Data size and Rx Fifo threshold */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) |
 8002df2:	687b      	ldr	r3, [r7, #4]
 8002df4:	699b      	ldr	r3, [r3, #24]
 8002df6:	0c1b      	lsrs	r3, r3, #16
 8002df8:	f003 0204 	and.w	r2, r3, #4
 8002dfc:	687b      	ldr	r3, [r7, #4]
 8002dfe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002e00:	f003 0310 	and.w	r3, r3, #16
 8002e04:	431a      	orrs	r2, r3
 8002e06:	687b      	ldr	r3, [r7, #4]
 8002e08:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002e0a:	f003 0308 	and.w	r3, r3, #8
 8002e0e:	431a      	orrs	r2, r3
 8002e10:	687b      	ldr	r3, [r7, #4]
 8002e12:	68db      	ldr	r3, [r3, #12]
 8002e14:	f403 6370 	and.w	r3, r3, #3840	; 0xf00
 8002e18:	ea42 0103 	orr.w	r1, r2, r3
 8002e1c:	68fb      	ldr	r3, [r7, #12]
 8002e1e:	f403 5280 	and.w	r2, r3, #4096	; 0x1000
 8002e22:	687b      	ldr	r3, [r7, #4]
 8002e24:	681b      	ldr	r3, [r3, #0]
 8002e26:	430a      	orrs	r2, r1
 8002e28:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8002e2a:	687b      	ldr	r3, [r7, #4]
 8002e2c:	681b      	ldr	r3, [r3, #0]
 8002e2e:	69da      	ldr	r2, [r3, #28]
 8002e30:	687b      	ldr	r3, [r7, #4]
 8002e32:	681b      	ldr	r3, [r3, #0]
 8002e34:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8002e38:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8002e3a:	687b      	ldr	r3, [r7, #4]
 8002e3c:	2200      	movs	r2, #0
 8002e3e:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->State     = HAL_SPI_STATE_READY;
 8002e40:	687b      	ldr	r3, [r7, #4]
 8002e42:	2201      	movs	r2, #1
 8002e44:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  return HAL_OK;
 8002e48:	2300      	movs	r3, #0
}
 8002e4a:	4618      	mov	r0, r3
 8002e4c:	3710      	adds	r7, #16
 8002e4e:	46bd      	mov	sp, r7
 8002e50:	bd80      	pop	{r7, pc}

08002e52 <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002e52:	b580      	push	{r7, lr}
 8002e54:	b088      	sub	sp, #32
 8002e56:	af00      	add	r7, sp, #0
 8002e58:	60f8      	str	r0, [r7, #12]
 8002e5a:	60b9      	str	r1, [r7, #8]
 8002e5c:	603b      	str	r3, [r7, #0]
 8002e5e:	4613      	mov	r3, r2
 8002e60:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 8002e62:	2300      	movs	r3, #0
 8002e64:	77fb      	strb	r3, [r7, #31]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8002e66:	68fb      	ldr	r3, [r7, #12]
 8002e68:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 8002e6c:	2b01      	cmp	r3, #1
 8002e6e:	d101      	bne.n	8002e74 <HAL_SPI_Transmit+0x22>
 8002e70:	2302      	movs	r3, #2
 8002e72:	e158      	b.n	8003126 <HAL_SPI_Transmit+0x2d4>
 8002e74:	68fb      	ldr	r3, [r7, #12]
 8002e76:	2201      	movs	r2, #1
 8002e78:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8002e7c:	f7fd ff1c 	bl	8000cb8 <HAL_GetTick>
 8002e80:	61b8      	str	r0, [r7, #24]
  initial_TxXferCount = Size;
 8002e82:	88fb      	ldrh	r3, [r7, #6]
 8002e84:	82fb      	strh	r3, [r7, #22]

  if (hspi->State != HAL_SPI_STATE_READY)
 8002e86:	68fb      	ldr	r3, [r7, #12]
 8002e88:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 8002e8c:	b2db      	uxtb	r3, r3
 8002e8e:	2b01      	cmp	r3, #1
 8002e90:	d002      	beq.n	8002e98 <HAL_SPI_Transmit+0x46>
  {
    errorcode = HAL_BUSY;
 8002e92:	2302      	movs	r3, #2
 8002e94:	77fb      	strb	r3, [r7, #31]
    goto error;
 8002e96:	e13d      	b.n	8003114 <HAL_SPI_Transmit+0x2c2>
  }

  if ((pData == NULL) || (Size == 0U))
 8002e98:	68bb      	ldr	r3, [r7, #8]
 8002e9a:	2b00      	cmp	r3, #0
 8002e9c:	d002      	beq.n	8002ea4 <HAL_SPI_Transmit+0x52>
 8002e9e:	88fb      	ldrh	r3, [r7, #6]
 8002ea0:	2b00      	cmp	r3, #0
 8002ea2:	d102      	bne.n	8002eaa <HAL_SPI_Transmit+0x58>
  {
    errorcode = HAL_ERROR;
 8002ea4:	2301      	movs	r3, #1
 8002ea6:	77fb      	strb	r3, [r7, #31]
    goto error;
 8002ea8:	e134      	b.n	8003114 <HAL_SPI_Transmit+0x2c2>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 8002eaa:	68fb      	ldr	r3, [r7, #12]
 8002eac:	2203      	movs	r2, #3
 8002eae:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8002eb2:	68fb      	ldr	r3, [r7, #12]
 8002eb4:	2200      	movs	r2, #0
 8002eb6:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 8002eb8:	68fb      	ldr	r3, [r7, #12]
 8002eba:	68ba      	ldr	r2, [r7, #8]
 8002ebc:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->TxXferSize  = Size;
 8002ebe:	68fb      	ldr	r3, [r7, #12]
 8002ec0:	88fa      	ldrh	r2, [r7, #6]
 8002ec2:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->TxXferCount = Size;
 8002ec4:	68fb      	ldr	r3, [r7, #12]
 8002ec6:	88fa      	ldrh	r2, [r7, #6]
 8002ec8:	87da      	strh	r2, [r3, #62]	; 0x3e

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 8002eca:	68fb      	ldr	r3, [r7, #12]
 8002ecc:	2200      	movs	r2, #0
 8002ece:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->RxXferSize  = 0U;
 8002ed0:	68fb      	ldr	r3, [r7, #12]
 8002ed2:	2200      	movs	r2, #0
 8002ed4:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  hspi->RxXferCount = 0U;
 8002ed8:	68fb      	ldr	r3, [r7, #12]
 8002eda:	2200      	movs	r2, #0
 8002edc:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
  hspi->TxISR       = NULL;
 8002ee0:	68fb      	ldr	r3, [r7, #12]
 8002ee2:	2200      	movs	r2, #0
 8002ee4:	651a      	str	r2, [r3, #80]	; 0x50
  hspi->RxISR       = NULL;
 8002ee6:	68fb      	ldr	r3, [r7, #12]
 8002ee8:	2200      	movs	r2, #0
 8002eea:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8002eec:	68fb      	ldr	r3, [r7, #12]
 8002eee:	689b      	ldr	r3, [r3, #8]
 8002ef0:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8002ef4:	d10f      	bne.n	8002f16 <HAL_SPI_Transmit+0xc4>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8002ef6:	68fb      	ldr	r3, [r7, #12]
 8002ef8:	681b      	ldr	r3, [r3, #0]
 8002efa:	681a      	ldr	r2, [r3, #0]
 8002efc:	68fb      	ldr	r3, [r7, #12]
 8002efe:	681b      	ldr	r3, [r3, #0]
 8002f00:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8002f04:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 8002f06:	68fb      	ldr	r3, [r7, #12]
 8002f08:	681b      	ldr	r3, [r3, #0]
 8002f0a:	681a      	ldr	r2, [r3, #0]
 8002f0c:	68fb      	ldr	r3, [r7, #12]
 8002f0e:	681b      	ldr	r3, [r3, #0]
 8002f10:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8002f14:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8002f16:	68fb      	ldr	r3, [r7, #12]
 8002f18:	681b      	ldr	r3, [r3, #0]
 8002f1a:	681b      	ldr	r3, [r3, #0]
 8002f1c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002f20:	2b40      	cmp	r3, #64	; 0x40
 8002f22:	d007      	beq.n	8002f34 <HAL_SPI_Transmit+0xe2>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8002f24:	68fb      	ldr	r3, [r7, #12]
 8002f26:	681b      	ldr	r3, [r3, #0]
 8002f28:	681a      	ldr	r2, [r3, #0]
 8002f2a:	68fb      	ldr	r3, [r7, #12]
 8002f2c:	681b      	ldr	r3, [r3, #0]
 8002f2e:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8002f32:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8002f34:	68fb      	ldr	r3, [r7, #12]
 8002f36:	68db      	ldr	r3, [r3, #12]
 8002f38:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8002f3c:	d94b      	bls.n	8002fd6 <HAL_SPI_Transmit+0x184>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8002f3e:	68fb      	ldr	r3, [r7, #12]
 8002f40:	685b      	ldr	r3, [r3, #4]
 8002f42:	2b00      	cmp	r3, #0
 8002f44:	d002      	beq.n	8002f4c <HAL_SPI_Transmit+0xfa>
 8002f46:	8afb      	ldrh	r3, [r7, #22]
 8002f48:	2b01      	cmp	r3, #1
 8002f4a:	d13e      	bne.n	8002fca <HAL_SPI_Transmit+0x178>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8002f4c:	68fb      	ldr	r3, [r7, #12]
 8002f4e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002f50:	881a      	ldrh	r2, [r3, #0]
 8002f52:	68fb      	ldr	r3, [r7, #12]
 8002f54:	681b      	ldr	r3, [r3, #0]
 8002f56:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8002f58:	68fb      	ldr	r3, [r7, #12]
 8002f5a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002f5c:	1c9a      	adds	r2, r3, #2
 8002f5e:	68fb      	ldr	r3, [r7, #12]
 8002f60:	639a      	str	r2, [r3, #56]	; 0x38
      hspi->TxXferCount--;
 8002f62:	68fb      	ldr	r3, [r7, #12]
 8002f64:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8002f66:	b29b      	uxth	r3, r3
 8002f68:	3b01      	subs	r3, #1
 8002f6a:	b29a      	uxth	r2, r3
 8002f6c:	68fb      	ldr	r3, [r7, #12]
 8002f6e:	87da      	strh	r2, [r3, #62]	; 0x3e
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 8002f70:	e02b      	b.n	8002fca <HAL_SPI_Transmit+0x178>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8002f72:	68fb      	ldr	r3, [r7, #12]
 8002f74:	681b      	ldr	r3, [r3, #0]
 8002f76:	689b      	ldr	r3, [r3, #8]
 8002f78:	f003 0302 	and.w	r3, r3, #2
 8002f7c:	2b02      	cmp	r3, #2
 8002f7e:	d112      	bne.n	8002fa6 <HAL_SPI_Transmit+0x154>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8002f80:	68fb      	ldr	r3, [r7, #12]
 8002f82:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002f84:	881a      	ldrh	r2, [r3, #0]
 8002f86:	68fb      	ldr	r3, [r7, #12]
 8002f88:	681b      	ldr	r3, [r3, #0]
 8002f8a:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8002f8c:	68fb      	ldr	r3, [r7, #12]
 8002f8e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002f90:	1c9a      	adds	r2, r3, #2
 8002f92:	68fb      	ldr	r3, [r7, #12]
 8002f94:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 8002f96:	68fb      	ldr	r3, [r7, #12]
 8002f98:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8002f9a:	b29b      	uxth	r3, r3
 8002f9c:	3b01      	subs	r3, #1
 8002f9e:	b29a      	uxth	r2, r3
 8002fa0:	68fb      	ldr	r3, [r7, #12]
 8002fa2:	87da      	strh	r2, [r3, #62]	; 0x3e
 8002fa4:	e011      	b.n	8002fca <HAL_SPI_Transmit+0x178>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8002fa6:	f7fd fe87 	bl	8000cb8 <HAL_GetTick>
 8002faa:	4602      	mov	r2, r0
 8002fac:	69bb      	ldr	r3, [r7, #24]
 8002fae:	1ad3      	subs	r3, r2, r3
 8002fb0:	683a      	ldr	r2, [r7, #0]
 8002fb2:	429a      	cmp	r2, r3
 8002fb4:	d803      	bhi.n	8002fbe <HAL_SPI_Transmit+0x16c>
 8002fb6:	683b      	ldr	r3, [r7, #0]
 8002fb8:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002fbc:	d102      	bne.n	8002fc4 <HAL_SPI_Transmit+0x172>
 8002fbe:	683b      	ldr	r3, [r7, #0]
 8002fc0:	2b00      	cmp	r3, #0
 8002fc2:	d102      	bne.n	8002fca <HAL_SPI_Transmit+0x178>
        {
          errorcode = HAL_TIMEOUT;
 8002fc4:	2303      	movs	r3, #3
 8002fc6:	77fb      	strb	r3, [r7, #31]
          goto error;
 8002fc8:	e0a4      	b.n	8003114 <HAL_SPI_Transmit+0x2c2>
    while (hspi->TxXferCount > 0U)
 8002fca:	68fb      	ldr	r3, [r7, #12]
 8002fcc:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8002fce:	b29b      	uxth	r3, r3
 8002fd0:	2b00      	cmp	r3, #0
 8002fd2:	d1ce      	bne.n	8002f72 <HAL_SPI_Transmit+0x120>
 8002fd4:	e07c      	b.n	80030d0 <HAL_SPI_Transmit+0x27e>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8002fd6:	68fb      	ldr	r3, [r7, #12]
 8002fd8:	685b      	ldr	r3, [r3, #4]
 8002fda:	2b00      	cmp	r3, #0
 8002fdc:	d002      	beq.n	8002fe4 <HAL_SPI_Transmit+0x192>
 8002fde:	8afb      	ldrh	r3, [r7, #22]
 8002fe0:	2b01      	cmp	r3, #1
 8002fe2:	d170      	bne.n	80030c6 <HAL_SPI_Transmit+0x274>
    {
      if (hspi->TxXferCount > 1U)
 8002fe4:	68fb      	ldr	r3, [r7, #12]
 8002fe6:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8002fe8:	b29b      	uxth	r3, r3
 8002fea:	2b01      	cmp	r3, #1
 8002fec:	d912      	bls.n	8003014 <HAL_SPI_Transmit+0x1c2>
      {
        /* write on the data register in packing mode */
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8002fee:	68fb      	ldr	r3, [r7, #12]
 8002ff0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002ff2:	881a      	ldrh	r2, [r3, #0]
 8002ff4:	68fb      	ldr	r3, [r7, #12]
 8002ff6:	681b      	ldr	r3, [r3, #0]
 8002ff8:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8002ffa:	68fb      	ldr	r3, [r7, #12]
 8002ffc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002ffe:	1c9a      	adds	r2, r3, #2
 8003000:	68fb      	ldr	r3, [r7, #12]
 8003002:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount -= 2U;
 8003004:	68fb      	ldr	r3, [r7, #12]
 8003006:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003008:	b29b      	uxth	r3, r3
 800300a:	3b02      	subs	r3, #2
 800300c:	b29a      	uxth	r2, r3
 800300e:	68fb      	ldr	r3, [r7, #12]
 8003010:	87da      	strh	r2, [r3, #62]	; 0x3e
 8003012:	e058      	b.n	80030c6 <HAL_SPI_Transmit+0x274>
      }
      else
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8003014:	68fb      	ldr	r3, [r7, #12]
 8003016:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8003018:	68fb      	ldr	r3, [r7, #12]
 800301a:	681b      	ldr	r3, [r3, #0]
 800301c:	330c      	adds	r3, #12
 800301e:	7812      	ldrb	r2, [r2, #0]
 8003020:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr ++;
 8003022:	68fb      	ldr	r3, [r7, #12]
 8003024:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003026:	1c5a      	adds	r2, r3, #1
 8003028:	68fb      	ldr	r3, [r7, #12]
 800302a:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 800302c:	68fb      	ldr	r3, [r7, #12]
 800302e:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003030:	b29b      	uxth	r3, r3
 8003032:	3b01      	subs	r3, #1
 8003034:	b29a      	uxth	r2, r3
 8003036:	68fb      	ldr	r3, [r7, #12]
 8003038:	87da      	strh	r2, [r3, #62]	; 0x3e
      }
    }
    while (hspi->TxXferCount > 0U)
 800303a:	e044      	b.n	80030c6 <HAL_SPI_Transmit+0x274>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 800303c:	68fb      	ldr	r3, [r7, #12]
 800303e:	681b      	ldr	r3, [r3, #0]
 8003040:	689b      	ldr	r3, [r3, #8]
 8003042:	f003 0302 	and.w	r3, r3, #2
 8003046:	2b02      	cmp	r3, #2
 8003048:	d12b      	bne.n	80030a2 <HAL_SPI_Transmit+0x250>
      {
        if (hspi->TxXferCount > 1U)
 800304a:	68fb      	ldr	r3, [r7, #12]
 800304c:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800304e:	b29b      	uxth	r3, r3
 8003050:	2b01      	cmp	r3, #1
 8003052:	d912      	bls.n	800307a <HAL_SPI_Transmit+0x228>
        {
          /* write on the data register in packing mode */
          hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8003054:	68fb      	ldr	r3, [r7, #12]
 8003056:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003058:	881a      	ldrh	r2, [r3, #0]
 800305a:	68fb      	ldr	r3, [r7, #12]
 800305c:	681b      	ldr	r3, [r3, #0]
 800305e:	60da      	str	r2, [r3, #12]
          hspi->pTxBuffPtr += sizeof(uint16_t);
 8003060:	68fb      	ldr	r3, [r7, #12]
 8003062:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003064:	1c9a      	adds	r2, r3, #2
 8003066:	68fb      	ldr	r3, [r7, #12]
 8003068:	639a      	str	r2, [r3, #56]	; 0x38
          hspi->TxXferCount -= 2U;
 800306a:	68fb      	ldr	r3, [r7, #12]
 800306c:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800306e:	b29b      	uxth	r3, r3
 8003070:	3b02      	subs	r3, #2
 8003072:	b29a      	uxth	r2, r3
 8003074:	68fb      	ldr	r3, [r7, #12]
 8003076:	87da      	strh	r2, [r3, #62]	; 0x3e
 8003078:	e025      	b.n	80030c6 <HAL_SPI_Transmit+0x274>
        }
        else
        {
          *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 800307a:	68fb      	ldr	r3, [r7, #12]
 800307c:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800307e:	68fb      	ldr	r3, [r7, #12]
 8003080:	681b      	ldr	r3, [r3, #0]
 8003082:	330c      	adds	r3, #12
 8003084:	7812      	ldrb	r2, [r2, #0]
 8003086:	701a      	strb	r2, [r3, #0]
          hspi->pTxBuffPtr++;
 8003088:	68fb      	ldr	r3, [r7, #12]
 800308a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800308c:	1c5a      	adds	r2, r3, #1
 800308e:	68fb      	ldr	r3, [r7, #12]
 8003090:	639a      	str	r2, [r3, #56]	; 0x38
          hspi->TxXferCount--;
 8003092:	68fb      	ldr	r3, [r7, #12]
 8003094:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003096:	b29b      	uxth	r3, r3
 8003098:	3b01      	subs	r3, #1
 800309a:	b29a      	uxth	r2, r3
 800309c:	68fb      	ldr	r3, [r7, #12]
 800309e:	87da      	strh	r2, [r3, #62]	; 0x3e
 80030a0:	e011      	b.n	80030c6 <HAL_SPI_Transmit+0x274>
        }
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 80030a2:	f7fd fe09 	bl	8000cb8 <HAL_GetTick>
 80030a6:	4602      	mov	r2, r0
 80030a8:	69bb      	ldr	r3, [r7, #24]
 80030aa:	1ad3      	subs	r3, r2, r3
 80030ac:	683a      	ldr	r2, [r7, #0]
 80030ae:	429a      	cmp	r2, r3
 80030b0:	d803      	bhi.n	80030ba <HAL_SPI_Transmit+0x268>
 80030b2:	683b      	ldr	r3, [r7, #0]
 80030b4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80030b8:	d102      	bne.n	80030c0 <HAL_SPI_Transmit+0x26e>
 80030ba:	683b      	ldr	r3, [r7, #0]
 80030bc:	2b00      	cmp	r3, #0
 80030be:	d102      	bne.n	80030c6 <HAL_SPI_Transmit+0x274>
        {
          errorcode = HAL_TIMEOUT;
 80030c0:	2303      	movs	r3, #3
 80030c2:	77fb      	strb	r3, [r7, #31]
          goto error;
 80030c4:	e026      	b.n	8003114 <HAL_SPI_Transmit+0x2c2>
    while (hspi->TxXferCount > 0U)
 80030c6:	68fb      	ldr	r3, [r7, #12]
 80030c8:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80030ca:	b29b      	uxth	r3, r3
 80030cc:	2b00      	cmp	r3, #0
 80030ce:	d1b5      	bne.n	800303c <HAL_SPI_Transmit+0x1ea>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 80030d0:	69ba      	ldr	r2, [r7, #24]
 80030d2:	6839      	ldr	r1, [r7, #0]
 80030d4:	68f8      	ldr	r0, [r7, #12]
 80030d6:	f000 fb5b 	bl	8003790 <SPI_EndRxTxTransaction>
 80030da:	4603      	mov	r3, r0
 80030dc:	2b00      	cmp	r3, #0
 80030de:	d002      	beq.n	80030e6 <HAL_SPI_Transmit+0x294>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 80030e0:	68fb      	ldr	r3, [r7, #12]
 80030e2:	2220      	movs	r2, #32
 80030e4:	661a      	str	r2, [r3, #96]	; 0x60
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 80030e6:	68fb      	ldr	r3, [r7, #12]
 80030e8:	689b      	ldr	r3, [r3, #8]
 80030ea:	2b00      	cmp	r3, #0
 80030ec:	d10a      	bne.n	8003104 <HAL_SPI_Transmit+0x2b2>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 80030ee:	2300      	movs	r3, #0
 80030f0:	613b      	str	r3, [r7, #16]
 80030f2:	68fb      	ldr	r3, [r7, #12]
 80030f4:	681b      	ldr	r3, [r3, #0]
 80030f6:	68db      	ldr	r3, [r3, #12]
 80030f8:	613b      	str	r3, [r7, #16]
 80030fa:	68fb      	ldr	r3, [r7, #12]
 80030fc:	681b      	ldr	r3, [r3, #0]
 80030fe:	689b      	ldr	r3, [r3, #8]
 8003100:	613b      	str	r3, [r7, #16]
 8003102:	693b      	ldr	r3, [r7, #16]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8003104:	68fb      	ldr	r3, [r7, #12]
 8003106:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003108:	2b00      	cmp	r3, #0
 800310a:	d002      	beq.n	8003112 <HAL_SPI_Transmit+0x2c0>
  {
    errorcode = HAL_ERROR;
 800310c:	2301      	movs	r3, #1
 800310e:	77fb      	strb	r3, [r7, #31]
 8003110:	e000      	b.n	8003114 <HAL_SPI_Transmit+0x2c2>
  }

error:
 8003112:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 8003114:	68fb      	ldr	r3, [r7, #12]
 8003116:	2201      	movs	r2, #1
 8003118:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 800311c:	68fb      	ldr	r3, [r7, #12]
 800311e:	2200      	movs	r2, #0
 8003120:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c
  return errorcode;
 8003124:	7ffb      	ldrb	r3, [r7, #31]
}
 8003126:	4618      	mov	r0, r3
 8003128:	3720      	adds	r7, #32
 800312a:	46bd      	mov	sp, r7
 800312c:	bd80      	pop	{r7, pc}

0800312e <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size,
                                          uint32_t Timeout)
{
 800312e:	b580      	push	{r7, lr}
 8003130:	b08a      	sub	sp, #40	; 0x28
 8003132:	af00      	add	r7, sp, #0
 8003134:	60f8      	str	r0, [r7, #12]
 8003136:	60b9      	str	r1, [r7, #8]
 8003138:	607a      	str	r2, [r7, #4]
 800313a:	807b      	strh	r3, [r7, #2]
  __IO uint8_t  * ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
#endif /* USE_SPI_CRC */

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 800313c:	2301      	movs	r3, #1
 800313e:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_StatusTypeDef    errorcode = HAL_OK;
 8003140:	2300      	movs	r3, #0
 8003142:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8003146:	68fb      	ldr	r3, [r7, #12]
 8003148:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 800314c:	2b01      	cmp	r3, #1
 800314e:	d101      	bne.n	8003154 <HAL_SPI_TransmitReceive+0x26>
 8003150:	2302      	movs	r3, #2
 8003152:	e1fb      	b.n	800354c <HAL_SPI_TransmitReceive+0x41e>
 8003154:	68fb      	ldr	r3, [r7, #12]
 8003156:	2201      	movs	r2, #1
 8003158:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 800315c:	f7fd fdac 	bl	8000cb8 <HAL_GetTick>
 8003160:	61f8      	str	r0, [r7, #28]

  /* Init temporary variables */
  tmp_state           = hspi->State;
 8003162:	68fb      	ldr	r3, [r7, #12]
 8003164:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 8003168:	76fb      	strb	r3, [r7, #27]
  tmp_mode            = hspi->Init.Mode;
 800316a:	68fb      	ldr	r3, [r7, #12]
 800316c:	685b      	ldr	r3, [r3, #4]
 800316e:	617b      	str	r3, [r7, #20]
  initial_TxXferCount = Size;
 8003170:	887b      	ldrh	r3, [r7, #2]
 8003172:	827b      	strh	r3, [r7, #18]
  initial_RxXferCount = Size;
 8003174:	887b      	ldrh	r3, [r7, #2]
 8003176:	823b      	strh	r3, [r7, #16]
#if (USE_SPI_CRC != 0U)
  spi_cr1             = READ_REG(hspi->Instance->CR1);
  spi_cr2             = READ_REG(hspi->Instance->CR2);
#endif /* USE_SPI_CRC */

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 8003178:	7efb      	ldrb	r3, [r7, #27]
 800317a:	2b01      	cmp	r3, #1
 800317c:	d00e      	beq.n	800319c <HAL_SPI_TransmitReceive+0x6e>
 800317e:	697b      	ldr	r3, [r7, #20]
 8003180:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8003184:	d106      	bne.n	8003194 <HAL_SPI_TransmitReceive+0x66>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 8003186:	68fb      	ldr	r3, [r7, #12]
 8003188:	689b      	ldr	r3, [r3, #8]
 800318a:	2b00      	cmp	r3, #0
 800318c:	d102      	bne.n	8003194 <HAL_SPI_TransmitReceive+0x66>
 800318e:	7efb      	ldrb	r3, [r7, #27]
 8003190:	2b04      	cmp	r3, #4
 8003192:	d003      	beq.n	800319c <HAL_SPI_TransmitReceive+0x6e>
  {
    errorcode = HAL_BUSY;
 8003194:	2302      	movs	r3, #2
 8003196:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
    goto error;
 800319a:	e1cd      	b.n	8003538 <HAL_SPI_TransmitReceive+0x40a>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 800319c:	68bb      	ldr	r3, [r7, #8]
 800319e:	2b00      	cmp	r3, #0
 80031a0:	d005      	beq.n	80031ae <HAL_SPI_TransmitReceive+0x80>
 80031a2:	687b      	ldr	r3, [r7, #4]
 80031a4:	2b00      	cmp	r3, #0
 80031a6:	d002      	beq.n	80031ae <HAL_SPI_TransmitReceive+0x80>
 80031a8:	887b      	ldrh	r3, [r7, #2]
 80031aa:	2b00      	cmp	r3, #0
 80031ac:	d103      	bne.n	80031b6 <HAL_SPI_TransmitReceive+0x88>
  {
    errorcode = HAL_ERROR;
 80031ae:	2301      	movs	r3, #1
 80031b0:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
    goto error;
 80031b4:	e1c0      	b.n	8003538 <HAL_SPI_TransmitReceive+0x40a>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 80031b6:	68fb      	ldr	r3, [r7, #12]
 80031b8:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 80031bc:	b2db      	uxtb	r3, r3
 80031be:	2b04      	cmp	r3, #4
 80031c0:	d003      	beq.n	80031ca <HAL_SPI_TransmitReceive+0x9c>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 80031c2:	68fb      	ldr	r3, [r7, #12]
 80031c4:	2205      	movs	r2, #5
 80031c6:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 80031ca:	68fb      	ldr	r3, [r7, #12]
 80031cc:	2200      	movs	r2, #0
 80031ce:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 80031d0:	68fb      	ldr	r3, [r7, #12]
 80031d2:	687a      	ldr	r2, [r7, #4]
 80031d4:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->RxXferCount = Size;
 80031d6:	68fb      	ldr	r3, [r7, #12]
 80031d8:	887a      	ldrh	r2, [r7, #2]
 80031da:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
  hspi->RxXferSize  = Size;
 80031de:	68fb      	ldr	r3, [r7, #12]
 80031e0:	887a      	ldrh	r2, [r7, #2]
 80031e2:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 80031e6:	68fb      	ldr	r3, [r7, #12]
 80031e8:	68ba      	ldr	r2, [r7, #8]
 80031ea:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->TxXferCount = Size;
 80031ec:	68fb      	ldr	r3, [r7, #12]
 80031ee:	887a      	ldrh	r2, [r7, #2]
 80031f0:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxXferSize  = Size;
 80031f2:	68fb      	ldr	r3, [r7, #12]
 80031f4:	887a      	ldrh	r2, [r7, #2]
 80031f6:	879a      	strh	r2, [r3, #60]	; 0x3c

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 80031f8:	68fb      	ldr	r3, [r7, #12]
 80031fa:	2200      	movs	r2, #0
 80031fc:	64da      	str	r2, [r3, #76]	; 0x4c
  hspi->TxISR       = NULL;
 80031fe:	68fb      	ldr	r3, [r7, #12]
 8003200:	2200      	movs	r2, #0
 8003202:	651a      	str	r2, [r3, #80]	; 0x50
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Set the Rx Fifo threshold */
  if ((hspi->Init.DataSize > SPI_DATASIZE_8BIT) || (initial_RxXferCount > 1U))
 8003204:	68fb      	ldr	r3, [r7, #12]
 8003206:	68db      	ldr	r3, [r3, #12]
 8003208:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 800320c:	d802      	bhi.n	8003214 <HAL_SPI_TransmitReceive+0xe6>
 800320e:	8a3b      	ldrh	r3, [r7, #16]
 8003210:	2b01      	cmp	r3, #1
 8003212:	d908      	bls.n	8003226 <HAL_SPI_TransmitReceive+0xf8>
  {
    /* Set fiforxthreshold according the reception data length: 16bit */
    CLEAR_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8003214:	68fb      	ldr	r3, [r7, #12]
 8003216:	681b      	ldr	r3, [r3, #0]
 8003218:	685a      	ldr	r2, [r3, #4]
 800321a:	68fb      	ldr	r3, [r7, #12]
 800321c:	681b      	ldr	r3, [r3, #0]
 800321e:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8003222:	605a      	str	r2, [r3, #4]
 8003224:	e007      	b.n	8003236 <HAL_SPI_TransmitReceive+0x108>
  }
  else
  {
    /* Set fiforxthreshold according the reception data length: 8bit */
    SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8003226:	68fb      	ldr	r3, [r7, #12]
 8003228:	681b      	ldr	r3, [r3, #0]
 800322a:	685a      	ldr	r2, [r3, #4]
 800322c:	68fb      	ldr	r3, [r7, #12]
 800322e:	681b      	ldr	r3, [r3, #0]
 8003230:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8003234:	605a      	str	r2, [r3, #4]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8003236:	68fb      	ldr	r3, [r7, #12]
 8003238:	681b      	ldr	r3, [r3, #0]
 800323a:	681b      	ldr	r3, [r3, #0]
 800323c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003240:	2b40      	cmp	r3, #64	; 0x40
 8003242:	d007      	beq.n	8003254 <HAL_SPI_TransmitReceive+0x126>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8003244:	68fb      	ldr	r3, [r7, #12]
 8003246:	681b      	ldr	r3, [r3, #0]
 8003248:	681a      	ldr	r2, [r3, #0]
 800324a:	68fb      	ldr	r3, [r7, #12]
 800324c:	681b      	ldr	r3, [r3, #0]
 800324e:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8003252:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8003254:	68fb      	ldr	r3, [r7, #12]
 8003256:	68db      	ldr	r3, [r3, #12]
 8003258:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 800325c:	d97c      	bls.n	8003358 <HAL_SPI_TransmitReceive+0x22a>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800325e:	68fb      	ldr	r3, [r7, #12]
 8003260:	685b      	ldr	r3, [r3, #4]
 8003262:	2b00      	cmp	r3, #0
 8003264:	d002      	beq.n	800326c <HAL_SPI_TransmitReceive+0x13e>
 8003266:	8a7b      	ldrh	r3, [r7, #18]
 8003268:	2b01      	cmp	r3, #1
 800326a:	d169      	bne.n	8003340 <HAL_SPI_TransmitReceive+0x212>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800326c:	68fb      	ldr	r3, [r7, #12]
 800326e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003270:	881a      	ldrh	r2, [r3, #0]
 8003272:	68fb      	ldr	r3, [r7, #12]
 8003274:	681b      	ldr	r3, [r3, #0]
 8003276:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8003278:	68fb      	ldr	r3, [r7, #12]
 800327a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800327c:	1c9a      	adds	r2, r3, #2
 800327e:	68fb      	ldr	r3, [r7, #12]
 8003280:	639a      	str	r2, [r3, #56]	; 0x38
      hspi->TxXferCount--;
 8003282:	68fb      	ldr	r3, [r7, #12]
 8003284:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003286:	b29b      	uxth	r3, r3
 8003288:	3b01      	subs	r3, #1
 800328a:	b29a      	uxth	r2, r3
 800328c:	68fb      	ldr	r3, [r7, #12]
 800328e:	87da      	strh	r2, [r3, #62]	; 0x3e
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8003290:	e056      	b.n	8003340 <HAL_SPI_TransmitReceive+0x212>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8003292:	68fb      	ldr	r3, [r7, #12]
 8003294:	681b      	ldr	r3, [r3, #0]
 8003296:	689b      	ldr	r3, [r3, #8]
 8003298:	f003 0302 	and.w	r3, r3, #2
 800329c:	2b02      	cmp	r3, #2
 800329e:	d11b      	bne.n	80032d8 <HAL_SPI_TransmitReceive+0x1aa>
 80032a0:	68fb      	ldr	r3, [r7, #12]
 80032a2:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80032a4:	b29b      	uxth	r3, r3
 80032a6:	2b00      	cmp	r3, #0
 80032a8:	d016      	beq.n	80032d8 <HAL_SPI_TransmitReceive+0x1aa>
 80032aa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80032ac:	2b01      	cmp	r3, #1
 80032ae:	d113      	bne.n	80032d8 <HAL_SPI_TransmitReceive+0x1aa>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80032b0:	68fb      	ldr	r3, [r7, #12]
 80032b2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80032b4:	881a      	ldrh	r2, [r3, #0]
 80032b6:	68fb      	ldr	r3, [r7, #12]
 80032b8:	681b      	ldr	r3, [r3, #0]
 80032ba:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 80032bc:	68fb      	ldr	r3, [r7, #12]
 80032be:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80032c0:	1c9a      	adds	r2, r3, #2
 80032c2:	68fb      	ldr	r3, [r7, #12]
 80032c4:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 80032c6:	68fb      	ldr	r3, [r7, #12]
 80032c8:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80032ca:	b29b      	uxth	r3, r3
 80032cc:	3b01      	subs	r3, #1
 80032ce:	b29a      	uxth	r2, r3
 80032d0:	68fb      	ldr	r3, [r7, #12]
 80032d2:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 80032d4:	2300      	movs	r3, #0
 80032d6:	627b      	str	r3, [r7, #36]	; 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 80032d8:	68fb      	ldr	r3, [r7, #12]
 80032da:	681b      	ldr	r3, [r3, #0]
 80032dc:	689b      	ldr	r3, [r3, #8]
 80032de:	f003 0301 	and.w	r3, r3, #1
 80032e2:	2b01      	cmp	r3, #1
 80032e4:	d11c      	bne.n	8003320 <HAL_SPI_TransmitReceive+0x1f2>
 80032e6:	68fb      	ldr	r3, [r7, #12]
 80032e8:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 80032ec:	b29b      	uxth	r3, r3
 80032ee:	2b00      	cmp	r3, #0
 80032f0:	d016      	beq.n	8003320 <HAL_SPI_TransmitReceive+0x1f2>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 80032f2:	68fb      	ldr	r3, [r7, #12]
 80032f4:	681b      	ldr	r3, [r3, #0]
 80032f6:	68da      	ldr	r2, [r3, #12]
 80032f8:	68fb      	ldr	r3, [r7, #12]
 80032fa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80032fc:	b292      	uxth	r2, r2
 80032fe:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8003300:	68fb      	ldr	r3, [r7, #12]
 8003302:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003304:	1c9a      	adds	r2, r3, #2
 8003306:	68fb      	ldr	r3, [r7, #12]
 8003308:	641a      	str	r2, [r3, #64]	; 0x40
        hspi->RxXferCount--;
 800330a:	68fb      	ldr	r3, [r7, #12]
 800330c:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8003310:	b29b      	uxth	r3, r3
 8003312:	3b01      	subs	r3, #1
 8003314:	b29a      	uxth	r2, r3
 8003316:	68fb      	ldr	r3, [r7, #12]
 8003318:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 800331c:	2301      	movs	r3, #1
 800331e:	627b      	str	r3, [r7, #36]	; 0x24
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 8003320:	f7fd fcca 	bl	8000cb8 <HAL_GetTick>
 8003324:	4602      	mov	r2, r0
 8003326:	69fb      	ldr	r3, [r7, #28]
 8003328:	1ad3      	subs	r3, r2, r3
 800332a:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800332c:	429a      	cmp	r2, r3
 800332e:	d807      	bhi.n	8003340 <HAL_SPI_TransmitReceive+0x212>
 8003330:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003332:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003336:	d003      	beq.n	8003340 <HAL_SPI_TransmitReceive+0x212>
      {
        errorcode = HAL_TIMEOUT;
 8003338:	2303      	movs	r3, #3
 800333a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
        goto error;
 800333e:	e0fb      	b.n	8003538 <HAL_SPI_TransmitReceive+0x40a>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8003340:	68fb      	ldr	r3, [r7, #12]
 8003342:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003344:	b29b      	uxth	r3, r3
 8003346:	2b00      	cmp	r3, #0
 8003348:	d1a3      	bne.n	8003292 <HAL_SPI_TransmitReceive+0x164>
 800334a:	68fb      	ldr	r3, [r7, #12]
 800334c:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8003350:	b29b      	uxth	r3, r3
 8003352:	2b00      	cmp	r3, #0
 8003354:	d19d      	bne.n	8003292 <HAL_SPI_TransmitReceive+0x164>
 8003356:	e0df      	b.n	8003518 <HAL_SPI_TransmitReceive+0x3ea>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8003358:	68fb      	ldr	r3, [r7, #12]
 800335a:	685b      	ldr	r3, [r3, #4]
 800335c:	2b00      	cmp	r3, #0
 800335e:	d003      	beq.n	8003368 <HAL_SPI_TransmitReceive+0x23a>
 8003360:	8a7b      	ldrh	r3, [r7, #18]
 8003362:	2b01      	cmp	r3, #1
 8003364:	f040 80cb 	bne.w	80034fe <HAL_SPI_TransmitReceive+0x3d0>
    {
      if (hspi->TxXferCount > 1U)
 8003368:	68fb      	ldr	r3, [r7, #12]
 800336a:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800336c:	b29b      	uxth	r3, r3
 800336e:	2b01      	cmp	r3, #1
 8003370:	d912      	bls.n	8003398 <HAL_SPI_TransmitReceive+0x26a>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8003372:	68fb      	ldr	r3, [r7, #12]
 8003374:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003376:	881a      	ldrh	r2, [r3, #0]
 8003378:	68fb      	ldr	r3, [r7, #12]
 800337a:	681b      	ldr	r3, [r3, #0]
 800337c:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 800337e:	68fb      	ldr	r3, [r7, #12]
 8003380:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003382:	1c9a      	adds	r2, r3, #2
 8003384:	68fb      	ldr	r3, [r7, #12]
 8003386:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount -= 2U;
 8003388:	68fb      	ldr	r3, [r7, #12]
 800338a:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800338c:	b29b      	uxth	r3, r3
 800338e:	3b02      	subs	r3, #2
 8003390:	b29a      	uxth	r2, r3
 8003392:	68fb      	ldr	r3, [r7, #12]
 8003394:	87da      	strh	r2, [r3, #62]	; 0x3e
 8003396:	e0b2      	b.n	80034fe <HAL_SPI_TransmitReceive+0x3d0>
      }
      else
      {
        *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 8003398:	68fb      	ldr	r3, [r7, #12]
 800339a:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800339c:	68fb      	ldr	r3, [r7, #12]
 800339e:	681b      	ldr	r3, [r3, #0]
 80033a0:	330c      	adds	r3, #12
 80033a2:	7812      	ldrb	r2, [r2, #0]
 80033a4:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 80033a6:	68fb      	ldr	r3, [r7, #12]
 80033a8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80033aa:	1c5a      	adds	r2, r3, #1
 80033ac:	68fb      	ldr	r3, [r7, #12]
 80033ae:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 80033b0:	68fb      	ldr	r3, [r7, #12]
 80033b2:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80033b4:	b29b      	uxth	r3, r3
 80033b6:	3b01      	subs	r3, #1
 80033b8:	b29a      	uxth	r2, r3
 80033ba:	68fb      	ldr	r3, [r7, #12]
 80033bc:	87da      	strh	r2, [r3, #62]	; 0x3e
      }
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 80033be:	e09e      	b.n	80034fe <HAL_SPI_TransmitReceive+0x3d0>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 80033c0:	68fb      	ldr	r3, [r7, #12]
 80033c2:	681b      	ldr	r3, [r3, #0]
 80033c4:	689b      	ldr	r3, [r3, #8]
 80033c6:	f003 0302 	and.w	r3, r3, #2
 80033ca:	2b02      	cmp	r3, #2
 80033cc:	d134      	bne.n	8003438 <HAL_SPI_TransmitReceive+0x30a>
 80033ce:	68fb      	ldr	r3, [r7, #12]
 80033d0:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80033d2:	b29b      	uxth	r3, r3
 80033d4:	2b00      	cmp	r3, #0
 80033d6:	d02f      	beq.n	8003438 <HAL_SPI_TransmitReceive+0x30a>
 80033d8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80033da:	2b01      	cmp	r3, #1
 80033dc:	d12c      	bne.n	8003438 <HAL_SPI_TransmitReceive+0x30a>
      {
        if (hspi->TxXferCount > 1U)
 80033de:	68fb      	ldr	r3, [r7, #12]
 80033e0:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80033e2:	b29b      	uxth	r3, r3
 80033e4:	2b01      	cmp	r3, #1
 80033e6:	d912      	bls.n	800340e <HAL_SPI_TransmitReceive+0x2e0>
        {
          hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80033e8:	68fb      	ldr	r3, [r7, #12]
 80033ea:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80033ec:	881a      	ldrh	r2, [r3, #0]
 80033ee:	68fb      	ldr	r3, [r7, #12]
 80033f0:	681b      	ldr	r3, [r3, #0]
 80033f2:	60da      	str	r2, [r3, #12]
          hspi->pTxBuffPtr += sizeof(uint16_t);
 80033f4:	68fb      	ldr	r3, [r7, #12]
 80033f6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80033f8:	1c9a      	adds	r2, r3, #2
 80033fa:	68fb      	ldr	r3, [r7, #12]
 80033fc:	639a      	str	r2, [r3, #56]	; 0x38
          hspi->TxXferCount -= 2U;
 80033fe:	68fb      	ldr	r3, [r7, #12]
 8003400:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003402:	b29b      	uxth	r3, r3
 8003404:	3b02      	subs	r3, #2
 8003406:	b29a      	uxth	r2, r3
 8003408:	68fb      	ldr	r3, [r7, #12]
 800340a:	87da      	strh	r2, [r3, #62]	; 0x3e
 800340c:	e012      	b.n	8003434 <HAL_SPI_TransmitReceive+0x306>
        }
        else
        {
          *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 800340e:	68fb      	ldr	r3, [r7, #12]
 8003410:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8003412:	68fb      	ldr	r3, [r7, #12]
 8003414:	681b      	ldr	r3, [r3, #0]
 8003416:	330c      	adds	r3, #12
 8003418:	7812      	ldrb	r2, [r2, #0]
 800341a:	701a      	strb	r2, [r3, #0]
          hspi->pTxBuffPtr++;
 800341c:	68fb      	ldr	r3, [r7, #12]
 800341e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003420:	1c5a      	adds	r2, r3, #1
 8003422:	68fb      	ldr	r3, [r7, #12]
 8003424:	639a      	str	r2, [r3, #56]	; 0x38
          hspi->TxXferCount--;
 8003426:	68fb      	ldr	r3, [r7, #12]
 8003428:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800342a:	b29b      	uxth	r3, r3
 800342c:	3b01      	subs	r3, #1
 800342e:	b29a      	uxth	r2, r3
 8003430:	68fb      	ldr	r3, [r7, #12]
 8003432:	87da      	strh	r2, [r3, #62]	; 0x3e
        }
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8003434:	2300      	movs	r3, #0
 8003436:	627b      	str	r3, [r7, #36]	; 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8003438:	68fb      	ldr	r3, [r7, #12]
 800343a:	681b      	ldr	r3, [r3, #0]
 800343c:	689b      	ldr	r3, [r3, #8]
 800343e:	f003 0301 	and.w	r3, r3, #1
 8003442:	2b01      	cmp	r3, #1
 8003444:	d148      	bne.n	80034d8 <HAL_SPI_TransmitReceive+0x3aa>
 8003446:	68fb      	ldr	r3, [r7, #12]
 8003448:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 800344c:	b29b      	uxth	r3, r3
 800344e:	2b00      	cmp	r3, #0
 8003450:	d042      	beq.n	80034d8 <HAL_SPI_TransmitReceive+0x3aa>
      {
        if (hspi->RxXferCount > 1U)
 8003452:	68fb      	ldr	r3, [r7, #12]
 8003454:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8003458:	b29b      	uxth	r3, r3
 800345a:	2b01      	cmp	r3, #1
 800345c:	d923      	bls.n	80034a6 <HAL_SPI_TransmitReceive+0x378>
        {
          *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 800345e:	68fb      	ldr	r3, [r7, #12]
 8003460:	681b      	ldr	r3, [r3, #0]
 8003462:	68da      	ldr	r2, [r3, #12]
 8003464:	68fb      	ldr	r3, [r7, #12]
 8003466:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003468:	b292      	uxth	r2, r2
 800346a:	801a      	strh	r2, [r3, #0]
          hspi->pRxBuffPtr += sizeof(uint16_t);
 800346c:	68fb      	ldr	r3, [r7, #12]
 800346e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003470:	1c9a      	adds	r2, r3, #2
 8003472:	68fb      	ldr	r3, [r7, #12]
 8003474:	641a      	str	r2, [r3, #64]	; 0x40
          hspi->RxXferCount -= 2U;
 8003476:	68fb      	ldr	r3, [r7, #12]
 8003478:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 800347c:	b29b      	uxth	r3, r3
 800347e:	3b02      	subs	r3, #2
 8003480:	b29a      	uxth	r2, r3
 8003482:	68fb      	ldr	r3, [r7, #12]
 8003484:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
          if (hspi->RxXferCount <= 1U)
 8003488:	68fb      	ldr	r3, [r7, #12]
 800348a:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 800348e:	b29b      	uxth	r3, r3
 8003490:	2b01      	cmp	r3, #1
 8003492:	d81f      	bhi.n	80034d4 <HAL_SPI_TransmitReceive+0x3a6>
          {
            /* Set RX Fifo threshold before to switch on 8 bit data size */
            SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8003494:	68fb      	ldr	r3, [r7, #12]
 8003496:	681b      	ldr	r3, [r3, #0]
 8003498:	685a      	ldr	r2, [r3, #4]
 800349a:	68fb      	ldr	r3, [r7, #12]
 800349c:	681b      	ldr	r3, [r3, #0]
 800349e:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 80034a2:	605a      	str	r2, [r3, #4]
 80034a4:	e016      	b.n	80034d4 <HAL_SPI_TransmitReceive+0x3a6>
          }
        }
        else
        {
          (*(uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 80034a6:	68fb      	ldr	r3, [r7, #12]
 80034a8:	681b      	ldr	r3, [r3, #0]
 80034aa:	f103 020c 	add.w	r2, r3, #12
 80034ae:	68fb      	ldr	r3, [r7, #12]
 80034b0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80034b2:	7812      	ldrb	r2, [r2, #0]
 80034b4:	b2d2      	uxtb	r2, r2
 80034b6:	701a      	strb	r2, [r3, #0]
          hspi->pRxBuffPtr++;
 80034b8:	68fb      	ldr	r3, [r7, #12]
 80034ba:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80034bc:	1c5a      	adds	r2, r3, #1
 80034be:	68fb      	ldr	r3, [r7, #12]
 80034c0:	641a      	str	r2, [r3, #64]	; 0x40
          hspi->RxXferCount--;
 80034c2:	68fb      	ldr	r3, [r7, #12]
 80034c4:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 80034c8:	b29b      	uxth	r3, r3
 80034ca:	3b01      	subs	r3, #1
 80034cc:	b29a      	uxth	r2, r3
 80034ce:	68fb      	ldr	r3, [r7, #12]
 80034d0:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
        }
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 80034d4:	2301      	movs	r3, #1
 80034d6:	627b      	str	r3, [r7, #36]	; 0x24
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 80034d8:	f7fd fbee 	bl	8000cb8 <HAL_GetTick>
 80034dc:	4602      	mov	r2, r0
 80034de:	69fb      	ldr	r3, [r7, #28]
 80034e0:	1ad3      	subs	r3, r2, r3
 80034e2:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80034e4:	429a      	cmp	r2, r3
 80034e6:	d803      	bhi.n	80034f0 <HAL_SPI_TransmitReceive+0x3c2>
 80034e8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80034ea:	f1b3 3fff 	cmp.w	r3, #4294967295
 80034ee:	d102      	bne.n	80034f6 <HAL_SPI_TransmitReceive+0x3c8>
 80034f0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80034f2:	2b00      	cmp	r3, #0
 80034f4:	d103      	bne.n	80034fe <HAL_SPI_TransmitReceive+0x3d0>
      {
        errorcode = HAL_TIMEOUT;
 80034f6:	2303      	movs	r3, #3
 80034f8:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
        goto error;
 80034fc:	e01c      	b.n	8003538 <HAL_SPI_TransmitReceive+0x40a>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 80034fe:	68fb      	ldr	r3, [r7, #12]
 8003500:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003502:	b29b      	uxth	r3, r3
 8003504:	2b00      	cmp	r3, #0
 8003506:	f47f af5b 	bne.w	80033c0 <HAL_SPI_TransmitReceive+0x292>
 800350a:	68fb      	ldr	r3, [r7, #12]
 800350c:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8003510:	b29b      	uxth	r3, r3
 8003512:	2b00      	cmp	r3, #0
 8003514:	f47f af54 	bne.w	80033c0 <HAL_SPI_TransmitReceive+0x292>
    errorcode = HAL_ERROR;
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8003518:	69fa      	ldr	r2, [r7, #28]
 800351a:	6b39      	ldr	r1, [r7, #48]	; 0x30
 800351c:	68f8      	ldr	r0, [r7, #12]
 800351e:	f000 f937 	bl	8003790 <SPI_EndRxTxTransaction>
 8003522:	4603      	mov	r3, r0
 8003524:	2b00      	cmp	r3, #0
 8003526:	d006      	beq.n	8003536 <HAL_SPI_TransmitReceive+0x408>
  {
    errorcode = HAL_ERROR;
 8003528:	2301      	movs	r3, #1
 800352a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 800352e:	68fb      	ldr	r3, [r7, #12]
 8003530:	2220      	movs	r2, #32
 8003532:	661a      	str	r2, [r3, #96]	; 0x60
 8003534:	e000      	b.n	8003538 <HAL_SPI_TransmitReceive+0x40a>
  }

error :
 8003536:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 8003538:	68fb      	ldr	r3, [r7, #12]
 800353a:	2201      	movs	r2, #1
 800353c:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  __HAL_UNLOCK(hspi);
 8003540:	68fb      	ldr	r3, [r7, #12]
 8003542:	2200      	movs	r2, #0
 8003544:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c
  return errorcode;
 8003548:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
}
 800354c:	4618      	mov	r0, r3
 800354e:	3728      	adds	r7, #40	; 0x28
 8003550:	46bd      	mov	sp, r7
 8003552:	bd80      	pop	{r7, pc}

08003554 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8003554:	b580      	push	{r7, lr}
 8003556:	b088      	sub	sp, #32
 8003558:	af00      	add	r7, sp, #0
 800355a:	60f8      	str	r0, [r7, #12]
 800355c:	60b9      	str	r1, [r7, #8]
 800355e:	603b      	str	r3, [r7, #0]
 8003560:	4613      	mov	r3, r2
 8003562:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 8003564:	f7fd fba8 	bl	8000cb8 <HAL_GetTick>
 8003568:	4602      	mov	r2, r0
 800356a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800356c:	1a9b      	subs	r3, r3, r2
 800356e:	683a      	ldr	r2, [r7, #0]
 8003570:	4413      	add	r3, r2
 8003572:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 8003574:	f7fd fba0 	bl	8000cb8 <HAL_GetTick>
 8003578:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 800357a:	4b39      	ldr	r3, [pc, #228]	; (8003660 <SPI_WaitFlagStateUntilTimeout+0x10c>)
 800357c:	681b      	ldr	r3, [r3, #0]
 800357e:	015b      	lsls	r3, r3, #5
 8003580:	0d1b      	lsrs	r3, r3, #20
 8003582:	69fa      	ldr	r2, [r7, #28]
 8003584:	fb02 f303 	mul.w	r3, r2, r3
 8003588:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 800358a:	e054      	b.n	8003636 <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 800358c:	683b      	ldr	r3, [r7, #0]
 800358e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003592:	d050      	beq.n	8003636 <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8003594:	f7fd fb90 	bl	8000cb8 <HAL_GetTick>
 8003598:	4602      	mov	r2, r0
 800359a:	69bb      	ldr	r3, [r7, #24]
 800359c:	1ad3      	subs	r3, r2, r3
 800359e:	69fa      	ldr	r2, [r7, #28]
 80035a0:	429a      	cmp	r2, r3
 80035a2:	d902      	bls.n	80035aa <SPI_WaitFlagStateUntilTimeout+0x56>
 80035a4:	69fb      	ldr	r3, [r7, #28]
 80035a6:	2b00      	cmp	r3, #0
 80035a8:	d13d      	bne.n	8003626 <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 80035aa:	68fb      	ldr	r3, [r7, #12]
 80035ac:	681b      	ldr	r3, [r3, #0]
 80035ae:	685a      	ldr	r2, [r3, #4]
 80035b0:	68fb      	ldr	r3, [r7, #12]
 80035b2:	681b      	ldr	r3, [r3, #0]
 80035b4:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 80035b8:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80035ba:	68fb      	ldr	r3, [r7, #12]
 80035bc:	685b      	ldr	r3, [r3, #4]
 80035be:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80035c2:	d111      	bne.n	80035e8 <SPI_WaitFlagStateUntilTimeout+0x94>
 80035c4:	68fb      	ldr	r3, [r7, #12]
 80035c6:	689b      	ldr	r3, [r3, #8]
 80035c8:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80035cc:	d004      	beq.n	80035d8 <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 80035ce:	68fb      	ldr	r3, [r7, #12]
 80035d0:	689b      	ldr	r3, [r3, #8]
 80035d2:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80035d6:	d107      	bne.n	80035e8 <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 80035d8:	68fb      	ldr	r3, [r7, #12]
 80035da:	681b      	ldr	r3, [r3, #0]
 80035dc:	681a      	ldr	r2, [r3, #0]
 80035de:	68fb      	ldr	r3, [r7, #12]
 80035e0:	681b      	ldr	r3, [r3, #0]
 80035e2:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80035e6:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 80035e8:	68fb      	ldr	r3, [r7, #12]
 80035ea:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80035ec:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80035f0:	d10f      	bne.n	8003612 <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 80035f2:	68fb      	ldr	r3, [r7, #12]
 80035f4:	681b      	ldr	r3, [r3, #0]
 80035f6:	681a      	ldr	r2, [r3, #0]
 80035f8:	68fb      	ldr	r3, [r7, #12]
 80035fa:	681b      	ldr	r3, [r3, #0]
 80035fc:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8003600:	601a      	str	r2, [r3, #0]
 8003602:	68fb      	ldr	r3, [r7, #12]
 8003604:	681b      	ldr	r3, [r3, #0]
 8003606:	681a      	ldr	r2, [r3, #0]
 8003608:	68fb      	ldr	r3, [r7, #12]
 800360a:	681b      	ldr	r3, [r3, #0]
 800360c:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8003610:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8003612:	68fb      	ldr	r3, [r7, #12]
 8003614:	2201      	movs	r2, #1
 8003616:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 800361a:	68fb      	ldr	r3, [r7, #12]
 800361c:	2200      	movs	r2, #0
 800361e:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

        return HAL_TIMEOUT;
 8003622:	2303      	movs	r3, #3
 8003624:	e017      	b.n	8003656 <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if(count == 0U)
 8003626:	697b      	ldr	r3, [r7, #20]
 8003628:	2b00      	cmp	r3, #0
 800362a:	d101      	bne.n	8003630 <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 800362c:	2300      	movs	r3, #0
 800362e:	61fb      	str	r3, [r7, #28]
      }
      count--;
 8003630:	697b      	ldr	r3, [r7, #20]
 8003632:	3b01      	subs	r3, #1
 8003634:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8003636:	68fb      	ldr	r3, [r7, #12]
 8003638:	681b      	ldr	r3, [r3, #0]
 800363a:	689a      	ldr	r2, [r3, #8]
 800363c:	68bb      	ldr	r3, [r7, #8]
 800363e:	4013      	ands	r3, r2
 8003640:	68ba      	ldr	r2, [r7, #8]
 8003642:	429a      	cmp	r2, r3
 8003644:	bf0c      	ite	eq
 8003646:	2301      	moveq	r3, #1
 8003648:	2300      	movne	r3, #0
 800364a:	b2db      	uxtb	r3, r3
 800364c:	461a      	mov	r2, r3
 800364e:	79fb      	ldrb	r3, [r7, #7]
 8003650:	429a      	cmp	r2, r3
 8003652:	d19b      	bne.n	800358c <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 8003654:	2300      	movs	r3, #0
}
 8003656:	4618      	mov	r0, r3
 8003658:	3720      	adds	r7, #32
 800365a:	46bd      	mov	sp, r7
 800365c:	bd80      	pop	{r7, pc}
 800365e:	bf00      	nop
 8003660:	20000000 	.word	0x20000000

08003664 <SPI_WaitFifoStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFifoStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Fifo, uint32_t State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8003664:	b580      	push	{r7, lr}
 8003666:	b08a      	sub	sp, #40	; 0x28
 8003668:	af00      	add	r7, sp, #0
 800366a:	60f8      	str	r0, [r7, #12]
 800366c:	60b9      	str	r1, [r7, #8]
 800366e:	607a      	str	r2, [r7, #4]
 8003670:	603b      	str	r3, [r7, #0]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;
  __IO uint8_t  * ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
 8003672:	2300      	movs	r3, #0
 8003674:	75fb      	strb	r3, [r7, #23]

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout = Timeout - (HAL_GetTick() - Tickstart);
 8003676:	f7fd fb1f 	bl	8000cb8 <HAL_GetTick>
 800367a:	4602      	mov	r2, r0
 800367c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800367e:	1a9b      	subs	r3, r3, r2
 8003680:	683a      	ldr	r2, [r7, #0]
 8003682:	4413      	add	r3, r2
 8003684:	627b      	str	r3, [r7, #36]	; 0x24
  tmp_tickstart = HAL_GetTick();
 8003686:	f7fd fb17 	bl	8000cb8 <HAL_GetTick>
 800368a:	6238      	str	r0, [r7, #32]

  /* Initialize the 8bit temporary pointer */
  ptmpreg8 = (__IO uint8_t *)&hspi->Instance->DR;
 800368c:	68fb      	ldr	r3, [r7, #12]
 800368e:	681b      	ldr	r3, [r3, #0]
 8003690:	330c      	adds	r3, #12
 8003692:	61fb      	str	r3, [r7, #28]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 35U) >> 20U);
 8003694:	4b3d      	ldr	r3, [pc, #244]	; (800378c <SPI_WaitFifoStateUntilTimeout+0x128>)
 8003696:	681a      	ldr	r2, [r3, #0]
 8003698:	4613      	mov	r3, r2
 800369a:	009b      	lsls	r3, r3, #2
 800369c:	4413      	add	r3, r2
 800369e:	00da      	lsls	r2, r3, #3
 80036a0:	1ad3      	subs	r3, r2, r3
 80036a2:	0d1b      	lsrs	r3, r3, #20
 80036a4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80036a6:	fb02 f303 	mul.w	r3, r2, r3
 80036aa:	61bb      	str	r3, [r7, #24]

  while ((hspi->Instance->SR & Fifo) != State)
 80036ac:	e060      	b.n	8003770 <SPI_WaitFifoStateUntilTimeout+0x10c>
  {
    if ((Fifo == SPI_SR_FRLVL) && (State == SPI_FRLVL_EMPTY))
 80036ae:	68bb      	ldr	r3, [r7, #8]
 80036b0:	f5b3 6fc0 	cmp.w	r3, #1536	; 0x600
 80036b4:	d107      	bne.n	80036c6 <SPI_WaitFifoStateUntilTimeout+0x62>
 80036b6:	687b      	ldr	r3, [r7, #4]
 80036b8:	2b00      	cmp	r3, #0
 80036ba:	d104      	bne.n	80036c6 <SPI_WaitFifoStateUntilTimeout+0x62>
    {
      /* Flush Data Register by a blank read */
      tmpreg8 = *ptmpreg8;
 80036bc:	69fb      	ldr	r3, [r7, #28]
 80036be:	781b      	ldrb	r3, [r3, #0]
 80036c0:	b2db      	uxtb	r3, r3
 80036c2:	75fb      	strb	r3, [r7, #23]
      /* To avoid GCC warning */
      UNUSED(tmpreg8);
 80036c4:	7dfb      	ldrb	r3, [r7, #23]
    }

    if (Timeout != HAL_MAX_DELAY)
 80036c6:	683b      	ldr	r3, [r7, #0]
 80036c8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80036cc:	d050      	beq.n	8003770 <SPI_WaitFifoStateUntilTimeout+0x10c>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 80036ce:	f7fd faf3 	bl	8000cb8 <HAL_GetTick>
 80036d2:	4602      	mov	r2, r0
 80036d4:	6a3b      	ldr	r3, [r7, #32]
 80036d6:	1ad3      	subs	r3, r2, r3
 80036d8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80036da:	429a      	cmp	r2, r3
 80036dc:	d902      	bls.n	80036e4 <SPI_WaitFifoStateUntilTimeout+0x80>
 80036de:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80036e0:	2b00      	cmp	r3, #0
 80036e2:	d13d      	bne.n	8003760 <SPI_WaitFifoStateUntilTimeout+0xfc>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 80036e4:	68fb      	ldr	r3, [r7, #12]
 80036e6:	681b      	ldr	r3, [r3, #0]
 80036e8:	685a      	ldr	r2, [r3, #4]
 80036ea:	68fb      	ldr	r3, [r7, #12]
 80036ec:	681b      	ldr	r3, [r3, #0]
 80036ee:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 80036f2:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80036f4:	68fb      	ldr	r3, [r7, #12]
 80036f6:	685b      	ldr	r3, [r3, #4]
 80036f8:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80036fc:	d111      	bne.n	8003722 <SPI_WaitFifoStateUntilTimeout+0xbe>
 80036fe:	68fb      	ldr	r3, [r7, #12]
 8003700:	689b      	ldr	r3, [r3, #8]
 8003702:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8003706:	d004      	beq.n	8003712 <SPI_WaitFifoStateUntilTimeout+0xae>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8003708:	68fb      	ldr	r3, [r7, #12]
 800370a:	689b      	ldr	r3, [r3, #8]
 800370c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003710:	d107      	bne.n	8003722 <SPI_WaitFifoStateUntilTimeout+0xbe>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8003712:	68fb      	ldr	r3, [r7, #12]
 8003714:	681b      	ldr	r3, [r3, #0]
 8003716:	681a      	ldr	r2, [r3, #0]
 8003718:	68fb      	ldr	r3, [r7, #12]
 800371a:	681b      	ldr	r3, [r3, #0]
 800371c:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8003720:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8003722:	68fb      	ldr	r3, [r7, #12]
 8003724:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003726:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800372a:	d10f      	bne.n	800374c <SPI_WaitFifoStateUntilTimeout+0xe8>
        {
          SPI_RESET_CRC(hspi);
 800372c:	68fb      	ldr	r3, [r7, #12]
 800372e:	681b      	ldr	r3, [r3, #0]
 8003730:	681a      	ldr	r2, [r3, #0]
 8003732:	68fb      	ldr	r3, [r7, #12]
 8003734:	681b      	ldr	r3, [r3, #0]
 8003736:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 800373a:	601a      	str	r2, [r3, #0]
 800373c:	68fb      	ldr	r3, [r7, #12]
 800373e:	681b      	ldr	r3, [r3, #0]
 8003740:	681a      	ldr	r2, [r3, #0]
 8003742:	68fb      	ldr	r3, [r7, #12]
 8003744:	681b      	ldr	r3, [r3, #0]
 8003746:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 800374a:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 800374c:	68fb      	ldr	r3, [r7, #12]
 800374e:	2201      	movs	r2, #1
 8003750:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8003754:	68fb      	ldr	r3, [r7, #12]
 8003756:	2200      	movs	r2, #0
 8003758:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

        return HAL_TIMEOUT;
 800375c:	2303      	movs	r3, #3
 800375e:	e010      	b.n	8003782 <SPI_WaitFifoStateUntilTimeout+0x11e>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if(count == 0U)
 8003760:	69bb      	ldr	r3, [r7, #24]
 8003762:	2b00      	cmp	r3, #0
 8003764:	d101      	bne.n	800376a <SPI_WaitFifoStateUntilTimeout+0x106>
      {
        tmp_timeout = 0U;
 8003766:	2300      	movs	r3, #0
 8003768:	627b      	str	r3, [r7, #36]	; 0x24
      }      
      count--;
 800376a:	69bb      	ldr	r3, [r7, #24]
 800376c:	3b01      	subs	r3, #1
 800376e:	61bb      	str	r3, [r7, #24]
  while ((hspi->Instance->SR & Fifo) != State)
 8003770:	68fb      	ldr	r3, [r7, #12]
 8003772:	681b      	ldr	r3, [r3, #0]
 8003774:	689a      	ldr	r2, [r3, #8]
 8003776:	68bb      	ldr	r3, [r7, #8]
 8003778:	4013      	ands	r3, r2
 800377a:	687a      	ldr	r2, [r7, #4]
 800377c:	429a      	cmp	r2, r3
 800377e:	d196      	bne.n	80036ae <SPI_WaitFifoStateUntilTimeout+0x4a>
    }
  }

  return HAL_OK;
 8003780:	2300      	movs	r3, #0
}
 8003782:	4618      	mov	r0, r3
 8003784:	3728      	adds	r7, #40	; 0x28
 8003786:	46bd      	mov	sp, r7
 8003788:	bd80      	pop	{r7, pc}
 800378a:	bf00      	nop
 800378c:	20000000 	.word	0x20000000

08003790 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8003790:	b580      	push	{r7, lr}
 8003792:	b086      	sub	sp, #24
 8003794:	af02      	add	r7, sp, #8
 8003796:	60f8      	str	r0, [r7, #12]
 8003798:	60b9      	str	r1, [r7, #8]
 800379a:	607a      	str	r2, [r7, #4]
  /* Control if the TX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FTLVL, SPI_FTLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 800379c:	687b      	ldr	r3, [r7, #4]
 800379e:	9300      	str	r3, [sp, #0]
 80037a0:	68bb      	ldr	r3, [r7, #8]
 80037a2:	2200      	movs	r2, #0
 80037a4:	f44f 51c0 	mov.w	r1, #6144	; 0x1800
 80037a8:	68f8      	ldr	r0, [r7, #12]
 80037aa:	f7ff ff5b 	bl	8003664 <SPI_WaitFifoStateUntilTimeout>
 80037ae:	4603      	mov	r3, r0
 80037b0:	2b00      	cmp	r3, #0
 80037b2:	d007      	beq.n	80037c4 <SPI_EndRxTxTransaction+0x34>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80037b4:	68fb      	ldr	r3, [r7, #12]
 80037b6:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80037b8:	f043 0220 	orr.w	r2, r3, #32
 80037bc:	68fb      	ldr	r3, [r7, #12]
 80037be:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 80037c0:	2303      	movs	r3, #3
 80037c2:	e027      	b.n	8003814 <SPI_EndRxTxTransaction+0x84>
  }

  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 80037c4:	687b      	ldr	r3, [r7, #4]
 80037c6:	9300      	str	r3, [sp, #0]
 80037c8:	68bb      	ldr	r3, [r7, #8]
 80037ca:	2200      	movs	r2, #0
 80037cc:	2180      	movs	r1, #128	; 0x80
 80037ce:	68f8      	ldr	r0, [r7, #12]
 80037d0:	f7ff fec0 	bl	8003554 <SPI_WaitFlagStateUntilTimeout>
 80037d4:	4603      	mov	r3, r0
 80037d6:	2b00      	cmp	r3, #0
 80037d8:	d007      	beq.n	80037ea <SPI_EndRxTxTransaction+0x5a>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80037da:	68fb      	ldr	r3, [r7, #12]
 80037dc:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80037de:	f043 0220 	orr.w	r2, r3, #32
 80037e2:	68fb      	ldr	r3, [r7, #12]
 80037e4:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 80037e6:	2303      	movs	r3, #3
 80037e8:	e014      	b.n	8003814 <SPI_EndRxTxTransaction+0x84>
  }

  /* Control if the RX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FRLVL, SPI_FRLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 80037ea:	687b      	ldr	r3, [r7, #4]
 80037ec:	9300      	str	r3, [sp, #0]
 80037ee:	68bb      	ldr	r3, [r7, #8]
 80037f0:	2200      	movs	r2, #0
 80037f2:	f44f 61c0 	mov.w	r1, #1536	; 0x600
 80037f6:	68f8      	ldr	r0, [r7, #12]
 80037f8:	f7ff ff34 	bl	8003664 <SPI_WaitFifoStateUntilTimeout>
 80037fc:	4603      	mov	r3, r0
 80037fe:	2b00      	cmp	r3, #0
 8003800:	d007      	beq.n	8003812 <SPI_EndRxTxTransaction+0x82>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8003802:	68fb      	ldr	r3, [r7, #12]
 8003804:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003806:	f043 0220 	orr.w	r2, r3, #32
 800380a:	68fb      	ldr	r3, [r7, #12]
 800380c:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 800380e:	2303      	movs	r3, #3
 8003810:	e000      	b.n	8003814 <SPI_EndRxTxTransaction+0x84>
  }

  return HAL_OK;
 8003812:	2300      	movs	r3, #0
}
 8003814:	4618      	mov	r0, r3
 8003816:	3710      	adds	r7, #16
 8003818:	46bd      	mov	sp, r7
 800381a:	bd80      	pop	{r7, pc}

0800381c <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 800381c:	b580      	push	{r7, lr}
 800381e:	b082      	sub	sp, #8
 8003820:	af00      	add	r7, sp, #0
 8003822:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8003824:	687b      	ldr	r3, [r7, #4]
 8003826:	2b00      	cmp	r3, #0
 8003828:	d101      	bne.n	800382e <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800382a:	2301      	movs	r3, #1
 800382c:	e041      	b.n	80038b2 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800382e:	687b      	ldr	r3, [r7, #4]
 8003830:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003834:	b2db      	uxtb	r3, r3
 8003836:	2b00      	cmp	r3, #0
 8003838:	d106      	bne.n	8003848 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800383a:	687b      	ldr	r3, [r7, #4]
 800383c:	2200      	movs	r2, #0
 800383e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8003842:	6878      	ldr	r0, [r7, #4]
 8003844:	f7fd f890 	bl	8000968 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003848:	687b      	ldr	r3, [r7, #4]
 800384a:	2202      	movs	r2, #2
 800384c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8003850:	687b      	ldr	r3, [r7, #4]
 8003852:	681a      	ldr	r2, [r3, #0]
 8003854:	687b      	ldr	r3, [r7, #4]
 8003856:	3304      	adds	r3, #4
 8003858:	4619      	mov	r1, r3
 800385a:	4610      	mov	r0, r2
 800385c:	f000 fa2e 	bl	8003cbc <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8003860:	687b      	ldr	r3, [r7, #4]
 8003862:	2201      	movs	r2, #1
 8003864:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003868:	687b      	ldr	r3, [r7, #4]
 800386a:	2201      	movs	r2, #1
 800386c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8003870:	687b      	ldr	r3, [r7, #4]
 8003872:	2201      	movs	r2, #1
 8003874:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8003878:	687b      	ldr	r3, [r7, #4]
 800387a:	2201      	movs	r2, #1
 800387c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8003880:	687b      	ldr	r3, [r7, #4]
 8003882:	2201      	movs	r2, #1
 8003884:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003888:	687b      	ldr	r3, [r7, #4]
 800388a:	2201      	movs	r2, #1
 800388c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8003890:	687b      	ldr	r3, [r7, #4]
 8003892:	2201      	movs	r2, #1
 8003894:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8003898:	687b      	ldr	r3, [r7, #4]
 800389a:	2201      	movs	r2, #1
 800389c:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 80038a0:	687b      	ldr	r3, [r7, #4]
 80038a2:	2201      	movs	r2, #1
 80038a4:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80038a8:	687b      	ldr	r3, [r7, #4]
 80038aa:	2201      	movs	r2, #1
 80038ac:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80038b0:	2300      	movs	r3, #0
}
 80038b2:	4618      	mov	r0, r3
 80038b4:	3708      	adds	r7, #8
 80038b6:	46bd      	mov	sp, r7
 80038b8:	bd80      	pop	{r7, pc}

080038ba <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 80038ba:	b580      	push	{r7, lr}
 80038bc:	b082      	sub	sp, #8
 80038be:	af00      	add	r7, sp, #0
 80038c0:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 80038c2:	687b      	ldr	r3, [r7, #4]
 80038c4:	681b      	ldr	r3, [r3, #0]
 80038c6:	691b      	ldr	r3, [r3, #16]
 80038c8:	f003 0302 	and.w	r3, r3, #2
 80038cc:	2b02      	cmp	r3, #2
 80038ce:	d122      	bne.n	8003916 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 80038d0:	687b      	ldr	r3, [r7, #4]
 80038d2:	681b      	ldr	r3, [r3, #0]
 80038d4:	68db      	ldr	r3, [r3, #12]
 80038d6:	f003 0302 	and.w	r3, r3, #2
 80038da:	2b02      	cmp	r3, #2
 80038dc:	d11b      	bne.n	8003916 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 80038de:	687b      	ldr	r3, [r7, #4]
 80038e0:	681b      	ldr	r3, [r3, #0]
 80038e2:	f06f 0202 	mvn.w	r2, #2
 80038e6:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 80038e8:	687b      	ldr	r3, [r7, #4]
 80038ea:	2201      	movs	r2, #1
 80038ec:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 80038ee:	687b      	ldr	r3, [r7, #4]
 80038f0:	681b      	ldr	r3, [r3, #0]
 80038f2:	699b      	ldr	r3, [r3, #24]
 80038f4:	f003 0303 	and.w	r3, r3, #3
 80038f8:	2b00      	cmp	r3, #0
 80038fa:	d003      	beq.n	8003904 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 80038fc:	6878      	ldr	r0, [r7, #4]
 80038fe:	f000 f9bf 	bl	8003c80 <HAL_TIM_IC_CaptureCallback>
 8003902:	e005      	b.n	8003910 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8003904:	6878      	ldr	r0, [r7, #4]
 8003906:	f000 f9b1 	bl	8003c6c <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 800390a:	6878      	ldr	r0, [r7, #4]
 800390c:	f000 f9c2 	bl	8003c94 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003910:	687b      	ldr	r3, [r7, #4]
 8003912:	2200      	movs	r2, #0
 8003914:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8003916:	687b      	ldr	r3, [r7, #4]
 8003918:	681b      	ldr	r3, [r3, #0]
 800391a:	691b      	ldr	r3, [r3, #16]
 800391c:	f003 0304 	and.w	r3, r3, #4
 8003920:	2b04      	cmp	r3, #4
 8003922:	d122      	bne.n	800396a <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8003924:	687b      	ldr	r3, [r7, #4]
 8003926:	681b      	ldr	r3, [r3, #0]
 8003928:	68db      	ldr	r3, [r3, #12]
 800392a:	f003 0304 	and.w	r3, r3, #4
 800392e:	2b04      	cmp	r3, #4
 8003930:	d11b      	bne.n	800396a <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8003932:	687b      	ldr	r3, [r7, #4]
 8003934:	681b      	ldr	r3, [r3, #0]
 8003936:	f06f 0204 	mvn.w	r2, #4
 800393a:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800393c:	687b      	ldr	r3, [r7, #4]
 800393e:	2202      	movs	r2, #2
 8003940:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8003942:	687b      	ldr	r3, [r7, #4]
 8003944:	681b      	ldr	r3, [r3, #0]
 8003946:	699b      	ldr	r3, [r3, #24]
 8003948:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800394c:	2b00      	cmp	r3, #0
 800394e:	d003      	beq.n	8003958 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003950:	6878      	ldr	r0, [r7, #4]
 8003952:	f000 f995 	bl	8003c80 <HAL_TIM_IC_CaptureCallback>
 8003956:	e005      	b.n	8003964 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003958:	6878      	ldr	r0, [r7, #4]
 800395a:	f000 f987 	bl	8003c6c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800395e:	6878      	ldr	r0, [r7, #4]
 8003960:	f000 f998 	bl	8003c94 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003964:	687b      	ldr	r3, [r7, #4]
 8003966:	2200      	movs	r2, #0
 8003968:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 800396a:	687b      	ldr	r3, [r7, #4]
 800396c:	681b      	ldr	r3, [r3, #0]
 800396e:	691b      	ldr	r3, [r3, #16]
 8003970:	f003 0308 	and.w	r3, r3, #8
 8003974:	2b08      	cmp	r3, #8
 8003976:	d122      	bne.n	80039be <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8003978:	687b      	ldr	r3, [r7, #4]
 800397a:	681b      	ldr	r3, [r3, #0]
 800397c:	68db      	ldr	r3, [r3, #12]
 800397e:	f003 0308 	and.w	r3, r3, #8
 8003982:	2b08      	cmp	r3, #8
 8003984:	d11b      	bne.n	80039be <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8003986:	687b      	ldr	r3, [r7, #4]
 8003988:	681b      	ldr	r3, [r3, #0]
 800398a:	f06f 0208 	mvn.w	r2, #8
 800398e:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8003990:	687b      	ldr	r3, [r7, #4]
 8003992:	2204      	movs	r2, #4
 8003994:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8003996:	687b      	ldr	r3, [r7, #4]
 8003998:	681b      	ldr	r3, [r3, #0]
 800399a:	69db      	ldr	r3, [r3, #28]
 800399c:	f003 0303 	and.w	r3, r3, #3
 80039a0:	2b00      	cmp	r3, #0
 80039a2:	d003      	beq.n	80039ac <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80039a4:	6878      	ldr	r0, [r7, #4]
 80039a6:	f000 f96b 	bl	8003c80 <HAL_TIM_IC_CaptureCallback>
 80039aa:	e005      	b.n	80039b8 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80039ac:	6878      	ldr	r0, [r7, #4]
 80039ae:	f000 f95d 	bl	8003c6c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80039b2:	6878      	ldr	r0, [r7, #4]
 80039b4:	f000 f96e 	bl	8003c94 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80039b8:	687b      	ldr	r3, [r7, #4]
 80039ba:	2200      	movs	r2, #0
 80039bc:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 80039be:	687b      	ldr	r3, [r7, #4]
 80039c0:	681b      	ldr	r3, [r3, #0]
 80039c2:	691b      	ldr	r3, [r3, #16]
 80039c4:	f003 0310 	and.w	r3, r3, #16
 80039c8:	2b10      	cmp	r3, #16
 80039ca:	d122      	bne.n	8003a12 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 80039cc:	687b      	ldr	r3, [r7, #4]
 80039ce:	681b      	ldr	r3, [r3, #0]
 80039d0:	68db      	ldr	r3, [r3, #12]
 80039d2:	f003 0310 	and.w	r3, r3, #16
 80039d6:	2b10      	cmp	r3, #16
 80039d8:	d11b      	bne.n	8003a12 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 80039da:	687b      	ldr	r3, [r7, #4]
 80039dc:	681b      	ldr	r3, [r3, #0]
 80039de:	f06f 0210 	mvn.w	r2, #16
 80039e2:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 80039e4:	687b      	ldr	r3, [r7, #4]
 80039e6:	2208      	movs	r2, #8
 80039e8:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 80039ea:	687b      	ldr	r3, [r7, #4]
 80039ec:	681b      	ldr	r3, [r3, #0]
 80039ee:	69db      	ldr	r3, [r3, #28]
 80039f0:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80039f4:	2b00      	cmp	r3, #0
 80039f6:	d003      	beq.n	8003a00 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80039f8:	6878      	ldr	r0, [r7, #4]
 80039fa:	f000 f941 	bl	8003c80 <HAL_TIM_IC_CaptureCallback>
 80039fe:	e005      	b.n	8003a0c <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003a00:	6878      	ldr	r0, [r7, #4]
 8003a02:	f000 f933 	bl	8003c6c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003a06:	6878      	ldr	r0, [r7, #4]
 8003a08:	f000 f944 	bl	8003c94 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003a0c:	687b      	ldr	r3, [r7, #4]
 8003a0e:	2200      	movs	r2, #0
 8003a10:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8003a12:	687b      	ldr	r3, [r7, #4]
 8003a14:	681b      	ldr	r3, [r3, #0]
 8003a16:	691b      	ldr	r3, [r3, #16]
 8003a18:	f003 0301 	and.w	r3, r3, #1
 8003a1c:	2b01      	cmp	r3, #1
 8003a1e:	d10e      	bne.n	8003a3e <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8003a20:	687b      	ldr	r3, [r7, #4]
 8003a22:	681b      	ldr	r3, [r3, #0]
 8003a24:	68db      	ldr	r3, [r3, #12]
 8003a26:	f003 0301 	and.w	r3, r3, #1
 8003a2a:	2b01      	cmp	r3, #1
 8003a2c:	d107      	bne.n	8003a3e <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8003a2e:	687b      	ldr	r3, [r7, #4]
 8003a30:	681b      	ldr	r3, [r3, #0]
 8003a32:	f06f 0201 	mvn.w	r2, #1
 8003a36:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8003a38:	6878      	ldr	r0, [r7, #4]
 8003a3a:	f000 f90d 	bl	8003c58 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8003a3e:	687b      	ldr	r3, [r7, #4]
 8003a40:	681b      	ldr	r3, [r3, #0]
 8003a42:	691b      	ldr	r3, [r3, #16]
 8003a44:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003a48:	2b80      	cmp	r3, #128	; 0x80
 8003a4a:	d10e      	bne.n	8003a6a <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8003a4c:	687b      	ldr	r3, [r7, #4]
 8003a4e:	681b      	ldr	r3, [r3, #0]
 8003a50:	68db      	ldr	r3, [r3, #12]
 8003a52:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003a56:	2b80      	cmp	r3, #128	; 0x80
 8003a58:	d107      	bne.n	8003a6a <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8003a5a:	687b      	ldr	r3, [r7, #4]
 8003a5c:	681b      	ldr	r3, [r3, #0]
 8003a5e:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8003a62:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8003a64:	6878      	ldr	r0, [r7, #4]
 8003a66:	f000 fadb 	bl	8004020 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
#endif /* TIM_BDTR_BK2E */
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8003a6a:	687b      	ldr	r3, [r7, #4]
 8003a6c:	681b      	ldr	r3, [r3, #0]
 8003a6e:	691b      	ldr	r3, [r3, #16]
 8003a70:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003a74:	2b40      	cmp	r3, #64	; 0x40
 8003a76:	d10e      	bne.n	8003a96 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8003a78:	687b      	ldr	r3, [r7, #4]
 8003a7a:	681b      	ldr	r3, [r3, #0]
 8003a7c:	68db      	ldr	r3, [r3, #12]
 8003a7e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003a82:	2b40      	cmp	r3, #64	; 0x40
 8003a84:	d107      	bne.n	8003a96 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8003a86:	687b      	ldr	r3, [r7, #4]
 8003a88:	681b      	ldr	r3, [r3, #0]
 8003a8a:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8003a8e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8003a90:	6878      	ldr	r0, [r7, #4]
 8003a92:	f000 f909 	bl	8003ca8 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8003a96:	687b      	ldr	r3, [r7, #4]
 8003a98:	681b      	ldr	r3, [r3, #0]
 8003a9a:	691b      	ldr	r3, [r3, #16]
 8003a9c:	f003 0320 	and.w	r3, r3, #32
 8003aa0:	2b20      	cmp	r3, #32
 8003aa2:	d10e      	bne.n	8003ac2 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8003aa4:	687b      	ldr	r3, [r7, #4]
 8003aa6:	681b      	ldr	r3, [r3, #0]
 8003aa8:	68db      	ldr	r3, [r3, #12]
 8003aaa:	f003 0320 	and.w	r3, r3, #32
 8003aae:	2b20      	cmp	r3, #32
 8003ab0:	d107      	bne.n	8003ac2 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8003ab2:	687b      	ldr	r3, [r7, #4]
 8003ab4:	681b      	ldr	r3, [r3, #0]
 8003ab6:	f06f 0220 	mvn.w	r2, #32
 8003aba:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8003abc:	6878      	ldr	r0, [r7, #4]
 8003abe:	f000 faa5 	bl	800400c <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8003ac2:	bf00      	nop
 8003ac4:	3708      	adds	r7, #8
 8003ac6:	46bd      	mov	sp, r7
 8003ac8:	bd80      	pop	{r7, pc}

08003aca <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8003aca:	b580      	push	{r7, lr}
 8003acc:	b084      	sub	sp, #16
 8003ace:	af00      	add	r7, sp, #0
 8003ad0:	6078      	str	r0, [r7, #4]
 8003ad2:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8003ad4:	2300      	movs	r3, #0
 8003ad6:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8003ad8:	687b      	ldr	r3, [r7, #4]
 8003ada:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003ade:	2b01      	cmp	r3, #1
 8003ae0:	d101      	bne.n	8003ae6 <HAL_TIM_ConfigClockSource+0x1c>
 8003ae2:	2302      	movs	r3, #2
 8003ae4:	e0b4      	b.n	8003c50 <HAL_TIM_ConfigClockSource+0x186>
 8003ae6:	687b      	ldr	r3, [r7, #4]
 8003ae8:	2201      	movs	r2, #1
 8003aea:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8003aee:	687b      	ldr	r3, [r7, #4]
 8003af0:	2202      	movs	r2, #2
 8003af2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8003af6:	687b      	ldr	r3, [r7, #4]
 8003af8:	681b      	ldr	r3, [r3, #0]
 8003afa:	689b      	ldr	r3, [r3, #8]
 8003afc:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8003afe:	68bb      	ldr	r3, [r7, #8]
 8003b00:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 8003b04:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8003b06:	68bb      	ldr	r3, [r7, #8]
 8003b08:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8003b0c:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8003b0e:	687b      	ldr	r3, [r7, #4]
 8003b10:	681b      	ldr	r3, [r3, #0]
 8003b12:	68ba      	ldr	r2, [r7, #8]
 8003b14:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8003b16:	683b      	ldr	r3, [r7, #0]
 8003b18:	681b      	ldr	r3, [r3, #0]
 8003b1a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003b1e:	d03e      	beq.n	8003b9e <HAL_TIM_ConfigClockSource+0xd4>
 8003b20:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003b24:	f200 8087 	bhi.w	8003c36 <HAL_TIM_ConfigClockSource+0x16c>
 8003b28:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003b2c:	f000 8086 	beq.w	8003c3c <HAL_TIM_ConfigClockSource+0x172>
 8003b30:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003b34:	d87f      	bhi.n	8003c36 <HAL_TIM_ConfigClockSource+0x16c>
 8003b36:	2b70      	cmp	r3, #112	; 0x70
 8003b38:	d01a      	beq.n	8003b70 <HAL_TIM_ConfigClockSource+0xa6>
 8003b3a:	2b70      	cmp	r3, #112	; 0x70
 8003b3c:	d87b      	bhi.n	8003c36 <HAL_TIM_ConfigClockSource+0x16c>
 8003b3e:	2b60      	cmp	r3, #96	; 0x60
 8003b40:	d050      	beq.n	8003be4 <HAL_TIM_ConfigClockSource+0x11a>
 8003b42:	2b60      	cmp	r3, #96	; 0x60
 8003b44:	d877      	bhi.n	8003c36 <HAL_TIM_ConfigClockSource+0x16c>
 8003b46:	2b50      	cmp	r3, #80	; 0x50
 8003b48:	d03c      	beq.n	8003bc4 <HAL_TIM_ConfigClockSource+0xfa>
 8003b4a:	2b50      	cmp	r3, #80	; 0x50
 8003b4c:	d873      	bhi.n	8003c36 <HAL_TIM_ConfigClockSource+0x16c>
 8003b4e:	2b40      	cmp	r3, #64	; 0x40
 8003b50:	d058      	beq.n	8003c04 <HAL_TIM_ConfigClockSource+0x13a>
 8003b52:	2b40      	cmp	r3, #64	; 0x40
 8003b54:	d86f      	bhi.n	8003c36 <HAL_TIM_ConfigClockSource+0x16c>
 8003b56:	2b30      	cmp	r3, #48	; 0x30
 8003b58:	d064      	beq.n	8003c24 <HAL_TIM_ConfigClockSource+0x15a>
 8003b5a:	2b30      	cmp	r3, #48	; 0x30
 8003b5c:	d86b      	bhi.n	8003c36 <HAL_TIM_ConfigClockSource+0x16c>
 8003b5e:	2b20      	cmp	r3, #32
 8003b60:	d060      	beq.n	8003c24 <HAL_TIM_ConfigClockSource+0x15a>
 8003b62:	2b20      	cmp	r3, #32
 8003b64:	d867      	bhi.n	8003c36 <HAL_TIM_ConfigClockSource+0x16c>
 8003b66:	2b00      	cmp	r3, #0
 8003b68:	d05c      	beq.n	8003c24 <HAL_TIM_ConfigClockSource+0x15a>
 8003b6a:	2b10      	cmp	r3, #16
 8003b6c:	d05a      	beq.n	8003c24 <HAL_TIM_ConfigClockSource+0x15a>
 8003b6e:	e062      	b.n	8003c36 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8003b70:	687b      	ldr	r3, [r7, #4]
 8003b72:	6818      	ldr	r0, [r3, #0]
 8003b74:	683b      	ldr	r3, [r7, #0]
 8003b76:	6899      	ldr	r1, [r3, #8]
 8003b78:	683b      	ldr	r3, [r7, #0]
 8003b7a:	685a      	ldr	r2, [r3, #4]
 8003b7c:	683b      	ldr	r3, [r7, #0]
 8003b7e:	68db      	ldr	r3, [r3, #12]
 8003b80:	f000 f9b0 	bl	8003ee4 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8003b84:	687b      	ldr	r3, [r7, #4]
 8003b86:	681b      	ldr	r3, [r3, #0]
 8003b88:	689b      	ldr	r3, [r3, #8]
 8003b8a:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8003b8c:	68bb      	ldr	r3, [r7, #8]
 8003b8e:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8003b92:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8003b94:	687b      	ldr	r3, [r7, #4]
 8003b96:	681b      	ldr	r3, [r3, #0]
 8003b98:	68ba      	ldr	r2, [r7, #8]
 8003b9a:	609a      	str	r2, [r3, #8]
      break;
 8003b9c:	e04f      	b.n	8003c3e <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8003b9e:	687b      	ldr	r3, [r7, #4]
 8003ba0:	6818      	ldr	r0, [r3, #0]
 8003ba2:	683b      	ldr	r3, [r7, #0]
 8003ba4:	6899      	ldr	r1, [r3, #8]
 8003ba6:	683b      	ldr	r3, [r7, #0]
 8003ba8:	685a      	ldr	r2, [r3, #4]
 8003baa:	683b      	ldr	r3, [r7, #0]
 8003bac:	68db      	ldr	r3, [r3, #12]
 8003bae:	f000 f999 	bl	8003ee4 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8003bb2:	687b      	ldr	r3, [r7, #4]
 8003bb4:	681b      	ldr	r3, [r3, #0]
 8003bb6:	689a      	ldr	r2, [r3, #8]
 8003bb8:	687b      	ldr	r3, [r7, #4]
 8003bba:	681b      	ldr	r3, [r3, #0]
 8003bbc:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8003bc0:	609a      	str	r2, [r3, #8]
      break;
 8003bc2:	e03c      	b.n	8003c3e <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8003bc4:	687b      	ldr	r3, [r7, #4]
 8003bc6:	6818      	ldr	r0, [r3, #0]
 8003bc8:	683b      	ldr	r3, [r7, #0]
 8003bca:	6859      	ldr	r1, [r3, #4]
 8003bcc:	683b      	ldr	r3, [r7, #0]
 8003bce:	68db      	ldr	r3, [r3, #12]
 8003bd0:	461a      	mov	r2, r3
 8003bd2:	f000 f90d 	bl	8003df0 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8003bd6:	687b      	ldr	r3, [r7, #4]
 8003bd8:	681b      	ldr	r3, [r3, #0]
 8003bda:	2150      	movs	r1, #80	; 0x50
 8003bdc:	4618      	mov	r0, r3
 8003bde:	f000 f966 	bl	8003eae <TIM_ITRx_SetConfig>
      break;
 8003be2:	e02c      	b.n	8003c3e <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8003be4:	687b      	ldr	r3, [r7, #4]
 8003be6:	6818      	ldr	r0, [r3, #0]
 8003be8:	683b      	ldr	r3, [r7, #0]
 8003bea:	6859      	ldr	r1, [r3, #4]
 8003bec:	683b      	ldr	r3, [r7, #0]
 8003bee:	68db      	ldr	r3, [r3, #12]
 8003bf0:	461a      	mov	r2, r3
 8003bf2:	f000 f92c 	bl	8003e4e <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8003bf6:	687b      	ldr	r3, [r7, #4]
 8003bf8:	681b      	ldr	r3, [r3, #0]
 8003bfa:	2160      	movs	r1, #96	; 0x60
 8003bfc:	4618      	mov	r0, r3
 8003bfe:	f000 f956 	bl	8003eae <TIM_ITRx_SetConfig>
      break;
 8003c02:	e01c      	b.n	8003c3e <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8003c04:	687b      	ldr	r3, [r7, #4]
 8003c06:	6818      	ldr	r0, [r3, #0]
 8003c08:	683b      	ldr	r3, [r7, #0]
 8003c0a:	6859      	ldr	r1, [r3, #4]
 8003c0c:	683b      	ldr	r3, [r7, #0]
 8003c0e:	68db      	ldr	r3, [r3, #12]
 8003c10:	461a      	mov	r2, r3
 8003c12:	f000 f8ed 	bl	8003df0 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8003c16:	687b      	ldr	r3, [r7, #4]
 8003c18:	681b      	ldr	r3, [r3, #0]
 8003c1a:	2140      	movs	r1, #64	; 0x40
 8003c1c:	4618      	mov	r0, r3
 8003c1e:	f000 f946 	bl	8003eae <TIM_ITRx_SetConfig>
      break;
 8003c22:	e00c      	b.n	8003c3e <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8003c24:	687b      	ldr	r3, [r7, #4]
 8003c26:	681a      	ldr	r2, [r3, #0]
 8003c28:	683b      	ldr	r3, [r7, #0]
 8003c2a:	681b      	ldr	r3, [r3, #0]
 8003c2c:	4619      	mov	r1, r3
 8003c2e:	4610      	mov	r0, r2
 8003c30:	f000 f93d 	bl	8003eae <TIM_ITRx_SetConfig>
      break;
 8003c34:	e003      	b.n	8003c3e <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 8003c36:	2301      	movs	r3, #1
 8003c38:	73fb      	strb	r3, [r7, #15]
      break;
 8003c3a:	e000      	b.n	8003c3e <HAL_TIM_ConfigClockSource+0x174>
      break;
 8003c3c:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8003c3e:	687b      	ldr	r3, [r7, #4]
 8003c40:	2201      	movs	r2, #1
 8003c42:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8003c46:	687b      	ldr	r3, [r7, #4]
 8003c48:	2200      	movs	r2, #0
 8003c4a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8003c4e:	7bfb      	ldrb	r3, [r7, #15]
}
 8003c50:	4618      	mov	r0, r3
 8003c52:	3710      	adds	r7, #16
 8003c54:	46bd      	mov	sp, r7
 8003c56:	bd80      	pop	{r7, pc}

08003c58 <HAL_TIM_PeriodElapsedCallback>:
  * @brief  Period elapsed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8003c58:	b480      	push	{r7}
 8003c5a:	b083      	sub	sp, #12
 8003c5c:	af00      	add	r7, sp, #0
 8003c5e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PeriodElapsedCallback could be implemented in the user file
   */
}
 8003c60:	bf00      	nop
 8003c62:	370c      	adds	r7, #12
 8003c64:	46bd      	mov	sp, r7
 8003c66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c6a:	4770      	bx	lr

08003c6c <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8003c6c:	b480      	push	{r7}
 8003c6e:	b083      	sub	sp, #12
 8003c70:	af00      	add	r7, sp, #0
 8003c72:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8003c74:	bf00      	nop
 8003c76:	370c      	adds	r7, #12
 8003c78:	46bd      	mov	sp, r7
 8003c7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c7e:	4770      	bx	lr

08003c80 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8003c80:	b480      	push	{r7}
 8003c82:	b083      	sub	sp, #12
 8003c84:	af00      	add	r7, sp, #0
 8003c86:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8003c88:	bf00      	nop
 8003c8a:	370c      	adds	r7, #12
 8003c8c:	46bd      	mov	sp, r7
 8003c8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c92:	4770      	bx	lr

08003c94 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8003c94:	b480      	push	{r7}
 8003c96:	b083      	sub	sp, #12
 8003c98:	af00      	add	r7, sp, #0
 8003c9a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8003c9c:	bf00      	nop
 8003c9e:	370c      	adds	r7, #12
 8003ca0:	46bd      	mov	sp, r7
 8003ca2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ca6:	4770      	bx	lr

08003ca8 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8003ca8:	b480      	push	{r7}
 8003caa:	b083      	sub	sp, #12
 8003cac:	af00      	add	r7, sp, #0
 8003cae:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8003cb0:	bf00      	nop
 8003cb2:	370c      	adds	r7, #12
 8003cb4:	46bd      	mov	sp, r7
 8003cb6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003cba:	4770      	bx	lr

08003cbc <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8003cbc:	b480      	push	{r7}
 8003cbe:	b085      	sub	sp, #20
 8003cc0:	af00      	add	r7, sp, #0
 8003cc2:	6078      	str	r0, [r7, #4]
 8003cc4:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8003cc6:	687b      	ldr	r3, [r7, #4]
 8003cc8:	681b      	ldr	r3, [r3, #0]
 8003cca:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8003ccc:	687b      	ldr	r3, [r7, #4]
 8003cce:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003cd2:	d00f      	beq.n	8003cf4 <TIM_Base_SetConfig+0x38>
 8003cd4:	687b      	ldr	r3, [r7, #4]
 8003cd6:	4a3c      	ldr	r2, [pc, #240]	; (8003dc8 <TIM_Base_SetConfig+0x10c>)
 8003cd8:	4293      	cmp	r3, r2
 8003cda:	d00b      	beq.n	8003cf4 <TIM_Base_SetConfig+0x38>
 8003cdc:	687b      	ldr	r3, [r7, #4]
 8003cde:	4a3b      	ldr	r2, [pc, #236]	; (8003dcc <TIM_Base_SetConfig+0x110>)
 8003ce0:	4293      	cmp	r3, r2
 8003ce2:	d007      	beq.n	8003cf4 <TIM_Base_SetConfig+0x38>
 8003ce4:	687b      	ldr	r3, [r7, #4]
 8003ce6:	4a3a      	ldr	r2, [pc, #232]	; (8003dd0 <TIM_Base_SetConfig+0x114>)
 8003ce8:	4293      	cmp	r3, r2
 8003cea:	d003      	beq.n	8003cf4 <TIM_Base_SetConfig+0x38>
 8003cec:	687b      	ldr	r3, [r7, #4]
 8003cee:	4a39      	ldr	r2, [pc, #228]	; (8003dd4 <TIM_Base_SetConfig+0x118>)
 8003cf0:	4293      	cmp	r3, r2
 8003cf2:	d108      	bne.n	8003d06 <TIM_Base_SetConfig+0x4a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8003cf4:	68fb      	ldr	r3, [r7, #12]
 8003cf6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003cfa:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8003cfc:	683b      	ldr	r3, [r7, #0]
 8003cfe:	685b      	ldr	r3, [r3, #4]
 8003d00:	68fa      	ldr	r2, [r7, #12]
 8003d02:	4313      	orrs	r3, r2
 8003d04:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8003d06:	687b      	ldr	r3, [r7, #4]
 8003d08:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003d0c:	d027      	beq.n	8003d5e <TIM_Base_SetConfig+0xa2>
 8003d0e:	687b      	ldr	r3, [r7, #4]
 8003d10:	4a2d      	ldr	r2, [pc, #180]	; (8003dc8 <TIM_Base_SetConfig+0x10c>)
 8003d12:	4293      	cmp	r3, r2
 8003d14:	d023      	beq.n	8003d5e <TIM_Base_SetConfig+0xa2>
 8003d16:	687b      	ldr	r3, [r7, #4]
 8003d18:	4a2c      	ldr	r2, [pc, #176]	; (8003dcc <TIM_Base_SetConfig+0x110>)
 8003d1a:	4293      	cmp	r3, r2
 8003d1c:	d01f      	beq.n	8003d5e <TIM_Base_SetConfig+0xa2>
 8003d1e:	687b      	ldr	r3, [r7, #4]
 8003d20:	4a2b      	ldr	r2, [pc, #172]	; (8003dd0 <TIM_Base_SetConfig+0x114>)
 8003d22:	4293      	cmp	r3, r2
 8003d24:	d01b      	beq.n	8003d5e <TIM_Base_SetConfig+0xa2>
 8003d26:	687b      	ldr	r3, [r7, #4]
 8003d28:	4a2b      	ldr	r2, [pc, #172]	; (8003dd8 <TIM_Base_SetConfig+0x11c>)
 8003d2a:	4293      	cmp	r3, r2
 8003d2c:	d017      	beq.n	8003d5e <TIM_Base_SetConfig+0xa2>
 8003d2e:	687b      	ldr	r3, [r7, #4]
 8003d30:	4a2a      	ldr	r2, [pc, #168]	; (8003ddc <TIM_Base_SetConfig+0x120>)
 8003d32:	4293      	cmp	r3, r2
 8003d34:	d013      	beq.n	8003d5e <TIM_Base_SetConfig+0xa2>
 8003d36:	687b      	ldr	r3, [r7, #4]
 8003d38:	4a29      	ldr	r2, [pc, #164]	; (8003de0 <TIM_Base_SetConfig+0x124>)
 8003d3a:	4293      	cmp	r3, r2
 8003d3c:	d00f      	beq.n	8003d5e <TIM_Base_SetConfig+0xa2>
 8003d3e:	687b      	ldr	r3, [r7, #4]
 8003d40:	4a28      	ldr	r2, [pc, #160]	; (8003de4 <TIM_Base_SetConfig+0x128>)
 8003d42:	4293      	cmp	r3, r2
 8003d44:	d00b      	beq.n	8003d5e <TIM_Base_SetConfig+0xa2>
 8003d46:	687b      	ldr	r3, [r7, #4]
 8003d48:	4a27      	ldr	r2, [pc, #156]	; (8003de8 <TIM_Base_SetConfig+0x12c>)
 8003d4a:	4293      	cmp	r3, r2
 8003d4c:	d007      	beq.n	8003d5e <TIM_Base_SetConfig+0xa2>
 8003d4e:	687b      	ldr	r3, [r7, #4]
 8003d50:	4a26      	ldr	r2, [pc, #152]	; (8003dec <TIM_Base_SetConfig+0x130>)
 8003d52:	4293      	cmp	r3, r2
 8003d54:	d003      	beq.n	8003d5e <TIM_Base_SetConfig+0xa2>
 8003d56:	687b      	ldr	r3, [r7, #4]
 8003d58:	4a1e      	ldr	r2, [pc, #120]	; (8003dd4 <TIM_Base_SetConfig+0x118>)
 8003d5a:	4293      	cmp	r3, r2
 8003d5c:	d108      	bne.n	8003d70 <TIM_Base_SetConfig+0xb4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8003d5e:	68fb      	ldr	r3, [r7, #12]
 8003d60:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003d64:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8003d66:	683b      	ldr	r3, [r7, #0]
 8003d68:	68db      	ldr	r3, [r3, #12]
 8003d6a:	68fa      	ldr	r2, [r7, #12]
 8003d6c:	4313      	orrs	r3, r2
 8003d6e:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8003d70:	68fb      	ldr	r3, [r7, #12]
 8003d72:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8003d76:	683b      	ldr	r3, [r7, #0]
 8003d78:	695b      	ldr	r3, [r3, #20]
 8003d7a:	4313      	orrs	r3, r2
 8003d7c:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8003d7e:	687b      	ldr	r3, [r7, #4]
 8003d80:	68fa      	ldr	r2, [r7, #12]
 8003d82:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8003d84:	683b      	ldr	r3, [r7, #0]
 8003d86:	689a      	ldr	r2, [r3, #8]
 8003d88:	687b      	ldr	r3, [r7, #4]
 8003d8a:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8003d8c:	683b      	ldr	r3, [r7, #0]
 8003d8e:	681a      	ldr	r2, [r3, #0]
 8003d90:	687b      	ldr	r3, [r7, #4]
 8003d92:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8003d94:	687b      	ldr	r3, [r7, #4]
 8003d96:	4a13      	ldr	r2, [pc, #76]	; (8003de4 <TIM_Base_SetConfig+0x128>)
 8003d98:	4293      	cmp	r3, r2
 8003d9a:	d007      	beq.n	8003dac <TIM_Base_SetConfig+0xf0>
 8003d9c:	687b      	ldr	r3, [r7, #4]
 8003d9e:	4a12      	ldr	r2, [pc, #72]	; (8003de8 <TIM_Base_SetConfig+0x12c>)
 8003da0:	4293      	cmp	r3, r2
 8003da2:	d003      	beq.n	8003dac <TIM_Base_SetConfig+0xf0>
 8003da4:	687b      	ldr	r3, [r7, #4]
 8003da6:	4a11      	ldr	r2, [pc, #68]	; (8003dec <TIM_Base_SetConfig+0x130>)
 8003da8:	4293      	cmp	r3, r2
 8003daa:	d103      	bne.n	8003db4 <TIM_Base_SetConfig+0xf8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8003dac:	683b      	ldr	r3, [r7, #0]
 8003dae:	691a      	ldr	r2, [r3, #16]
 8003db0:	687b      	ldr	r3, [r7, #4]
 8003db2:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8003db4:	687b      	ldr	r3, [r7, #4]
 8003db6:	2201      	movs	r2, #1
 8003db8:	615a      	str	r2, [r3, #20]
}
 8003dba:	bf00      	nop
 8003dbc:	3714      	adds	r7, #20
 8003dbe:	46bd      	mov	sp, r7
 8003dc0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003dc4:	4770      	bx	lr
 8003dc6:	bf00      	nop
 8003dc8:	40000400 	.word	0x40000400
 8003dcc:	40000800 	.word	0x40000800
 8003dd0:	40000c00 	.word	0x40000c00
 8003dd4:	40015c00 	.word	0x40015c00
 8003dd8:	40001800 	.word	0x40001800
 8003ddc:	40001c00 	.word	0x40001c00
 8003de0:	40002000 	.word	0x40002000
 8003de4:	40014000 	.word	0x40014000
 8003de8:	40014400 	.word	0x40014400
 8003dec:	40014800 	.word	0x40014800

08003df0 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8003df0:	b480      	push	{r7}
 8003df2:	b087      	sub	sp, #28
 8003df4:	af00      	add	r7, sp, #0
 8003df6:	60f8      	str	r0, [r7, #12]
 8003df8:	60b9      	str	r1, [r7, #8]
 8003dfa:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8003dfc:	68fb      	ldr	r3, [r7, #12]
 8003dfe:	6a1b      	ldr	r3, [r3, #32]
 8003e00:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8003e02:	68fb      	ldr	r3, [r7, #12]
 8003e04:	6a1b      	ldr	r3, [r3, #32]
 8003e06:	f023 0201 	bic.w	r2, r3, #1
 8003e0a:	68fb      	ldr	r3, [r7, #12]
 8003e0c:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8003e0e:	68fb      	ldr	r3, [r7, #12]
 8003e10:	699b      	ldr	r3, [r3, #24]
 8003e12:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8003e14:	693b      	ldr	r3, [r7, #16]
 8003e16:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8003e1a:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8003e1c:	687b      	ldr	r3, [r7, #4]
 8003e1e:	011b      	lsls	r3, r3, #4
 8003e20:	693a      	ldr	r2, [r7, #16]
 8003e22:	4313      	orrs	r3, r2
 8003e24:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8003e26:	697b      	ldr	r3, [r7, #20]
 8003e28:	f023 030a 	bic.w	r3, r3, #10
 8003e2c:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8003e2e:	697a      	ldr	r2, [r7, #20]
 8003e30:	68bb      	ldr	r3, [r7, #8]
 8003e32:	4313      	orrs	r3, r2
 8003e34:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8003e36:	68fb      	ldr	r3, [r7, #12]
 8003e38:	693a      	ldr	r2, [r7, #16]
 8003e3a:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8003e3c:	68fb      	ldr	r3, [r7, #12]
 8003e3e:	697a      	ldr	r2, [r7, #20]
 8003e40:	621a      	str	r2, [r3, #32]
}
 8003e42:	bf00      	nop
 8003e44:	371c      	adds	r7, #28
 8003e46:	46bd      	mov	sp, r7
 8003e48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e4c:	4770      	bx	lr

08003e4e <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8003e4e:	b480      	push	{r7}
 8003e50:	b087      	sub	sp, #28
 8003e52:	af00      	add	r7, sp, #0
 8003e54:	60f8      	str	r0, [r7, #12]
 8003e56:	60b9      	str	r1, [r7, #8]
 8003e58:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8003e5a:	68fb      	ldr	r3, [r7, #12]
 8003e5c:	6a1b      	ldr	r3, [r3, #32]
 8003e5e:	f023 0210 	bic.w	r2, r3, #16
 8003e62:	68fb      	ldr	r3, [r7, #12]
 8003e64:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8003e66:	68fb      	ldr	r3, [r7, #12]
 8003e68:	699b      	ldr	r3, [r3, #24]
 8003e6a:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8003e6c:	68fb      	ldr	r3, [r7, #12]
 8003e6e:	6a1b      	ldr	r3, [r3, #32]
 8003e70:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8003e72:	697b      	ldr	r3, [r7, #20]
 8003e74:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8003e78:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8003e7a:	687b      	ldr	r3, [r7, #4]
 8003e7c:	031b      	lsls	r3, r3, #12
 8003e7e:	697a      	ldr	r2, [r7, #20]
 8003e80:	4313      	orrs	r3, r2
 8003e82:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8003e84:	693b      	ldr	r3, [r7, #16]
 8003e86:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8003e8a:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8003e8c:	68bb      	ldr	r3, [r7, #8]
 8003e8e:	011b      	lsls	r3, r3, #4
 8003e90:	693a      	ldr	r2, [r7, #16]
 8003e92:	4313      	orrs	r3, r2
 8003e94:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8003e96:	68fb      	ldr	r3, [r7, #12]
 8003e98:	697a      	ldr	r2, [r7, #20]
 8003e9a:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8003e9c:	68fb      	ldr	r3, [r7, #12]
 8003e9e:	693a      	ldr	r2, [r7, #16]
 8003ea0:	621a      	str	r2, [r3, #32]
}
 8003ea2:	bf00      	nop
 8003ea4:	371c      	adds	r7, #28
 8003ea6:	46bd      	mov	sp, r7
 8003ea8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003eac:	4770      	bx	lr

08003eae <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8003eae:	b480      	push	{r7}
 8003eb0:	b085      	sub	sp, #20
 8003eb2:	af00      	add	r7, sp, #0
 8003eb4:	6078      	str	r0, [r7, #4]
 8003eb6:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8003eb8:	687b      	ldr	r3, [r7, #4]
 8003eba:	689b      	ldr	r3, [r3, #8]
 8003ebc:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8003ebe:	68fb      	ldr	r3, [r7, #12]
 8003ec0:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003ec4:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8003ec6:	683a      	ldr	r2, [r7, #0]
 8003ec8:	68fb      	ldr	r3, [r7, #12]
 8003eca:	4313      	orrs	r3, r2
 8003ecc:	f043 0307 	orr.w	r3, r3, #7
 8003ed0:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8003ed2:	687b      	ldr	r3, [r7, #4]
 8003ed4:	68fa      	ldr	r2, [r7, #12]
 8003ed6:	609a      	str	r2, [r3, #8]
}
 8003ed8:	bf00      	nop
 8003eda:	3714      	adds	r7, #20
 8003edc:	46bd      	mov	sp, r7
 8003ede:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ee2:	4770      	bx	lr

08003ee4 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8003ee4:	b480      	push	{r7}
 8003ee6:	b087      	sub	sp, #28
 8003ee8:	af00      	add	r7, sp, #0
 8003eea:	60f8      	str	r0, [r7, #12]
 8003eec:	60b9      	str	r1, [r7, #8]
 8003eee:	607a      	str	r2, [r7, #4]
 8003ef0:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8003ef2:	68fb      	ldr	r3, [r7, #12]
 8003ef4:	689b      	ldr	r3, [r3, #8]
 8003ef6:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8003ef8:	697b      	ldr	r3, [r7, #20]
 8003efa:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8003efe:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8003f00:	683b      	ldr	r3, [r7, #0]
 8003f02:	021a      	lsls	r2, r3, #8
 8003f04:	687b      	ldr	r3, [r7, #4]
 8003f06:	431a      	orrs	r2, r3
 8003f08:	68bb      	ldr	r3, [r7, #8]
 8003f0a:	4313      	orrs	r3, r2
 8003f0c:	697a      	ldr	r2, [r7, #20]
 8003f0e:	4313      	orrs	r3, r2
 8003f10:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8003f12:	68fb      	ldr	r3, [r7, #12]
 8003f14:	697a      	ldr	r2, [r7, #20]
 8003f16:	609a      	str	r2, [r3, #8]
}
 8003f18:	bf00      	nop
 8003f1a:	371c      	adds	r7, #28
 8003f1c:	46bd      	mov	sp, r7
 8003f1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f22:	4770      	bx	lr

08003f24 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8003f24:	b480      	push	{r7}
 8003f26:	b085      	sub	sp, #20
 8003f28:	af00      	add	r7, sp, #0
 8003f2a:	6078      	str	r0, [r7, #4]
 8003f2c:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8003f2e:	687b      	ldr	r3, [r7, #4]
 8003f30:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003f34:	2b01      	cmp	r3, #1
 8003f36:	d101      	bne.n	8003f3c <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8003f38:	2302      	movs	r3, #2
 8003f3a:	e055      	b.n	8003fe8 <HAL_TIMEx_MasterConfigSynchronization+0xc4>
 8003f3c:	687b      	ldr	r3, [r7, #4]
 8003f3e:	2201      	movs	r2, #1
 8003f40:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003f44:	687b      	ldr	r3, [r7, #4]
 8003f46:	2202      	movs	r2, #2
 8003f48:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8003f4c:	687b      	ldr	r3, [r7, #4]
 8003f4e:	681b      	ldr	r3, [r3, #0]
 8003f50:	685b      	ldr	r3, [r3, #4]
 8003f52:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8003f54:	687b      	ldr	r3, [r7, #4]
 8003f56:	681b      	ldr	r3, [r3, #0]
 8003f58:	689b      	ldr	r3, [r3, #8]
 8003f5a:	60bb      	str	r3, [r7, #8]
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
  }
#endif /* TIM_CR2_MMS2 */

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8003f5c:	68fb      	ldr	r3, [r7, #12]
 8003f5e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003f62:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8003f64:	683b      	ldr	r3, [r7, #0]
 8003f66:	681b      	ldr	r3, [r3, #0]
 8003f68:	68fa      	ldr	r2, [r7, #12]
 8003f6a:	4313      	orrs	r3, r2
 8003f6c:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8003f6e:	687b      	ldr	r3, [r7, #4]
 8003f70:	681b      	ldr	r3, [r3, #0]
 8003f72:	68fa      	ldr	r2, [r7, #12]
 8003f74:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8003f76:	687b      	ldr	r3, [r7, #4]
 8003f78:	681b      	ldr	r3, [r3, #0]
 8003f7a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003f7e:	d01d      	beq.n	8003fbc <HAL_TIMEx_MasterConfigSynchronization+0x98>
 8003f80:	687b      	ldr	r3, [r7, #4]
 8003f82:	681b      	ldr	r3, [r3, #0]
 8003f84:	4a1b      	ldr	r2, [pc, #108]	; (8003ff4 <HAL_TIMEx_MasterConfigSynchronization+0xd0>)
 8003f86:	4293      	cmp	r3, r2
 8003f88:	d018      	beq.n	8003fbc <HAL_TIMEx_MasterConfigSynchronization+0x98>
 8003f8a:	687b      	ldr	r3, [r7, #4]
 8003f8c:	681b      	ldr	r3, [r3, #0]
 8003f8e:	4a1a      	ldr	r2, [pc, #104]	; (8003ff8 <HAL_TIMEx_MasterConfigSynchronization+0xd4>)
 8003f90:	4293      	cmp	r3, r2
 8003f92:	d013      	beq.n	8003fbc <HAL_TIMEx_MasterConfigSynchronization+0x98>
 8003f94:	687b      	ldr	r3, [r7, #4]
 8003f96:	681b      	ldr	r3, [r3, #0]
 8003f98:	4a18      	ldr	r2, [pc, #96]	; (8003ffc <HAL_TIMEx_MasterConfigSynchronization+0xd8>)
 8003f9a:	4293      	cmp	r3, r2
 8003f9c:	d00e      	beq.n	8003fbc <HAL_TIMEx_MasterConfigSynchronization+0x98>
 8003f9e:	687b      	ldr	r3, [r7, #4]
 8003fa0:	681b      	ldr	r3, [r3, #0]
 8003fa2:	4a17      	ldr	r2, [pc, #92]	; (8004000 <HAL_TIMEx_MasterConfigSynchronization+0xdc>)
 8003fa4:	4293      	cmp	r3, r2
 8003fa6:	d009      	beq.n	8003fbc <HAL_TIMEx_MasterConfigSynchronization+0x98>
 8003fa8:	687b      	ldr	r3, [r7, #4]
 8003faa:	681b      	ldr	r3, [r3, #0]
 8003fac:	4a15      	ldr	r2, [pc, #84]	; (8004004 <HAL_TIMEx_MasterConfigSynchronization+0xe0>)
 8003fae:	4293      	cmp	r3, r2
 8003fb0:	d004      	beq.n	8003fbc <HAL_TIMEx_MasterConfigSynchronization+0x98>
 8003fb2:	687b      	ldr	r3, [r7, #4]
 8003fb4:	681b      	ldr	r3, [r3, #0]
 8003fb6:	4a14      	ldr	r2, [pc, #80]	; (8004008 <HAL_TIMEx_MasterConfigSynchronization+0xe4>)
 8003fb8:	4293      	cmp	r3, r2
 8003fba:	d10c      	bne.n	8003fd6 <HAL_TIMEx_MasterConfigSynchronization+0xb2>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8003fbc:	68bb      	ldr	r3, [r7, #8]
 8003fbe:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8003fc2:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8003fc4:	683b      	ldr	r3, [r7, #0]
 8003fc6:	685b      	ldr	r3, [r3, #4]
 8003fc8:	68ba      	ldr	r2, [r7, #8]
 8003fca:	4313      	orrs	r3, r2
 8003fcc:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8003fce:	687b      	ldr	r3, [r7, #4]
 8003fd0:	681b      	ldr	r3, [r3, #0]
 8003fd2:	68ba      	ldr	r2, [r7, #8]
 8003fd4:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8003fd6:	687b      	ldr	r3, [r7, #4]
 8003fd8:	2201      	movs	r2, #1
 8003fda:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8003fde:	687b      	ldr	r3, [r7, #4]
 8003fe0:	2200      	movs	r2, #0
 8003fe2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8003fe6:	2300      	movs	r3, #0
}
 8003fe8:	4618      	mov	r0, r3
 8003fea:	3714      	adds	r7, #20
 8003fec:	46bd      	mov	sp, r7
 8003fee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ff2:	4770      	bx	lr
 8003ff4:	40000400 	.word	0x40000400
 8003ff8:	40000800 	.word	0x40000800
 8003ffc:	40000c00 	.word	0x40000c00
 8004000:	40001800 	.word	0x40001800
 8004004:	40014000 	.word	0x40014000
 8004008:	40015c00 	.word	0x40015c00

0800400c <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 800400c:	b480      	push	{r7}
 800400e:	b083      	sub	sp, #12
 8004010:	af00      	add	r7, sp, #0
 8004012:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8004014:	bf00      	nop
 8004016:	370c      	adds	r7, #12
 8004018:	46bd      	mov	sp, r7
 800401a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800401e:	4770      	bx	lr

08004020 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8004020:	b480      	push	{r7}
 8004022:	b083      	sub	sp, #12
 8004024:	af00      	add	r7, sp, #0
 8004026:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8004028:	bf00      	nop
 800402a:	370c      	adds	r7, #12
 800402c:	46bd      	mov	sp, r7
 800402e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004032:	4770      	bx	lr

08004034 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8004034:	b580      	push	{r7, lr}
 8004036:	b082      	sub	sp, #8
 8004038:	af00      	add	r7, sp, #0
 800403a:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800403c:	687b      	ldr	r3, [r7, #4]
 800403e:	2b00      	cmp	r3, #0
 8004040:	d101      	bne.n	8004046 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8004042:	2301      	movs	r3, #1
 8004044:	e040      	b.n	80040c8 <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8004046:	687b      	ldr	r3, [r7, #4]
 8004048:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800404a:	2b00      	cmp	r3, #0
 800404c:	d106      	bne.n	800405c <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800404e:	687b      	ldr	r3, [r7, #4]
 8004050:	2200      	movs	r2, #0
 8004052:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8004056:	6878      	ldr	r0, [r7, #4]
 8004058:	f7fc fcdc 	bl	8000a14 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800405c:	687b      	ldr	r3, [r7, #4]
 800405e:	2224      	movs	r2, #36	; 0x24
 8004060:	679a      	str	r2, [r3, #120]	; 0x78

  __HAL_UART_DISABLE(huart);
 8004062:	687b      	ldr	r3, [r7, #4]
 8004064:	681b      	ldr	r3, [r3, #0]
 8004066:	681a      	ldr	r2, [r3, #0]
 8004068:	687b      	ldr	r3, [r7, #4]
 800406a:	681b      	ldr	r3, [r3, #0]
 800406c:	f022 0201 	bic.w	r2, r2, #1
 8004070:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8004072:	6878      	ldr	r0, [r7, #4]
 8004074:	f000 fb8e 	bl	8004794 <UART_SetConfig>
 8004078:	4603      	mov	r3, r0
 800407a:	2b01      	cmp	r3, #1
 800407c:	d101      	bne.n	8004082 <HAL_UART_Init+0x4e>
  {
    return HAL_ERROR;
 800407e:	2301      	movs	r3, #1
 8004080:	e022      	b.n	80040c8 <HAL_UART_Init+0x94>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8004082:	687b      	ldr	r3, [r7, #4]
 8004084:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004086:	2b00      	cmp	r3, #0
 8004088:	d002      	beq.n	8004090 <HAL_UART_Init+0x5c>
  {
    UART_AdvFeatureConfig(huart);
 800408a:	6878      	ldr	r0, [r7, #4]
 800408c:	f000 fcfc 	bl	8004a88 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8004090:	687b      	ldr	r3, [r7, #4]
 8004092:	681b      	ldr	r3, [r3, #0]
 8004094:	685a      	ldr	r2, [r3, #4]
 8004096:	687b      	ldr	r3, [r7, #4]
 8004098:	681b      	ldr	r3, [r3, #0]
 800409a:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 800409e:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80040a0:	687b      	ldr	r3, [r7, #4]
 80040a2:	681b      	ldr	r3, [r3, #0]
 80040a4:	689a      	ldr	r2, [r3, #8]
 80040a6:	687b      	ldr	r3, [r7, #4]
 80040a8:	681b      	ldr	r3, [r3, #0]
 80040aa:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 80040ae:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 80040b0:	687b      	ldr	r3, [r7, #4]
 80040b2:	681b      	ldr	r3, [r3, #0]
 80040b4:	681a      	ldr	r2, [r3, #0]
 80040b6:	687b      	ldr	r3, [r7, #4]
 80040b8:	681b      	ldr	r3, [r3, #0]
 80040ba:	f042 0201 	orr.w	r2, r2, #1
 80040be:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 80040c0:	6878      	ldr	r0, [r7, #4]
 80040c2:	f000 fd83 	bl	8004bcc <UART_CheckIdleState>
 80040c6:	4603      	mov	r3, r0
}
 80040c8:	4618      	mov	r0, r3
 80040ca:	3708      	adds	r7, #8
 80040cc:	46bd      	mov	sp, r7
 80040ce:	bd80      	pop	{r7, pc}

080040d0 <HAL_UART_Transmit_IT>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be sent.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 80040d0:	b480      	push	{r7}
 80040d2:	b08b      	sub	sp, #44	; 0x2c
 80040d4:	af00      	add	r7, sp, #0
 80040d6:	60f8      	str	r0, [r7, #12]
 80040d8:	60b9      	str	r1, [r7, #8]
 80040da:	4613      	mov	r3, r2
 80040dc:	80fb      	strh	r3, [r7, #6]
  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 80040de:	68fb      	ldr	r3, [r7, #12]
 80040e0:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80040e2:	2b20      	cmp	r3, #32
 80040e4:	d156      	bne.n	8004194 <HAL_UART_Transmit_IT+0xc4>
  {
    if ((pData == NULL) || (Size == 0U))
 80040e6:	68bb      	ldr	r3, [r7, #8]
 80040e8:	2b00      	cmp	r3, #0
 80040ea:	d002      	beq.n	80040f2 <HAL_UART_Transmit_IT+0x22>
 80040ec:	88fb      	ldrh	r3, [r7, #6]
 80040ee:	2b00      	cmp	r3, #0
 80040f0:	d101      	bne.n	80040f6 <HAL_UART_Transmit_IT+0x26>
    {
      return HAL_ERROR;
 80040f2:	2301      	movs	r3, #1
 80040f4:	e04f      	b.n	8004196 <HAL_UART_Transmit_IT+0xc6>
    }

    __HAL_LOCK(huart);
 80040f6:	68fb      	ldr	r3, [r7, #12]
 80040f8:	f893 3074 	ldrb.w	r3, [r3, #116]	; 0x74
 80040fc:	2b01      	cmp	r3, #1
 80040fe:	d101      	bne.n	8004104 <HAL_UART_Transmit_IT+0x34>
 8004100:	2302      	movs	r3, #2
 8004102:	e048      	b.n	8004196 <HAL_UART_Transmit_IT+0xc6>
 8004104:	68fb      	ldr	r3, [r7, #12]
 8004106:	2201      	movs	r2, #1
 8004108:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    huart->pTxBuffPtr  = pData;
 800410c:	68fb      	ldr	r3, [r7, #12]
 800410e:	68ba      	ldr	r2, [r7, #8]
 8004110:	64da      	str	r2, [r3, #76]	; 0x4c
    huart->TxXferSize  = Size;
 8004112:	68fb      	ldr	r3, [r7, #12]
 8004114:	88fa      	ldrh	r2, [r7, #6]
 8004116:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50
    huart->TxXferCount = Size;
 800411a:	68fb      	ldr	r3, [r7, #12]
 800411c:	88fa      	ldrh	r2, [r7, #6]
 800411e:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
    huart->TxISR       = NULL;
 8004122:	68fb      	ldr	r3, [r7, #12]
 8004124:	2200      	movs	r2, #0
 8004126:	669a      	str	r2, [r3, #104]	; 0x68

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004128:	68fb      	ldr	r3, [r7, #12]
 800412a:	2200      	movs	r2, #0
 800412c:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8004130:	68fb      	ldr	r3, [r7, #12]
 8004132:	2221      	movs	r2, #33	; 0x21
 8004134:	679a      	str	r2, [r3, #120]	; 0x78

    /* Set the Tx ISR function pointer according to the data word length */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8004136:	68fb      	ldr	r3, [r7, #12]
 8004138:	689b      	ldr	r3, [r3, #8]
 800413a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800413e:	d107      	bne.n	8004150 <HAL_UART_Transmit_IT+0x80>
 8004140:	68fb      	ldr	r3, [r7, #12]
 8004142:	691b      	ldr	r3, [r3, #16]
 8004144:	2b00      	cmp	r3, #0
 8004146:	d103      	bne.n	8004150 <HAL_UART_Transmit_IT+0x80>
    {
      huart->TxISR = UART_TxISR_16BIT;
 8004148:	68fb      	ldr	r3, [r7, #12]
 800414a:	4a16      	ldr	r2, [pc, #88]	; (80041a4 <HAL_UART_Transmit_IT+0xd4>)
 800414c:	669a      	str	r2, [r3, #104]	; 0x68
 800414e:	e002      	b.n	8004156 <HAL_UART_Transmit_IT+0x86>
    }
    else
    {
      huart->TxISR = UART_TxISR_8BIT;
 8004150:	68fb      	ldr	r3, [r7, #12]
 8004152:	4a15      	ldr	r2, [pc, #84]	; (80041a8 <HAL_UART_Transmit_IT+0xd8>)
 8004154:	669a      	str	r2, [r3, #104]	; 0x68
    }

    __HAL_UNLOCK(huart);
 8004156:	68fb      	ldr	r3, [r7, #12]
 8004158:	2200      	movs	r2, #0
 800415a:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    /* Enable the Transmit Data Register Empty interrupt */
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TXEIE);
 800415e:	68fb      	ldr	r3, [r7, #12]
 8004160:	681b      	ldr	r3, [r3, #0]
 8004162:	617b      	str	r3, [r7, #20]
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004164:	697b      	ldr	r3, [r7, #20]
 8004166:	e853 3f00 	ldrex	r3, [r3]
 800416a:	613b      	str	r3, [r7, #16]
   return(result);
 800416c:	693b      	ldr	r3, [r7, #16]
 800416e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004172:	627b      	str	r3, [r7, #36]	; 0x24
 8004174:	68fb      	ldr	r3, [r7, #12]
 8004176:	681b      	ldr	r3, [r3, #0]
 8004178:	461a      	mov	r2, r3
 800417a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800417c:	623b      	str	r3, [r7, #32]
 800417e:	61fa      	str	r2, [r7, #28]
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004180:	69f9      	ldr	r1, [r7, #28]
 8004182:	6a3a      	ldr	r2, [r7, #32]
 8004184:	e841 2300 	strex	r3, r2, [r1]
 8004188:	61bb      	str	r3, [r7, #24]
   return(result);
 800418a:	69bb      	ldr	r3, [r7, #24]
 800418c:	2b00      	cmp	r3, #0
 800418e:	d1e6      	bne.n	800415e <HAL_UART_Transmit_IT+0x8e>

    return HAL_OK;
 8004190:	2300      	movs	r3, #0
 8004192:	e000      	b.n	8004196 <HAL_UART_Transmit_IT+0xc6>
  }
  else
  {
    return HAL_BUSY;
 8004194:	2302      	movs	r3, #2
  }
}
 8004196:	4618      	mov	r0, r3
 8004198:	372c      	adds	r7, #44	; 0x2c
 800419a:	46bd      	mov	sp, r7
 800419c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80041a0:	4770      	bx	lr
 80041a2:	bf00      	nop
 80041a4:	08004f91 	.word	0x08004f91
 80041a8:	08004ed9 	.word	0x08004ed9

080041ac <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 80041ac:	b580      	push	{r7, lr}
 80041ae:	b0ba      	sub	sp, #232	; 0xe8
 80041b0:	af00      	add	r7, sp, #0
 80041b2:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 80041b4:	687b      	ldr	r3, [r7, #4]
 80041b6:	681b      	ldr	r3, [r3, #0]
 80041b8:	69db      	ldr	r3, [r3, #28]
 80041ba:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 80041be:	687b      	ldr	r3, [r7, #4]
 80041c0:	681b      	ldr	r3, [r3, #0]
 80041c2:	681b      	ldr	r3, [r3, #0]
 80041c4:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 80041c8:	687b      	ldr	r3, [r7, #4]
 80041ca:	681b      	ldr	r3, [r3, #0]
 80041cc:	689b      	ldr	r3, [r3, #8]
 80041ce:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 80041d2:	f8d7 20e4 	ldr.w	r2, [r7, #228]	; 0xe4
 80041d6:	f640 030f 	movw	r3, #2063	; 0x80f
 80041da:	4013      	ands	r3, r2
 80041dc:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == 0U)
 80041e0:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 80041e4:	2b00      	cmp	r3, #0
 80041e6:	d115      	bne.n	8004214 <HAL_UART_IRQHandler+0x68>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
    if (((isrflags & USART_ISR_RXNE) != 0U)
 80041e8:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80041ec:	f003 0320 	and.w	r3, r3, #32
 80041f0:	2b00      	cmp	r3, #0
 80041f2:	d00f      	beq.n	8004214 <HAL_UART_IRQHandler+0x68>
        && ((cr1its & USART_CR1_RXNEIE) != 0U))
 80041f4:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80041f8:	f003 0320 	and.w	r3, r3, #32
 80041fc:	2b00      	cmp	r3, #0
 80041fe:	d009      	beq.n	8004214 <HAL_UART_IRQHandler+0x68>
    {
      if (huart->RxISR != NULL)
 8004200:	687b      	ldr	r3, [r7, #4]
 8004202:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8004204:	2b00      	cmp	r3, #0
 8004206:	f000 82a3 	beq.w	8004750 <HAL_UART_IRQHandler+0x5a4>
      {
        huart->RxISR(huart);
 800420a:	687b      	ldr	r3, [r7, #4]
 800420c:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800420e:	6878      	ldr	r0, [r7, #4]
 8004210:	4798      	blx	r3
      }
      return;
 8004212:	e29d      	b.n	8004750 <HAL_UART_IRQHandler+0x5a4>
    }
  }

  /* If some errors occur */
  if ((errorflags != 0U)
 8004214:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8004218:	2b00      	cmp	r3, #0
 800421a:	f000 8117 	beq.w	800444c <HAL_UART_IRQHandler+0x2a0>
      && (((cr3its & USART_CR3_EIE) != 0U)
 800421e:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8004222:	f003 0301 	and.w	r3, r3, #1
 8004226:	2b00      	cmp	r3, #0
 8004228:	d106      	bne.n	8004238 <HAL_UART_IRQHandler+0x8c>
          || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U)))
 800422a:	f8d7 20e0 	ldr.w	r2, [r7, #224]	; 0xe0
 800422e:	4b85      	ldr	r3, [pc, #532]	; (8004444 <HAL_UART_IRQHandler+0x298>)
 8004230:	4013      	ands	r3, r2
 8004232:	2b00      	cmp	r3, #0
 8004234:	f000 810a 	beq.w	800444c <HAL_UART_IRQHandler+0x2a0>
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 8004238:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800423c:	f003 0301 	and.w	r3, r3, #1
 8004240:	2b00      	cmp	r3, #0
 8004242:	d011      	beq.n	8004268 <HAL_UART_IRQHandler+0xbc>
 8004244:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8004248:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800424c:	2b00      	cmp	r3, #0
 800424e:	d00b      	beq.n	8004268 <HAL_UART_IRQHandler+0xbc>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 8004250:	687b      	ldr	r3, [r7, #4]
 8004252:	681b      	ldr	r3, [r3, #0]
 8004254:	2201      	movs	r2, #1
 8004256:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8004258:	687b      	ldr	r3, [r7, #4]
 800425a:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800425e:	f043 0201 	orr.w	r2, r3, #1
 8004262:	687b      	ldr	r3, [r7, #4]
 8004264:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8004268:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800426c:	f003 0302 	and.w	r3, r3, #2
 8004270:	2b00      	cmp	r3, #0
 8004272:	d011      	beq.n	8004298 <HAL_UART_IRQHandler+0xec>
 8004274:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8004278:	f003 0301 	and.w	r3, r3, #1
 800427c:	2b00      	cmp	r3, #0
 800427e:	d00b      	beq.n	8004298 <HAL_UART_IRQHandler+0xec>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 8004280:	687b      	ldr	r3, [r7, #4]
 8004282:	681b      	ldr	r3, [r3, #0]
 8004284:	2202      	movs	r2, #2
 8004286:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8004288:	687b      	ldr	r3, [r7, #4]
 800428a:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800428e:	f043 0204 	orr.w	r2, r3, #4
 8004292:	687b      	ldr	r3, [r7, #4]
 8004294:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8004298:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800429c:	f003 0304 	and.w	r3, r3, #4
 80042a0:	2b00      	cmp	r3, #0
 80042a2:	d011      	beq.n	80042c8 <HAL_UART_IRQHandler+0x11c>
 80042a4:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80042a8:	f003 0301 	and.w	r3, r3, #1
 80042ac:	2b00      	cmp	r3, #0
 80042ae:	d00b      	beq.n	80042c8 <HAL_UART_IRQHandler+0x11c>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 80042b0:	687b      	ldr	r3, [r7, #4]
 80042b2:	681b      	ldr	r3, [r3, #0]
 80042b4:	2204      	movs	r2, #4
 80042b6:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 80042b8:	687b      	ldr	r3, [r7, #4]
 80042ba:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80042be:	f043 0202 	orr.w	r2, r3, #2
 80042c2:	687b      	ldr	r3, [r7, #4]
 80042c4:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    }

    /* UART Over-Run interrupt occurred -----------------------------------------*/
    if (((isrflags & USART_ISR_ORE) != 0U)
 80042c8:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80042cc:	f003 0308 	and.w	r3, r3, #8
 80042d0:	2b00      	cmp	r3, #0
 80042d2:	d017      	beq.n	8004304 <HAL_UART_IRQHandler+0x158>
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 80042d4:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80042d8:	f003 0320 	and.w	r3, r3, #32
 80042dc:	2b00      	cmp	r3, #0
 80042de:	d105      	bne.n	80042ec <HAL_UART_IRQHandler+0x140>
            ((cr3its & USART_CR3_EIE) != 0U)))
 80042e0:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80042e4:	f003 0301 	and.w	r3, r3, #1
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 80042e8:	2b00      	cmp	r3, #0
 80042ea:	d00b      	beq.n	8004304 <HAL_UART_IRQHandler+0x158>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 80042ec:	687b      	ldr	r3, [r7, #4]
 80042ee:	681b      	ldr	r3, [r3, #0]
 80042f0:	2208      	movs	r2, #8
 80042f2:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 80042f4:	687b      	ldr	r3, [r7, #4]
 80042f6:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80042fa:	f043 0208 	orr.w	r2, r3, #8
 80042fe:	687b      	ldr	r3, [r7, #4]
 8004300:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 8004304:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004308:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800430c:	2b00      	cmp	r3, #0
 800430e:	d012      	beq.n	8004336 <HAL_UART_IRQHandler+0x18a>
 8004310:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8004314:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8004318:	2b00      	cmp	r3, #0
 800431a:	d00c      	beq.n	8004336 <HAL_UART_IRQHandler+0x18a>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800431c:	687b      	ldr	r3, [r7, #4]
 800431e:	681b      	ldr	r3, [r3, #0]
 8004320:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8004324:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 8004326:	687b      	ldr	r3, [r7, #4]
 8004328:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800432c:	f043 0220 	orr.w	r2, r3, #32
 8004330:	687b      	ldr	r3, [r7, #4]
 8004332:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8004336:	687b      	ldr	r3, [r7, #4]
 8004338:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800433c:	2b00      	cmp	r3, #0
 800433e:	f000 8209 	beq.w	8004754 <HAL_UART_IRQHandler+0x5a8>
    {
      /* UART in mode Receiver --------------------------------------------------*/
      if (((isrflags & USART_ISR_RXNE) != 0U)
 8004342:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004346:	f003 0320 	and.w	r3, r3, #32
 800434a:	2b00      	cmp	r3, #0
 800434c:	d00d      	beq.n	800436a <HAL_UART_IRQHandler+0x1be>
          && ((cr1its & USART_CR1_RXNEIE) != 0U))
 800434e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8004352:	f003 0320 	and.w	r3, r3, #32
 8004356:	2b00      	cmp	r3, #0
 8004358:	d007      	beq.n	800436a <HAL_UART_IRQHandler+0x1be>
      {
        if (huart->RxISR != NULL)
 800435a:	687b      	ldr	r3, [r7, #4]
 800435c:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800435e:	2b00      	cmp	r3, #0
 8004360:	d003      	beq.n	800436a <HAL_UART_IRQHandler+0x1be>
        {
          huart->RxISR(huart);
 8004362:	687b      	ldr	r3, [r7, #4]
 8004364:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8004366:	6878      	ldr	r0, [r7, #4]
 8004368:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 800436a:	687b      	ldr	r3, [r7, #4]
 800436c:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8004370:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8004374:	687b      	ldr	r3, [r7, #4]
 8004376:	681b      	ldr	r3, [r3, #0]
 8004378:	689b      	ldr	r3, [r3, #8]
 800437a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800437e:	2b40      	cmp	r3, #64	; 0x40
 8004380:	d005      	beq.n	800438e <HAL_UART_IRQHandler+0x1e2>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 8004382:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8004386:	f003 0328 	and.w	r3, r3, #40	; 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 800438a:	2b00      	cmp	r3, #0
 800438c:	d04f      	beq.n	800442e <HAL_UART_IRQHandler+0x282>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 800438e:	6878      	ldr	r0, [r7, #4]
 8004390:	f000 fd29 	bl	8004de6 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004394:	687b      	ldr	r3, [r7, #4]
 8004396:	681b      	ldr	r3, [r3, #0]
 8004398:	689b      	ldr	r3, [r3, #8]
 800439a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800439e:	2b40      	cmp	r3, #64	; 0x40
 80043a0:	d141      	bne.n	8004426 <HAL_UART_IRQHandler+0x27a>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80043a2:	687b      	ldr	r3, [r7, #4]
 80043a4:	681b      	ldr	r3, [r3, #0]
 80043a6:	3308      	adds	r3, #8
 80043a8:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80043ac:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 80043b0:	e853 3f00 	ldrex	r3, [r3]
 80043b4:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 80043b8:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 80043bc:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80043c0:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 80043c4:	687b      	ldr	r3, [r7, #4]
 80043c6:	681b      	ldr	r3, [r3, #0]
 80043c8:	3308      	adds	r3, #8
 80043ca:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 80043ce:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 80043d2:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80043d6:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 80043da:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 80043de:	e841 2300 	strex	r3, r2, [r1]
 80043e2:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 80043e6:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 80043ea:	2b00      	cmp	r3, #0
 80043ec:	d1d9      	bne.n	80043a2 <HAL_UART_IRQHandler+0x1f6>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 80043ee:	687b      	ldr	r3, [r7, #4]
 80043f0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80043f2:	2b00      	cmp	r3, #0
 80043f4:	d013      	beq.n	800441e <HAL_UART_IRQHandler+0x272>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 80043f6:	687b      	ldr	r3, [r7, #4]
 80043f8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80043fa:	4a13      	ldr	r2, [pc, #76]	; (8004448 <HAL_UART_IRQHandler+0x29c>)
 80043fc:	635a      	str	r2, [r3, #52]	; 0x34

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 80043fe:	687b      	ldr	r3, [r7, #4]
 8004400:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004402:	4618      	mov	r0, r3
 8004404:	f7fc ffdc 	bl	80013c0 <HAL_DMA_Abort_IT>
 8004408:	4603      	mov	r3, r0
 800440a:	2b00      	cmp	r3, #0
 800440c:	d017      	beq.n	800443e <HAL_UART_IRQHandler+0x292>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 800440e:	687b      	ldr	r3, [r7, #4]
 8004410:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004412:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004414:	687a      	ldr	r2, [r7, #4]
 8004416:	6f12      	ldr	r2, [r2, #112]	; 0x70
 8004418:	4610      	mov	r0, r2
 800441a:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800441c:	e00f      	b.n	800443e <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 800441e:	6878      	ldr	r0, [r7, #4]
 8004420:	f000 f9a2 	bl	8004768 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004424:	e00b      	b.n	800443e <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8004426:	6878      	ldr	r0, [r7, #4]
 8004428:	f000 f99e 	bl	8004768 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800442c:	e007      	b.n	800443e <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 800442e:	6878      	ldr	r0, [r7, #4]
 8004430:	f000 f99a 	bl	8004768 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004434:	687b      	ldr	r3, [r7, #4]
 8004436:	2200      	movs	r2, #0
 8004438:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
      }
    }
    return;
 800443c:	e18a      	b.n	8004754 <HAL_UART_IRQHandler+0x5a8>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800443e:	bf00      	nop
    return;
 8004440:	e188      	b.n	8004754 <HAL_UART_IRQHandler+0x5a8>
 8004442:	bf00      	nop
 8004444:	04000120 	.word	0x04000120
 8004448:	08004ead 	.word	0x08004ead

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800444c:	687b      	ldr	r3, [r7, #4]
 800444e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004450:	2b01      	cmp	r3, #1
 8004452:	f040 8143 	bne.w	80046dc <HAL_UART_IRQHandler+0x530>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 8004456:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800445a:	f003 0310 	and.w	r3, r3, #16
 800445e:	2b00      	cmp	r3, #0
 8004460:	f000 813c 	beq.w	80046dc <HAL_UART_IRQHandler+0x530>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 8004464:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8004468:	f003 0310 	and.w	r3, r3, #16
 800446c:	2b00      	cmp	r3, #0
 800446e:	f000 8135 	beq.w	80046dc <HAL_UART_IRQHandler+0x530>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8004472:	687b      	ldr	r3, [r7, #4]
 8004474:	681b      	ldr	r3, [r3, #0]
 8004476:	2210      	movs	r2, #16
 8004478:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800447a:	687b      	ldr	r3, [r7, #4]
 800447c:	681b      	ldr	r3, [r3, #0]
 800447e:	689b      	ldr	r3, [r3, #8]
 8004480:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004484:	2b40      	cmp	r3, #64	; 0x40
 8004486:	f040 80b1 	bne.w	80045ec <HAL_UART_IRQHandler+0x440>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 800448a:	687b      	ldr	r3, [r7, #4]
 800448c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800448e:	681b      	ldr	r3, [r3, #0]
 8004490:	685b      	ldr	r3, [r3, #4]
 8004492:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 8004496:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 800449a:	2b00      	cmp	r3, #0
 800449c:	f000 815c 	beq.w	8004758 <HAL_UART_IRQHandler+0x5ac>
          && (nb_remaining_rx_data < huart->RxXferSize))
 80044a0:	687b      	ldr	r3, [r7, #4]
 80044a2:	f8b3 3058 	ldrh.w	r3, [r3, #88]	; 0x58
 80044a6:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 80044aa:	429a      	cmp	r2, r3
 80044ac:	f080 8154 	bcs.w	8004758 <HAL_UART_IRQHandler+0x5ac>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 80044b0:	687b      	ldr	r3, [r7, #4]
 80044b2:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 80044b6:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 80044ba:	687b      	ldr	r3, [r7, #4]
 80044bc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80044be:	699b      	ldr	r3, [r3, #24]
 80044c0:	2b20      	cmp	r3, #32
 80044c2:	f000 8085 	beq.w	80045d0 <HAL_UART_IRQHandler+0x424>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 80044c6:	687b      	ldr	r3, [r7, #4]
 80044c8:	681b      	ldr	r3, [r3, #0]
 80044ca:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80044ce:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 80044d2:	e853 3f00 	ldrex	r3, [r3]
 80044d6:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 80044da:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 80044de:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80044e2:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 80044e6:	687b      	ldr	r3, [r7, #4]
 80044e8:	681b      	ldr	r3, [r3, #0]
 80044ea:	461a      	mov	r2, r3
 80044ec:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 80044f0:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 80044f4:	f8c7 2090 	str.w	r2, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80044f8:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 80044fc:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 8004500:	e841 2300 	strex	r3, r2, [r1]
 8004504:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 8004508:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800450c:	2b00      	cmp	r3, #0
 800450e:	d1da      	bne.n	80044c6 <HAL_UART_IRQHandler+0x31a>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004510:	687b      	ldr	r3, [r7, #4]
 8004512:	681b      	ldr	r3, [r3, #0]
 8004514:	3308      	adds	r3, #8
 8004516:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004518:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800451a:	e853 3f00 	ldrex	r3, [r3]
 800451e:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 8004520:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8004522:	f023 0301 	bic.w	r3, r3, #1
 8004526:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 800452a:	687b      	ldr	r3, [r7, #4]
 800452c:	681b      	ldr	r3, [r3, #0]
 800452e:	3308      	adds	r3, #8
 8004530:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 8004534:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 8004538:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800453a:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 800453c:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 8004540:	e841 2300 	strex	r3, r2, [r1]
 8004544:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 8004546:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8004548:	2b00      	cmp	r3, #0
 800454a:	d1e1      	bne.n	8004510 <HAL_UART_IRQHandler+0x364>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800454c:	687b      	ldr	r3, [r7, #4]
 800454e:	681b      	ldr	r3, [r3, #0]
 8004550:	3308      	adds	r3, #8
 8004552:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004554:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8004556:	e853 3f00 	ldrex	r3, [r3]
 800455a:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 800455c:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800455e:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8004562:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8004566:	687b      	ldr	r3, [r7, #4]
 8004568:	681b      	ldr	r3, [r3, #0]
 800456a:	3308      	adds	r3, #8
 800456c:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 8004570:	66fa      	str	r2, [r7, #108]	; 0x6c
 8004572:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004574:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 8004576:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 8004578:	e841 2300 	strex	r3, r2, [r1]
 800457c:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 800457e:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8004580:	2b00      	cmp	r3, #0
 8004582:	d1e3      	bne.n	800454c <HAL_UART_IRQHandler+0x3a0>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8004584:	687b      	ldr	r3, [r7, #4]
 8004586:	2220      	movs	r2, #32
 8004588:	67da      	str	r2, [r3, #124]	; 0x7c
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800458a:	687b      	ldr	r3, [r7, #4]
 800458c:	2200      	movs	r2, #0
 800458e:	661a      	str	r2, [r3, #96]	; 0x60

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004590:	687b      	ldr	r3, [r7, #4]
 8004592:	681b      	ldr	r3, [r3, #0]
 8004594:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004596:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004598:	e853 3f00 	ldrex	r3, [r3]
 800459c:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 800459e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80045a0:	f023 0310 	bic.w	r3, r3, #16
 80045a4:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 80045a8:	687b      	ldr	r3, [r7, #4]
 80045aa:	681b      	ldr	r3, [r3, #0]
 80045ac:	461a      	mov	r2, r3
 80045ae:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 80045b2:	65bb      	str	r3, [r7, #88]	; 0x58
 80045b4:	657a      	str	r2, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80045b6:	6d79      	ldr	r1, [r7, #84]	; 0x54
 80045b8:	6dba      	ldr	r2, [r7, #88]	; 0x58
 80045ba:	e841 2300 	strex	r3, r2, [r1]
 80045be:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 80045c0:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80045c2:	2b00      	cmp	r3, #0
 80045c4:	d1e4      	bne.n	8004590 <HAL_UART_IRQHandler+0x3e4>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 80045c6:	687b      	ldr	r3, [r7, #4]
 80045c8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80045ca:	4618      	mov	r0, r3
 80045cc:	f7fc febf 	bl	800134e <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 80045d0:	687b      	ldr	r3, [r7, #4]
 80045d2:	f8b3 2058 	ldrh.w	r2, [r3, #88]	; 0x58
 80045d6:	687b      	ldr	r3, [r7, #4]
 80045d8:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 80045dc:	b29b      	uxth	r3, r3
 80045de:	1ad3      	subs	r3, r2, r3
 80045e0:	b29b      	uxth	r3, r3
 80045e2:	4619      	mov	r1, r3
 80045e4:	6878      	ldr	r0, [r7, #4]
 80045e6:	f000 f8c9 	bl	800477c <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 80045ea:	e0b5      	b.n	8004758 <HAL_UART_IRQHandler+0x5ac>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 80045ec:	687b      	ldr	r3, [r7, #4]
 80045ee:	f8b3 2058 	ldrh.w	r2, [r3, #88]	; 0x58
 80045f2:	687b      	ldr	r3, [r7, #4]
 80045f4:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 80045f8:	b29b      	uxth	r3, r3
 80045fa:	1ad3      	subs	r3, r2, r3
 80045fc:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 8004600:	687b      	ldr	r3, [r7, #4]
 8004602:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8004606:	b29b      	uxth	r3, r3
 8004608:	2b00      	cmp	r3, #0
 800460a:	f000 80a7 	beq.w	800475c <HAL_UART_IRQHandler+0x5b0>
          && (nb_rx_data > 0U))
 800460e:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8004612:	2b00      	cmp	r3, #0
 8004614:	f000 80a2 	beq.w	800475c <HAL_UART_IRQHandler+0x5b0>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8004618:	687b      	ldr	r3, [r7, #4]
 800461a:	681b      	ldr	r3, [r3, #0]
 800461c:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800461e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004620:	e853 3f00 	ldrex	r3, [r3]
 8004624:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8004626:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004628:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 800462c:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8004630:	687b      	ldr	r3, [r7, #4]
 8004632:	681b      	ldr	r3, [r3, #0]
 8004634:	461a      	mov	r2, r3
 8004636:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 800463a:	647b      	str	r3, [r7, #68]	; 0x44
 800463c:	643a      	str	r2, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800463e:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8004640:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8004642:	e841 2300 	strex	r3, r2, [r1]
 8004646:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8004648:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800464a:	2b00      	cmp	r3, #0
 800464c:	d1e4      	bne.n	8004618 <HAL_UART_IRQHandler+0x46c>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800464e:	687b      	ldr	r3, [r7, #4]
 8004650:	681b      	ldr	r3, [r3, #0]
 8004652:	3308      	adds	r3, #8
 8004654:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004656:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004658:	e853 3f00 	ldrex	r3, [r3]
 800465c:	623b      	str	r3, [r7, #32]
   return(result);
 800465e:	6a3b      	ldr	r3, [r7, #32]
 8004660:	f023 0301 	bic.w	r3, r3, #1
 8004664:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 8004668:	687b      	ldr	r3, [r7, #4]
 800466a:	681b      	ldr	r3, [r3, #0]
 800466c:	3308      	adds	r3, #8
 800466e:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 8004672:	633a      	str	r2, [r7, #48]	; 0x30
 8004674:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004676:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8004678:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800467a:	e841 2300 	strex	r3, r2, [r1]
 800467e:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8004680:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004682:	2b00      	cmp	r3, #0
 8004684:	d1e3      	bne.n	800464e <HAL_UART_IRQHandler+0x4a2>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8004686:	687b      	ldr	r3, [r7, #4]
 8004688:	2220      	movs	r2, #32
 800468a:	67da      	str	r2, [r3, #124]	; 0x7c
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800468c:	687b      	ldr	r3, [r7, #4]
 800468e:	2200      	movs	r2, #0
 8004690:	661a      	str	r2, [r3, #96]	; 0x60

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 8004692:	687b      	ldr	r3, [r7, #4]
 8004694:	2200      	movs	r2, #0
 8004696:	665a      	str	r2, [r3, #100]	; 0x64

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004698:	687b      	ldr	r3, [r7, #4]
 800469a:	681b      	ldr	r3, [r3, #0]
 800469c:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800469e:	693b      	ldr	r3, [r7, #16]
 80046a0:	e853 3f00 	ldrex	r3, [r3]
 80046a4:	60fb      	str	r3, [r7, #12]
   return(result);
 80046a6:	68fb      	ldr	r3, [r7, #12]
 80046a8:	f023 0310 	bic.w	r3, r3, #16
 80046ac:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 80046b0:	687b      	ldr	r3, [r7, #4]
 80046b2:	681b      	ldr	r3, [r3, #0]
 80046b4:	461a      	mov	r2, r3
 80046b6:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 80046ba:	61fb      	str	r3, [r7, #28]
 80046bc:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80046be:	69b9      	ldr	r1, [r7, #24]
 80046c0:	69fa      	ldr	r2, [r7, #28]
 80046c2:	e841 2300 	strex	r3, r2, [r1]
 80046c6:	617b      	str	r3, [r7, #20]
   return(result);
 80046c8:	697b      	ldr	r3, [r7, #20]
 80046ca:	2b00      	cmp	r3, #0
 80046cc:	d1e4      	bne.n	8004698 <HAL_UART_IRQHandler+0x4ec>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 80046ce:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 80046d2:	4619      	mov	r1, r3
 80046d4:	6878      	ldr	r0, [r7, #4]
 80046d6:	f000 f851 	bl	800477c <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 80046da:	e03f      	b.n	800475c <HAL_UART_IRQHandler+0x5b0>
    }
  }

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 80046dc:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80046e0:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80046e4:	2b00      	cmp	r3, #0
 80046e6:	d00e      	beq.n	8004706 <HAL_UART_IRQHandler+0x55a>
 80046e8:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80046ec:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80046f0:	2b00      	cmp	r3, #0
 80046f2:	d008      	beq.n	8004706 <HAL_UART_IRQHandler+0x55a>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 80046f4:	687b      	ldr	r3, [r7, #4]
 80046f6:	681b      	ldr	r3, [r3, #0]
 80046f8:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 80046fc:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 80046fe:	6878      	ldr	r0, [r7, #4]
 8004700:	f000 fcd0 	bl	80050a4 <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8004704:	e02d      	b.n	8004762 <HAL_UART_IRQHandler+0x5b6>
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_ISR_TXE) != 0U)
 8004706:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800470a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800470e:	2b00      	cmp	r3, #0
 8004710:	d00e      	beq.n	8004730 <HAL_UART_IRQHandler+0x584>
      && ((cr1its & USART_CR1_TXEIE) != 0U))
 8004712:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8004716:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800471a:	2b00      	cmp	r3, #0
 800471c:	d008      	beq.n	8004730 <HAL_UART_IRQHandler+0x584>
  {
    if (huart->TxISR != NULL)
 800471e:	687b      	ldr	r3, [r7, #4]
 8004720:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8004722:	2b00      	cmp	r3, #0
 8004724:	d01c      	beq.n	8004760 <HAL_UART_IRQHandler+0x5b4>
    {
      huart->TxISR(huart);
 8004726:	687b      	ldr	r3, [r7, #4]
 8004728:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800472a:	6878      	ldr	r0, [r7, #4]
 800472c:	4798      	blx	r3
    }
    return;
 800472e:	e017      	b.n	8004760 <HAL_UART_IRQHandler+0x5b4>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 8004730:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004734:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004738:	2b00      	cmp	r3, #0
 800473a:	d012      	beq.n	8004762 <HAL_UART_IRQHandler+0x5b6>
 800473c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8004740:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004744:	2b00      	cmp	r3, #0
 8004746:	d00c      	beq.n	8004762 <HAL_UART_IRQHandler+0x5b6>
  {
    UART_EndTransmit_IT(huart);
 8004748:	6878      	ldr	r0, [r7, #4]
 800474a:	f000 fc81 	bl	8005050 <UART_EndTransmit_IT>
    return;
 800474e:	e008      	b.n	8004762 <HAL_UART_IRQHandler+0x5b6>
      return;
 8004750:	bf00      	nop
 8004752:	e006      	b.n	8004762 <HAL_UART_IRQHandler+0x5b6>
    return;
 8004754:	bf00      	nop
 8004756:	e004      	b.n	8004762 <HAL_UART_IRQHandler+0x5b6>
      return;
 8004758:	bf00      	nop
 800475a:	e002      	b.n	8004762 <HAL_UART_IRQHandler+0x5b6>
      return;
 800475c:	bf00      	nop
 800475e:	e000      	b.n	8004762 <HAL_UART_IRQHandler+0x5b6>
    return;
 8004760:	bf00      	nop
  }

}
 8004762:	37e8      	adds	r7, #232	; 0xe8
 8004764:	46bd      	mov	sp, r7
 8004766:	bd80      	pop	{r7, pc}

08004768 <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8004768:	b480      	push	{r7}
 800476a:	b083      	sub	sp, #12
 800476c:	af00      	add	r7, sp, #0
 800476e:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 8004770:	bf00      	nop
 8004772:	370c      	adds	r7, #12
 8004774:	46bd      	mov	sp, r7
 8004776:	f85d 7b04 	ldr.w	r7, [sp], #4
 800477a:	4770      	bx	lr

0800477c <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 800477c:	b480      	push	{r7}
 800477e:	b083      	sub	sp, #12
 8004780:	af00      	add	r7, sp, #0
 8004782:	6078      	str	r0, [r7, #4]
 8004784:	460b      	mov	r3, r1
 8004786:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8004788:	bf00      	nop
 800478a:	370c      	adds	r7, #12
 800478c:	46bd      	mov	sp, r7
 800478e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004792:	4770      	bx	lr

08004794 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8004794:	b580      	push	{r7, lr}
 8004796:	b088      	sub	sp, #32
 8004798:	af00      	add	r7, sp, #0
 800479a:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 800479c:	2300      	movs	r3, #0
 800479e:	77bb      	strb	r3, [r7, #30]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 80047a0:	687b      	ldr	r3, [r7, #4]
 80047a2:	689a      	ldr	r2, [r3, #8]
 80047a4:	687b      	ldr	r3, [r7, #4]
 80047a6:	691b      	ldr	r3, [r3, #16]
 80047a8:	431a      	orrs	r2, r3
 80047aa:	687b      	ldr	r3, [r7, #4]
 80047ac:	695b      	ldr	r3, [r3, #20]
 80047ae:	431a      	orrs	r2, r3
 80047b0:	687b      	ldr	r3, [r7, #4]
 80047b2:	69db      	ldr	r3, [r3, #28]
 80047b4:	4313      	orrs	r3, r2
 80047b6:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 80047b8:	687b      	ldr	r3, [r7, #4]
 80047ba:	681b      	ldr	r3, [r3, #0]
 80047bc:	681b      	ldr	r3, [r3, #0]
 80047be:	f423 4316 	bic.w	r3, r3, #38400	; 0x9600
 80047c2:	f023 030c 	bic.w	r3, r3, #12
 80047c6:	687a      	ldr	r2, [r7, #4]
 80047c8:	6812      	ldr	r2, [r2, #0]
 80047ca:	6979      	ldr	r1, [r7, #20]
 80047cc:	430b      	orrs	r3, r1
 80047ce:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80047d0:	687b      	ldr	r3, [r7, #4]
 80047d2:	681b      	ldr	r3, [r3, #0]
 80047d4:	685b      	ldr	r3, [r3, #4]
 80047d6:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 80047da:	687b      	ldr	r3, [r7, #4]
 80047dc:	68da      	ldr	r2, [r3, #12]
 80047de:	687b      	ldr	r3, [r7, #4]
 80047e0:	681b      	ldr	r3, [r3, #0]
 80047e2:	430a      	orrs	r2, r1
 80047e4:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 80047e6:	687b      	ldr	r3, [r7, #4]
 80047e8:	699b      	ldr	r3, [r3, #24]
 80047ea:	617b      	str	r3, [r7, #20]

  tmpreg |= huart->Init.OneBitSampling;
 80047ec:	687b      	ldr	r3, [r7, #4]
 80047ee:	6a1b      	ldr	r3, [r3, #32]
 80047f0:	697a      	ldr	r2, [r7, #20]
 80047f2:	4313      	orrs	r3, r2
 80047f4:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 80047f6:	687b      	ldr	r3, [r7, #4]
 80047f8:	681b      	ldr	r3, [r3, #0]
 80047fa:	689b      	ldr	r3, [r3, #8]
 80047fc:	f423 6130 	bic.w	r1, r3, #2816	; 0xb00
 8004800:	687b      	ldr	r3, [r7, #4]
 8004802:	681b      	ldr	r3, [r3, #0]
 8004804:	697a      	ldr	r2, [r7, #20]
 8004806:	430a      	orrs	r2, r1
 8004808:	609a      	str	r2, [r3, #8]


  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 800480a:	687b      	ldr	r3, [r7, #4]
 800480c:	681b      	ldr	r3, [r3, #0]
 800480e:	4a99      	ldr	r2, [pc, #612]	; (8004a74 <UART_SetConfig+0x2e0>)
 8004810:	4293      	cmp	r3, r2
 8004812:	d120      	bne.n	8004856 <UART_SetConfig+0xc2>
 8004814:	4b98      	ldr	r3, [pc, #608]	; (8004a78 <UART_SetConfig+0x2e4>)
 8004816:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004818:	f003 0303 	and.w	r3, r3, #3
 800481c:	2b03      	cmp	r3, #3
 800481e:	d817      	bhi.n	8004850 <UART_SetConfig+0xbc>
 8004820:	a201      	add	r2, pc, #4	; (adr r2, 8004828 <UART_SetConfig+0x94>)
 8004822:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004826:	bf00      	nop
 8004828:	08004839 	.word	0x08004839
 800482c:	08004845 	.word	0x08004845
 8004830:	0800484b 	.word	0x0800484b
 8004834:	0800483f 	.word	0x0800483f
 8004838:	2301      	movs	r3, #1
 800483a:	77fb      	strb	r3, [r7, #31]
 800483c:	e061      	b.n	8004902 <UART_SetConfig+0x16e>
 800483e:	2302      	movs	r3, #2
 8004840:	77fb      	strb	r3, [r7, #31]
 8004842:	e05e      	b.n	8004902 <UART_SetConfig+0x16e>
 8004844:	2304      	movs	r3, #4
 8004846:	77fb      	strb	r3, [r7, #31]
 8004848:	e05b      	b.n	8004902 <UART_SetConfig+0x16e>
 800484a:	2308      	movs	r3, #8
 800484c:	77fb      	strb	r3, [r7, #31]
 800484e:	e058      	b.n	8004902 <UART_SetConfig+0x16e>
 8004850:	2310      	movs	r3, #16
 8004852:	77fb      	strb	r3, [r7, #31]
 8004854:	e055      	b.n	8004902 <UART_SetConfig+0x16e>
 8004856:	687b      	ldr	r3, [r7, #4]
 8004858:	681b      	ldr	r3, [r3, #0]
 800485a:	4a88      	ldr	r2, [pc, #544]	; (8004a7c <UART_SetConfig+0x2e8>)
 800485c:	4293      	cmp	r3, r2
 800485e:	d124      	bne.n	80048aa <UART_SetConfig+0x116>
 8004860:	4b85      	ldr	r3, [pc, #532]	; (8004a78 <UART_SetConfig+0x2e4>)
 8004862:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004864:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8004868:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 800486c:	d011      	beq.n	8004892 <UART_SetConfig+0xfe>
 800486e:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 8004872:	d817      	bhi.n	80048a4 <UART_SetConfig+0x110>
 8004874:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8004878:	d011      	beq.n	800489e <UART_SetConfig+0x10a>
 800487a:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800487e:	d811      	bhi.n	80048a4 <UART_SetConfig+0x110>
 8004880:	2b00      	cmp	r3, #0
 8004882:	d003      	beq.n	800488c <UART_SetConfig+0xf8>
 8004884:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004888:	d006      	beq.n	8004898 <UART_SetConfig+0x104>
 800488a:	e00b      	b.n	80048a4 <UART_SetConfig+0x110>
 800488c:	2300      	movs	r3, #0
 800488e:	77fb      	strb	r3, [r7, #31]
 8004890:	e037      	b.n	8004902 <UART_SetConfig+0x16e>
 8004892:	2302      	movs	r3, #2
 8004894:	77fb      	strb	r3, [r7, #31]
 8004896:	e034      	b.n	8004902 <UART_SetConfig+0x16e>
 8004898:	2304      	movs	r3, #4
 800489a:	77fb      	strb	r3, [r7, #31]
 800489c:	e031      	b.n	8004902 <UART_SetConfig+0x16e>
 800489e:	2308      	movs	r3, #8
 80048a0:	77fb      	strb	r3, [r7, #31]
 80048a2:	e02e      	b.n	8004902 <UART_SetConfig+0x16e>
 80048a4:	2310      	movs	r3, #16
 80048a6:	77fb      	strb	r3, [r7, #31]
 80048a8:	e02b      	b.n	8004902 <UART_SetConfig+0x16e>
 80048aa:	687b      	ldr	r3, [r7, #4]
 80048ac:	681b      	ldr	r3, [r3, #0]
 80048ae:	4a74      	ldr	r2, [pc, #464]	; (8004a80 <UART_SetConfig+0x2ec>)
 80048b0:	4293      	cmp	r3, r2
 80048b2:	d124      	bne.n	80048fe <UART_SetConfig+0x16a>
 80048b4:	4b70      	ldr	r3, [pc, #448]	; (8004a78 <UART_SetConfig+0x2e4>)
 80048b6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80048b8:	f403 2340 	and.w	r3, r3, #786432	; 0xc0000
 80048bc:	f5b3 2f40 	cmp.w	r3, #786432	; 0xc0000
 80048c0:	d011      	beq.n	80048e6 <UART_SetConfig+0x152>
 80048c2:	f5b3 2f40 	cmp.w	r3, #786432	; 0xc0000
 80048c6:	d817      	bhi.n	80048f8 <UART_SetConfig+0x164>
 80048c8:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 80048cc:	d011      	beq.n	80048f2 <UART_SetConfig+0x15e>
 80048ce:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 80048d2:	d811      	bhi.n	80048f8 <UART_SetConfig+0x164>
 80048d4:	2b00      	cmp	r3, #0
 80048d6:	d003      	beq.n	80048e0 <UART_SetConfig+0x14c>
 80048d8:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 80048dc:	d006      	beq.n	80048ec <UART_SetConfig+0x158>
 80048de:	e00b      	b.n	80048f8 <UART_SetConfig+0x164>
 80048e0:	2300      	movs	r3, #0
 80048e2:	77fb      	strb	r3, [r7, #31]
 80048e4:	e00d      	b.n	8004902 <UART_SetConfig+0x16e>
 80048e6:	2302      	movs	r3, #2
 80048e8:	77fb      	strb	r3, [r7, #31]
 80048ea:	e00a      	b.n	8004902 <UART_SetConfig+0x16e>
 80048ec:	2304      	movs	r3, #4
 80048ee:	77fb      	strb	r3, [r7, #31]
 80048f0:	e007      	b.n	8004902 <UART_SetConfig+0x16e>
 80048f2:	2308      	movs	r3, #8
 80048f4:	77fb      	strb	r3, [r7, #31]
 80048f6:	e004      	b.n	8004902 <UART_SetConfig+0x16e>
 80048f8:	2310      	movs	r3, #16
 80048fa:	77fb      	strb	r3, [r7, #31]
 80048fc:	e001      	b.n	8004902 <UART_SetConfig+0x16e>
 80048fe:	2310      	movs	r3, #16
 8004900:	77fb      	strb	r3, [r7, #31]

  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8004902:	687b      	ldr	r3, [r7, #4]
 8004904:	69db      	ldr	r3, [r3, #28]
 8004906:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800490a:	d15b      	bne.n	80049c4 <UART_SetConfig+0x230>
  {
    switch (clocksource)
 800490c:	7ffb      	ldrb	r3, [r7, #31]
 800490e:	2b08      	cmp	r3, #8
 8004910:	d827      	bhi.n	8004962 <UART_SetConfig+0x1ce>
 8004912:	a201      	add	r2, pc, #4	; (adr r2, 8004918 <UART_SetConfig+0x184>)
 8004914:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004918:	0800493d 	.word	0x0800493d
 800491c:	08004945 	.word	0x08004945
 8004920:	0800494d 	.word	0x0800494d
 8004924:	08004963 	.word	0x08004963
 8004928:	08004953 	.word	0x08004953
 800492c:	08004963 	.word	0x08004963
 8004930:	08004963 	.word	0x08004963
 8004934:	08004963 	.word	0x08004963
 8004938:	0800495b 	.word	0x0800495b
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800493c:	f7fe f826 	bl	800298c <HAL_RCC_GetPCLK1Freq>
 8004940:	61b8      	str	r0, [r7, #24]
        break;
 8004942:	e013      	b.n	800496c <UART_SetConfig+0x1d8>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8004944:	f7fe f844 	bl	80029d0 <HAL_RCC_GetPCLK2Freq>
 8004948:	61b8      	str	r0, [r7, #24]
        break;
 800494a:	e00f      	b.n	800496c <UART_SetConfig+0x1d8>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 800494c:	4b4d      	ldr	r3, [pc, #308]	; (8004a84 <UART_SetConfig+0x2f0>)
 800494e:	61bb      	str	r3, [r7, #24]
        break;
 8004950:	e00c      	b.n	800496c <UART_SetConfig+0x1d8>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8004952:	f7fd ffa3 	bl	800289c <HAL_RCC_GetSysClockFreq>
 8004956:	61b8      	str	r0, [r7, #24]
        break;
 8004958:	e008      	b.n	800496c <UART_SetConfig+0x1d8>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800495a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800495e:	61bb      	str	r3, [r7, #24]
        break;
 8004960:	e004      	b.n	800496c <UART_SetConfig+0x1d8>
      default:
        pclk = 0U;
 8004962:	2300      	movs	r3, #0
 8004964:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 8004966:	2301      	movs	r3, #1
 8004968:	77bb      	strb	r3, [r7, #30]
        break;
 800496a:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 800496c:	69bb      	ldr	r3, [r7, #24]
 800496e:	2b00      	cmp	r3, #0
 8004970:	d074      	beq.n	8004a5c <UART_SetConfig+0x2c8>
    {
      usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8004972:	69bb      	ldr	r3, [r7, #24]
 8004974:	005a      	lsls	r2, r3, #1
 8004976:	687b      	ldr	r3, [r7, #4]
 8004978:	685b      	ldr	r3, [r3, #4]
 800497a:	085b      	lsrs	r3, r3, #1
 800497c:	441a      	add	r2, r3
 800497e:	687b      	ldr	r3, [r7, #4]
 8004980:	685b      	ldr	r3, [r3, #4]
 8004982:	fbb2 f3f3 	udiv	r3, r2, r3
 8004986:	b29b      	uxth	r3, r3
 8004988:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800498a:	693b      	ldr	r3, [r7, #16]
 800498c:	2b0f      	cmp	r3, #15
 800498e:	d916      	bls.n	80049be <UART_SetConfig+0x22a>
 8004990:	693b      	ldr	r3, [r7, #16]
 8004992:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004996:	d212      	bcs.n	80049be <UART_SetConfig+0x22a>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8004998:	693b      	ldr	r3, [r7, #16]
 800499a:	b29b      	uxth	r3, r3
 800499c:	f023 030f 	bic.w	r3, r3, #15
 80049a0:	81fb      	strh	r3, [r7, #14]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 80049a2:	693b      	ldr	r3, [r7, #16]
 80049a4:	085b      	lsrs	r3, r3, #1
 80049a6:	b29b      	uxth	r3, r3
 80049a8:	f003 0307 	and.w	r3, r3, #7
 80049ac:	b29a      	uxth	r2, r3
 80049ae:	89fb      	ldrh	r3, [r7, #14]
 80049b0:	4313      	orrs	r3, r2
 80049b2:	81fb      	strh	r3, [r7, #14]
        huart->Instance->BRR = brrtemp;
 80049b4:	687b      	ldr	r3, [r7, #4]
 80049b6:	681b      	ldr	r3, [r3, #0]
 80049b8:	89fa      	ldrh	r2, [r7, #14]
 80049ba:	60da      	str	r2, [r3, #12]
 80049bc:	e04e      	b.n	8004a5c <UART_SetConfig+0x2c8>
      }
      else
      {
        ret = HAL_ERROR;
 80049be:	2301      	movs	r3, #1
 80049c0:	77bb      	strb	r3, [r7, #30]
 80049c2:	e04b      	b.n	8004a5c <UART_SetConfig+0x2c8>
      }
    }
  }
  else
  {
    switch (clocksource)
 80049c4:	7ffb      	ldrb	r3, [r7, #31]
 80049c6:	2b08      	cmp	r3, #8
 80049c8:	d827      	bhi.n	8004a1a <UART_SetConfig+0x286>
 80049ca:	a201      	add	r2, pc, #4	; (adr r2, 80049d0 <UART_SetConfig+0x23c>)
 80049cc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80049d0:	080049f5 	.word	0x080049f5
 80049d4:	080049fd 	.word	0x080049fd
 80049d8:	08004a05 	.word	0x08004a05
 80049dc:	08004a1b 	.word	0x08004a1b
 80049e0:	08004a0b 	.word	0x08004a0b
 80049e4:	08004a1b 	.word	0x08004a1b
 80049e8:	08004a1b 	.word	0x08004a1b
 80049ec:	08004a1b 	.word	0x08004a1b
 80049f0:	08004a13 	.word	0x08004a13
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80049f4:	f7fd ffca 	bl	800298c <HAL_RCC_GetPCLK1Freq>
 80049f8:	61b8      	str	r0, [r7, #24]
        break;
 80049fa:	e013      	b.n	8004a24 <UART_SetConfig+0x290>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 80049fc:	f7fd ffe8 	bl	80029d0 <HAL_RCC_GetPCLK2Freq>
 8004a00:	61b8      	str	r0, [r7, #24]
        break;
 8004a02:	e00f      	b.n	8004a24 <UART_SetConfig+0x290>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8004a04:	4b1f      	ldr	r3, [pc, #124]	; (8004a84 <UART_SetConfig+0x2f0>)
 8004a06:	61bb      	str	r3, [r7, #24]
        break;
 8004a08:	e00c      	b.n	8004a24 <UART_SetConfig+0x290>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8004a0a:	f7fd ff47 	bl	800289c <HAL_RCC_GetSysClockFreq>
 8004a0e:	61b8      	str	r0, [r7, #24]
        break;
 8004a10:	e008      	b.n	8004a24 <UART_SetConfig+0x290>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8004a12:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8004a16:	61bb      	str	r3, [r7, #24]
        break;
 8004a18:	e004      	b.n	8004a24 <UART_SetConfig+0x290>
      default:
        pclk = 0U;
 8004a1a:	2300      	movs	r3, #0
 8004a1c:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 8004a1e:	2301      	movs	r3, #1
 8004a20:	77bb      	strb	r3, [r7, #30]
        break;
 8004a22:	bf00      	nop
    }

    if (pclk != 0U)
 8004a24:	69bb      	ldr	r3, [r7, #24]
 8004a26:	2b00      	cmp	r3, #0
 8004a28:	d018      	beq.n	8004a5c <UART_SetConfig+0x2c8>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8004a2a:	687b      	ldr	r3, [r7, #4]
 8004a2c:	685b      	ldr	r3, [r3, #4]
 8004a2e:	085a      	lsrs	r2, r3, #1
 8004a30:	69bb      	ldr	r3, [r7, #24]
 8004a32:	441a      	add	r2, r3
 8004a34:	687b      	ldr	r3, [r7, #4]
 8004a36:	685b      	ldr	r3, [r3, #4]
 8004a38:	fbb2 f3f3 	udiv	r3, r2, r3
 8004a3c:	b29b      	uxth	r3, r3
 8004a3e:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8004a40:	693b      	ldr	r3, [r7, #16]
 8004a42:	2b0f      	cmp	r3, #15
 8004a44:	d908      	bls.n	8004a58 <UART_SetConfig+0x2c4>
 8004a46:	693b      	ldr	r3, [r7, #16]
 8004a48:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004a4c:	d204      	bcs.n	8004a58 <UART_SetConfig+0x2c4>
      {
        huart->Instance->BRR = usartdiv;
 8004a4e:	687b      	ldr	r3, [r7, #4]
 8004a50:	681b      	ldr	r3, [r3, #0]
 8004a52:	693a      	ldr	r2, [r7, #16]
 8004a54:	60da      	str	r2, [r3, #12]
 8004a56:	e001      	b.n	8004a5c <UART_SetConfig+0x2c8>
      }
      else
      {
        ret = HAL_ERROR;
 8004a58:	2301      	movs	r3, #1
 8004a5a:	77bb      	strb	r3, [r7, #30]
    }
  }


  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8004a5c:	687b      	ldr	r3, [r7, #4]
 8004a5e:	2200      	movs	r2, #0
 8004a60:	665a      	str	r2, [r3, #100]	; 0x64
  huart->TxISR = NULL;
 8004a62:	687b      	ldr	r3, [r7, #4]
 8004a64:	2200      	movs	r2, #0
 8004a66:	669a      	str	r2, [r3, #104]	; 0x68

  return ret;
 8004a68:	7fbb      	ldrb	r3, [r7, #30]
}
 8004a6a:	4618      	mov	r0, r3
 8004a6c:	3720      	adds	r7, #32
 8004a6e:	46bd      	mov	sp, r7
 8004a70:	bd80      	pop	{r7, pc}
 8004a72:	bf00      	nop
 8004a74:	40013800 	.word	0x40013800
 8004a78:	40021000 	.word	0x40021000
 8004a7c:	40004400 	.word	0x40004400
 8004a80:	40004800 	.word	0x40004800
 8004a84:	007a1200 	.word	0x007a1200

08004a88 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8004a88:	b480      	push	{r7}
 8004a8a:	b083      	sub	sp, #12
 8004a8c:	af00      	add	r7, sp, #0
 8004a8e:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8004a90:	687b      	ldr	r3, [r7, #4]
 8004a92:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004a94:	f003 0301 	and.w	r3, r3, #1
 8004a98:	2b00      	cmp	r3, #0
 8004a9a:	d00a      	beq.n	8004ab2 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8004a9c:	687b      	ldr	r3, [r7, #4]
 8004a9e:	681b      	ldr	r3, [r3, #0]
 8004aa0:	685b      	ldr	r3, [r3, #4]
 8004aa2:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 8004aa6:	687b      	ldr	r3, [r7, #4]
 8004aa8:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8004aaa:	687b      	ldr	r3, [r7, #4]
 8004aac:	681b      	ldr	r3, [r3, #0]
 8004aae:	430a      	orrs	r2, r1
 8004ab0:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8004ab2:	687b      	ldr	r3, [r7, #4]
 8004ab4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004ab6:	f003 0302 	and.w	r3, r3, #2
 8004aba:	2b00      	cmp	r3, #0
 8004abc:	d00a      	beq.n	8004ad4 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8004abe:	687b      	ldr	r3, [r7, #4]
 8004ac0:	681b      	ldr	r3, [r3, #0]
 8004ac2:	685b      	ldr	r3, [r3, #4]
 8004ac4:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 8004ac8:	687b      	ldr	r3, [r7, #4]
 8004aca:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004acc:	687b      	ldr	r3, [r7, #4]
 8004ace:	681b      	ldr	r3, [r3, #0]
 8004ad0:	430a      	orrs	r2, r1
 8004ad2:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8004ad4:	687b      	ldr	r3, [r7, #4]
 8004ad6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004ad8:	f003 0304 	and.w	r3, r3, #4
 8004adc:	2b00      	cmp	r3, #0
 8004ade:	d00a      	beq.n	8004af6 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8004ae0:	687b      	ldr	r3, [r7, #4]
 8004ae2:	681b      	ldr	r3, [r3, #0]
 8004ae4:	685b      	ldr	r3, [r3, #4]
 8004ae6:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 8004aea:	687b      	ldr	r3, [r7, #4]
 8004aec:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8004aee:	687b      	ldr	r3, [r7, #4]
 8004af0:	681b      	ldr	r3, [r3, #0]
 8004af2:	430a      	orrs	r2, r1
 8004af4:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8004af6:	687b      	ldr	r3, [r7, #4]
 8004af8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004afa:	f003 0308 	and.w	r3, r3, #8
 8004afe:	2b00      	cmp	r3, #0
 8004b00:	d00a      	beq.n	8004b18 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8004b02:	687b      	ldr	r3, [r7, #4]
 8004b04:	681b      	ldr	r3, [r3, #0]
 8004b06:	685b      	ldr	r3, [r3, #4]
 8004b08:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 8004b0c:	687b      	ldr	r3, [r7, #4]
 8004b0e:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8004b10:	687b      	ldr	r3, [r7, #4]
 8004b12:	681b      	ldr	r3, [r3, #0]
 8004b14:	430a      	orrs	r2, r1
 8004b16:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8004b18:	687b      	ldr	r3, [r7, #4]
 8004b1a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004b1c:	f003 0310 	and.w	r3, r3, #16
 8004b20:	2b00      	cmp	r3, #0
 8004b22:	d00a      	beq.n	8004b3a <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8004b24:	687b      	ldr	r3, [r7, #4]
 8004b26:	681b      	ldr	r3, [r3, #0]
 8004b28:	689b      	ldr	r3, [r3, #8]
 8004b2a:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 8004b2e:	687b      	ldr	r3, [r7, #4]
 8004b30:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8004b32:	687b      	ldr	r3, [r7, #4]
 8004b34:	681b      	ldr	r3, [r3, #0]
 8004b36:	430a      	orrs	r2, r1
 8004b38:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8004b3a:	687b      	ldr	r3, [r7, #4]
 8004b3c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004b3e:	f003 0320 	and.w	r3, r3, #32
 8004b42:	2b00      	cmp	r3, #0
 8004b44:	d00a      	beq.n	8004b5c <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8004b46:	687b      	ldr	r3, [r7, #4]
 8004b48:	681b      	ldr	r3, [r3, #0]
 8004b4a:	689b      	ldr	r3, [r3, #8]
 8004b4c:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 8004b50:	687b      	ldr	r3, [r7, #4]
 8004b52:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8004b54:	687b      	ldr	r3, [r7, #4]
 8004b56:	681b      	ldr	r3, [r3, #0]
 8004b58:	430a      	orrs	r2, r1
 8004b5a:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8004b5c:	687b      	ldr	r3, [r7, #4]
 8004b5e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004b60:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004b64:	2b00      	cmp	r3, #0
 8004b66:	d01a      	beq.n	8004b9e <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8004b68:	687b      	ldr	r3, [r7, #4]
 8004b6a:	681b      	ldr	r3, [r3, #0]
 8004b6c:	685b      	ldr	r3, [r3, #4]
 8004b6e:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 8004b72:	687b      	ldr	r3, [r7, #4]
 8004b74:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8004b76:	687b      	ldr	r3, [r7, #4]
 8004b78:	681b      	ldr	r3, [r3, #0]
 8004b7a:	430a      	orrs	r2, r1
 8004b7c:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8004b7e:	687b      	ldr	r3, [r7, #4]
 8004b80:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004b82:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8004b86:	d10a      	bne.n	8004b9e <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8004b88:	687b      	ldr	r3, [r7, #4]
 8004b8a:	681b      	ldr	r3, [r3, #0]
 8004b8c:	685b      	ldr	r3, [r3, #4]
 8004b8e:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 8004b92:	687b      	ldr	r3, [r7, #4]
 8004b94:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8004b96:	687b      	ldr	r3, [r7, #4]
 8004b98:	681b      	ldr	r3, [r3, #0]
 8004b9a:	430a      	orrs	r2, r1
 8004b9c:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8004b9e:	687b      	ldr	r3, [r7, #4]
 8004ba0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004ba2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004ba6:	2b00      	cmp	r3, #0
 8004ba8:	d00a      	beq.n	8004bc0 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8004baa:	687b      	ldr	r3, [r7, #4]
 8004bac:	681b      	ldr	r3, [r3, #0]
 8004bae:	685b      	ldr	r3, [r3, #4]
 8004bb0:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 8004bb4:	687b      	ldr	r3, [r7, #4]
 8004bb6:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8004bb8:	687b      	ldr	r3, [r7, #4]
 8004bba:	681b      	ldr	r3, [r3, #0]
 8004bbc:	430a      	orrs	r2, r1
 8004bbe:	605a      	str	r2, [r3, #4]
  }
}
 8004bc0:	bf00      	nop
 8004bc2:	370c      	adds	r7, #12
 8004bc4:	46bd      	mov	sp, r7
 8004bc6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004bca:	4770      	bx	lr

08004bcc <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8004bcc:	b580      	push	{r7, lr}
 8004bce:	b086      	sub	sp, #24
 8004bd0:	af02      	add	r7, sp, #8
 8004bd2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004bd4:	687b      	ldr	r3, [r7, #4]
 8004bd6:	2200      	movs	r2, #0
 8004bd8:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8004bdc:	f7fc f86c 	bl	8000cb8 <HAL_GetTick>
 8004be0:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8004be2:	687b      	ldr	r3, [r7, #4]
 8004be4:	681b      	ldr	r3, [r3, #0]
 8004be6:	681b      	ldr	r3, [r3, #0]
 8004be8:	f003 0308 	and.w	r3, r3, #8
 8004bec:	2b08      	cmp	r3, #8
 8004bee:	d10e      	bne.n	8004c0e <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8004bf0:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8004bf4:	9300      	str	r3, [sp, #0]
 8004bf6:	68fb      	ldr	r3, [r7, #12]
 8004bf8:	2200      	movs	r2, #0
 8004bfa:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 8004bfe:	6878      	ldr	r0, [r7, #4]
 8004c00:	f000 f82d 	bl	8004c5e <UART_WaitOnFlagUntilTimeout>
 8004c04:	4603      	mov	r3, r0
 8004c06:	2b00      	cmp	r3, #0
 8004c08:	d001      	beq.n	8004c0e <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8004c0a:	2303      	movs	r3, #3
 8004c0c:	e023      	b.n	8004c56 <UART_CheckIdleState+0x8a>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8004c0e:	687b      	ldr	r3, [r7, #4]
 8004c10:	681b      	ldr	r3, [r3, #0]
 8004c12:	681b      	ldr	r3, [r3, #0]
 8004c14:	f003 0304 	and.w	r3, r3, #4
 8004c18:	2b04      	cmp	r3, #4
 8004c1a:	d10e      	bne.n	8004c3a <UART_CheckIdleState+0x6e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8004c1c:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8004c20:	9300      	str	r3, [sp, #0]
 8004c22:	68fb      	ldr	r3, [r7, #12]
 8004c24:	2200      	movs	r2, #0
 8004c26:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 8004c2a:	6878      	ldr	r0, [r7, #4]
 8004c2c:	f000 f817 	bl	8004c5e <UART_WaitOnFlagUntilTimeout>
 8004c30:	4603      	mov	r3, r0
 8004c32:	2b00      	cmp	r3, #0
 8004c34:	d001      	beq.n	8004c3a <UART_CheckIdleState+0x6e>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8004c36:	2303      	movs	r3, #3
 8004c38:	e00d      	b.n	8004c56 <UART_CheckIdleState+0x8a>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8004c3a:	687b      	ldr	r3, [r7, #4]
 8004c3c:	2220      	movs	r2, #32
 8004c3e:	679a      	str	r2, [r3, #120]	; 0x78
  huart->RxState = HAL_UART_STATE_READY;
 8004c40:	687b      	ldr	r3, [r7, #4]
 8004c42:	2220      	movs	r2, #32
 8004c44:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004c46:	687b      	ldr	r3, [r7, #4]
 8004c48:	2200      	movs	r2, #0
 8004c4a:	661a      	str	r2, [r3, #96]	; 0x60

  __HAL_UNLOCK(huart);
 8004c4c:	687b      	ldr	r3, [r7, #4]
 8004c4e:	2200      	movs	r2, #0
 8004c50:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

  return HAL_OK;
 8004c54:	2300      	movs	r3, #0
}
 8004c56:	4618      	mov	r0, r3
 8004c58:	3710      	adds	r7, #16
 8004c5a:	46bd      	mov	sp, r7
 8004c5c:	bd80      	pop	{r7, pc}

08004c5e <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8004c5e:	b580      	push	{r7, lr}
 8004c60:	b09c      	sub	sp, #112	; 0x70
 8004c62:	af00      	add	r7, sp, #0
 8004c64:	60f8      	str	r0, [r7, #12]
 8004c66:	60b9      	str	r1, [r7, #8]
 8004c68:	603b      	str	r3, [r7, #0]
 8004c6a:	4613      	mov	r3, r2
 8004c6c:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8004c6e:	e0a5      	b.n	8004dbc <UART_WaitOnFlagUntilTimeout+0x15e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004c70:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8004c72:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004c76:	f000 80a1 	beq.w	8004dbc <UART_WaitOnFlagUntilTimeout+0x15e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004c7a:	f7fc f81d 	bl	8000cb8 <HAL_GetTick>
 8004c7e:	4602      	mov	r2, r0
 8004c80:	683b      	ldr	r3, [r7, #0]
 8004c82:	1ad3      	subs	r3, r2, r3
 8004c84:	6fba      	ldr	r2, [r7, #120]	; 0x78
 8004c86:	429a      	cmp	r2, r3
 8004c88:	d302      	bcc.n	8004c90 <UART_WaitOnFlagUntilTimeout+0x32>
 8004c8a:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8004c8c:	2b00      	cmp	r3, #0
 8004c8e:	d13e      	bne.n	8004d0e <UART_WaitOnFlagUntilTimeout+0xb0>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8004c90:	68fb      	ldr	r3, [r7, #12]
 8004c92:	681b      	ldr	r3, [r3, #0]
 8004c94:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004c96:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8004c98:	e853 3f00 	ldrex	r3, [r3]
 8004c9c:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 8004c9e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004ca0:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8004ca4:	667b      	str	r3, [r7, #100]	; 0x64
 8004ca6:	68fb      	ldr	r3, [r7, #12]
 8004ca8:	681b      	ldr	r3, [r3, #0]
 8004caa:	461a      	mov	r2, r3
 8004cac:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8004cae:	65fb      	str	r3, [r7, #92]	; 0x5c
 8004cb0:	65ba      	str	r2, [r7, #88]	; 0x58
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004cb2:	6db9      	ldr	r1, [r7, #88]	; 0x58
 8004cb4:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 8004cb6:	e841 2300 	strex	r3, r2, [r1]
 8004cba:	657b      	str	r3, [r7, #84]	; 0x54
   return(result);
 8004cbc:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8004cbe:	2b00      	cmp	r3, #0
 8004cc0:	d1e6      	bne.n	8004c90 <UART_WaitOnFlagUntilTimeout+0x32>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004cc2:	68fb      	ldr	r3, [r7, #12]
 8004cc4:	681b      	ldr	r3, [r3, #0]
 8004cc6:	3308      	adds	r3, #8
 8004cc8:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004cca:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004ccc:	e853 3f00 	ldrex	r3, [r3]
 8004cd0:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8004cd2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004cd4:	f023 0301 	bic.w	r3, r3, #1
 8004cd8:	663b      	str	r3, [r7, #96]	; 0x60
 8004cda:	68fb      	ldr	r3, [r7, #12]
 8004cdc:	681b      	ldr	r3, [r3, #0]
 8004cde:	3308      	adds	r3, #8
 8004ce0:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8004ce2:	64ba      	str	r2, [r7, #72]	; 0x48
 8004ce4:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004ce6:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8004ce8:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8004cea:	e841 2300 	strex	r3, r2, [r1]
 8004cee:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 8004cf0:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8004cf2:	2b00      	cmp	r3, #0
 8004cf4:	d1e5      	bne.n	8004cc2 <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState = HAL_UART_STATE_READY;
 8004cf6:	68fb      	ldr	r3, [r7, #12]
 8004cf8:	2220      	movs	r2, #32
 8004cfa:	679a      	str	r2, [r3, #120]	; 0x78
        huart->RxState = HAL_UART_STATE_READY;
 8004cfc:	68fb      	ldr	r3, [r7, #12]
 8004cfe:	2220      	movs	r2, #32
 8004d00:	67da      	str	r2, [r3, #124]	; 0x7c

        __HAL_UNLOCK(huart);
 8004d02:	68fb      	ldr	r3, [r7, #12]
 8004d04:	2200      	movs	r2, #0
 8004d06:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

        return HAL_TIMEOUT;
 8004d0a:	2303      	movs	r3, #3
 8004d0c:	e067      	b.n	8004dde <UART_WaitOnFlagUntilTimeout+0x180>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8004d0e:	68fb      	ldr	r3, [r7, #12]
 8004d10:	681b      	ldr	r3, [r3, #0]
 8004d12:	681b      	ldr	r3, [r3, #0]
 8004d14:	f003 0304 	and.w	r3, r3, #4
 8004d18:	2b00      	cmp	r3, #0
 8004d1a:	d04f      	beq.n	8004dbc <UART_WaitOnFlagUntilTimeout+0x15e>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8004d1c:	68fb      	ldr	r3, [r7, #12]
 8004d1e:	681b      	ldr	r3, [r3, #0]
 8004d20:	69db      	ldr	r3, [r3, #28]
 8004d22:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8004d26:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8004d2a:	d147      	bne.n	8004dbc <UART_WaitOnFlagUntilTimeout+0x15e>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8004d2c:	68fb      	ldr	r3, [r7, #12]
 8004d2e:	681b      	ldr	r3, [r3, #0]
 8004d30:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8004d34:	621a      	str	r2, [r3, #32]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8004d36:	68fb      	ldr	r3, [r7, #12]
 8004d38:	681b      	ldr	r3, [r3, #0]
 8004d3a:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004d3c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004d3e:	e853 3f00 	ldrex	r3, [r3]
 8004d42:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8004d44:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004d46:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8004d4a:	66fb      	str	r3, [r7, #108]	; 0x6c
 8004d4c:	68fb      	ldr	r3, [r7, #12]
 8004d4e:	681b      	ldr	r3, [r3, #0]
 8004d50:	461a      	mov	r2, r3
 8004d52:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004d54:	637b      	str	r3, [r7, #52]	; 0x34
 8004d56:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004d58:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8004d5a:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8004d5c:	e841 2300 	strex	r3, r2, [r1]
 8004d60:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 8004d62:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004d64:	2b00      	cmp	r3, #0
 8004d66:	d1e6      	bne.n	8004d36 <UART_WaitOnFlagUntilTimeout+0xd8>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004d68:	68fb      	ldr	r3, [r7, #12]
 8004d6a:	681b      	ldr	r3, [r3, #0]
 8004d6c:	3308      	adds	r3, #8
 8004d6e:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004d70:	697b      	ldr	r3, [r7, #20]
 8004d72:	e853 3f00 	ldrex	r3, [r3]
 8004d76:	613b      	str	r3, [r7, #16]
   return(result);
 8004d78:	693b      	ldr	r3, [r7, #16]
 8004d7a:	f023 0301 	bic.w	r3, r3, #1
 8004d7e:	66bb      	str	r3, [r7, #104]	; 0x68
 8004d80:	68fb      	ldr	r3, [r7, #12]
 8004d82:	681b      	ldr	r3, [r3, #0]
 8004d84:	3308      	adds	r3, #8
 8004d86:	6eba      	ldr	r2, [r7, #104]	; 0x68
 8004d88:	623a      	str	r2, [r7, #32]
 8004d8a:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004d8c:	69f9      	ldr	r1, [r7, #28]
 8004d8e:	6a3a      	ldr	r2, [r7, #32]
 8004d90:	e841 2300 	strex	r3, r2, [r1]
 8004d94:	61bb      	str	r3, [r7, #24]
   return(result);
 8004d96:	69bb      	ldr	r3, [r7, #24]
 8004d98:	2b00      	cmp	r3, #0
 8004d9a:	d1e5      	bne.n	8004d68 <UART_WaitOnFlagUntilTimeout+0x10a>

          huart->gState = HAL_UART_STATE_READY;
 8004d9c:	68fb      	ldr	r3, [r7, #12]
 8004d9e:	2220      	movs	r2, #32
 8004da0:	679a      	str	r2, [r3, #120]	; 0x78
          huart->RxState = HAL_UART_STATE_READY;
 8004da2:	68fb      	ldr	r3, [r7, #12]
 8004da4:	2220      	movs	r2, #32
 8004da6:	67da      	str	r2, [r3, #124]	; 0x7c
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8004da8:	68fb      	ldr	r3, [r7, #12]
 8004daa:	2220      	movs	r2, #32
 8004dac:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8004db0:	68fb      	ldr	r3, [r7, #12]
 8004db2:	2200      	movs	r2, #0
 8004db4:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

          return HAL_TIMEOUT;
 8004db8:	2303      	movs	r3, #3
 8004dba:	e010      	b.n	8004dde <UART_WaitOnFlagUntilTimeout+0x180>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8004dbc:	68fb      	ldr	r3, [r7, #12]
 8004dbe:	681b      	ldr	r3, [r3, #0]
 8004dc0:	69da      	ldr	r2, [r3, #28]
 8004dc2:	68bb      	ldr	r3, [r7, #8]
 8004dc4:	4013      	ands	r3, r2
 8004dc6:	68ba      	ldr	r2, [r7, #8]
 8004dc8:	429a      	cmp	r2, r3
 8004dca:	bf0c      	ite	eq
 8004dcc:	2301      	moveq	r3, #1
 8004dce:	2300      	movne	r3, #0
 8004dd0:	b2db      	uxtb	r3, r3
 8004dd2:	461a      	mov	r2, r3
 8004dd4:	79fb      	ldrb	r3, [r7, #7]
 8004dd6:	429a      	cmp	r2, r3
 8004dd8:	f43f af4a 	beq.w	8004c70 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8004ddc:	2300      	movs	r3, #0
}
 8004dde:	4618      	mov	r0, r3
 8004de0:	3770      	adds	r7, #112	; 0x70
 8004de2:	46bd      	mov	sp, r7
 8004de4:	bd80      	pop	{r7, pc}

08004de6 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8004de6:	b480      	push	{r7}
 8004de8:	b095      	sub	sp, #84	; 0x54
 8004dea:	af00      	add	r7, sp, #0
 8004dec:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8004dee:	687b      	ldr	r3, [r7, #4]
 8004df0:	681b      	ldr	r3, [r3, #0]
 8004df2:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004df4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004df6:	e853 3f00 	ldrex	r3, [r3]
 8004dfa:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8004dfc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004dfe:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8004e02:	64fb      	str	r3, [r7, #76]	; 0x4c
 8004e04:	687b      	ldr	r3, [r7, #4]
 8004e06:	681b      	ldr	r3, [r3, #0]
 8004e08:	461a      	mov	r2, r3
 8004e0a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004e0c:	643b      	str	r3, [r7, #64]	; 0x40
 8004e0e:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004e10:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8004e12:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8004e14:	e841 2300 	strex	r3, r2, [r1]
 8004e18:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8004e1a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004e1c:	2b00      	cmp	r3, #0
 8004e1e:	d1e6      	bne.n	8004dee <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004e20:	687b      	ldr	r3, [r7, #4]
 8004e22:	681b      	ldr	r3, [r3, #0]
 8004e24:	3308      	adds	r3, #8
 8004e26:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004e28:	6a3b      	ldr	r3, [r7, #32]
 8004e2a:	e853 3f00 	ldrex	r3, [r3]
 8004e2e:	61fb      	str	r3, [r7, #28]
   return(result);
 8004e30:	69fb      	ldr	r3, [r7, #28]
 8004e32:	f023 0301 	bic.w	r3, r3, #1
 8004e36:	64bb      	str	r3, [r7, #72]	; 0x48
 8004e38:	687b      	ldr	r3, [r7, #4]
 8004e3a:	681b      	ldr	r3, [r3, #0]
 8004e3c:	3308      	adds	r3, #8
 8004e3e:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8004e40:	62fa      	str	r2, [r7, #44]	; 0x2c
 8004e42:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004e44:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8004e46:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8004e48:	e841 2300 	strex	r3, r2, [r1]
 8004e4c:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8004e4e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004e50:	2b00      	cmp	r3, #0
 8004e52:	d1e5      	bne.n	8004e20 <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8004e54:	687b      	ldr	r3, [r7, #4]
 8004e56:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004e58:	2b01      	cmp	r3, #1
 8004e5a:	d118      	bne.n	8004e8e <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004e5c:	687b      	ldr	r3, [r7, #4]
 8004e5e:	681b      	ldr	r3, [r3, #0]
 8004e60:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004e62:	68fb      	ldr	r3, [r7, #12]
 8004e64:	e853 3f00 	ldrex	r3, [r3]
 8004e68:	60bb      	str	r3, [r7, #8]
   return(result);
 8004e6a:	68bb      	ldr	r3, [r7, #8]
 8004e6c:	f023 0310 	bic.w	r3, r3, #16
 8004e70:	647b      	str	r3, [r7, #68]	; 0x44
 8004e72:	687b      	ldr	r3, [r7, #4]
 8004e74:	681b      	ldr	r3, [r3, #0]
 8004e76:	461a      	mov	r2, r3
 8004e78:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8004e7a:	61bb      	str	r3, [r7, #24]
 8004e7c:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004e7e:	6979      	ldr	r1, [r7, #20]
 8004e80:	69ba      	ldr	r2, [r7, #24]
 8004e82:	e841 2300 	strex	r3, r2, [r1]
 8004e86:	613b      	str	r3, [r7, #16]
   return(result);
 8004e88:	693b      	ldr	r3, [r7, #16]
 8004e8a:	2b00      	cmp	r3, #0
 8004e8c:	d1e6      	bne.n	8004e5c <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8004e8e:	687b      	ldr	r3, [r7, #4]
 8004e90:	2220      	movs	r2, #32
 8004e92:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004e94:	687b      	ldr	r3, [r7, #4]
 8004e96:	2200      	movs	r2, #0
 8004e98:	661a      	str	r2, [r3, #96]	; 0x60

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8004e9a:	687b      	ldr	r3, [r7, #4]
 8004e9c:	2200      	movs	r2, #0
 8004e9e:	665a      	str	r2, [r3, #100]	; 0x64
}
 8004ea0:	bf00      	nop
 8004ea2:	3754      	adds	r7, #84	; 0x54
 8004ea4:	46bd      	mov	sp, r7
 8004ea6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004eaa:	4770      	bx	lr

08004eac <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8004eac:	b580      	push	{r7, lr}
 8004eae:	b084      	sub	sp, #16
 8004eb0:	af00      	add	r7, sp, #0
 8004eb2:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8004eb4:	687b      	ldr	r3, [r7, #4]
 8004eb6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004eb8:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 8004eba:	68fb      	ldr	r3, [r7, #12]
 8004ebc:	2200      	movs	r2, #0
 8004ebe:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a
  huart->TxXferCount = 0U;
 8004ec2:	68fb      	ldr	r3, [r7, #12]
 8004ec4:	2200      	movs	r2, #0
 8004ec6:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8004eca:	68f8      	ldr	r0, [r7, #12]
 8004ecc:	f7ff fc4c 	bl	8004768 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8004ed0:	bf00      	nop
 8004ed2:	3710      	adds	r7, #16
 8004ed4:	46bd      	mov	sp, r7
 8004ed6:	bd80      	pop	{r7, pc}

08004ed8 <UART_TxISR_8BIT>:
  *         interruptions have been enabled by HAL_UART_Transmit_IT().
  * @param huart UART handle.
  * @retval None
  */
static void UART_TxISR_8BIT(UART_HandleTypeDef *huart)
{
 8004ed8:	b480      	push	{r7}
 8004eda:	b08f      	sub	sp, #60	; 0x3c
 8004edc:	af00      	add	r7, sp, #0
 8004ede:	6078      	str	r0, [r7, #4]
  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8004ee0:	687b      	ldr	r3, [r7, #4]
 8004ee2:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8004ee4:	2b21      	cmp	r3, #33	; 0x21
 8004ee6:	d14d      	bne.n	8004f84 <UART_TxISR_8BIT+0xac>
  {
    if (huart->TxXferCount == 0U)
 8004ee8:	687b      	ldr	r3, [r7, #4]
 8004eea:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 8004eee:	b29b      	uxth	r3, r3
 8004ef0:	2b00      	cmp	r3, #0
 8004ef2:	d132      	bne.n	8004f5a <UART_TxISR_8BIT+0x82>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TXEIE);
 8004ef4:	687b      	ldr	r3, [r7, #4]
 8004ef6:	681b      	ldr	r3, [r3, #0]
 8004ef8:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004efa:	6a3b      	ldr	r3, [r7, #32]
 8004efc:	e853 3f00 	ldrex	r3, [r3]
 8004f00:	61fb      	str	r3, [r7, #28]
   return(result);
 8004f02:	69fb      	ldr	r3, [r7, #28]
 8004f04:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8004f08:	637b      	str	r3, [r7, #52]	; 0x34
 8004f0a:	687b      	ldr	r3, [r7, #4]
 8004f0c:	681b      	ldr	r3, [r3, #0]
 8004f0e:	461a      	mov	r2, r3
 8004f10:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004f12:	62fb      	str	r3, [r7, #44]	; 0x2c
 8004f14:	62ba      	str	r2, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004f16:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8004f18:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8004f1a:	e841 2300 	strex	r3, r2, [r1]
 8004f1e:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8004f20:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004f22:	2b00      	cmp	r3, #0
 8004f24:	d1e6      	bne.n	8004ef4 <UART_TxISR_8BIT+0x1c>

      /* Enable the UART Transmit Complete Interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8004f26:	687b      	ldr	r3, [r7, #4]
 8004f28:	681b      	ldr	r3, [r3, #0]
 8004f2a:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004f2c:	68fb      	ldr	r3, [r7, #12]
 8004f2e:	e853 3f00 	ldrex	r3, [r3]
 8004f32:	60bb      	str	r3, [r7, #8]
   return(result);
 8004f34:	68bb      	ldr	r3, [r7, #8]
 8004f36:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8004f3a:	633b      	str	r3, [r7, #48]	; 0x30
 8004f3c:	687b      	ldr	r3, [r7, #4]
 8004f3e:	681b      	ldr	r3, [r3, #0]
 8004f40:	461a      	mov	r2, r3
 8004f42:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004f44:	61bb      	str	r3, [r7, #24]
 8004f46:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004f48:	6979      	ldr	r1, [r7, #20]
 8004f4a:	69ba      	ldr	r2, [r7, #24]
 8004f4c:	e841 2300 	strex	r3, r2, [r1]
 8004f50:	613b      	str	r3, [r7, #16]
   return(result);
 8004f52:	693b      	ldr	r3, [r7, #16]
 8004f54:	2b00      	cmp	r3, #0
 8004f56:	d1e6      	bne.n	8004f26 <UART_TxISR_8BIT+0x4e>
      huart->Instance->TDR = (uint8_t)(*huart->pTxBuffPtr & (uint8_t)0xFF);
      huart->pTxBuffPtr++;
      huart->TxXferCount--;
    }
  }
}
 8004f58:	e014      	b.n	8004f84 <UART_TxISR_8BIT+0xac>
      huart->Instance->TDR = (uint8_t)(*huart->pTxBuffPtr & (uint8_t)0xFF);
 8004f5a:	687b      	ldr	r3, [r7, #4]
 8004f5c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004f5e:	781a      	ldrb	r2, [r3, #0]
 8004f60:	687b      	ldr	r3, [r7, #4]
 8004f62:	681b      	ldr	r3, [r3, #0]
 8004f64:	b292      	uxth	r2, r2
 8004f66:	851a      	strh	r2, [r3, #40]	; 0x28
      huart->pTxBuffPtr++;
 8004f68:	687b      	ldr	r3, [r7, #4]
 8004f6a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004f6c:	1c5a      	adds	r2, r3, #1
 8004f6e:	687b      	ldr	r3, [r7, #4]
 8004f70:	64da      	str	r2, [r3, #76]	; 0x4c
      huart->TxXferCount--;
 8004f72:	687b      	ldr	r3, [r7, #4]
 8004f74:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 8004f78:	b29b      	uxth	r3, r3
 8004f7a:	3b01      	subs	r3, #1
 8004f7c:	b29a      	uxth	r2, r3
 8004f7e:	687b      	ldr	r3, [r7, #4]
 8004f80:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
}
 8004f84:	bf00      	nop
 8004f86:	373c      	adds	r7, #60	; 0x3c
 8004f88:	46bd      	mov	sp, r7
 8004f8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f8e:	4770      	bx	lr

08004f90 <UART_TxISR_16BIT>:
  *         interruptions have been enabled by HAL_UART_Transmit_IT().
  * @param huart UART handle.
  * @retval None
  */
static void UART_TxISR_16BIT(UART_HandleTypeDef *huart)
{
 8004f90:	b480      	push	{r7}
 8004f92:	b091      	sub	sp, #68	; 0x44
 8004f94:	af00      	add	r7, sp, #0
 8004f96:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8004f98:	687b      	ldr	r3, [r7, #4]
 8004f9a:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8004f9c:	2b21      	cmp	r3, #33	; 0x21
 8004f9e:	d151      	bne.n	8005044 <UART_TxISR_16BIT+0xb4>
  {
    if (huart->TxXferCount == 0U)
 8004fa0:	687b      	ldr	r3, [r7, #4]
 8004fa2:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 8004fa6:	b29b      	uxth	r3, r3
 8004fa8:	2b00      	cmp	r3, #0
 8004faa:	d132      	bne.n	8005012 <UART_TxISR_16BIT+0x82>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TXEIE);
 8004fac:	687b      	ldr	r3, [r7, #4]
 8004fae:	681b      	ldr	r3, [r3, #0]
 8004fb0:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004fb2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004fb4:	e853 3f00 	ldrex	r3, [r3]
 8004fb8:	623b      	str	r3, [r7, #32]
   return(result);
 8004fba:	6a3b      	ldr	r3, [r7, #32]
 8004fbc:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8004fc0:	63bb      	str	r3, [r7, #56]	; 0x38
 8004fc2:	687b      	ldr	r3, [r7, #4]
 8004fc4:	681b      	ldr	r3, [r3, #0]
 8004fc6:	461a      	mov	r2, r3
 8004fc8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004fca:	633b      	str	r3, [r7, #48]	; 0x30
 8004fcc:	62fa      	str	r2, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004fce:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8004fd0:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8004fd2:	e841 2300 	strex	r3, r2, [r1]
 8004fd6:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8004fd8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004fda:	2b00      	cmp	r3, #0
 8004fdc:	d1e6      	bne.n	8004fac <UART_TxISR_16BIT+0x1c>

      /* Enable the UART Transmit Complete Interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8004fde:	687b      	ldr	r3, [r7, #4]
 8004fe0:	681b      	ldr	r3, [r3, #0]
 8004fe2:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004fe4:	693b      	ldr	r3, [r7, #16]
 8004fe6:	e853 3f00 	ldrex	r3, [r3]
 8004fea:	60fb      	str	r3, [r7, #12]
   return(result);
 8004fec:	68fb      	ldr	r3, [r7, #12]
 8004fee:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8004ff2:	637b      	str	r3, [r7, #52]	; 0x34
 8004ff4:	687b      	ldr	r3, [r7, #4]
 8004ff6:	681b      	ldr	r3, [r3, #0]
 8004ff8:	461a      	mov	r2, r3
 8004ffa:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004ffc:	61fb      	str	r3, [r7, #28]
 8004ffe:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005000:	69b9      	ldr	r1, [r7, #24]
 8005002:	69fa      	ldr	r2, [r7, #28]
 8005004:	e841 2300 	strex	r3, r2, [r1]
 8005008:	617b      	str	r3, [r7, #20]
   return(result);
 800500a:	697b      	ldr	r3, [r7, #20]
 800500c:	2b00      	cmp	r3, #0
 800500e:	d1e6      	bne.n	8004fde <UART_TxISR_16BIT+0x4e>
      huart->Instance->TDR = (((uint32_t)(*tmp)) & 0x01FFUL);
      huart->pTxBuffPtr += 2U;
      huart->TxXferCount--;
    }
  }
}
 8005010:	e018      	b.n	8005044 <UART_TxISR_16BIT+0xb4>
      tmp = (uint16_t *) huart->pTxBuffPtr;
 8005012:	687b      	ldr	r3, [r7, #4]
 8005014:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005016:	63fb      	str	r3, [r7, #60]	; 0x3c
      huart->Instance->TDR = (((uint32_t)(*tmp)) & 0x01FFUL);
 8005018:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800501a:	881a      	ldrh	r2, [r3, #0]
 800501c:	687b      	ldr	r3, [r7, #4]
 800501e:	681b      	ldr	r3, [r3, #0]
 8005020:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8005024:	b292      	uxth	r2, r2
 8005026:	851a      	strh	r2, [r3, #40]	; 0x28
      huart->pTxBuffPtr += 2U;
 8005028:	687b      	ldr	r3, [r7, #4]
 800502a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800502c:	1c9a      	adds	r2, r3, #2
 800502e:	687b      	ldr	r3, [r7, #4]
 8005030:	64da      	str	r2, [r3, #76]	; 0x4c
      huart->TxXferCount--;
 8005032:	687b      	ldr	r3, [r7, #4]
 8005034:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 8005038:	b29b      	uxth	r3, r3
 800503a:	3b01      	subs	r3, #1
 800503c:	b29a      	uxth	r2, r3
 800503e:	687b      	ldr	r3, [r7, #4]
 8005040:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
}
 8005044:	bf00      	nop
 8005046:	3744      	adds	r7, #68	; 0x44
 8005048:	46bd      	mov	sp, r7
 800504a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800504e:	4770      	bx	lr

08005050 <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8005050:	b580      	push	{r7, lr}
 8005052:	b088      	sub	sp, #32
 8005054:	af00      	add	r7, sp, #0
 8005056:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8005058:	687b      	ldr	r3, [r7, #4]
 800505a:	681b      	ldr	r3, [r3, #0]
 800505c:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800505e:	68fb      	ldr	r3, [r7, #12]
 8005060:	e853 3f00 	ldrex	r3, [r3]
 8005064:	60bb      	str	r3, [r7, #8]
   return(result);
 8005066:	68bb      	ldr	r3, [r7, #8]
 8005068:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800506c:	61fb      	str	r3, [r7, #28]
 800506e:	687b      	ldr	r3, [r7, #4]
 8005070:	681b      	ldr	r3, [r3, #0]
 8005072:	461a      	mov	r2, r3
 8005074:	69fb      	ldr	r3, [r7, #28]
 8005076:	61bb      	str	r3, [r7, #24]
 8005078:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800507a:	6979      	ldr	r1, [r7, #20]
 800507c:	69ba      	ldr	r2, [r7, #24]
 800507e:	e841 2300 	strex	r3, r2, [r1]
 8005082:	613b      	str	r3, [r7, #16]
   return(result);
 8005084:	693b      	ldr	r3, [r7, #16]
 8005086:	2b00      	cmp	r3, #0
 8005088:	d1e6      	bne.n	8005058 <UART_EndTransmit_IT+0x8>

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800508a:	687b      	ldr	r3, [r7, #4]
 800508c:	2220      	movs	r2, #32
 800508e:	679a      	str	r2, [r3, #120]	; 0x78

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 8005090:	687b      	ldr	r3, [r7, #4]
 8005092:	2200      	movs	r2, #0
 8005094:	669a      	str	r2, [r3, #104]	; 0x68
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8005096:	6878      	ldr	r0, [r7, #4]
 8005098:	f7fb fd08 	bl	8000aac <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800509c:	bf00      	nop
 800509e:	3720      	adds	r7, #32
 80050a0:	46bd      	mov	sp, r7
 80050a2:	bd80      	pop	{r7, pc}

080050a4 <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 80050a4:	b480      	push	{r7}
 80050a6:	b083      	sub	sp, #12
 80050a8:	af00      	add	r7, sp, #0
 80050aa:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 80050ac:	bf00      	nop
 80050ae:	370c      	adds	r7, #12
 80050b0:	46bd      	mov	sp, r7
 80050b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80050b6:	4770      	bx	lr

080050b8 <__libc_init_array>:
 80050b8:	b570      	push	{r4, r5, r6, lr}
 80050ba:	4d0d      	ldr	r5, [pc, #52]	; (80050f0 <__libc_init_array+0x38>)
 80050bc:	4c0d      	ldr	r4, [pc, #52]	; (80050f4 <__libc_init_array+0x3c>)
 80050be:	1b64      	subs	r4, r4, r5
 80050c0:	10a4      	asrs	r4, r4, #2
 80050c2:	2600      	movs	r6, #0
 80050c4:	42a6      	cmp	r6, r4
 80050c6:	d109      	bne.n	80050dc <__libc_init_array+0x24>
 80050c8:	4d0b      	ldr	r5, [pc, #44]	; (80050f8 <__libc_init_array+0x40>)
 80050ca:	4c0c      	ldr	r4, [pc, #48]	; (80050fc <__libc_init_array+0x44>)
 80050cc:	f000 f820 	bl	8005110 <_init>
 80050d0:	1b64      	subs	r4, r4, r5
 80050d2:	10a4      	asrs	r4, r4, #2
 80050d4:	2600      	movs	r6, #0
 80050d6:	42a6      	cmp	r6, r4
 80050d8:	d105      	bne.n	80050e6 <__libc_init_array+0x2e>
 80050da:	bd70      	pop	{r4, r5, r6, pc}
 80050dc:	f855 3b04 	ldr.w	r3, [r5], #4
 80050e0:	4798      	blx	r3
 80050e2:	3601      	adds	r6, #1
 80050e4:	e7ee      	b.n	80050c4 <__libc_init_array+0xc>
 80050e6:	f855 3b04 	ldr.w	r3, [r5], #4
 80050ea:	4798      	blx	r3
 80050ec:	3601      	adds	r6, #1
 80050ee:	e7f2      	b.n	80050d6 <__libc_init_array+0x1e>
 80050f0:	08005160 	.word	0x08005160
 80050f4:	08005160 	.word	0x08005160
 80050f8:	08005160 	.word	0x08005160
 80050fc:	08005164 	.word	0x08005164

08005100 <memset>:
 8005100:	4402      	add	r2, r0
 8005102:	4603      	mov	r3, r0
 8005104:	4293      	cmp	r3, r2
 8005106:	d100      	bne.n	800510a <memset+0xa>
 8005108:	4770      	bx	lr
 800510a:	f803 1b01 	strb.w	r1, [r3], #1
 800510e:	e7f9      	b.n	8005104 <memset+0x4>

08005110 <_init>:
 8005110:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005112:	bf00      	nop
 8005114:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8005116:	bc08      	pop	{r3}
 8005118:	469e      	mov	lr, r3
 800511a:	4770      	bx	lr

0800511c <_fini>:
 800511c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800511e:	bf00      	nop
 8005120:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8005122:	bc08      	pop	{r3}
 8005124:	469e      	mov	lr, r3
 8005126:	4770      	bx	lr
