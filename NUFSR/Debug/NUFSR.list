
NUFSR.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00005230  08000188  08000188  00010188  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000038  080053b8  080053b8  000153b8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080053f0  080053f0  0002000c  2**0
                  CONTENTS
  4 .ARM          00000000  080053f0  080053f0  0002000c  2**0
                  CONTENTS
  5 .preinit_array 00000000  080053f0  080053f0  0002000c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080053f0  080053f0  000153f0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080053f4  080053f4  000153f4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000000c  20000000  080053f8  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000188  2000000c  08005404  0002000c  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20000194  08005404  00020194  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0002000c  2**0
                  CONTENTS, READONLY
 12 .debug_info   00013fd9  00000000  00000000  0002003c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00002daa  00000000  00000000  00034015  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001090  00000000  00000000  00036dc0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000f58  00000000  00000000  00037e50  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0001d15b  00000000  00000000  00038da8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00015f31  00000000  00000000  00055f03  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000a9860  00000000  00000000  0006be34  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  00115694  2**0
                  CONTENTS, READONLY
 20 .debug_frame  0000442c  00000000  00000000  001156e4  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000188 <__do_global_dtors_aux>:
 8000188:	b510      	push	{r4, lr}
 800018a:	4c05      	ldr	r4, [pc, #20]	; (80001a0 <__do_global_dtors_aux+0x18>)
 800018c:	7823      	ldrb	r3, [r4, #0]
 800018e:	b933      	cbnz	r3, 800019e <__do_global_dtors_aux+0x16>
 8000190:	4b04      	ldr	r3, [pc, #16]	; (80001a4 <__do_global_dtors_aux+0x1c>)
 8000192:	b113      	cbz	r3, 800019a <__do_global_dtors_aux+0x12>
 8000194:	4804      	ldr	r0, [pc, #16]	; (80001a8 <__do_global_dtors_aux+0x20>)
 8000196:	f3af 8000 	nop.w
 800019a:	2301      	movs	r3, #1
 800019c:	7023      	strb	r3, [r4, #0]
 800019e:	bd10      	pop	{r4, pc}
 80001a0:	2000000c 	.word	0x2000000c
 80001a4:	00000000 	.word	0x00000000
 80001a8:	080053a0 	.word	0x080053a0

080001ac <frame_dummy>:
 80001ac:	b508      	push	{r3, lr}
 80001ae:	4b03      	ldr	r3, [pc, #12]	; (80001bc <frame_dummy+0x10>)
 80001b0:	b11b      	cbz	r3, 80001ba <frame_dummy+0xe>
 80001b2:	4903      	ldr	r1, [pc, #12]	; (80001c0 <frame_dummy+0x14>)
 80001b4:	4803      	ldr	r0, [pc, #12]	; (80001c4 <frame_dummy+0x18>)
 80001b6:	f3af 8000 	nop.w
 80001ba:	bd08      	pop	{r3, pc}
 80001bc:	00000000 	.word	0x00000000
 80001c0:	20000010 	.word	0x20000010
 80001c4:	080053a0 	.word	0x080053a0

080001c8 <MX_ADC1_Init>:

ADC_HandleTypeDef hadc1;

/* ADC1 init function */
void MX_ADC1_Init(void)
{
 80001c8:	b580      	push	{r7, lr}
 80001ca:	b084      	sub	sp, #16
 80001cc:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 80001ce:	1d3b      	adds	r3, r7, #4
 80001d0:	2200      	movs	r2, #0
 80001d2:	601a      	str	r2, [r3, #0]
 80001d4:	605a      	str	r2, [r3, #4]
 80001d6:	609a      	str	r2, [r3, #8]
  /* USER CODE BEGIN ADC1_Init 1 */

  /* USER CODE END ADC1_Init 1 */
  /** Common config
  */
  hadc1.Instance = ADC1;
 80001d8:	4b2b      	ldr	r3, [pc, #172]	; (8000288 <MX_ADC1_Init+0xc0>)
 80001da:	4a2c      	ldr	r2, [pc, #176]	; (800028c <MX_ADC1_Init+0xc4>)
 80001dc:	601a      	str	r2, [r3, #0]
  hadc1.Init.ScanConvMode = ADC_SCAN_ENABLE;
 80001de:	4b2a      	ldr	r3, [pc, #168]	; (8000288 <MX_ADC1_Init+0xc0>)
 80001e0:	f44f 7280 	mov.w	r2, #256	; 0x100
 80001e4:	609a      	str	r2, [r3, #8]
  hadc1.Init.ContinuousConvMode = ENABLE;
 80001e6:	4b28      	ldr	r3, [pc, #160]	; (8000288 <MX_ADC1_Init+0xc0>)
 80001e8:	2201      	movs	r2, #1
 80001ea:	731a      	strb	r2, [r3, #12]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 80001ec:	4b26      	ldr	r3, [pc, #152]	; (8000288 <MX_ADC1_Init+0xc0>)
 80001ee:	2200      	movs	r2, #0
 80001f0:	751a      	strb	r2, [r3, #20]
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 80001f2:	4b25      	ldr	r3, [pc, #148]	; (8000288 <MX_ADC1_Init+0xc0>)
 80001f4:	f44f 2260 	mov.w	r2, #917504	; 0xe0000
 80001f8:	61da      	str	r2, [r3, #28]
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 80001fa:	4b23      	ldr	r3, [pc, #140]	; (8000288 <MX_ADC1_Init+0xc0>)
 80001fc:	2200      	movs	r2, #0
 80001fe:	605a      	str	r2, [r3, #4]
  hadc1.Init.NbrOfConversion = 4;
 8000200:	4b21      	ldr	r3, [pc, #132]	; (8000288 <MX_ADC1_Init+0xc0>)
 8000202:	2204      	movs	r2, #4
 8000204:	611a      	str	r2, [r3, #16]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8000206:	4820      	ldr	r0, [pc, #128]	; (8000288 <MX_ADC1_Init+0xc0>)
 8000208:	f000 fd98 	bl	8000d3c <HAL_ADC_Init>
 800020c:	4603      	mov	r3, r0
 800020e:	2b00      	cmp	r3, #0
 8000210:	d001      	beq.n	8000216 <MX_ADC1_Init+0x4e>
  {
    Error_Handler();
 8000212:	f000 fa71 	bl	80006f8 <Error_Handler>
  }
  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_0;
 8000216:	2300      	movs	r3, #0
 8000218:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 800021a:	2301      	movs	r3, #1
 800021c:	60bb      	str	r3, [r7, #8]
  sConfig.SamplingTime = ADC_SAMPLETIME_1CYCLE_5;
 800021e:	2300      	movs	r3, #0
 8000220:	60fb      	str	r3, [r7, #12]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000222:	1d3b      	adds	r3, r7, #4
 8000224:	4619      	mov	r1, r3
 8000226:	4818      	ldr	r0, [pc, #96]	; (8000288 <MX_ADC1_Init+0xc0>)
 8000228:	f000 fe60 	bl	8000eec <HAL_ADC_ConfigChannel>
 800022c:	4603      	mov	r3, r0
 800022e:	2b00      	cmp	r3, #0
 8000230:	d001      	beq.n	8000236 <MX_ADC1_Init+0x6e>
  {
    Error_Handler();
 8000232:	f000 fa61 	bl	80006f8 <Error_Handler>
  }
  /** Configure Regular Channel
  */
  sConfig.Rank = ADC_REGULAR_RANK_2;
 8000236:	2302      	movs	r3, #2
 8000238:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 800023a:	1d3b      	adds	r3, r7, #4
 800023c:	4619      	mov	r1, r3
 800023e:	4812      	ldr	r0, [pc, #72]	; (8000288 <MX_ADC1_Init+0xc0>)
 8000240:	f000 fe54 	bl	8000eec <HAL_ADC_ConfigChannel>
 8000244:	4603      	mov	r3, r0
 8000246:	2b00      	cmp	r3, #0
 8000248:	d001      	beq.n	800024e <MX_ADC1_Init+0x86>
  {
    Error_Handler();
 800024a:	f000 fa55 	bl	80006f8 <Error_Handler>
  }
  /** Configure Regular Channel
  */
  sConfig.Rank = ADC_REGULAR_RANK_3;
 800024e:	2303      	movs	r3, #3
 8000250:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000252:	1d3b      	adds	r3, r7, #4
 8000254:	4619      	mov	r1, r3
 8000256:	480c      	ldr	r0, [pc, #48]	; (8000288 <MX_ADC1_Init+0xc0>)
 8000258:	f000 fe48 	bl	8000eec <HAL_ADC_ConfigChannel>
 800025c:	4603      	mov	r3, r0
 800025e:	2b00      	cmp	r3, #0
 8000260:	d001      	beq.n	8000266 <MX_ADC1_Init+0x9e>
  {
    Error_Handler();
 8000262:	f000 fa49 	bl	80006f8 <Error_Handler>
  }
  /** Configure Regular Channel
  */
  sConfig.Rank = ADC_REGULAR_RANK_4;
 8000266:	2304      	movs	r3, #4
 8000268:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 800026a:	1d3b      	adds	r3, r7, #4
 800026c:	4619      	mov	r1, r3
 800026e:	4806      	ldr	r0, [pc, #24]	; (8000288 <MX_ADC1_Init+0xc0>)
 8000270:	f000 fe3c 	bl	8000eec <HAL_ADC_ConfigChannel>
 8000274:	4603      	mov	r3, r0
 8000276:	2b00      	cmp	r3, #0
 8000278:	d001      	beq.n	800027e <MX_ADC1_Init+0xb6>
  {
    Error_Handler();
 800027a:	f000 fa3d 	bl	80006f8 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 800027e:	bf00      	nop
 8000280:	3710      	adds	r7, #16
 8000282:	46bd      	mov	sp, r7
 8000284:	bd80      	pop	{r7, pc}
 8000286:	bf00      	nop
 8000288:	20000028 	.word	0x20000028
 800028c:	40012400 	.word	0x40012400

08000290 <HAL_ADC_MspInit>:

void HAL_ADC_MspInit(ADC_HandleTypeDef* adcHandle)
{
 8000290:	b580      	push	{r7, lr}
 8000292:	b08a      	sub	sp, #40	; 0x28
 8000294:	af00      	add	r7, sp, #0
 8000296:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000298:	f107 0314 	add.w	r3, r7, #20
 800029c:	2200      	movs	r2, #0
 800029e:	601a      	str	r2, [r3, #0]
 80002a0:	605a      	str	r2, [r3, #4]
 80002a2:	609a      	str	r2, [r3, #8]
 80002a4:	60da      	str	r2, [r3, #12]
 80002a6:	611a      	str	r2, [r3, #16]
  if(adcHandle->Instance==ADC1)
 80002a8:	687b      	ldr	r3, [r7, #4]
 80002aa:	681b      	ldr	r3, [r3, #0]
 80002ac:	4a15      	ldr	r2, [pc, #84]	; (8000304 <HAL_ADC_MspInit+0x74>)
 80002ae:	4293      	cmp	r3, r2
 80002b0:	d124      	bne.n	80002fc <HAL_ADC_MspInit+0x6c>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* ADC1 clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 80002b2:	4b15      	ldr	r3, [pc, #84]	; (8000308 <HAL_ADC_MspInit+0x78>)
 80002b4:	699b      	ldr	r3, [r3, #24]
 80002b6:	4a14      	ldr	r2, [pc, #80]	; (8000308 <HAL_ADC_MspInit+0x78>)
 80002b8:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80002bc:	6193      	str	r3, [r2, #24]
 80002be:	4b12      	ldr	r3, [pc, #72]	; (8000308 <HAL_ADC_MspInit+0x78>)
 80002c0:	699b      	ldr	r3, [r3, #24]
 80002c2:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80002c6:	613b      	str	r3, [r7, #16]
 80002c8:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80002ca:	4b0f      	ldr	r3, [pc, #60]	; (8000308 <HAL_ADC_MspInit+0x78>)
 80002cc:	695b      	ldr	r3, [r3, #20]
 80002ce:	4a0e      	ldr	r2, [pc, #56]	; (8000308 <HAL_ADC_MspInit+0x78>)
 80002d0:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80002d4:	6153      	str	r3, [r2, #20]
 80002d6:	4b0c      	ldr	r3, [pc, #48]	; (8000308 <HAL_ADC_MspInit+0x78>)
 80002d8:	695b      	ldr	r3, [r3, #20]
 80002da:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80002de:	60fb      	str	r3, [r7, #12]
 80002e0:	68fb      	ldr	r3, [r7, #12]
    PA0     ------> ADC1_IN0
    PA1     ------> ADC1_IN1
    PA2     ------> ADC1_IN2
    PA3     ------> ADC1_IN3
    */
    GPIO_InitStruct.Pin = FSR1_Pin|FSR2_Pin|FSR3_Pin|FSR4_Pin;
 80002e2:	230f      	movs	r3, #15
 80002e4:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80002e6:	2303      	movs	r3, #3
 80002e8:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80002ea:	2300      	movs	r3, #0
 80002ec:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80002ee:	f107 0314 	add.w	r3, r7, #20
 80002f2:	4619      	mov	r1, r3
 80002f4:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80002f8:	f001 f8b2 	bl	8001460 <HAL_GPIO_Init>

  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }
}
 80002fc:	bf00      	nop
 80002fe:	3728      	adds	r7, #40	; 0x28
 8000300:	46bd      	mov	sp, r7
 8000302:	bd80      	pop	{r7, pc}
 8000304:	40012400 	.word	0x40012400
 8000308:	40021000 	.word	0x40021000

0800030c <MX_GPIO_Init>:
        * EXTI
        * Free pins are configured automatically as Analog (this feature is enabled through
        * the Code Generation settings)
*/
void MX_GPIO_Init(void)
{
 800030c:	b580      	push	{r7, lr}
 800030e:	b08c      	sub	sp, #48	; 0x30
 8000310:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000312:	f107 031c 	add.w	r3, r7, #28
 8000316:	2200      	movs	r2, #0
 8000318:	601a      	str	r2, [r3, #0]
 800031a:	605a      	str	r2, [r3, #4]
 800031c:	609a      	str	r2, [r3, #8]
 800031e:	60da      	str	r2, [r3, #12]
 8000320:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000322:	4b69      	ldr	r3, [pc, #420]	; (80004c8 <MX_GPIO_Init+0x1bc>)
 8000324:	695b      	ldr	r3, [r3, #20]
 8000326:	4a68      	ldr	r2, [pc, #416]	; (80004c8 <MX_GPIO_Init+0x1bc>)
 8000328:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 800032c:	6153      	str	r3, [r2, #20]
 800032e:	4b66      	ldr	r3, [pc, #408]	; (80004c8 <MX_GPIO_Init+0x1bc>)
 8000330:	695b      	ldr	r3, [r3, #20]
 8000332:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8000336:	61bb      	str	r3, [r7, #24]
 8000338:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 800033a:	4b63      	ldr	r3, [pc, #396]	; (80004c8 <MX_GPIO_Init+0x1bc>)
 800033c:	695b      	ldr	r3, [r3, #20]
 800033e:	4a62      	ldr	r2, [pc, #392]	; (80004c8 <MX_GPIO_Init+0x1bc>)
 8000340:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8000344:	6153      	str	r3, [r2, #20]
 8000346:	4b60      	ldr	r3, [pc, #384]	; (80004c8 <MX_GPIO_Init+0x1bc>)
 8000348:	695b      	ldr	r3, [r3, #20]
 800034a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800034e:	617b      	str	r3, [r7, #20]
 8000350:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000352:	4b5d      	ldr	r3, [pc, #372]	; (80004c8 <MX_GPIO_Init+0x1bc>)
 8000354:	695b      	ldr	r3, [r3, #20]
 8000356:	4a5c      	ldr	r2, [pc, #368]	; (80004c8 <MX_GPIO_Init+0x1bc>)
 8000358:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800035c:	6153      	str	r3, [r2, #20]
 800035e:	4b5a      	ldr	r3, [pc, #360]	; (80004c8 <MX_GPIO_Init+0x1bc>)
 8000360:	695b      	ldr	r3, [r3, #20]
 8000362:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000366:	613b      	str	r3, [r7, #16]
 8000368:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800036a:	4b57      	ldr	r3, [pc, #348]	; (80004c8 <MX_GPIO_Init+0x1bc>)
 800036c:	695b      	ldr	r3, [r3, #20]
 800036e:	4a56      	ldr	r2, [pc, #344]	; (80004c8 <MX_GPIO_Init+0x1bc>)
 8000370:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8000374:	6153      	str	r3, [r2, #20]
 8000376:	4b54      	ldr	r3, [pc, #336]	; (80004c8 <MX_GPIO_Init+0x1bc>)
 8000378:	695b      	ldr	r3, [r3, #20]
 800037a:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800037e:	60fb      	str	r3, [r7, #12]
 8000380:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8000382:	4b51      	ldr	r3, [pc, #324]	; (80004c8 <MX_GPIO_Init+0x1bc>)
 8000384:	695b      	ldr	r3, [r3, #20]
 8000386:	4a50      	ldr	r2, [pc, #320]	; (80004c8 <MX_GPIO_Init+0x1bc>)
 8000388:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 800038c:	6153      	str	r3, [r2, #20]
 800038e:	4b4e      	ldr	r3, [pc, #312]	; (80004c8 <MX_GPIO_Init+0x1bc>)
 8000390:	695b      	ldr	r3, [r3, #20]
 8000392:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8000396:	60bb      	str	r3, [r7, #8]
 8000398:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 800039a:	4b4b      	ldr	r3, [pc, #300]	; (80004c8 <MX_GPIO_Init+0x1bc>)
 800039c:	695b      	ldr	r3, [r3, #20]
 800039e:	4a4a      	ldr	r2, [pc, #296]	; (80004c8 <MX_GPIO_Init+0x1bc>)
 80003a0:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80003a4:	6153      	str	r3, [r2, #20]
 80003a6:	4b48      	ldr	r3, [pc, #288]	; (80004c8 <MX_GPIO_Init+0x1bc>)
 80003a8:	695b      	ldr	r3, [r3, #20]
 80003aa:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80003ae:	607b      	str	r3, [r7, #4]
 80003b0:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_8, GPIO_PIN_RESET);
 80003b2:	2200      	movs	r2, #0
 80003b4:	f44f 7180 	mov.w	r1, #256	; 0x100
 80003b8:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80003bc:	f001 f9ca 	bl	8001754 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, LED1_Pin|LED2_Pin, GPIO_PIN_RESET);
 80003c0:	2200      	movs	r2, #0
 80003c2:	f44f 7140 	mov.w	r1, #768	; 0x300
 80003c6:	4841      	ldr	r0, [pc, #260]	; (80004cc <MX_GPIO_Init+0x1c0>)
 80003c8:	f001 f9c4 	bl	8001754 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PC13 PC14 PC15 PC0
                           PC1 PC2 PC3 PC4
                           PC5 PC10 PC11 PC12 */
  GPIO_InitStruct.Pin = GPIO_PIN_13|GPIO_PIN_14|GPIO_PIN_15|GPIO_PIN_0
 80003cc:	f64f 433f 	movw	r3, #64575	; 0xfc3f
 80003d0:	61fb      	str	r3, [r7, #28]
                          |GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_3|GPIO_PIN_4
                          |GPIO_PIN_5|GPIO_PIN_10|GPIO_PIN_11|GPIO_PIN_12;
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80003d2:	2303      	movs	r3, #3
 80003d4:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80003d6:	2300      	movs	r3, #0
 80003d8:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80003da:	f107 031c 	add.w	r3, r7, #28
 80003de:	4619      	mov	r1, r3
 80003e0:	483b      	ldr	r0, [pc, #236]	; (80004d0 <MX_GPIO_Init+0x1c4>)
 80003e2:	f001 f83d 	bl	8001460 <HAL_GPIO_Init>

  /*Configure GPIO pins : PA4 PA5 PA6 PA7
                           PA11 PA12 */
  GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7
 80003e6:	f641 03f0 	movw	r3, #6384	; 0x18f0
 80003ea:	61fb      	str	r3, [r7, #28]
                          |GPIO_PIN_11|GPIO_PIN_12;
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80003ec:	2303      	movs	r3, #3
 80003ee:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80003f0:	2300      	movs	r3, #0
 80003f2:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80003f4:	f107 031c 	add.w	r3, r7, #28
 80003f8:	4619      	mov	r1, r3
 80003fa:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80003fe:	f001 f82f 	bl	8001460 <HAL_GPIO_Init>

  /*Configure GPIO pins : PB0 PB1 PB2 PB14
                           PB15 PB5 PB6 PB7 */
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_14
 8000402:	f24c 03e7 	movw	r3, #49383	; 0xc0e7
 8000406:	61fb      	str	r3, [r7, #28]
                          |GPIO_PIN_15|GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7;
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000408:	2303      	movs	r3, #3
 800040a:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800040c:	2300      	movs	r3, #0
 800040e:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000410:	f107 031c 	add.w	r3, r7, #28
 8000414:	4619      	mov	r1, r3
 8000416:	482d      	ldr	r0, [pc, #180]	; (80004cc <MX_GPIO_Init+0x1c0>)
 8000418:	f001 f822 	bl	8001460 <HAL_GPIO_Init>

  /*Configure GPIO pins : PE8 PE9 */
  GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 800041c:	f44f 7340 	mov.w	r3, #768	; 0x300
 8000420:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000422:	2303      	movs	r3, #3
 8000424:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000426:	2300      	movs	r3, #0
 8000428:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 800042a:	f107 031c 	add.w	r3, r7, #28
 800042e:	4619      	mov	r1, r3
 8000430:	4828      	ldr	r0, [pc, #160]	; (80004d4 <MX_GPIO_Init+0x1c8>)
 8000432:	f001 f815 	bl	8001460 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = MPU_INT_Pin;
 8000436:	f44f 7380 	mov.w	r3, #256	; 0x100
 800043a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 800043c:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 8000440:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000442:	2300      	movs	r3, #0
 8000444:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(MPU_INT_GPIO_Port, &GPIO_InitStruct);
 8000446:	f107 031c 	add.w	r3, r7, #28
 800044a:	4619      	mov	r1, r3
 800044c:	4822      	ldr	r0, [pc, #136]	; (80004d8 <MX_GPIO_Init+0x1cc>)
 800044e:	f001 f807 	bl	8001460 <HAL_GPIO_Init>

  /*Configure GPIO pin : PA8 */
  GPIO_InitStruct.Pin = GPIO_PIN_8;
 8000452:	f44f 7380 	mov.w	r3, #256	; 0x100
 8000456:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000458:	2301      	movs	r3, #1
 800045a:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800045c:	2300      	movs	r3, #0
 800045e:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000460:	2300      	movs	r3, #0
 8000462:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000464:	f107 031c 	add.w	r3, r7, #28
 8000468:	4619      	mov	r1, r3
 800046a:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800046e:	f000 fff7 	bl	8001460 <HAL_GPIO_Init>

  /*Configure GPIO pins : PF6 PF7 */
  GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8000472:	23c0      	movs	r3, #192	; 0xc0
 8000474:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000476:	2303      	movs	r3, #3
 8000478:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800047a:	2300      	movs	r3, #0
 800047c:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 800047e:	f107 031c 	add.w	r3, r7, #28
 8000482:	4619      	mov	r1, r3
 8000484:	4815      	ldr	r0, [pc, #84]	; (80004dc <MX_GPIO_Init+0x1d0>)
 8000486:	f000 ffeb 	bl	8001460 <HAL_GPIO_Init>

  /*Configure GPIO pin : PD2 */
  GPIO_InitStruct.Pin = GPIO_PIN_2;
 800048a:	2304      	movs	r3, #4
 800048c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 800048e:	2303      	movs	r3, #3
 8000490:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000492:	2300      	movs	r3, #0
 8000494:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000496:	f107 031c 	add.w	r3, r7, #28
 800049a:	4619      	mov	r1, r3
 800049c:	480e      	ldr	r0, [pc, #56]	; (80004d8 <MX_GPIO_Init+0x1cc>)
 800049e:	f000 ffdf 	bl	8001460 <HAL_GPIO_Init>

  /*Configure GPIO pins : PBPin PBPin */
  GPIO_InitStruct.Pin = LED1_Pin|LED2_Pin;
 80004a2:	f44f 7340 	mov.w	r3, #768	; 0x300
 80004a6:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80004a8:	2301      	movs	r3, #1
 80004aa:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80004ac:	2300      	movs	r3, #0
 80004ae:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80004b0:	2300      	movs	r3, #0
 80004b2:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80004b4:	f107 031c 	add.w	r3, r7, #28
 80004b8:	4619      	mov	r1, r3
 80004ba:	4804      	ldr	r0, [pc, #16]	; (80004cc <MX_GPIO_Init+0x1c0>)
 80004bc:	f000 ffd0 	bl	8001460 <HAL_GPIO_Init>

}
 80004c0:	bf00      	nop
 80004c2:	3730      	adds	r7, #48	; 0x30
 80004c4:	46bd      	mov	sp, r7
 80004c6:	bd80      	pop	{r7, pc}
 80004c8:	40021000 	.word	0x40021000
 80004cc:	48000400 	.word	0x48000400
 80004d0:	48000800 	.word	0x48000800
 80004d4:	48001000 	.word	0x48001000
 80004d8:	48000c00 	.word	0x48000c00
 80004dc:	48001400 	.word	0x48001400

080004e0 <NUfsr_IMU_Transmit>:

#include "imu.h"
#include "spi.h"

void NUfsr_IMU_Transmit(uint8_t adr, uint8_t dat, int byte_size)
{
 80004e0:	b580      	push	{r7, lr}
 80004e2:	b084      	sub	sp, #16
 80004e4:	af00      	add	r7, sp, #0
 80004e6:	4603      	mov	r3, r0
 80004e8:	603a      	str	r2, [r7, #0]
 80004ea:	71fb      	strb	r3, [r7, #7]
 80004ec:	460b      	mov	r3, r1
 80004ee:	71bb      	strb	r3, [r7, #6]
	uint8_t pak[2] = {adr,dat};
 80004f0:	79fb      	ldrb	r3, [r7, #7]
 80004f2:	733b      	strb	r3, [r7, #12]
 80004f4:	79bb      	ldrb	r3, [r7, #6]
 80004f6:	737b      	strb	r3, [r7, #13]

	HAL_SPI_Transmit(&hspi1, pak, byte_size, HAL_MAX_DELAY);
 80004f8:	683b      	ldr	r3, [r7, #0]
 80004fa:	b29a      	uxth	r2, r3
 80004fc:	f107 010c 	add.w	r1, r7, #12
 8000500:	f04f 33ff 	mov.w	r3, #4294967295
 8000504:	4803      	ldr	r0, [pc, #12]	; (8000514 <NUfsr_IMU_Transmit+0x34>)
 8000506:	f002 fdec 	bl	80030e2 <HAL_SPI_Transmit>

}
 800050a:	bf00      	nop
 800050c:	3710      	adds	r7, #16
 800050e:	46bd      	mov	sp, r7
 8000510:	bd80      	pop	{r7, pc}
 8000512:	bf00      	nop
 8000514:	20000058 	.word	0x20000058

08000518 <NUfsr_IMU_TransmitReceive>:

void NUfsr_IMU_TransmitReceive(uint8_t adr, uint8_t dat, uint8_t* dat_return, int byte_size)
{
 8000518:	b580      	push	{r7, lr}
 800051a:	b088      	sub	sp, #32
 800051c:	af02      	add	r7, sp, #8
 800051e:	60ba      	str	r2, [r7, #8]
 8000520:	607b      	str	r3, [r7, #4]
 8000522:	4603      	mov	r3, r0
 8000524:	73fb      	strb	r3, [r7, #15]
 8000526:	460b      	mov	r3, r1
 8000528:	73bb      	strb	r3, [r7, #14]
	uint8_t pak[2] = {adr,dat};
 800052a:	7bfb      	ldrb	r3, [r7, #15]
 800052c:	753b      	strb	r3, [r7, #20]
 800052e:	7bbb      	ldrb	r3, [r7, #14]
 8000530:	757b      	strb	r3, [r7, #21]

	HAL_SPI_TransmitReceive(&hspi1, pak, (uint8_t*)dat_return, byte_size, HAL_MAX_DELAY);
 8000532:	687b      	ldr	r3, [r7, #4]
 8000534:	b29b      	uxth	r3, r3
 8000536:	f107 0114 	add.w	r1, r7, #20
 800053a:	f04f 32ff 	mov.w	r2, #4294967295
 800053e:	9200      	str	r2, [sp, #0]
 8000540:	68ba      	ldr	r2, [r7, #8]
 8000542:	4803      	ldr	r0, [pc, #12]	; (8000550 <NUfsr_IMU_TransmitReceive+0x38>)
 8000544:	f002 ff3b 	bl	80033be <HAL_SPI_TransmitReceive>
}
 8000548:	bf00      	nop
 800054a:	3718      	adds	r7, #24
 800054c:	46bd      	mov	sp, r7
 800054e:	bd80      	pop	{r7, pc}
 8000550:	20000058 	.word	0x20000058

08000554 <NUfsr_IMU_Init>:

void NUfsr_IMU_Init()
{
 8000554:	b580      	push	{r7, lr}
 8000556:	af00      	add	r7, sp, #0
	// Implement series of commands to configure appropriate settings

	// Ensure R/W registers are set from power-up
    HAL_Delay(100);
 8000558:	2064      	movs	r0, #100	; 0x64
 800055a:	f000 fbcb 	bl	8000cf4 <HAL_Delay>

	// Ensure we are in SPI mode
	NUfsr_IMU_Transmit(USER_CTRL, 0x1D, 2);
 800055e:	2202      	movs	r2, #2
 8000560:	211d      	movs	r1, #29
 8000562:	206a      	movs	r0, #106	; 0x6a
 8000564:	f7ff ffbc 	bl	80004e0 <NUfsr_IMU_Transmit>

	// Reset device: 0x6b, 0x80
	NUfsr_IMU_Transmit(PWR_MGMT_1, 0x00, 2);
 8000568:	2202      	movs	r2, #2
 800056a:	2100      	movs	r1, #0
 800056c:	206b      	movs	r0, #107	; 0x6b
 800056e:	f7ff ffb7 	bl	80004e0 <NUfsr_IMU_Transmit>

	// Turn off sleep mode:
	NUfsr_IMU_Transmit(PWR_MGMT_2, 0x00, 2);
 8000572:	2202      	movs	r2, #2
 8000574:	2100      	movs	r1, #0
 8000576:	206c      	movs	r0, #108	; 0x6c
 8000578:	f7ff ffb2 	bl	80004e0 <NUfsr_IMU_Transmit>

	// Config settings
	NUfsr_IMU_Transmit(CONFIG, 0x00, 2);
 800057c:	2202      	movs	r2, #2
 800057e:	2100      	movs	r1, #0
 8000580:	201a      	movs	r0, #26
 8000582:	f7ff ffad 	bl	80004e0 <NUfsr_IMU_Transmit>

	// Gyro Config
	NUfsr_IMU_Transmit(GYRO_CONFIG, 0x00, 2);
 8000586:	2202      	movs	r2, #2
 8000588:	2100      	movs	r1, #0
 800058a:	201b      	movs	r0, #27
 800058c:	f7ff ffa8 	bl	80004e0 <NUfsr_IMU_Transmit>

	// Accel Config
	NUfsr_IMU_Transmit(ACCEL_CONFIG, 0x00, 2);
 8000590:	2202      	movs	r2, #2
 8000592:	2100      	movs	r1, #0
 8000594:	201c      	movs	r0, #28
 8000596:	f7ff ffa3 	bl	80004e0 <NUfsr_IMU_Transmit>

	// Int config
	NUfsr_IMU_Transmit(INT_PIN_CFG, 0x20, 2);
 800059a:	2202      	movs	r2, #2
 800059c:	2120      	movs	r1, #32
 800059e:	2037      	movs	r0, #55	; 0x37
 80005a0:	f7ff ff9e 	bl	80004e0 <NUfsr_IMU_Transmit>

	// Interupt settings
	NUfsr_IMU_Transmit(INT_ENABLE, 0x01, 2);
 80005a4:	2202      	movs	r2, #2
 80005a6:	2101      	movs	r1, #1
 80005a8:	2038      	movs	r0, #56	; 0x38
 80005aa:	f7ff ff99 	bl	80004e0 <NUfsr_IMU_Transmit>

	// Reset IMU int status
	NUfsr_IMU_Transmit(INT_STATUS | IMU_READ, 0x00, 2);
 80005ae:	2202      	movs	r2, #2
 80005b0:	2100      	movs	r1, #0
 80005b2:	20ba      	movs	r0, #186	; 0xba
 80005b4:	f7ff ff94 	bl	80004e0 <NUfsr_IMU_Transmit>

}
 80005b8:	bf00      	nop
 80005ba:	bd80      	pop	{r7, pc}

080005bc <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80005bc:	b580      	push	{r7, lr}
 80005be:	b082      	sub	sp, #8
 80005c0:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80005c2:	f000 fb31 	bl	8000c28 <HAL_Init>

  /* USER CODE BEGIN Init */
  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80005c6:	f000 f83b 	bl	8000640 <SystemClock_Config>

  /* USER CODE BEGIN SysInit */
  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80005ca:	f7ff fe9f 	bl	800030c <MX_GPIO_Init>
  MX_ADC1_Init();
 80005ce:	f7ff fdfb 	bl	80001c8 <MX_ADC1_Init>
  MX_SPI1_Init();
 80005d2:	f000 f897 	bl	8000704 <MX_SPI1_Init>
  MX_TIM3_Init();
 80005d6:	f000 f98b 	bl	80008f0 <MX_TIM3_Init>
  MX_USART1_UART_Init();
 80005da:	f000 f9fd 	bl	80009d8 <MX_USART1_UART_Init>
  /* USER CODE BEGIN 2 */

  NUfsr_IMU_Init();
 80005de:	f7ff ffb9 	bl	8000554 <NUfsr_IMU_Init>
  uint8_t return_Data[2] = {1,2};
 80005e2:	f240 2301 	movw	r3, #513	; 0x201
 80005e6:	80bb      	strh	r3, [r7, #4]
  NUfsr_UART_Transmit(&huart1, return_Data, 2);
 80005e8:	1d3b      	adds	r3, r7, #4
 80005ea:	2202      	movs	r2, #2
 80005ec:	4619      	mov	r1, r3
 80005ee:	4812      	ldr	r0, [pc, #72]	; (8000638 <main+0x7c>)
 80005f0:	f000 fa7e 	bl	8000af0 <NUfsr_UART_Transmit>
  NUfsr_IMU_TransmitReceive(WHO_AM_I, 0x00, return_Data, 2);
 80005f4:	1d3a      	adds	r2, r7, #4
 80005f6:	2302      	movs	r3, #2
 80005f8:	2100      	movs	r1, #0
 80005fa:	2075      	movs	r0, #117	; 0x75
 80005fc:	f7ff ff8c 	bl	8000518 <NUfsr_IMU_TransmitReceive>

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
	  NUfsr_UART_Transmit(&huart1, return_Data, 2);
 8000600:	1d3b      	adds	r3, r7, #4
 8000602:	2202      	movs	r2, #2
 8000604:	4619      	mov	r1, r3
 8000606:	480c      	ldr	r0, [pc, #48]	; (8000638 <main+0x7c>)
 8000608:	f000 fa72 	bl	8000af0 <NUfsr_UART_Transmit>
	  HAL_GPIO_TogglePin(GPIOB,LED1_Pin);
 800060c:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000610:	480a      	ldr	r0, [pc, #40]	; (800063c <main+0x80>)
 8000612:	f001 f8b7 	bl	8001784 <HAL_GPIO_TogglePin>
	  HAL_GPIO_TogglePin(GPIOB,LED2_Pin);
 8000616:	f44f 7100 	mov.w	r1, #512	; 0x200
 800061a:	4808      	ldr	r0, [pc, #32]	; (800063c <main+0x80>)
 800061c:	f001 f8b2 	bl	8001784 <HAL_GPIO_TogglePin>
	  NUfsr_IMU_TransmitReceive(WHO_AM_I, 0x00, return_Data, 2);
 8000620:	1d3a      	adds	r2, r7, #4
 8000622:	2302      	movs	r3, #2
 8000624:	2100      	movs	r1, #0
 8000626:	2075      	movs	r0, #117	; 0x75
 8000628:	f7ff ff76 	bl	8000518 <NUfsr_IMU_TransmitReceive>
	  HAL_Delay(500);
 800062c:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8000630:	f000 fb60 	bl	8000cf4 <HAL_Delay>
	  NUfsr_UART_Transmit(&huart1, return_Data, 2);
 8000634:	e7e4      	b.n	8000600 <main+0x44>
 8000636:	bf00      	nop
 8000638:	2000010c 	.word	0x2000010c
 800063c:	48000400 	.word	0x48000400

08000640 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000640:	b580      	push	{r7, lr}
 8000642:	b09a      	sub	sp, #104	; 0x68
 8000644:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000646:	f107 0340 	add.w	r3, r7, #64	; 0x40
 800064a:	2228      	movs	r2, #40	; 0x28
 800064c:	2100      	movs	r1, #0
 800064e:	4618      	mov	r0, r3
 8000650:	f004 fe9e 	bl	8005390 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000654:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8000658:	2200      	movs	r2, #0
 800065a:	601a      	str	r2, [r3, #0]
 800065c:	605a      	str	r2, [r3, #4]
 800065e:	609a      	str	r2, [r3, #8]
 8000660:	60da      	str	r2, [r3, #12]
 8000662:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000664:	463b      	mov	r3, r7
 8000666:	222c      	movs	r2, #44	; 0x2c
 8000668:	2100      	movs	r1, #0
 800066a:	4618      	mov	r0, r3
 800066c:	f004 fe90 	bl	8005390 <memset>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8000670:	2301      	movs	r3, #1
 8000672:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8000674:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8000678:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV4;
 800067a:	2303      	movs	r3, #3
 800067c:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 800067e:	2301      	movs	r3, #1
 8000680:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000682:	2302      	movs	r3, #2
 8000684:	65fb      	str	r3, [r7, #92]	; 0x5c
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000686:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 800068a:	663b      	str	r3, [r7, #96]	; 0x60
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 800068c:	f44f 13e0 	mov.w	r3, #1835008	; 0x1c0000
 8000690:	667b      	str	r3, [r7, #100]	; 0x64
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000692:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8000696:	4618      	mov	r0, r3
 8000698:	f001 f88e 	bl	80017b8 <HAL_RCC_OscConfig>
 800069c:	4603      	mov	r3, r0
 800069e:	2b00      	cmp	r3, #0
 80006a0:	d001      	beq.n	80006a6 <SystemClock_Config+0x66>
  {
    Error_Handler();
 80006a2:	f000 f829 	bl	80006f8 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80006a6:	230f      	movs	r3, #15
 80006a8:	62fb      	str	r3, [r7, #44]	; 0x2c
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80006aa:	2302      	movs	r3, #2
 80006ac:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80006ae:	2300      	movs	r3, #0
 80006b0:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 80006b2:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80006b6:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80006b8:	2300      	movs	r3, #0
 80006ba:	63fb      	str	r3, [r7, #60]	; 0x3c

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 80006bc:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80006c0:	2102      	movs	r1, #2
 80006c2:	4618      	mov	r0, r3
 80006c4:	f002 f8b6 	bl	8002834 <HAL_RCC_ClockConfig>
 80006c8:	4603      	mov	r3, r0
 80006ca:	2b00      	cmp	r3, #0
 80006cc:	d001      	beq.n	80006d2 <SystemClock_Config+0x92>
  {
    Error_Handler();
 80006ce:	f000 f813 	bl	80006f8 <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART1|RCC_PERIPHCLK_ADC1;
 80006d2:	2381      	movs	r3, #129	; 0x81
 80006d4:	603b      	str	r3, [r7, #0]
  PeriphClkInit.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK2;
 80006d6:	2300      	movs	r3, #0
 80006d8:	60bb      	str	r3, [r7, #8]
  PeriphClkInit.Adc1ClockSelection = RCC_ADC1PCLK2_DIV2;
 80006da:	2300      	movs	r3, #0
 80006dc:	61fb      	str	r3, [r7, #28]

  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80006de:	463b      	mov	r3, r7
 80006e0:	4618      	mov	r0, r3
 80006e2:	f002 fadf 	bl	8002ca4 <HAL_RCCEx_PeriphCLKConfig>
 80006e6:	4603      	mov	r3, r0
 80006e8:	2b00      	cmp	r3, #0
 80006ea:	d001      	beq.n	80006f0 <SystemClock_Config+0xb0>
  {
    Error_Handler();
 80006ec:	f000 f804 	bl	80006f8 <Error_Handler>
  }
}
 80006f0:	bf00      	nop
 80006f2:	3768      	adds	r7, #104	; 0x68
 80006f4:	46bd      	mov	sp, r7
 80006f6:	bd80      	pop	{r7, pc}

080006f8 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80006f8:	b480      	push	{r7}
 80006fa:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80006fc:	b672      	cpsid	i
}
 80006fe:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000700:	e7fe      	b.n	8000700 <Error_Handler+0x8>
	...

08000704 <MX_SPI1_Init>:

SPI_HandleTypeDef hspi1;

/* SPI1 init function */
void MX_SPI1_Init(void)
{
 8000704:	b580      	push	{r7, lr}
 8000706:	af00      	add	r7, sp, #0
  /* USER CODE END SPI1_Init 0 */

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  hspi1.Instance = SPI1;
 8000708:	4b1b      	ldr	r3, [pc, #108]	; (8000778 <MX_SPI1_Init+0x74>)
 800070a:	4a1c      	ldr	r2, [pc, #112]	; (800077c <MX_SPI1_Init+0x78>)
 800070c:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 800070e:	4b1a      	ldr	r3, [pc, #104]	; (8000778 <MX_SPI1_Init+0x74>)
 8000710:	f44f 7282 	mov.w	r2, #260	; 0x104
 8000714:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 8000716:	4b18      	ldr	r3, [pc, #96]	; (8000778 <MX_SPI1_Init+0x74>)
 8000718:	2200      	movs	r2, #0
 800071a:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_16BIT;
 800071c:	4b16      	ldr	r3, [pc, #88]	; (8000778 <MX_SPI1_Init+0x74>)
 800071e:	f44f 6270 	mov.w	r2, #3840	; 0xf00
 8000722:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_HIGH;
 8000724:	4b14      	ldr	r3, [pc, #80]	; (8000778 <MX_SPI1_Init+0x74>)
 8000726:	2202      	movs	r2, #2
 8000728:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_2EDGE;
 800072a:	4b13      	ldr	r3, [pc, #76]	; (8000778 <MX_SPI1_Init+0x74>)
 800072c:	2201      	movs	r2, #1
 800072e:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_HARD_OUTPUT;
 8000730:	4b11      	ldr	r3, [pc, #68]	; (8000778 <MX_SPI1_Init+0x74>)
 8000732:	f44f 2280 	mov.w	r2, #262144	; 0x40000
 8000736:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_256;
 8000738:	4b0f      	ldr	r3, [pc, #60]	; (8000778 <MX_SPI1_Init+0x74>)
 800073a:	2238      	movs	r2, #56	; 0x38
 800073c:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 800073e:	4b0e      	ldr	r3, [pc, #56]	; (8000778 <MX_SPI1_Init+0x74>)
 8000740:	2200      	movs	r2, #0
 8000742:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8000744:	4b0c      	ldr	r3, [pc, #48]	; (8000778 <MX_SPI1_Init+0x74>)
 8000746:	2200      	movs	r2, #0
 8000748:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800074a:	4b0b      	ldr	r3, [pc, #44]	; (8000778 <MX_SPI1_Init+0x74>)
 800074c:	2200      	movs	r2, #0
 800074e:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 7;
 8000750:	4b09      	ldr	r3, [pc, #36]	; (8000778 <MX_SPI1_Init+0x74>)
 8000752:	2207      	movs	r2, #7
 8000754:	62da      	str	r2, [r3, #44]	; 0x2c
  hspi1.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 8000756:	4b08      	ldr	r3, [pc, #32]	; (8000778 <MX_SPI1_Init+0x74>)
 8000758:	2200      	movs	r2, #0
 800075a:	631a      	str	r2, [r3, #48]	; 0x30
  hspi1.Init.NSSPMode = SPI_NSS_PULSE_DISABLE;
 800075c:	4b06      	ldr	r3, [pc, #24]	; (8000778 <MX_SPI1_Init+0x74>)
 800075e:	2200      	movs	r2, #0
 8000760:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8000762:	4805      	ldr	r0, [pc, #20]	; (8000778 <MX_SPI1_Init+0x74>)
 8000764:	f002 fc12 	bl	8002f8c <HAL_SPI_Init>
 8000768:	4603      	mov	r3, r0
 800076a:	2b00      	cmp	r3, #0
 800076c:	d001      	beq.n	8000772 <MX_SPI1_Init+0x6e>
  {
    Error_Handler();
 800076e:	f7ff ffc3 	bl	80006f8 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 8000772:	bf00      	nop
 8000774:	bd80      	pop	{r7, pc}
 8000776:	bf00      	nop
 8000778:	20000058 	.word	0x20000058
 800077c:	40013000 	.word	0x40013000

08000780 <HAL_SPI_MspInit>:

void HAL_SPI_MspInit(SPI_HandleTypeDef* spiHandle)
{
 8000780:	b580      	push	{r7, lr}
 8000782:	b08a      	sub	sp, #40	; 0x28
 8000784:	af00      	add	r7, sp, #0
 8000786:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000788:	f107 0314 	add.w	r3, r7, #20
 800078c:	2200      	movs	r2, #0
 800078e:	601a      	str	r2, [r3, #0]
 8000790:	605a      	str	r2, [r3, #4]
 8000792:	609a      	str	r2, [r3, #8]
 8000794:	60da      	str	r2, [r3, #12]
 8000796:	611a      	str	r2, [r3, #16]
  if(spiHandle->Instance==SPI1)
 8000798:	687b      	ldr	r3, [r7, #4]
 800079a:	681b      	ldr	r3, [r3, #0]
 800079c:	4a17      	ldr	r2, [pc, #92]	; (80007fc <HAL_SPI_MspInit+0x7c>)
 800079e:	4293      	cmp	r3, r2
 80007a0:	d128      	bne.n	80007f4 <HAL_SPI_MspInit+0x74>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* SPI1 clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 80007a2:	4b17      	ldr	r3, [pc, #92]	; (8000800 <HAL_SPI_MspInit+0x80>)
 80007a4:	699b      	ldr	r3, [r3, #24]
 80007a6:	4a16      	ldr	r2, [pc, #88]	; (8000800 <HAL_SPI_MspInit+0x80>)
 80007a8:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 80007ac:	6193      	str	r3, [r2, #24]
 80007ae:	4b14      	ldr	r3, [pc, #80]	; (8000800 <HAL_SPI_MspInit+0x80>)
 80007b0:	699b      	ldr	r3, [r3, #24]
 80007b2:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80007b6:	613b      	str	r3, [r7, #16]
 80007b8:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 80007ba:	4b11      	ldr	r3, [pc, #68]	; (8000800 <HAL_SPI_MspInit+0x80>)
 80007bc:	695b      	ldr	r3, [r3, #20]
 80007be:	4a10      	ldr	r2, [pc, #64]	; (8000800 <HAL_SPI_MspInit+0x80>)
 80007c0:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 80007c4:	6153      	str	r3, [r2, #20]
 80007c6:	4b0e      	ldr	r3, [pc, #56]	; (8000800 <HAL_SPI_MspInit+0x80>)
 80007c8:	695b      	ldr	r3, [r3, #20]
 80007ca:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80007ce:	60fb      	str	r3, [r7, #12]
 80007d0:	68fb      	ldr	r3, [r7, #12]
    PC6     ------> SPI1_NSS
    PC7     ------> SPI1_SCK
    PC8     ------> SPI1_MISO
    PC9     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = MPU_NSS_Pin|MPU_CLK_Pin|MPU_MISO_Pin|MPU_MOSI_Pin;
 80007d2:	f44f 7370 	mov.w	r3, #960	; 0x3c0
 80007d6:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80007d8:	2302      	movs	r3, #2
 80007da:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80007dc:	2300      	movs	r3, #0
 80007de:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80007e0:	2303      	movs	r3, #3
 80007e2:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 80007e4:	2305      	movs	r3, #5
 80007e6:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80007e8:	f107 0314 	add.w	r3, r7, #20
 80007ec:	4619      	mov	r1, r3
 80007ee:	4805      	ldr	r0, [pc, #20]	; (8000804 <HAL_SPI_MspInit+0x84>)
 80007f0:	f000 fe36 	bl	8001460 <HAL_GPIO_Init>

  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }
}
 80007f4:	bf00      	nop
 80007f6:	3728      	adds	r7, #40	; 0x28
 80007f8:	46bd      	mov	sp, r7
 80007fa:	bd80      	pop	{r7, pc}
 80007fc:	40013000 	.word	0x40013000
 8000800:	40021000 	.word	0x40021000
 8000804:	48000800 	.word	0x48000800

08000808 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000808:	b480      	push	{r7}
 800080a:	b083      	sub	sp, #12
 800080c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800080e:	4b0f      	ldr	r3, [pc, #60]	; (800084c <HAL_MspInit+0x44>)
 8000810:	699b      	ldr	r3, [r3, #24]
 8000812:	4a0e      	ldr	r2, [pc, #56]	; (800084c <HAL_MspInit+0x44>)
 8000814:	f043 0301 	orr.w	r3, r3, #1
 8000818:	6193      	str	r3, [r2, #24]
 800081a:	4b0c      	ldr	r3, [pc, #48]	; (800084c <HAL_MspInit+0x44>)
 800081c:	699b      	ldr	r3, [r3, #24]
 800081e:	f003 0301 	and.w	r3, r3, #1
 8000822:	607b      	str	r3, [r7, #4]
 8000824:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000826:	4b09      	ldr	r3, [pc, #36]	; (800084c <HAL_MspInit+0x44>)
 8000828:	69db      	ldr	r3, [r3, #28]
 800082a:	4a08      	ldr	r2, [pc, #32]	; (800084c <HAL_MspInit+0x44>)
 800082c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000830:	61d3      	str	r3, [r2, #28]
 8000832:	4b06      	ldr	r3, [pc, #24]	; (800084c <HAL_MspInit+0x44>)
 8000834:	69db      	ldr	r3, [r3, #28]
 8000836:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800083a:	603b      	str	r3, [r7, #0]
 800083c:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800083e:	bf00      	nop
 8000840:	370c      	adds	r7, #12
 8000842:	46bd      	mov	sp, r7
 8000844:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000848:	4770      	bx	lr
 800084a:	bf00      	nop
 800084c:	40021000 	.word	0x40021000

08000850 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000850:	b480      	push	{r7}
 8000852:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000854:	e7fe      	b.n	8000854 <NMI_Handler+0x4>

08000856 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000856:	b480      	push	{r7}
 8000858:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800085a:	e7fe      	b.n	800085a <HardFault_Handler+0x4>

0800085c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 800085c:	b480      	push	{r7}
 800085e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000860:	e7fe      	b.n	8000860 <MemManage_Handler+0x4>

08000862 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000862:	b480      	push	{r7}
 8000864:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000866:	e7fe      	b.n	8000866 <BusFault_Handler+0x4>

08000868 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000868:	b480      	push	{r7}
 800086a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 800086c:	e7fe      	b.n	800086c <UsageFault_Handler+0x4>

0800086e <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800086e:	b480      	push	{r7}
 8000870:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000872:	bf00      	nop
 8000874:	46bd      	mov	sp, r7
 8000876:	f85d 7b04 	ldr.w	r7, [sp], #4
 800087a:	4770      	bx	lr

0800087c <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800087c:	b480      	push	{r7}
 800087e:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000880:	bf00      	nop
 8000882:	46bd      	mov	sp, r7
 8000884:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000888:	4770      	bx	lr

0800088a <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800088a:	b480      	push	{r7}
 800088c:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800088e:	bf00      	nop
 8000890:	46bd      	mov	sp, r7
 8000892:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000896:	4770      	bx	lr

08000898 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000898:	b580      	push	{r7, lr}
 800089a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 800089c:	f000 fa0a 	bl	8000cb4 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80008a0:	bf00      	nop
 80008a2:	bd80      	pop	{r7, pc}

080008a4 <TIM3_IRQHandler>:

/**
  * @brief This function handles TIM3 global interrupt.
  */
void TIM3_IRQHandler(void)
{
 80008a4:	b580      	push	{r7, lr}
 80008a6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM3_IRQn 0 */

  /* USER CODE END TIM3_IRQn 0 */
  HAL_TIM_IRQHandler(&htim3);
 80008a8:	4802      	ldr	r0, [pc, #8]	; (80008b4 <TIM3_IRQHandler+0x10>)
 80008aa:	f003 f94e 	bl	8003b4a <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM3_IRQn 1 */

  /* USER CODE END TIM3_IRQn 1 */
}
 80008ae:	bf00      	nop
 80008b0:	bd80      	pop	{r7, pc}
 80008b2:	bf00      	nop
 80008b4:	200000bc 	.word	0x200000bc

080008b8 <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt / USART1 wake-up interrupt through EXTI line 25.
  */
void USART1_IRQHandler(void)
{
 80008b8:	b580      	push	{r7, lr}
 80008ba:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 80008bc:	4802      	ldr	r0, [pc, #8]	; (80008c8 <USART1_IRQHandler+0x10>)
 80008be:	f003 fdbd 	bl	800443c <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 80008c2:	bf00      	nop
 80008c4:	bd80      	pop	{r7, pc}
 80008c6:	bf00      	nop
 80008c8:	2000010c 	.word	0x2000010c

080008cc <SystemInit>:
  * @brief  Setup the microcontroller system
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80008cc:	b480      	push	{r7}
 80008ce:	af00      	add	r7, sp, #0
/* FPU settings --------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 80008d0:	4b06      	ldr	r3, [pc, #24]	; (80008ec <SystemInit+0x20>)
 80008d2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80008d6:	4a05      	ldr	r2, [pc, #20]	; (80008ec <SystemInit+0x20>)
 80008d8:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80008dc:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80008e0:	bf00      	nop
 80008e2:	46bd      	mov	sp, r7
 80008e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80008e8:	4770      	bx	lr
 80008ea:	bf00      	nop
 80008ec:	e000ed00 	.word	0xe000ed00

080008f0 <MX_TIM3_Init>:

TIM_HandleTypeDef htim3;

/* TIM3 init function */
void MX_TIM3_Init(void)
{
 80008f0:	b580      	push	{r7, lr}
 80008f2:	b086      	sub	sp, #24
 80008f4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80008f6:	f107 0308 	add.w	r3, r7, #8
 80008fa:	2200      	movs	r2, #0
 80008fc:	601a      	str	r2, [r3, #0]
 80008fe:	605a      	str	r2, [r3, #4]
 8000900:	609a      	str	r2, [r3, #8]
 8000902:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000904:	463b      	mov	r3, r7
 8000906:	2200      	movs	r2, #0
 8000908:	601a      	str	r2, [r3, #0]
 800090a:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 800090c:	4b1d      	ldr	r3, [pc, #116]	; (8000984 <MX_TIM3_Init+0x94>)
 800090e:	4a1e      	ldr	r2, [pc, #120]	; (8000988 <MX_TIM3_Init+0x98>)
 8000910:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 1112;
 8000912:	4b1c      	ldr	r3, [pc, #112]	; (8000984 <MX_TIM3_Init+0x94>)
 8000914:	f44f 628b 	mov.w	r2, #1112	; 0x458
 8000918:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 800091a:	4b1a      	ldr	r3, [pc, #104]	; (8000984 <MX_TIM3_Init+0x94>)
 800091c:	2200      	movs	r2, #0
 800091e:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 64689;
 8000920:	4b18      	ldr	r3, [pc, #96]	; (8000984 <MX_TIM3_Init+0x94>)
 8000922:	f64f 42b1 	movw	r2, #64689	; 0xfcb1
 8000926:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000928:	4b16      	ldr	r3, [pc, #88]	; (8000984 <MX_TIM3_Init+0x94>)
 800092a:	2200      	movs	r2, #0
 800092c:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800092e:	4b15      	ldr	r3, [pc, #84]	; (8000984 <MX_TIM3_Init+0x94>)
 8000930:	2200      	movs	r2, #0
 8000932:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 8000934:	4813      	ldr	r0, [pc, #76]	; (8000984 <MX_TIM3_Init+0x94>)
 8000936:	f003 f8b9 	bl	8003aac <HAL_TIM_Base_Init>
 800093a:	4603      	mov	r3, r0
 800093c:	2b00      	cmp	r3, #0
 800093e:	d001      	beq.n	8000944 <MX_TIM3_Init+0x54>
  {
    Error_Handler();
 8000940:	f7ff feda 	bl	80006f8 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000944:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000948:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 800094a:	f107 0308 	add.w	r3, r7, #8
 800094e:	4619      	mov	r1, r3
 8000950:	480c      	ldr	r0, [pc, #48]	; (8000984 <MX_TIM3_Init+0x94>)
 8000952:	f003 fa02 	bl	8003d5a <HAL_TIM_ConfigClockSource>
 8000956:	4603      	mov	r3, r0
 8000958:	2b00      	cmp	r3, #0
 800095a:	d001      	beq.n	8000960 <MX_TIM3_Init+0x70>
  {
    Error_Handler();
 800095c:	f7ff fecc 	bl	80006f8 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000960:	2300      	movs	r3, #0
 8000962:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000964:	2300      	movs	r3, #0
 8000966:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8000968:	463b      	mov	r3, r7
 800096a:	4619      	mov	r1, r3
 800096c:	4805      	ldr	r0, [pc, #20]	; (8000984 <MX_TIM3_Init+0x94>)
 800096e:	f003 fc21 	bl	80041b4 <HAL_TIMEx_MasterConfigSynchronization>
 8000972:	4603      	mov	r3, r0
 8000974:	2b00      	cmp	r3, #0
 8000976:	d001      	beq.n	800097c <MX_TIM3_Init+0x8c>
  {
    Error_Handler();
 8000978:	f7ff febe 	bl	80006f8 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */

}
 800097c:	bf00      	nop
 800097e:	3718      	adds	r7, #24
 8000980:	46bd      	mov	sp, r7
 8000982:	bd80      	pop	{r7, pc}
 8000984:	200000bc 	.word	0x200000bc
 8000988:	40000400 	.word	0x40000400

0800098c <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 800098c:	b580      	push	{r7, lr}
 800098e:	b084      	sub	sp, #16
 8000990:	af00      	add	r7, sp, #0
 8000992:	6078      	str	r0, [r7, #4]

  if(tim_baseHandle->Instance==TIM3)
 8000994:	687b      	ldr	r3, [r7, #4]
 8000996:	681b      	ldr	r3, [r3, #0]
 8000998:	4a0d      	ldr	r2, [pc, #52]	; (80009d0 <HAL_TIM_Base_MspInit+0x44>)
 800099a:	4293      	cmp	r3, r2
 800099c:	d113      	bne.n	80009c6 <HAL_TIM_Base_MspInit+0x3a>
  {
  /* USER CODE BEGIN TIM3_MspInit 0 */

  /* USER CODE END TIM3_MspInit 0 */
    /* TIM3 clock enable */
    __HAL_RCC_TIM3_CLK_ENABLE();
 800099e:	4b0d      	ldr	r3, [pc, #52]	; (80009d4 <HAL_TIM_Base_MspInit+0x48>)
 80009a0:	69db      	ldr	r3, [r3, #28]
 80009a2:	4a0c      	ldr	r2, [pc, #48]	; (80009d4 <HAL_TIM_Base_MspInit+0x48>)
 80009a4:	f043 0302 	orr.w	r3, r3, #2
 80009a8:	61d3      	str	r3, [r2, #28]
 80009aa:	4b0a      	ldr	r3, [pc, #40]	; (80009d4 <HAL_TIM_Base_MspInit+0x48>)
 80009ac:	69db      	ldr	r3, [r3, #28]
 80009ae:	f003 0302 	and.w	r3, r3, #2
 80009b2:	60fb      	str	r3, [r7, #12]
 80009b4:	68fb      	ldr	r3, [r7, #12]

    /* TIM3 interrupt Init */
    HAL_NVIC_SetPriority(TIM3_IRQn, 0, 0);
 80009b6:	2200      	movs	r2, #0
 80009b8:	2100      	movs	r1, #0
 80009ba:	201d      	movs	r0, #29
 80009bc:	f000 fca3 	bl	8001306 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM3_IRQn);
 80009c0:	201d      	movs	r0, #29
 80009c2:	f000 fcbc 	bl	800133e <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM3_MspInit 1 */

  /* USER CODE END TIM3_MspInit 1 */
  }
}
 80009c6:	bf00      	nop
 80009c8:	3710      	adds	r7, #16
 80009ca:	46bd      	mov	sp, r7
 80009cc:	bd80      	pop	{r7, pc}
 80009ce:	bf00      	nop
 80009d0:	40000400 	.word	0x40000400
 80009d4:	40021000 	.word	0x40021000

080009d8 <MX_USART1_UART_Init>:
UART_HandleTypeDef huart1;

/* USART1 init function */

void MX_USART1_UART_Init(void)
{
 80009d8:	b580      	push	{r7, lr}
 80009da:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 80009dc:	4b14      	ldr	r3, [pc, #80]	; (8000a30 <MX_USART1_UART_Init+0x58>)
 80009de:	4a15      	ldr	r2, [pc, #84]	; (8000a34 <MX_USART1_UART_Init+0x5c>)
 80009e0:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 38400;
 80009e2:	4b13      	ldr	r3, [pc, #76]	; (8000a30 <MX_USART1_UART_Init+0x58>)
 80009e4:	f44f 4216 	mov.w	r2, #38400	; 0x9600
 80009e8:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 80009ea:	4b11      	ldr	r3, [pc, #68]	; (8000a30 <MX_USART1_UART_Init+0x58>)
 80009ec:	2200      	movs	r2, #0
 80009ee:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 80009f0:	4b0f      	ldr	r3, [pc, #60]	; (8000a30 <MX_USART1_UART_Init+0x58>)
 80009f2:	2200      	movs	r2, #0
 80009f4:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 80009f6:	4b0e      	ldr	r3, [pc, #56]	; (8000a30 <MX_USART1_UART_Init+0x58>)
 80009f8:	2200      	movs	r2, #0
 80009fa:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 80009fc:	4b0c      	ldr	r3, [pc, #48]	; (8000a30 <MX_USART1_UART_Init+0x58>)
 80009fe:	220c      	movs	r2, #12
 8000a00:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000a02:	4b0b      	ldr	r3, [pc, #44]	; (8000a30 <MX_USART1_UART_Init+0x58>)
 8000a04:	2200      	movs	r2, #0
 8000a06:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8000a08:	4b09      	ldr	r3, [pc, #36]	; (8000a30 <MX_USART1_UART_Init+0x58>)
 8000a0a:	2200      	movs	r2, #0
 8000a0c:	61da      	str	r2, [r3, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000a0e:	4b08      	ldr	r3, [pc, #32]	; (8000a30 <MX_USART1_UART_Init+0x58>)
 8000a10:	2200      	movs	r2, #0
 8000a12:	621a      	str	r2, [r3, #32]
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000a14:	4b06      	ldr	r3, [pc, #24]	; (8000a30 <MX_USART1_UART_Init+0x58>)
 8000a16:	2200      	movs	r2, #0
 8000a18:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8000a1a:	4805      	ldr	r0, [pc, #20]	; (8000a30 <MX_USART1_UART_Init+0x58>)
 8000a1c:	f003 fc52 	bl	80042c4 <HAL_UART_Init>
 8000a20:	4603      	mov	r3, r0
 8000a22:	2b00      	cmp	r3, #0
 8000a24:	d001      	beq.n	8000a2a <MX_USART1_UART_Init+0x52>
  {
    Error_Handler();
 8000a26:	f7ff fe67 	bl	80006f8 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8000a2a:	bf00      	nop
 8000a2c:	bd80      	pop	{r7, pc}
 8000a2e:	bf00      	nop
 8000a30:	2000010c 	.word	0x2000010c
 8000a34:	40013800 	.word	0x40013800

08000a38 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8000a38:	b580      	push	{r7, lr}
 8000a3a:	b08a      	sub	sp, #40	; 0x28
 8000a3c:	af00      	add	r7, sp, #0
 8000a3e:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000a40:	f107 0314 	add.w	r3, r7, #20
 8000a44:	2200      	movs	r2, #0
 8000a46:	601a      	str	r2, [r3, #0]
 8000a48:	605a      	str	r2, [r3, #4]
 8000a4a:	609a      	str	r2, [r3, #8]
 8000a4c:	60da      	str	r2, [r3, #12]
 8000a4e:	611a      	str	r2, [r3, #16]
  if(uartHandle->Instance==USART1)
 8000a50:	687b      	ldr	r3, [r7, #4]
 8000a52:	681b      	ldr	r3, [r3, #0]
 8000a54:	4a1c      	ldr	r2, [pc, #112]	; (8000ac8 <HAL_UART_MspInit+0x90>)
 8000a56:	4293      	cmp	r3, r2
 8000a58:	d131      	bne.n	8000abe <HAL_UART_MspInit+0x86>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* USART1 clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8000a5a:	4b1c      	ldr	r3, [pc, #112]	; (8000acc <HAL_UART_MspInit+0x94>)
 8000a5c:	699b      	ldr	r3, [r3, #24]
 8000a5e:	4a1b      	ldr	r2, [pc, #108]	; (8000acc <HAL_UART_MspInit+0x94>)
 8000a60:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000a64:	6193      	str	r3, [r2, #24]
 8000a66:	4b19      	ldr	r3, [pc, #100]	; (8000acc <HAL_UART_MspInit+0x94>)
 8000a68:	699b      	ldr	r3, [r3, #24]
 8000a6a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000a6e:	613b      	str	r3, [r7, #16]
 8000a70:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000a72:	4b16      	ldr	r3, [pc, #88]	; (8000acc <HAL_UART_MspInit+0x94>)
 8000a74:	695b      	ldr	r3, [r3, #20]
 8000a76:	4a15      	ldr	r2, [pc, #84]	; (8000acc <HAL_UART_MspInit+0x94>)
 8000a78:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000a7c:	6153      	str	r3, [r2, #20]
 8000a7e:	4b13      	ldr	r3, [pc, #76]	; (8000acc <HAL_UART_MspInit+0x94>)
 8000a80:	695b      	ldr	r3, [r3, #20]
 8000a82:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000a86:	60fb      	str	r3, [r7, #12]
 8000a88:	68fb      	ldr	r3, [r7, #12]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = DXL_P_Pin|DXL_N_Pin;
 8000a8a:	f44f 63c0 	mov.w	r3, #1536	; 0x600
 8000a8e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000a90:	2302      	movs	r3, #2
 8000a92:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a94:	2300      	movs	r3, #0
 8000a96:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000a98:	2303      	movs	r3, #3
 8000a9a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8000a9c:	2307      	movs	r3, #7
 8000a9e:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000aa0:	f107 0314 	add.w	r3, r7, #20
 8000aa4:	4619      	mov	r1, r3
 8000aa6:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000aaa:	f000 fcd9 	bl	8001460 <HAL_GPIO_Init>

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 0, 0);
 8000aae:	2200      	movs	r2, #0
 8000ab0:	2100      	movs	r1, #0
 8000ab2:	2025      	movs	r0, #37	; 0x25
 8000ab4:	f000 fc27 	bl	8001306 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 8000ab8:	2025      	movs	r0, #37	; 0x25
 8000aba:	f000 fc40 	bl	800133e <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }
}
 8000abe:	bf00      	nop
 8000ac0:	3728      	adds	r7, #40	; 0x28
 8000ac2:	46bd      	mov	sp, r7
 8000ac4:	bd80      	pop	{r7, pc}
 8000ac6:	bf00      	nop
 8000ac8:	40013800 	.word	0x40013800
 8000acc:	40021000 	.word	0x40021000

08000ad0 <HAL_UART_TxCpltCallback>:
}

/* USER CODE BEGIN 1 */
/* ISR */
void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8000ad0:	b480      	push	{r7}
 8000ad2:	b083      	sub	sp, #12
 8000ad4:	af00      	add	r7, sp, #0
 8000ad6:	6078      	str	r0, [r7, #4]
	/* Tx Complete Signal */
	huart1_ITh.Tx_State = Tx_FINISHED;
 8000ad8:	4b04      	ldr	r3, [pc, #16]	; (8000aec <HAL_UART_TxCpltCallback+0x1c>)
 8000ada:	2200      	movs	r2, #0
 8000adc:	701a      	strb	r2, [r3, #0]
}
 8000ade:	bf00      	nop
 8000ae0:	370c      	adds	r7, #12
 8000ae2:	46bd      	mov	sp, r7
 8000ae4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ae8:	4770      	bx	lr
 8000aea:	bf00      	nop
 8000aec:	20000108 	.word	0x20000108

08000af0 <NUfsr_UART_Transmit>:
	huart1_ITh.Rx_State = Rx_FINISHED;
}

/* Tx and Rx operations */
HAL_StatusTypeDef NUfsr_UART_Transmit(UART_HandleTypeDef *huart, void *pData, uint16_t Byte_Size)
{
 8000af0:	b580      	push	{r7, lr}
 8000af2:	b086      	sub	sp, #24
 8000af4:	af00      	add	r7, sp, #0
 8000af6:	60f8      	str	r0, [r7, #12]
 8000af8:	60b9      	str	r1, [r7, #8]
 8000afa:	4613      	mov	r3, r2
 8000afc:	80fb      	strh	r3, [r7, #6]
	// Error checking
	if((huart == NULL) || (pData == NULL) || (Byte_Size == 0U))
 8000afe:	68fb      	ldr	r3, [r7, #12]
 8000b00:	2b00      	cmp	r3, #0
 8000b02:	d005      	beq.n	8000b10 <NUfsr_UART_Transmit+0x20>
 8000b04:	68bb      	ldr	r3, [r7, #8]
 8000b06:	2b00      	cmp	r3, #0
 8000b08:	d002      	beq.n	8000b10 <NUfsr_UART_Transmit+0x20>
 8000b0a:	88fb      	ldrh	r3, [r7, #6]
 8000b0c:	2b00      	cmp	r3, #0
 8000b0e:	d101      	bne.n	8000b14 <NUfsr_UART_Transmit+0x24>
		return HAL_ERROR;
 8000b10:	2301      	movs	r3, #1
 8000b12:	e01c      	b.n	8000b4e <NUfsr_UART_Transmit+0x5e>

	HAL_StatusTypeDef state;

	// Wait for Rx poll
	if((state = NUfsr_UART_Poll_Rx(huart, HAL_MAX_DELAY)) != HAL_OK)
 8000b14:	f04f 31ff 	mov.w	r1, #4294967295
 8000b18:	68f8      	ldr	r0, [r7, #12]
 8000b1a:	f000 f81f 	bl	8000b5c <NUfsr_UART_Poll_Rx>
 8000b1e:	4603      	mov	r3, r0
 8000b20:	75fb      	strb	r3, [r7, #23]
 8000b22:	7dfb      	ldrb	r3, [r7, #23]
 8000b24:	2b00      	cmp	r3, #0
 8000b26:	d001      	beq.n	8000b2c <NUfsr_UART_Transmit+0x3c>
		return state;
 8000b28:	7dfb      	ldrb	r3, [r7, #23]
 8000b2a:	e010      	b.n	8000b4e <NUfsr_UART_Transmit+0x5e>

	// Update Tx state
	huart1_ITh.Tx_State = Tx_NOT_FINISHED;
 8000b2c:	4b0a      	ldr	r3, [pc, #40]	; (8000b58 <NUfsr_UART_Transmit+0x68>)
 8000b2e:	2201      	movs	r2, #1
 8000b30:	701a      	strb	r2, [r3, #0]

	// Set DXL_DIR
	HAL_GPIO_WritePin(GPIOA, GPIO_PIN_8, Tx);
 8000b32:	2201      	movs	r2, #1
 8000b34:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000b38:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000b3c:	f000 fe0a 	bl	8001754 <HAL_GPIO_WritePin>

	// Begin transmission
	return HAL_UART_Transmit_IT(huart, (uint8_t*)pData, Byte_Size);
 8000b40:	88fb      	ldrh	r3, [r7, #6]
 8000b42:	461a      	mov	r2, r3
 8000b44:	68b9      	ldr	r1, [r7, #8]
 8000b46:	68f8      	ldr	r0, [r7, #12]
 8000b48:	f003 fc0a 	bl	8004360 <HAL_UART_Transmit_IT>
 8000b4c:	4603      	mov	r3, r0

}
 8000b4e:	4618      	mov	r0, r3
 8000b50:	3718      	adds	r7, #24
 8000b52:	46bd      	mov	sp, r7
 8000b54:	bd80      	pop	{r7, pc}
 8000b56:	bf00      	nop
 8000b58:	20000108 	.word	0x20000108

08000b5c <NUfsr_UART_Poll_Rx>:

	return HAL_OK;
}

HAL_StatusTypeDef NUfsr_UART_Poll_Rx(UART_HandleTypeDef *huart, uint32_t Timeout)
{
 8000b5c:	b580      	push	{r7, lr}
 8000b5e:	b084      	sub	sp, #16
 8000b60:	af00      	add	r7, sp, #0
 8000b62:	6078      	str	r0, [r7, #4]
 8000b64:	6039      	str	r1, [r7, #0]
	// Error checking
	if(huart == NULL)
 8000b66:	687b      	ldr	r3, [r7, #4]
 8000b68:	2b00      	cmp	r3, #0
 8000b6a:	d101      	bne.n	8000b70 <NUfsr_UART_Poll_Rx+0x14>
		return HAL_ERROR;
 8000b6c:	2301      	movs	r3, #1
 8000b6e:	e018      	b.n	8000ba2 <NUfsr_UART_Poll_Rx+0x46>

	uint32_t tickstart = HAL_GetTick();
 8000b70:	f000 f8b4 	bl	8000cdc <HAL_GetTick>
 8000b74:	60f8      	str	r0, [r7, #12]

	// Begin Polling
	while(!NUfsr_UART_Rx_StatusComplete(huart))
 8000b76:	e00d      	b.n	8000b94 <NUfsr_UART_Poll_Rx+0x38>
	{
		if(Timeout != HAL_MAX_DELAY)
 8000b78:	683b      	ldr	r3, [r7, #0]
 8000b7a:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000b7e:	d009      	beq.n	8000b94 <NUfsr_UART_Poll_Rx+0x38>
		{
			if(HAL_GetTick() - tickstart > Timeout)
 8000b80:	f000 f8ac 	bl	8000cdc <HAL_GetTick>
 8000b84:	4602      	mov	r2, r0
 8000b86:	68fb      	ldr	r3, [r7, #12]
 8000b88:	1ad3      	subs	r3, r2, r3
 8000b8a:	683a      	ldr	r2, [r7, #0]
 8000b8c:	429a      	cmp	r2, r3
 8000b8e:	d201      	bcs.n	8000b94 <NUfsr_UART_Poll_Rx+0x38>
			{
				// Handle Error
				return HAL_ERROR;
 8000b90:	2301      	movs	r3, #1
 8000b92:	e006      	b.n	8000ba2 <NUfsr_UART_Poll_Rx+0x46>
	while(!NUfsr_UART_Rx_StatusComplete(huart))
 8000b94:	6878      	ldr	r0, [r7, #4]
 8000b96:	f000 f809 	bl	8000bac <NUfsr_UART_Rx_StatusComplete>
 8000b9a:	4603      	mov	r3, r0
 8000b9c:	2b00      	cmp	r3, #0
 8000b9e:	d0eb      	beq.n	8000b78 <NUfsr_UART_Poll_Rx+0x1c>
			}
		}
	}

	return HAL_OK;
 8000ba0:	2300      	movs	r3, #0
}
 8000ba2:	4618      	mov	r0, r3
 8000ba4:	3710      	adds	r7, #16
 8000ba6:	46bd      	mov	sp, r7
 8000ba8:	bd80      	pop	{r7, pc}
	...

08000bac <NUfsr_UART_Rx_StatusComplete>:

	return 0;
}

uint32_t NUfsr_UART_Rx_StatusComplete(UART_HandleTypeDef *huart)
{
 8000bac:	b480      	push	{r7}
 8000bae:	b083      	sub	sp, #12
 8000bb0:	af00      	add	r7, sp, #0
 8000bb2:	6078      	str	r0, [r7, #4]
	if(huart1_ITh.Rx_State == Rx_FINISHED)
 8000bb4:	4b06      	ldr	r3, [pc, #24]	; (8000bd0 <NUfsr_UART_Rx_StatusComplete+0x24>)
 8000bb6:	785b      	ldrb	r3, [r3, #1]
 8000bb8:	b2db      	uxtb	r3, r3
 8000bba:	2b00      	cmp	r3, #0
 8000bbc:	d101      	bne.n	8000bc2 <NUfsr_UART_Rx_StatusComplete+0x16>
		return 1;
 8000bbe:	2301      	movs	r3, #1
 8000bc0:	e000      	b.n	8000bc4 <NUfsr_UART_Rx_StatusComplete+0x18>

	return 0;
 8000bc2:	2300      	movs	r3, #0
}
 8000bc4:	4618      	mov	r0, r3
 8000bc6:	370c      	adds	r7, #12
 8000bc8:	46bd      	mov	sp, r7
 8000bca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bce:	4770      	bx	lr
 8000bd0:	20000108 	.word	0x20000108

08000bd4 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 8000bd4:	f8df d034 	ldr.w	sp, [pc, #52]	; 8000c0c <LoopForever+0x2>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000bd8:	480d      	ldr	r0, [pc, #52]	; (8000c10 <LoopForever+0x6>)
  ldr r1, =_edata
 8000bda:	490e      	ldr	r1, [pc, #56]	; (8000c14 <LoopForever+0xa>)
  ldr r2, =_sidata
 8000bdc:	4a0e      	ldr	r2, [pc, #56]	; (8000c18 <LoopForever+0xe>)
  movs r3, #0
 8000bde:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000be0:	e002      	b.n	8000be8 <LoopCopyDataInit>

08000be2 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000be2:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000be4:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000be6:	3304      	adds	r3, #4

08000be8 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000be8:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000bea:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000bec:	d3f9      	bcc.n	8000be2 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000bee:	4a0b      	ldr	r2, [pc, #44]	; (8000c1c <LoopForever+0x12>)
  ldr r4, =_ebss
 8000bf0:	4c0b      	ldr	r4, [pc, #44]	; (8000c20 <LoopForever+0x16>)
  movs r3, #0
 8000bf2:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000bf4:	e001      	b.n	8000bfa <LoopFillZerobss>

08000bf6 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000bf6:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000bf8:	3204      	adds	r2, #4

08000bfa <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000bfa:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000bfc:	d3fb      	bcc.n	8000bf6 <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 8000bfe:	f7ff fe65 	bl	80008cc <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8000c02:	f004 fba1 	bl	8005348 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8000c06:	f7ff fcd9 	bl	80005bc <main>

08000c0a <LoopForever>:

LoopForever:
    b LoopForever
 8000c0a:	e7fe      	b.n	8000c0a <LoopForever>
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 8000c0c:	20008000 	.word	0x20008000
  ldr r0, =_sdata
 8000c10:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000c14:	2000000c 	.word	0x2000000c
  ldr r2, =_sidata
 8000c18:	080053f8 	.word	0x080053f8
  ldr r2, =_sbss
 8000c1c:	2000000c 	.word	0x2000000c
  ldr r4, =_ebss
 8000c20:	20000194 	.word	0x20000194

08000c24 <ADC1_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8000c24:	e7fe      	b.n	8000c24 <ADC1_IRQHandler>
	...

08000c28 <HAL_Init>:
  *         In the default implementation,Systick is used as source of time base.
  *       The tick variable is incremented each 1ms in its ISR.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000c28:	b580      	push	{r7, lr}
 8000c2a:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch */
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000c2c:	4b08      	ldr	r3, [pc, #32]	; (8000c50 <HAL_Init+0x28>)
 8000c2e:	681b      	ldr	r3, [r3, #0]
 8000c30:	4a07      	ldr	r2, [pc, #28]	; (8000c50 <HAL_Init+0x28>)
 8000c32:	f043 0310 	orr.w	r3, r3, #16
 8000c36:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000c38:	2003      	movs	r0, #3
 8000c3a:	f000 fb59 	bl	80012f0 <HAL_NVIC_SetPriorityGrouping>

  /* Enable systick and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000c3e:	2000      	movs	r0, #0
 8000c40:	f000 f808 	bl	8000c54 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000c44:	f7ff fde0 	bl	8000808 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000c48:	2300      	movs	r3, #0
}
 8000c4a:	4618      	mov	r0, r3
 8000c4c:	bd80      	pop	{r7, pc}
 8000c4e:	bf00      	nop
 8000c50:	40022000 	.word	0x40022000

08000c54 <HAL_InitTick>:
  *         implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000c54:	b580      	push	{r7, lr}
 8000c56:	b082      	sub	sp, #8
 8000c58:	af00      	add	r7, sp, #0
 8000c5a:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000c5c:	4b12      	ldr	r3, [pc, #72]	; (8000ca8 <HAL_InitTick+0x54>)
 8000c5e:	681a      	ldr	r2, [r3, #0]
 8000c60:	4b12      	ldr	r3, [pc, #72]	; (8000cac <HAL_InitTick+0x58>)
 8000c62:	781b      	ldrb	r3, [r3, #0]
 8000c64:	4619      	mov	r1, r3
 8000c66:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000c6a:	fbb3 f3f1 	udiv	r3, r3, r1
 8000c6e:	fbb2 f3f3 	udiv	r3, r2, r3
 8000c72:	4618      	mov	r0, r3
 8000c74:	f000 fb71 	bl	800135a <HAL_SYSTICK_Config>
 8000c78:	4603      	mov	r3, r0
 8000c7a:	2b00      	cmp	r3, #0
 8000c7c:	d001      	beq.n	8000c82 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8000c7e:	2301      	movs	r3, #1
 8000c80:	e00e      	b.n	8000ca0 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000c82:	687b      	ldr	r3, [r7, #4]
 8000c84:	2b0f      	cmp	r3, #15
 8000c86:	d80a      	bhi.n	8000c9e <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000c88:	2200      	movs	r2, #0
 8000c8a:	6879      	ldr	r1, [r7, #4]
 8000c8c:	f04f 30ff 	mov.w	r0, #4294967295
 8000c90:	f000 fb39 	bl	8001306 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000c94:	4a06      	ldr	r2, [pc, #24]	; (8000cb0 <HAL_InitTick+0x5c>)
 8000c96:	687b      	ldr	r3, [r7, #4]
 8000c98:	6013      	str	r3, [r2, #0]
  else
  {
    return HAL_ERROR;
  }
   /* Return function status */
  return HAL_OK;
 8000c9a:	2300      	movs	r3, #0
 8000c9c:	e000      	b.n	8000ca0 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8000c9e:	2301      	movs	r3, #1
}
 8000ca0:	4618      	mov	r0, r3
 8000ca2:	3708      	adds	r7, #8
 8000ca4:	46bd      	mov	sp, r7
 8000ca6:	bd80      	pop	{r7, pc}
 8000ca8:	20000000 	.word	0x20000000
 8000cac:	20000008 	.word	0x20000008
 8000cb0:	20000004 	.word	0x20000004

08000cb4 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *         implementations  in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000cb4:	b480      	push	{r7}
 8000cb6:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000cb8:	4b06      	ldr	r3, [pc, #24]	; (8000cd4 <HAL_IncTick+0x20>)
 8000cba:	781b      	ldrb	r3, [r3, #0]
 8000cbc:	461a      	mov	r2, r3
 8000cbe:	4b06      	ldr	r3, [pc, #24]	; (8000cd8 <HAL_IncTick+0x24>)
 8000cc0:	681b      	ldr	r3, [r3, #0]
 8000cc2:	4413      	add	r3, r2
 8000cc4:	4a04      	ldr	r2, [pc, #16]	; (8000cd8 <HAL_IncTick+0x24>)
 8000cc6:	6013      	str	r3, [r2, #0]
}
 8000cc8:	bf00      	nop
 8000cca:	46bd      	mov	sp, r7
 8000ccc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cd0:	4770      	bx	lr
 8000cd2:	bf00      	nop
 8000cd4:	20000008 	.word	0x20000008
 8000cd8:	20000190 	.word	0x20000190

08000cdc <HAL_GetTick>:
  * @note   The function is declared as __Weak  to be overwritten  in case of other 
  *         implementations  in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000cdc:	b480      	push	{r7}
 8000cde:	af00      	add	r7, sp, #0
  return uwTick;  
 8000ce0:	4b03      	ldr	r3, [pc, #12]	; (8000cf0 <HAL_GetTick+0x14>)
 8000ce2:	681b      	ldr	r3, [r3, #0]
}
 8000ce4:	4618      	mov	r0, r3
 8000ce6:	46bd      	mov	sp, r7
 8000ce8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cec:	4770      	bx	lr
 8000cee:	bf00      	nop
 8000cf0:	20000190 	.word	0x20000190

08000cf4 <HAL_Delay>:
  *         implementations  in user file.
  * @param  Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000cf4:	b580      	push	{r7, lr}
 8000cf6:	b084      	sub	sp, #16
 8000cf8:	af00      	add	r7, sp, #0
 8000cfa:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8000cfc:	f7ff ffee 	bl	8000cdc <HAL_GetTick>
 8000d00:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8000d02:	687b      	ldr	r3, [r7, #4]
 8000d04:	60fb      	str	r3, [r7, #12]
  
  /* Add freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000d06:	68fb      	ldr	r3, [r7, #12]
 8000d08:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000d0c:	d005      	beq.n	8000d1a <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8000d0e:	4b0a      	ldr	r3, [pc, #40]	; (8000d38 <HAL_Delay+0x44>)
 8000d10:	781b      	ldrb	r3, [r3, #0]
 8000d12:	461a      	mov	r2, r3
 8000d14:	68fb      	ldr	r3, [r7, #12]
 8000d16:	4413      	add	r3, r2
 8000d18:	60fb      	str	r3, [r7, #12]
  }
  
  while((HAL_GetTick() - tickstart) < wait)
 8000d1a:	bf00      	nop
 8000d1c:	f7ff ffde 	bl	8000cdc <HAL_GetTick>
 8000d20:	4602      	mov	r2, r0
 8000d22:	68bb      	ldr	r3, [r7, #8]
 8000d24:	1ad3      	subs	r3, r2, r3
 8000d26:	68fa      	ldr	r2, [r7, #12]
 8000d28:	429a      	cmp	r2, r3
 8000d2a:	d8f7      	bhi.n	8000d1c <HAL_Delay+0x28>
  {
  }
}
 8000d2c:	bf00      	nop
 8000d2e:	bf00      	nop
 8000d30:	3710      	adds	r7, #16
 8000d32:	46bd      	mov	sp, r7
 8000d34:	bd80      	pop	{r7, pc}
 8000d36:	bf00      	nop
 8000d38:	20000008 	.word	0x20000008

08000d3c <HAL_ADC_Init>:
  *         of structure "ADC_InitTypeDef".
  * @param  hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 8000d3c:	b580      	push	{r7, lr}
 8000d3e:	b086      	sub	sp, #24
 8000d40:	af00      	add	r7, sp, #0
 8000d42:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8000d44:	2300      	movs	r3, #0
 8000d46:	75fb      	strb	r3, [r7, #23]
  uint32_t tmp_cr1 = 0U;
 8000d48:	2300      	movs	r3, #0
 8000d4a:	613b      	str	r3, [r7, #16]
  uint32_t tmp_cr2 = 0U;
 8000d4c:	2300      	movs	r3, #0
 8000d4e:	60bb      	str	r3, [r7, #8]
  uint32_t tmp_sqr1 = 0U;
 8000d50:	2300      	movs	r3, #0
 8000d52:	60fb      	str	r3, [r7, #12]
  
  /* Check ADC handle */
  if(hadc == NULL)
 8000d54:	687b      	ldr	r3, [r7, #4]
 8000d56:	2b00      	cmp	r3, #0
 8000d58:	d101      	bne.n	8000d5e <HAL_ADC_Init+0x22>
  {
    return HAL_ERROR;
 8000d5a:	2301      	movs	r3, #1
 8000d5c:	e0be      	b.n	8000edc <HAL_ADC_Init+0x1a0>
  assert_param(IS_ADC_DATA_ALIGN(hadc->Init.DataAlign));
  assert_param(IS_ADC_SCAN_MODE(hadc->Init.ScanConvMode));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXTTRIG(hadc->Init.ExternalTrigConv));
  
  if(hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 8000d5e:	687b      	ldr	r3, [r7, #4]
 8000d60:	689b      	ldr	r3, [r3, #8]
 8000d62:	2b00      	cmp	r3, #0
  /* Refer to header of this file for more details on clock enabling          */
  /* procedure.                                                               */

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 8000d64:	687b      	ldr	r3, [r7, #4]
 8000d66:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000d68:	2b00      	cmp	r3, #0
 8000d6a:	d109      	bne.n	8000d80 <HAL_ADC_Init+0x44>
  {
    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 8000d6c:	687b      	ldr	r3, [r7, #4]
 8000d6e:	2200      	movs	r2, #0
 8000d70:	62da      	str	r2, [r3, #44]	; 0x2c
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 8000d72:	687b      	ldr	r3, [r7, #4]
 8000d74:	2200      	movs	r2, #0
 8000d76:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
    
    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8000d7a:	6878      	ldr	r0, [r7, #4]
 8000d7c:	f7ff fa88 	bl	8000290 <HAL_ADC_MspInit>
  /* Stop potential conversion on going, on regular and injected groups */
  /* Disable ADC peripheral */
  /* Note: In case of ADC already enabled, precaution to not launch an        */
  /*       unwanted conversion while modifying register CR2 by writing 1 to   */
  /*       bit ADON.                                                          */
  tmp_hal_status = ADC_ConversionStop_Disable(hadc);
 8000d80:	6878      	ldr	r0, [r7, #4]
 8000d82:	f000 f9a3 	bl	80010cc <ADC_ConversionStop_Disable>
 8000d86:	4603      	mov	r3, r0
 8000d88:	75fb      	strb	r3, [r7, #23]
  
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL) &&
 8000d8a:	687b      	ldr	r3, [r7, #4]
 8000d8c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000d8e:	f003 0310 	and.w	r3, r3, #16
 8000d92:	2b00      	cmp	r3, #0
 8000d94:	f040 8099 	bne.w	8000eca <HAL_ADC_Init+0x18e>
 8000d98:	7dfb      	ldrb	r3, [r7, #23]
 8000d9a:	2b00      	cmp	r3, #0
 8000d9c:	f040 8095 	bne.w	8000eca <HAL_ADC_Init+0x18e>
      (tmp_hal_status == HAL_OK)                                  )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8000da0:	687b      	ldr	r3, [r7, #4]
 8000da2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000da4:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 8000da8:	f023 0302 	bic.w	r3, r3, #2
 8000dac:	f043 0202 	orr.w	r2, r3, #2
 8000db0:	687b      	ldr	r3, [r7, #4]
 8000db2:	629a      	str	r2, [r3, #40]	; 0x28
    /*  - continuous conversion mode                                          */
    /* Note: External trigger polarity (ADC_CR2_EXTTRIG) is set into          */
    /*       HAL_ADC_Start_xxx functions because if set in this function,     */
    /*       a conversion on injected group would start a conversion also on  */
    /*       regular group after ADC enabling.                                */
    tmp_cr2 |= (hadc->Init.DataAlign                             |
 8000db4:	687b      	ldr	r3, [r7, #4]
 8000db6:	685a      	ldr	r2, [r3, #4]
                hadc->Init.ExternalTrigConv                      |
 8000db8:	687b      	ldr	r3, [r7, #4]
 8000dba:	69db      	ldr	r3, [r3, #28]
    tmp_cr2 |= (hadc->Init.DataAlign                             |
 8000dbc:	431a      	orrs	r2, r3
                ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode) );
 8000dbe:	687b      	ldr	r3, [r7, #4]
 8000dc0:	7b1b      	ldrb	r3, [r3, #12]
 8000dc2:	005b      	lsls	r3, r3, #1
                hadc->Init.ExternalTrigConv                      |
 8000dc4:	4313      	orrs	r3, r2
    tmp_cr2 |= (hadc->Init.DataAlign                             |
 8000dc6:	68ba      	ldr	r2, [r7, #8]
 8000dc8:	4313      	orrs	r3, r2
 8000dca:	60bb      	str	r3, [r7, #8]
    
    /* Configuration of ADC:                                                  */
    /*  - scan mode                                                           */
    /*  - discontinuous mode disable/enable                                   */
    /*  - discontinuous mode number of conversions                            */
    tmp_cr1 |= (ADC_CR1_SCAN_SET(hadc->Init.ScanConvMode));
 8000dcc:	687b      	ldr	r3, [r7, #4]
 8000dce:	689b      	ldr	r3, [r3, #8]
 8000dd0:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8000dd4:	d003      	beq.n	8000dde <HAL_ADC_Init+0xa2>
 8000dd6:	687b      	ldr	r3, [r7, #4]
 8000dd8:	689b      	ldr	r3, [r3, #8]
 8000dda:	2b01      	cmp	r3, #1
 8000ddc:	d102      	bne.n	8000de4 <HAL_ADC_Init+0xa8>
 8000dde:	f44f 7380 	mov.w	r3, #256	; 0x100
 8000de2:	e000      	b.n	8000de6 <HAL_ADC_Init+0xaa>
 8000de4:	2300      	movs	r3, #0
 8000de6:	693a      	ldr	r2, [r7, #16]
 8000de8:	4313      	orrs	r3, r2
 8000dea:	613b      	str	r3, [r7, #16]

    /* Enable discontinuous mode only if continuous mode is disabled */
    /* Note: If parameter "Init.ScanConvMode" is set to disable, parameter    */
    /*       discontinuous is set anyway, but will have no effect on ADC HW.  */
    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8000dec:	687b      	ldr	r3, [r7, #4]
 8000dee:	7d1b      	ldrb	r3, [r3, #20]
 8000df0:	2b01      	cmp	r3, #1
 8000df2:	d119      	bne.n	8000e28 <HAL_ADC_Init+0xec>
    {
      if (hadc->Init.ContinuousConvMode == DISABLE)
 8000df4:	687b      	ldr	r3, [r7, #4]
 8000df6:	7b1b      	ldrb	r3, [r3, #12]
 8000df8:	2b00      	cmp	r3, #0
 8000dfa:	d109      	bne.n	8000e10 <HAL_ADC_Init+0xd4>
      {
        /* Enable the selected ADC regular discontinuous mode */
        /* Set the number of channels to be converted in discontinuous mode */
      tmp_cr1 |= (ADC_CR1_DISCEN                                           |
                  ADC_CR1_DISCONTINUOUS_NUM(hadc->Init.NbrOfDiscConversion) );
 8000dfc:	687b      	ldr	r3, [r7, #4]
 8000dfe:	699b      	ldr	r3, [r3, #24]
 8000e00:	3b01      	subs	r3, #1
 8000e02:	035a      	lsls	r2, r3, #13
      tmp_cr1 |= (ADC_CR1_DISCEN                                           |
 8000e04:	693b      	ldr	r3, [r7, #16]
 8000e06:	4313      	orrs	r3, r2
 8000e08:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8000e0c:	613b      	str	r3, [r7, #16]
 8000e0e:	e00b      	b.n	8000e28 <HAL_ADC_Init+0xec>
        /* ADC regular group discontinuous was intended to be enabled,        */
        /* but ADC regular group modes continuous and sequencer discontinuous */
        /* cannot be enabled simultaneously.                                  */
        
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8000e10:	687b      	ldr	r3, [r7, #4]
 8000e12:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000e14:	f043 0220 	orr.w	r2, r3, #32
 8000e18:	687b      	ldr	r3, [r7, #4]
 8000e1a:	629a      	str	r2, [r3, #40]	; 0x28
        
        /* Set ADC error code to ADC IP internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8000e1c:	687b      	ldr	r3, [r7, #4]
 8000e1e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000e20:	f043 0201 	orr.w	r2, r3, #1
 8000e24:	687b      	ldr	r3, [r7, #4]
 8000e26:	62da      	str	r2, [r3, #44]	; 0x2c
      }
    }
    
    /* Update ADC configuration register CR1 with previous settings */
      MODIFY_REG(hadc->Instance->CR1,
 8000e28:	687b      	ldr	r3, [r7, #4]
 8000e2a:	681b      	ldr	r3, [r3, #0]
 8000e2c:	685b      	ldr	r3, [r3, #4]
 8000e2e:	f423 4169 	bic.w	r1, r3, #59648	; 0xe900
 8000e32:	687b      	ldr	r3, [r7, #4]
 8000e34:	681b      	ldr	r3, [r3, #0]
 8000e36:	693a      	ldr	r2, [r7, #16]
 8000e38:	430a      	orrs	r2, r1
 8000e3a:	605a      	str	r2, [r3, #4]
                 ADC_CR1_DISCEN  |
                 ADC_CR1_DISCNUM    ,
                 tmp_cr1             );
    
    /* Update ADC configuration register CR2 with previous settings */
      MODIFY_REG(hadc->Instance->CR2,
 8000e3c:	687b      	ldr	r3, [r7, #4]
 8000e3e:	681b      	ldr	r3, [r3, #0]
 8000e40:	689a      	ldr	r2, [r3, #8]
 8000e42:	4b28      	ldr	r3, [pc, #160]	; (8000ee4 <HAL_ADC_Init+0x1a8>)
 8000e44:	4013      	ands	r3, r2
 8000e46:	687a      	ldr	r2, [r7, #4]
 8000e48:	6812      	ldr	r2, [r2, #0]
 8000e4a:	68b9      	ldr	r1, [r7, #8]
 8000e4c:	430b      	orrs	r3, r1
 8000e4e:	6093      	str	r3, [r2, #8]
    /*   Note: Scan mode is present by hardware on this device and, if        */
    /*   disabled, discards automatically nb of conversions. Anyway, nb of    */
    /*   conversions is forced to 0x00 for alignment over all STM32 devices.  */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion"                                          */
    if (ADC_CR1_SCAN_SET(hadc->Init.ScanConvMode) == ADC_SCAN_ENABLE)
 8000e50:	687b      	ldr	r3, [r7, #4]
 8000e52:	689b      	ldr	r3, [r3, #8]
 8000e54:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8000e58:	d003      	beq.n	8000e62 <HAL_ADC_Init+0x126>
 8000e5a:	687b      	ldr	r3, [r7, #4]
 8000e5c:	689b      	ldr	r3, [r3, #8]
 8000e5e:	2b01      	cmp	r3, #1
 8000e60:	d104      	bne.n	8000e6c <HAL_ADC_Init+0x130>
    {
      tmp_sqr1 = ADC_SQR1_L_SHIFT(hadc->Init.NbrOfConversion);
 8000e62:	687b      	ldr	r3, [r7, #4]
 8000e64:	691b      	ldr	r3, [r3, #16]
 8000e66:	3b01      	subs	r3, #1
 8000e68:	051b      	lsls	r3, r3, #20
 8000e6a:	60fb      	str	r3, [r7, #12]
    }
    
    MODIFY_REG(hadc->Instance->SQR1,
 8000e6c:	687b      	ldr	r3, [r7, #4]
 8000e6e:	681b      	ldr	r3, [r3, #0]
 8000e70:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000e72:	f423 0170 	bic.w	r1, r3, #15728640	; 0xf00000
 8000e76:	687b      	ldr	r3, [r7, #4]
 8000e78:	681b      	ldr	r3, [r3, #0]
 8000e7a:	68fa      	ldr	r2, [r7, #12]
 8000e7c:	430a      	orrs	r2, r1
 8000e7e:	62da      	str	r2, [r3, #44]	; 0x2c
    /* ensure of no potential problem of ADC core IP clocking.                */
    /* Check through register CR2 (excluding bits set in other functions:     */
    /* execution control bits (ADON, JSWSTART, SWSTART), regular group bits   */
    /* (DMA), injected group bits (JEXTTRIG and JEXTSEL), channel internal    */
    /* measurement path bit (TSVREFE).                                        */
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 8000e80:	687b      	ldr	r3, [r7, #4]
 8000e82:	681b      	ldr	r3, [r3, #0]
 8000e84:	689a      	ldr	r2, [r3, #8]
 8000e86:	4b18      	ldr	r3, [pc, #96]	; (8000ee8 <HAL_ADC_Init+0x1ac>)
 8000e88:	4013      	ands	r3, r2
 8000e8a:	68ba      	ldr	r2, [r7, #8]
 8000e8c:	429a      	cmp	r2, r3
 8000e8e:	d10b      	bne.n	8000ea8 <HAL_ADC_Init+0x16c>
                                        ADC_CR2_JEXTTRIG | ADC_CR2_JEXTSEL |
                                        ADC_CR2_TSVREFE                     ))
         == tmp_cr2)
    {
      /* Set ADC error code to none */
      ADC_CLEAR_ERRORCODE(hadc);
 8000e90:	687b      	ldr	r3, [r7, #4]
 8000e92:	2200      	movs	r2, #0
 8000e94:	62da      	str	r2, [r3, #44]	; 0x2c
      
      /* Set the ADC state */
      ADC_STATE_CLR_SET(hadc->State,
 8000e96:	687b      	ldr	r3, [r7, #4]
 8000e98:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000e9a:	f023 0303 	bic.w	r3, r3, #3
 8000e9e:	f043 0201 	orr.w	r2, r3, #1
 8000ea2:	687b      	ldr	r3, [r7, #4]
 8000ea4:	629a      	str	r2, [r3, #40]	; 0x28
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 8000ea6:	e018      	b.n	8000eda <HAL_ADC_Init+0x19e>
                        HAL_ADC_STATE_READY);
    }
    else
    {
      /* Update ADC state machine to error */
      ADC_STATE_CLR_SET(hadc->State,
 8000ea8:	687b      	ldr	r3, [r7, #4]
 8000eaa:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000eac:	f023 0312 	bic.w	r3, r3, #18
 8000eb0:	f043 0210 	orr.w	r2, r3, #16
 8000eb4:	687b      	ldr	r3, [r7, #4]
 8000eb6:	629a      	str	r2, [r3, #40]	; 0x28
                        HAL_ADC_STATE_BUSY_INTERNAL,
                        HAL_ADC_STATE_ERROR_INTERNAL);
      
      /* Set ADC error code to ADC IP internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8000eb8:	687b      	ldr	r3, [r7, #4]
 8000eba:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000ebc:	f043 0201 	orr.w	r2, r3, #1
 8000ec0:	687b      	ldr	r3, [r7, #4]
 8000ec2:	62da      	str	r2, [r3, #44]	; 0x2c
      
      tmp_hal_status = HAL_ERROR;
 8000ec4:	2301      	movs	r3, #1
 8000ec6:	75fb      	strb	r3, [r7, #23]
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 8000ec8:	e007      	b.n	8000eda <HAL_ADC_Init+0x19e>
  
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8000eca:	687b      	ldr	r3, [r7, #4]
 8000ecc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000ece:	f043 0210 	orr.w	r2, r3, #16
 8000ed2:	687b      	ldr	r3, [r7, #4]
 8000ed4:	629a      	str	r2, [r3, #40]	; 0x28
        
    tmp_hal_status = HAL_ERROR;
 8000ed6:	2301      	movs	r3, #1
 8000ed8:	75fb      	strb	r3, [r7, #23]
  }
  
  /* Return function status */
  return tmp_hal_status;
 8000eda:	7dfb      	ldrb	r3, [r7, #23]
}
 8000edc:	4618      	mov	r0, r3
 8000ede:	3718      	adds	r7, #24
 8000ee0:	46bd      	mov	sp, r7
 8000ee2:	bd80      	pop	{r7, pc}
 8000ee4:	ffe1f7fd 	.word	0xffe1f7fd
 8000ee8:	ff1f0efe 	.word	0xff1f0efe

08000eec <HAL_ADC_ConfigChannel>:
  * @param  hadc ADC handle
  * @param  sConfig Structure of ADC channel for regular group.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{ 
 8000eec:	b480      	push	{r7}
 8000eee:	b085      	sub	sp, #20
 8000ef0:	af00      	add	r7, sp, #0
 8000ef2:	6078      	str	r0, [r7, #4]
 8000ef4:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8000ef6:	2300      	movs	r3, #0
 8000ef8:	73fb      	strb	r3, [r7, #15]
  __IO uint32_t wait_loop_index = 0U;
 8000efa:	2300      	movs	r3, #0
 8000efc:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8000efe:	687b      	ldr	r3, [r7, #4]
 8000f00:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8000f04:	2b01      	cmp	r3, #1
 8000f06:	d101      	bne.n	8000f0c <HAL_ADC_ConfigChannel+0x20>
 8000f08:	2302      	movs	r3, #2
 8000f0a:	e0d2      	b.n	80010b2 <HAL_ADC_ConfigChannel+0x1c6>
 8000f0c:	687b      	ldr	r3, [r7, #4]
 8000f0e:	2201      	movs	r2, #1
 8000f10:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  
  
  /* Regular sequence configuration */
  /* For Rank 1 to 6U */
  if (sConfig->Rank < 7U)
 8000f14:	683b      	ldr	r3, [r7, #0]
 8000f16:	685b      	ldr	r3, [r3, #4]
 8000f18:	2b06      	cmp	r3, #6
 8000f1a:	d81c      	bhi.n	8000f56 <HAL_ADC_ConfigChannel+0x6a>
  {
    MODIFY_REG(hadc->Instance->SQR3                        ,
 8000f1c:	687b      	ldr	r3, [r7, #4]
 8000f1e:	681b      	ldr	r3, [r3, #0]
 8000f20:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8000f22:	683b      	ldr	r3, [r7, #0]
 8000f24:	685a      	ldr	r2, [r3, #4]
 8000f26:	4613      	mov	r3, r2
 8000f28:	009b      	lsls	r3, r3, #2
 8000f2a:	4413      	add	r3, r2
 8000f2c:	3b05      	subs	r3, #5
 8000f2e:	221f      	movs	r2, #31
 8000f30:	fa02 f303 	lsl.w	r3, r2, r3
 8000f34:	43db      	mvns	r3, r3
 8000f36:	4019      	ands	r1, r3
 8000f38:	683b      	ldr	r3, [r7, #0]
 8000f3a:	6818      	ldr	r0, [r3, #0]
 8000f3c:	683b      	ldr	r3, [r7, #0]
 8000f3e:	685a      	ldr	r2, [r3, #4]
 8000f40:	4613      	mov	r3, r2
 8000f42:	009b      	lsls	r3, r3, #2
 8000f44:	4413      	add	r3, r2
 8000f46:	3b05      	subs	r3, #5
 8000f48:	fa00 f203 	lsl.w	r2, r0, r3
 8000f4c:	687b      	ldr	r3, [r7, #4]
 8000f4e:	681b      	ldr	r3, [r3, #0]
 8000f50:	430a      	orrs	r2, r1
 8000f52:	635a      	str	r2, [r3, #52]	; 0x34
 8000f54:	e03c      	b.n	8000fd0 <HAL_ADC_ConfigChannel+0xe4>
               ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank)    ,
               ADC_SQR3_RK(sConfig->Channel, sConfig->Rank) );
  }
  /* For Rank 7 to 12U */
  else if (sConfig->Rank < 13U)
 8000f56:	683b      	ldr	r3, [r7, #0]
 8000f58:	685b      	ldr	r3, [r3, #4]
 8000f5a:	2b0c      	cmp	r3, #12
 8000f5c:	d81c      	bhi.n	8000f98 <HAL_ADC_ConfigChannel+0xac>
  {
    MODIFY_REG(hadc->Instance->SQR2                        ,
 8000f5e:	687b      	ldr	r3, [r7, #4]
 8000f60:	681b      	ldr	r3, [r3, #0]
 8000f62:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8000f64:	683b      	ldr	r3, [r7, #0]
 8000f66:	685a      	ldr	r2, [r3, #4]
 8000f68:	4613      	mov	r3, r2
 8000f6a:	009b      	lsls	r3, r3, #2
 8000f6c:	4413      	add	r3, r2
 8000f6e:	3b23      	subs	r3, #35	; 0x23
 8000f70:	221f      	movs	r2, #31
 8000f72:	fa02 f303 	lsl.w	r3, r2, r3
 8000f76:	43db      	mvns	r3, r3
 8000f78:	4019      	ands	r1, r3
 8000f7a:	683b      	ldr	r3, [r7, #0]
 8000f7c:	6818      	ldr	r0, [r3, #0]
 8000f7e:	683b      	ldr	r3, [r7, #0]
 8000f80:	685a      	ldr	r2, [r3, #4]
 8000f82:	4613      	mov	r3, r2
 8000f84:	009b      	lsls	r3, r3, #2
 8000f86:	4413      	add	r3, r2
 8000f88:	3b23      	subs	r3, #35	; 0x23
 8000f8a:	fa00 f203 	lsl.w	r2, r0, r3
 8000f8e:	687b      	ldr	r3, [r7, #4]
 8000f90:	681b      	ldr	r3, [r3, #0]
 8000f92:	430a      	orrs	r2, r1
 8000f94:	631a      	str	r2, [r3, #48]	; 0x30
 8000f96:	e01b      	b.n	8000fd0 <HAL_ADC_ConfigChannel+0xe4>
               ADC_SQR2_RK(sConfig->Channel, sConfig->Rank) );
  }
  /* For Rank 13 to 16U */
  else
  {
    MODIFY_REG(hadc->Instance->SQR1                        ,
 8000f98:	687b      	ldr	r3, [r7, #4]
 8000f9a:	681b      	ldr	r3, [r3, #0]
 8000f9c:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8000f9e:	683b      	ldr	r3, [r7, #0]
 8000fa0:	685a      	ldr	r2, [r3, #4]
 8000fa2:	4613      	mov	r3, r2
 8000fa4:	009b      	lsls	r3, r3, #2
 8000fa6:	4413      	add	r3, r2
 8000fa8:	3b41      	subs	r3, #65	; 0x41
 8000faa:	221f      	movs	r2, #31
 8000fac:	fa02 f303 	lsl.w	r3, r2, r3
 8000fb0:	43db      	mvns	r3, r3
 8000fb2:	4019      	ands	r1, r3
 8000fb4:	683b      	ldr	r3, [r7, #0]
 8000fb6:	6818      	ldr	r0, [r3, #0]
 8000fb8:	683b      	ldr	r3, [r7, #0]
 8000fba:	685a      	ldr	r2, [r3, #4]
 8000fbc:	4613      	mov	r3, r2
 8000fbe:	009b      	lsls	r3, r3, #2
 8000fc0:	4413      	add	r3, r2
 8000fc2:	3b41      	subs	r3, #65	; 0x41
 8000fc4:	fa00 f203 	lsl.w	r2, r0, r3
 8000fc8:	687b      	ldr	r3, [r7, #4]
 8000fca:	681b      	ldr	r3, [r3, #0]
 8000fcc:	430a      	orrs	r2, r1
 8000fce:	62da      	str	r2, [r3, #44]	; 0x2c
  }
  
  
  /* Channel sampling time configuration */
  /* For channels 10 to 18U */
  if (sConfig->Channel > ADC_CHANNEL_10)
 8000fd0:	683b      	ldr	r3, [r7, #0]
 8000fd2:	681b      	ldr	r3, [r3, #0]
 8000fd4:	2b0a      	cmp	r3, #10
 8000fd6:	d91c      	bls.n	8001012 <HAL_ADC_ConfigChannel+0x126>
  {
    MODIFY_REG(hadc->Instance->SMPR1                             ,
 8000fd8:	687b      	ldr	r3, [r7, #4]
 8000fda:	681b      	ldr	r3, [r3, #0]
 8000fdc:	68d9      	ldr	r1, [r3, #12]
 8000fde:	683b      	ldr	r3, [r7, #0]
 8000fe0:	681a      	ldr	r2, [r3, #0]
 8000fe2:	4613      	mov	r3, r2
 8000fe4:	005b      	lsls	r3, r3, #1
 8000fe6:	4413      	add	r3, r2
 8000fe8:	3b1e      	subs	r3, #30
 8000fea:	2207      	movs	r2, #7
 8000fec:	fa02 f303 	lsl.w	r3, r2, r3
 8000ff0:	43db      	mvns	r3, r3
 8000ff2:	4019      	ands	r1, r3
 8000ff4:	683b      	ldr	r3, [r7, #0]
 8000ff6:	6898      	ldr	r0, [r3, #8]
 8000ff8:	683b      	ldr	r3, [r7, #0]
 8000ffa:	681a      	ldr	r2, [r3, #0]
 8000ffc:	4613      	mov	r3, r2
 8000ffe:	005b      	lsls	r3, r3, #1
 8001000:	4413      	add	r3, r2
 8001002:	3b1e      	subs	r3, #30
 8001004:	fa00 f203 	lsl.w	r2, r0, r3
 8001008:	687b      	ldr	r3, [r7, #4]
 800100a:	681b      	ldr	r3, [r3, #0]
 800100c:	430a      	orrs	r2, r1
 800100e:	60da      	str	r2, [r3, #12]
 8001010:	e019      	b.n	8001046 <HAL_ADC_ConfigChannel+0x15a>
               ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel)      ,
               ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel) );
  }
  else   /* For channels 0 to 9U */
  {
    MODIFY_REG(hadc->Instance->SMPR2                             ,
 8001012:	687b      	ldr	r3, [r7, #4]
 8001014:	681b      	ldr	r3, [r3, #0]
 8001016:	6919      	ldr	r1, [r3, #16]
 8001018:	683b      	ldr	r3, [r7, #0]
 800101a:	681a      	ldr	r2, [r3, #0]
 800101c:	4613      	mov	r3, r2
 800101e:	005b      	lsls	r3, r3, #1
 8001020:	4413      	add	r3, r2
 8001022:	2207      	movs	r2, #7
 8001024:	fa02 f303 	lsl.w	r3, r2, r3
 8001028:	43db      	mvns	r3, r3
 800102a:	4019      	ands	r1, r3
 800102c:	683b      	ldr	r3, [r7, #0]
 800102e:	6898      	ldr	r0, [r3, #8]
 8001030:	683b      	ldr	r3, [r7, #0]
 8001032:	681a      	ldr	r2, [r3, #0]
 8001034:	4613      	mov	r3, r2
 8001036:	005b      	lsls	r3, r3, #1
 8001038:	4413      	add	r3, r2
 800103a:	fa00 f203 	lsl.w	r2, r0, r3
 800103e:	687b      	ldr	r3, [r7, #4]
 8001040:	681b      	ldr	r3, [r3, #0]
 8001042:	430a      	orrs	r2, r1
 8001044:	611a      	str	r2, [r3, #16]
               ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel) );
  }
  
  /* If ADC1 Channel_16 or Channel_17 is selected, enable Temperature sensor  */
  /* and VREFINT measurement path.                                            */
  if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) ||
 8001046:	683b      	ldr	r3, [r7, #0]
 8001048:	681b      	ldr	r3, [r3, #0]
 800104a:	2b10      	cmp	r3, #16
 800104c:	d003      	beq.n	8001056 <HAL_ADC_ConfigChannel+0x16a>
      (sConfig->Channel == ADC_CHANNEL_VREFINT)      )
 800104e:	683b      	ldr	r3, [r7, #0]
 8001050:	681b      	ldr	r3, [r3, #0]
  if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) ||
 8001052:	2b11      	cmp	r3, #17
 8001054:	d11e      	bne.n	8001094 <HAL_ADC_ConfigChannel+0x1a8>
  {
    SET_BIT(hadc->Instance->CR2, ADC_CR2_TSVREFE);
 8001056:	687b      	ldr	r3, [r7, #4]
 8001058:	681b      	ldr	r3, [r3, #0]
 800105a:	689a      	ldr	r2, [r3, #8]
 800105c:	687b      	ldr	r3, [r7, #4]
 800105e:	681b      	ldr	r3, [r3, #0]
 8001060:	f442 0200 	orr.w	r2, r2, #8388608	; 0x800000
 8001064:	609a      	str	r2, [r3, #8]
    
    if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR))
 8001066:	683b      	ldr	r3, [r7, #0]
 8001068:	681b      	ldr	r3, [r3, #0]
 800106a:	2b10      	cmp	r3, #16
 800106c:	d11c      	bne.n	80010a8 <HAL_ADC_ConfigChannel+0x1bc>
    {
      /* Delay for temperature sensor stabilization time */
      /* Compute number of CPU cycles to wait for */
      wait_loop_index = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 800106e:	4b14      	ldr	r3, [pc, #80]	; (80010c0 <HAL_ADC_ConfigChannel+0x1d4>)
 8001070:	681b      	ldr	r3, [r3, #0]
 8001072:	4a14      	ldr	r2, [pc, #80]	; (80010c4 <HAL_ADC_ConfigChannel+0x1d8>)
 8001074:	fba2 2303 	umull	r2, r3, r2, r3
 8001078:	0c9a      	lsrs	r2, r3, #18
 800107a:	4613      	mov	r3, r2
 800107c:	009b      	lsls	r3, r3, #2
 800107e:	4413      	add	r3, r2
 8001080:	005b      	lsls	r3, r3, #1
 8001082:	60bb      	str	r3, [r7, #8]
      while(wait_loop_index != 0U)
 8001084:	e002      	b.n	800108c <HAL_ADC_ConfigChannel+0x1a0>
      {
        wait_loop_index--;
 8001086:	68bb      	ldr	r3, [r7, #8]
 8001088:	3b01      	subs	r3, #1
 800108a:	60bb      	str	r3, [r7, #8]
      while(wait_loop_index != 0U)
 800108c:	68bb      	ldr	r3, [r7, #8]
 800108e:	2b00      	cmp	r3, #0
 8001090:	d1f9      	bne.n	8001086 <HAL_ADC_ConfigChannel+0x19a>
    if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR))
 8001092:	e009      	b.n	80010a8 <HAL_ADC_ConfigChannel+0x1bc>
      }
    }
  }
  /* if ADC1 Channel_18 is selected, enable VBAT measurement path */
  else if (sConfig->Channel == ADC_CHANNEL_VBAT)
 8001094:	683b      	ldr	r3, [r7, #0]
 8001096:	681b      	ldr	r3, [r3, #0]
 8001098:	2b12      	cmp	r3, #18
 800109a:	d105      	bne.n	80010a8 <HAL_ADC_ConfigChannel+0x1bc>
  {
    SET_BIT(SYSCFG->CFGR1, SYSCFG_CFGR1_VBAT);
 800109c:	4b0a      	ldr	r3, [pc, #40]	; (80010c8 <HAL_ADC_ConfigChannel+0x1dc>)
 800109e:	681b      	ldr	r3, [r3, #0]
 80010a0:	4a09      	ldr	r2, [pc, #36]	; (80010c8 <HAL_ADC_ConfigChannel+0x1dc>)
 80010a2:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80010a6:	6013      	str	r3, [r2, #0]
  }

   
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 80010a8:	687b      	ldr	r3, [r7, #4]
 80010aa:	2200      	movs	r2, #0
 80010ac:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  
  /* Return function status */
  return tmp_hal_status;
 80010b0:	7bfb      	ldrb	r3, [r7, #15]
}
 80010b2:	4618      	mov	r0, r3
 80010b4:	3714      	adds	r7, #20
 80010b6:	46bd      	mov	sp, r7
 80010b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010bc:	4770      	bx	lr
 80010be:	bf00      	nop
 80010c0:	20000000 	.word	0x20000000
 80010c4:	431bde83 	.word	0x431bde83
 80010c8:	40010000 	.word	0x40010000

080010cc <ADC_ConversionStop_Disable>:
  * @brief  Stop ADC conversion and disable the selected ADC
  * @param  hadc ADC handle
  * @retval HAL status.
  */
static HAL_StatusTypeDef ADC_ConversionStop_Disable(ADC_HandleTypeDef* hadc)
{
 80010cc:	b580      	push	{r7, lr}
 80010ce:	b084      	sub	sp, #16
 80010d0:	af00      	add	r7, sp, #0
 80010d2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 80010d4:	2300      	movs	r3, #0
 80010d6:	60fb      	str	r3, [r7, #12]
  
  /* Verification if ADC is not already disabled:                             */
  if (ADC_IS_ENABLE(hadc) != RESET)
 80010d8:	687b      	ldr	r3, [r7, #4]
 80010da:	681b      	ldr	r3, [r3, #0]
 80010dc:	689b      	ldr	r3, [r3, #8]
 80010de:	f003 0301 	and.w	r3, r3, #1
 80010e2:	2b01      	cmp	r3, #1
 80010e4:	d12e      	bne.n	8001144 <ADC_ConversionStop_Disable+0x78>
  {
    /* Disable the ADC peripheral */
    __HAL_ADC_DISABLE(hadc);
 80010e6:	687b      	ldr	r3, [r7, #4]
 80010e8:	681b      	ldr	r3, [r3, #0]
 80010ea:	689a      	ldr	r2, [r3, #8]
 80010ec:	687b      	ldr	r3, [r7, #4]
 80010ee:	681b      	ldr	r3, [r3, #0]
 80010f0:	f022 0201 	bic.w	r2, r2, #1
 80010f4:	609a      	str	r2, [r3, #8]
     
    /* Get tick count */
    tickstart = HAL_GetTick();
 80010f6:	f7ff fdf1 	bl	8000cdc <HAL_GetTick>
 80010fa:	60f8      	str	r0, [r7, #12]
    
    /* Wait for ADC effectively disabled */
    while(ADC_IS_ENABLE(hadc) != RESET)
 80010fc:	e01b      	b.n	8001136 <ADC_ConversionStop_Disable+0x6a>
    {
      if((HAL_GetTick() - tickstart) > ADC_DISABLE_TIMEOUT)
 80010fe:	f7ff fded 	bl	8000cdc <HAL_GetTick>
 8001102:	4602      	mov	r2, r0
 8001104:	68fb      	ldr	r3, [r7, #12]
 8001106:	1ad3      	subs	r3, r2, r3
 8001108:	2b02      	cmp	r3, #2
 800110a:	d914      	bls.n	8001136 <ADC_ConversionStop_Disable+0x6a>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(ADC_IS_ENABLE(hadc) != RESET)
 800110c:	687b      	ldr	r3, [r7, #4]
 800110e:	681b      	ldr	r3, [r3, #0]
 8001110:	689b      	ldr	r3, [r3, #8]
 8001112:	f003 0301 	and.w	r3, r3, #1
 8001116:	2b01      	cmp	r3, #1
 8001118:	d10d      	bne.n	8001136 <ADC_ConversionStop_Disable+0x6a>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800111a:	687b      	ldr	r3, [r7, #4]
 800111c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800111e:	f043 0210 	orr.w	r2, r3, #16
 8001122:	687b      	ldr	r3, [r7, #4]
 8001124:	629a      	str	r2, [r3, #40]	; 0x28

          /* Set ADC error code to ADC IP internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001126:	687b      	ldr	r3, [r7, #4]
 8001128:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800112a:	f043 0201 	orr.w	r2, r3, #1
 800112e:	687b      	ldr	r3, [r7, #4]
 8001130:	62da      	str	r2, [r3, #44]	; 0x2c

          return HAL_ERROR;
 8001132:	2301      	movs	r3, #1
 8001134:	e007      	b.n	8001146 <ADC_ConversionStop_Disable+0x7a>
    while(ADC_IS_ENABLE(hadc) != RESET)
 8001136:	687b      	ldr	r3, [r7, #4]
 8001138:	681b      	ldr	r3, [r3, #0]
 800113a:	689b      	ldr	r3, [r3, #8]
 800113c:	f003 0301 	and.w	r3, r3, #1
 8001140:	2b01      	cmp	r3, #1
 8001142:	d0dc      	beq.n	80010fe <ADC_ConversionStop_Disable+0x32>
      }
    }
  }
  
  /* Return HAL status */
  return HAL_OK;
 8001144:	2300      	movs	r3, #0
}
 8001146:	4618      	mov	r0, r3
 8001148:	3710      	adds	r7, #16
 800114a:	46bd      	mov	sp, r7
 800114c:	bd80      	pop	{r7, pc}
	...

08001150 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001150:	b480      	push	{r7}
 8001152:	b085      	sub	sp, #20
 8001154:	af00      	add	r7, sp, #0
 8001156:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001158:	687b      	ldr	r3, [r7, #4]
 800115a:	f003 0307 	and.w	r3, r3, #7
 800115e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001160:	4b0c      	ldr	r3, [pc, #48]	; (8001194 <__NVIC_SetPriorityGrouping+0x44>)
 8001162:	68db      	ldr	r3, [r3, #12]
 8001164:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001166:	68ba      	ldr	r2, [r7, #8]
 8001168:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 800116c:	4013      	ands	r3, r2
 800116e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001170:	68fb      	ldr	r3, [r7, #12]
 8001172:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001174:	68bb      	ldr	r3, [r7, #8]
 8001176:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001178:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 800117c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001180:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001182:	4a04      	ldr	r2, [pc, #16]	; (8001194 <__NVIC_SetPriorityGrouping+0x44>)
 8001184:	68bb      	ldr	r3, [r7, #8]
 8001186:	60d3      	str	r3, [r2, #12]
}
 8001188:	bf00      	nop
 800118a:	3714      	adds	r7, #20
 800118c:	46bd      	mov	sp, r7
 800118e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001192:	4770      	bx	lr
 8001194:	e000ed00 	.word	0xe000ed00

08001198 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001198:	b480      	push	{r7}
 800119a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 800119c:	4b04      	ldr	r3, [pc, #16]	; (80011b0 <__NVIC_GetPriorityGrouping+0x18>)
 800119e:	68db      	ldr	r3, [r3, #12]
 80011a0:	0a1b      	lsrs	r3, r3, #8
 80011a2:	f003 0307 	and.w	r3, r3, #7
}
 80011a6:	4618      	mov	r0, r3
 80011a8:	46bd      	mov	sp, r7
 80011aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011ae:	4770      	bx	lr
 80011b0:	e000ed00 	.word	0xe000ed00

080011b4 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80011b4:	b480      	push	{r7}
 80011b6:	b083      	sub	sp, #12
 80011b8:	af00      	add	r7, sp, #0
 80011ba:	4603      	mov	r3, r0
 80011bc:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80011be:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80011c2:	2b00      	cmp	r3, #0
 80011c4:	db0b      	blt.n	80011de <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80011c6:	79fb      	ldrb	r3, [r7, #7]
 80011c8:	f003 021f 	and.w	r2, r3, #31
 80011cc:	4907      	ldr	r1, [pc, #28]	; (80011ec <__NVIC_EnableIRQ+0x38>)
 80011ce:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80011d2:	095b      	lsrs	r3, r3, #5
 80011d4:	2001      	movs	r0, #1
 80011d6:	fa00 f202 	lsl.w	r2, r0, r2
 80011da:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 80011de:	bf00      	nop
 80011e0:	370c      	adds	r7, #12
 80011e2:	46bd      	mov	sp, r7
 80011e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011e8:	4770      	bx	lr
 80011ea:	bf00      	nop
 80011ec:	e000e100 	.word	0xe000e100

080011f0 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80011f0:	b480      	push	{r7}
 80011f2:	b083      	sub	sp, #12
 80011f4:	af00      	add	r7, sp, #0
 80011f6:	4603      	mov	r3, r0
 80011f8:	6039      	str	r1, [r7, #0]
 80011fa:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80011fc:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001200:	2b00      	cmp	r3, #0
 8001202:	db0a      	blt.n	800121a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001204:	683b      	ldr	r3, [r7, #0]
 8001206:	b2da      	uxtb	r2, r3
 8001208:	490c      	ldr	r1, [pc, #48]	; (800123c <__NVIC_SetPriority+0x4c>)
 800120a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800120e:	0112      	lsls	r2, r2, #4
 8001210:	b2d2      	uxtb	r2, r2
 8001212:	440b      	add	r3, r1
 8001214:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001218:	e00a      	b.n	8001230 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800121a:	683b      	ldr	r3, [r7, #0]
 800121c:	b2da      	uxtb	r2, r3
 800121e:	4908      	ldr	r1, [pc, #32]	; (8001240 <__NVIC_SetPriority+0x50>)
 8001220:	79fb      	ldrb	r3, [r7, #7]
 8001222:	f003 030f 	and.w	r3, r3, #15
 8001226:	3b04      	subs	r3, #4
 8001228:	0112      	lsls	r2, r2, #4
 800122a:	b2d2      	uxtb	r2, r2
 800122c:	440b      	add	r3, r1
 800122e:	761a      	strb	r2, [r3, #24]
}
 8001230:	bf00      	nop
 8001232:	370c      	adds	r7, #12
 8001234:	46bd      	mov	sp, r7
 8001236:	f85d 7b04 	ldr.w	r7, [sp], #4
 800123a:	4770      	bx	lr
 800123c:	e000e100 	.word	0xe000e100
 8001240:	e000ed00 	.word	0xe000ed00

08001244 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001244:	b480      	push	{r7}
 8001246:	b089      	sub	sp, #36	; 0x24
 8001248:	af00      	add	r7, sp, #0
 800124a:	60f8      	str	r0, [r7, #12]
 800124c:	60b9      	str	r1, [r7, #8]
 800124e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001250:	68fb      	ldr	r3, [r7, #12]
 8001252:	f003 0307 	and.w	r3, r3, #7
 8001256:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001258:	69fb      	ldr	r3, [r7, #28]
 800125a:	f1c3 0307 	rsb	r3, r3, #7
 800125e:	2b04      	cmp	r3, #4
 8001260:	bf28      	it	cs
 8001262:	2304      	movcs	r3, #4
 8001264:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001266:	69fb      	ldr	r3, [r7, #28]
 8001268:	3304      	adds	r3, #4
 800126a:	2b06      	cmp	r3, #6
 800126c:	d902      	bls.n	8001274 <NVIC_EncodePriority+0x30>
 800126e:	69fb      	ldr	r3, [r7, #28]
 8001270:	3b03      	subs	r3, #3
 8001272:	e000      	b.n	8001276 <NVIC_EncodePriority+0x32>
 8001274:	2300      	movs	r3, #0
 8001276:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001278:	f04f 32ff 	mov.w	r2, #4294967295
 800127c:	69bb      	ldr	r3, [r7, #24]
 800127e:	fa02 f303 	lsl.w	r3, r2, r3
 8001282:	43da      	mvns	r2, r3
 8001284:	68bb      	ldr	r3, [r7, #8]
 8001286:	401a      	ands	r2, r3
 8001288:	697b      	ldr	r3, [r7, #20]
 800128a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 800128c:	f04f 31ff 	mov.w	r1, #4294967295
 8001290:	697b      	ldr	r3, [r7, #20]
 8001292:	fa01 f303 	lsl.w	r3, r1, r3
 8001296:	43d9      	mvns	r1, r3
 8001298:	687b      	ldr	r3, [r7, #4]
 800129a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800129c:	4313      	orrs	r3, r2
         );
}
 800129e:	4618      	mov	r0, r3
 80012a0:	3724      	adds	r7, #36	; 0x24
 80012a2:	46bd      	mov	sp, r7
 80012a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012a8:	4770      	bx	lr
	...

080012ac <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80012ac:	b580      	push	{r7, lr}
 80012ae:	b082      	sub	sp, #8
 80012b0:	af00      	add	r7, sp, #0
 80012b2:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80012b4:	687b      	ldr	r3, [r7, #4]
 80012b6:	3b01      	subs	r3, #1
 80012b8:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80012bc:	d301      	bcc.n	80012c2 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80012be:	2301      	movs	r3, #1
 80012c0:	e00f      	b.n	80012e2 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80012c2:	4a0a      	ldr	r2, [pc, #40]	; (80012ec <SysTick_Config+0x40>)
 80012c4:	687b      	ldr	r3, [r7, #4]
 80012c6:	3b01      	subs	r3, #1
 80012c8:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80012ca:	210f      	movs	r1, #15
 80012cc:	f04f 30ff 	mov.w	r0, #4294967295
 80012d0:	f7ff ff8e 	bl	80011f0 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80012d4:	4b05      	ldr	r3, [pc, #20]	; (80012ec <SysTick_Config+0x40>)
 80012d6:	2200      	movs	r2, #0
 80012d8:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80012da:	4b04      	ldr	r3, [pc, #16]	; (80012ec <SysTick_Config+0x40>)
 80012dc:	2207      	movs	r2, #7
 80012de:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80012e0:	2300      	movs	r3, #0
}
 80012e2:	4618      	mov	r0, r3
 80012e4:	3708      	adds	r7, #8
 80012e6:	46bd      	mov	sp, r7
 80012e8:	bd80      	pop	{r7, pc}
 80012ea:	bf00      	nop
 80012ec:	e000e010 	.word	0xe000e010

080012f0 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80012f0:	b580      	push	{r7, lr}
 80012f2:	b082      	sub	sp, #8
 80012f4:	af00      	add	r7, sp, #0
 80012f6:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80012f8:	6878      	ldr	r0, [r7, #4]
 80012fa:	f7ff ff29 	bl	8001150 <__NVIC_SetPriorityGrouping>
}
 80012fe:	bf00      	nop
 8001300:	3708      	adds	r7, #8
 8001302:	46bd      	mov	sp, r7
 8001304:	bd80      	pop	{r7, pc}

08001306 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15 as described in the table CORTEX_NVIC_Priority_Table
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001306:	b580      	push	{r7, lr}
 8001308:	b086      	sub	sp, #24
 800130a:	af00      	add	r7, sp, #0
 800130c:	4603      	mov	r3, r0
 800130e:	60b9      	str	r1, [r7, #8]
 8001310:	607a      	str	r2, [r7, #4]
 8001312:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001314:	2300      	movs	r3, #0
 8001316:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001318:	f7ff ff3e 	bl	8001198 <__NVIC_GetPriorityGrouping>
 800131c:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800131e:	687a      	ldr	r2, [r7, #4]
 8001320:	68b9      	ldr	r1, [r7, #8]
 8001322:	6978      	ldr	r0, [r7, #20]
 8001324:	f7ff ff8e 	bl	8001244 <NVIC_EncodePriority>
 8001328:	4602      	mov	r2, r0
 800132a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800132e:	4611      	mov	r1, r2
 8001330:	4618      	mov	r0, r3
 8001332:	f7ff ff5d 	bl	80011f0 <__NVIC_SetPriority>
}
 8001336:	bf00      	nop
 8001338:	3718      	adds	r7, #24
 800133a:	46bd      	mov	sp, r7
 800133c:	bd80      	pop	{r7, pc}

0800133e <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f3xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800133e:	b580      	push	{r7, lr}
 8001340:	b082      	sub	sp, #8
 8001342:	af00      	add	r7, sp, #0
 8001344:	4603      	mov	r3, r0
 8001346:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001348:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800134c:	4618      	mov	r0, r3
 800134e:	f7ff ff31 	bl	80011b4 <__NVIC_EnableIRQ>
}
 8001352:	bf00      	nop
 8001354:	3708      	adds	r7, #8
 8001356:	46bd      	mov	sp, r7
 8001358:	bd80      	pop	{r7, pc}

0800135a <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800135a:	b580      	push	{r7, lr}
 800135c:	b082      	sub	sp, #8
 800135e:	af00      	add	r7, sp, #0
 8001360:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001362:	6878      	ldr	r0, [r7, #4]
 8001364:	f7ff ffa2 	bl	80012ac <SysTick_Config>
 8001368:	4603      	mov	r3, r0
}
 800136a:	4618      	mov	r0, r3
 800136c:	3708      	adds	r7, #8
 800136e:	46bd      	mov	sp, r7
 8001370:	bd80      	pop	{r7, pc}

08001372 <HAL_DMA_Abort>:
  * @param  hdma  : pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8001372:	b480      	push	{r7}
 8001374:	b083      	sub	sp, #12
 8001376:	af00      	add	r7, sp, #0
 8001378:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 800137a:	687b      	ldr	r3, [r7, #4]
 800137c:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 8001380:	2b02      	cmp	r3, #2
 8001382:	d008      	beq.n	8001396 <HAL_DMA_Abort+0x24>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8001384:	687b      	ldr	r3, [r7, #4]
 8001386:	2204      	movs	r2, #4
 8001388:	639a      	str	r2, [r3, #56]	; 0x38
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800138a:	687b      	ldr	r3, [r7, #4]
 800138c:	2200      	movs	r2, #0
 800138e:	f883 2020 	strb.w	r2, [r3, #32]
    
    return HAL_ERROR;
 8001392:	2301      	movs	r3, #1
 8001394:	e020      	b.n	80013d8 <HAL_DMA_Abort+0x66>
  }
  else
  {
    /* Disable DMA IT */
     hdma->Instance->CCR &= ~(DMA_IT_TC | DMA_IT_HT | DMA_IT_TE);
 8001396:	687b      	ldr	r3, [r7, #4]
 8001398:	681b      	ldr	r3, [r3, #0]
 800139a:	681a      	ldr	r2, [r3, #0]
 800139c:	687b      	ldr	r3, [r7, #4]
 800139e:	681b      	ldr	r3, [r3, #0]
 80013a0:	f022 020e 	bic.w	r2, r2, #14
 80013a4:	601a      	str	r2, [r3, #0]
    
    /* Disable the channel */
    hdma->Instance->CCR &= ~DMA_CCR_EN;
 80013a6:	687b      	ldr	r3, [r7, #4]
 80013a8:	681b      	ldr	r3, [r3, #0]
 80013aa:	681a      	ldr	r2, [r3, #0]
 80013ac:	687b      	ldr	r3, [r7, #4]
 80013ae:	681b      	ldr	r3, [r3, #0]
 80013b0:	f022 0201 	bic.w	r2, r2, #1
 80013b4:	601a      	str	r2, [r3, #0]
    
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_FLAG_GL1 << hdma->ChannelIndex);
 80013b6:	687b      	ldr	r3, [r7, #4]
 80013b8:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80013ba:	687b      	ldr	r3, [r7, #4]
 80013bc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80013be:	2101      	movs	r1, #1
 80013c0:	fa01 f202 	lsl.w	r2, r1, r2
 80013c4:	605a      	str	r2, [r3, #4]
  }
  /* Change the DMA state*/
  hdma->State = HAL_DMA_STATE_READY; 
 80013c6:	687b      	ldr	r3, [r7, #4]
 80013c8:	2201      	movs	r2, #1
 80013ca:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
  
  /* Process Unlocked */
  __HAL_UNLOCK(hdma);
 80013ce:	687b      	ldr	r3, [r7, #4]
 80013d0:	2200      	movs	r2, #0
 80013d2:	f883 2020 	strb.w	r2, [r3, #32]
  
  return HAL_OK;
 80013d6:	2300      	movs	r3, #0
}
 80013d8:	4618      	mov	r0, r3
 80013da:	370c      	adds	r7, #12
 80013dc:	46bd      	mov	sp, r7
 80013de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013e2:	4770      	bx	lr

080013e4 <HAL_DMA_Abort_IT>:
  * @param  hdma  : pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{  
 80013e4:	b580      	push	{r7, lr}
 80013e6:	b084      	sub	sp, #16
 80013e8:	af00      	add	r7, sp, #0
 80013ea:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80013ec:	2300      	movs	r3, #0
 80013ee:	73fb      	strb	r3, [r7, #15]
  
  if(HAL_DMA_STATE_BUSY != hdma->State)
 80013f0:	687b      	ldr	r3, [r7, #4]
 80013f2:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 80013f6:	2b02      	cmp	r3, #2
 80013f8:	d005      	beq.n	8001406 <HAL_DMA_Abort_IT+0x22>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80013fa:	687b      	ldr	r3, [r7, #4]
 80013fc:	2204      	movs	r2, #4
 80013fe:	639a      	str	r2, [r3, #56]	; 0x38
        
    status = HAL_ERROR;
 8001400:	2301      	movs	r3, #1
 8001402:	73fb      	strb	r3, [r7, #15]
 8001404:	e027      	b.n	8001456 <HAL_DMA_Abort_IT+0x72>
  }
  else
  { 
  
    /* Disable DMA IT */
    hdma->Instance->CCR &= ~(DMA_IT_TC | DMA_IT_HT | DMA_IT_TE);
 8001406:	687b      	ldr	r3, [r7, #4]
 8001408:	681b      	ldr	r3, [r3, #0]
 800140a:	681a      	ldr	r2, [r3, #0]
 800140c:	687b      	ldr	r3, [r7, #4]
 800140e:	681b      	ldr	r3, [r3, #0]
 8001410:	f022 020e 	bic.w	r2, r2, #14
 8001414:	601a      	str	r2, [r3, #0]
    
    /* Disable the channel */
    hdma->Instance->CCR &= ~DMA_CCR_EN;
 8001416:	687b      	ldr	r3, [r7, #4]
 8001418:	681b      	ldr	r3, [r3, #0]
 800141a:	681a      	ldr	r2, [r3, #0]
 800141c:	687b      	ldr	r3, [r7, #4]
 800141e:	681b      	ldr	r3, [r3, #0]
 8001420:	f022 0201 	bic.w	r2, r2, #1
 8001424:	601a      	str	r2, [r3, #0]
    
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = DMA_FLAG_GL1 << hdma->ChannelIndex;
 8001426:	687b      	ldr	r3, [r7, #4]
 8001428:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800142a:	687b      	ldr	r3, [r7, #4]
 800142c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800142e:	2101      	movs	r1, #1
 8001430:	fa01 f202 	lsl.w	r2, r1, r2
 8001434:	605a      	str	r2, [r3, #4]
    
    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8001436:	687b      	ldr	r3, [r7, #4]
 8001438:	2201      	movs	r2, #1
 800143a:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800143e:	687b      	ldr	r3, [r7, #4]
 8001440:	2200      	movs	r2, #0
 8001442:	f883 2020 	strb.w	r2, [r3, #32]
    
    /* Call User Abort callback */ 
    if(hdma->XferAbortCallback != NULL)
 8001446:	687b      	ldr	r3, [r7, #4]
 8001448:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800144a:	2b00      	cmp	r3, #0
 800144c:	d003      	beq.n	8001456 <HAL_DMA_Abort_IT+0x72>
    {
      hdma->XferAbortCallback(hdma);
 800144e:	687b      	ldr	r3, [r7, #4]
 8001450:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001452:	6878      	ldr	r0, [r7, #4]
 8001454:	4798      	blx	r3
    } 
  }
  return status;
 8001456:	7bfb      	ldrb	r3, [r7, #15]
}
 8001458:	4618      	mov	r0, r3
 800145a:	3710      	adds	r7, #16
 800145c:	46bd      	mov	sp, r7
 800145e:	bd80      	pop	{r7, pc}

08001460 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001460:	b480      	push	{r7}
 8001462:	b087      	sub	sp, #28
 8001464:	af00      	add	r7, sp, #0
 8001466:	6078      	str	r0, [r7, #4]
 8001468:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 800146a:	2300      	movs	r3, #0
 800146c:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800146e:	e154      	b.n	800171a <HAL_GPIO_Init+0x2ba>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8001470:	683b      	ldr	r3, [r7, #0]
 8001472:	681a      	ldr	r2, [r3, #0]
 8001474:	2101      	movs	r1, #1
 8001476:	697b      	ldr	r3, [r7, #20]
 8001478:	fa01 f303 	lsl.w	r3, r1, r3
 800147c:	4013      	ands	r3, r2
 800147e:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8001480:	68fb      	ldr	r3, [r7, #12]
 8001482:	2b00      	cmp	r3, #0
 8001484:	f000 8146 	beq.w	8001714 <HAL_GPIO_Init+0x2b4>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8001488:	683b      	ldr	r3, [r7, #0]
 800148a:	685b      	ldr	r3, [r3, #4]
 800148c:	f003 0303 	and.w	r3, r3, #3
 8001490:	2b01      	cmp	r3, #1
 8001492:	d005      	beq.n	80014a0 <HAL_GPIO_Init+0x40>
 8001494:	683b      	ldr	r3, [r7, #0]
 8001496:	685b      	ldr	r3, [r3, #4]
 8001498:	f003 0303 	and.w	r3, r3, #3
 800149c:	2b02      	cmp	r3, #2
 800149e:	d130      	bne.n	8001502 <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 80014a0:	687b      	ldr	r3, [r7, #4]
 80014a2:	689b      	ldr	r3, [r3, #8]
 80014a4:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2u));
 80014a6:	697b      	ldr	r3, [r7, #20]
 80014a8:	005b      	lsls	r3, r3, #1
 80014aa:	2203      	movs	r2, #3
 80014ac:	fa02 f303 	lsl.w	r3, r2, r3
 80014b0:	43db      	mvns	r3, r3
 80014b2:	693a      	ldr	r2, [r7, #16]
 80014b4:	4013      	ands	r3, r2
 80014b6:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 80014b8:	683b      	ldr	r3, [r7, #0]
 80014ba:	68da      	ldr	r2, [r3, #12]
 80014bc:	697b      	ldr	r3, [r7, #20]
 80014be:	005b      	lsls	r3, r3, #1
 80014c0:	fa02 f303 	lsl.w	r3, r2, r3
 80014c4:	693a      	ldr	r2, [r7, #16]
 80014c6:	4313      	orrs	r3, r2
 80014c8:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 80014ca:	687b      	ldr	r3, [r7, #4]
 80014cc:	693a      	ldr	r2, [r7, #16]
 80014ce:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80014d0:	687b      	ldr	r3, [r7, #4]
 80014d2:	685b      	ldr	r3, [r3, #4]
 80014d4:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 80014d6:	2201      	movs	r2, #1
 80014d8:	697b      	ldr	r3, [r7, #20]
 80014da:	fa02 f303 	lsl.w	r3, r2, r3
 80014de:	43db      	mvns	r3, r3
 80014e0:	693a      	ldr	r2, [r7, #16]
 80014e2:	4013      	ands	r3, r2
 80014e4:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80014e6:	683b      	ldr	r3, [r7, #0]
 80014e8:	685b      	ldr	r3, [r3, #4]
 80014ea:	091b      	lsrs	r3, r3, #4
 80014ec:	f003 0201 	and.w	r2, r3, #1
 80014f0:	697b      	ldr	r3, [r7, #20]
 80014f2:	fa02 f303 	lsl.w	r3, r2, r3
 80014f6:	693a      	ldr	r2, [r7, #16]
 80014f8:	4313      	orrs	r3, r2
 80014fa:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 80014fc:	687b      	ldr	r3, [r7, #4]
 80014fe:	693a      	ldr	r2, [r7, #16]
 8001500:	605a      	str	r2, [r3, #4]
      }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001502:	683b      	ldr	r3, [r7, #0]
 8001504:	685b      	ldr	r3, [r3, #4]
 8001506:	f003 0303 	and.w	r3, r3, #3
 800150a:	2b03      	cmp	r3, #3
 800150c:	d017      	beq.n	800153e <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 800150e:	687b      	ldr	r3, [r7, #4]
 8001510:	68db      	ldr	r3, [r3, #12]
 8001512:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2u));
 8001514:	697b      	ldr	r3, [r7, #20]
 8001516:	005b      	lsls	r3, r3, #1
 8001518:	2203      	movs	r2, #3
 800151a:	fa02 f303 	lsl.w	r3, r2, r3
 800151e:	43db      	mvns	r3, r3
 8001520:	693a      	ldr	r2, [r7, #16]
 8001522:	4013      	ands	r3, r2
 8001524:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2u));
 8001526:	683b      	ldr	r3, [r7, #0]
 8001528:	689a      	ldr	r2, [r3, #8]
 800152a:	697b      	ldr	r3, [r7, #20]
 800152c:	005b      	lsls	r3, r3, #1
 800152e:	fa02 f303 	lsl.w	r3, r2, r3
 8001532:	693a      	ldr	r2, [r7, #16]
 8001534:	4313      	orrs	r3, r2
 8001536:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8001538:	687b      	ldr	r3, [r7, #4]
 800153a:	693a      	ldr	r2, [r7, #16]
 800153c:	60da      	str	r2, [r3, #12]
      }

      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800153e:	683b      	ldr	r3, [r7, #0]
 8001540:	685b      	ldr	r3, [r3, #4]
 8001542:	f003 0303 	and.w	r3, r3, #3
 8001546:	2b02      	cmp	r3, #2
 8001548:	d123      	bne.n	8001592 <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 800154a:	697b      	ldr	r3, [r7, #20]
 800154c:	08da      	lsrs	r2, r3, #3
 800154e:	687b      	ldr	r3, [r7, #4]
 8001550:	3208      	adds	r2, #8
 8001552:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001556:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8001558:	697b      	ldr	r3, [r7, #20]
 800155a:	f003 0307 	and.w	r3, r3, #7
 800155e:	009b      	lsls	r3, r3, #2
 8001560:	220f      	movs	r2, #15
 8001562:	fa02 f303 	lsl.w	r3, r2, r3
 8001566:	43db      	mvns	r3, r3
 8001568:	693a      	ldr	r2, [r7, #16]
 800156a:	4013      	ands	r3, r2
 800156c:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 800156e:	683b      	ldr	r3, [r7, #0]
 8001570:	691a      	ldr	r2, [r3, #16]
 8001572:	697b      	ldr	r3, [r7, #20]
 8001574:	f003 0307 	and.w	r3, r3, #7
 8001578:	009b      	lsls	r3, r3, #2
 800157a:	fa02 f303 	lsl.w	r3, r2, r3
 800157e:	693a      	ldr	r2, [r7, #16]
 8001580:	4313      	orrs	r3, r2
 8001582:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8001584:	697b      	ldr	r3, [r7, #20]
 8001586:	08da      	lsrs	r2, r3, #3
 8001588:	687b      	ldr	r3, [r7, #4]
 800158a:	3208      	adds	r2, #8
 800158c:	6939      	ldr	r1, [r7, #16]
 800158e:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001592:	687b      	ldr	r3, [r7, #4]
 8001594:	681b      	ldr	r3, [r3, #0]
 8001596:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2u));
 8001598:	697b      	ldr	r3, [r7, #20]
 800159a:	005b      	lsls	r3, r3, #1
 800159c:	2203      	movs	r2, #3
 800159e:	fa02 f303 	lsl.w	r3, r2, r3
 80015a2:	43db      	mvns	r3, r3
 80015a4:	693a      	ldr	r2, [r7, #16]
 80015a6:	4013      	ands	r3, r2
 80015a8:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 80015aa:	683b      	ldr	r3, [r7, #0]
 80015ac:	685b      	ldr	r3, [r3, #4]
 80015ae:	f003 0203 	and.w	r2, r3, #3
 80015b2:	697b      	ldr	r3, [r7, #20]
 80015b4:	005b      	lsls	r3, r3, #1
 80015b6:	fa02 f303 	lsl.w	r3, r2, r3
 80015ba:	693a      	ldr	r2, [r7, #16]
 80015bc:	4313      	orrs	r3, r2
 80015be:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 80015c0:	687b      	ldr	r3, [r7, #4]
 80015c2:	693a      	ldr	r2, [r7, #16]
 80015c4:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 80015c6:	683b      	ldr	r3, [r7, #0]
 80015c8:	685b      	ldr	r3, [r3, #4]
 80015ca:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 80015ce:	2b00      	cmp	r3, #0
 80015d0:	f000 80a0 	beq.w	8001714 <HAL_GPIO_Init+0x2b4>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80015d4:	4b58      	ldr	r3, [pc, #352]	; (8001738 <HAL_GPIO_Init+0x2d8>)
 80015d6:	699b      	ldr	r3, [r3, #24]
 80015d8:	4a57      	ldr	r2, [pc, #348]	; (8001738 <HAL_GPIO_Init+0x2d8>)
 80015da:	f043 0301 	orr.w	r3, r3, #1
 80015de:	6193      	str	r3, [r2, #24]
 80015e0:	4b55      	ldr	r3, [pc, #340]	; (8001738 <HAL_GPIO_Init+0x2d8>)
 80015e2:	699b      	ldr	r3, [r3, #24]
 80015e4:	f003 0301 	and.w	r3, r3, #1
 80015e8:	60bb      	str	r3, [r7, #8]
 80015ea:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 80015ec:	4a53      	ldr	r2, [pc, #332]	; (800173c <HAL_GPIO_Init+0x2dc>)
 80015ee:	697b      	ldr	r3, [r7, #20]
 80015f0:	089b      	lsrs	r3, r3, #2
 80015f2:	3302      	adds	r3, #2
 80015f4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80015f8:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 80015fa:	697b      	ldr	r3, [r7, #20]
 80015fc:	f003 0303 	and.w	r3, r3, #3
 8001600:	009b      	lsls	r3, r3, #2
 8001602:	220f      	movs	r2, #15
 8001604:	fa02 f303 	lsl.w	r3, r2, r3
 8001608:	43db      	mvns	r3, r3
 800160a:	693a      	ldr	r2, [r7, #16]
 800160c:	4013      	ands	r3, r2
 800160e:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8001610:	687b      	ldr	r3, [r7, #4]
 8001612:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 8001616:	d019      	beq.n	800164c <HAL_GPIO_Init+0x1ec>
 8001618:	687b      	ldr	r3, [r7, #4]
 800161a:	4a49      	ldr	r2, [pc, #292]	; (8001740 <HAL_GPIO_Init+0x2e0>)
 800161c:	4293      	cmp	r3, r2
 800161e:	d013      	beq.n	8001648 <HAL_GPIO_Init+0x1e8>
 8001620:	687b      	ldr	r3, [r7, #4]
 8001622:	4a48      	ldr	r2, [pc, #288]	; (8001744 <HAL_GPIO_Init+0x2e4>)
 8001624:	4293      	cmp	r3, r2
 8001626:	d00d      	beq.n	8001644 <HAL_GPIO_Init+0x1e4>
 8001628:	687b      	ldr	r3, [r7, #4]
 800162a:	4a47      	ldr	r2, [pc, #284]	; (8001748 <HAL_GPIO_Init+0x2e8>)
 800162c:	4293      	cmp	r3, r2
 800162e:	d007      	beq.n	8001640 <HAL_GPIO_Init+0x1e0>
 8001630:	687b      	ldr	r3, [r7, #4]
 8001632:	4a46      	ldr	r2, [pc, #280]	; (800174c <HAL_GPIO_Init+0x2ec>)
 8001634:	4293      	cmp	r3, r2
 8001636:	d101      	bne.n	800163c <HAL_GPIO_Init+0x1dc>
 8001638:	2304      	movs	r3, #4
 800163a:	e008      	b.n	800164e <HAL_GPIO_Init+0x1ee>
 800163c:	2305      	movs	r3, #5
 800163e:	e006      	b.n	800164e <HAL_GPIO_Init+0x1ee>
 8001640:	2303      	movs	r3, #3
 8001642:	e004      	b.n	800164e <HAL_GPIO_Init+0x1ee>
 8001644:	2302      	movs	r3, #2
 8001646:	e002      	b.n	800164e <HAL_GPIO_Init+0x1ee>
 8001648:	2301      	movs	r3, #1
 800164a:	e000      	b.n	800164e <HAL_GPIO_Init+0x1ee>
 800164c:	2300      	movs	r3, #0
 800164e:	697a      	ldr	r2, [r7, #20]
 8001650:	f002 0203 	and.w	r2, r2, #3
 8001654:	0092      	lsls	r2, r2, #2
 8001656:	4093      	lsls	r3, r2
 8001658:	693a      	ldr	r2, [r7, #16]
 800165a:	4313      	orrs	r3, r2
 800165c:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 800165e:	4937      	ldr	r1, [pc, #220]	; (800173c <HAL_GPIO_Init+0x2dc>)
 8001660:	697b      	ldr	r3, [r7, #20]
 8001662:	089b      	lsrs	r3, r3, #2
 8001664:	3302      	adds	r3, #2
 8001666:	693a      	ldr	r2, [r7, #16]
 8001668:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 800166c:	4b38      	ldr	r3, [pc, #224]	; (8001750 <HAL_GPIO_Init+0x2f0>)
 800166e:	681b      	ldr	r3, [r3, #0]
 8001670:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001672:	68fb      	ldr	r3, [r7, #12]
 8001674:	43db      	mvns	r3, r3
 8001676:	693a      	ldr	r2, [r7, #16]
 8001678:	4013      	ands	r3, r2
 800167a:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 800167c:	683b      	ldr	r3, [r7, #0]
 800167e:	685b      	ldr	r3, [r3, #4]
 8001680:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001684:	2b00      	cmp	r3, #0
 8001686:	d003      	beq.n	8001690 <HAL_GPIO_Init+0x230>
        {
          temp |= iocurrent;
 8001688:	693a      	ldr	r2, [r7, #16]
 800168a:	68fb      	ldr	r3, [r7, #12]
 800168c:	4313      	orrs	r3, r2
 800168e:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR = temp;
 8001690:	4a2f      	ldr	r2, [pc, #188]	; (8001750 <HAL_GPIO_Init+0x2f0>)
 8001692:	693b      	ldr	r3, [r7, #16]
 8001694:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 8001696:	4b2e      	ldr	r3, [pc, #184]	; (8001750 <HAL_GPIO_Init+0x2f0>)
 8001698:	685b      	ldr	r3, [r3, #4]
 800169a:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800169c:	68fb      	ldr	r3, [r7, #12]
 800169e:	43db      	mvns	r3, r3
 80016a0:	693a      	ldr	r2, [r7, #16]
 80016a2:	4013      	ands	r3, r2
 80016a4:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 80016a6:	683b      	ldr	r3, [r7, #0]
 80016a8:	685b      	ldr	r3, [r3, #4]
 80016aa:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80016ae:	2b00      	cmp	r3, #0
 80016b0:	d003      	beq.n	80016ba <HAL_GPIO_Init+0x25a>
        {
          temp |= iocurrent;
 80016b2:	693a      	ldr	r2, [r7, #16]
 80016b4:	68fb      	ldr	r3, [r7, #12]
 80016b6:	4313      	orrs	r3, r2
 80016b8:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR = temp;
 80016ba:	4a25      	ldr	r2, [pc, #148]	; (8001750 <HAL_GPIO_Init+0x2f0>)
 80016bc:	693b      	ldr	r3, [r7, #16]
 80016be:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80016c0:	4b23      	ldr	r3, [pc, #140]	; (8001750 <HAL_GPIO_Init+0x2f0>)
 80016c2:	689b      	ldr	r3, [r3, #8]
 80016c4:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80016c6:	68fb      	ldr	r3, [r7, #12]
 80016c8:	43db      	mvns	r3, r3
 80016ca:	693a      	ldr	r2, [r7, #16]
 80016cc:	4013      	ands	r3, r2
 80016ce:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 80016d0:	683b      	ldr	r3, [r7, #0]
 80016d2:	685b      	ldr	r3, [r3, #4]
 80016d4:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80016d8:	2b00      	cmp	r3, #0
 80016da:	d003      	beq.n	80016e4 <HAL_GPIO_Init+0x284>
        {
          temp |= iocurrent;
 80016dc:	693a      	ldr	r2, [r7, #16]
 80016de:	68fb      	ldr	r3, [r7, #12]
 80016e0:	4313      	orrs	r3, r2
 80016e2:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR = temp;
 80016e4:	4a1a      	ldr	r2, [pc, #104]	; (8001750 <HAL_GPIO_Init+0x2f0>)
 80016e6:	693b      	ldr	r3, [r7, #16]
 80016e8:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 80016ea:	4b19      	ldr	r3, [pc, #100]	; (8001750 <HAL_GPIO_Init+0x2f0>)
 80016ec:	68db      	ldr	r3, [r3, #12]
 80016ee:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80016f0:	68fb      	ldr	r3, [r7, #12]
 80016f2:	43db      	mvns	r3, r3
 80016f4:	693a      	ldr	r2, [r7, #16]
 80016f6:	4013      	ands	r3, r2
 80016f8:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 80016fa:	683b      	ldr	r3, [r7, #0]
 80016fc:	685b      	ldr	r3, [r3, #4]
 80016fe:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001702:	2b00      	cmp	r3, #0
 8001704:	d003      	beq.n	800170e <HAL_GPIO_Init+0x2ae>
        {
          temp |= iocurrent;
 8001706:	693a      	ldr	r2, [r7, #16]
 8001708:	68fb      	ldr	r3, [r7, #12]
 800170a:	4313      	orrs	r3, r2
 800170c:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR = temp;
 800170e:	4a10      	ldr	r2, [pc, #64]	; (8001750 <HAL_GPIO_Init+0x2f0>)
 8001710:	693b      	ldr	r3, [r7, #16]
 8001712:	60d3      	str	r3, [r2, #12]
      }
    }

    position++;
 8001714:	697b      	ldr	r3, [r7, #20]
 8001716:	3301      	adds	r3, #1
 8001718:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800171a:	683b      	ldr	r3, [r7, #0]
 800171c:	681a      	ldr	r2, [r3, #0]
 800171e:	697b      	ldr	r3, [r7, #20]
 8001720:	fa22 f303 	lsr.w	r3, r2, r3
 8001724:	2b00      	cmp	r3, #0
 8001726:	f47f aea3 	bne.w	8001470 <HAL_GPIO_Init+0x10>
  }
}
 800172a:	bf00      	nop
 800172c:	bf00      	nop
 800172e:	371c      	adds	r7, #28
 8001730:	46bd      	mov	sp, r7
 8001732:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001736:	4770      	bx	lr
 8001738:	40021000 	.word	0x40021000
 800173c:	40010000 	.word	0x40010000
 8001740:	48000400 	.word	0x48000400
 8001744:	48000800 	.word	0x48000800
 8001748:	48000c00 	.word	0x48000c00
 800174c:	48001000 	.word	0x48001000
 8001750:	40010400 	.word	0x40010400

08001754 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001754:	b480      	push	{r7}
 8001756:	b083      	sub	sp, #12
 8001758:	af00      	add	r7, sp, #0
 800175a:	6078      	str	r0, [r7, #4]
 800175c:	460b      	mov	r3, r1
 800175e:	807b      	strh	r3, [r7, #2]
 8001760:	4613      	mov	r3, r2
 8001762:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8001764:	787b      	ldrb	r3, [r7, #1]
 8001766:	2b00      	cmp	r3, #0
 8001768:	d003      	beq.n	8001772 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 800176a:	887a      	ldrh	r2, [r7, #2]
 800176c:	687b      	ldr	r3, [r7, #4]
 800176e:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8001770:	e002      	b.n	8001778 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8001772:	887a      	ldrh	r2, [r7, #2]
 8001774:	687b      	ldr	r3, [r7, #4]
 8001776:	629a      	str	r2, [r3, #40]	; 0x28
}
 8001778:	bf00      	nop
 800177a:	370c      	adds	r7, #12
 800177c:	46bd      	mov	sp, r7
 800177e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001782:	4770      	bx	lr

08001784 <HAL_GPIO_TogglePin>:
  * @param  GPIOx where x can be (A..F) to select the GPIO peripheral for STM32F3 family
  * @param  GPIO_Pin specifies the pin to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8001784:	b480      	push	{r7}
 8001786:	b085      	sub	sp, #20
 8001788:	af00      	add	r7, sp, #0
 800178a:	6078      	str	r0, [r7, #4]
 800178c:	460b      	mov	r3, r1
 800178e:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Ouput Data Register value */
  odr = GPIOx->ODR;
 8001790:	687b      	ldr	r3, [r7, #4]
 8001792:	695b      	ldr	r3, [r3, #20]
 8001794:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8001796:	887a      	ldrh	r2, [r7, #2]
 8001798:	68fb      	ldr	r3, [r7, #12]
 800179a:	4013      	ands	r3, r2
 800179c:	041a      	lsls	r2, r3, #16
 800179e:	68fb      	ldr	r3, [r7, #12]
 80017a0:	43d9      	mvns	r1, r3
 80017a2:	887b      	ldrh	r3, [r7, #2]
 80017a4:	400b      	ands	r3, r1
 80017a6:	431a      	orrs	r2, r3
 80017a8:	687b      	ldr	r3, [r7, #4]
 80017aa:	619a      	str	r2, [r3, #24]
}
 80017ac:	bf00      	nop
 80017ae:	3714      	adds	r7, #20
 80017b0:	46bd      	mov	sp, r7
 80017b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017b6:	4770      	bx	lr

080017b8 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80017b8:	b580      	push	{r7, lr}
 80017ba:	f5ad 7d00 	sub.w	sp, sp, #512	; 0x200
 80017be:	af00      	add	r7, sp, #0
 80017c0:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80017c4:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 80017c8:	6018      	str	r0, [r3, #0]
#if defined(RCC_CFGR_PLLSRC_HSI_PREDIV)
  uint32_t pll_config2;
#endif /* RCC_CFGR_PLLSRC_HSI_PREDIV */

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 80017ca:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80017ce:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 80017d2:	681b      	ldr	r3, [r3, #0]
 80017d4:	2b00      	cmp	r3, #0
 80017d6:	d102      	bne.n	80017de <HAL_RCC_OscConfig+0x26>
  {
    return HAL_ERROR;
 80017d8:	2301      	movs	r3, #1
 80017da:	f001 b823 	b.w	8002824 <HAL_RCC_OscConfig+0x106c>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80017de:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80017e2:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 80017e6:	681b      	ldr	r3, [r3, #0]
 80017e8:	681b      	ldr	r3, [r3, #0]
 80017ea:	f003 0301 	and.w	r3, r3, #1
 80017ee:	2b00      	cmp	r3, #0
 80017f0:	f000 817d 	beq.w	8001aee <HAL_RCC_OscConfig+0x336>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE) 
 80017f4:	4bbc      	ldr	r3, [pc, #752]	; (8001ae8 <HAL_RCC_OscConfig+0x330>)
 80017f6:	685b      	ldr	r3, [r3, #4]
 80017f8:	f003 030c 	and.w	r3, r3, #12
 80017fc:	2b04      	cmp	r3, #4
 80017fe:	d00c      	beq.n	800181a <HAL_RCC_OscConfig+0x62>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8001800:	4bb9      	ldr	r3, [pc, #740]	; (8001ae8 <HAL_RCC_OscConfig+0x330>)
 8001802:	685b      	ldr	r3, [r3, #4]
 8001804:	f003 030c 	and.w	r3, r3, #12
 8001808:	2b08      	cmp	r3, #8
 800180a:	d15c      	bne.n	80018c6 <HAL_RCC_OscConfig+0x10e>
 800180c:	4bb6      	ldr	r3, [pc, #728]	; (8001ae8 <HAL_RCC_OscConfig+0x330>)
 800180e:	685b      	ldr	r3, [r3, #4]
 8001810:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001814:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001818:	d155      	bne.n	80018c6 <HAL_RCC_OscConfig+0x10e>
 800181a:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 800181e:	f8c7 31f0 	str.w	r3, [r7, #496]	; 0x1f0
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001822:	f8d7 31f0 	ldr.w	r3, [r7, #496]	; 0x1f0
 8001826:	fa93 f3a3 	rbit	r3, r3
 800182a:	f8c7 31ec 	str.w	r3, [r7, #492]	; 0x1ec
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 800182e:	f8d7 31ec 	ldr.w	r3, [r7, #492]	; 0x1ec
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001832:	fab3 f383 	clz	r3, r3
 8001836:	b2db      	uxtb	r3, r3
 8001838:	095b      	lsrs	r3, r3, #5
 800183a:	b2db      	uxtb	r3, r3
 800183c:	f043 0301 	orr.w	r3, r3, #1
 8001840:	b2db      	uxtb	r3, r3
 8001842:	2b01      	cmp	r3, #1
 8001844:	d102      	bne.n	800184c <HAL_RCC_OscConfig+0x94>
 8001846:	4ba8      	ldr	r3, [pc, #672]	; (8001ae8 <HAL_RCC_OscConfig+0x330>)
 8001848:	681b      	ldr	r3, [r3, #0]
 800184a:	e015      	b.n	8001878 <HAL_RCC_OscConfig+0xc0>
 800184c:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8001850:	f8c7 31e8 	str.w	r3, [r7, #488]	; 0x1e8
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001854:	f8d7 31e8 	ldr.w	r3, [r7, #488]	; 0x1e8
 8001858:	fa93 f3a3 	rbit	r3, r3
 800185c:	f8c7 31e4 	str.w	r3, [r7, #484]	; 0x1e4
 8001860:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8001864:	f8c7 31e0 	str.w	r3, [r7, #480]	; 0x1e0
 8001868:	f8d7 31e0 	ldr.w	r3, [r7, #480]	; 0x1e0
 800186c:	fa93 f3a3 	rbit	r3, r3
 8001870:	f8c7 31dc 	str.w	r3, [r7, #476]	; 0x1dc
 8001874:	4b9c      	ldr	r3, [pc, #624]	; (8001ae8 <HAL_RCC_OscConfig+0x330>)
 8001876:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001878:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 800187c:	f8c7 21d8 	str.w	r2, [r7, #472]	; 0x1d8
 8001880:	f8d7 21d8 	ldr.w	r2, [r7, #472]	; 0x1d8
 8001884:	fa92 f2a2 	rbit	r2, r2
 8001888:	f8c7 21d4 	str.w	r2, [r7, #468]	; 0x1d4
  return result;
 800188c:	f8d7 21d4 	ldr.w	r2, [r7, #468]	; 0x1d4
 8001890:	fab2 f282 	clz	r2, r2
 8001894:	b2d2      	uxtb	r2, r2
 8001896:	f042 0220 	orr.w	r2, r2, #32
 800189a:	b2d2      	uxtb	r2, r2
 800189c:	f002 021f 	and.w	r2, r2, #31
 80018a0:	2101      	movs	r1, #1
 80018a2:	fa01 f202 	lsl.w	r2, r1, r2
 80018a6:	4013      	ands	r3, r2
 80018a8:	2b00      	cmp	r3, #0
 80018aa:	f000 811f 	beq.w	8001aec <HAL_RCC_OscConfig+0x334>
 80018ae:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80018b2:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 80018b6:	681b      	ldr	r3, [r3, #0]
 80018b8:	685b      	ldr	r3, [r3, #4]
 80018ba:	2b00      	cmp	r3, #0
 80018bc:	f040 8116 	bne.w	8001aec <HAL_RCC_OscConfig+0x334>
      {
        return HAL_ERROR;
 80018c0:	2301      	movs	r3, #1
 80018c2:	f000 bfaf 	b.w	8002824 <HAL_RCC_OscConfig+0x106c>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80018c6:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80018ca:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 80018ce:	681b      	ldr	r3, [r3, #0]
 80018d0:	685b      	ldr	r3, [r3, #4]
 80018d2:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80018d6:	d106      	bne.n	80018e6 <HAL_RCC_OscConfig+0x12e>
 80018d8:	4b83      	ldr	r3, [pc, #524]	; (8001ae8 <HAL_RCC_OscConfig+0x330>)
 80018da:	681b      	ldr	r3, [r3, #0]
 80018dc:	4a82      	ldr	r2, [pc, #520]	; (8001ae8 <HAL_RCC_OscConfig+0x330>)
 80018de:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80018e2:	6013      	str	r3, [r2, #0]
 80018e4:	e036      	b.n	8001954 <HAL_RCC_OscConfig+0x19c>
 80018e6:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80018ea:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 80018ee:	681b      	ldr	r3, [r3, #0]
 80018f0:	685b      	ldr	r3, [r3, #4]
 80018f2:	2b00      	cmp	r3, #0
 80018f4:	d10c      	bne.n	8001910 <HAL_RCC_OscConfig+0x158>
 80018f6:	4b7c      	ldr	r3, [pc, #496]	; (8001ae8 <HAL_RCC_OscConfig+0x330>)
 80018f8:	681b      	ldr	r3, [r3, #0]
 80018fa:	4a7b      	ldr	r2, [pc, #492]	; (8001ae8 <HAL_RCC_OscConfig+0x330>)
 80018fc:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001900:	6013      	str	r3, [r2, #0]
 8001902:	4b79      	ldr	r3, [pc, #484]	; (8001ae8 <HAL_RCC_OscConfig+0x330>)
 8001904:	681b      	ldr	r3, [r3, #0]
 8001906:	4a78      	ldr	r2, [pc, #480]	; (8001ae8 <HAL_RCC_OscConfig+0x330>)
 8001908:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800190c:	6013      	str	r3, [r2, #0]
 800190e:	e021      	b.n	8001954 <HAL_RCC_OscConfig+0x19c>
 8001910:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001914:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8001918:	681b      	ldr	r3, [r3, #0]
 800191a:	685b      	ldr	r3, [r3, #4]
 800191c:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8001920:	d10c      	bne.n	800193c <HAL_RCC_OscConfig+0x184>
 8001922:	4b71      	ldr	r3, [pc, #452]	; (8001ae8 <HAL_RCC_OscConfig+0x330>)
 8001924:	681b      	ldr	r3, [r3, #0]
 8001926:	4a70      	ldr	r2, [pc, #448]	; (8001ae8 <HAL_RCC_OscConfig+0x330>)
 8001928:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800192c:	6013      	str	r3, [r2, #0]
 800192e:	4b6e      	ldr	r3, [pc, #440]	; (8001ae8 <HAL_RCC_OscConfig+0x330>)
 8001930:	681b      	ldr	r3, [r3, #0]
 8001932:	4a6d      	ldr	r2, [pc, #436]	; (8001ae8 <HAL_RCC_OscConfig+0x330>)
 8001934:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001938:	6013      	str	r3, [r2, #0]
 800193a:	e00b      	b.n	8001954 <HAL_RCC_OscConfig+0x19c>
 800193c:	4b6a      	ldr	r3, [pc, #424]	; (8001ae8 <HAL_RCC_OscConfig+0x330>)
 800193e:	681b      	ldr	r3, [r3, #0]
 8001940:	4a69      	ldr	r2, [pc, #420]	; (8001ae8 <HAL_RCC_OscConfig+0x330>)
 8001942:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001946:	6013      	str	r3, [r2, #0]
 8001948:	4b67      	ldr	r3, [pc, #412]	; (8001ae8 <HAL_RCC_OscConfig+0x330>)
 800194a:	681b      	ldr	r3, [r3, #0]
 800194c:	4a66      	ldr	r2, [pc, #408]	; (8001ae8 <HAL_RCC_OscConfig+0x330>)
 800194e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001952:	6013      	str	r3, [r2, #0]
      
#if defined(RCC_CFGR_PLLSRC_HSI_DIV2)
      /* Configure the HSE predivision factor --------------------------------*/
      __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8001954:	4b64      	ldr	r3, [pc, #400]	; (8001ae8 <HAL_RCC_OscConfig+0x330>)
 8001956:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001958:	f023 020f 	bic.w	r2, r3, #15
 800195c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001960:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8001964:	681b      	ldr	r3, [r3, #0]
 8001966:	689b      	ldr	r3, [r3, #8]
 8001968:	495f      	ldr	r1, [pc, #380]	; (8001ae8 <HAL_RCC_OscConfig+0x330>)
 800196a:	4313      	orrs	r3, r2
 800196c:	62cb      	str	r3, [r1, #44]	; 0x2c
#endif /* RCC_CFGR_PLLSRC_HSI_DIV2 */

       /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 800196e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001972:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8001976:	681b      	ldr	r3, [r3, #0]
 8001978:	685b      	ldr	r3, [r3, #4]
 800197a:	2b00      	cmp	r3, #0
 800197c:	d059      	beq.n	8001a32 <HAL_RCC_OscConfig+0x27a>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800197e:	f7ff f9ad 	bl	8000cdc <HAL_GetTick>
 8001982:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001986:	e00a      	b.n	800199e <HAL_RCC_OscConfig+0x1e6>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001988:	f7ff f9a8 	bl	8000cdc <HAL_GetTick>
 800198c:	4602      	mov	r2, r0
 800198e:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8001992:	1ad3      	subs	r3, r2, r3
 8001994:	2b64      	cmp	r3, #100	; 0x64
 8001996:	d902      	bls.n	800199e <HAL_RCC_OscConfig+0x1e6>
          {
            return HAL_TIMEOUT;
 8001998:	2303      	movs	r3, #3
 800199a:	f000 bf43 	b.w	8002824 <HAL_RCC_OscConfig+0x106c>
 800199e:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80019a2:	f8c7 31d0 	str.w	r3, [r7, #464]	; 0x1d0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80019a6:	f8d7 31d0 	ldr.w	r3, [r7, #464]	; 0x1d0
 80019aa:	fa93 f3a3 	rbit	r3, r3
 80019ae:	f8c7 31cc 	str.w	r3, [r7, #460]	; 0x1cc
  return result;
 80019b2:	f8d7 31cc 	ldr.w	r3, [r7, #460]	; 0x1cc
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80019b6:	fab3 f383 	clz	r3, r3
 80019ba:	b2db      	uxtb	r3, r3
 80019bc:	095b      	lsrs	r3, r3, #5
 80019be:	b2db      	uxtb	r3, r3
 80019c0:	f043 0301 	orr.w	r3, r3, #1
 80019c4:	b2db      	uxtb	r3, r3
 80019c6:	2b01      	cmp	r3, #1
 80019c8:	d102      	bne.n	80019d0 <HAL_RCC_OscConfig+0x218>
 80019ca:	4b47      	ldr	r3, [pc, #284]	; (8001ae8 <HAL_RCC_OscConfig+0x330>)
 80019cc:	681b      	ldr	r3, [r3, #0]
 80019ce:	e015      	b.n	80019fc <HAL_RCC_OscConfig+0x244>
 80019d0:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80019d4:	f8c7 31c8 	str.w	r3, [r7, #456]	; 0x1c8
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80019d8:	f8d7 31c8 	ldr.w	r3, [r7, #456]	; 0x1c8
 80019dc:	fa93 f3a3 	rbit	r3, r3
 80019e0:	f8c7 31c4 	str.w	r3, [r7, #452]	; 0x1c4
 80019e4:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80019e8:	f8c7 31c0 	str.w	r3, [r7, #448]	; 0x1c0
 80019ec:	f8d7 31c0 	ldr.w	r3, [r7, #448]	; 0x1c0
 80019f0:	fa93 f3a3 	rbit	r3, r3
 80019f4:	f8c7 31bc 	str.w	r3, [r7, #444]	; 0x1bc
 80019f8:	4b3b      	ldr	r3, [pc, #236]	; (8001ae8 <HAL_RCC_OscConfig+0x330>)
 80019fa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80019fc:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8001a00:	f8c7 21b8 	str.w	r2, [r7, #440]	; 0x1b8
 8001a04:	f8d7 21b8 	ldr.w	r2, [r7, #440]	; 0x1b8
 8001a08:	fa92 f2a2 	rbit	r2, r2
 8001a0c:	f8c7 21b4 	str.w	r2, [r7, #436]	; 0x1b4
  return result;
 8001a10:	f8d7 21b4 	ldr.w	r2, [r7, #436]	; 0x1b4
 8001a14:	fab2 f282 	clz	r2, r2
 8001a18:	b2d2      	uxtb	r2, r2
 8001a1a:	f042 0220 	orr.w	r2, r2, #32
 8001a1e:	b2d2      	uxtb	r2, r2
 8001a20:	f002 021f 	and.w	r2, r2, #31
 8001a24:	2101      	movs	r1, #1
 8001a26:	fa01 f202 	lsl.w	r2, r1, r2
 8001a2a:	4013      	ands	r3, r2
 8001a2c:	2b00      	cmp	r3, #0
 8001a2e:	d0ab      	beq.n	8001988 <HAL_RCC_OscConfig+0x1d0>
 8001a30:	e05d      	b.n	8001aee <HAL_RCC_OscConfig+0x336>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001a32:	f7ff f953 	bl	8000cdc <HAL_GetTick>
 8001a36:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001a3a:	e00a      	b.n	8001a52 <HAL_RCC_OscConfig+0x29a>
        {
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001a3c:	f7ff f94e 	bl	8000cdc <HAL_GetTick>
 8001a40:	4602      	mov	r2, r0
 8001a42:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8001a46:	1ad3      	subs	r3, r2, r3
 8001a48:	2b64      	cmp	r3, #100	; 0x64
 8001a4a:	d902      	bls.n	8001a52 <HAL_RCC_OscConfig+0x29a>
          {
            return HAL_TIMEOUT;
 8001a4c:	2303      	movs	r3, #3
 8001a4e:	f000 bee9 	b.w	8002824 <HAL_RCC_OscConfig+0x106c>
 8001a52:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8001a56:	f8c7 31b0 	str.w	r3, [r7, #432]	; 0x1b0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001a5a:	f8d7 31b0 	ldr.w	r3, [r7, #432]	; 0x1b0
 8001a5e:	fa93 f3a3 	rbit	r3, r3
 8001a62:	f8c7 31ac 	str.w	r3, [r7, #428]	; 0x1ac
  return result;
 8001a66:	f8d7 31ac 	ldr.w	r3, [r7, #428]	; 0x1ac
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001a6a:	fab3 f383 	clz	r3, r3
 8001a6e:	b2db      	uxtb	r3, r3
 8001a70:	095b      	lsrs	r3, r3, #5
 8001a72:	b2db      	uxtb	r3, r3
 8001a74:	f043 0301 	orr.w	r3, r3, #1
 8001a78:	b2db      	uxtb	r3, r3
 8001a7a:	2b01      	cmp	r3, #1
 8001a7c:	d102      	bne.n	8001a84 <HAL_RCC_OscConfig+0x2cc>
 8001a7e:	4b1a      	ldr	r3, [pc, #104]	; (8001ae8 <HAL_RCC_OscConfig+0x330>)
 8001a80:	681b      	ldr	r3, [r3, #0]
 8001a82:	e015      	b.n	8001ab0 <HAL_RCC_OscConfig+0x2f8>
 8001a84:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8001a88:	f8c7 31a8 	str.w	r3, [r7, #424]	; 0x1a8
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001a8c:	f8d7 31a8 	ldr.w	r3, [r7, #424]	; 0x1a8
 8001a90:	fa93 f3a3 	rbit	r3, r3
 8001a94:	f8c7 31a4 	str.w	r3, [r7, #420]	; 0x1a4
 8001a98:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8001a9c:	f8c7 31a0 	str.w	r3, [r7, #416]	; 0x1a0
 8001aa0:	f8d7 31a0 	ldr.w	r3, [r7, #416]	; 0x1a0
 8001aa4:	fa93 f3a3 	rbit	r3, r3
 8001aa8:	f8c7 319c 	str.w	r3, [r7, #412]	; 0x19c
 8001aac:	4b0e      	ldr	r3, [pc, #56]	; (8001ae8 <HAL_RCC_OscConfig+0x330>)
 8001aae:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001ab0:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8001ab4:	f8c7 2198 	str.w	r2, [r7, #408]	; 0x198
 8001ab8:	f8d7 2198 	ldr.w	r2, [r7, #408]	; 0x198
 8001abc:	fa92 f2a2 	rbit	r2, r2
 8001ac0:	f8c7 2194 	str.w	r2, [r7, #404]	; 0x194
  return result;
 8001ac4:	f8d7 2194 	ldr.w	r2, [r7, #404]	; 0x194
 8001ac8:	fab2 f282 	clz	r2, r2
 8001acc:	b2d2      	uxtb	r2, r2
 8001ace:	f042 0220 	orr.w	r2, r2, #32
 8001ad2:	b2d2      	uxtb	r2, r2
 8001ad4:	f002 021f 	and.w	r2, r2, #31
 8001ad8:	2101      	movs	r1, #1
 8001ada:	fa01 f202 	lsl.w	r2, r1, r2
 8001ade:	4013      	ands	r3, r2
 8001ae0:	2b00      	cmp	r3, #0
 8001ae2:	d1ab      	bne.n	8001a3c <HAL_RCC_OscConfig+0x284>
 8001ae4:	e003      	b.n	8001aee <HAL_RCC_OscConfig+0x336>
 8001ae6:	bf00      	nop
 8001ae8:	40021000 	.word	0x40021000
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001aec:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001aee:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001af2:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8001af6:	681b      	ldr	r3, [r3, #0]
 8001af8:	681b      	ldr	r3, [r3, #0]
 8001afa:	f003 0302 	and.w	r3, r3, #2
 8001afe:	2b00      	cmp	r3, #0
 8001b00:	f000 817d 	beq.w	8001dfe <HAL_RCC_OscConfig+0x646>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
    
    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */ 
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI) 
 8001b04:	4ba6      	ldr	r3, [pc, #664]	; (8001da0 <HAL_RCC_OscConfig+0x5e8>)
 8001b06:	685b      	ldr	r3, [r3, #4]
 8001b08:	f003 030c 	and.w	r3, r3, #12
 8001b0c:	2b00      	cmp	r3, #0
 8001b0e:	d00b      	beq.n	8001b28 <HAL_RCC_OscConfig+0x370>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI)))
 8001b10:	4ba3      	ldr	r3, [pc, #652]	; (8001da0 <HAL_RCC_OscConfig+0x5e8>)
 8001b12:	685b      	ldr	r3, [r3, #4]
 8001b14:	f003 030c 	and.w	r3, r3, #12
 8001b18:	2b08      	cmp	r3, #8
 8001b1a:	d172      	bne.n	8001c02 <HAL_RCC_OscConfig+0x44a>
 8001b1c:	4ba0      	ldr	r3, [pc, #640]	; (8001da0 <HAL_RCC_OscConfig+0x5e8>)
 8001b1e:	685b      	ldr	r3, [r3, #4]
 8001b20:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001b24:	2b00      	cmp	r3, #0
 8001b26:	d16c      	bne.n	8001c02 <HAL_RCC_OscConfig+0x44a>
 8001b28:	2302      	movs	r3, #2
 8001b2a:	f8c7 3190 	str.w	r3, [r7, #400]	; 0x190
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001b2e:	f8d7 3190 	ldr.w	r3, [r7, #400]	; 0x190
 8001b32:	fa93 f3a3 	rbit	r3, r3
 8001b36:	f8c7 318c 	str.w	r3, [r7, #396]	; 0x18c
  return result;
 8001b3a:	f8d7 318c 	ldr.w	r3, [r7, #396]	; 0x18c
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001b3e:	fab3 f383 	clz	r3, r3
 8001b42:	b2db      	uxtb	r3, r3
 8001b44:	095b      	lsrs	r3, r3, #5
 8001b46:	b2db      	uxtb	r3, r3
 8001b48:	f043 0301 	orr.w	r3, r3, #1
 8001b4c:	b2db      	uxtb	r3, r3
 8001b4e:	2b01      	cmp	r3, #1
 8001b50:	d102      	bne.n	8001b58 <HAL_RCC_OscConfig+0x3a0>
 8001b52:	4b93      	ldr	r3, [pc, #588]	; (8001da0 <HAL_RCC_OscConfig+0x5e8>)
 8001b54:	681b      	ldr	r3, [r3, #0]
 8001b56:	e013      	b.n	8001b80 <HAL_RCC_OscConfig+0x3c8>
 8001b58:	2302      	movs	r3, #2
 8001b5a:	f8c7 3188 	str.w	r3, [r7, #392]	; 0x188
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001b5e:	f8d7 3188 	ldr.w	r3, [r7, #392]	; 0x188
 8001b62:	fa93 f3a3 	rbit	r3, r3
 8001b66:	f8c7 3184 	str.w	r3, [r7, #388]	; 0x184
 8001b6a:	2302      	movs	r3, #2
 8001b6c:	f8c7 3180 	str.w	r3, [r7, #384]	; 0x180
 8001b70:	f8d7 3180 	ldr.w	r3, [r7, #384]	; 0x180
 8001b74:	fa93 f3a3 	rbit	r3, r3
 8001b78:	f8c7 317c 	str.w	r3, [r7, #380]	; 0x17c
 8001b7c:	4b88      	ldr	r3, [pc, #544]	; (8001da0 <HAL_RCC_OscConfig+0x5e8>)
 8001b7e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001b80:	2202      	movs	r2, #2
 8001b82:	f8c7 2178 	str.w	r2, [r7, #376]	; 0x178
 8001b86:	f8d7 2178 	ldr.w	r2, [r7, #376]	; 0x178
 8001b8a:	fa92 f2a2 	rbit	r2, r2
 8001b8e:	f8c7 2174 	str.w	r2, [r7, #372]	; 0x174
  return result;
 8001b92:	f8d7 2174 	ldr.w	r2, [r7, #372]	; 0x174
 8001b96:	fab2 f282 	clz	r2, r2
 8001b9a:	b2d2      	uxtb	r2, r2
 8001b9c:	f042 0220 	orr.w	r2, r2, #32
 8001ba0:	b2d2      	uxtb	r2, r2
 8001ba2:	f002 021f 	and.w	r2, r2, #31
 8001ba6:	2101      	movs	r1, #1
 8001ba8:	fa01 f202 	lsl.w	r2, r1, r2
 8001bac:	4013      	ands	r3, r2
 8001bae:	2b00      	cmp	r3, #0
 8001bb0:	d00a      	beq.n	8001bc8 <HAL_RCC_OscConfig+0x410>
 8001bb2:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001bb6:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8001bba:	681b      	ldr	r3, [r3, #0]
 8001bbc:	691b      	ldr	r3, [r3, #16]
 8001bbe:	2b01      	cmp	r3, #1
 8001bc0:	d002      	beq.n	8001bc8 <HAL_RCC_OscConfig+0x410>
      {
        return HAL_ERROR;
 8001bc2:	2301      	movs	r3, #1
 8001bc4:	f000 be2e 	b.w	8002824 <HAL_RCC_OscConfig+0x106c>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001bc8:	4b75      	ldr	r3, [pc, #468]	; (8001da0 <HAL_RCC_OscConfig+0x5e8>)
 8001bca:	681b      	ldr	r3, [r3, #0]
 8001bcc:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001bd0:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001bd4:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8001bd8:	681b      	ldr	r3, [r3, #0]
 8001bda:	695b      	ldr	r3, [r3, #20]
 8001bdc:	21f8      	movs	r1, #248	; 0xf8
 8001bde:	f8c7 1170 	str.w	r1, [r7, #368]	; 0x170
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001be2:	f8d7 1170 	ldr.w	r1, [r7, #368]	; 0x170
 8001be6:	fa91 f1a1 	rbit	r1, r1
 8001bea:	f8c7 116c 	str.w	r1, [r7, #364]	; 0x16c
  return result;
 8001bee:	f8d7 116c 	ldr.w	r1, [r7, #364]	; 0x16c
 8001bf2:	fab1 f181 	clz	r1, r1
 8001bf6:	b2c9      	uxtb	r1, r1
 8001bf8:	408b      	lsls	r3, r1
 8001bfa:	4969      	ldr	r1, [pc, #420]	; (8001da0 <HAL_RCC_OscConfig+0x5e8>)
 8001bfc:	4313      	orrs	r3, r2
 8001bfe:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001c00:	e0fd      	b.n	8001dfe <HAL_RCC_OscConfig+0x646>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8001c02:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001c06:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8001c0a:	681b      	ldr	r3, [r3, #0]
 8001c0c:	691b      	ldr	r3, [r3, #16]
 8001c0e:	2b00      	cmp	r3, #0
 8001c10:	f000 8088 	beq.w	8001d24 <HAL_RCC_OscConfig+0x56c>
 8001c14:	2301      	movs	r3, #1
 8001c16:	f8c7 3168 	str.w	r3, [r7, #360]	; 0x168
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001c1a:	f8d7 3168 	ldr.w	r3, [r7, #360]	; 0x168
 8001c1e:	fa93 f3a3 	rbit	r3, r3
 8001c22:	f8c7 3164 	str.w	r3, [r7, #356]	; 0x164
  return result;
 8001c26:	f8d7 3164 	ldr.w	r3, [r7, #356]	; 0x164
      {
       /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001c2a:	fab3 f383 	clz	r3, r3
 8001c2e:	b2db      	uxtb	r3, r3
 8001c30:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8001c34:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8001c38:	009b      	lsls	r3, r3, #2
 8001c3a:	461a      	mov	r2, r3
 8001c3c:	2301      	movs	r3, #1
 8001c3e:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001c40:	f7ff f84c 	bl	8000cdc <HAL_GetTick>
 8001c44:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001c48:	e00a      	b.n	8001c60 <HAL_RCC_OscConfig+0x4a8>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001c4a:	f7ff f847 	bl	8000cdc <HAL_GetTick>
 8001c4e:	4602      	mov	r2, r0
 8001c50:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8001c54:	1ad3      	subs	r3, r2, r3
 8001c56:	2b02      	cmp	r3, #2
 8001c58:	d902      	bls.n	8001c60 <HAL_RCC_OscConfig+0x4a8>
          {
            return HAL_TIMEOUT;
 8001c5a:	2303      	movs	r3, #3
 8001c5c:	f000 bde2 	b.w	8002824 <HAL_RCC_OscConfig+0x106c>
 8001c60:	2302      	movs	r3, #2
 8001c62:	f8c7 3160 	str.w	r3, [r7, #352]	; 0x160
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001c66:	f8d7 3160 	ldr.w	r3, [r7, #352]	; 0x160
 8001c6a:	fa93 f3a3 	rbit	r3, r3
 8001c6e:	f8c7 315c 	str.w	r3, [r7, #348]	; 0x15c
  return result;
 8001c72:	f8d7 315c 	ldr.w	r3, [r7, #348]	; 0x15c
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001c76:	fab3 f383 	clz	r3, r3
 8001c7a:	b2db      	uxtb	r3, r3
 8001c7c:	095b      	lsrs	r3, r3, #5
 8001c7e:	b2db      	uxtb	r3, r3
 8001c80:	f043 0301 	orr.w	r3, r3, #1
 8001c84:	b2db      	uxtb	r3, r3
 8001c86:	2b01      	cmp	r3, #1
 8001c88:	d102      	bne.n	8001c90 <HAL_RCC_OscConfig+0x4d8>
 8001c8a:	4b45      	ldr	r3, [pc, #276]	; (8001da0 <HAL_RCC_OscConfig+0x5e8>)
 8001c8c:	681b      	ldr	r3, [r3, #0]
 8001c8e:	e013      	b.n	8001cb8 <HAL_RCC_OscConfig+0x500>
 8001c90:	2302      	movs	r3, #2
 8001c92:	f8c7 3158 	str.w	r3, [r7, #344]	; 0x158
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001c96:	f8d7 3158 	ldr.w	r3, [r7, #344]	; 0x158
 8001c9a:	fa93 f3a3 	rbit	r3, r3
 8001c9e:	f8c7 3154 	str.w	r3, [r7, #340]	; 0x154
 8001ca2:	2302      	movs	r3, #2
 8001ca4:	f8c7 3150 	str.w	r3, [r7, #336]	; 0x150
 8001ca8:	f8d7 3150 	ldr.w	r3, [r7, #336]	; 0x150
 8001cac:	fa93 f3a3 	rbit	r3, r3
 8001cb0:	f8c7 314c 	str.w	r3, [r7, #332]	; 0x14c
 8001cb4:	4b3a      	ldr	r3, [pc, #232]	; (8001da0 <HAL_RCC_OscConfig+0x5e8>)
 8001cb6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001cb8:	2202      	movs	r2, #2
 8001cba:	f8c7 2148 	str.w	r2, [r7, #328]	; 0x148
 8001cbe:	f8d7 2148 	ldr.w	r2, [r7, #328]	; 0x148
 8001cc2:	fa92 f2a2 	rbit	r2, r2
 8001cc6:	f8c7 2144 	str.w	r2, [r7, #324]	; 0x144
  return result;
 8001cca:	f8d7 2144 	ldr.w	r2, [r7, #324]	; 0x144
 8001cce:	fab2 f282 	clz	r2, r2
 8001cd2:	b2d2      	uxtb	r2, r2
 8001cd4:	f042 0220 	orr.w	r2, r2, #32
 8001cd8:	b2d2      	uxtb	r2, r2
 8001cda:	f002 021f 	and.w	r2, r2, #31
 8001cde:	2101      	movs	r1, #1
 8001ce0:	fa01 f202 	lsl.w	r2, r1, r2
 8001ce4:	4013      	ands	r3, r2
 8001ce6:	2b00      	cmp	r3, #0
 8001ce8:	d0af      	beq.n	8001c4a <HAL_RCC_OscConfig+0x492>
          }
        }
                
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001cea:	4b2d      	ldr	r3, [pc, #180]	; (8001da0 <HAL_RCC_OscConfig+0x5e8>)
 8001cec:	681b      	ldr	r3, [r3, #0]
 8001cee:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001cf2:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001cf6:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8001cfa:	681b      	ldr	r3, [r3, #0]
 8001cfc:	695b      	ldr	r3, [r3, #20]
 8001cfe:	21f8      	movs	r1, #248	; 0xf8
 8001d00:	f8c7 1140 	str.w	r1, [r7, #320]	; 0x140
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001d04:	f8d7 1140 	ldr.w	r1, [r7, #320]	; 0x140
 8001d08:	fa91 f1a1 	rbit	r1, r1
 8001d0c:	f8c7 113c 	str.w	r1, [r7, #316]	; 0x13c
  return result;
 8001d10:	f8d7 113c 	ldr.w	r1, [r7, #316]	; 0x13c
 8001d14:	fab1 f181 	clz	r1, r1
 8001d18:	b2c9      	uxtb	r1, r1
 8001d1a:	408b      	lsls	r3, r1
 8001d1c:	4920      	ldr	r1, [pc, #128]	; (8001da0 <HAL_RCC_OscConfig+0x5e8>)
 8001d1e:	4313      	orrs	r3, r2
 8001d20:	600b      	str	r3, [r1, #0]
 8001d22:	e06c      	b.n	8001dfe <HAL_RCC_OscConfig+0x646>
 8001d24:	2301      	movs	r3, #1
 8001d26:	f8c7 3138 	str.w	r3, [r7, #312]	; 0x138
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001d2a:	f8d7 3138 	ldr.w	r3, [r7, #312]	; 0x138
 8001d2e:	fa93 f3a3 	rbit	r3, r3
 8001d32:	f8c7 3134 	str.w	r3, [r7, #308]	; 0x134
  return result;
 8001d36:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001d3a:	fab3 f383 	clz	r3, r3
 8001d3e:	b2db      	uxtb	r3, r3
 8001d40:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8001d44:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8001d48:	009b      	lsls	r3, r3, #2
 8001d4a:	461a      	mov	r2, r3
 8001d4c:	2300      	movs	r3, #0
 8001d4e:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001d50:	f7fe ffc4 	bl	8000cdc <HAL_GetTick>
 8001d54:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001d58:	e00a      	b.n	8001d70 <HAL_RCC_OscConfig+0x5b8>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001d5a:	f7fe ffbf 	bl	8000cdc <HAL_GetTick>
 8001d5e:	4602      	mov	r2, r0
 8001d60:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8001d64:	1ad3      	subs	r3, r2, r3
 8001d66:	2b02      	cmp	r3, #2
 8001d68:	d902      	bls.n	8001d70 <HAL_RCC_OscConfig+0x5b8>
          {
            return HAL_TIMEOUT;
 8001d6a:	2303      	movs	r3, #3
 8001d6c:	f000 bd5a 	b.w	8002824 <HAL_RCC_OscConfig+0x106c>
 8001d70:	2302      	movs	r3, #2
 8001d72:	f8c7 3130 	str.w	r3, [r7, #304]	; 0x130
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001d76:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
 8001d7a:	fa93 f3a3 	rbit	r3, r3
 8001d7e:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
  return result;
 8001d82:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001d86:	fab3 f383 	clz	r3, r3
 8001d8a:	b2db      	uxtb	r3, r3
 8001d8c:	095b      	lsrs	r3, r3, #5
 8001d8e:	b2db      	uxtb	r3, r3
 8001d90:	f043 0301 	orr.w	r3, r3, #1
 8001d94:	b2db      	uxtb	r3, r3
 8001d96:	2b01      	cmp	r3, #1
 8001d98:	d104      	bne.n	8001da4 <HAL_RCC_OscConfig+0x5ec>
 8001d9a:	4b01      	ldr	r3, [pc, #4]	; (8001da0 <HAL_RCC_OscConfig+0x5e8>)
 8001d9c:	681b      	ldr	r3, [r3, #0]
 8001d9e:	e015      	b.n	8001dcc <HAL_RCC_OscConfig+0x614>
 8001da0:	40021000 	.word	0x40021000
 8001da4:	2302      	movs	r3, #2
 8001da6:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001daa:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8001dae:	fa93 f3a3 	rbit	r3, r3
 8001db2:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
 8001db6:	2302      	movs	r3, #2
 8001db8:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
 8001dbc:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 8001dc0:	fa93 f3a3 	rbit	r3, r3
 8001dc4:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
 8001dc8:	4bc8      	ldr	r3, [pc, #800]	; (80020ec <HAL_RCC_OscConfig+0x934>)
 8001dca:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001dcc:	2202      	movs	r2, #2
 8001dce:	f8c7 2118 	str.w	r2, [r7, #280]	; 0x118
 8001dd2:	f8d7 2118 	ldr.w	r2, [r7, #280]	; 0x118
 8001dd6:	fa92 f2a2 	rbit	r2, r2
 8001dda:	f8c7 2114 	str.w	r2, [r7, #276]	; 0x114
  return result;
 8001dde:	f8d7 2114 	ldr.w	r2, [r7, #276]	; 0x114
 8001de2:	fab2 f282 	clz	r2, r2
 8001de6:	b2d2      	uxtb	r2, r2
 8001de8:	f042 0220 	orr.w	r2, r2, #32
 8001dec:	b2d2      	uxtb	r2, r2
 8001dee:	f002 021f 	and.w	r2, r2, #31
 8001df2:	2101      	movs	r1, #1
 8001df4:	fa01 f202 	lsl.w	r2, r1, r2
 8001df8:	4013      	ands	r3, r2
 8001dfa:	2b00      	cmp	r3, #0
 8001dfc:	d1ad      	bne.n	8001d5a <HAL_RCC_OscConfig+0x5a2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001dfe:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001e02:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8001e06:	681b      	ldr	r3, [r3, #0]
 8001e08:	681b      	ldr	r3, [r3, #0]
 8001e0a:	f003 0308 	and.w	r3, r3, #8
 8001e0e:	2b00      	cmp	r3, #0
 8001e10:	f000 8110 	beq.w	8002034 <HAL_RCC_OscConfig+0x87c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));
    
    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8001e14:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001e18:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8001e1c:	681b      	ldr	r3, [r3, #0]
 8001e1e:	699b      	ldr	r3, [r3, #24]
 8001e20:	2b00      	cmp	r3, #0
 8001e22:	d079      	beq.n	8001f18 <HAL_RCC_OscConfig+0x760>
 8001e24:	2301      	movs	r3, #1
 8001e26:	f8c7 3110 	str.w	r3, [r7, #272]	; 0x110
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001e2a:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
 8001e2e:	fa93 f3a3 	rbit	r3, r3
 8001e32:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
  return result;
 8001e36:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001e3a:	fab3 f383 	clz	r3, r3
 8001e3e:	b2db      	uxtb	r3, r3
 8001e40:	461a      	mov	r2, r3
 8001e42:	4bab      	ldr	r3, [pc, #684]	; (80020f0 <HAL_RCC_OscConfig+0x938>)
 8001e44:	4413      	add	r3, r2
 8001e46:	009b      	lsls	r3, r3, #2
 8001e48:	461a      	mov	r2, r3
 8001e4a:	2301      	movs	r3, #1
 8001e4c:	6013      	str	r3, [r2, #0]
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001e4e:	f7fe ff45 	bl	8000cdc <HAL_GetTick>
 8001e52:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
      
      /* Wait till LSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001e56:	e00a      	b.n	8001e6e <HAL_RCC_OscConfig+0x6b6>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8001e58:	f7fe ff40 	bl	8000cdc <HAL_GetTick>
 8001e5c:	4602      	mov	r2, r0
 8001e5e:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8001e62:	1ad3      	subs	r3, r2, r3
 8001e64:	2b02      	cmp	r3, #2
 8001e66:	d902      	bls.n	8001e6e <HAL_RCC_OscConfig+0x6b6>
        {
          return HAL_TIMEOUT;
 8001e68:	2303      	movs	r3, #3
 8001e6a:	f000 bcdb 	b.w	8002824 <HAL_RCC_OscConfig+0x106c>
 8001e6e:	2302      	movs	r3, #2
 8001e70:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001e74:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 8001e78:	fa93 f3a3 	rbit	r3, r3
 8001e7c:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
 8001e80:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001e84:	f5a3 7380 	sub.w	r3, r3, #256	; 0x100
 8001e88:	2202      	movs	r2, #2
 8001e8a:	601a      	str	r2, [r3, #0]
 8001e8c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001e90:	f5a3 7380 	sub.w	r3, r3, #256	; 0x100
 8001e94:	681b      	ldr	r3, [r3, #0]
 8001e96:	fa93 f2a3 	rbit	r2, r3
 8001e9a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001e9e:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8001ea2:	601a      	str	r2, [r3, #0]
 8001ea4:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001ea8:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8001eac:	2202      	movs	r2, #2
 8001eae:	601a      	str	r2, [r3, #0]
 8001eb0:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001eb4:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8001eb8:	681b      	ldr	r3, [r3, #0]
 8001eba:	fa93 f2a3 	rbit	r2, r3
 8001ebe:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001ec2:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 8001ec6:	601a      	str	r2, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001ec8:	4b88      	ldr	r3, [pc, #544]	; (80020ec <HAL_RCC_OscConfig+0x934>)
 8001eca:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8001ecc:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001ed0:	f5a3 7388 	sub.w	r3, r3, #272	; 0x110
 8001ed4:	2102      	movs	r1, #2
 8001ed6:	6019      	str	r1, [r3, #0]
 8001ed8:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001edc:	f5a3 7388 	sub.w	r3, r3, #272	; 0x110
 8001ee0:	681b      	ldr	r3, [r3, #0]
 8001ee2:	fa93 f1a3 	rbit	r1, r3
 8001ee6:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001eea:	f5a3 738a 	sub.w	r3, r3, #276	; 0x114
 8001eee:	6019      	str	r1, [r3, #0]
  return result;
 8001ef0:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001ef4:	f5a3 738a 	sub.w	r3, r3, #276	; 0x114
 8001ef8:	681b      	ldr	r3, [r3, #0]
 8001efa:	fab3 f383 	clz	r3, r3
 8001efe:	b2db      	uxtb	r3, r3
 8001f00:	f043 0360 	orr.w	r3, r3, #96	; 0x60
 8001f04:	b2db      	uxtb	r3, r3
 8001f06:	f003 031f 	and.w	r3, r3, #31
 8001f0a:	2101      	movs	r1, #1
 8001f0c:	fa01 f303 	lsl.w	r3, r1, r3
 8001f10:	4013      	ands	r3, r2
 8001f12:	2b00      	cmp	r3, #0
 8001f14:	d0a0      	beq.n	8001e58 <HAL_RCC_OscConfig+0x6a0>
 8001f16:	e08d      	b.n	8002034 <HAL_RCC_OscConfig+0x87c>
 8001f18:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001f1c:	f5a3 738c 	sub.w	r3, r3, #280	; 0x118
 8001f20:	2201      	movs	r2, #1
 8001f22:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001f24:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001f28:	f5a3 738c 	sub.w	r3, r3, #280	; 0x118
 8001f2c:	681b      	ldr	r3, [r3, #0]
 8001f2e:	fa93 f2a3 	rbit	r2, r3
 8001f32:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001f36:	f5a3 738e 	sub.w	r3, r3, #284	; 0x11c
 8001f3a:	601a      	str	r2, [r3, #0]
  return result;
 8001f3c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001f40:	f5a3 738e 	sub.w	r3, r3, #284	; 0x11c
 8001f44:	681b      	ldr	r3, [r3, #0]
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001f46:	fab3 f383 	clz	r3, r3
 8001f4a:	b2db      	uxtb	r3, r3
 8001f4c:	461a      	mov	r2, r3
 8001f4e:	4b68      	ldr	r3, [pc, #416]	; (80020f0 <HAL_RCC_OscConfig+0x938>)
 8001f50:	4413      	add	r3, r2
 8001f52:	009b      	lsls	r3, r3, #2
 8001f54:	461a      	mov	r2, r3
 8001f56:	2300      	movs	r3, #0
 8001f58:	6013      	str	r3, [r2, #0]
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001f5a:	f7fe febf 	bl	8000cdc <HAL_GetTick>
 8001f5e:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
      
      /* Wait till LSI is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001f62:	e00a      	b.n	8001f7a <HAL_RCC_OscConfig+0x7c2>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8001f64:	f7fe feba 	bl	8000cdc <HAL_GetTick>
 8001f68:	4602      	mov	r2, r0
 8001f6a:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8001f6e:	1ad3      	subs	r3, r2, r3
 8001f70:	2b02      	cmp	r3, #2
 8001f72:	d902      	bls.n	8001f7a <HAL_RCC_OscConfig+0x7c2>
        {
          return HAL_TIMEOUT;
 8001f74:	2303      	movs	r3, #3
 8001f76:	f000 bc55 	b.w	8002824 <HAL_RCC_OscConfig+0x106c>
 8001f7a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001f7e:	f5a3 7390 	sub.w	r3, r3, #288	; 0x120
 8001f82:	2202      	movs	r2, #2
 8001f84:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001f86:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001f8a:	f5a3 7390 	sub.w	r3, r3, #288	; 0x120
 8001f8e:	681b      	ldr	r3, [r3, #0]
 8001f90:	fa93 f2a3 	rbit	r2, r3
 8001f94:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001f98:	f5a3 7392 	sub.w	r3, r3, #292	; 0x124
 8001f9c:	601a      	str	r2, [r3, #0]
 8001f9e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001fa2:	f5a3 7394 	sub.w	r3, r3, #296	; 0x128
 8001fa6:	2202      	movs	r2, #2
 8001fa8:	601a      	str	r2, [r3, #0]
 8001faa:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001fae:	f5a3 7394 	sub.w	r3, r3, #296	; 0x128
 8001fb2:	681b      	ldr	r3, [r3, #0]
 8001fb4:	fa93 f2a3 	rbit	r2, r3
 8001fb8:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001fbc:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8001fc0:	601a      	str	r2, [r3, #0]
 8001fc2:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001fc6:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8001fca:	2202      	movs	r2, #2
 8001fcc:	601a      	str	r2, [r3, #0]
 8001fce:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001fd2:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8001fd6:	681b      	ldr	r3, [r3, #0]
 8001fd8:	fa93 f2a3 	rbit	r2, r3
 8001fdc:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001fe0:	f5a3 739a 	sub.w	r3, r3, #308	; 0x134
 8001fe4:	601a      	str	r2, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001fe6:	4b41      	ldr	r3, [pc, #260]	; (80020ec <HAL_RCC_OscConfig+0x934>)
 8001fe8:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8001fea:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001fee:	f5a3 739c 	sub.w	r3, r3, #312	; 0x138
 8001ff2:	2102      	movs	r1, #2
 8001ff4:	6019      	str	r1, [r3, #0]
 8001ff6:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001ffa:	f5a3 739c 	sub.w	r3, r3, #312	; 0x138
 8001ffe:	681b      	ldr	r3, [r3, #0]
 8002000:	fa93 f1a3 	rbit	r1, r3
 8002004:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002008:	f5a3 739e 	sub.w	r3, r3, #316	; 0x13c
 800200c:	6019      	str	r1, [r3, #0]
  return result;
 800200e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002012:	f5a3 739e 	sub.w	r3, r3, #316	; 0x13c
 8002016:	681b      	ldr	r3, [r3, #0]
 8002018:	fab3 f383 	clz	r3, r3
 800201c:	b2db      	uxtb	r3, r3
 800201e:	f043 0360 	orr.w	r3, r3, #96	; 0x60
 8002022:	b2db      	uxtb	r3, r3
 8002024:	f003 031f 	and.w	r3, r3, #31
 8002028:	2101      	movs	r1, #1
 800202a:	fa01 f303 	lsl.w	r3, r1, r3
 800202e:	4013      	ands	r3, r2
 8002030:	2b00      	cmp	r3, #0
 8002032:	d197      	bne.n	8001f64 <HAL_RCC_OscConfig+0x7ac>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002034:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002038:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 800203c:	681b      	ldr	r3, [r3, #0]
 800203e:	681b      	ldr	r3, [r3, #0]
 8002040:	f003 0304 	and.w	r3, r3, #4
 8002044:	2b00      	cmp	r3, #0
 8002046:	f000 81a1 	beq.w	800238c <HAL_RCC_OscConfig+0xbd4>
  {
    FlagStatus       pwrclkchanged = RESET;
 800204a:	2300      	movs	r3, #0
 800204c:	f887 31ff 	strb.w	r3, [r7, #511]	; 0x1ff
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002050:	4b26      	ldr	r3, [pc, #152]	; (80020ec <HAL_RCC_OscConfig+0x934>)
 8002052:	69db      	ldr	r3, [r3, #28]
 8002054:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002058:	2b00      	cmp	r3, #0
 800205a:	d116      	bne.n	800208a <HAL_RCC_OscConfig+0x8d2>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800205c:	4b23      	ldr	r3, [pc, #140]	; (80020ec <HAL_RCC_OscConfig+0x934>)
 800205e:	69db      	ldr	r3, [r3, #28]
 8002060:	4a22      	ldr	r2, [pc, #136]	; (80020ec <HAL_RCC_OscConfig+0x934>)
 8002062:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002066:	61d3      	str	r3, [r2, #28]
 8002068:	4b20      	ldr	r3, [pc, #128]	; (80020ec <HAL_RCC_OscConfig+0x934>)
 800206a:	69db      	ldr	r3, [r3, #28]
 800206c:	f003 5280 	and.w	r2, r3, #268435456	; 0x10000000
 8002070:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002074:	f5a3 73fc 	sub.w	r3, r3, #504	; 0x1f8
 8002078:	601a      	str	r2, [r3, #0]
 800207a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800207e:	f5a3 73fc 	sub.w	r3, r3, #504	; 0x1f8
 8002082:	681b      	ldr	r3, [r3, #0]
      pwrclkchanged = SET;
 8002084:	2301      	movs	r3, #1
 8002086:	f887 31ff 	strb.w	r3, [r7, #511]	; 0x1ff
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800208a:	4b1a      	ldr	r3, [pc, #104]	; (80020f4 <HAL_RCC_OscConfig+0x93c>)
 800208c:	681b      	ldr	r3, [r3, #0]
 800208e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002092:	2b00      	cmp	r3, #0
 8002094:	d11a      	bne.n	80020cc <HAL_RCC_OscConfig+0x914>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8002096:	4b17      	ldr	r3, [pc, #92]	; (80020f4 <HAL_RCC_OscConfig+0x93c>)
 8002098:	681b      	ldr	r3, [r3, #0]
 800209a:	4a16      	ldr	r2, [pc, #88]	; (80020f4 <HAL_RCC_OscConfig+0x93c>)
 800209c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80020a0:	6013      	str	r3, [r2, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80020a2:	f7fe fe1b 	bl	8000cdc <HAL_GetTick>
 80020a6:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80020aa:	e009      	b.n	80020c0 <HAL_RCC_OscConfig+0x908>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80020ac:	f7fe fe16 	bl	8000cdc <HAL_GetTick>
 80020b0:	4602      	mov	r2, r0
 80020b2:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 80020b6:	1ad3      	subs	r3, r2, r3
 80020b8:	2b64      	cmp	r3, #100	; 0x64
 80020ba:	d901      	bls.n	80020c0 <HAL_RCC_OscConfig+0x908>
        {
          return HAL_TIMEOUT;
 80020bc:	2303      	movs	r3, #3
 80020be:	e3b1      	b.n	8002824 <HAL_RCC_OscConfig+0x106c>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80020c0:	4b0c      	ldr	r3, [pc, #48]	; (80020f4 <HAL_RCC_OscConfig+0x93c>)
 80020c2:	681b      	ldr	r3, [r3, #0]
 80020c4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80020c8:	2b00      	cmp	r3, #0
 80020ca:	d0ef      	beq.n	80020ac <HAL_RCC_OscConfig+0x8f4>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80020cc:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80020d0:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 80020d4:	681b      	ldr	r3, [r3, #0]
 80020d6:	68db      	ldr	r3, [r3, #12]
 80020d8:	2b01      	cmp	r3, #1
 80020da:	d10d      	bne.n	80020f8 <HAL_RCC_OscConfig+0x940>
 80020dc:	4b03      	ldr	r3, [pc, #12]	; (80020ec <HAL_RCC_OscConfig+0x934>)
 80020de:	6a1b      	ldr	r3, [r3, #32]
 80020e0:	4a02      	ldr	r2, [pc, #8]	; (80020ec <HAL_RCC_OscConfig+0x934>)
 80020e2:	f043 0301 	orr.w	r3, r3, #1
 80020e6:	6213      	str	r3, [r2, #32]
 80020e8:	e03c      	b.n	8002164 <HAL_RCC_OscConfig+0x9ac>
 80020ea:	bf00      	nop
 80020ec:	40021000 	.word	0x40021000
 80020f0:	10908120 	.word	0x10908120
 80020f4:	40007000 	.word	0x40007000
 80020f8:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80020fc:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8002100:	681b      	ldr	r3, [r3, #0]
 8002102:	68db      	ldr	r3, [r3, #12]
 8002104:	2b00      	cmp	r3, #0
 8002106:	d10c      	bne.n	8002122 <HAL_RCC_OscConfig+0x96a>
 8002108:	4bc1      	ldr	r3, [pc, #772]	; (8002410 <HAL_RCC_OscConfig+0xc58>)
 800210a:	6a1b      	ldr	r3, [r3, #32]
 800210c:	4ac0      	ldr	r2, [pc, #768]	; (8002410 <HAL_RCC_OscConfig+0xc58>)
 800210e:	f023 0301 	bic.w	r3, r3, #1
 8002112:	6213      	str	r3, [r2, #32]
 8002114:	4bbe      	ldr	r3, [pc, #760]	; (8002410 <HAL_RCC_OscConfig+0xc58>)
 8002116:	6a1b      	ldr	r3, [r3, #32]
 8002118:	4abd      	ldr	r2, [pc, #756]	; (8002410 <HAL_RCC_OscConfig+0xc58>)
 800211a:	f023 0304 	bic.w	r3, r3, #4
 800211e:	6213      	str	r3, [r2, #32]
 8002120:	e020      	b.n	8002164 <HAL_RCC_OscConfig+0x9ac>
 8002122:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002126:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 800212a:	681b      	ldr	r3, [r3, #0]
 800212c:	68db      	ldr	r3, [r3, #12]
 800212e:	2b05      	cmp	r3, #5
 8002130:	d10c      	bne.n	800214c <HAL_RCC_OscConfig+0x994>
 8002132:	4bb7      	ldr	r3, [pc, #732]	; (8002410 <HAL_RCC_OscConfig+0xc58>)
 8002134:	6a1b      	ldr	r3, [r3, #32]
 8002136:	4ab6      	ldr	r2, [pc, #728]	; (8002410 <HAL_RCC_OscConfig+0xc58>)
 8002138:	f043 0304 	orr.w	r3, r3, #4
 800213c:	6213      	str	r3, [r2, #32]
 800213e:	4bb4      	ldr	r3, [pc, #720]	; (8002410 <HAL_RCC_OscConfig+0xc58>)
 8002140:	6a1b      	ldr	r3, [r3, #32]
 8002142:	4ab3      	ldr	r2, [pc, #716]	; (8002410 <HAL_RCC_OscConfig+0xc58>)
 8002144:	f043 0301 	orr.w	r3, r3, #1
 8002148:	6213      	str	r3, [r2, #32]
 800214a:	e00b      	b.n	8002164 <HAL_RCC_OscConfig+0x9ac>
 800214c:	4bb0      	ldr	r3, [pc, #704]	; (8002410 <HAL_RCC_OscConfig+0xc58>)
 800214e:	6a1b      	ldr	r3, [r3, #32]
 8002150:	4aaf      	ldr	r2, [pc, #700]	; (8002410 <HAL_RCC_OscConfig+0xc58>)
 8002152:	f023 0301 	bic.w	r3, r3, #1
 8002156:	6213      	str	r3, [r2, #32]
 8002158:	4bad      	ldr	r3, [pc, #692]	; (8002410 <HAL_RCC_OscConfig+0xc58>)
 800215a:	6a1b      	ldr	r3, [r3, #32]
 800215c:	4aac      	ldr	r2, [pc, #688]	; (8002410 <HAL_RCC_OscConfig+0xc58>)
 800215e:	f023 0304 	bic.w	r3, r3, #4
 8002162:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8002164:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002168:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 800216c:	681b      	ldr	r3, [r3, #0]
 800216e:	68db      	ldr	r3, [r3, #12]
 8002170:	2b00      	cmp	r3, #0
 8002172:	f000 8081 	beq.w	8002278 <HAL_RCC_OscConfig+0xac0>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002176:	f7fe fdb1 	bl	8000cdc <HAL_GetTick>
 800217a:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
      
      /* Wait till LSE is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800217e:	e00b      	b.n	8002198 <HAL_RCC_OscConfig+0x9e0>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002180:	f7fe fdac 	bl	8000cdc <HAL_GetTick>
 8002184:	4602      	mov	r2, r0
 8002186:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 800218a:	1ad3      	subs	r3, r2, r3
 800218c:	f241 3288 	movw	r2, #5000	; 0x1388
 8002190:	4293      	cmp	r3, r2
 8002192:	d901      	bls.n	8002198 <HAL_RCC_OscConfig+0x9e0>
        {
          return HAL_TIMEOUT;
 8002194:	2303      	movs	r3, #3
 8002196:	e345      	b.n	8002824 <HAL_RCC_OscConfig+0x106c>
 8002198:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800219c:	f5a3 73a0 	sub.w	r3, r3, #320	; 0x140
 80021a0:	2202      	movs	r2, #2
 80021a2:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80021a4:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80021a8:	f5a3 73a0 	sub.w	r3, r3, #320	; 0x140
 80021ac:	681b      	ldr	r3, [r3, #0]
 80021ae:	fa93 f2a3 	rbit	r2, r3
 80021b2:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80021b6:	f5a3 73a2 	sub.w	r3, r3, #324	; 0x144
 80021ba:	601a      	str	r2, [r3, #0]
 80021bc:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80021c0:	f5a3 73a4 	sub.w	r3, r3, #328	; 0x148
 80021c4:	2202      	movs	r2, #2
 80021c6:	601a      	str	r2, [r3, #0]
 80021c8:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80021cc:	f5a3 73a4 	sub.w	r3, r3, #328	; 0x148
 80021d0:	681b      	ldr	r3, [r3, #0]
 80021d2:	fa93 f2a3 	rbit	r2, r3
 80021d6:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80021da:	f5a3 73a6 	sub.w	r3, r3, #332	; 0x14c
 80021de:	601a      	str	r2, [r3, #0]
  return result;
 80021e0:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80021e4:	f5a3 73a6 	sub.w	r3, r3, #332	; 0x14c
 80021e8:	681b      	ldr	r3, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80021ea:	fab3 f383 	clz	r3, r3
 80021ee:	b2db      	uxtb	r3, r3
 80021f0:	095b      	lsrs	r3, r3, #5
 80021f2:	b2db      	uxtb	r3, r3
 80021f4:	f043 0302 	orr.w	r3, r3, #2
 80021f8:	b2db      	uxtb	r3, r3
 80021fa:	2b02      	cmp	r3, #2
 80021fc:	d102      	bne.n	8002204 <HAL_RCC_OscConfig+0xa4c>
 80021fe:	4b84      	ldr	r3, [pc, #528]	; (8002410 <HAL_RCC_OscConfig+0xc58>)
 8002200:	6a1b      	ldr	r3, [r3, #32]
 8002202:	e013      	b.n	800222c <HAL_RCC_OscConfig+0xa74>
 8002204:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002208:	f5a3 73a8 	sub.w	r3, r3, #336	; 0x150
 800220c:	2202      	movs	r2, #2
 800220e:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002210:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002214:	f5a3 73a8 	sub.w	r3, r3, #336	; 0x150
 8002218:	681b      	ldr	r3, [r3, #0]
 800221a:	fa93 f2a3 	rbit	r2, r3
 800221e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002222:	f5a3 73aa 	sub.w	r3, r3, #340	; 0x154
 8002226:	601a      	str	r2, [r3, #0]
 8002228:	4b79      	ldr	r3, [pc, #484]	; (8002410 <HAL_RCC_OscConfig+0xc58>)
 800222a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800222c:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8002230:	f5a2 72ac 	sub.w	r2, r2, #344	; 0x158
 8002234:	2102      	movs	r1, #2
 8002236:	6011      	str	r1, [r2, #0]
 8002238:	f507 7200 	add.w	r2, r7, #512	; 0x200
 800223c:	f5a2 72ac 	sub.w	r2, r2, #344	; 0x158
 8002240:	6812      	ldr	r2, [r2, #0]
 8002242:	fa92 f1a2 	rbit	r1, r2
 8002246:	f507 7200 	add.w	r2, r7, #512	; 0x200
 800224a:	f5a2 72ae 	sub.w	r2, r2, #348	; 0x15c
 800224e:	6011      	str	r1, [r2, #0]
  return result;
 8002250:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8002254:	f5a2 72ae 	sub.w	r2, r2, #348	; 0x15c
 8002258:	6812      	ldr	r2, [r2, #0]
 800225a:	fab2 f282 	clz	r2, r2
 800225e:	b2d2      	uxtb	r2, r2
 8002260:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8002264:	b2d2      	uxtb	r2, r2
 8002266:	f002 021f 	and.w	r2, r2, #31
 800226a:	2101      	movs	r1, #1
 800226c:	fa01 f202 	lsl.w	r2, r1, r2
 8002270:	4013      	ands	r3, r2
 8002272:	2b00      	cmp	r3, #0
 8002274:	d084      	beq.n	8002180 <HAL_RCC_OscConfig+0x9c8>
 8002276:	e07f      	b.n	8002378 <HAL_RCC_OscConfig+0xbc0>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002278:	f7fe fd30 	bl	8000cdc <HAL_GetTick>
 800227c:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
      
      /* Wait till LSE is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002280:	e00b      	b.n	800229a <HAL_RCC_OscConfig+0xae2>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002282:	f7fe fd2b 	bl	8000cdc <HAL_GetTick>
 8002286:	4602      	mov	r2, r0
 8002288:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 800228c:	1ad3      	subs	r3, r2, r3
 800228e:	f241 3288 	movw	r2, #5000	; 0x1388
 8002292:	4293      	cmp	r3, r2
 8002294:	d901      	bls.n	800229a <HAL_RCC_OscConfig+0xae2>
        {
          return HAL_TIMEOUT;
 8002296:	2303      	movs	r3, #3
 8002298:	e2c4      	b.n	8002824 <HAL_RCC_OscConfig+0x106c>
 800229a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800229e:	f5a3 73b0 	sub.w	r3, r3, #352	; 0x160
 80022a2:	2202      	movs	r2, #2
 80022a4:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80022a6:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80022aa:	f5a3 73b0 	sub.w	r3, r3, #352	; 0x160
 80022ae:	681b      	ldr	r3, [r3, #0]
 80022b0:	fa93 f2a3 	rbit	r2, r3
 80022b4:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80022b8:	f5a3 73b2 	sub.w	r3, r3, #356	; 0x164
 80022bc:	601a      	str	r2, [r3, #0]
 80022be:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80022c2:	f5a3 73b4 	sub.w	r3, r3, #360	; 0x168
 80022c6:	2202      	movs	r2, #2
 80022c8:	601a      	str	r2, [r3, #0]
 80022ca:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80022ce:	f5a3 73b4 	sub.w	r3, r3, #360	; 0x168
 80022d2:	681b      	ldr	r3, [r3, #0]
 80022d4:	fa93 f2a3 	rbit	r2, r3
 80022d8:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80022dc:	f5a3 73b6 	sub.w	r3, r3, #364	; 0x16c
 80022e0:	601a      	str	r2, [r3, #0]
  return result;
 80022e2:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80022e6:	f5a3 73b6 	sub.w	r3, r3, #364	; 0x16c
 80022ea:	681b      	ldr	r3, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80022ec:	fab3 f383 	clz	r3, r3
 80022f0:	b2db      	uxtb	r3, r3
 80022f2:	095b      	lsrs	r3, r3, #5
 80022f4:	b2db      	uxtb	r3, r3
 80022f6:	f043 0302 	orr.w	r3, r3, #2
 80022fa:	b2db      	uxtb	r3, r3
 80022fc:	2b02      	cmp	r3, #2
 80022fe:	d102      	bne.n	8002306 <HAL_RCC_OscConfig+0xb4e>
 8002300:	4b43      	ldr	r3, [pc, #268]	; (8002410 <HAL_RCC_OscConfig+0xc58>)
 8002302:	6a1b      	ldr	r3, [r3, #32]
 8002304:	e013      	b.n	800232e <HAL_RCC_OscConfig+0xb76>
 8002306:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800230a:	f5a3 73b8 	sub.w	r3, r3, #368	; 0x170
 800230e:	2202      	movs	r2, #2
 8002310:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002312:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002316:	f5a3 73b8 	sub.w	r3, r3, #368	; 0x170
 800231a:	681b      	ldr	r3, [r3, #0]
 800231c:	fa93 f2a3 	rbit	r2, r3
 8002320:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002324:	f5a3 73ba 	sub.w	r3, r3, #372	; 0x174
 8002328:	601a      	str	r2, [r3, #0]
 800232a:	4b39      	ldr	r3, [pc, #228]	; (8002410 <HAL_RCC_OscConfig+0xc58>)
 800232c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800232e:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8002332:	f5a2 72bc 	sub.w	r2, r2, #376	; 0x178
 8002336:	2102      	movs	r1, #2
 8002338:	6011      	str	r1, [r2, #0]
 800233a:	f507 7200 	add.w	r2, r7, #512	; 0x200
 800233e:	f5a2 72bc 	sub.w	r2, r2, #376	; 0x178
 8002342:	6812      	ldr	r2, [r2, #0]
 8002344:	fa92 f1a2 	rbit	r1, r2
 8002348:	f507 7200 	add.w	r2, r7, #512	; 0x200
 800234c:	f5a2 72be 	sub.w	r2, r2, #380	; 0x17c
 8002350:	6011      	str	r1, [r2, #0]
  return result;
 8002352:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8002356:	f5a2 72be 	sub.w	r2, r2, #380	; 0x17c
 800235a:	6812      	ldr	r2, [r2, #0]
 800235c:	fab2 f282 	clz	r2, r2
 8002360:	b2d2      	uxtb	r2, r2
 8002362:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8002366:	b2d2      	uxtb	r2, r2
 8002368:	f002 021f 	and.w	r2, r2, #31
 800236c:	2101      	movs	r1, #1
 800236e:	fa01 f202 	lsl.w	r2, r1, r2
 8002372:	4013      	ands	r3, r2
 8002374:	2b00      	cmp	r3, #0
 8002376:	d184      	bne.n	8002282 <HAL_RCC_OscConfig+0xaca>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 8002378:	f897 31ff 	ldrb.w	r3, [r7, #511]	; 0x1ff
 800237c:	2b01      	cmp	r3, #1
 800237e:	d105      	bne.n	800238c <HAL_RCC_OscConfig+0xbd4>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002380:	4b23      	ldr	r3, [pc, #140]	; (8002410 <HAL_RCC_OscConfig+0xc58>)
 8002382:	69db      	ldr	r3, [r3, #28]
 8002384:	4a22      	ldr	r2, [pc, #136]	; (8002410 <HAL_RCC_OscConfig+0xc58>)
 8002386:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800238a:	61d3      	str	r3, [r2, #28]
  }

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800238c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002390:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8002394:	681b      	ldr	r3, [r3, #0]
 8002396:	69db      	ldr	r3, [r3, #28]
 8002398:	2b00      	cmp	r3, #0
 800239a:	f000 8242 	beq.w	8002822 <HAL_RCC_OscConfig+0x106a>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 800239e:	4b1c      	ldr	r3, [pc, #112]	; (8002410 <HAL_RCC_OscConfig+0xc58>)
 80023a0:	685b      	ldr	r3, [r3, #4]
 80023a2:	f003 030c 	and.w	r3, r3, #12
 80023a6:	2b08      	cmp	r3, #8
 80023a8:	f000 8213 	beq.w	80027d2 <HAL_RCC_OscConfig+0x101a>
    { 
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80023ac:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80023b0:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 80023b4:	681b      	ldr	r3, [r3, #0]
 80023b6:	69db      	ldr	r3, [r3, #28]
 80023b8:	2b02      	cmp	r3, #2
 80023ba:	f040 8162 	bne.w	8002682 <HAL_RCC_OscConfig+0xeca>
 80023be:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80023c2:	f5a3 73c0 	sub.w	r3, r3, #384	; 0x180
 80023c6:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 80023ca:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80023cc:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80023d0:	f5a3 73c0 	sub.w	r3, r3, #384	; 0x180
 80023d4:	681b      	ldr	r3, [r3, #0]
 80023d6:	fa93 f2a3 	rbit	r2, r3
 80023da:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80023de:	f5a3 73c2 	sub.w	r3, r3, #388	; 0x184
 80023e2:	601a      	str	r2, [r3, #0]
  return result;
 80023e4:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80023e8:	f5a3 73c2 	sub.w	r3, r3, #388	; 0x184
 80023ec:	681b      	ldr	r3, [r3, #0]
#if   defined(RCC_CFGR_PLLSRC_HSI_PREDIV)
        assert_param(IS_RCC_PREDIV(RCC_OscInitStruct->PLL.PREDIV));
#endif
  
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80023ee:	fab3 f383 	clz	r3, r3
 80023f2:	b2db      	uxtb	r3, r3
 80023f4:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 80023f8:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 80023fc:	009b      	lsls	r3, r3, #2
 80023fe:	461a      	mov	r2, r3
 8002400:	2300      	movs	r3, #0
 8002402:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002404:	f7fe fc6a 	bl	8000cdc <HAL_GetTick>
 8002408:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800240c:	e00c      	b.n	8002428 <HAL_RCC_OscConfig+0xc70>
 800240e:	bf00      	nop
 8002410:	40021000 	.word	0x40021000
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002414:	f7fe fc62 	bl	8000cdc <HAL_GetTick>
 8002418:	4602      	mov	r2, r0
 800241a:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 800241e:	1ad3      	subs	r3, r2, r3
 8002420:	2b02      	cmp	r3, #2
 8002422:	d901      	bls.n	8002428 <HAL_RCC_OscConfig+0xc70>
          {
            return HAL_TIMEOUT;
 8002424:	2303      	movs	r3, #3
 8002426:	e1fd      	b.n	8002824 <HAL_RCC_OscConfig+0x106c>
 8002428:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800242c:	f5a3 73c4 	sub.w	r3, r3, #392	; 0x188
 8002430:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8002434:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002436:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800243a:	f5a3 73c4 	sub.w	r3, r3, #392	; 0x188
 800243e:	681b      	ldr	r3, [r3, #0]
 8002440:	fa93 f2a3 	rbit	r2, r3
 8002444:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002448:	f5a3 73c6 	sub.w	r3, r3, #396	; 0x18c
 800244c:	601a      	str	r2, [r3, #0]
  return result;
 800244e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002452:	f5a3 73c6 	sub.w	r3, r3, #396	; 0x18c
 8002456:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002458:	fab3 f383 	clz	r3, r3
 800245c:	b2db      	uxtb	r3, r3
 800245e:	095b      	lsrs	r3, r3, #5
 8002460:	b2db      	uxtb	r3, r3
 8002462:	f043 0301 	orr.w	r3, r3, #1
 8002466:	b2db      	uxtb	r3, r3
 8002468:	2b01      	cmp	r3, #1
 800246a:	d102      	bne.n	8002472 <HAL_RCC_OscConfig+0xcba>
 800246c:	4bb0      	ldr	r3, [pc, #704]	; (8002730 <HAL_RCC_OscConfig+0xf78>)
 800246e:	681b      	ldr	r3, [r3, #0]
 8002470:	e027      	b.n	80024c2 <HAL_RCC_OscConfig+0xd0a>
 8002472:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002476:	f5a3 73c8 	sub.w	r3, r3, #400	; 0x190
 800247a:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 800247e:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002480:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002484:	f5a3 73c8 	sub.w	r3, r3, #400	; 0x190
 8002488:	681b      	ldr	r3, [r3, #0]
 800248a:	fa93 f2a3 	rbit	r2, r3
 800248e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002492:	f5a3 73ca 	sub.w	r3, r3, #404	; 0x194
 8002496:	601a      	str	r2, [r3, #0]
 8002498:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800249c:	f5a3 73cc 	sub.w	r3, r3, #408	; 0x198
 80024a0:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 80024a4:	601a      	str	r2, [r3, #0]
 80024a6:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80024aa:	f5a3 73cc 	sub.w	r3, r3, #408	; 0x198
 80024ae:	681b      	ldr	r3, [r3, #0]
 80024b0:	fa93 f2a3 	rbit	r2, r3
 80024b4:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80024b8:	f5a3 73ce 	sub.w	r3, r3, #412	; 0x19c
 80024bc:	601a      	str	r2, [r3, #0]
 80024be:	4b9c      	ldr	r3, [pc, #624]	; (8002730 <HAL_RCC_OscConfig+0xf78>)
 80024c0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80024c2:	f507 7200 	add.w	r2, r7, #512	; 0x200
 80024c6:	f5a2 72d0 	sub.w	r2, r2, #416	; 0x1a0
 80024ca:	f04f 7100 	mov.w	r1, #33554432	; 0x2000000
 80024ce:	6011      	str	r1, [r2, #0]
 80024d0:	f507 7200 	add.w	r2, r7, #512	; 0x200
 80024d4:	f5a2 72d0 	sub.w	r2, r2, #416	; 0x1a0
 80024d8:	6812      	ldr	r2, [r2, #0]
 80024da:	fa92 f1a2 	rbit	r1, r2
 80024de:	f507 7200 	add.w	r2, r7, #512	; 0x200
 80024e2:	f5a2 72d2 	sub.w	r2, r2, #420	; 0x1a4
 80024e6:	6011      	str	r1, [r2, #0]
  return result;
 80024e8:	f507 7200 	add.w	r2, r7, #512	; 0x200
 80024ec:	f5a2 72d2 	sub.w	r2, r2, #420	; 0x1a4
 80024f0:	6812      	ldr	r2, [r2, #0]
 80024f2:	fab2 f282 	clz	r2, r2
 80024f6:	b2d2      	uxtb	r2, r2
 80024f8:	f042 0220 	orr.w	r2, r2, #32
 80024fc:	b2d2      	uxtb	r2, r2
 80024fe:	f002 021f 	and.w	r2, r2, #31
 8002502:	2101      	movs	r1, #1
 8002504:	fa01 f202 	lsl.w	r2, r1, r2
 8002508:	4013      	ands	r3, r2
 800250a:	2b00      	cmp	r3, #0
 800250c:	d182      	bne.n	8002414 <HAL_RCC_OscConfig+0xc5c>
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
                             RCC_OscInitStruct->PLL.PREDIV,
                             RCC_OscInitStruct->PLL.PLLMUL);
#else
      /* Configure the main PLL clock source and multiplication factor. */
      __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 800250e:	4b88      	ldr	r3, [pc, #544]	; (8002730 <HAL_RCC_OscConfig+0xf78>)
 8002510:	685b      	ldr	r3, [r3, #4]
 8002512:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 8002516:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800251a:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 800251e:	681b      	ldr	r3, [r3, #0]
 8002520:	6a59      	ldr	r1, [r3, #36]	; 0x24
 8002522:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002526:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 800252a:	681b      	ldr	r3, [r3, #0]
 800252c:	6a1b      	ldr	r3, [r3, #32]
 800252e:	430b      	orrs	r3, r1
 8002530:	497f      	ldr	r1, [pc, #508]	; (8002730 <HAL_RCC_OscConfig+0xf78>)
 8002532:	4313      	orrs	r3, r2
 8002534:	604b      	str	r3, [r1, #4]
 8002536:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800253a:	f5a3 73d4 	sub.w	r3, r3, #424	; 0x1a8
 800253e:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8002542:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002544:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002548:	f5a3 73d4 	sub.w	r3, r3, #424	; 0x1a8
 800254c:	681b      	ldr	r3, [r3, #0]
 800254e:	fa93 f2a3 	rbit	r2, r3
 8002552:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002556:	f5a3 73d6 	sub.w	r3, r3, #428	; 0x1ac
 800255a:	601a      	str	r2, [r3, #0]
  return result;
 800255c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002560:	f5a3 73d6 	sub.w	r3, r3, #428	; 0x1ac
 8002564:	681b      	ldr	r3, [r3, #0]
                           RCC_OscInitStruct->PLL.PLLMUL);
#endif /* RCC_CFGR_PLLSRC_HSI_PREDIV */
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002566:	fab3 f383 	clz	r3, r3
 800256a:	b2db      	uxtb	r3, r3
 800256c:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8002570:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8002574:	009b      	lsls	r3, r3, #2
 8002576:	461a      	mov	r2, r3
 8002578:	2301      	movs	r3, #1
 800257a:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800257c:	f7fe fbae 	bl	8000cdc <HAL_GetTick>
 8002580:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8002584:	e009      	b.n	800259a <HAL_RCC_OscConfig+0xde2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002586:	f7fe fba9 	bl	8000cdc <HAL_GetTick>
 800258a:	4602      	mov	r2, r0
 800258c:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8002590:	1ad3      	subs	r3, r2, r3
 8002592:	2b02      	cmp	r3, #2
 8002594:	d901      	bls.n	800259a <HAL_RCC_OscConfig+0xde2>
          {
            return HAL_TIMEOUT;
 8002596:	2303      	movs	r3, #3
 8002598:	e144      	b.n	8002824 <HAL_RCC_OscConfig+0x106c>
 800259a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800259e:	f5a3 73d8 	sub.w	r3, r3, #432	; 0x1b0
 80025a2:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 80025a6:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80025a8:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80025ac:	f5a3 73d8 	sub.w	r3, r3, #432	; 0x1b0
 80025b0:	681b      	ldr	r3, [r3, #0]
 80025b2:	fa93 f2a3 	rbit	r2, r3
 80025b6:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80025ba:	f5a3 73da 	sub.w	r3, r3, #436	; 0x1b4
 80025be:	601a      	str	r2, [r3, #0]
  return result;
 80025c0:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80025c4:	f5a3 73da 	sub.w	r3, r3, #436	; 0x1b4
 80025c8:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 80025ca:	fab3 f383 	clz	r3, r3
 80025ce:	b2db      	uxtb	r3, r3
 80025d0:	095b      	lsrs	r3, r3, #5
 80025d2:	b2db      	uxtb	r3, r3
 80025d4:	f043 0301 	orr.w	r3, r3, #1
 80025d8:	b2db      	uxtb	r3, r3
 80025da:	2b01      	cmp	r3, #1
 80025dc:	d102      	bne.n	80025e4 <HAL_RCC_OscConfig+0xe2c>
 80025de:	4b54      	ldr	r3, [pc, #336]	; (8002730 <HAL_RCC_OscConfig+0xf78>)
 80025e0:	681b      	ldr	r3, [r3, #0]
 80025e2:	e027      	b.n	8002634 <HAL_RCC_OscConfig+0xe7c>
 80025e4:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80025e8:	f5a3 73dc 	sub.w	r3, r3, #440	; 0x1b8
 80025ec:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 80025f0:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80025f2:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80025f6:	f5a3 73dc 	sub.w	r3, r3, #440	; 0x1b8
 80025fa:	681b      	ldr	r3, [r3, #0]
 80025fc:	fa93 f2a3 	rbit	r2, r3
 8002600:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002604:	f5a3 73de 	sub.w	r3, r3, #444	; 0x1bc
 8002608:	601a      	str	r2, [r3, #0]
 800260a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800260e:	f5a3 73e0 	sub.w	r3, r3, #448	; 0x1c0
 8002612:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8002616:	601a      	str	r2, [r3, #0]
 8002618:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800261c:	f5a3 73e0 	sub.w	r3, r3, #448	; 0x1c0
 8002620:	681b      	ldr	r3, [r3, #0]
 8002622:	fa93 f2a3 	rbit	r2, r3
 8002626:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800262a:	f5a3 73e2 	sub.w	r3, r3, #452	; 0x1c4
 800262e:	601a      	str	r2, [r3, #0]
 8002630:	4b3f      	ldr	r3, [pc, #252]	; (8002730 <HAL_RCC_OscConfig+0xf78>)
 8002632:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002634:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8002638:	f5a2 72e4 	sub.w	r2, r2, #456	; 0x1c8
 800263c:	f04f 7100 	mov.w	r1, #33554432	; 0x2000000
 8002640:	6011      	str	r1, [r2, #0]
 8002642:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8002646:	f5a2 72e4 	sub.w	r2, r2, #456	; 0x1c8
 800264a:	6812      	ldr	r2, [r2, #0]
 800264c:	fa92 f1a2 	rbit	r1, r2
 8002650:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8002654:	f5a2 72e6 	sub.w	r2, r2, #460	; 0x1cc
 8002658:	6011      	str	r1, [r2, #0]
  return result;
 800265a:	f507 7200 	add.w	r2, r7, #512	; 0x200
 800265e:	f5a2 72e6 	sub.w	r2, r2, #460	; 0x1cc
 8002662:	6812      	ldr	r2, [r2, #0]
 8002664:	fab2 f282 	clz	r2, r2
 8002668:	b2d2      	uxtb	r2, r2
 800266a:	f042 0220 	orr.w	r2, r2, #32
 800266e:	b2d2      	uxtb	r2, r2
 8002670:	f002 021f 	and.w	r2, r2, #31
 8002674:	2101      	movs	r1, #1
 8002676:	fa01 f202 	lsl.w	r2, r1, r2
 800267a:	4013      	ands	r3, r2
 800267c:	2b00      	cmp	r3, #0
 800267e:	d082      	beq.n	8002586 <HAL_RCC_OscConfig+0xdce>
 8002680:	e0cf      	b.n	8002822 <HAL_RCC_OscConfig+0x106a>
 8002682:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002686:	f5a3 73e8 	sub.w	r3, r3, #464	; 0x1d0
 800268a:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 800268e:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002690:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002694:	f5a3 73e8 	sub.w	r3, r3, #464	; 0x1d0
 8002698:	681b      	ldr	r3, [r3, #0]
 800269a:	fa93 f2a3 	rbit	r2, r3
 800269e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80026a2:	f5a3 73ea 	sub.w	r3, r3, #468	; 0x1d4
 80026a6:	601a      	str	r2, [r3, #0]
  return result;
 80026a8:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80026ac:	f5a3 73ea 	sub.w	r3, r3, #468	; 0x1d4
 80026b0:	681b      	ldr	r3, [r3, #0]
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80026b2:	fab3 f383 	clz	r3, r3
 80026b6:	b2db      	uxtb	r3, r3
 80026b8:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 80026bc:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 80026c0:	009b      	lsls	r3, r3, #2
 80026c2:	461a      	mov	r2, r3
 80026c4:	2300      	movs	r3, #0
 80026c6:	6013      	str	r3, [r2, #0]
 
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80026c8:	f7fe fb08 	bl	8000cdc <HAL_GetTick>
 80026cc:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till PLL is disabled */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80026d0:	e009      	b.n	80026e6 <HAL_RCC_OscConfig+0xf2e>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80026d2:	f7fe fb03 	bl	8000cdc <HAL_GetTick>
 80026d6:	4602      	mov	r2, r0
 80026d8:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 80026dc:	1ad3      	subs	r3, r2, r3
 80026de:	2b02      	cmp	r3, #2
 80026e0:	d901      	bls.n	80026e6 <HAL_RCC_OscConfig+0xf2e>
          {
            return HAL_TIMEOUT;
 80026e2:	2303      	movs	r3, #3
 80026e4:	e09e      	b.n	8002824 <HAL_RCC_OscConfig+0x106c>
 80026e6:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80026ea:	f5a3 73ec 	sub.w	r3, r3, #472	; 0x1d8
 80026ee:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 80026f2:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80026f4:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80026f8:	f5a3 73ec 	sub.w	r3, r3, #472	; 0x1d8
 80026fc:	681b      	ldr	r3, [r3, #0]
 80026fe:	fa93 f2a3 	rbit	r2, r3
 8002702:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002706:	f5a3 73ee 	sub.w	r3, r3, #476	; 0x1dc
 800270a:	601a      	str	r2, [r3, #0]
  return result;
 800270c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002710:	f5a3 73ee 	sub.w	r3, r3, #476	; 0x1dc
 8002714:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002716:	fab3 f383 	clz	r3, r3
 800271a:	b2db      	uxtb	r3, r3
 800271c:	095b      	lsrs	r3, r3, #5
 800271e:	b2db      	uxtb	r3, r3
 8002720:	f043 0301 	orr.w	r3, r3, #1
 8002724:	b2db      	uxtb	r3, r3
 8002726:	2b01      	cmp	r3, #1
 8002728:	d104      	bne.n	8002734 <HAL_RCC_OscConfig+0xf7c>
 800272a:	4b01      	ldr	r3, [pc, #4]	; (8002730 <HAL_RCC_OscConfig+0xf78>)
 800272c:	681b      	ldr	r3, [r3, #0]
 800272e:	e029      	b.n	8002784 <HAL_RCC_OscConfig+0xfcc>
 8002730:	40021000 	.word	0x40021000
 8002734:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002738:	f5a3 73f0 	sub.w	r3, r3, #480	; 0x1e0
 800273c:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8002740:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002742:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002746:	f5a3 73f0 	sub.w	r3, r3, #480	; 0x1e0
 800274a:	681b      	ldr	r3, [r3, #0]
 800274c:	fa93 f2a3 	rbit	r2, r3
 8002750:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002754:	f5a3 73f2 	sub.w	r3, r3, #484	; 0x1e4
 8002758:	601a      	str	r2, [r3, #0]
 800275a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800275e:	f5a3 73f4 	sub.w	r3, r3, #488	; 0x1e8
 8002762:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8002766:	601a      	str	r2, [r3, #0]
 8002768:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800276c:	f5a3 73f4 	sub.w	r3, r3, #488	; 0x1e8
 8002770:	681b      	ldr	r3, [r3, #0]
 8002772:	fa93 f2a3 	rbit	r2, r3
 8002776:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800277a:	f5a3 73f6 	sub.w	r3, r3, #492	; 0x1ec
 800277e:	601a      	str	r2, [r3, #0]
 8002780:	4b2b      	ldr	r3, [pc, #172]	; (8002830 <HAL_RCC_OscConfig+0x1078>)
 8002782:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002784:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8002788:	f5a2 72f8 	sub.w	r2, r2, #496	; 0x1f0
 800278c:	f04f 7100 	mov.w	r1, #33554432	; 0x2000000
 8002790:	6011      	str	r1, [r2, #0]
 8002792:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8002796:	f5a2 72f8 	sub.w	r2, r2, #496	; 0x1f0
 800279a:	6812      	ldr	r2, [r2, #0]
 800279c:	fa92 f1a2 	rbit	r1, r2
 80027a0:	f507 7200 	add.w	r2, r7, #512	; 0x200
 80027a4:	f5a2 72fa 	sub.w	r2, r2, #500	; 0x1f4
 80027a8:	6011      	str	r1, [r2, #0]
  return result;
 80027aa:	f507 7200 	add.w	r2, r7, #512	; 0x200
 80027ae:	f5a2 72fa 	sub.w	r2, r2, #500	; 0x1f4
 80027b2:	6812      	ldr	r2, [r2, #0]
 80027b4:	fab2 f282 	clz	r2, r2
 80027b8:	b2d2      	uxtb	r2, r2
 80027ba:	f042 0220 	orr.w	r2, r2, #32
 80027be:	b2d2      	uxtb	r2, r2
 80027c0:	f002 021f 	and.w	r2, r2, #31
 80027c4:	2101      	movs	r1, #1
 80027c6:	fa01 f202 	lsl.w	r2, r1, r2
 80027ca:	4013      	ands	r3, r2
 80027cc:	2b00      	cmp	r3, #0
 80027ce:	d180      	bne.n	80026d2 <HAL_RCC_OscConfig+0xf1a>
 80027d0:	e027      	b.n	8002822 <HAL_RCC_OscConfig+0x106a>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80027d2:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80027d6:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 80027da:	681b      	ldr	r3, [r3, #0]
 80027dc:	69db      	ldr	r3, [r3, #28]
 80027de:	2b01      	cmp	r3, #1
 80027e0:	d101      	bne.n	80027e6 <HAL_RCC_OscConfig+0x102e>
      {
        return HAL_ERROR;
 80027e2:	2301      	movs	r3, #1
 80027e4:	e01e      	b.n	8002824 <HAL_RCC_OscConfig+0x106c>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 80027e6:	4b12      	ldr	r3, [pc, #72]	; (8002830 <HAL_RCC_OscConfig+0x1078>)
 80027e8:	685b      	ldr	r3, [r3, #4]
 80027ea:	f8c7 31f4 	str.w	r3, [r7, #500]	; 0x1f4
        pll_config2 = RCC->CFGR2;
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL)   != RCC_OscInitStruct->PLL.PLLMUL)    ||      
           (READ_BIT(pll_config2, RCC_CFGR2_PREDIV)  != RCC_OscInitStruct->PLL.PREDIV))     
#else
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
 80027ee:	f8d7 31f4 	ldr.w	r3, [r7, #500]	; 0x1f4
 80027f2:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 80027f6:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80027fa:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 80027fe:	681b      	ldr	r3, [r3, #0]
 8002800:	6a1b      	ldr	r3, [r3, #32]
 8002802:	429a      	cmp	r2, r3
 8002804:	d10b      	bne.n	800281e <HAL_RCC_OscConfig+0x1066>
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL)   != RCC_OscInitStruct->PLL.PLLMUL))
 8002806:	f8d7 31f4 	ldr.w	r3, [r7, #500]	; 0x1f4
 800280a:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 800280e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002812:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8002816:	681b      	ldr	r3, [r3, #0]
 8002818:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
 800281a:	429a      	cmp	r2, r3
 800281c:	d001      	beq.n	8002822 <HAL_RCC_OscConfig+0x106a>
#endif
        {
          return HAL_ERROR;
 800281e:	2301      	movs	r3, #1
 8002820:	e000      	b.n	8002824 <HAL_RCC_OscConfig+0x106c>
        }
      }
    }
  }

  return HAL_OK;
 8002822:	2300      	movs	r3, #0
}
 8002824:	4618      	mov	r0, r3
 8002826:	f507 7700 	add.w	r7, r7, #512	; 0x200
 800282a:	46bd      	mov	sp, r7
 800282c:	bd80      	pop	{r7, pc}
 800282e:	bf00      	nop
 8002830:	40021000 	.word	0x40021000

08002834 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002834:	b580      	push	{r7, lr}
 8002836:	b09e      	sub	sp, #120	; 0x78
 8002838:	af00      	add	r7, sp, #0
 800283a:	6078      	str	r0, [r7, #4]
 800283c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0U;
 800283e:	2300      	movs	r3, #0
 8002840:	677b      	str	r3, [r7, #116]	; 0x74

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8002842:	687b      	ldr	r3, [r7, #4]
 8002844:	2b00      	cmp	r3, #0
 8002846:	d101      	bne.n	800284c <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 8002848:	2301      	movs	r3, #1
 800284a:	e162      	b.n	8002b12 <HAL_RCC_ClockConfig+0x2de>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY) 
  must be correctly programmed according to the frequency of the CPU clock 
    (HCLK) of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 800284c:	4b90      	ldr	r3, [pc, #576]	; (8002a90 <HAL_RCC_ClockConfig+0x25c>)
 800284e:	681b      	ldr	r3, [r3, #0]
 8002850:	f003 0307 	and.w	r3, r3, #7
 8002854:	683a      	ldr	r2, [r7, #0]
 8002856:	429a      	cmp	r2, r3
 8002858:	d910      	bls.n	800287c <HAL_RCC_ClockConfig+0x48>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800285a:	4b8d      	ldr	r3, [pc, #564]	; (8002a90 <HAL_RCC_ClockConfig+0x25c>)
 800285c:	681b      	ldr	r3, [r3, #0]
 800285e:	f023 0207 	bic.w	r2, r3, #7
 8002862:	498b      	ldr	r1, [pc, #556]	; (8002a90 <HAL_RCC_ClockConfig+0x25c>)
 8002864:	683b      	ldr	r3, [r7, #0]
 8002866:	4313      	orrs	r3, r2
 8002868:	600b      	str	r3, [r1, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800286a:	4b89      	ldr	r3, [pc, #548]	; (8002a90 <HAL_RCC_ClockConfig+0x25c>)
 800286c:	681b      	ldr	r3, [r3, #0]
 800286e:	f003 0307 	and.w	r3, r3, #7
 8002872:	683a      	ldr	r2, [r7, #0]
 8002874:	429a      	cmp	r2, r3
 8002876:	d001      	beq.n	800287c <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 8002878:	2301      	movs	r3, #1
 800287a:	e14a      	b.n	8002b12 <HAL_RCC_ClockConfig+0x2de>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800287c:	687b      	ldr	r3, [r7, #4]
 800287e:	681b      	ldr	r3, [r3, #0]
 8002880:	f003 0302 	and.w	r3, r3, #2
 8002884:	2b00      	cmp	r3, #0
 8002886:	d008      	beq.n	800289a <HAL_RCC_ClockConfig+0x66>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002888:	4b82      	ldr	r3, [pc, #520]	; (8002a94 <HAL_RCC_ClockConfig+0x260>)
 800288a:	685b      	ldr	r3, [r3, #4]
 800288c:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002890:	687b      	ldr	r3, [r7, #4]
 8002892:	689b      	ldr	r3, [r3, #8]
 8002894:	497f      	ldr	r1, [pc, #508]	; (8002a94 <HAL_RCC_ClockConfig+0x260>)
 8002896:	4313      	orrs	r3, r2
 8002898:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800289a:	687b      	ldr	r3, [r7, #4]
 800289c:	681b      	ldr	r3, [r3, #0]
 800289e:	f003 0301 	and.w	r3, r3, #1
 80028a2:	2b00      	cmp	r3, #0
 80028a4:	f000 80dc 	beq.w	8002a60 <HAL_RCC_ClockConfig+0x22c>
  {    
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
    
    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80028a8:	687b      	ldr	r3, [r7, #4]
 80028aa:	685b      	ldr	r3, [r3, #4]
 80028ac:	2b01      	cmp	r3, #1
 80028ae:	d13c      	bne.n	800292a <HAL_RCC_ClockConfig+0xf6>
 80028b0:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80028b4:	673b      	str	r3, [r7, #112]	; 0x70
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80028b6:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80028b8:	fa93 f3a3 	rbit	r3, r3
 80028bc:	66fb      	str	r3, [r7, #108]	; 0x6c
  return result;
 80028be:	6efb      	ldr	r3, [r7, #108]	; 0x6c
    {
      /* Check the HSE ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80028c0:	fab3 f383 	clz	r3, r3
 80028c4:	b2db      	uxtb	r3, r3
 80028c6:	095b      	lsrs	r3, r3, #5
 80028c8:	b2db      	uxtb	r3, r3
 80028ca:	f043 0301 	orr.w	r3, r3, #1
 80028ce:	b2db      	uxtb	r3, r3
 80028d0:	2b01      	cmp	r3, #1
 80028d2:	d102      	bne.n	80028da <HAL_RCC_ClockConfig+0xa6>
 80028d4:	4b6f      	ldr	r3, [pc, #444]	; (8002a94 <HAL_RCC_ClockConfig+0x260>)
 80028d6:	681b      	ldr	r3, [r3, #0]
 80028d8:	e00f      	b.n	80028fa <HAL_RCC_ClockConfig+0xc6>
 80028da:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80028de:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80028e0:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 80028e2:	fa93 f3a3 	rbit	r3, r3
 80028e6:	667b      	str	r3, [r7, #100]	; 0x64
 80028e8:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80028ec:	663b      	str	r3, [r7, #96]	; 0x60
 80028ee:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80028f0:	fa93 f3a3 	rbit	r3, r3
 80028f4:	65fb      	str	r3, [r7, #92]	; 0x5c
 80028f6:	4b67      	ldr	r3, [pc, #412]	; (8002a94 <HAL_RCC_ClockConfig+0x260>)
 80028f8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80028fa:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 80028fe:	65ba      	str	r2, [r7, #88]	; 0x58
 8002900:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8002902:	fa92 f2a2 	rbit	r2, r2
 8002906:	657a      	str	r2, [r7, #84]	; 0x54
  return result;
 8002908:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 800290a:	fab2 f282 	clz	r2, r2
 800290e:	b2d2      	uxtb	r2, r2
 8002910:	f042 0220 	orr.w	r2, r2, #32
 8002914:	b2d2      	uxtb	r2, r2
 8002916:	f002 021f 	and.w	r2, r2, #31
 800291a:	2101      	movs	r1, #1
 800291c:	fa01 f202 	lsl.w	r2, r1, r2
 8002920:	4013      	ands	r3, r2
 8002922:	2b00      	cmp	r3, #0
 8002924:	d17b      	bne.n	8002a1e <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 8002926:	2301      	movs	r3, #1
 8002928:	e0f3      	b.n	8002b12 <HAL_RCC_ClockConfig+0x2de>
      }
    }
    /* PLL is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800292a:	687b      	ldr	r3, [r7, #4]
 800292c:	685b      	ldr	r3, [r3, #4]
 800292e:	2b02      	cmp	r3, #2
 8002930:	d13c      	bne.n	80029ac <HAL_RCC_ClockConfig+0x178>
 8002932:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8002936:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002938:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800293a:	fa93 f3a3 	rbit	r3, r3
 800293e:	64fb      	str	r3, [r7, #76]	; 0x4c
  return result;
 8002940:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
    {
      /* Check the PLL ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002942:	fab3 f383 	clz	r3, r3
 8002946:	b2db      	uxtb	r3, r3
 8002948:	095b      	lsrs	r3, r3, #5
 800294a:	b2db      	uxtb	r3, r3
 800294c:	f043 0301 	orr.w	r3, r3, #1
 8002950:	b2db      	uxtb	r3, r3
 8002952:	2b01      	cmp	r3, #1
 8002954:	d102      	bne.n	800295c <HAL_RCC_ClockConfig+0x128>
 8002956:	4b4f      	ldr	r3, [pc, #316]	; (8002a94 <HAL_RCC_ClockConfig+0x260>)
 8002958:	681b      	ldr	r3, [r3, #0]
 800295a:	e00f      	b.n	800297c <HAL_RCC_ClockConfig+0x148>
 800295c:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8002960:	64bb      	str	r3, [r7, #72]	; 0x48
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002962:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8002964:	fa93 f3a3 	rbit	r3, r3
 8002968:	647b      	str	r3, [r7, #68]	; 0x44
 800296a:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 800296e:	643b      	str	r3, [r7, #64]	; 0x40
 8002970:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8002972:	fa93 f3a3 	rbit	r3, r3
 8002976:	63fb      	str	r3, [r7, #60]	; 0x3c
 8002978:	4b46      	ldr	r3, [pc, #280]	; (8002a94 <HAL_RCC_ClockConfig+0x260>)
 800297a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800297c:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8002980:	63ba      	str	r2, [r7, #56]	; 0x38
 8002982:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8002984:	fa92 f2a2 	rbit	r2, r2
 8002988:	637a      	str	r2, [r7, #52]	; 0x34
  return result;
 800298a:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800298c:	fab2 f282 	clz	r2, r2
 8002990:	b2d2      	uxtb	r2, r2
 8002992:	f042 0220 	orr.w	r2, r2, #32
 8002996:	b2d2      	uxtb	r2, r2
 8002998:	f002 021f 	and.w	r2, r2, #31
 800299c:	2101      	movs	r1, #1
 800299e:	fa01 f202 	lsl.w	r2, r1, r2
 80029a2:	4013      	ands	r3, r2
 80029a4:	2b00      	cmp	r3, #0
 80029a6:	d13a      	bne.n	8002a1e <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 80029a8:	2301      	movs	r3, #1
 80029aa:	e0b2      	b.n	8002b12 <HAL_RCC_ClockConfig+0x2de>
 80029ac:	2302      	movs	r3, #2
 80029ae:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80029b0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80029b2:	fa93 f3a3 	rbit	r3, r3
 80029b6:	62fb      	str	r3, [r7, #44]	; 0x2c
  return result;
 80029b8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80029ba:	fab3 f383 	clz	r3, r3
 80029be:	b2db      	uxtb	r3, r3
 80029c0:	095b      	lsrs	r3, r3, #5
 80029c2:	b2db      	uxtb	r3, r3
 80029c4:	f043 0301 	orr.w	r3, r3, #1
 80029c8:	b2db      	uxtb	r3, r3
 80029ca:	2b01      	cmp	r3, #1
 80029cc:	d102      	bne.n	80029d4 <HAL_RCC_ClockConfig+0x1a0>
 80029ce:	4b31      	ldr	r3, [pc, #196]	; (8002a94 <HAL_RCC_ClockConfig+0x260>)
 80029d0:	681b      	ldr	r3, [r3, #0]
 80029d2:	e00d      	b.n	80029f0 <HAL_RCC_ClockConfig+0x1bc>
 80029d4:	2302      	movs	r3, #2
 80029d6:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80029d8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80029da:	fa93 f3a3 	rbit	r3, r3
 80029de:	627b      	str	r3, [r7, #36]	; 0x24
 80029e0:	2302      	movs	r3, #2
 80029e2:	623b      	str	r3, [r7, #32]
 80029e4:	6a3b      	ldr	r3, [r7, #32]
 80029e6:	fa93 f3a3 	rbit	r3, r3
 80029ea:	61fb      	str	r3, [r7, #28]
 80029ec:	4b29      	ldr	r3, [pc, #164]	; (8002a94 <HAL_RCC_ClockConfig+0x260>)
 80029ee:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80029f0:	2202      	movs	r2, #2
 80029f2:	61ba      	str	r2, [r7, #24]
 80029f4:	69ba      	ldr	r2, [r7, #24]
 80029f6:	fa92 f2a2 	rbit	r2, r2
 80029fa:	617a      	str	r2, [r7, #20]
  return result;
 80029fc:	697a      	ldr	r2, [r7, #20]
 80029fe:	fab2 f282 	clz	r2, r2
 8002a02:	b2d2      	uxtb	r2, r2
 8002a04:	f042 0220 	orr.w	r2, r2, #32
 8002a08:	b2d2      	uxtb	r2, r2
 8002a0a:	f002 021f 	and.w	r2, r2, #31
 8002a0e:	2101      	movs	r1, #1
 8002a10:	fa01 f202 	lsl.w	r2, r1, r2
 8002a14:	4013      	ands	r3, r2
 8002a16:	2b00      	cmp	r3, #0
 8002a18:	d101      	bne.n	8002a1e <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 8002a1a:	2301      	movs	r3, #1
 8002a1c:	e079      	b.n	8002b12 <HAL_RCC_ClockConfig+0x2de>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8002a1e:	4b1d      	ldr	r3, [pc, #116]	; (8002a94 <HAL_RCC_ClockConfig+0x260>)
 8002a20:	685b      	ldr	r3, [r3, #4]
 8002a22:	f023 0203 	bic.w	r2, r3, #3
 8002a26:	687b      	ldr	r3, [r7, #4]
 8002a28:	685b      	ldr	r3, [r3, #4]
 8002a2a:	491a      	ldr	r1, [pc, #104]	; (8002a94 <HAL_RCC_ClockConfig+0x260>)
 8002a2c:	4313      	orrs	r3, r2
 8002a2e:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8002a30:	f7fe f954 	bl	8000cdc <HAL_GetTick>
 8002a34:	6778      	str	r0, [r7, #116]	; 0x74
    
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002a36:	e00a      	b.n	8002a4e <HAL_RCC_ClockConfig+0x21a>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002a38:	f7fe f950 	bl	8000cdc <HAL_GetTick>
 8002a3c:	4602      	mov	r2, r0
 8002a3e:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8002a40:	1ad3      	subs	r3, r2, r3
 8002a42:	f241 3288 	movw	r2, #5000	; 0x1388
 8002a46:	4293      	cmp	r3, r2
 8002a48:	d901      	bls.n	8002a4e <HAL_RCC_ClockConfig+0x21a>
      {
        return HAL_TIMEOUT;
 8002a4a:	2303      	movs	r3, #3
 8002a4c:	e061      	b.n	8002b12 <HAL_RCC_ClockConfig+0x2de>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002a4e:	4b11      	ldr	r3, [pc, #68]	; (8002a94 <HAL_RCC_ClockConfig+0x260>)
 8002a50:	685b      	ldr	r3, [r3, #4]
 8002a52:	f003 020c 	and.w	r2, r3, #12
 8002a56:	687b      	ldr	r3, [r7, #4]
 8002a58:	685b      	ldr	r3, [r3, #4]
 8002a5a:	009b      	lsls	r3, r3, #2
 8002a5c:	429a      	cmp	r2, r3
 8002a5e:	d1eb      	bne.n	8002a38 <HAL_RCC_ClockConfig+0x204>
      }
    }
  }
  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8002a60:	4b0b      	ldr	r3, [pc, #44]	; (8002a90 <HAL_RCC_ClockConfig+0x25c>)
 8002a62:	681b      	ldr	r3, [r3, #0]
 8002a64:	f003 0307 	and.w	r3, r3, #7
 8002a68:	683a      	ldr	r2, [r7, #0]
 8002a6a:	429a      	cmp	r2, r3
 8002a6c:	d214      	bcs.n	8002a98 <HAL_RCC_ClockConfig+0x264>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002a6e:	4b08      	ldr	r3, [pc, #32]	; (8002a90 <HAL_RCC_ClockConfig+0x25c>)
 8002a70:	681b      	ldr	r3, [r3, #0]
 8002a72:	f023 0207 	bic.w	r2, r3, #7
 8002a76:	4906      	ldr	r1, [pc, #24]	; (8002a90 <HAL_RCC_ClockConfig+0x25c>)
 8002a78:	683b      	ldr	r3, [r7, #0]
 8002a7a:	4313      	orrs	r3, r2
 8002a7c:	600b      	str	r3, [r1, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002a7e:	4b04      	ldr	r3, [pc, #16]	; (8002a90 <HAL_RCC_ClockConfig+0x25c>)
 8002a80:	681b      	ldr	r3, [r3, #0]
 8002a82:	f003 0307 	and.w	r3, r3, #7
 8002a86:	683a      	ldr	r2, [r7, #0]
 8002a88:	429a      	cmp	r2, r3
 8002a8a:	d005      	beq.n	8002a98 <HAL_RCC_ClockConfig+0x264>
    {
      return HAL_ERROR;
 8002a8c:	2301      	movs	r3, #1
 8002a8e:	e040      	b.n	8002b12 <HAL_RCC_ClockConfig+0x2de>
 8002a90:	40022000 	.word	0x40022000
 8002a94:	40021000 	.word	0x40021000
    }
  }    

  /*-------------------------- PCLK1 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002a98:	687b      	ldr	r3, [r7, #4]
 8002a9a:	681b      	ldr	r3, [r3, #0]
 8002a9c:	f003 0304 	and.w	r3, r3, #4
 8002aa0:	2b00      	cmp	r3, #0
 8002aa2:	d008      	beq.n	8002ab6 <HAL_RCC_ClockConfig+0x282>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002aa4:	4b1d      	ldr	r3, [pc, #116]	; (8002b1c <HAL_RCC_ClockConfig+0x2e8>)
 8002aa6:	685b      	ldr	r3, [r3, #4]
 8002aa8:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8002aac:	687b      	ldr	r3, [r7, #4]
 8002aae:	68db      	ldr	r3, [r3, #12]
 8002ab0:	491a      	ldr	r1, [pc, #104]	; (8002b1c <HAL_RCC_ClockConfig+0x2e8>)
 8002ab2:	4313      	orrs	r3, r2
 8002ab4:	604b      	str	r3, [r1, #4]
  }
  
  /*-------------------------- PCLK2 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002ab6:	687b      	ldr	r3, [r7, #4]
 8002ab8:	681b      	ldr	r3, [r3, #0]
 8002aba:	f003 0308 	and.w	r3, r3, #8
 8002abe:	2b00      	cmp	r3, #0
 8002ac0:	d009      	beq.n	8002ad6 <HAL_RCC_ClockConfig+0x2a2>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8002ac2:	4b16      	ldr	r3, [pc, #88]	; (8002b1c <HAL_RCC_ClockConfig+0x2e8>)
 8002ac4:	685b      	ldr	r3, [r3, #4]
 8002ac6:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8002aca:	687b      	ldr	r3, [r7, #4]
 8002acc:	691b      	ldr	r3, [r3, #16]
 8002ace:	00db      	lsls	r3, r3, #3
 8002ad0:	4912      	ldr	r1, [pc, #72]	; (8002b1c <HAL_RCC_ClockConfig+0x2e8>)
 8002ad2:	4313      	orrs	r3, r2
 8002ad4:	604b      	str	r3, [r1, #4]
  }
 
  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_BITNUMBER];
 8002ad6:	f000 f829 	bl	8002b2c <HAL_RCC_GetSysClockFreq>
 8002ada:	4601      	mov	r1, r0
 8002adc:	4b0f      	ldr	r3, [pc, #60]	; (8002b1c <HAL_RCC_ClockConfig+0x2e8>)
 8002ade:	685b      	ldr	r3, [r3, #4]
 8002ae0:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8002ae4:	22f0      	movs	r2, #240	; 0xf0
 8002ae6:	613a      	str	r2, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002ae8:	693a      	ldr	r2, [r7, #16]
 8002aea:	fa92 f2a2 	rbit	r2, r2
 8002aee:	60fa      	str	r2, [r7, #12]
  return result;
 8002af0:	68fa      	ldr	r2, [r7, #12]
 8002af2:	fab2 f282 	clz	r2, r2
 8002af6:	b2d2      	uxtb	r2, r2
 8002af8:	40d3      	lsrs	r3, r2
 8002afa:	4a09      	ldr	r2, [pc, #36]	; (8002b20 <HAL_RCC_ClockConfig+0x2ec>)
 8002afc:	5cd3      	ldrb	r3, [r2, r3]
 8002afe:	fa21 f303 	lsr.w	r3, r1, r3
 8002b02:	4a08      	ldr	r2, [pc, #32]	; (8002b24 <HAL_RCC_ClockConfig+0x2f0>)
 8002b04:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick (uwTickPrio);
 8002b06:	4b08      	ldr	r3, [pc, #32]	; (8002b28 <HAL_RCC_ClockConfig+0x2f4>)
 8002b08:	681b      	ldr	r3, [r3, #0]
 8002b0a:	4618      	mov	r0, r3
 8002b0c:	f7fe f8a2 	bl	8000c54 <HAL_InitTick>
  
  return HAL_OK;
 8002b10:	2300      	movs	r3, #0
}
 8002b12:	4618      	mov	r0, r3
 8002b14:	3778      	adds	r7, #120	; 0x78
 8002b16:	46bd      	mov	sp, r7
 8002b18:	bd80      	pop	{r7, pc}
 8002b1a:	bf00      	nop
 8002b1c:	40021000 	.word	0x40021000
 8002b20:	080053b8 	.word	0x080053b8
 8002b24:	20000000 	.word	0x20000000
 8002b28:	20000004 	.word	0x20000004

08002b2c <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *         
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002b2c:	b480      	push	{r7}
 8002b2e:	b08b      	sub	sp, #44	; 0x2c
 8002b30:	af00      	add	r7, sp, #0
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8002b32:	2300      	movs	r3, #0
 8002b34:	61fb      	str	r3, [r7, #28]
 8002b36:	2300      	movs	r3, #0
 8002b38:	61bb      	str	r3, [r7, #24]
 8002b3a:	2300      	movs	r3, #0
 8002b3c:	627b      	str	r3, [r7, #36]	; 0x24
 8002b3e:	2300      	movs	r3, #0
 8002b40:	617b      	str	r3, [r7, #20]
  uint32_t sysclockfreq = 0U;
 8002b42:	2300      	movs	r3, #0
 8002b44:	623b      	str	r3, [r7, #32]
  
  tmpreg = RCC->CFGR;
 8002b46:	4b29      	ldr	r3, [pc, #164]	; (8002bec <HAL_RCC_GetSysClockFreq+0xc0>)
 8002b48:	685b      	ldr	r3, [r3, #4]
 8002b4a:	61fb      	str	r3, [r7, #28]
  
  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8002b4c:	69fb      	ldr	r3, [r7, #28]
 8002b4e:	f003 030c 	and.w	r3, r3, #12
 8002b52:	2b04      	cmp	r3, #4
 8002b54:	d002      	beq.n	8002b5c <HAL_RCC_GetSysClockFreq+0x30>
 8002b56:	2b08      	cmp	r3, #8
 8002b58:	d003      	beq.n	8002b62 <HAL_RCC_GetSysClockFreq+0x36>
 8002b5a:	e03c      	b.n	8002bd6 <HAL_RCC_GetSysClockFreq+0xaa>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8002b5c:	4b24      	ldr	r3, [pc, #144]	; (8002bf0 <HAL_RCC_GetSysClockFreq+0xc4>)
 8002b5e:	623b      	str	r3, [r7, #32]
      break;
 8002b60:	e03c      	b.n	8002bdc <HAL_RCC_GetSysClockFreq+0xb0>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> POSITION_VAL(RCC_CFGR_PLLMUL)];
 8002b62:	69fb      	ldr	r3, [r7, #28]
 8002b64:	f403 1370 	and.w	r3, r3, #3932160	; 0x3c0000
 8002b68:	f44f 1270 	mov.w	r2, #3932160	; 0x3c0000
 8002b6c:	60ba      	str	r2, [r7, #8]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002b6e:	68ba      	ldr	r2, [r7, #8]
 8002b70:	fa92 f2a2 	rbit	r2, r2
 8002b74:	607a      	str	r2, [r7, #4]
  return result;
 8002b76:	687a      	ldr	r2, [r7, #4]
 8002b78:	fab2 f282 	clz	r2, r2
 8002b7c:	b2d2      	uxtb	r2, r2
 8002b7e:	40d3      	lsrs	r3, r2
 8002b80:	4a1c      	ldr	r2, [pc, #112]	; (8002bf4 <HAL_RCC_GetSysClockFreq+0xc8>)
 8002b82:	5cd3      	ldrb	r3, [r2, r3]
 8002b84:	617b      	str	r3, [r7, #20]
      prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV) >> POSITION_VAL(RCC_CFGR2_PREDIV)];
 8002b86:	4b19      	ldr	r3, [pc, #100]	; (8002bec <HAL_RCC_GetSysClockFreq+0xc0>)
 8002b88:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002b8a:	f003 030f 	and.w	r3, r3, #15
 8002b8e:	220f      	movs	r2, #15
 8002b90:	613a      	str	r2, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002b92:	693a      	ldr	r2, [r7, #16]
 8002b94:	fa92 f2a2 	rbit	r2, r2
 8002b98:	60fa      	str	r2, [r7, #12]
  return result;
 8002b9a:	68fa      	ldr	r2, [r7, #12]
 8002b9c:	fab2 f282 	clz	r2, r2
 8002ba0:	b2d2      	uxtb	r2, r2
 8002ba2:	40d3      	lsrs	r3, r2
 8002ba4:	4a14      	ldr	r2, [pc, #80]	; (8002bf8 <HAL_RCC_GetSysClockFreq+0xcc>)
 8002ba6:	5cd3      	ldrb	r3, [r2, r3]
 8002ba8:	61bb      	str	r3, [r7, #24]
#if defined(RCC_CFGR_PLLSRC_HSI_DIV2)
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI)
 8002baa:	69fb      	ldr	r3, [r7, #28]
 8002bac:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002bb0:	2b00      	cmp	r3, #0
 8002bb2:	d008      	beq.n	8002bc6 <HAL_RCC_GetSysClockFreq+0x9a>
      {
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSE_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 8002bb4:	4a0e      	ldr	r2, [pc, #56]	; (8002bf0 <HAL_RCC_GetSysClockFreq+0xc4>)
 8002bb6:	69bb      	ldr	r3, [r7, #24]
 8002bb8:	fbb2 f2f3 	udiv	r2, r2, r3
 8002bbc:	697b      	ldr	r3, [r7, #20]
 8002bbe:	fb02 f303 	mul.w	r3, r2, r3
 8002bc2:	627b      	str	r3, [r7, #36]	; 0x24
 8002bc4:	e004      	b.n	8002bd0 <HAL_RCC_GetSysClockFreq+0xa4>
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((uint64_t) (HSI_VALUE >> 1U) * ((uint64_t) pllmul));
 8002bc6:	697b      	ldr	r3, [r7, #20]
 8002bc8:	4a0c      	ldr	r2, [pc, #48]	; (8002bfc <HAL_RCC_GetSysClockFreq+0xd0>)
 8002bca:	fb02 f303 	mul.w	r3, r2, r3
 8002bce:	627b      	str	r3, [r7, #36]	; 0x24
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSI_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
      }
#endif /* RCC_CFGR_PLLSRC_HSI_DIV2 */
      sysclockfreq = pllclk;
 8002bd0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002bd2:	623b      	str	r3, [r7, #32]
      break;
 8002bd4:	e002      	b.n	8002bdc <HAL_RCC_GetSysClockFreq+0xb0>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8002bd6:	4b0a      	ldr	r3, [pc, #40]	; (8002c00 <HAL_RCC_GetSysClockFreq+0xd4>)
 8002bd8:	623b      	str	r3, [r7, #32]
      break;
 8002bda:	bf00      	nop
    }
  }
  return sysclockfreq;
 8002bdc:	6a3b      	ldr	r3, [r7, #32]
}
 8002bde:	4618      	mov	r0, r3
 8002be0:	372c      	adds	r7, #44	; 0x2c
 8002be2:	46bd      	mov	sp, r7
 8002be4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002be8:	4770      	bx	lr
 8002bea:	bf00      	nop
 8002bec:	40021000 	.word	0x40021000
 8002bf0:	01e84800 	.word	0x01e84800
 8002bf4:	080053d0 	.word	0x080053d0
 8002bf8:	080053e0 	.word	0x080053e0
 8002bfc:	003d0900 	.word	0x003d0900
 8002c00:	007a1200 	.word	0x007a1200

08002c04 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency 
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002c04:	b480      	push	{r7}
 8002c06:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8002c08:	4b03      	ldr	r3, [pc, #12]	; (8002c18 <HAL_RCC_GetHCLKFreq+0x14>)
 8002c0a:	681b      	ldr	r3, [r3, #0]
}
 8002c0c:	4618      	mov	r0, r3
 8002c0e:	46bd      	mov	sp, r7
 8002c10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c14:	4770      	bx	lr
 8002c16:	bf00      	nop
 8002c18:	20000000 	.word	0x20000000

08002c1c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8002c1c:	b580      	push	{r7, lr}
 8002c1e:	b082      	sub	sp, #8
 8002c20:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_BITNUMBER]);
 8002c22:	f7ff ffef 	bl	8002c04 <HAL_RCC_GetHCLKFreq>
 8002c26:	4601      	mov	r1, r0
 8002c28:	4b0b      	ldr	r3, [pc, #44]	; (8002c58 <HAL_RCC_GetPCLK1Freq+0x3c>)
 8002c2a:	685b      	ldr	r3, [r3, #4]
 8002c2c:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8002c30:	f44f 62e0 	mov.w	r2, #1792	; 0x700
 8002c34:	607a      	str	r2, [r7, #4]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002c36:	687a      	ldr	r2, [r7, #4]
 8002c38:	fa92 f2a2 	rbit	r2, r2
 8002c3c:	603a      	str	r2, [r7, #0]
  return result;
 8002c3e:	683a      	ldr	r2, [r7, #0]
 8002c40:	fab2 f282 	clz	r2, r2
 8002c44:	b2d2      	uxtb	r2, r2
 8002c46:	40d3      	lsrs	r3, r2
 8002c48:	4a04      	ldr	r2, [pc, #16]	; (8002c5c <HAL_RCC_GetPCLK1Freq+0x40>)
 8002c4a:	5cd3      	ldrb	r3, [r2, r3]
 8002c4c:	fa21 f303 	lsr.w	r3, r1, r3
}    
 8002c50:	4618      	mov	r0, r3
 8002c52:	3708      	adds	r7, #8
 8002c54:	46bd      	mov	sp, r7
 8002c56:	bd80      	pop	{r7, pc}
 8002c58:	40021000 	.word	0x40021000
 8002c5c:	080053c8 	.word	0x080053c8

08002c60 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8002c60:	b580      	push	{r7, lr}
 8002c62:	b082      	sub	sp, #8
 8002c64:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_BITNUMBER]);
 8002c66:	f7ff ffcd 	bl	8002c04 <HAL_RCC_GetHCLKFreq>
 8002c6a:	4601      	mov	r1, r0
 8002c6c:	4b0b      	ldr	r3, [pc, #44]	; (8002c9c <HAL_RCC_GetPCLK2Freq+0x3c>)
 8002c6e:	685b      	ldr	r3, [r3, #4]
 8002c70:	f403 5360 	and.w	r3, r3, #14336	; 0x3800
 8002c74:	f44f 5260 	mov.w	r2, #14336	; 0x3800
 8002c78:	607a      	str	r2, [r7, #4]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002c7a:	687a      	ldr	r2, [r7, #4]
 8002c7c:	fa92 f2a2 	rbit	r2, r2
 8002c80:	603a      	str	r2, [r7, #0]
  return result;
 8002c82:	683a      	ldr	r2, [r7, #0]
 8002c84:	fab2 f282 	clz	r2, r2
 8002c88:	b2d2      	uxtb	r2, r2
 8002c8a:	40d3      	lsrs	r3, r2
 8002c8c:	4a04      	ldr	r2, [pc, #16]	; (8002ca0 <HAL_RCC_GetPCLK2Freq+0x40>)
 8002c8e:	5cd3      	ldrb	r3, [r2, r3]
 8002c90:	fa21 f303 	lsr.w	r3, r1, r3
} 
 8002c94:	4618      	mov	r0, r3
 8002c96:	3708      	adds	r7, #8
 8002c98:	46bd      	mov	sp, r7
 8002c9a:	bd80      	pop	{r7, pc}
 8002c9c:	40021000 	.word	0x40021000
 8002ca0:	080053c8 	.word	0x080053c8

08002ca4 <HAL_RCCEx_PeriphCLKConfig>:
  *         When the TIMx clock source is PLL clock, so the TIMx clock is PLL clock x 2.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8002ca4:	b580      	push	{r7, lr}
 8002ca6:	b092      	sub	sp, #72	; 0x48
 8002ca8:	af00      	add	r7, sp, #0
 8002caa:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8002cac:	2300      	movs	r3, #0
 8002cae:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t temp_reg = 0U;
 8002cb0:	2300      	movs	r3, #0
 8002cb2:	63fb      	str	r3, [r7, #60]	; 0x3c
  FlagStatus       pwrclkchanged = RESET;
 8002cb4:	2300      	movs	r3, #0
 8002cb6:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
    
  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));
  
  /*---------------------------- RTC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8002cba:	687b      	ldr	r3, [r7, #4]
 8002cbc:	681b      	ldr	r3, [r3, #0]
 8002cbe:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002cc2:	2b00      	cmp	r3, #0
 8002cc4:	f000 80d4 	beq.w	8002e70 <HAL_RCCEx_PeriphCLKConfig+0x1cc>


    /* As soon as function is called to change RTC clock source, activation of the 
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002cc8:	4b4e      	ldr	r3, [pc, #312]	; (8002e04 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002cca:	69db      	ldr	r3, [r3, #28]
 8002ccc:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002cd0:	2b00      	cmp	r3, #0
 8002cd2:	d10e      	bne.n	8002cf2 <HAL_RCCEx_PeriphCLKConfig+0x4e>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002cd4:	4b4b      	ldr	r3, [pc, #300]	; (8002e04 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002cd6:	69db      	ldr	r3, [r3, #28]
 8002cd8:	4a4a      	ldr	r2, [pc, #296]	; (8002e04 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002cda:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002cde:	61d3      	str	r3, [r2, #28]
 8002ce0:	4b48      	ldr	r3, [pc, #288]	; (8002e04 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002ce2:	69db      	ldr	r3, [r3, #28]
 8002ce4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002ce8:	60bb      	str	r3, [r7, #8]
 8002cea:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002cec:	2301      	movs	r3, #1
 8002cee:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002cf2:	4b45      	ldr	r3, [pc, #276]	; (8002e08 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8002cf4:	681b      	ldr	r3, [r3, #0]
 8002cf6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002cfa:	2b00      	cmp	r3, #0
 8002cfc:	d118      	bne.n	8002d30 <HAL_RCCEx_PeriphCLKConfig+0x8c>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8002cfe:	4b42      	ldr	r3, [pc, #264]	; (8002e08 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8002d00:	681b      	ldr	r3, [r3, #0]
 8002d02:	4a41      	ldr	r2, [pc, #260]	; (8002e08 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8002d04:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002d08:	6013      	str	r3, [r2, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002d0a:	f7fd ffe7 	bl	8000cdc <HAL_GetTick>
 8002d0e:	6438      	str	r0, [r7, #64]	; 0x40
      
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002d10:	e008      	b.n	8002d24 <HAL_RCCEx_PeriphCLKConfig+0x80>
      {
          if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002d12:	f7fd ffe3 	bl	8000cdc <HAL_GetTick>
 8002d16:	4602      	mov	r2, r0
 8002d18:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8002d1a:	1ad3      	subs	r3, r2, r3
 8002d1c:	2b64      	cmp	r3, #100	; 0x64
 8002d1e:	d901      	bls.n	8002d24 <HAL_RCCEx_PeriphCLKConfig+0x80>
        {
          return HAL_TIMEOUT;
 8002d20:	2303      	movs	r3, #3
 8002d22:	e12d      	b.n	8002f80 <HAL_RCCEx_PeriphCLKConfig+0x2dc>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002d24:	4b38      	ldr	r3, [pc, #224]	; (8002e08 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8002d26:	681b      	ldr	r3, [r3, #0]
 8002d28:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002d2c:	2b00      	cmp	r3, #0
 8002d2e:	d0f0      	beq.n	8002d12 <HAL_RCCEx_PeriphCLKConfig+0x6e>
        }
      }
    }
    
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */ 
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8002d30:	4b34      	ldr	r3, [pc, #208]	; (8002e04 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002d32:	6a1b      	ldr	r3, [r3, #32]
 8002d34:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002d38:	63fb      	str	r3, [r7, #60]	; 0x3c
    if((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8002d3a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8002d3c:	2b00      	cmp	r3, #0
 8002d3e:	f000 8084 	beq.w	8002e4a <HAL_RCCEx_PeriphCLKConfig+0x1a6>
 8002d42:	687b      	ldr	r3, [r7, #4]
 8002d44:	685b      	ldr	r3, [r3, #4]
 8002d46:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002d4a:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8002d4c:	429a      	cmp	r2, r3
 8002d4e:	d07c      	beq.n	8002e4a <HAL_RCCEx_PeriphCLKConfig+0x1a6>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8002d50:	4b2c      	ldr	r3, [pc, #176]	; (8002e04 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002d52:	6a1b      	ldr	r3, [r3, #32]
 8002d54:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002d58:	63fb      	str	r3, [r7, #60]	; 0x3c
 8002d5a:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8002d5e:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002d60:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002d62:	fa93 f3a3 	rbit	r3, r3
 8002d66:	62fb      	str	r3, [r7, #44]	; 0x2c
  return result;
 8002d68:	6afb      	ldr	r3, [r7, #44]	; 0x2c
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8002d6a:	fab3 f383 	clz	r3, r3
 8002d6e:	b2db      	uxtb	r3, r3
 8002d70:	461a      	mov	r2, r3
 8002d72:	4b26      	ldr	r3, [pc, #152]	; (8002e0c <HAL_RCCEx_PeriphCLKConfig+0x168>)
 8002d74:	4413      	add	r3, r2
 8002d76:	009b      	lsls	r3, r3, #2
 8002d78:	461a      	mov	r2, r3
 8002d7a:	2301      	movs	r3, #1
 8002d7c:	6013      	str	r3, [r2, #0]
 8002d7e:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8002d82:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002d84:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002d86:	fa93 f3a3 	rbit	r3, r3
 8002d8a:	637b      	str	r3, [r7, #52]	; 0x34
  return result;
 8002d8c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
      __HAL_RCC_BACKUPRESET_RELEASE();
 8002d8e:	fab3 f383 	clz	r3, r3
 8002d92:	b2db      	uxtb	r3, r3
 8002d94:	461a      	mov	r2, r3
 8002d96:	4b1d      	ldr	r3, [pc, #116]	; (8002e0c <HAL_RCCEx_PeriphCLKConfig+0x168>)
 8002d98:	4413      	add	r3, r2
 8002d9a:	009b      	lsls	r3, r3, #2
 8002d9c:	461a      	mov	r2, r3
 8002d9e:	2300      	movs	r3, #0
 8002da0:	6013      	str	r3, [r2, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
 8002da2:	4a18      	ldr	r2, [pc, #96]	; (8002e04 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002da4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8002da6:	6213      	str	r3, [r2, #32]
    
      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 8002da8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8002daa:	f003 0301 	and.w	r3, r3, #1
 8002dae:	2b00      	cmp	r3, #0
 8002db0:	d04b      	beq.n	8002e4a <HAL_RCCEx_PeriphCLKConfig+0x1a6>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002db2:	f7fd ff93 	bl	8000cdc <HAL_GetTick>
 8002db6:	6438      	str	r0, [r7, #64]	; 0x40
        
        /* Wait till LSE is ready */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002db8:	e00a      	b.n	8002dd0 <HAL_RCCEx_PeriphCLKConfig+0x12c>
        {
            if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002dba:	f7fd ff8f 	bl	8000cdc <HAL_GetTick>
 8002dbe:	4602      	mov	r2, r0
 8002dc0:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8002dc2:	1ad3      	subs	r3, r2, r3
 8002dc4:	f241 3288 	movw	r2, #5000	; 0x1388
 8002dc8:	4293      	cmp	r3, r2
 8002dca:	d901      	bls.n	8002dd0 <HAL_RCCEx_PeriphCLKConfig+0x12c>
          {
            return HAL_TIMEOUT;
 8002dcc:	2303      	movs	r3, #3
 8002dce:	e0d7      	b.n	8002f80 <HAL_RCCEx_PeriphCLKConfig+0x2dc>
 8002dd0:	2302      	movs	r3, #2
 8002dd2:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002dd4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002dd6:	fa93 f3a3 	rbit	r3, r3
 8002dda:	627b      	str	r3, [r7, #36]	; 0x24
 8002ddc:	2302      	movs	r3, #2
 8002dde:	623b      	str	r3, [r7, #32]
 8002de0:	6a3b      	ldr	r3, [r7, #32]
 8002de2:	fa93 f3a3 	rbit	r3, r3
 8002de6:	61fb      	str	r3, [r7, #28]
  return result;
 8002de8:	69fb      	ldr	r3, [r7, #28]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002dea:	fab3 f383 	clz	r3, r3
 8002dee:	b2db      	uxtb	r3, r3
 8002df0:	095b      	lsrs	r3, r3, #5
 8002df2:	b2db      	uxtb	r3, r3
 8002df4:	f043 0302 	orr.w	r3, r3, #2
 8002df8:	b2db      	uxtb	r3, r3
 8002dfa:	2b02      	cmp	r3, #2
 8002dfc:	d108      	bne.n	8002e10 <HAL_RCCEx_PeriphCLKConfig+0x16c>
 8002dfe:	4b01      	ldr	r3, [pc, #4]	; (8002e04 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002e00:	6a1b      	ldr	r3, [r3, #32]
 8002e02:	e00d      	b.n	8002e20 <HAL_RCCEx_PeriphCLKConfig+0x17c>
 8002e04:	40021000 	.word	0x40021000
 8002e08:	40007000 	.word	0x40007000
 8002e0c:	10908100 	.word	0x10908100
 8002e10:	2302      	movs	r3, #2
 8002e12:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002e14:	69bb      	ldr	r3, [r7, #24]
 8002e16:	fa93 f3a3 	rbit	r3, r3
 8002e1a:	617b      	str	r3, [r7, #20]
 8002e1c:	4b5a      	ldr	r3, [pc, #360]	; (8002f88 <HAL_RCCEx_PeriphCLKConfig+0x2e4>)
 8002e1e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002e20:	2202      	movs	r2, #2
 8002e22:	613a      	str	r2, [r7, #16]
 8002e24:	693a      	ldr	r2, [r7, #16]
 8002e26:	fa92 f2a2 	rbit	r2, r2
 8002e2a:	60fa      	str	r2, [r7, #12]
  return result;
 8002e2c:	68fa      	ldr	r2, [r7, #12]
 8002e2e:	fab2 f282 	clz	r2, r2
 8002e32:	b2d2      	uxtb	r2, r2
 8002e34:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8002e38:	b2d2      	uxtb	r2, r2
 8002e3a:	f002 021f 	and.w	r2, r2, #31
 8002e3e:	2101      	movs	r1, #1
 8002e40:	fa01 f202 	lsl.w	r2, r1, r2
 8002e44:	4013      	ands	r3, r2
 8002e46:	2b00      	cmp	r3, #0
 8002e48:	d0b7      	beq.n	8002dba <HAL_RCCEx_PeriphCLKConfig+0x116>
          }      
        }  
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection); 
 8002e4a:	4b4f      	ldr	r3, [pc, #316]	; (8002f88 <HAL_RCCEx_PeriphCLKConfig+0x2e4>)
 8002e4c:	6a1b      	ldr	r3, [r3, #32]
 8002e4e:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8002e52:	687b      	ldr	r3, [r7, #4]
 8002e54:	685b      	ldr	r3, [r3, #4]
 8002e56:	494c      	ldr	r1, [pc, #304]	; (8002f88 <HAL_RCCEx_PeriphCLKConfig+0x2e4>)
 8002e58:	4313      	orrs	r3, r2
 8002e5a:	620b      	str	r3, [r1, #32]

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 8002e5c:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 8002e60:	2b01      	cmp	r3, #1
 8002e62:	d105      	bne.n	8002e70 <HAL_RCCEx_PeriphCLKConfig+0x1cc>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002e64:	4b48      	ldr	r3, [pc, #288]	; (8002f88 <HAL_RCCEx_PeriphCLKConfig+0x2e4>)
 8002e66:	69db      	ldr	r3, [r3, #28]
 8002e68:	4a47      	ldr	r2, [pc, #284]	; (8002f88 <HAL_RCCEx_PeriphCLKConfig+0x2e4>)
 8002e6a:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002e6e:	61d3      	str	r3, [r2, #28]
    }
  }

  /*------------------------------- USART1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8002e70:	687b      	ldr	r3, [r7, #4]
 8002e72:	681b      	ldr	r3, [r3, #0]
 8002e74:	f003 0301 	and.w	r3, r3, #1
 8002e78:	2b00      	cmp	r3, #0
 8002e7a:	d008      	beq.n	8002e8e <HAL_RCCEx_PeriphCLKConfig+0x1ea>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));
    
    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8002e7c:	4b42      	ldr	r3, [pc, #264]	; (8002f88 <HAL_RCCEx_PeriphCLKConfig+0x2e4>)
 8002e7e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002e80:	f023 0203 	bic.w	r2, r3, #3
 8002e84:	687b      	ldr	r3, [r7, #4]
 8002e86:	689b      	ldr	r3, [r3, #8]
 8002e88:	493f      	ldr	r1, [pc, #252]	; (8002f88 <HAL_RCCEx_PeriphCLKConfig+0x2e4>)
 8002e8a:	4313      	orrs	r3, r2
 8002e8c:	630b      	str	r3, [r1, #48]	; 0x30
  }

#if defined(RCC_CFGR3_USART2SW)
  /*----------------------------- USART2 Configuration --------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8002e8e:	687b      	ldr	r3, [r7, #4]
 8002e90:	681b      	ldr	r3, [r3, #0]
 8002e92:	f003 0302 	and.w	r3, r3, #2
 8002e96:	2b00      	cmp	r3, #0
 8002e98:	d008      	beq.n	8002eac <HAL_RCCEx_PeriphCLKConfig+0x208>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));
    
    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8002e9a:	4b3b      	ldr	r3, [pc, #236]	; (8002f88 <HAL_RCCEx_PeriphCLKConfig+0x2e4>)
 8002e9c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002e9e:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8002ea2:	687b      	ldr	r3, [r7, #4]
 8002ea4:	68db      	ldr	r3, [r3, #12]
 8002ea6:	4938      	ldr	r1, [pc, #224]	; (8002f88 <HAL_RCCEx_PeriphCLKConfig+0x2e4>)
 8002ea8:	4313      	orrs	r3, r2
 8002eaa:	630b      	str	r3, [r1, #48]	; 0x30
  }
#endif /* RCC_CFGR3_USART2SW */

#if defined(RCC_CFGR3_USART3SW)
  /*------------------------------ USART3 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8002eac:	687b      	ldr	r3, [r7, #4]
 8002eae:	681b      	ldr	r3, [r3, #0]
 8002eb0:	f003 0304 	and.w	r3, r3, #4
 8002eb4:	2b00      	cmp	r3, #0
 8002eb6:	d008      	beq.n	8002eca <HAL_RCCEx_PeriphCLKConfig+0x226>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));
    
    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8002eb8:	4b33      	ldr	r3, [pc, #204]	; (8002f88 <HAL_RCCEx_PeriphCLKConfig+0x2e4>)
 8002eba:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002ebc:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 8002ec0:	687b      	ldr	r3, [r7, #4]
 8002ec2:	691b      	ldr	r3, [r3, #16]
 8002ec4:	4930      	ldr	r1, [pc, #192]	; (8002f88 <HAL_RCCEx_PeriphCLKConfig+0x2e4>)
 8002ec6:	4313      	orrs	r3, r2
 8002ec8:	630b      	str	r3, [r1, #48]	; 0x30
  }
#endif /* RCC_CFGR3_USART3SW */

  /*------------------------------ I2C1 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8002eca:	687b      	ldr	r3, [r7, #4]
 8002ecc:	681b      	ldr	r3, [r3, #0]
 8002ece:	f003 0320 	and.w	r3, r3, #32
 8002ed2:	2b00      	cmp	r3, #0
 8002ed4:	d008      	beq.n	8002ee8 <HAL_RCCEx_PeriphCLKConfig+0x244>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));
    
    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8002ed6:	4b2c      	ldr	r3, [pc, #176]	; (8002f88 <HAL_RCCEx_PeriphCLKConfig+0x2e4>)
 8002ed8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002eda:	f023 0210 	bic.w	r2, r3, #16
 8002ede:	687b      	ldr	r3, [r7, #4]
 8002ee0:	695b      	ldr	r3, [r3, #20]
 8002ee2:	4929      	ldr	r1, [pc, #164]	; (8002f88 <HAL_RCCEx_PeriphCLKConfig+0x2e4>)
 8002ee4:	4313      	orrs	r3, r2
 8002ee6:	630b      	str	r3, [r1, #48]	; 0x30
#if defined(STM32F302xE) || defined(STM32F303xE)\
 || defined(STM32F302xC) || defined(STM32F303xC)\
 || defined(STM32F302x8)                        \
 || defined(STM32F373xC)
  /*------------------------------ USB Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 8002ee8:	687b      	ldr	r3, [r7, #4]
 8002eea:	681b      	ldr	r3, [r3, #0]
 8002eec:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002ef0:	2b00      	cmp	r3, #0
 8002ef2:	d008      	beq.n	8002f06 <HAL_RCCEx_PeriphCLKConfig+0x262>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->USBClockSelection));
    
    /* Configure the USB clock source */
    __HAL_RCC_USB_CONFIG(PeriphClkInit->USBClockSelection);
 8002ef4:	4b24      	ldr	r3, [pc, #144]	; (8002f88 <HAL_RCCEx_PeriphCLKConfig+0x2e4>)
 8002ef6:	685b      	ldr	r3, [r3, #4]
 8002ef8:	f423 0280 	bic.w	r2, r3, #4194304	; 0x400000
 8002efc:	687b      	ldr	r3, [r7, #4]
 8002efe:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002f00:	4921      	ldr	r1, [pc, #132]	; (8002f88 <HAL_RCCEx_PeriphCLKConfig+0x2e4>)
 8002f02:	4313      	orrs	r3, r2
 8002f04:	604b      	str	r3, [r1, #4]
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)\
 || defined(STM32F373xC) || defined(STM32F378xx)

  /*------------------------------ I2C2 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8002f06:	687b      	ldr	r3, [r7, #4]
 8002f08:	681b      	ldr	r3, [r3, #0]
 8002f0a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002f0e:	2b00      	cmp	r3, #0
 8002f10:	d008      	beq.n	8002f24 <HAL_RCCEx_PeriphCLKConfig+0x280>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));
    
    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8002f12:	4b1d      	ldr	r3, [pc, #116]	; (8002f88 <HAL_RCCEx_PeriphCLKConfig+0x2e4>)
 8002f14:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002f16:	f023 0220 	bic.w	r2, r3, #32
 8002f1a:	687b      	ldr	r3, [r7, #4]
 8002f1c:	699b      	ldr	r3, [r3, #24]
 8002f1e:	491a      	ldr	r1, [pc, #104]	; (8002f88 <HAL_RCCEx_PeriphCLKConfig+0x2e4>)
 8002f20:	4313      	orrs	r3, r2
 8002f22:	630b      	str	r3, [r1, #48]	; 0x30
       /* STM32F303xC || STM32F358xx    */

#if defined(STM32F373xC) || defined(STM32F378xx)
      
  /*------------------------------ ADC1 clock Configuration ------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC1) == RCC_PERIPHCLK_ADC1)
 8002f24:	687b      	ldr	r3, [r7, #4]
 8002f26:	681b      	ldr	r3, [r3, #0]
 8002f28:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002f2c:	2b00      	cmp	r3, #0
 8002f2e:	d008      	beq.n	8002f42 <HAL_RCCEx_PeriphCLKConfig+0x29e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC1PCLK2_DIV(PeriphClkInit->Adc1ClockSelection));
    
    /* Configure the ADC1 clock source */
    __HAL_RCC_ADC1_CONFIG(PeriphClkInit->Adc1ClockSelection);
 8002f30:	4b15      	ldr	r3, [pc, #84]	; (8002f88 <HAL_RCCEx_PeriphCLKConfig+0x2e4>)
 8002f32:	685b      	ldr	r3, [r3, #4]
 8002f34:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8002f38:	687b      	ldr	r3, [r7, #4]
 8002f3a:	69db      	ldr	r3, [r3, #28]
 8002f3c:	4912      	ldr	r1, [pc, #72]	; (8002f88 <HAL_RCCEx_PeriphCLKConfig+0x2e4>)
 8002f3e:	4313      	orrs	r3, r2
 8002f40:	604b      	str	r3, [r1, #4]
#endif /* STM32F334x8 */

#if defined(STM32F373xC) || defined(STM32F378xx)
  
  /*------------------------------ SDADC clock Configuration -------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDADC) == RCC_PERIPHCLK_SDADC)
 8002f42:	687b      	ldr	r3, [r7, #4]
 8002f44:	681b      	ldr	r3, [r3, #0]
 8002f46:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8002f4a:	2b00      	cmp	r3, #0
 8002f4c:	d008      	beq.n	8002f60 <HAL_RCCEx_PeriphCLKConfig+0x2bc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDADCSYSCLK_DIV(PeriphClkInit->SdadcClockSelection));
    
    /* Configure the SDADC clock prescaler */
    __HAL_RCC_SDADC_CONFIG(PeriphClkInit->SdadcClockSelection);
 8002f4e:	4b0e      	ldr	r3, [pc, #56]	; (8002f88 <HAL_RCCEx_PeriphCLKConfig+0x2e4>)
 8002f50:	685b      	ldr	r3, [r3, #4]
 8002f52:	f023 4278 	bic.w	r2, r3, #4160749568	; 0xf8000000
 8002f56:	687b      	ldr	r3, [r7, #4]
 8002f58:	6a1b      	ldr	r3, [r3, #32]
 8002f5a:	490b      	ldr	r1, [pc, #44]	; (8002f88 <HAL_RCCEx_PeriphCLKConfig+0x2e4>)
 8002f5c:	4313      	orrs	r3, r2
 8002f5e:	604b      	str	r3, [r1, #4]
  }

  /*------------------------------ CEC clock Configuration -------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 8002f60:	687b      	ldr	r3, [r7, #4]
 8002f62:	681b      	ldr	r3, [r3, #0]
 8002f64:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002f68:	2b00      	cmp	r3, #0
 8002f6a:	d008      	beq.n	8002f7e <HAL_RCCEx_PeriphCLKConfig+0x2da>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));
    
    /* Configure the CEC clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 8002f6c:	4b06      	ldr	r3, [pc, #24]	; (8002f88 <HAL_RCCEx_PeriphCLKConfig+0x2e4>)
 8002f6e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002f70:	f023 0240 	bic.w	r2, r3, #64	; 0x40
 8002f74:	687b      	ldr	r3, [r7, #4]
 8002f76:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002f78:	4903      	ldr	r1, [pc, #12]	; (8002f88 <HAL_RCCEx_PeriphCLKConfig+0x2e4>)
 8002f7a:	4313      	orrs	r3, r2
 8002f7c:	630b      	str	r3, [r1, #48]	; 0x30
    __HAL_RCC_TIM20_CONFIG(PeriphClkInit->Tim20ClockSelection);
  }
#endif /* STM32F303xE || STM32F398xx */  

  
  return HAL_OK;
 8002f7e:	2300      	movs	r3, #0
}
 8002f80:	4618      	mov	r0, r3
 8002f82:	3748      	adds	r7, #72	; 0x48
 8002f84:	46bd      	mov	sp, r7
 8002f86:	bd80      	pop	{r7, pc}
 8002f88:	40021000 	.word	0x40021000

08002f8c <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8002f8c:	b580      	push	{r7, lr}
 8002f8e:	b084      	sub	sp, #16
 8002f90:	af00      	add	r7, sp, #0
 8002f92:	6078      	str	r0, [r7, #4]
  uint32_t frxth;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8002f94:	687b      	ldr	r3, [r7, #4]
 8002f96:	2b00      	cmp	r3, #0
 8002f98:	d101      	bne.n	8002f9e <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8002f9a:	2301      	movs	r3, #1
 8002f9c:	e09d      	b.n	80030da <HAL_SPI_Init+0x14e>
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_NSSP(hspi->Init.NSSPMode));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8002f9e:	687b      	ldr	r3, [r7, #4]
 8002fa0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002fa2:	2b00      	cmp	r3, #0
 8002fa4:	d108      	bne.n	8002fb8 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8002fa6:	687b      	ldr	r3, [r7, #4]
 8002fa8:	685b      	ldr	r3, [r3, #4]
 8002faa:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8002fae:	d009      	beq.n	8002fc4 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8002fb0:	687b      	ldr	r3, [r7, #4]
 8002fb2:	2200      	movs	r2, #0
 8002fb4:	61da      	str	r2, [r3, #28]
 8002fb6:	e005      	b.n	8002fc4 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8002fb8:	687b      	ldr	r3, [r7, #4]
 8002fba:	2200      	movs	r2, #0
 8002fbc:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8002fbe:	687b      	ldr	r3, [r7, #4]
 8002fc0:	2200      	movs	r2, #0
 8002fc2:	615a      	str	r2, [r3, #20]
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_LENGTH(hspi->Init.CRCLength));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8002fc4:	687b      	ldr	r3, [r7, #4]
 8002fc6:	2200      	movs	r2, #0
 8002fc8:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8002fca:	687b      	ldr	r3, [r7, #4]
 8002fcc:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 8002fd0:	b2db      	uxtb	r3, r3
 8002fd2:	2b00      	cmp	r3, #0
 8002fd4:	d106      	bne.n	8002fe4 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8002fd6:	687b      	ldr	r3, [r7, #4]
 8002fd8:	2200      	movs	r2, #0
 8002fda:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8002fde:	6878      	ldr	r0, [r7, #4]
 8002fe0:	f7fd fbce 	bl	8000780 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8002fe4:	687b      	ldr	r3, [r7, #4]
 8002fe6:	2202      	movs	r2, #2
 8002fe8:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8002fec:	687b      	ldr	r3, [r7, #4]
 8002fee:	681b      	ldr	r3, [r3, #0]
 8002ff0:	681a      	ldr	r2, [r3, #0]
 8002ff2:	687b      	ldr	r3, [r7, #4]
 8002ff4:	681b      	ldr	r3, [r3, #0]
 8002ff6:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8002ffa:	601a      	str	r2, [r3, #0]

  /* Align by default the rs fifo threshold on the data size */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8002ffc:	687b      	ldr	r3, [r7, #4]
 8002ffe:	68db      	ldr	r3, [r3, #12]
 8003000:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8003004:	d902      	bls.n	800300c <HAL_SPI_Init+0x80>
  {
    frxth = SPI_RXFIFO_THRESHOLD_HF;
 8003006:	2300      	movs	r3, #0
 8003008:	60fb      	str	r3, [r7, #12]
 800300a:	e002      	b.n	8003012 <HAL_SPI_Init+0x86>
  }
  else
  {
    frxth = SPI_RXFIFO_THRESHOLD_QF;
 800300c:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8003010:	60fb      	str	r3, [r7, #12]
  }

  /* CRC calculation is valid only for 16Bit and 8 Bit */
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
 8003012:	687b      	ldr	r3, [r7, #4]
 8003014:	68db      	ldr	r3, [r3, #12]
 8003016:	f5b3 6f70 	cmp.w	r3, #3840	; 0xf00
 800301a:	d007      	beq.n	800302c <HAL_SPI_Init+0xa0>
 800301c:	687b      	ldr	r3, [r7, #4]
 800301e:	68db      	ldr	r3, [r3, #12]
 8003020:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8003024:	d002      	beq.n	800302c <HAL_SPI_Init+0xa0>
  {
    /* CRC must be disabled */
    hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8003026:	687b      	ldr	r3, [r7, #4]
 8003028:	2200      	movs	r2, #0
 800302a:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 800302c:	687b      	ldr	r3, [r7, #4]
 800302e:	685b      	ldr	r3, [r3, #4]
 8003030:	f403 7282 	and.w	r2, r3, #260	; 0x104
 8003034:	687b      	ldr	r3, [r7, #4]
 8003036:	689b      	ldr	r3, [r3, #8]
 8003038:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 800303c:	431a      	orrs	r2, r3
 800303e:	687b      	ldr	r3, [r7, #4]
 8003040:	691b      	ldr	r3, [r3, #16]
 8003042:	f003 0302 	and.w	r3, r3, #2
 8003046:	431a      	orrs	r2, r3
 8003048:	687b      	ldr	r3, [r7, #4]
 800304a:	695b      	ldr	r3, [r3, #20]
 800304c:	f003 0301 	and.w	r3, r3, #1
 8003050:	431a      	orrs	r2, r3
 8003052:	687b      	ldr	r3, [r7, #4]
 8003054:	699b      	ldr	r3, [r3, #24]
 8003056:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800305a:	431a      	orrs	r2, r3
 800305c:	687b      	ldr	r3, [r7, #4]
 800305e:	69db      	ldr	r3, [r3, #28]
 8003060:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8003064:	431a      	orrs	r2, r3
 8003066:	687b      	ldr	r3, [r7, #4]
 8003068:	6a1b      	ldr	r3, [r3, #32]
 800306a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800306e:	ea42 0103 	orr.w	r1, r2, r3
 8003072:	687b      	ldr	r3, [r7, #4]
 8003074:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003076:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 800307a:	687b      	ldr	r3, [r7, #4]
 800307c:	681b      	ldr	r3, [r3, #0]
 800307e:	430a      	orrs	r2, r1
 8003080:	601a      	str	r2, [r3, #0]
    }
  }
#endif /* USE_SPI_CRC */

  /* Configure : NSS management, TI Mode, NSS Pulse, Data size and Rx Fifo threshold */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) |
 8003082:	687b      	ldr	r3, [r7, #4]
 8003084:	699b      	ldr	r3, [r3, #24]
 8003086:	0c1b      	lsrs	r3, r3, #16
 8003088:	f003 0204 	and.w	r2, r3, #4
 800308c:	687b      	ldr	r3, [r7, #4]
 800308e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003090:	f003 0310 	and.w	r3, r3, #16
 8003094:	431a      	orrs	r2, r3
 8003096:	687b      	ldr	r3, [r7, #4]
 8003098:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800309a:	f003 0308 	and.w	r3, r3, #8
 800309e:	431a      	orrs	r2, r3
 80030a0:	687b      	ldr	r3, [r7, #4]
 80030a2:	68db      	ldr	r3, [r3, #12]
 80030a4:	f403 6370 	and.w	r3, r3, #3840	; 0xf00
 80030a8:	ea42 0103 	orr.w	r1, r2, r3
 80030ac:	68fb      	ldr	r3, [r7, #12]
 80030ae:	f403 5280 	and.w	r2, r3, #4096	; 0x1000
 80030b2:	687b      	ldr	r3, [r7, #4]
 80030b4:	681b      	ldr	r3, [r3, #0]
 80030b6:	430a      	orrs	r2, r1
 80030b8:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 80030ba:	687b      	ldr	r3, [r7, #4]
 80030bc:	681b      	ldr	r3, [r3, #0]
 80030be:	69da      	ldr	r2, [r3, #28]
 80030c0:	687b      	ldr	r3, [r7, #4]
 80030c2:	681b      	ldr	r3, [r3, #0]
 80030c4:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80030c8:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 80030ca:	687b      	ldr	r3, [r7, #4]
 80030cc:	2200      	movs	r2, #0
 80030ce:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->State     = HAL_SPI_STATE_READY;
 80030d0:	687b      	ldr	r3, [r7, #4]
 80030d2:	2201      	movs	r2, #1
 80030d4:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  return HAL_OK;
 80030d8:	2300      	movs	r3, #0
}
 80030da:	4618      	mov	r0, r3
 80030dc:	3710      	adds	r7, #16
 80030de:	46bd      	mov	sp, r7
 80030e0:	bd80      	pop	{r7, pc}

080030e2 <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80030e2:	b580      	push	{r7, lr}
 80030e4:	b088      	sub	sp, #32
 80030e6:	af00      	add	r7, sp, #0
 80030e8:	60f8      	str	r0, [r7, #12]
 80030ea:	60b9      	str	r1, [r7, #8]
 80030ec:	603b      	str	r3, [r7, #0]
 80030ee:	4613      	mov	r3, r2
 80030f0:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 80030f2:	2300      	movs	r3, #0
 80030f4:	77fb      	strb	r3, [r7, #31]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 80030f6:	68fb      	ldr	r3, [r7, #12]
 80030f8:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 80030fc:	2b01      	cmp	r3, #1
 80030fe:	d101      	bne.n	8003104 <HAL_SPI_Transmit+0x22>
 8003100:	2302      	movs	r3, #2
 8003102:	e158      	b.n	80033b6 <HAL_SPI_Transmit+0x2d4>
 8003104:	68fb      	ldr	r3, [r7, #12]
 8003106:	2201      	movs	r2, #1
 8003108:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 800310c:	f7fd fde6 	bl	8000cdc <HAL_GetTick>
 8003110:	61b8      	str	r0, [r7, #24]
  initial_TxXferCount = Size;
 8003112:	88fb      	ldrh	r3, [r7, #6]
 8003114:	82fb      	strh	r3, [r7, #22]

  if (hspi->State != HAL_SPI_STATE_READY)
 8003116:	68fb      	ldr	r3, [r7, #12]
 8003118:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 800311c:	b2db      	uxtb	r3, r3
 800311e:	2b01      	cmp	r3, #1
 8003120:	d002      	beq.n	8003128 <HAL_SPI_Transmit+0x46>
  {
    errorcode = HAL_BUSY;
 8003122:	2302      	movs	r3, #2
 8003124:	77fb      	strb	r3, [r7, #31]
    goto error;
 8003126:	e13d      	b.n	80033a4 <HAL_SPI_Transmit+0x2c2>
  }

  if ((pData == NULL) || (Size == 0U))
 8003128:	68bb      	ldr	r3, [r7, #8]
 800312a:	2b00      	cmp	r3, #0
 800312c:	d002      	beq.n	8003134 <HAL_SPI_Transmit+0x52>
 800312e:	88fb      	ldrh	r3, [r7, #6]
 8003130:	2b00      	cmp	r3, #0
 8003132:	d102      	bne.n	800313a <HAL_SPI_Transmit+0x58>
  {
    errorcode = HAL_ERROR;
 8003134:	2301      	movs	r3, #1
 8003136:	77fb      	strb	r3, [r7, #31]
    goto error;
 8003138:	e134      	b.n	80033a4 <HAL_SPI_Transmit+0x2c2>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 800313a:	68fb      	ldr	r3, [r7, #12]
 800313c:	2203      	movs	r2, #3
 800313e:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8003142:	68fb      	ldr	r3, [r7, #12]
 8003144:	2200      	movs	r2, #0
 8003146:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 8003148:	68fb      	ldr	r3, [r7, #12]
 800314a:	68ba      	ldr	r2, [r7, #8]
 800314c:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->TxXferSize  = Size;
 800314e:	68fb      	ldr	r3, [r7, #12]
 8003150:	88fa      	ldrh	r2, [r7, #6]
 8003152:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->TxXferCount = Size;
 8003154:	68fb      	ldr	r3, [r7, #12]
 8003156:	88fa      	ldrh	r2, [r7, #6]
 8003158:	87da      	strh	r2, [r3, #62]	; 0x3e

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 800315a:	68fb      	ldr	r3, [r7, #12]
 800315c:	2200      	movs	r2, #0
 800315e:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->RxXferSize  = 0U;
 8003160:	68fb      	ldr	r3, [r7, #12]
 8003162:	2200      	movs	r2, #0
 8003164:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  hspi->RxXferCount = 0U;
 8003168:	68fb      	ldr	r3, [r7, #12]
 800316a:	2200      	movs	r2, #0
 800316c:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
  hspi->TxISR       = NULL;
 8003170:	68fb      	ldr	r3, [r7, #12]
 8003172:	2200      	movs	r2, #0
 8003174:	651a      	str	r2, [r3, #80]	; 0x50
  hspi->RxISR       = NULL;
 8003176:	68fb      	ldr	r3, [r7, #12]
 8003178:	2200      	movs	r2, #0
 800317a:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800317c:	68fb      	ldr	r3, [r7, #12]
 800317e:	689b      	ldr	r3, [r3, #8]
 8003180:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8003184:	d10f      	bne.n	80031a6 <HAL_SPI_Transmit+0xc4>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8003186:	68fb      	ldr	r3, [r7, #12]
 8003188:	681b      	ldr	r3, [r3, #0]
 800318a:	681a      	ldr	r2, [r3, #0]
 800318c:	68fb      	ldr	r3, [r7, #12]
 800318e:	681b      	ldr	r3, [r3, #0]
 8003190:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8003194:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 8003196:	68fb      	ldr	r3, [r7, #12]
 8003198:	681b      	ldr	r3, [r3, #0]
 800319a:	681a      	ldr	r2, [r3, #0]
 800319c:	68fb      	ldr	r3, [r7, #12]
 800319e:	681b      	ldr	r3, [r3, #0]
 80031a0:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 80031a4:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 80031a6:	68fb      	ldr	r3, [r7, #12]
 80031a8:	681b      	ldr	r3, [r3, #0]
 80031aa:	681b      	ldr	r3, [r3, #0]
 80031ac:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80031b0:	2b40      	cmp	r3, #64	; 0x40
 80031b2:	d007      	beq.n	80031c4 <HAL_SPI_Transmit+0xe2>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 80031b4:	68fb      	ldr	r3, [r7, #12]
 80031b6:	681b      	ldr	r3, [r3, #0]
 80031b8:	681a      	ldr	r2, [r3, #0]
 80031ba:	68fb      	ldr	r3, [r7, #12]
 80031bc:	681b      	ldr	r3, [r3, #0]
 80031be:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80031c2:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 80031c4:	68fb      	ldr	r3, [r7, #12]
 80031c6:	68db      	ldr	r3, [r3, #12]
 80031c8:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 80031cc:	d94b      	bls.n	8003266 <HAL_SPI_Transmit+0x184>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80031ce:	68fb      	ldr	r3, [r7, #12]
 80031d0:	685b      	ldr	r3, [r3, #4]
 80031d2:	2b00      	cmp	r3, #0
 80031d4:	d002      	beq.n	80031dc <HAL_SPI_Transmit+0xfa>
 80031d6:	8afb      	ldrh	r3, [r7, #22]
 80031d8:	2b01      	cmp	r3, #1
 80031da:	d13e      	bne.n	800325a <HAL_SPI_Transmit+0x178>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80031dc:	68fb      	ldr	r3, [r7, #12]
 80031de:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80031e0:	881a      	ldrh	r2, [r3, #0]
 80031e2:	68fb      	ldr	r3, [r7, #12]
 80031e4:	681b      	ldr	r3, [r3, #0]
 80031e6:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 80031e8:	68fb      	ldr	r3, [r7, #12]
 80031ea:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80031ec:	1c9a      	adds	r2, r3, #2
 80031ee:	68fb      	ldr	r3, [r7, #12]
 80031f0:	639a      	str	r2, [r3, #56]	; 0x38
      hspi->TxXferCount--;
 80031f2:	68fb      	ldr	r3, [r7, #12]
 80031f4:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80031f6:	b29b      	uxth	r3, r3
 80031f8:	3b01      	subs	r3, #1
 80031fa:	b29a      	uxth	r2, r3
 80031fc:	68fb      	ldr	r3, [r7, #12]
 80031fe:	87da      	strh	r2, [r3, #62]	; 0x3e
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 8003200:	e02b      	b.n	800325a <HAL_SPI_Transmit+0x178>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8003202:	68fb      	ldr	r3, [r7, #12]
 8003204:	681b      	ldr	r3, [r3, #0]
 8003206:	689b      	ldr	r3, [r3, #8]
 8003208:	f003 0302 	and.w	r3, r3, #2
 800320c:	2b02      	cmp	r3, #2
 800320e:	d112      	bne.n	8003236 <HAL_SPI_Transmit+0x154>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8003210:	68fb      	ldr	r3, [r7, #12]
 8003212:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003214:	881a      	ldrh	r2, [r3, #0]
 8003216:	68fb      	ldr	r3, [r7, #12]
 8003218:	681b      	ldr	r3, [r3, #0]
 800321a:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 800321c:	68fb      	ldr	r3, [r7, #12]
 800321e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003220:	1c9a      	adds	r2, r3, #2
 8003222:	68fb      	ldr	r3, [r7, #12]
 8003224:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 8003226:	68fb      	ldr	r3, [r7, #12]
 8003228:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800322a:	b29b      	uxth	r3, r3
 800322c:	3b01      	subs	r3, #1
 800322e:	b29a      	uxth	r2, r3
 8003230:	68fb      	ldr	r3, [r7, #12]
 8003232:	87da      	strh	r2, [r3, #62]	; 0x3e
 8003234:	e011      	b.n	800325a <HAL_SPI_Transmit+0x178>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8003236:	f7fd fd51 	bl	8000cdc <HAL_GetTick>
 800323a:	4602      	mov	r2, r0
 800323c:	69bb      	ldr	r3, [r7, #24]
 800323e:	1ad3      	subs	r3, r2, r3
 8003240:	683a      	ldr	r2, [r7, #0]
 8003242:	429a      	cmp	r2, r3
 8003244:	d803      	bhi.n	800324e <HAL_SPI_Transmit+0x16c>
 8003246:	683b      	ldr	r3, [r7, #0]
 8003248:	f1b3 3fff 	cmp.w	r3, #4294967295
 800324c:	d102      	bne.n	8003254 <HAL_SPI_Transmit+0x172>
 800324e:	683b      	ldr	r3, [r7, #0]
 8003250:	2b00      	cmp	r3, #0
 8003252:	d102      	bne.n	800325a <HAL_SPI_Transmit+0x178>
        {
          errorcode = HAL_TIMEOUT;
 8003254:	2303      	movs	r3, #3
 8003256:	77fb      	strb	r3, [r7, #31]
          goto error;
 8003258:	e0a4      	b.n	80033a4 <HAL_SPI_Transmit+0x2c2>
    while (hspi->TxXferCount > 0U)
 800325a:	68fb      	ldr	r3, [r7, #12]
 800325c:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800325e:	b29b      	uxth	r3, r3
 8003260:	2b00      	cmp	r3, #0
 8003262:	d1ce      	bne.n	8003202 <HAL_SPI_Transmit+0x120>
 8003264:	e07c      	b.n	8003360 <HAL_SPI_Transmit+0x27e>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8003266:	68fb      	ldr	r3, [r7, #12]
 8003268:	685b      	ldr	r3, [r3, #4]
 800326a:	2b00      	cmp	r3, #0
 800326c:	d002      	beq.n	8003274 <HAL_SPI_Transmit+0x192>
 800326e:	8afb      	ldrh	r3, [r7, #22]
 8003270:	2b01      	cmp	r3, #1
 8003272:	d170      	bne.n	8003356 <HAL_SPI_Transmit+0x274>
    {
      if (hspi->TxXferCount > 1U)
 8003274:	68fb      	ldr	r3, [r7, #12]
 8003276:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003278:	b29b      	uxth	r3, r3
 800327a:	2b01      	cmp	r3, #1
 800327c:	d912      	bls.n	80032a4 <HAL_SPI_Transmit+0x1c2>
      {
        /* write on the data register in packing mode */
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800327e:	68fb      	ldr	r3, [r7, #12]
 8003280:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003282:	881a      	ldrh	r2, [r3, #0]
 8003284:	68fb      	ldr	r3, [r7, #12]
 8003286:	681b      	ldr	r3, [r3, #0]
 8003288:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 800328a:	68fb      	ldr	r3, [r7, #12]
 800328c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800328e:	1c9a      	adds	r2, r3, #2
 8003290:	68fb      	ldr	r3, [r7, #12]
 8003292:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount -= 2U;
 8003294:	68fb      	ldr	r3, [r7, #12]
 8003296:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003298:	b29b      	uxth	r3, r3
 800329a:	3b02      	subs	r3, #2
 800329c:	b29a      	uxth	r2, r3
 800329e:	68fb      	ldr	r3, [r7, #12]
 80032a0:	87da      	strh	r2, [r3, #62]	; 0x3e
 80032a2:	e058      	b.n	8003356 <HAL_SPI_Transmit+0x274>
      }
      else
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 80032a4:	68fb      	ldr	r3, [r7, #12]
 80032a6:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80032a8:	68fb      	ldr	r3, [r7, #12]
 80032aa:	681b      	ldr	r3, [r3, #0]
 80032ac:	330c      	adds	r3, #12
 80032ae:	7812      	ldrb	r2, [r2, #0]
 80032b0:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr ++;
 80032b2:	68fb      	ldr	r3, [r7, #12]
 80032b4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80032b6:	1c5a      	adds	r2, r3, #1
 80032b8:	68fb      	ldr	r3, [r7, #12]
 80032ba:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 80032bc:	68fb      	ldr	r3, [r7, #12]
 80032be:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80032c0:	b29b      	uxth	r3, r3
 80032c2:	3b01      	subs	r3, #1
 80032c4:	b29a      	uxth	r2, r3
 80032c6:	68fb      	ldr	r3, [r7, #12]
 80032c8:	87da      	strh	r2, [r3, #62]	; 0x3e
      }
    }
    while (hspi->TxXferCount > 0U)
 80032ca:	e044      	b.n	8003356 <HAL_SPI_Transmit+0x274>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 80032cc:	68fb      	ldr	r3, [r7, #12]
 80032ce:	681b      	ldr	r3, [r3, #0]
 80032d0:	689b      	ldr	r3, [r3, #8]
 80032d2:	f003 0302 	and.w	r3, r3, #2
 80032d6:	2b02      	cmp	r3, #2
 80032d8:	d12b      	bne.n	8003332 <HAL_SPI_Transmit+0x250>
      {
        if (hspi->TxXferCount > 1U)
 80032da:	68fb      	ldr	r3, [r7, #12]
 80032dc:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80032de:	b29b      	uxth	r3, r3
 80032e0:	2b01      	cmp	r3, #1
 80032e2:	d912      	bls.n	800330a <HAL_SPI_Transmit+0x228>
        {
          /* write on the data register in packing mode */
          hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80032e4:	68fb      	ldr	r3, [r7, #12]
 80032e6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80032e8:	881a      	ldrh	r2, [r3, #0]
 80032ea:	68fb      	ldr	r3, [r7, #12]
 80032ec:	681b      	ldr	r3, [r3, #0]
 80032ee:	60da      	str	r2, [r3, #12]
          hspi->pTxBuffPtr += sizeof(uint16_t);
 80032f0:	68fb      	ldr	r3, [r7, #12]
 80032f2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80032f4:	1c9a      	adds	r2, r3, #2
 80032f6:	68fb      	ldr	r3, [r7, #12]
 80032f8:	639a      	str	r2, [r3, #56]	; 0x38
          hspi->TxXferCount -= 2U;
 80032fa:	68fb      	ldr	r3, [r7, #12]
 80032fc:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80032fe:	b29b      	uxth	r3, r3
 8003300:	3b02      	subs	r3, #2
 8003302:	b29a      	uxth	r2, r3
 8003304:	68fb      	ldr	r3, [r7, #12]
 8003306:	87da      	strh	r2, [r3, #62]	; 0x3e
 8003308:	e025      	b.n	8003356 <HAL_SPI_Transmit+0x274>
        }
        else
        {
          *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 800330a:	68fb      	ldr	r3, [r7, #12]
 800330c:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800330e:	68fb      	ldr	r3, [r7, #12]
 8003310:	681b      	ldr	r3, [r3, #0]
 8003312:	330c      	adds	r3, #12
 8003314:	7812      	ldrb	r2, [r2, #0]
 8003316:	701a      	strb	r2, [r3, #0]
          hspi->pTxBuffPtr++;
 8003318:	68fb      	ldr	r3, [r7, #12]
 800331a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800331c:	1c5a      	adds	r2, r3, #1
 800331e:	68fb      	ldr	r3, [r7, #12]
 8003320:	639a      	str	r2, [r3, #56]	; 0x38
          hspi->TxXferCount--;
 8003322:	68fb      	ldr	r3, [r7, #12]
 8003324:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003326:	b29b      	uxth	r3, r3
 8003328:	3b01      	subs	r3, #1
 800332a:	b29a      	uxth	r2, r3
 800332c:	68fb      	ldr	r3, [r7, #12]
 800332e:	87da      	strh	r2, [r3, #62]	; 0x3e
 8003330:	e011      	b.n	8003356 <HAL_SPI_Transmit+0x274>
        }
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8003332:	f7fd fcd3 	bl	8000cdc <HAL_GetTick>
 8003336:	4602      	mov	r2, r0
 8003338:	69bb      	ldr	r3, [r7, #24]
 800333a:	1ad3      	subs	r3, r2, r3
 800333c:	683a      	ldr	r2, [r7, #0]
 800333e:	429a      	cmp	r2, r3
 8003340:	d803      	bhi.n	800334a <HAL_SPI_Transmit+0x268>
 8003342:	683b      	ldr	r3, [r7, #0]
 8003344:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003348:	d102      	bne.n	8003350 <HAL_SPI_Transmit+0x26e>
 800334a:	683b      	ldr	r3, [r7, #0]
 800334c:	2b00      	cmp	r3, #0
 800334e:	d102      	bne.n	8003356 <HAL_SPI_Transmit+0x274>
        {
          errorcode = HAL_TIMEOUT;
 8003350:	2303      	movs	r3, #3
 8003352:	77fb      	strb	r3, [r7, #31]
          goto error;
 8003354:	e026      	b.n	80033a4 <HAL_SPI_Transmit+0x2c2>
    while (hspi->TxXferCount > 0U)
 8003356:	68fb      	ldr	r3, [r7, #12]
 8003358:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800335a:	b29b      	uxth	r3, r3
 800335c:	2b00      	cmp	r3, #0
 800335e:	d1b5      	bne.n	80032cc <HAL_SPI_Transmit+0x1ea>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8003360:	69ba      	ldr	r2, [r7, #24]
 8003362:	6839      	ldr	r1, [r7, #0]
 8003364:	68f8      	ldr	r0, [r7, #12]
 8003366:	f000 fb5b 	bl	8003a20 <SPI_EndRxTxTransaction>
 800336a:	4603      	mov	r3, r0
 800336c:	2b00      	cmp	r3, #0
 800336e:	d002      	beq.n	8003376 <HAL_SPI_Transmit+0x294>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8003370:	68fb      	ldr	r3, [r7, #12]
 8003372:	2220      	movs	r2, #32
 8003374:	661a      	str	r2, [r3, #96]	; 0x60
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8003376:	68fb      	ldr	r3, [r7, #12]
 8003378:	689b      	ldr	r3, [r3, #8]
 800337a:	2b00      	cmp	r3, #0
 800337c:	d10a      	bne.n	8003394 <HAL_SPI_Transmit+0x2b2>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 800337e:	2300      	movs	r3, #0
 8003380:	613b      	str	r3, [r7, #16]
 8003382:	68fb      	ldr	r3, [r7, #12]
 8003384:	681b      	ldr	r3, [r3, #0]
 8003386:	68db      	ldr	r3, [r3, #12]
 8003388:	613b      	str	r3, [r7, #16]
 800338a:	68fb      	ldr	r3, [r7, #12]
 800338c:	681b      	ldr	r3, [r3, #0]
 800338e:	689b      	ldr	r3, [r3, #8]
 8003390:	613b      	str	r3, [r7, #16]
 8003392:	693b      	ldr	r3, [r7, #16]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8003394:	68fb      	ldr	r3, [r7, #12]
 8003396:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003398:	2b00      	cmp	r3, #0
 800339a:	d002      	beq.n	80033a2 <HAL_SPI_Transmit+0x2c0>
  {
    errorcode = HAL_ERROR;
 800339c:	2301      	movs	r3, #1
 800339e:	77fb      	strb	r3, [r7, #31]
 80033a0:	e000      	b.n	80033a4 <HAL_SPI_Transmit+0x2c2>
  }

error:
 80033a2:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 80033a4:	68fb      	ldr	r3, [r7, #12]
 80033a6:	2201      	movs	r2, #1
 80033a8:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 80033ac:	68fb      	ldr	r3, [r7, #12]
 80033ae:	2200      	movs	r2, #0
 80033b0:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c
  return errorcode;
 80033b4:	7ffb      	ldrb	r3, [r7, #31]
}
 80033b6:	4618      	mov	r0, r3
 80033b8:	3720      	adds	r7, #32
 80033ba:	46bd      	mov	sp, r7
 80033bc:	bd80      	pop	{r7, pc}

080033be <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size,
                                          uint32_t Timeout)
{
 80033be:	b580      	push	{r7, lr}
 80033c0:	b08a      	sub	sp, #40	; 0x28
 80033c2:	af00      	add	r7, sp, #0
 80033c4:	60f8      	str	r0, [r7, #12]
 80033c6:	60b9      	str	r1, [r7, #8]
 80033c8:	607a      	str	r2, [r7, #4]
 80033ca:	807b      	strh	r3, [r7, #2]
  __IO uint8_t  * ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
#endif /* USE_SPI_CRC */

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 80033cc:	2301      	movs	r3, #1
 80033ce:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_StatusTypeDef    errorcode = HAL_OK;
 80033d0:	2300      	movs	r3, #0
 80033d2:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 80033d6:	68fb      	ldr	r3, [r7, #12]
 80033d8:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 80033dc:	2b01      	cmp	r3, #1
 80033de:	d101      	bne.n	80033e4 <HAL_SPI_TransmitReceive+0x26>
 80033e0:	2302      	movs	r3, #2
 80033e2:	e1fb      	b.n	80037dc <HAL_SPI_TransmitReceive+0x41e>
 80033e4:	68fb      	ldr	r3, [r7, #12]
 80033e6:	2201      	movs	r2, #1
 80033e8:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 80033ec:	f7fd fc76 	bl	8000cdc <HAL_GetTick>
 80033f0:	61f8      	str	r0, [r7, #28]

  /* Init temporary variables */
  tmp_state           = hspi->State;
 80033f2:	68fb      	ldr	r3, [r7, #12]
 80033f4:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 80033f8:	76fb      	strb	r3, [r7, #27]
  tmp_mode            = hspi->Init.Mode;
 80033fa:	68fb      	ldr	r3, [r7, #12]
 80033fc:	685b      	ldr	r3, [r3, #4]
 80033fe:	617b      	str	r3, [r7, #20]
  initial_TxXferCount = Size;
 8003400:	887b      	ldrh	r3, [r7, #2]
 8003402:	827b      	strh	r3, [r7, #18]
  initial_RxXferCount = Size;
 8003404:	887b      	ldrh	r3, [r7, #2]
 8003406:	823b      	strh	r3, [r7, #16]
#if (USE_SPI_CRC != 0U)
  spi_cr1             = READ_REG(hspi->Instance->CR1);
  spi_cr2             = READ_REG(hspi->Instance->CR2);
#endif /* USE_SPI_CRC */

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 8003408:	7efb      	ldrb	r3, [r7, #27]
 800340a:	2b01      	cmp	r3, #1
 800340c:	d00e      	beq.n	800342c <HAL_SPI_TransmitReceive+0x6e>
 800340e:	697b      	ldr	r3, [r7, #20]
 8003410:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8003414:	d106      	bne.n	8003424 <HAL_SPI_TransmitReceive+0x66>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 8003416:	68fb      	ldr	r3, [r7, #12]
 8003418:	689b      	ldr	r3, [r3, #8]
 800341a:	2b00      	cmp	r3, #0
 800341c:	d102      	bne.n	8003424 <HAL_SPI_TransmitReceive+0x66>
 800341e:	7efb      	ldrb	r3, [r7, #27]
 8003420:	2b04      	cmp	r3, #4
 8003422:	d003      	beq.n	800342c <HAL_SPI_TransmitReceive+0x6e>
  {
    errorcode = HAL_BUSY;
 8003424:	2302      	movs	r3, #2
 8003426:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
    goto error;
 800342a:	e1cd      	b.n	80037c8 <HAL_SPI_TransmitReceive+0x40a>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 800342c:	68bb      	ldr	r3, [r7, #8]
 800342e:	2b00      	cmp	r3, #0
 8003430:	d005      	beq.n	800343e <HAL_SPI_TransmitReceive+0x80>
 8003432:	687b      	ldr	r3, [r7, #4]
 8003434:	2b00      	cmp	r3, #0
 8003436:	d002      	beq.n	800343e <HAL_SPI_TransmitReceive+0x80>
 8003438:	887b      	ldrh	r3, [r7, #2]
 800343a:	2b00      	cmp	r3, #0
 800343c:	d103      	bne.n	8003446 <HAL_SPI_TransmitReceive+0x88>
  {
    errorcode = HAL_ERROR;
 800343e:	2301      	movs	r3, #1
 8003440:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
    goto error;
 8003444:	e1c0      	b.n	80037c8 <HAL_SPI_TransmitReceive+0x40a>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 8003446:	68fb      	ldr	r3, [r7, #12]
 8003448:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 800344c:	b2db      	uxtb	r3, r3
 800344e:	2b04      	cmp	r3, #4
 8003450:	d003      	beq.n	800345a <HAL_SPI_TransmitReceive+0x9c>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 8003452:	68fb      	ldr	r3, [r7, #12]
 8003454:	2205      	movs	r2, #5
 8003456:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 800345a:	68fb      	ldr	r3, [r7, #12]
 800345c:	2200      	movs	r2, #0
 800345e:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 8003460:	68fb      	ldr	r3, [r7, #12]
 8003462:	687a      	ldr	r2, [r7, #4]
 8003464:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->RxXferCount = Size;
 8003466:	68fb      	ldr	r3, [r7, #12]
 8003468:	887a      	ldrh	r2, [r7, #2]
 800346a:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
  hspi->RxXferSize  = Size;
 800346e:	68fb      	ldr	r3, [r7, #12]
 8003470:	887a      	ldrh	r2, [r7, #2]
 8003472:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 8003476:	68fb      	ldr	r3, [r7, #12]
 8003478:	68ba      	ldr	r2, [r7, #8]
 800347a:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->TxXferCount = Size;
 800347c:	68fb      	ldr	r3, [r7, #12]
 800347e:	887a      	ldrh	r2, [r7, #2]
 8003480:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxXferSize  = Size;
 8003482:	68fb      	ldr	r3, [r7, #12]
 8003484:	887a      	ldrh	r2, [r7, #2]
 8003486:	879a      	strh	r2, [r3, #60]	; 0x3c

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 8003488:	68fb      	ldr	r3, [r7, #12]
 800348a:	2200      	movs	r2, #0
 800348c:	64da      	str	r2, [r3, #76]	; 0x4c
  hspi->TxISR       = NULL;
 800348e:	68fb      	ldr	r3, [r7, #12]
 8003490:	2200      	movs	r2, #0
 8003492:	651a      	str	r2, [r3, #80]	; 0x50
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Set the Rx Fifo threshold */
  if ((hspi->Init.DataSize > SPI_DATASIZE_8BIT) || (initial_RxXferCount > 1U))
 8003494:	68fb      	ldr	r3, [r7, #12]
 8003496:	68db      	ldr	r3, [r3, #12]
 8003498:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 800349c:	d802      	bhi.n	80034a4 <HAL_SPI_TransmitReceive+0xe6>
 800349e:	8a3b      	ldrh	r3, [r7, #16]
 80034a0:	2b01      	cmp	r3, #1
 80034a2:	d908      	bls.n	80034b6 <HAL_SPI_TransmitReceive+0xf8>
  {
    /* Set fiforxthreshold according the reception data length: 16bit */
    CLEAR_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 80034a4:	68fb      	ldr	r3, [r7, #12]
 80034a6:	681b      	ldr	r3, [r3, #0]
 80034a8:	685a      	ldr	r2, [r3, #4]
 80034aa:	68fb      	ldr	r3, [r7, #12]
 80034ac:	681b      	ldr	r3, [r3, #0]
 80034ae:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 80034b2:	605a      	str	r2, [r3, #4]
 80034b4:	e007      	b.n	80034c6 <HAL_SPI_TransmitReceive+0x108>
  }
  else
  {
    /* Set fiforxthreshold according the reception data length: 8bit */
    SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 80034b6:	68fb      	ldr	r3, [r7, #12]
 80034b8:	681b      	ldr	r3, [r3, #0]
 80034ba:	685a      	ldr	r2, [r3, #4]
 80034bc:	68fb      	ldr	r3, [r7, #12]
 80034be:	681b      	ldr	r3, [r3, #0]
 80034c0:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 80034c4:	605a      	str	r2, [r3, #4]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 80034c6:	68fb      	ldr	r3, [r7, #12]
 80034c8:	681b      	ldr	r3, [r3, #0]
 80034ca:	681b      	ldr	r3, [r3, #0]
 80034cc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80034d0:	2b40      	cmp	r3, #64	; 0x40
 80034d2:	d007      	beq.n	80034e4 <HAL_SPI_TransmitReceive+0x126>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 80034d4:	68fb      	ldr	r3, [r7, #12]
 80034d6:	681b      	ldr	r3, [r3, #0]
 80034d8:	681a      	ldr	r2, [r3, #0]
 80034da:	68fb      	ldr	r3, [r7, #12]
 80034dc:	681b      	ldr	r3, [r3, #0]
 80034de:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80034e2:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 80034e4:	68fb      	ldr	r3, [r7, #12]
 80034e6:	68db      	ldr	r3, [r3, #12]
 80034e8:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 80034ec:	d97c      	bls.n	80035e8 <HAL_SPI_TransmitReceive+0x22a>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80034ee:	68fb      	ldr	r3, [r7, #12]
 80034f0:	685b      	ldr	r3, [r3, #4]
 80034f2:	2b00      	cmp	r3, #0
 80034f4:	d002      	beq.n	80034fc <HAL_SPI_TransmitReceive+0x13e>
 80034f6:	8a7b      	ldrh	r3, [r7, #18]
 80034f8:	2b01      	cmp	r3, #1
 80034fa:	d169      	bne.n	80035d0 <HAL_SPI_TransmitReceive+0x212>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80034fc:	68fb      	ldr	r3, [r7, #12]
 80034fe:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003500:	881a      	ldrh	r2, [r3, #0]
 8003502:	68fb      	ldr	r3, [r7, #12]
 8003504:	681b      	ldr	r3, [r3, #0]
 8003506:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8003508:	68fb      	ldr	r3, [r7, #12]
 800350a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800350c:	1c9a      	adds	r2, r3, #2
 800350e:	68fb      	ldr	r3, [r7, #12]
 8003510:	639a      	str	r2, [r3, #56]	; 0x38
      hspi->TxXferCount--;
 8003512:	68fb      	ldr	r3, [r7, #12]
 8003514:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003516:	b29b      	uxth	r3, r3
 8003518:	3b01      	subs	r3, #1
 800351a:	b29a      	uxth	r2, r3
 800351c:	68fb      	ldr	r3, [r7, #12]
 800351e:	87da      	strh	r2, [r3, #62]	; 0x3e
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8003520:	e056      	b.n	80035d0 <HAL_SPI_TransmitReceive+0x212>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8003522:	68fb      	ldr	r3, [r7, #12]
 8003524:	681b      	ldr	r3, [r3, #0]
 8003526:	689b      	ldr	r3, [r3, #8]
 8003528:	f003 0302 	and.w	r3, r3, #2
 800352c:	2b02      	cmp	r3, #2
 800352e:	d11b      	bne.n	8003568 <HAL_SPI_TransmitReceive+0x1aa>
 8003530:	68fb      	ldr	r3, [r7, #12]
 8003532:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003534:	b29b      	uxth	r3, r3
 8003536:	2b00      	cmp	r3, #0
 8003538:	d016      	beq.n	8003568 <HAL_SPI_TransmitReceive+0x1aa>
 800353a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800353c:	2b01      	cmp	r3, #1
 800353e:	d113      	bne.n	8003568 <HAL_SPI_TransmitReceive+0x1aa>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8003540:	68fb      	ldr	r3, [r7, #12]
 8003542:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003544:	881a      	ldrh	r2, [r3, #0]
 8003546:	68fb      	ldr	r3, [r7, #12]
 8003548:	681b      	ldr	r3, [r3, #0]
 800354a:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 800354c:	68fb      	ldr	r3, [r7, #12]
 800354e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003550:	1c9a      	adds	r2, r3, #2
 8003552:	68fb      	ldr	r3, [r7, #12]
 8003554:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 8003556:	68fb      	ldr	r3, [r7, #12]
 8003558:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800355a:	b29b      	uxth	r3, r3
 800355c:	3b01      	subs	r3, #1
 800355e:	b29a      	uxth	r2, r3
 8003560:	68fb      	ldr	r3, [r7, #12]
 8003562:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8003564:	2300      	movs	r3, #0
 8003566:	627b      	str	r3, [r7, #36]	; 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8003568:	68fb      	ldr	r3, [r7, #12]
 800356a:	681b      	ldr	r3, [r3, #0]
 800356c:	689b      	ldr	r3, [r3, #8]
 800356e:	f003 0301 	and.w	r3, r3, #1
 8003572:	2b01      	cmp	r3, #1
 8003574:	d11c      	bne.n	80035b0 <HAL_SPI_TransmitReceive+0x1f2>
 8003576:	68fb      	ldr	r3, [r7, #12]
 8003578:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 800357c:	b29b      	uxth	r3, r3
 800357e:	2b00      	cmp	r3, #0
 8003580:	d016      	beq.n	80035b0 <HAL_SPI_TransmitReceive+0x1f2>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8003582:	68fb      	ldr	r3, [r7, #12]
 8003584:	681b      	ldr	r3, [r3, #0]
 8003586:	68da      	ldr	r2, [r3, #12]
 8003588:	68fb      	ldr	r3, [r7, #12]
 800358a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800358c:	b292      	uxth	r2, r2
 800358e:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8003590:	68fb      	ldr	r3, [r7, #12]
 8003592:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003594:	1c9a      	adds	r2, r3, #2
 8003596:	68fb      	ldr	r3, [r7, #12]
 8003598:	641a      	str	r2, [r3, #64]	; 0x40
        hspi->RxXferCount--;
 800359a:	68fb      	ldr	r3, [r7, #12]
 800359c:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 80035a0:	b29b      	uxth	r3, r3
 80035a2:	3b01      	subs	r3, #1
 80035a4:	b29a      	uxth	r2, r3
 80035a6:	68fb      	ldr	r3, [r7, #12]
 80035a8:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 80035ac:	2301      	movs	r3, #1
 80035ae:	627b      	str	r3, [r7, #36]	; 0x24
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 80035b0:	f7fd fb94 	bl	8000cdc <HAL_GetTick>
 80035b4:	4602      	mov	r2, r0
 80035b6:	69fb      	ldr	r3, [r7, #28]
 80035b8:	1ad3      	subs	r3, r2, r3
 80035ba:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80035bc:	429a      	cmp	r2, r3
 80035be:	d807      	bhi.n	80035d0 <HAL_SPI_TransmitReceive+0x212>
 80035c0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80035c2:	f1b3 3fff 	cmp.w	r3, #4294967295
 80035c6:	d003      	beq.n	80035d0 <HAL_SPI_TransmitReceive+0x212>
      {
        errorcode = HAL_TIMEOUT;
 80035c8:	2303      	movs	r3, #3
 80035ca:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
        goto error;
 80035ce:	e0fb      	b.n	80037c8 <HAL_SPI_TransmitReceive+0x40a>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 80035d0:	68fb      	ldr	r3, [r7, #12]
 80035d2:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80035d4:	b29b      	uxth	r3, r3
 80035d6:	2b00      	cmp	r3, #0
 80035d8:	d1a3      	bne.n	8003522 <HAL_SPI_TransmitReceive+0x164>
 80035da:	68fb      	ldr	r3, [r7, #12]
 80035dc:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 80035e0:	b29b      	uxth	r3, r3
 80035e2:	2b00      	cmp	r3, #0
 80035e4:	d19d      	bne.n	8003522 <HAL_SPI_TransmitReceive+0x164>
 80035e6:	e0df      	b.n	80037a8 <HAL_SPI_TransmitReceive+0x3ea>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80035e8:	68fb      	ldr	r3, [r7, #12]
 80035ea:	685b      	ldr	r3, [r3, #4]
 80035ec:	2b00      	cmp	r3, #0
 80035ee:	d003      	beq.n	80035f8 <HAL_SPI_TransmitReceive+0x23a>
 80035f0:	8a7b      	ldrh	r3, [r7, #18]
 80035f2:	2b01      	cmp	r3, #1
 80035f4:	f040 80cb 	bne.w	800378e <HAL_SPI_TransmitReceive+0x3d0>
    {
      if (hspi->TxXferCount > 1U)
 80035f8:	68fb      	ldr	r3, [r7, #12]
 80035fa:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80035fc:	b29b      	uxth	r3, r3
 80035fe:	2b01      	cmp	r3, #1
 8003600:	d912      	bls.n	8003628 <HAL_SPI_TransmitReceive+0x26a>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8003602:	68fb      	ldr	r3, [r7, #12]
 8003604:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003606:	881a      	ldrh	r2, [r3, #0]
 8003608:	68fb      	ldr	r3, [r7, #12]
 800360a:	681b      	ldr	r3, [r3, #0]
 800360c:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 800360e:	68fb      	ldr	r3, [r7, #12]
 8003610:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003612:	1c9a      	adds	r2, r3, #2
 8003614:	68fb      	ldr	r3, [r7, #12]
 8003616:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount -= 2U;
 8003618:	68fb      	ldr	r3, [r7, #12]
 800361a:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800361c:	b29b      	uxth	r3, r3
 800361e:	3b02      	subs	r3, #2
 8003620:	b29a      	uxth	r2, r3
 8003622:	68fb      	ldr	r3, [r7, #12]
 8003624:	87da      	strh	r2, [r3, #62]	; 0x3e
 8003626:	e0b2      	b.n	800378e <HAL_SPI_TransmitReceive+0x3d0>
      }
      else
      {
        *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 8003628:	68fb      	ldr	r3, [r7, #12]
 800362a:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800362c:	68fb      	ldr	r3, [r7, #12]
 800362e:	681b      	ldr	r3, [r3, #0]
 8003630:	330c      	adds	r3, #12
 8003632:	7812      	ldrb	r2, [r2, #0]
 8003634:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 8003636:	68fb      	ldr	r3, [r7, #12]
 8003638:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800363a:	1c5a      	adds	r2, r3, #1
 800363c:	68fb      	ldr	r3, [r7, #12]
 800363e:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 8003640:	68fb      	ldr	r3, [r7, #12]
 8003642:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003644:	b29b      	uxth	r3, r3
 8003646:	3b01      	subs	r3, #1
 8003648:	b29a      	uxth	r2, r3
 800364a:	68fb      	ldr	r3, [r7, #12]
 800364c:	87da      	strh	r2, [r3, #62]	; 0x3e
      }
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 800364e:	e09e      	b.n	800378e <HAL_SPI_TransmitReceive+0x3d0>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8003650:	68fb      	ldr	r3, [r7, #12]
 8003652:	681b      	ldr	r3, [r3, #0]
 8003654:	689b      	ldr	r3, [r3, #8]
 8003656:	f003 0302 	and.w	r3, r3, #2
 800365a:	2b02      	cmp	r3, #2
 800365c:	d134      	bne.n	80036c8 <HAL_SPI_TransmitReceive+0x30a>
 800365e:	68fb      	ldr	r3, [r7, #12]
 8003660:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003662:	b29b      	uxth	r3, r3
 8003664:	2b00      	cmp	r3, #0
 8003666:	d02f      	beq.n	80036c8 <HAL_SPI_TransmitReceive+0x30a>
 8003668:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800366a:	2b01      	cmp	r3, #1
 800366c:	d12c      	bne.n	80036c8 <HAL_SPI_TransmitReceive+0x30a>
      {
        if (hspi->TxXferCount > 1U)
 800366e:	68fb      	ldr	r3, [r7, #12]
 8003670:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003672:	b29b      	uxth	r3, r3
 8003674:	2b01      	cmp	r3, #1
 8003676:	d912      	bls.n	800369e <HAL_SPI_TransmitReceive+0x2e0>
        {
          hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8003678:	68fb      	ldr	r3, [r7, #12]
 800367a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800367c:	881a      	ldrh	r2, [r3, #0]
 800367e:	68fb      	ldr	r3, [r7, #12]
 8003680:	681b      	ldr	r3, [r3, #0]
 8003682:	60da      	str	r2, [r3, #12]
          hspi->pTxBuffPtr += sizeof(uint16_t);
 8003684:	68fb      	ldr	r3, [r7, #12]
 8003686:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003688:	1c9a      	adds	r2, r3, #2
 800368a:	68fb      	ldr	r3, [r7, #12]
 800368c:	639a      	str	r2, [r3, #56]	; 0x38
          hspi->TxXferCount -= 2U;
 800368e:	68fb      	ldr	r3, [r7, #12]
 8003690:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003692:	b29b      	uxth	r3, r3
 8003694:	3b02      	subs	r3, #2
 8003696:	b29a      	uxth	r2, r3
 8003698:	68fb      	ldr	r3, [r7, #12]
 800369a:	87da      	strh	r2, [r3, #62]	; 0x3e
 800369c:	e012      	b.n	80036c4 <HAL_SPI_TransmitReceive+0x306>
        }
        else
        {
          *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 800369e:	68fb      	ldr	r3, [r7, #12]
 80036a0:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80036a2:	68fb      	ldr	r3, [r7, #12]
 80036a4:	681b      	ldr	r3, [r3, #0]
 80036a6:	330c      	adds	r3, #12
 80036a8:	7812      	ldrb	r2, [r2, #0]
 80036aa:	701a      	strb	r2, [r3, #0]
          hspi->pTxBuffPtr++;
 80036ac:	68fb      	ldr	r3, [r7, #12]
 80036ae:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80036b0:	1c5a      	adds	r2, r3, #1
 80036b2:	68fb      	ldr	r3, [r7, #12]
 80036b4:	639a      	str	r2, [r3, #56]	; 0x38
          hspi->TxXferCount--;
 80036b6:	68fb      	ldr	r3, [r7, #12]
 80036b8:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80036ba:	b29b      	uxth	r3, r3
 80036bc:	3b01      	subs	r3, #1
 80036be:	b29a      	uxth	r2, r3
 80036c0:	68fb      	ldr	r3, [r7, #12]
 80036c2:	87da      	strh	r2, [r3, #62]	; 0x3e
        }
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 80036c4:	2300      	movs	r3, #0
 80036c6:	627b      	str	r3, [r7, #36]	; 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 80036c8:	68fb      	ldr	r3, [r7, #12]
 80036ca:	681b      	ldr	r3, [r3, #0]
 80036cc:	689b      	ldr	r3, [r3, #8]
 80036ce:	f003 0301 	and.w	r3, r3, #1
 80036d2:	2b01      	cmp	r3, #1
 80036d4:	d148      	bne.n	8003768 <HAL_SPI_TransmitReceive+0x3aa>
 80036d6:	68fb      	ldr	r3, [r7, #12]
 80036d8:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 80036dc:	b29b      	uxth	r3, r3
 80036de:	2b00      	cmp	r3, #0
 80036e0:	d042      	beq.n	8003768 <HAL_SPI_TransmitReceive+0x3aa>
      {
        if (hspi->RxXferCount > 1U)
 80036e2:	68fb      	ldr	r3, [r7, #12]
 80036e4:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 80036e8:	b29b      	uxth	r3, r3
 80036ea:	2b01      	cmp	r3, #1
 80036ec:	d923      	bls.n	8003736 <HAL_SPI_TransmitReceive+0x378>
        {
          *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 80036ee:	68fb      	ldr	r3, [r7, #12]
 80036f0:	681b      	ldr	r3, [r3, #0]
 80036f2:	68da      	ldr	r2, [r3, #12]
 80036f4:	68fb      	ldr	r3, [r7, #12]
 80036f6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80036f8:	b292      	uxth	r2, r2
 80036fa:	801a      	strh	r2, [r3, #0]
          hspi->pRxBuffPtr += sizeof(uint16_t);
 80036fc:	68fb      	ldr	r3, [r7, #12]
 80036fe:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003700:	1c9a      	adds	r2, r3, #2
 8003702:	68fb      	ldr	r3, [r7, #12]
 8003704:	641a      	str	r2, [r3, #64]	; 0x40
          hspi->RxXferCount -= 2U;
 8003706:	68fb      	ldr	r3, [r7, #12]
 8003708:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 800370c:	b29b      	uxth	r3, r3
 800370e:	3b02      	subs	r3, #2
 8003710:	b29a      	uxth	r2, r3
 8003712:	68fb      	ldr	r3, [r7, #12]
 8003714:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
          if (hspi->RxXferCount <= 1U)
 8003718:	68fb      	ldr	r3, [r7, #12]
 800371a:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 800371e:	b29b      	uxth	r3, r3
 8003720:	2b01      	cmp	r3, #1
 8003722:	d81f      	bhi.n	8003764 <HAL_SPI_TransmitReceive+0x3a6>
          {
            /* Set RX Fifo threshold before to switch on 8 bit data size */
            SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8003724:	68fb      	ldr	r3, [r7, #12]
 8003726:	681b      	ldr	r3, [r3, #0]
 8003728:	685a      	ldr	r2, [r3, #4]
 800372a:	68fb      	ldr	r3, [r7, #12]
 800372c:	681b      	ldr	r3, [r3, #0]
 800372e:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8003732:	605a      	str	r2, [r3, #4]
 8003734:	e016      	b.n	8003764 <HAL_SPI_TransmitReceive+0x3a6>
          }
        }
        else
        {
          (*(uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 8003736:	68fb      	ldr	r3, [r7, #12]
 8003738:	681b      	ldr	r3, [r3, #0]
 800373a:	f103 020c 	add.w	r2, r3, #12
 800373e:	68fb      	ldr	r3, [r7, #12]
 8003740:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003742:	7812      	ldrb	r2, [r2, #0]
 8003744:	b2d2      	uxtb	r2, r2
 8003746:	701a      	strb	r2, [r3, #0]
          hspi->pRxBuffPtr++;
 8003748:	68fb      	ldr	r3, [r7, #12]
 800374a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800374c:	1c5a      	adds	r2, r3, #1
 800374e:	68fb      	ldr	r3, [r7, #12]
 8003750:	641a      	str	r2, [r3, #64]	; 0x40
          hspi->RxXferCount--;
 8003752:	68fb      	ldr	r3, [r7, #12]
 8003754:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8003758:	b29b      	uxth	r3, r3
 800375a:	3b01      	subs	r3, #1
 800375c:	b29a      	uxth	r2, r3
 800375e:	68fb      	ldr	r3, [r7, #12]
 8003760:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
        }
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8003764:	2301      	movs	r3, #1
 8003766:	627b      	str	r3, [r7, #36]	; 0x24
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 8003768:	f7fd fab8 	bl	8000cdc <HAL_GetTick>
 800376c:	4602      	mov	r2, r0
 800376e:	69fb      	ldr	r3, [r7, #28]
 8003770:	1ad3      	subs	r3, r2, r3
 8003772:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8003774:	429a      	cmp	r2, r3
 8003776:	d803      	bhi.n	8003780 <HAL_SPI_TransmitReceive+0x3c2>
 8003778:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800377a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800377e:	d102      	bne.n	8003786 <HAL_SPI_TransmitReceive+0x3c8>
 8003780:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003782:	2b00      	cmp	r3, #0
 8003784:	d103      	bne.n	800378e <HAL_SPI_TransmitReceive+0x3d0>
      {
        errorcode = HAL_TIMEOUT;
 8003786:	2303      	movs	r3, #3
 8003788:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
        goto error;
 800378c:	e01c      	b.n	80037c8 <HAL_SPI_TransmitReceive+0x40a>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 800378e:	68fb      	ldr	r3, [r7, #12]
 8003790:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003792:	b29b      	uxth	r3, r3
 8003794:	2b00      	cmp	r3, #0
 8003796:	f47f af5b 	bne.w	8003650 <HAL_SPI_TransmitReceive+0x292>
 800379a:	68fb      	ldr	r3, [r7, #12]
 800379c:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 80037a0:	b29b      	uxth	r3, r3
 80037a2:	2b00      	cmp	r3, #0
 80037a4:	f47f af54 	bne.w	8003650 <HAL_SPI_TransmitReceive+0x292>
    errorcode = HAL_ERROR;
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 80037a8:	69fa      	ldr	r2, [r7, #28]
 80037aa:	6b39      	ldr	r1, [r7, #48]	; 0x30
 80037ac:	68f8      	ldr	r0, [r7, #12]
 80037ae:	f000 f937 	bl	8003a20 <SPI_EndRxTxTransaction>
 80037b2:	4603      	mov	r3, r0
 80037b4:	2b00      	cmp	r3, #0
 80037b6:	d006      	beq.n	80037c6 <HAL_SPI_TransmitReceive+0x408>
  {
    errorcode = HAL_ERROR;
 80037b8:	2301      	movs	r3, #1
 80037ba:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 80037be:	68fb      	ldr	r3, [r7, #12]
 80037c0:	2220      	movs	r2, #32
 80037c2:	661a      	str	r2, [r3, #96]	; 0x60
 80037c4:	e000      	b.n	80037c8 <HAL_SPI_TransmitReceive+0x40a>
  }

error :
 80037c6:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 80037c8:	68fb      	ldr	r3, [r7, #12]
 80037ca:	2201      	movs	r2, #1
 80037cc:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  __HAL_UNLOCK(hspi);
 80037d0:	68fb      	ldr	r3, [r7, #12]
 80037d2:	2200      	movs	r2, #0
 80037d4:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c
  return errorcode;
 80037d8:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
}
 80037dc:	4618      	mov	r0, r3
 80037de:	3728      	adds	r7, #40	; 0x28
 80037e0:	46bd      	mov	sp, r7
 80037e2:	bd80      	pop	{r7, pc}

080037e4 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 80037e4:	b580      	push	{r7, lr}
 80037e6:	b088      	sub	sp, #32
 80037e8:	af00      	add	r7, sp, #0
 80037ea:	60f8      	str	r0, [r7, #12]
 80037ec:	60b9      	str	r1, [r7, #8]
 80037ee:	603b      	str	r3, [r7, #0]
 80037f0:	4613      	mov	r3, r2
 80037f2:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 80037f4:	f7fd fa72 	bl	8000cdc <HAL_GetTick>
 80037f8:	4602      	mov	r2, r0
 80037fa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80037fc:	1a9b      	subs	r3, r3, r2
 80037fe:	683a      	ldr	r2, [r7, #0]
 8003800:	4413      	add	r3, r2
 8003802:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 8003804:	f7fd fa6a 	bl	8000cdc <HAL_GetTick>
 8003808:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 800380a:	4b39      	ldr	r3, [pc, #228]	; (80038f0 <SPI_WaitFlagStateUntilTimeout+0x10c>)
 800380c:	681b      	ldr	r3, [r3, #0]
 800380e:	015b      	lsls	r3, r3, #5
 8003810:	0d1b      	lsrs	r3, r3, #20
 8003812:	69fa      	ldr	r2, [r7, #28]
 8003814:	fb02 f303 	mul.w	r3, r2, r3
 8003818:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 800381a:	e054      	b.n	80038c6 <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 800381c:	683b      	ldr	r3, [r7, #0]
 800381e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003822:	d050      	beq.n	80038c6 <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8003824:	f7fd fa5a 	bl	8000cdc <HAL_GetTick>
 8003828:	4602      	mov	r2, r0
 800382a:	69bb      	ldr	r3, [r7, #24]
 800382c:	1ad3      	subs	r3, r2, r3
 800382e:	69fa      	ldr	r2, [r7, #28]
 8003830:	429a      	cmp	r2, r3
 8003832:	d902      	bls.n	800383a <SPI_WaitFlagStateUntilTimeout+0x56>
 8003834:	69fb      	ldr	r3, [r7, #28]
 8003836:	2b00      	cmp	r3, #0
 8003838:	d13d      	bne.n	80038b6 <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 800383a:	68fb      	ldr	r3, [r7, #12]
 800383c:	681b      	ldr	r3, [r3, #0]
 800383e:	685a      	ldr	r2, [r3, #4]
 8003840:	68fb      	ldr	r3, [r7, #12]
 8003842:	681b      	ldr	r3, [r3, #0]
 8003844:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 8003848:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800384a:	68fb      	ldr	r3, [r7, #12]
 800384c:	685b      	ldr	r3, [r3, #4]
 800384e:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8003852:	d111      	bne.n	8003878 <SPI_WaitFlagStateUntilTimeout+0x94>
 8003854:	68fb      	ldr	r3, [r7, #12]
 8003856:	689b      	ldr	r3, [r3, #8]
 8003858:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800385c:	d004      	beq.n	8003868 <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 800385e:	68fb      	ldr	r3, [r7, #12]
 8003860:	689b      	ldr	r3, [r3, #8]
 8003862:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003866:	d107      	bne.n	8003878 <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8003868:	68fb      	ldr	r3, [r7, #12]
 800386a:	681b      	ldr	r3, [r3, #0]
 800386c:	681a      	ldr	r2, [r3, #0]
 800386e:	68fb      	ldr	r3, [r7, #12]
 8003870:	681b      	ldr	r3, [r3, #0]
 8003872:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8003876:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8003878:	68fb      	ldr	r3, [r7, #12]
 800387a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800387c:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003880:	d10f      	bne.n	80038a2 <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 8003882:	68fb      	ldr	r3, [r7, #12]
 8003884:	681b      	ldr	r3, [r3, #0]
 8003886:	681a      	ldr	r2, [r3, #0]
 8003888:	68fb      	ldr	r3, [r7, #12]
 800388a:	681b      	ldr	r3, [r3, #0]
 800388c:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8003890:	601a      	str	r2, [r3, #0]
 8003892:	68fb      	ldr	r3, [r7, #12]
 8003894:	681b      	ldr	r3, [r3, #0]
 8003896:	681a      	ldr	r2, [r3, #0]
 8003898:	68fb      	ldr	r3, [r7, #12]
 800389a:	681b      	ldr	r3, [r3, #0]
 800389c:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 80038a0:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 80038a2:	68fb      	ldr	r3, [r7, #12]
 80038a4:	2201      	movs	r2, #1
 80038a6:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 80038aa:	68fb      	ldr	r3, [r7, #12]
 80038ac:	2200      	movs	r2, #0
 80038ae:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

        return HAL_TIMEOUT;
 80038b2:	2303      	movs	r3, #3
 80038b4:	e017      	b.n	80038e6 <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if(count == 0U)
 80038b6:	697b      	ldr	r3, [r7, #20]
 80038b8:	2b00      	cmp	r3, #0
 80038ba:	d101      	bne.n	80038c0 <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 80038bc:	2300      	movs	r3, #0
 80038be:	61fb      	str	r3, [r7, #28]
      }
      count--;
 80038c0:	697b      	ldr	r3, [r7, #20]
 80038c2:	3b01      	subs	r3, #1
 80038c4:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 80038c6:	68fb      	ldr	r3, [r7, #12]
 80038c8:	681b      	ldr	r3, [r3, #0]
 80038ca:	689a      	ldr	r2, [r3, #8]
 80038cc:	68bb      	ldr	r3, [r7, #8]
 80038ce:	4013      	ands	r3, r2
 80038d0:	68ba      	ldr	r2, [r7, #8]
 80038d2:	429a      	cmp	r2, r3
 80038d4:	bf0c      	ite	eq
 80038d6:	2301      	moveq	r3, #1
 80038d8:	2300      	movne	r3, #0
 80038da:	b2db      	uxtb	r3, r3
 80038dc:	461a      	mov	r2, r3
 80038de:	79fb      	ldrb	r3, [r7, #7]
 80038e0:	429a      	cmp	r2, r3
 80038e2:	d19b      	bne.n	800381c <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 80038e4:	2300      	movs	r3, #0
}
 80038e6:	4618      	mov	r0, r3
 80038e8:	3720      	adds	r7, #32
 80038ea:	46bd      	mov	sp, r7
 80038ec:	bd80      	pop	{r7, pc}
 80038ee:	bf00      	nop
 80038f0:	20000000 	.word	0x20000000

080038f4 <SPI_WaitFifoStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFifoStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Fifo, uint32_t State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 80038f4:	b580      	push	{r7, lr}
 80038f6:	b08a      	sub	sp, #40	; 0x28
 80038f8:	af00      	add	r7, sp, #0
 80038fa:	60f8      	str	r0, [r7, #12]
 80038fc:	60b9      	str	r1, [r7, #8]
 80038fe:	607a      	str	r2, [r7, #4]
 8003900:	603b      	str	r3, [r7, #0]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;
  __IO uint8_t  * ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
 8003902:	2300      	movs	r3, #0
 8003904:	75fb      	strb	r3, [r7, #23]

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout = Timeout - (HAL_GetTick() - Tickstart);
 8003906:	f7fd f9e9 	bl	8000cdc <HAL_GetTick>
 800390a:	4602      	mov	r2, r0
 800390c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800390e:	1a9b      	subs	r3, r3, r2
 8003910:	683a      	ldr	r2, [r7, #0]
 8003912:	4413      	add	r3, r2
 8003914:	627b      	str	r3, [r7, #36]	; 0x24
  tmp_tickstart = HAL_GetTick();
 8003916:	f7fd f9e1 	bl	8000cdc <HAL_GetTick>
 800391a:	6238      	str	r0, [r7, #32]

  /* Initialize the 8bit temporary pointer */
  ptmpreg8 = (__IO uint8_t *)&hspi->Instance->DR;
 800391c:	68fb      	ldr	r3, [r7, #12]
 800391e:	681b      	ldr	r3, [r3, #0]
 8003920:	330c      	adds	r3, #12
 8003922:	61fb      	str	r3, [r7, #28]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 35U) >> 20U);
 8003924:	4b3d      	ldr	r3, [pc, #244]	; (8003a1c <SPI_WaitFifoStateUntilTimeout+0x128>)
 8003926:	681a      	ldr	r2, [r3, #0]
 8003928:	4613      	mov	r3, r2
 800392a:	009b      	lsls	r3, r3, #2
 800392c:	4413      	add	r3, r2
 800392e:	00da      	lsls	r2, r3, #3
 8003930:	1ad3      	subs	r3, r2, r3
 8003932:	0d1b      	lsrs	r3, r3, #20
 8003934:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003936:	fb02 f303 	mul.w	r3, r2, r3
 800393a:	61bb      	str	r3, [r7, #24]

  while ((hspi->Instance->SR & Fifo) != State)
 800393c:	e060      	b.n	8003a00 <SPI_WaitFifoStateUntilTimeout+0x10c>
  {
    if ((Fifo == SPI_SR_FRLVL) && (State == SPI_FRLVL_EMPTY))
 800393e:	68bb      	ldr	r3, [r7, #8]
 8003940:	f5b3 6fc0 	cmp.w	r3, #1536	; 0x600
 8003944:	d107      	bne.n	8003956 <SPI_WaitFifoStateUntilTimeout+0x62>
 8003946:	687b      	ldr	r3, [r7, #4]
 8003948:	2b00      	cmp	r3, #0
 800394a:	d104      	bne.n	8003956 <SPI_WaitFifoStateUntilTimeout+0x62>
    {
      /* Flush Data Register by a blank read */
      tmpreg8 = *ptmpreg8;
 800394c:	69fb      	ldr	r3, [r7, #28]
 800394e:	781b      	ldrb	r3, [r3, #0]
 8003950:	b2db      	uxtb	r3, r3
 8003952:	75fb      	strb	r3, [r7, #23]
      /* To avoid GCC warning */
      UNUSED(tmpreg8);
 8003954:	7dfb      	ldrb	r3, [r7, #23]
    }

    if (Timeout != HAL_MAX_DELAY)
 8003956:	683b      	ldr	r3, [r7, #0]
 8003958:	f1b3 3fff 	cmp.w	r3, #4294967295
 800395c:	d050      	beq.n	8003a00 <SPI_WaitFifoStateUntilTimeout+0x10c>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 800395e:	f7fd f9bd 	bl	8000cdc <HAL_GetTick>
 8003962:	4602      	mov	r2, r0
 8003964:	6a3b      	ldr	r3, [r7, #32]
 8003966:	1ad3      	subs	r3, r2, r3
 8003968:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800396a:	429a      	cmp	r2, r3
 800396c:	d902      	bls.n	8003974 <SPI_WaitFifoStateUntilTimeout+0x80>
 800396e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003970:	2b00      	cmp	r3, #0
 8003972:	d13d      	bne.n	80039f0 <SPI_WaitFifoStateUntilTimeout+0xfc>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8003974:	68fb      	ldr	r3, [r7, #12]
 8003976:	681b      	ldr	r3, [r3, #0]
 8003978:	685a      	ldr	r2, [r3, #4]
 800397a:	68fb      	ldr	r3, [r7, #12]
 800397c:	681b      	ldr	r3, [r3, #0]
 800397e:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 8003982:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8003984:	68fb      	ldr	r3, [r7, #12]
 8003986:	685b      	ldr	r3, [r3, #4]
 8003988:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800398c:	d111      	bne.n	80039b2 <SPI_WaitFifoStateUntilTimeout+0xbe>
 800398e:	68fb      	ldr	r3, [r7, #12]
 8003990:	689b      	ldr	r3, [r3, #8]
 8003992:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8003996:	d004      	beq.n	80039a2 <SPI_WaitFifoStateUntilTimeout+0xae>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8003998:	68fb      	ldr	r3, [r7, #12]
 800399a:	689b      	ldr	r3, [r3, #8]
 800399c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80039a0:	d107      	bne.n	80039b2 <SPI_WaitFifoStateUntilTimeout+0xbe>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 80039a2:	68fb      	ldr	r3, [r7, #12]
 80039a4:	681b      	ldr	r3, [r3, #0]
 80039a6:	681a      	ldr	r2, [r3, #0]
 80039a8:	68fb      	ldr	r3, [r7, #12]
 80039aa:	681b      	ldr	r3, [r3, #0]
 80039ac:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80039b0:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 80039b2:	68fb      	ldr	r3, [r7, #12]
 80039b4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80039b6:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80039ba:	d10f      	bne.n	80039dc <SPI_WaitFifoStateUntilTimeout+0xe8>
        {
          SPI_RESET_CRC(hspi);
 80039bc:	68fb      	ldr	r3, [r7, #12]
 80039be:	681b      	ldr	r3, [r3, #0]
 80039c0:	681a      	ldr	r2, [r3, #0]
 80039c2:	68fb      	ldr	r3, [r7, #12]
 80039c4:	681b      	ldr	r3, [r3, #0]
 80039c6:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 80039ca:	601a      	str	r2, [r3, #0]
 80039cc:	68fb      	ldr	r3, [r7, #12]
 80039ce:	681b      	ldr	r3, [r3, #0]
 80039d0:	681a      	ldr	r2, [r3, #0]
 80039d2:	68fb      	ldr	r3, [r7, #12]
 80039d4:	681b      	ldr	r3, [r3, #0]
 80039d6:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 80039da:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 80039dc:	68fb      	ldr	r3, [r7, #12]
 80039de:	2201      	movs	r2, #1
 80039e0:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 80039e4:	68fb      	ldr	r3, [r7, #12]
 80039e6:	2200      	movs	r2, #0
 80039e8:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

        return HAL_TIMEOUT;
 80039ec:	2303      	movs	r3, #3
 80039ee:	e010      	b.n	8003a12 <SPI_WaitFifoStateUntilTimeout+0x11e>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if(count == 0U)
 80039f0:	69bb      	ldr	r3, [r7, #24]
 80039f2:	2b00      	cmp	r3, #0
 80039f4:	d101      	bne.n	80039fa <SPI_WaitFifoStateUntilTimeout+0x106>
      {
        tmp_timeout = 0U;
 80039f6:	2300      	movs	r3, #0
 80039f8:	627b      	str	r3, [r7, #36]	; 0x24
      }      
      count--;
 80039fa:	69bb      	ldr	r3, [r7, #24]
 80039fc:	3b01      	subs	r3, #1
 80039fe:	61bb      	str	r3, [r7, #24]
  while ((hspi->Instance->SR & Fifo) != State)
 8003a00:	68fb      	ldr	r3, [r7, #12]
 8003a02:	681b      	ldr	r3, [r3, #0]
 8003a04:	689a      	ldr	r2, [r3, #8]
 8003a06:	68bb      	ldr	r3, [r7, #8]
 8003a08:	4013      	ands	r3, r2
 8003a0a:	687a      	ldr	r2, [r7, #4]
 8003a0c:	429a      	cmp	r2, r3
 8003a0e:	d196      	bne.n	800393e <SPI_WaitFifoStateUntilTimeout+0x4a>
    }
  }

  return HAL_OK;
 8003a10:	2300      	movs	r3, #0
}
 8003a12:	4618      	mov	r0, r3
 8003a14:	3728      	adds	r7, #40	; 0x28
 8003a16:	46bd      	mov	sp, r7
 8003a18:	bd80      	pop	{r7, pc}
 8003a1a:	bf00      	nop
 8003a1c:	20000000 	.word	0x20000000

08003a20 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8003a20:	b580      	push	{r7, lr}
 8003a22:	b086      	sub	sp, #24
 8003a24:	af02      	add	r7, sp, #8
 8003a26:	60f8      	str	r0, [r7, #12]
 8003a28:	60b9      	str	r1, [r7, #8]
 8003a2a:	607a      	str	r2, [r7, #4]
  /* Control if the TX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FTLVL, SPI_FTLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 8003a2c:	687b      	ldr	r3, [r7, #4]
 8003a2e:	9300      	str	r3, [sp, #0]
 8003a30:	68bb      	ldr	r3, [r7, #8]
 8003a32:	2200      	movs	r2, #0
 8003a34:	f44f 51c0 	mov.w	r1, #6144	; 0x1800
 8003a38:	68f8      	ldr	r0, [r7, #12]
 8003a3a:	f7ff ff5b 	bl	80038f4 <SPI_WaitFifoStateUntilTimeout>
 8003a3e:	4603      	mov	r3, r0
 8003a40:	2b00      	cmp	r3, #0
 8003a42:	d007      	beq.n	8003a54 <SPI_EndRxTxTransaction+0x34>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8003a44:	68fb      	ldr	r3, [r7, #12]
 8003a46:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003a48:	f043 0220 	orr.w	r2, r3, #32
 8003a4c:	68fb      	ldr	r3, [r7, #12]
 8003a4e:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 8003a50:	2303      	movs	r3, #3
 8003a52:	e027      	b.n	8003aa4 <SPI_EndRxTxTransaction+0x84>
  }

  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8003a54:	687b      	ldr	r3, [r7, #4]
 8003a56:	9300      	str	r3, [sp, #0]
 8003a58:	68bb      	ldr	r3, [r7, #8]
 8003a5a:	2200      	movs	r2, #0
 8003a5c:	2180      	movs	r1, #128	; 0x80
 8003a5e:	68f8      	ldr	r0, [r7, #12]
 8003a60:	f7ff fec0 	bl	80037e4 <SPI_WaitFlagStateUntilTimeout>
 8003a64:	4603      	mov	r3, r0
 8003a66:	2b00      	cmp	r3, #0
 8003a68:	d007      	beq.n	8003a7a <SPI_EndRxTxTransaction+0x5a>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8003a6a:	68fb      	ldr	r3, [r7, #12]
 8003a6c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003a6e:	f043 0220 	orr.w	r2, r3, #32
 8003a72:	68fb      	ldr	r3, [r7, #12]
 8003a74:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 8003a76:	2303      	movs	r3, #3
 8003a78:	e014      	b.n	8003aa4 <SPI_EndRxTxTransaction+0x84>
  }

  /* Control if the RX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FRLVL, SPI_FRLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 8003a7a:	687b      	ldr	r3, [r7, #4]
 8003a7c:	9300      	str	r3, [sp, #0]
 8003a7e:	68bb      	ldr	r3, [r7, #8]
 8003a80:	2200      	movs	r2, #0
 8003a82:	f44f 61c0 	mov.w	r1, #1536	; 0x600
 8003a86:	68f8      	ldr	r0, [r7, #12]
 8003a88:	f7ff ff34 	bl	80038f4 <SPI_WaitFifoStateUntilTimeout>
 8003a8c:	4603      	mov	r3, r0
 8003a8e:	2b00      	cmp	r3, #0
 8003a90:	d007      	beq.n	8003aa2 <SPI_EndRxTxTransaction+0x82>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8003a92:	68fb      	ldr	r3, [r7, #12]
 8003a94:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003a96:	f043 0220 	orr.w	r2, r3, #32
 8003a9a:	68fb      	ldr	r3, [r7, #12]
 8003a9c:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 8003a9e:	2303      	movs	r3, #3
 8003aa0:	e000      	b.n	8003aa4 <SPI_EndRxTxTransaction+0x84>
  }

  return HAL_OK;
 8003aa2:	2300      	movs	r3, #0
}
 8003aa4:	4618      	mov	r0, r3
 8003aa6:	3710      	adds	r7, #16
 8003aa8:	46bd      	mov	sp, r7
 8003aaa:	bd80      	pop	{r7, pc}

08003aac <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8003aac:	b580      	push	{r7, lr}
 8003aae:	b082      	sub	sp, #8
 8003ab0:	af00      	add	r7, sp, #0
 8003ab2:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8003ab4:	687b      	ldr	r3, [r7, #4]
 8003ab6:	2b00      	cmp	r3, #0
 8003ab8:	d101      	bne.n	8003abe <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8003aba:	2301      	movs	r3, #1
 8003abc:	e041      	b.n	8003b42 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8003abe:	687b      	ldr	r3, [r7, #4]
 8003ac0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003ac4:	b2db      	uxtb	r3, r3
 8003ac6:	2b00      	cmp	r3, #0
 8003ac8:	d106      	bne.n	8003ad8 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8003aca:	687b      	ldr	r3, [r7, #4]
 8003acc:	2200      	movs	r2, #0
 8003ace:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8003ad2:	6878      	ldr	r0, [r7, #4]
 8003ad4:	f7fc ff5a 	bl	800098c <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003ad8:	687b      	ldr	r3, [r7, #4]
 8003ada:	2202      	movs	r2, #2
 8003adc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8003ae0:	687b      	ldr	r3, [r7, #4]
 8003ae2:	681a      	ldr	r2, [r3, #0]
 8003ae4:	687b      	ldr	r3, [r7, #4]
 8003ae6:	3304      	adds	r3, #4
 8003ae8:	4619      	mov	r1, r3
 8003aea:	4610      	mov	r0, r2
 8003aec:	f000 fa2e 	bl	8003f4c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8003af0:	687b      	ldr	r3, [r7, #4]
 8003af2:	2201      	movs	r2, #1
 8003af4:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003af8:	687b      	ldr	r3, [r7, #4]
 8003afa:	2201      	movs	r2, #1
 8003afc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8003b00:	687b      	ldr	r3, [r7, #4]
 8003b02:	2201      	movs	r2, #1
 8003b04:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8003b08:	687b      	ldr	r3, [r7, #4]
 8003b0a:	2201      	movs	r2, #1
 8003b0c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8003b10:	687b      	ldr	r3, [r7, #4]
 8003b12:	2201      	movs	r2, #1
 8003b14:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003b18:	687b      	ldr	r3, [r7, #4]
 8003b1a:	2201      	movs	r2, #1
 8003b1c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8003b20:	687b      	ldr	r3, [r7, #4]
 8003b22:	2201      	movs	r2, #1
 8003b24:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8003b28:	687b      	ldr	r3, [r7, #4]
 8003b2a:	2201      	movs	r2, #1
 8003b2c:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8003b30:	687b      	ldr	r3, [r7, #4]
 8003b32:	2201      	movs	r2, #1
 8003b34:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8003b38:	687b      	ldr	r3, [r7, #4]
 8003b3a:	2201      	movs	r2, #1
 8003b3c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8003b40:	2300      	movs	r3, #0
}
 8003b42:	4618      	mov	r0, r3
 8003b44:	3708      	adds	r7, #8
 8003b46:	46bd      	mov	sp, r7
 8003b48:	bd80      	pop	{r7, pc}

08003b4a <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8003b4a:	b580      	push	{r7, lr}
 8003b4c:	b082      	sub	sp, #8
 8003b4e:	af00      	add	r7, sp, #0
 8003b50:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8003b52:	687b      	ldr	r3, [r7, #4]
 8003b54:	681b      	ldr	r3, [r3, #0]
 8003b56:	691b      	ldr	r3, [r3, #16]
 8003b58:	f003 0302 	and.w	r3, r3, #2
 8003b5c:	2b02      	cmp	r3, #2
 8003b5e:	d122      	bne.n	8003ba6 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8003b60:	687b      	ldr	r3, [r7, #4]
 8003b62:	681b      	ldr	r3, [r3, #0]
 8003b64:	68db      	ldr	r3, [r3, #12]
 8003b66:	f003 0302 	and.w	r3, r3, #2
 8003b6a:	2b02      	cmp	r3, #2
 8003b6c:	d11b      	bne.n	8003ba6 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8003b6e:	687b      	ldr	r3, [r7, #4]
 8003b70:	681b      	ldr	r3, [r3, #0]
 8003b72:	f06f 0202 	mvn.w	r2, #2
 8003b76:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8003b78:	687b      	ldr	r3, [r7, #4]
 8003b7a:	2201      	movs	r2, #1
 8003b7c:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8003b7e:	687b      	ldr	r3, [r7, #4]
 8003b80:	681b      	ldr	r3, [r3, #0]
 8003b82:	699b      	ldr	r3, [r3, #24]
 8003b84:	f003 0303 	and.w	r3, r3, #3
 8003b88:	2b00      	cmp	r3, #0
 8003b8a:	d003      	beq.n	8003b94 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8003b8c:	6878      	ldr	r0, [r7, #4]
 8003b8e:	f000 f9bf 	bl	8003f10 <HAL_TIM_IC_CaptureCallback>
 8003b92:	e005      	b.n	8003ba0 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8003b94:	6878      	ldr	r0, [r7, #4]
 8003b96:	f000 f9b1 	bl	8003efc <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003b9a:	6878      	ldr	r0, [r7, #4]
 8003b9c:	f000 f9c2 	bl	8003f24 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003ba0:	687b      	ldr	r3, [r7, #4]
 8003ba2:	2200      	movs	r2, #0
 8003ba4:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8003ba6:	687b      	ldr	r3, [r7, #4]
 8003ba8:	681b      	ldr	r3, [r3, #0]
 8003baa:	691b      	ldr	r3, [r3, #16]
 8003bac:	f003 0304 	and.w	r3, r3, #4
 8003bb0:	2b04      	cmp	r3, #4
 8003bb2:	d122      	bne.n	8003bfa <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8003bb4:	687b      	ldr	r3, [r7, #4]
 8003bb6:	681b      	ldr	r3, [r3, #0]
 8003bb8:	68db      	ldr	r3, [r3, #12]
 8003bba:	f003 0304 	and.w	r3, r3, #4
 8003bbe:	2b04      	cmp	r3, #4
 8003bc0:	d11b      	bne.n	8003bfa <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8003bc2:	687b      	ldr	r3, [r7, #4]
 8003bc4:	681b      	ldr	r3, [r3, #0]
 8003bc6:	f06f 0204 	mvn.w	r2, #4
 8003bca:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8003bcc:	687b      	ldr	r3, [r7, #4]
 8003bce:	2202      	movs	r2, #2
 8003bd0:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8003bd2:	687b      	ldr	r3, [r7, #4]
 8003bd4:	681b      	ldr	r3, [r3, #0]
 8003bd6:	699b      	ldr	r3, [r3, #24]
 8003bd8:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003bdc:	2b00      	cmp	r3, #0
 8003bde:	d003      	beq.n	8003be8 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003be0:	6878      	ldr	r0, [r7, #4]
 8003be2:	f000 f995 	bl	8003f10 <HAL_TIM_IC_CaptureCallback>
 8003be6:	e005      	b.n	8003bf4 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003be8:	6878      	ldr	r0, [r7, #4]
 8003bea:	f000 f987 	bl	8003efc <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003bee:	6878      	ldr	r0, [r7, #4]
 8003bf0:	f000 f998 	bl	8003f24 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003bf4:	687b      	ldr	r3, [r7, #4]
 8003bf6:	2200      	movs	r2, #0
 8003bf8:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8003bfa:	687b      	ldr	r3, [r7, #4]
 8003bfc:	681b      	ldr	r3, [r3, #0]
 8003bfe:	691b      	ldr	r3, [r3, #16]
 8003c00:	f003 0308 	and.w	r3, r3, #8
 8003c04:	2b08      	cmp	r3, #8
 8003c06:	d122      	bne.n	8003c4e <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8003c08:	687b      	ldr	r3, [r7, #4]
 8003c0a:	681b      	ldr	r3, [r3, #0]
 8003c0c:	68db      	ldr	r3, [r3, #12]
 8003c0e:	f003 0308 	and.w	r3, r3, #8
 8003c12:	2b08      	cmp	r3, #8
 8003c14:	d11b      	bne.n	8003c4e <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8003c16:	687b      	ldr	r3, [r7, #4]
 8003c18:	681b      	ldr	r3, [r3, #0]
 8003c1a:	f06f 0208 	mvn.w	r2, #8
 8003c1e:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8003c20:	687b      	ldr	r3, [r7, #4]
 8003c22:	2204      	movs	r2, #4
 8003c24:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8003c26:	687b      	ldr	r3, [r7, #4]
 8003c28:	681b      	ldr	r3, [r3, #0]
 8003c2a:	69db      	ldr	r3, [r3, #28]
 8003c2c:	f003 0303 	and.w	r3, r3, #3
 8003c30:	2b00      	cmp	r3, #0
 8003c32:	d003      	beq.n	8003c3c <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003c34:	6878      	ldr	r0, [r7, #4]
 8003c36:	f000 f96b 	bl	8003f10 <HAL_TIM_IC_CaptureCallback>
 8003c3a:	e005      	b.n	8003c48 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003c3c:	6878      	ldr	r0, [r7, #4]
 8003c3e:	f000 f95d 	bl	8003efc <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003c42:	6878      	ldr	r0, [r7, #4]
 8003c44:	f000 f96e 	bl	8003f24 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003c48:	687b      	ldr	r3, [r7, #4]
 8003c4a:	2200      	movs	r2, #0
 8003c4c:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8003c4e:	687b      	ldr	r3, [r7, #4]
 8003c50:	681b      	ldr	r3, [r3, #0]
 8003c52:	691b      	ldr	r3, [r3, #16]
 8003c54:	f003 0310 	and.w	r3, r3, #16
 8003c58:	2b10      	cmp	r3, #16
 8003c5a:	d122      	bne.n	8003ca2 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8003c5c:	687b      	ldr	r3, [r7, #4]
 8003c5e:	681b      	ldr	r3, [r3, #0]
 8003c60:	68db      	ldr	r3, [r3, #12]
 8003c62:	f003 0310 	and.w	r3, r3, #16
 8003c66:	2b10      	cmp	r3, #16
 8003c68:	d11b      	bne.n	8003ca2 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8003c6a:	687b      	ldr	r3, [r7, #4]
 8003c6c:	681b      	ldr	r3, [r3, #0]
 8003c6e:	f06f 0210 	mvn.w	r2, #16
 8003c72:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8003c74:	687b      	ldr	r3, [r7, #4]
 8003c76:	2208      	movs	r2, #8
 8003c78:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8003c7a:	687b      	ldr	r3, [r7, #4]
 8003c7c:	681b      	ldr	r3, [r3, #0]
 8003c7e:	69db      	ldr	r3, [r3, #28]
 8003c80:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003c84:	2b00      	cmp	r3, #0
 8003c86:	d003      	beq.n	8003c90 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003c88:	6878      	ldr	r0, [r7, #4]
 8003c8a:	f000 f941 	bl	8003f10 <HAL_TIM_IC_CaptureCallback>
 8003c8e:	e005      	b.n	8003c9c <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003c90:	6878      	ldr	r0, [r7, #4]
 8003c92:	f000 f933 	bl	8003efc <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003c96:	6878      	ldr	r0, [r7, #4]
 8003c98:	f000 f944 	bl	8003f24 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003c9c:	687b      	ldr	r3, [r7, #4]
 8003c9e:	2200      	movs	r2, #0
 8003ca0:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8003ca2:	687b      	ldr	r3, [r7, #4]
 8003ca4:	681b      	ldr	r3, [r3, #0]
 8003ca6:	691b      	ldr	r3, [r3, #16]
 8003ca8:	f003 0301 	and.w	r3, r3, #1
 8003cac:	2b01      	cmp	r3, #1
 8003cae:	d10e      	bne.n	8003cce <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8003cb0:	687b      	ldr	r3, [r7, #4]
 8003cb2:	681b      	ldr	r3, [r3, #0]
 8003cb4:	68db      	ldr	r3, [r3, #12]
 8003cb6:	f003 0301 	and.w	r3, r3, #1
 8003cba:	2b01      	cmp	r3, #1
 8003cbc:	d107      	bne.n	8003cce <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8003cbe:	687b      	ldr	r3, [r7, #4]
 8003cc0:	681b      	ldr	r3, [r3, #0]
 8003cc2:	f06f 0201 	mvn.w	r2, #1
 8003cc6:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8003cc8:	6878      	ldr	r0, [r7, #4]
 8003cca:	f000 f90d 	bl	8003ee8 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8003cce:	687b      	ldr	r3, [r7, #4]
 8003cd0:	681b      	ldr	r3, [r3, #0]
 8003cd2:	691b      	ldr	r3, [r3, #16]
 8003cd4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003cd8:	2b80      	cmp	r3, #128	; 0x80
 8003cda:	d10e      	bne.n	8003cfa <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8003cdc:	687b      	ldr	r3, [r7, #4]
 8003cde:	681b      	ldr	r3, [r3, #0]
 8003ce0:	68db      	ldr	r3, [r3, #12]
 8003ce2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003ce6:	2b80      	cmp	r3, #128	; 0x80
 8003ce8:	d107      	bne.n	8003cfa <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8003cea:	687b      	ldr	r3, [r7, #4]
 8003cec:	681b      	ldr	r3, [r3, #0]
 8003cee:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8003cf2:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8003cf4:	6878      	ldr	r0, [r7, #4]
 8003cf6:	f000 fadb 	bl	80042b0 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
#endif /* TIM_BDTR_BK2E */
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8003cfa:	687b      	ldr	r3, [r7, #4]
 8003cfc:	681b      	ldr	r3, [r3, #0]
 8003cfe:	691b      	ldr	r3, [r3, #16]
 8003d00:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003d04:	2b40      	cmp	r3, #64	; 0x40
 8003d06:	d10e      	bne.n	8003d26 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8003d08:	687b      	ldr	r3, [r7, #4]
 8003d0a:	681b      	ldr	r3, [r3, #0]
 8003d0c:	68db      	ldr	r3, [r3, #12]
 8003d0e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003d12:	2b40      	cmp	r3, #64	; 0x40
 8003d14:	d107      	bne.n	8003d26 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8003d16:	687b      	ldr	r3, [r7, #4]
 8003d18:	681b      	ldr	r3, [r3, #0]
 8003d1a:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8003d1e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8003d20:	6878      	ldr	r0, [r7, #4]
 8003d22:	f000 f909 	bl	8003f38 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8003d26:	687b      	ldr	r3, [r7, #4]
 8003d28:	681b      	ldr	r3, [r3, #0]
 8003d2a:	691b      	ldr	r3, [r3, #16]
 8003d2c:	f003 0320 	and.w	r3, r3, #32
 8003d30:	2b20      	cmp	r3, #32
 8003d32:	d10e      	bne.n	8003d52 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8003d34:	687b      	ldr	r3, [r7, #4]
 8003d36:	681b      	ldr	r3, [r3, #0]
 8003d38:	68db      	ldr	r3, [r3, #12]
 8003d3a:	f003 0320 	and.w	r3, r3, #32
 8003d3e:	2b20      	cmp	r3, #32
 8003d40:	d107      	bne.n	8003d52 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8003d42:	687b      	ldr	r3, [r7, #4]
 8003d44:	681b      	ldr	r3, [r3, #0]
 8003d46:	f06f 0220 	mvn.w	r2, #32
 8003d4a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8003d4c:	6878      	ldr	r0, [r7, #4]
 8003d4e:	f000 faa5 	bl	800429c <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8003d52:	bf00      	nop
 8003d54:	3708      	adds	r7, #8
 8003d56:	46bd      	mov	sp, r7
 8003d58:	bd80      	pop	{r7, pc}

08003d5a <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8003d5a:	b580      	push	{r7, lr}
 8003d5c:	b084      	sub	sp, #16
 8003d5e:	af00      	add	r7, sp, #0
 8003d60:	6078      	str	r0, [r7, #4]
 8003d62:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8003d64:	2300      	movs	r3, #0
 8003d66:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8003d68:	687b      	ldr	r3, [r7, #4]
 8003d6a:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003d6e:	2b01      	cmp	r3, #1
 8003d70:	d101      	bne.n	8003d76 <HAL_TIM_ConfigClockSource+0x1c>
 8003d72:	2302      	movs	r3, #2
 8003d74:	e0b4      	b.n	8003ee0 <HAL_TIM_ConfigClockSource+0x186>
 8003d76:	687b      	ldr	r3, [r7, #4]
 8003d78:	2201      	movs	r2, #1
 8003d7a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8003d7e:	687b      	ldr	r3, [r7, #4]
 8003d80:	2202      	movs	r2, #2
 8003d82:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8003d86:	687b      	ldr	r3, [r7, #4]
 8003d88:	681b      	ldr	r3, [r3, #0]
 8003d8a:	689b      	ldr	r3, [r3, #8]
 8003d8c:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8003d8e:	68bb      	ldr	r3, [r7, #8]
 8003d90:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 8003d94:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8003d96:	68bb      	ldr	r3, [r7, #8]
 8003d98:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8003d9c:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8003d9e:	687b      	ldr	r3, [r7, #4]
 8003da0:	681b      	ldr	r3, [r3, #0]
 8003da2:	68ba      	ldr	r2, [r7, #8]
 8003da4:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8003da6:	683b      	ldr	r3, [r7, #0]
 8003da8:	681b      	ldr	r3, [r3, #0]
 8003daa:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003dae:	d03e      	beq.n	8003e2e <HAL_TIM_ConfigClockSource+0xd4>
 8003db0:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003db4:	f200 8087 	bhi.w	8003ec6 <HAL_TIM_ConfigClockSource+0x16c>
 8003db8:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003dbc:	f000 8086 	beq.w	8003ecc <HAL_TIM_ConfigClockSource+0x172>
 8003dc0:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003dc4:	d87f      	bhi.n	8003ec6 <HAL_TIM_ConfigClockSource+0x16c>
 8003dc6:	2b70      	cmp	r3, #112	; 0x70
 8003dc8:	d01a      	beq.n	8003e00 <HAL_TIM_ConfigClockSource+0xa6>
 8003dca:	2b70      	cmp	r3, #112	; 0x70
 8003dcc:	d87b      	bhi.n	8003ec6 <HAL_TIM_ConfigClockSource+0x16c>
 8003dce:	2b60      	cmp	r3, #96	; 0x60
 8003dd0:	d050      	beq.n	8003e74 <HAL_TIM_ConfigClockSource+0x11a>
 8003dd2:	2b60      	cmp	r3, #96	; 0x60
 8003dd4:	d877      	bhi.n	8003ec6 <HAL_TIM_ConfigClockSource+0x16c>
 8003dd6:	2b50      	cmp	r3, #80	; 0x50
 8003dd8:	d03c      	beq.n	8003e54 <HAL_TIM_ConfigClockSource+0xfa>
 8003dda:	2b50      	cmp	r3, #80	; 0x50
 8003ddc:	d873      	bhi.n	8003ec6 <HAL_TIM_ConfigClockSource+0x16c>
 8003dde:	2b40      	cmp	r3, #64	; 0x40
 8003de0:	d058      	beq.n	8003e94 <HAL_TIM_ConfigClockSource+0x13a>
 8003de2:	2b40      	cmp	r3, #64	; 0x40
 8003de4:	d86f      	bhi.n	8003ec6 <HAL_TIM_ConfigClockSource+0x16c>
 8003de6:	2b30      	cmp	r3, #48	; 0x30
 8003de8:	d064      	beq.n	8003eb4 <HAL_TIM_ConfigClockSource+0x15a>
 8003dea:	2b30      	cmp	r3, #48	; 0x30
 8003dec:	d86b      	bhi.n	8003ec6 <HAL_TIM_ConfigClockSource+0x16c>
 8003dee:	2b20      	cmp	r3, #32
 8003df0:	d060      	beq.n	8003eb4 <HAL_TIM_ConfigClockSource+0x15a>
 8003df2:	2b20      	cmp	r3, #32
 8003df4:	d867      	bhi.n	8003ec6 <HAL_TIM_ConfigClockSource+0x16c>
 8003df6:	2b00      	cmp	r3, #0
 8003df8:	d05c      	beq.n	8003eb4 <HAL_TIM_ConfigClockSource+0x15a>
 8003dfa:	2b10      	cmp	r3, #16
 8003dfc:	d05a      	beq.n	8003eb4 <HAL_TIM_ConfigClockSource+0x15a>
 8003dfe:	e062      	b.n	8003ec6 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8003e00:	687b      	ldr	r3, [r7, #4]
 8003e02:	6818      	ldr	r0, [r3, #0]
 8003e04:	683b      	ldr	r3, [r7, #0]
 8003e06:	6899      	ldr	r1, [r3, #8]
 8003e08:	683b      	ldr	r3, [r7, #0]
 8003e0a:	685a      	ldr	r2, [r3, #4]
 8003e0c:	683b      	ldr	r3, [r7, #0]
 8003e0e:	68db      	ldr	r3, [r3, #12]
 8003e10:	f000 f9b0 	bl	8004174 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8003e14:	687b      	ldr	r3, [r7, #4]
 8003e16:	681b      	ldr	r3, [r3, #0]
 8003e18:	689b      	ldr	r3, [r3, #8]
 8003e1a:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8003e1c:	68bb      	ldr	r3, [r7, #8]
 8003e1e:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8003e22:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8003e24:	687b      	ldr	r3, [r7, #4]
 8003e26:	681b      	ldr	r3, [r3, #0]
 8003e28:	68ba      	ldr	r2, [r7, #8]
 8003e2a:	609a      	str	r2, [r3, #8]
      break;
 8003e2c:	e04f      	b.n	8003ece <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8003e2e:	687b      	ldr	r3, [r7, #4]
 8003e30:	6818      	ldr	r0, [r3, #0]
 8003e32:	683b      	ldr	r3, [r7, #0]
 8003e34:	6899      	ldr	r1, [r3, #8]
 8003e36:	683b      	ldr	r3, [r7, #0]
 8003e38:	685a      	ldr	r2, [r3, #4]
 8003e3a:	683b      	ldr	r3, [r7, #0]
 8003e3c:	68db      	ldr	r3, [r3, #12]
 8003e3e:	f000 f999 	bl	8004174 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8003e42:	687b      	ldr	r3, [r7, #4]
 8003e44:	681b      	ldr	r3, [r3, #0]
 8003e46:	689a      	ldr	r2, [r3, #8]
 8003e48:	687b      	ldr	r3, [r7, #4]
 8003e4a:	681b      	ldr	r3, [r3, #0]
 8003e4c:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8003e50:	609a      	str	r2, [r3, #8]
      break;
 8003e52:	e03c      	b.n	8003ece <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8003e54:	687b      	ldr	r3, [r7, #4]
 8003e56:	6818      	ldr	r0, [r3, #0]
 8003e58:	683b      	ldr	r3, [r7, #0]
 8003e5a:	6859      	ldr	r1, [r3, #4]
 8003e5c:	683b      	ldr	r3, [r7, #0]
 8003e5e:	68db      	ldr	r3, [r3, #12]
 8003e60:	461a      	mov	r2, r3
 8003e62:	f000 f90d 	bl	8004080 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8003e66:	687b      	ldr	r3, [r7, #4]
 8003e68:	681b      	ldr	r3, [r3, #0]
 8003e6a:	2150      	movs	r1, #80	; 0x50
 8003e6c:	4618      	mov	r0, r3
 8003e6e:	f000 f966 	bl	800413e <TIM_ITRx_SetConfig>
      break;
 8003e72:	e02c      	b.n	8003ece <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8003e74:	687b      	ldr	r3, [r7, #4]
 8003e76:	6818      	ldr	r0, [r3, #0]
 8003e78:	683b      	ldr	r3, [r7, #0]
 8003e7a:	6859      	ldr	r1, [r3, #4]
 8003e7c:	683b      	ldr	r3, [r7, #0]
 8003e7e:	68db      	ldr	r3, [r3, #12]
 8003e80:	461a      	mov	r2, r3
 8003e82:	f000 f92c 	bl	80040de <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8003e86:	687b      	ldr	r3, [r7, #4]
 8003e88:	681b      	ldr	r3, [r3, #0]
 8003e8a:	2160      	movs	r1, #96	; 0x60
 8003e8c:	4618      	mov	r0, r3
 8003e8e:	f000 f956 	bl	800413e <TIM_ITRx_SetConfig>
      break;
 8003e92:	e01c      	b.n	8003ece <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8003e94:	687b      	ldr	r3, [r7, #4]
 8003e96:	6818      	ldr	r0, [r3, #0]
 8003e98:	683b      	ldr	r3, [r7, #0]
 8003e9a:	6859      	ldr	r1, [r3, #4]
 8003e9c:	683b      	ldr	r3, [r7, #0]
 8003e9e:	68db      	ldr	r3, [r3, #12]
 8003ea0:	461a      	mov	r2, r3
 8003ea2:	f000 f8ed 	bl	8004080 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8003ea6:	687b      	ldr	r3, [r7, #4]
 8003ea8:	681b      	ldr	r3, [r3, #0]
 8003eaa:	2140      	movs	r1, #64	; 0x40
 8003eac:	4618      	mov	r0, r3
 8003eae:	f000 f946 	bl	800413e <TIM_ITRx_SetConfig>
      break;
 8003eb2:	e00c      	b.n	8003ece <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8003eb4:	687b      	ldr	r3, [r7, #4]
 8003eb6:	681a      	ldr	r2, [r3, #0]
 8003eb8:	683b      	ldr	r3, [r7, #0]
 8003eba:	681b      	ldr	r3, [r3, #0]
 8003ebc:	4619      	mov	r1, r3
 8003ebe:	4610      	mov	r0, r2
 8003ec0:	f000 f93d 	bl	800413e <TIM_ITRx_SetConfig>
      break;
 8003ec4:	e003      	b.n	8003ece <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 8003ec6:	2301      	movs	r3, #1
 8003ec8:	73fb      	strb	r3, [r7, #15]
      break;
 8003eca:	e000      	b.n	8003ece <HAL_TIM_ConfigClockSource+0x174>
      break;
 8003ecc:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8003ece:	687b      	ldr	r3, [r7, #4]
 8003ed0:	2201      	movs	r2, #1
 8003ed2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8003ed6:	687b      	ldr	r3, [r7, #4]
 8003ed8:	2200      	movs	r2, #0
 8003eda:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8003ede:	7bfb      	ldrb	r3, [r7, #15]
}
 8003ee0:	4618      	mov	r0, r3
 8003ee2:	3710      	adds	r7, #16
 8003ee4:	46bd      	mov	sp, r7
 8003ee6:	bd80      	pop	{r7, pc}

08003ee8 <HAL_TIM_PeriodElapsedCallback>:
  * @brief  Period elapsed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8003ee8:	b480      	push	{r7}
 8003eea:	b083      	sub	sp, #12
 8003eec:	af00      	add	r7, sp, #0
 8003eee:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PeriodElapsedCallback could be implemented in the user file
   */
}
 8003ef0:	bf00      	nop
 8003ef2:	370c      	adds	r7, #12
 8003ef4:	46bd      	mov	sp, r7
 8003ef6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003efa:	4770      	bx	lr

08003efc <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8003efc:	b480      	push	{r7}
 8003efe:	b083      	sub	sp, #12
 8003f00:	af00      	add	r7, sp, #0
 8003f02:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8003f04:	bf00      	nop
 8003f06:	370c      	adds	r7, #12
 8003f08:	46bd      	mov	sp, r7
 8003f0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f0e:	4770      	bx	lr

08003f10 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8003f10:	b480      	push	{r7}
 8003f12:	b083      	sub	sp, #12
 8003f14:	af00      	add	r7, sp, #0
 8003f16:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8003f18:	bf00      	nop
 8003f1a:	370c      	adds	r7, #12
 8003f1c:	46bd      	mov	sp, r7
 8003f1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f22:	4770      	bx	lr

08003f24 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8003f24:	b480      	push	{r7}
 8003f26:	b083      	sub	sp, #12
 8003f28:	af00      	add	r7, sp, #0
 8003f2a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8003f2c:	bf00      	nop
 8003f2e:	370c      	adds	r7, #12
 8003f30:	46bd      	mov	sp, r7
 8003f32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f36:	4770      	bx	lr

08003f38 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8003f38:	b480      	push	{r7}
 8003f3a:	b083      	sub	sp, #12
 8003f3c:	af00      	add	r7, sp, #0
 8003f3e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8003f40:	bf00      	nop
 8003f42:	370c      	adds	r7, #12
 8003f44:	46bd      	mov	sp, r7
 8003f46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f4a:	4770      	bx	lr

08003f4c <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8003f4c:	b480      	push	{r7}
 8003f4e:	b085      	sub	sp, #20
 8003f50:	af00      	add	r7, sp, #0
 8003f52:	6078      	str	r0, [r7, #4]
 8003f54:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8003f56:	687b      	ldr	r3, [r7, #4]
 8003f58:	681b      	ldr	r3, [r3, #0]
 8003f5a:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8003f5c:	687b      	ldr	r3, [r7, #4]
 8003f5e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003f62:	d00f      	beq.n	8003f84 <TIM_Base_SetConfig+0x38>
 8003f64:	687b      	ldr	r3, [r7, #4]
 8003f66:	4a3c      	ldr	r2, [pc, #240]	; (8004058 <TIM_Base_SetConfig+0x10c>)
 8003f68:	4293      	cmp	r3, r2
 8003f6a:	d00b      	beq.n	8003f84 <TIM_Base_SetConfig+0x38>
 8003f6c:	687b      	ldr	r3, [r7, #4]
 8003f6e:	4a3b      	ldr	r2, [pc, #236]	; (800405c <TIM_Base_SetConfig+0x110>)
 8003f70:	4293      	cmp	r3, r2
 8003f72:	d007      	beq.n	8003f84 <TIM_Base_SetConfig+0x38>
 8003f74:	687b      	ldr	r3, [r7, #4]
 8003f76:	4a3a      	ldr	r2, [pc, #232]	; (8004060 <TIM_Base_SetConfig+0x114>)
 8003f78:	4293      	cmp	r3, r2
 8003f7a:	d003      	beq.n	8003f84 <TIM_Base_SetConfig+0x38>
 8003f7c:	687b      	ldr	r3, [r7, #4]
 8003f7e:	4a39      	ldr	r2, [pc, #228]	; (8004064 <TIM_Base_SetConfig+0x118>)
 8003f80:	4293      	cmp	r3, r2
 8003f82:	d108      	bne.n	8003f96 <TIM_Base_SetConfig+0x4a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8003f84:	68fb      	ldr	r3, [r7, #12]
 8003f86:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003f8a:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8003f8c:	683b      	ldr	r3, [r7, #0]
 8003f8e:	685b      	ldr	r3, [r3, #4]
 8003f90:	68fa      	ldr	r2, [r7, #12]
 8003f92:	4313      	orrs	r3, r2
 8003f94:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8003f96:	687b      	ldr	r3, [r7, #4]
 8003f98:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003f9c:	d027      	beq.n	8003fee <TIM_Base_SetConfig+0xa2>
 8003f9e:	687b      	ldr	r3, [r7, #4]
 8003fa0:	4a2d      	ldr	r2, [pc, #180]	; (8004058 <TIM_Base_SetConfig+0x10c>)
 8003fa2:	4293      	cmp	r3, r2
 8003fa4:	d023      	beq.n	8003fee <TIM_Base_SetConfig+0xa2>
 8003fa6:	687b      	ldr	r3, [r7, #4]
 8003fa8:	4a2c      	ldr	r2, [pc, #176]	; (800405c <TIM_Base_SetConfig+0x110>)
 8003faa:	4293      	cmp	r3, r2
 8003fac:	d01f      	beq.n	8003fee <TIM_Base_SetConfig+0xa2>
 8003fae:	687b      	ldr	r3, [r7, #4]
 8003fb0:	4a2b      	ldr	r2, [pc, #172]	; (8004060 <TIM_Base_SetConfig+0x114>)
 8003fb2:	4293      	cmp	r3, r2
 8003fb4:	d01b      	beq.n	8003fee <TIM_Base_SetConfig+0xa2>
 8003fb6:	687b      	ldr	r3, [r7, #4]
 8003fb8:	4a2b      	ldr	r2, [pc, #172]	; (8004068 <TIM_Base_SetConfig+0x11c>)
 8003fba:	4293      	cmp	r3, r2
 8003fbc:	d017      	beq.n	8003fee <TIM_Base_SetConfig+0xa2>
 8003fbe:	687b      	ldr	r3, [r7, #4]
 8003fc0:	4a2a      	ldr	r2, [pc, #168]	; (800406c <TIM_Base_SetConfig+0x120>)
 8003fc2:	4293      	cmp	r3, r2
 8003fc4:	d013      	beq.n	8003fee <TIM_Base_SetConfig+0xa2>
 8003fc6:	687b      	ldr	r3, [r7, #4]
 8003fc8:	4a29      	ldr	r2, [pc, #164]	; (8004070 <TIM_Base_SetConfig+0x124>)
 8003fca:	4293      	cmp	r3, r2
 8003fcc:	d00f      	beq.n	8003fee <TIM_Base_SetConfig+0xa2>
 8003fce:	687b      	ldr	r3, [r7, #4]
 8003fd0:	4a28      	ldr	r2, [pc, #160]	; (8004074 <TIM_Base_SetConfig+0x128>)
 8003fd2:	4293      	cmp	r3, r2
 8003fd4:	d00b      	beq.n	8003fee <TIM_Base_SetConfig+0xa2>
 8003fd6:	687b      	ldr	r3, [r7, #4]
 8003fd8:	4a27      	ldr	r2, [pc, #156]	; (8004078 <TIM_Base_SetConfig+0x12c>)
 8003fda:	4293      	cmp	r3, r2
 8003fdc:	d007      	beq.n	8003fee <TIM_Base_SetConfig+0xa2>
 8003fde:	687b      	ldr	r3, [r7, #4]
 8003fe0:	4a26      	ldr	r2, [pc, #152]	; (800407c <TIM_Base_SetConfig+0x130>)
 8003fe2:	4293      	cmp	r3, r2
 8003fe4:	d003      	beq.n	8003fee <TIM_Base_SetConfig+0xa2>
 8003fe6:	687b      	ldr	r3, [r7, #4]
 8003fe8:	4a1e      	ldr	r2, [pc, #120]	; (8004064 <TIM_Base_SetConfig+0x118>)
 8003fea:	4293      	cmp	r3, r2
 8003fec:	d108      	bne.n	8004000 <TIM_Base_SetConfig+0xb4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8003fee:	68fb      	ldr	r3, [r7, #12]
 8003ff0:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003ff4:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8003ff6:	683b      	ldr	r3, [r7, #0]
 8003ff8:	68db      	ldr	r3, [r3, #12]
 8003ffa:	68fa      	ldr	r2, [r7, #12]
 8003ffc:	4313      	orrs	r3, r2
 8003ffe:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8004000:	68fb      	ldr	r3, [r7, #12]
 8004002:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8004006:	683b      	ldr	r3, [r7, #0]
 8004008:	695b      	ldr	r3, [r3, #20]
 800400a:	4313      	orrs	r3, r2
 800400c:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800400e:	687b      	ldr	r3, [r7, #4]
 8004010:	68fa      	ldr	r2, [r7, #12]
 8004012:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8004014:	683b      	ldr	r3, [r7, #0]
 8004016:	689a      	ldr	r2, [r3, #8]
 8004018:	687b      	ldr	r3, [r7, #4]
 800401a:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800401c:	683b      	ldr	r3, [r7, #0]
 800401e:	681a      	ldr	r2, [r3, #0]
 8004020:	687b      	ldr	r3, [r7, #4]
 8004022:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8004024:	687b      	ldr	r3, [r7, #4]
 8004026:	4a13      	ldr	r2, [pc, #76]	; (8004074 <TIM_Base_SetConfig+0x128>)
 8004028:	4293      	cmp	r3, r2
 800402a:	d007      	beq.n	800403c <TIM_Base_SetConfig+0xf0>
 800402c:	687b      	ldr	r3, [r7, #4]
 800402e:	4a12      	ldr	r2, [pc, #72]	; (8004078 <TIM_Base_SetConfig+0x12c>)
 8004030:	4293      	cmp	r3, r2
 8004032:	d003      	beq.n	800403c <TIM_Base_SetConfig+0xf0>
 8004034:	687b      	ldr	r3, [r7, #4]
 8004036:	4a11      	ldr	r2, [pc, #68]	; (800407c <TIM_Base_SetConfig+0x130>)
 8004038:	4293      	cmp	r3, r2
 800403a:	d103      	bne.n	8004044 <TIM_Base_SetConfig+0xf8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 800403c:	683b      	ldr	r3, [r7, #0]
 800403e:	691a      	ldr	r2, [r3, #16]
 8004040:	687b      	ldr	r3, [r7, #4]
 8004042:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8004044:	687b      	ldr	r3, [r7, #4]
 8004046:	2201      	movs	r2, #1
 8004048:	615a      	str	r2, [r3, #20]
}
 800404a:	bf00      	nop
 800404c:	3714      	adds	r7, #20
 800404e:	46bd      	mov	sp, r7
 8004050:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004054:	4770      	bx	lr
 8004056:	bf00      	nop
 8004058:	40000400 	.word	0x40000400
 800405c:	40000800 	.word	0x40000800
 8004060:	40000c00 	.word	0x40000c00
 8004064:	40015c00 	.word	0x40015c00
 8004068:	40001800 	.word	0x40001800
 800406c:	40001c00 	.word	0x40001c00
 8004070:	40002000 	.word	0x40002000
 8004074:	40014000 	.word	0x40014000
 8004078:	40014400 	.word	0x40014400
 800407c:	40014800 	.word	0x40014800

08004080 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8004080:	b480      	push	{r7}
 8004082:	b087      	sub	sp, #28
 8004084:	af00      	add	r7, sp, #0
 8004086:	60f8      	str	r0, [r7, #12]
 8004088:	60b9      	str	r1, [r7, #8]
 800408a:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 800408c:	68fb      	ldr	r3, [r7, #12]
 800408e:	6a1b      	ldr	r3, [r3, #32]
 8004090:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8004092:	68fb      	ldr	r3, [r7, #12]
 8004094:	6a1b      	ldr	r3, [r3, #32]
 8004096:	f023 0201 	bic.w	r2, r3, #1
 800409a:	68fb      	ldr	r3, [r7, #12]
 800409c:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800409e:	68fb      	ldr	r3, [r7, #12]
 80040a0:	699b      	ldr	r3, [r3, #24]
 80040a2:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 80040a4:	693b      	ldr	r3, [r7, #16]
 80040a6:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80040aa:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 80040ac:	687b      	ldr	r3, [r7, #4]
 80040ae:	011b      	lsls	r3, r3, #4
 80040b0:	693a      	ldr	r2, [r7, #16]
 80040b2:	4313      	orrs	r3, r2
 80040b4:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 80040b6:	697b      	ldr	r3, [r7, #20]
 80040b8:	f023 030a 	bic.w	r3, r3, #10
 80040bc:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 80040be:	697a      	ldr	r2, [r7, #20]
 80040c0:	68bb      	ldr	r3, [r7, #8]
 80040c2:	4313      	orrs	r3, r2
 80040c4:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 80040c6:	68fb      	ldr	r3, [r7, #12]
 80040c8:	693a      	ldr	r2, [r7, #16]
 80040ca:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80040cc:	68fb      	ldr	r3, [r7, #12]
 80040ce:	697a      	ldr	r2, [r7, #20]
 80040d0:	621a      	str	r2, [r3, #32]
}
 80040d2:	bf00      	nop
 80040d4:	371c      	adds	r7, #28
 80040d6:	46bd      	mov	sp, r7
 80040d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80040dc:	4770      	bx	lr

080040de <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80040de:	b480      	push	{r7}
 80040e0:	b087      	sub	sp, #28
 80040e2:	af00      	add	r7, sp, #0
 80040e4:	60f8      	str	r0, [r7, #12]
 80040e6:	60b9      	str	r1, [r7, #8]
 80040e8:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80040ea:	68fb      	ldr	r3, [r7, #12]
 80040ec:	6a1b      	ldr	r3, [r3, #32]
 80040ee:	f023 0210 	bic.w	r2, r3, #16
 80040f2:	68fb      	ldr	r3, [r7, #12]
 80040f4:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80040f6:	68fb      	ldr	r3, [r7, #12]
 80040f8:	699b      	ldr	r3, [r3, #24]
 80040fa:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 80040fc:	68fb      	ldr	r3, [r7, #12]
 80040fe:	6a1b      	ldr	r3, [r3, #32]
 8004100:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8004102:	697b      	ldr	r3, [r7, #20]
 8004104:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8004108:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 800410a:	687b      	ldr	r3, [r7, #4]
 800410c:	031b      	lsls	r3, r3, #12
 800410e:	697a      	ldr	r2, [r7, #20]
 8004110:	4313      	orrs	r3, r2
 8004112:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8004114:	693b      	ldr	r3, [r7, #16]
 8004116:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 800411a:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 800411c:	68bb      	ldr	r3, [r7, #8]
 800411e:	011b      	lsls	r3, r3, #4
 8004120:	693a      	ldr	r2, [r7, #16]
 8004122:	4313      	orrs	r3, r2
 8004124:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8004126:	68fb      	ldr	r3, [r7, #12]
 8004128:	697a      	ldr	r2, [r7, #20]
 800412a:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800412c:	68fb      	ldr	r3, [r7, #12]
 800412e:	693a      	ldr	r2, [r7, #16]
 8004130:	621a      	str	r2, [r3, #32]
}
 8004132:	bf00      	nop
 8004134:	371c      	adds	r7, #28
 8004136:	46bd      	mov	sp, r7
 8004138:	f85d 7b04 	ldr.w	r7, [sp], #4
 800413c:	4770      	bx	lr

0800413e <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 800413e:	b480      	push	{r7}
 8004140:	b085      	sub	sp, #20
 8004142:	af00      	add	r7, sp, #0
 8004144:	6078      	str	r0, [r7, #4]
 8004146:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8004148:	687b      	ldr	r3, [r7, #4]
 800414a:	689b      	ldr	r3, [r3, #8]
 800414c:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 800414e:	68fb      	ldr	r3, [r7, #12]
 8004150:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004154:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8004156:	683a      	ldr	r2, [r7, #0]
 8004158:	68fb      	ldr	r3, [r7, #12]
 800415a:	4313      	orrs	r3, r2
 800415c:	f043 0307 	orr.w	r3, r3, #7
 8004160:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8004162:	687b      	ldr	r3, [r7, #4]
 8004164:	68fa      	ldr	r2, [r7, #12]
 8004166:	609a      	str	r2, [r3, #8]
}
 8004168:	bf00      	nop
 800416a:	3714      	adds	r7, #20
 800416c:	46bd      	mov	sp, r7
 800416e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004172:	4770      	bx	lr

08004174 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8004174:	b480      	push	{r7}
 8004176:	b087      	sub	sp, #28
 8004178:	af00      	add	r7, sp, #0
 800417a:	60f8      	str	r0, [r7, #12]
 800417c:	60b9      	str	r1, [r7, #8]
 800417e:	607a      	str	r2, [r7, #4]
 8004180:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8004182:	68fb      	ldr	r3, [r7, #12]
 8004184:	689b      	ldr	r3, [r3, #8]
 8004186:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8004188:	697b      	ldr	r3, [r7, #20]
 800418a:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800418e:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8004190:	683b      	ldr	r3, [r7, #0]
 8004192:	021a      	lsls	r2, r3, #8
 8004194:	687b      	ldr	r3, [r7, #4]
 8004196:	431a      	orrs	r2, r3
 8004198:	68bb      	ldr	r3, [r7, #8]
 800419a:	4313      	orrs	r3, r2
 800419c:	697a      	ldr	r2, [r7, #20]
 800419e:	4313      	orrs	r3, r2
 80041a0:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80041a2:	68fb      	ldr	r3, [r7, #12]
 80041a4:	697a      	ldr	r2, [r7, #20]
 80041a6:	609a      	str	r2, [r3, #8]
}
 80041a8:	bf00      	nop
 80041aa:	371c      	adds	r7, #28
 80041ac:	46bd      	mov	sp, r7
 80041ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80041b2:	4770      	bx	lr

080041b4 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 80041b4:	b480      	push	{r7}
 80041b6:	b085      	sub	sp, #20
 80041b8:	af00      	add	r7, sp, #0
 80041ba:	6078      	str	r0, [r7, #4]
 80041bc:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 80041be:	687b      	ldr	r3, [r7, #4]
 80041c0:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80041c4:	2b01      	cmp	r3, #1
 80041c6:	d101      	bne.n	80041cc <HAL_TIMEx_MasterConfigSynchronization+0x18>
 80041c8:	2302      	movs	r3, #2
 80041ca:	e055      	b.n	8004278 <HAL_TIMEx_MasterConfigSynchronization+0xc4>
 80041cc:	687b      	ldr	r3, [r7, #4]
 80041ce:	2201      	movs	r2, #1
 80041d0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 80041d4:	687b      	ldr	r3, [r7, #4]
 80041d6:	2202      	movs	r2, #2
 80041d8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 80041dc:	687b      	ldr	r3, [r7, #4]
 80041de:	681b      	ldr	r3, [r3, #0]
 80041e0:	685b      	ldr	r3, [r3, #4]
 80041e2:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80041e4:	687b      	ldr	r3, [r7, #4]
 80041e6:	681b      	ldr	r3, [r3, #0]
 80041e8:	689b      	ldr	r3, [r3, #8]
 80041ea:	60bb      	str	r3, [r7, #8]
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
  }
#endif /* TIM_CR2_MMS2 */

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 80041ec:	68fb      	ldr	r3, [r7, #12]
 80041ee:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80041f2:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 80041f4:	683b      	ldr	r3, [r7, #0]
 80041f6:	681b      	ldr	r3, [r3, #0]
 80041f8:	68fa      	ldr	r2, [r7, #12]
 80041fa:	4313      	orrs	r3, r2
 80041fc:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 80041fe:	687b      	ldr	r3, [r7, #4]
 8004200:	681b      	ldr	r3, [r3, #0]
 8004202:	68fa      	ldr	r2, [r7, #12]
 8004204:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8004206:	687b      	ldr	r3, [r7, #4]
 8004208:	681b      	ldr	r3, [r3, #0]
 800420a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800420e:	d01d      	beq.n	800424c <HAL_TIMEx_MasterConfigSynchronization+0x98>
 8004210:	687b      	ldr	r3, [r7, #4]
 8004212:	681b      	ldr	r3, [r3, #0]
 8004214:	4a1b      	ldr	r2, [pc, #108]	; (8004284 <HAL_TIMEx_MasterConfigSynchronization+0xd0>)
 8004216:	4293      	cmp	r3, r2
 8004218:	d018      	beq.n	800424c <HAL_TIMEx_MasterConfigSynchronization+0x98>
 800421a:	687b      	ldr	r3, [r7, #4]
 800421c:	681b      	ldr	r3, [r3, #0]
 800421e:	4a1a      	ldr	r2, [pc, #104]	; (8004288 <HAL_TIMEx_MasterConfigSynchronization+0xd4>)
 8004220:	4293      	cmp	r3, r2
 8004222:	d013      	beq.n	800424c <HAL_TIMEx_MasterConfigSynchronization+0x98>
 8004224:	687b      	ldr	r3, [r7, #4]
 8004226:	681b      	ldr	r3, [r3, #0]
 8004228:	4a18      	ldr	r2, [pc, #96]	; (800428c <HAL_TIMEx_MasterConfigSynchronization+0xd8>)
 800422a:	4293      	cmp	r3, r2
 800422c:	d00e      	beq.n	800424c <HAL_TIMEx_MasterConfigSynchronization+0x98>
 800422e:	687b      	ldr	r3, [r7, #4]
 8004230:	681b      	ldr	r3, [r3, #0]
 8004232:	4a17      	ldr	r2, [pc, #92]	; (8004290 <HAL_TIMEx_MasterConfigSynchronization+0xdc>)
 8004234:	4293      	cmp	r3, r2
 8004236:	d009      	beq.n	800424c <HAL_TIMEx_MasterConfigSynchronization+0x98>
 8004238:	687b      	ldr	r3, [r7, #4]
 800423a:	681b      	ldr	r3, [r3, #0]
 800423c:	4a15      	ldr	r2, [pc, #84]	; (8004294 <HAL_TIMEx_MasterConfigSynchronization+0xe0>)
 800423e:	4293      	cmp	r3, r2
 8004240:	d004      	beq.n	800424c <HAL_TIMEx_MasterConfigSynchronization+0x98>
 8004242:	687b      	ldr	r3, [r7, #4]
 8004244:	681b      	ldr	r3, [r3, #0]
 8004246:	4a14      	ldr	r2, [pc, #80]	; (8004298 <HAL_TIMEx_MasterConfigSynchronization+0xe4>)
 8004248:	4293      	cmp	r3, r2
 800424a:	d10c      	bne.n	8004266 <HAL_TIMEx_MasterConfigSynchronization+0xb2>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800424c:	68bb      	ldr	r3, [r7, #8]
 800424e:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8004252:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8004254:	683b      	ldr	r3, [r7, #0]
 8004256:	685b      	ldr	r3, [r3, #4]
 8004258:	68ba      	ldr	r2, [r7, #8]
 800425a:	4313      	orrs	r3, r2
 800425c:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 800425e:	687b      	ldr	r3, [r7, #4]
 8004260:	681b      	ldr	r3, [r3, #0]
 8004262:	68ba      	ldr	r2, [r7, #8]
 8004264:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8004266:	687b      	ldr	r3, [r7, #4]
 8004268:	2201      	movs	r2, #1
 800426a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800426e:	687b      	ldr	r3, [r7, #4]
 8004270:	2200      	movs	r2, #0
 8004272:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8004276:	2300      	movs	r3, #0
}
 8004278:	4618      	mov	r0, r3
 800427a:	3714      	adds	r7, #20
 800427c:	46bd      	mov	sp, r7
 800427e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004282:	4770      	bx	lr
 8004284:	40000400 	.word	0x40000400
 8004288:	40000800 	.word	0x40000800
 800428c:	40000c00 	.word	0x40000c00
 8004290:	40001800 	.word	0x40001800
 8004294:	40014000 	.word	0x40014000
 8004298:	40015c00 	.word	0x40015c00

0800429c <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 800429c:	b480      	push	{r7}
 800429e:	b083      	sub	sp, #12
 80042a0:	af00      	add	r7, sp, #0
 80042a2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 80042a4:	bf00      	nop
 80042a6:	370c      	adds	r7, #12
 80042a8:	46bd      	mov	sp, r7
 80042aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80042ae:	4770      	bx	lr

080042b0 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 80042b0:	b480      	push	{r7}
 80042b2:	b083      	sub	sp, #12
 80042b4:	af00      	add	r7, sp, #0
 80042b6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 80042b8:	bf00      	nop
 80042ba:	370c      	adds	r7, #12
 80042bc:	46bd      	mov	sp, r7
 80042be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80042c2:	4770      	bx	lr

080042c4 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80042c4:	b580      	push	{r7, lr}
 80042c6:	b082      	sub	sp, #8
 80042c8:	af00      	add	r7, sp, #0
 80042ca:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80042cc:	687b      	ldr	r3, [r7, #4]
 80042ce:	2b00      	cmp	r3, #0
 80042d0:	d101      	bne.n	80042d6 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80042d2:	2301      	movs	r3, #1
 80042d4:	e040      	b.n	8004358 <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 80042d6:	687b      	ldr	r3, [r7, #4]
 80042d8:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80042da:	2b00      	cmp	r3, #0
 80042dc:	d106      	bne.n	80042ec <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80042de:	687b      	ldr	r3, [r7, #4]
 80042e0:	2200      	movs	r2, #0
 80042e2:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80042e6:	6878      	ldr	r0, [r7, #4]
 80042e8:	f7fc fba6 	bl	8000a38 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80042ec:	687b      	ldr	r3, [r7, #4]
 80042ee:	2224      	movs	r2, #36	; 0x24
 80042f0:	679a      	str	r2, [r3, #120]	; 0x78

  __HAL_UART_DISABLE(huart);
 80042f2:	687b      	ldr	r3, [r7, #4]
 80042f4:	681b      	ldr	r3, [r3, #0]
 80042f6:	681a      	ldr	r2, [r3, #0]
 80042f8:	687b      	ldr	r3, [r7, #4]
 80042fa:	681b      	ldr	r3, [r3, #0]
 80042fc:	f022 0201 	bic.w	r2, r2, #1
 8004300:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8004302:	6878      	ldr	r0, [r7, #4]
 8004304:	f000 fb8e 	bl	8004a24 <UART_SetConfig>
 8004308:	4603      	mov	r3, r0
 800430a:	2b01      	cmp	r3, #1
 800430c:	d101      	bne.n	8004312 <HAL_UART_Init+0x4e>
  {
    return HAL_ERROR;
 800430e:	2301      	movs	r3, #1
 8004310:	e022      	b.n	8004358 <HAL_UART_Init+0x94>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8004312:	687b      	ldr	r3, [r7, #4]
 8004314:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004316:	2b00      	cmp	r3, #0
 8004318:	d002      	beq.n	8004320 <HAL_UART_Init+0x5c>
  {
    UART_AdvFeatureConfig(huart);
 800431a:	6878      	ldr	r0, [r7, #4]
 800431c:	f000 fcfc 	bl	8004d18 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8004320:	687b      	ldr	r3, [r7, #4]
 8004322:	681b      	ldr	r3, [r3, #0]
 8004324:	685a      	ldr	r2, [r3, #4]
 8004326:	687b      	ldr	r3, [r7, #4]
 8004328:	681b      	ldr	r3, [r3, #0]
 800432a:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 800432e:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8004330:	687b      	ldr	r3, [r7, #4]
 8004332:	681b      	ldr	r3, [r3, #0]
 8004334:	689a      	ldr	r2, [r3, #8]
 8004336:	687b      	ldr	r3, [r7, #4]
 8004338:	681b      	ldr	r3, [r3, #0]
 800433a:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 800433e:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8004340:	687b      	ldr	r3, [r7, #4]
 8004342:	681b      	ldr	r3, [r3, #0]
 8004344:	681a      	ldr	r2, [r3, #0]
 8004346:	687b      	ldr	r3, [r7, #4]
 8004348:	681b      	ldr	r3, [r3, #0]
 800434a:	f042 0201 	orr.w	r2, r2, #1
 800434e:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8004350:	6878      	ldr	r0, [r7, #4]
 8004352:	f000 fd83 	bl	8004e5c <UART_CheckIdleState>
 8004356:	4603      	mov	r3, r0
}
 8004358:	4618      	mov	r0, r3
 800435a:	3708      	adds	r7, #8
 800435c:	46bd      	mov	sp, r7
 800435e:	bd80      	pop	{r7, pc}

08004360 <HAL_UART_Transmit_IT>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be sent.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8004360:	b480      	push	{r7}
 8004362:	b08b      	sub	sp, #44	; 0x2c
 8004364:	af00      	add	r7, sp, #0
 8004366:	60f8      	str	r0, [r7, #12]
 8004368:	60b9      	str	r1, [r7, #8]
 800436a:	4613      	mov	r3, r2
 800436c:	80fb      	strh	r3, [r7, #6]
  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 800436e:	68fb      	ldr	r3, [r7, #12]
 8004370:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8004372:	2b20      	cmp	r3, #32
 8004374:	d156      	bne.n	8004424 <HAL_UART_Transmit_IT+0xc4>
  {
    if ((pData == NULL) || (Size == 0U))
 8004376:	68bb      	ldr	r3, [r7, #8]
 8004378:	2b00      	cmp	r3, #0
 800437a:	d002      	beq.n	8004382 <HAL_UART_Transmit_IT+0x22>
 800437c:	88fb      	ldrh	r3, [r7, #6]
 800437e:	2b00      	cmp	r3, #0
 8004380:	d101      	bne.n	8004386 <HAL_UART_Transmit_IT+0x26>
    {
      return HAL_ERROR;
 8004382:	2301      	movs	r3, #1
 8004384:	e04f      	b.n	8004426 <HAL_UART_Transmit_IT+0xc6>
    }

    __HAL_LOCK(huart);
 8004386:	68fb      	ldr	r3, [r7, #12]
 8004388:	f893 3074 	ldrb.w	r3, [r3, #116]	; 0x74
 800438c:	2b01      	cmp	r3, #1
 800438e:	d101      	bne.n	8004394 <HAL_UART_Transmit_IT+0x34>
 8004390:	2302      	movs	r3, #2
 8004392:	e048      	b.n	8004426 <HAL_UART_Transmit_IT+0xc6>
 8004394:	68fb      	ldr	r3, [r7, #12]
 8004396:	2201      	movs	r2, #1
 8004398:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    huart->pTxBuffPtr  = pData;
 800439c:	68fb      	ldr	r3, [r7, #12]
 800439e:	68ba      	ldr	r2, [r7, #8]
 80043a0:	64da      	str	r2, [r3, #76]	; 0x4c
    huart->TxXferSize  = Size;
 80043a2:	68fb      	ldr	r3, [r7, #12]
 80043a4:	88fa      	ldrh	r2, [r7, #6]
 80043a6:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50
    huart->TxXferCount = Size;
 80043aa:	68fb      	ldr	r3, [r7, #12]
 80043ac:	88fa      	ldrh	r2, [r7, #6]
 80043ae:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
    huart->TxISR       = NULL;
 80043b2:	68fb      	ldr	r3, [r7, #12]
 80043b4:	2200      	movs	r2, #0
 80043b6:	669a      	str	r2, [r3, #104]	; 0x68

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80043b8:	68fb      	ldr	r3, [r7, #12]
 80043ba:	2200      	movs	r2, #0
 80043bc:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    huart->gState = HAL_UART_STATE_BUSY_TX;
 80043c0:	68fb      	ldr	r3, [r7, #12]
 80043c2:	2221      	movs	r2, #33	; 0x21
 80043c4:	679a      	str	r2, [r3, #120]	; 0x78

    /* Set the Tx ISR function pointer according to the data word length */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80043c6:	68fb      	ldr	r3, [r7, #12]
 80043c8:	689b      	ldr	r3, [r3, #8]
 80043ca:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80043ce:	d107      	bne.n	80043e0 <HAL_UART_Transmit_IT+0x80>
 80043d0:	68fb      	ldr	r3, [r7, #12]
 80043d2:	691b      	ldr	r3, [r3, #16]
 80043d4:	2b00      	cmp	r3, #0
 80043d6:	d103      	bne.n	80043e0 <HAL_UART_Transmit_IT+0x80>
    {
      huart->TxISR = UART_TxISR_16BIT;
 80043d8:	68fb      	ldr	r3, [r7, #12]
 80043da:	4a16      	ldr	r2, [pc, #88]	; (8004434 <HAL_UART_Transmit_IT+0xd4>)
 80043dc:	669a      	str	r2, [r3, #104]	; 0x68
 80043de:	e002      	b.n	80043e6 <HAL_UART_Transmit_IT+0x86>
    }
    else
    {
      huart->TxISR = UART_TxISR_8BIT;
 80043e0:	68fb      	ldr	r3, [r7, #12]
 80043e2:	4a15      	ldr	r2, [pc, #84]	; (8004438 <HAL_UART_Transmit_IT+0xd8>)
 80043e4:	669a      	str	r2, [r3, #104]	; 0x68
    }

    __HAL_UNLOCK(huart);
 80043e6:	68fb      	ldr	r3, [r7, #12]
 80043e8:	2200      	movs	r2, #0
 80043ea:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    /* Enable the Transmit Data Register Empty interrupt */
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TXEIE);
 80043ee:	68fb      	ldr	r3, [r7, #12]
 80043f0:	681b      	ldr	r3, [r3, #0]
 80043f2:	617b      	str	r3, [r7, #20]
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80043f4:	697b      	ldr	r3, [r7, #20]
 80043f6:	e853 3f00 	ldrex	r3, [r3]
 80043fa:	613b      	str	r3, [r7, #16]
   return(result);
 80043fc:	693b      	ldr	r3, [r7, #16]
 80043fe:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004402:	627b      	str	r3, [r7, #36]	; 0x24
 8004404:	68fb      	ldr	r3, [r7, #12]
 8004406:	681b      	ldr	r3, [r3, #0]
 8004408:	461a      	mov	r2, r3
 800440a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800440c:	623b      	str	r3, [r7, #32]
 800440e:	61fa      	str	r2, [r7, #28]
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004410:	69f9      	ldr	r1, [r7, #28]
 8004412:	6a3a      	ldr	r2, [r7, #32]
 8004414:	e841 2300 	strex	r3, r2, [r1]
 8004418:	61bb      	str	r3, [r7, #24]
   return(result);
 800441a:	69bb      	ldr	r3, [r7, #24]
 800441c:	2b00      	cmp	r3, #0
 800441e:	d1e6      	bne.n	80043ee <HAL_UART_Transmit_IT+0x8e>

    return HAL_OK;
 8004420:	2300      	movs	r3, #0
 8004422:	e000      	b.n	8004426 <HAL_UART_Transmit_IT+0xc6>
  }
  else
  {
    return HAL_BUSY;
 8004424:	2302      	movs	r3, #2
  }
}
 8004426:	4618      	mov	r0, r3
 8004428:	372c      	adds	r7, #44	; 0x2c
 800442a:	46bd      	mov	sp, r7
 800442c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004430:	4770      	bx	lr
 8004432:	bf00      	nop
 8004434:	08005221 	.word	0x08005221
 8004438:	08005169 	.word	0x08005169

0800443c <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 800443c:	b580      	push	{r7, lr}
 800443e:	b0ba      	sub	sp, #232	; 0xe8
 8004440:	af00      	add	r7, sp, #0
 8004442:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 8004444:	687b      	ldr	r3, [r7, #4]
 8004446:	681b      	ldr	r3, [r3, #0]
 8004448:	69db      	ldr	r3, [r3, #28]
 800444a:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 800444e:	687b      	ldr	r3, [r7, #4]
 8004450:	681b      	ldr	r3, [r3, #0]
 8004452:	681b      	ldr	r3, [r3, #0]
 8004454:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8004458:	687b      	ldr	r3, [r7, #4]
 800445a:	681b      	ldr	r3, [r3, #0]
 800445c:	689b      	ldr	r3, [r3, #8]
 800445e:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 8004462:	f8d7 20e4 	ldr.w	r2, [r7, #228]	; 0xe4
 8004466:	f640 030f 	movw	r3, #2063	; 0x80f
 800446a:	4013      	ands	r3, r2
 800446c:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == 0U)
 8004470:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8004474:	2b00      	cmp	r3, #0
 8004476:	d115      	bne.n	80044a4 <HAL_UART_IRQHandler+0x68>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
    if (((isrflags & USART_ISR_RXNE) != 0U)
 8004478:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800447c:	f003 0320 	and.w	r3, r3, #32
 8004480:	2b00      	cmp	r3, #0
 8004482:	d00f      	beq.n	80044a4 <HAL_UART_IRQHandler+0x68>
        && ((cr1its & USART_CR1_RXNEIE) != 0U))
 8004484:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8004488:	f003 0320 	and.w	r3, r3, #32
 800448c:	2b00      	cmp	r3, #0
 800448e:	d009      	beq.n	80044a4 <HAL_UART_IRQHandler+0x68>
    {
      if (huart->RxISR != NULL)
 8004490:	687b      	ldr	r3, [r7, #4]
 8004492:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8004494:	2b00      	cmp	r3, #0
 8004496:	f000 82a3 	beq.w	80049e0 <HAL_UART_IRQHandler+0x5a4>
      {
        huart->RxISR(huart);
 800449a:	687b      	ldr	r3, [r7, #4]
 800449c:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800449e:	6878      	ldr	r0, [r7, #4]
 80044a0:	4798      	blx	r3
      }
      return;
 80044a2:	e29d      	b.n	80049e0 <HAL_UART_IRQHandler+0x5a4>
    }
  }

  /* If some errors occur */
  if ((errorflags != 0U)
 80044a4:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 80044a8:	2b00      	cmp	r3, #0
 80044aa:	f000 8117 	beq.w	80046dc <HAL_UART_IRQHandler+0x2a0>
      && (((cr3its & USART_CR3_EIE) != 0U)
 80044ae:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80044b2:	f003 0301 	and.w	r3, r3, #1
 80044b6:	2b00      	cmp	r3, #0
 80044b8:	d106      	bne.n	80044c8 <HAL_UART_IRQHandler+0x8c>
          || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U)))
 80044ba:	f8d7 20e0 	ldr.w	r2, [r7, #224]	; 0xe0
 80044be:	4b85      	ldr	r3, [pc, #532]	; (80046d4 <HAL_UART_IRQHandler+0x298>)
 80044c0:	4013      	ands	r3, r2
 80044c2:	2b00      	cmp	r3, #0
 80044c4:	f000 810a 	beq.w	80046dc <HAL_UART_IRQHandler+0x2a0>
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 80044c8:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80044cc:	f003 0301 	and.w	r3, r3, #1
 80044d0:	2b00      	cmp	r3, #0
 80044d2:	d011      	beq.n	80044f8 <HAL_UART_IRQHandler+0xbc>
 80044d4:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80044d8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80044dc:	2b00      	cmp	r3, #0
 80044de:	d00b      	beq.n	80044f8 <HAL_UART_IRQHandler+0xbc>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 80044e0:	687b      	ldr	r3, [r7, #4]
 80044e2:	681b      	ldr	r3, [r3, #0]
 80044e4:	2201      	movs	r2, #1
 80044e6:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 80044e8:	687b      	ldr	r3, [r7, #4]
 80044ea:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80044ee:	f043 0201 	orr.w	r2, r3, #1
 80044f2:	687b      	ldr	r3, [r7, #4]
 80044f4:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 80044f8:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80044fc:	f003 0302 	and.w	r3, r3, #2
 8004500:	2b00      	cmp	r3, #0
 8004502:	d011      	beq.n	8004528 <HAL_UART_IRQHandler+0xec>
 8004504:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8004508:	f003 0301 	and.w	r3, r3, #1
 800450c:	2b00      	cmp	r3, #0
 800450e:	d00b      	beq.n	8004528 <HAL_UART_IRQHandler+0xec>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 8004510:	687b      	ldr	r3, [r7, #4]
 8004512:	681b      	ldr	r3, [r3, #0]
 8004514:	2202      	movs	r2, #2
 8004516:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8004518:	687b      	ldr	r3, [r7, #4]
 800451a:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800451e:	f043 0204 	orr.w	r2, r3, #4
 8004522:	687b      	ldr	r3, [r7, #4]
 8004524:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8004528:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800452c:	f003 0304 	and.w	r3, r3, #4
 8004530:	2b00      	cmp	r3, #0
 8004532:	d011      	beq.n	8004558 <HAL_UART_IRQHandler+0x11c>
 8004534:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8004538:	f003 0301 	and.w	r3, r3, #1
 800453c:	2b00      	cmp	r3, #0
 800453e:	d00b      	beq.n	8004558 <HAL_UART_IRQHandler+0x11c>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 8004540:	687b      	ldr	r3, [r7, #4]
 8004542:	681b      	ldr	r3, [r3, #0]
 8004544:	2204      	movs	r2, #4
 8004546:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8004548:	687b      	ldr	r3, [r7, #4]
 800454a:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800454e:	f043 0202 	orr.w	r2, r3, #2
 8004552:	687b      	ldr	r3, [r7, #4]
 8004554:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    }

    /* UART Over-Run interrupt occurred -----------------------------------------*/
    if (((isrflags & USART_ISR_ORE) != 0U)
 8004558:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800455c:	f003 0308 	and.w	r3, r3, #8
 8004560:	2b00      	cmp	r3, #0
 8004562:	d017      	beq.n	8004594 <HAL_UART_IRQHandler+0x158>
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 8004564:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8004568:	f003 0320 	and.w	r3, r3, #32
 800456c:	2b00      	cmp	r3, #0
 800456e:	d105      	bne.n	800457c <HAL_UART_IRQHandler+0x140>
            ((cr3its & USART_CR3_EIE) != 0U)))
 8004570:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8004574:	f003 0301 	and.w	r3, r3, #1
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 8004578:	2b00      	cmp	r3, #0
 800457a:	d00b      	beq.n	8004594 <HAL_UART_IRQHandler+0x158>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 800457c:	687b      	ldr	r3, [r7, #4]
 800457e:	681b      	ldr	r3, [r3, #0]
 8004580:	2208      	movs	r2, #8
 8004582:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8004584:	687b      	ldr	r3, [r7, #4]
 8004586:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800458a:	f043 0208 	orr.w	r2, r3, #8
 800458e:	687b      	ldr	r3, [r7, #4]
 8004590:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 8004594:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004598:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800459c:	2b00      	cmp	r3, #0
 800459e:	d012      	beq.n	80045c6 <HAL_UART_IRQHandler+0x18a>
 80045a0:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80045a4:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 80045a8:	2b00      	cmp	r3, #0
 80045aa:	d00c      	beq.n	80045c6 <HAL_UART_IRQHandler+0x18a>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 80045ac:	687b      	ldr	r3, [r7, #4]
 80045ae:	681b      	ldr	r3, [r3, #0]
 80045b0:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80045b4:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 80045b6:	687b      	ldr	r3, [r7, #4]
 80045b8:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80045bc:	f043 0220 	orr.w	r2, r3, #32
 80045c0:	687b      	ldr	r3, [r7, #4]
 80045c2:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 80045c6:	687b      	ldr	r3, [r7, #4]
 80045c8:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80045cc:	2b00      	cmp	r3, #0
 80045ce:	f000 8209 	beq.w	80049e4 <HAL_UART_IRQHandler+0x5a8>
    {
      /* UART in mode Receiver --------------------------------------------------*/
      if (((isrflags & USART_ISR_RXNE) != 0U)
 80045d2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80045d6:	f003 0320 	and.w	r3, r3, #32
 80045da:	2b00      	cmp	r3, #0
 80045dc:	d00d      	beq.n	80045fa <HAL_UART_IRQHandler+0x1be>
          && ((cr1its & USART_CR1_RXNEIE) != 0U))
 80045de:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80045e2:	f003 0320 	and.w	r3, r3, #32
 80045e6:	2b00      	cmp	r3, #0
 80045e8:	d007      	beq.n	80045fa <HAL_UART_IRQHandler+0x1be>
      {
        if (huart->RxISR != NULL)
 80045ea:	687b      	ldr	r3, [r7, #4]
 80045ec:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80045ee:	2b00      	cmp	r3, #0
 80045f0:	d003      	beq.n	80045fa <HAL_UART_IRQHandler+0x1be>
        {
          huart->RxISR(huart);
 80045f2:	687b      	ldr	r3, [r7, #4]
 80045f4:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80045f6:	6878      	ldr	r0, [r7, #4]
 80045f8:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 80045fa:	687b      	ldr	r3, [r7, #4]
 80045fc:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8004600:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8004604:	687b      	ldr	r3, [r7, #4]
 8004606:	681b      	ldr	r3, [r3, #0]
 8004608:	689b      	ldr	r3, [r3, #8]
 800460a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800460e:	2b40      	cmp	r3, #64	; 0x40
 8004610:	d005      	beq.n	800461e <HAL_UART_IRQHandler+0x1e2>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 8004612:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8004616:	f003 0328 	and.w	r3, r3, #40	; 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 800461a:	2b00      	cmp	r3, #0
 800461c:	d04f      	beq.n	80046be <HAL_UART_IRQHandler+0x282>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 800461e:	6878      	ldr	r0, [r7, #4]
 8004620:	f000 fd29 	bl	8005076 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004624:	687b      	ldr	r3, [r7, #4]
 8004626:	681b      	ldr	r3, [r3, #0]
 8004628:	689b      	ldr	r3, [r3, #8]
 800462a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800462e:	2b40      	cmp	r3, #64	; 0x40
 8004630:	d141      	bne.n	80046b6 <HAL_UART_IRQHandler+0x27a>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8004632:	687b      	ldr	r3, [r7, #4]
 8004634:	681b      	ldr	r3, [r3, #0]
 8004636:	3308      	adds	r3, #8
 8004638:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800463c:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8004640:	e853 3f00 	ldrex	r3, [r3]
 8004644:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 8004648:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 800464c:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8004650:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8004654:	687b      	ldr	r3, [r7, #4]
 8004656:	681b      	ldr	r3, [r3, #0]
 8004658:	3308      	adds	r3, #8
 800465a:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 800465e:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 8004662:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004666:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 800466a:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 800466e:	e841 2300 	strex	r3, r2, [r1]
 8004672:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 8004676:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 800467a:	2b00      	cmp	r3, #0
 800467c:	d1d9      	bne.n	8004632 <HAL_UART_IRQHandler+0x1f6>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 800467e:	687b      	ldr	r3, [r7, #4]
 8004680:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004682:	2b00      	cmp	r3, #0
 8004684:	d013      	beq.n	80046ae <HAL_UART_IRQHandler+0x272>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8004686:	687b      	ldr	r3, [r7, #4]
 8004688:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800468a:	4a13      	ldr	r2, [pc, #76]	; (80046d8 <HAL_UART_IRQHandler+0x29c>)
 800468c:	635a      	str	r2, [r3, #52]	; 0x34

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 800468e:	687b      	ldr	r3, [r7, #4]
 8004690:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004692:	4618      	mov	r0, r3
 8004694:	f7fc fea6 	bl	80013e4 <HAL_DMA_Abort_IT>
 8004698:	4603      	mov	r3, r0
 800469a:	2b00      	cmp	r3, #0
 800469c:	d017      	beq.n	80046ce <HAL_UART_IRQHandler+0x292>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 800469e:	687b      	ldr	r3, [r7, #4]
 80046a0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80046a2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80046a4:	687a      	ldr	r2, [r7, #4]
 80046a6:	6f12      	ldr	r2, [r2, #112]	; 0x70
 80046a8:	4610      	mov	r0, r2
 80046aa:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80046ac:	e00f      	b.n	80046ce <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 80046ae:	6878      	ldr	r0, [r7, #4]
 80046b0:	f000 f9a2 	bl	80049f8 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80046b4:	e00b      	b.n	80046ce <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 80046b6:	6878      	ldr	r0, [r7, #4]
 80046b8:	f000 f99e 	bl	80049f8 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80046bc:	e007      	b.n	80046ce <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 80046be:	6878      	ldr	r0, [r7, #4]
 80046c0:	f000 f99a 	bl	80049f8 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 80046c4:	687b      	ldr	r3, [r7, #4]
 80046c6:	2200      	movs	r2, #0
 80046c8:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
      }
    }
    return;
 80046cc:	e18a      	b.n	80049e4 <HAL_UART_IRQHandler+0x5a8>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80046ce:	bf00      	nop
    return;
 80046d0:	e188      	b.n	80049e4 <HAL_UART_IRQHandler+0x5a8>
 80046d2:	bf00      	nop
 80046d4:	04000120 	.word	0x04000120
 80046d8:	0800513d 	.word	0x0800513d

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80046dc:	687b      	ldr	r3, [r7, #4]
 80046de:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80046e0:	2b01      	cmp	r3, #1
 80046e2:	f040 8143 	bne.w	800496c <HAL_UART_IRQHandler+0x530>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 80046e6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80046ea:	f003 0310 	and.w	r3, r3, #16
 80046ee:	2b00      	cmp	r3, #0
 80046f0:	f000 813c 	beq.w	800496c <HAL_UART_IRQHandler+0x530>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 80046f4:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80046f8:	f003 0310 	and.w	r3, r3, #16
 80046fc:	2b00      	cmp	r3, #0
 80046fe:	f000 8135 	beq.w	800496c <HAL_UART_IRQHandler+0x530>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8004702:	687b      	ldr	r3, [r7, #4]
 8004704:	681b      	ldr	r3, [r3, #0]
 8004706:	2210      	movs	r2, #16
 8004708:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800470a:	687b      	ldr	r3, [r7, #4]
 800470c:	681b      	ldr	r3, [r3, #0]
 800470e:	689b      	ldr	r3, [r3, #8]
 8004710:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004714:	2b40      	cmp	r3, #64	; 0x40
 8004716:	f040 80b1 	bne.w	800487c <HAL_UART_IRQHandler+0x440>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 800471a:	687b      	ldr	r3, [r7, #4]
 800471c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800471e:	681b      	ldr	r3, [r3, #0]
 8004720:	685b      	ldr	r3, [r3, #4]
 8004722:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 8004726:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 800472a:	2b00      	cmp	r3, #0
 800472c:	f000 815c 	beq.w	80049e8 <HAL_UART_IRQHandler+0x5ac>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8004730:	687b      	ldr	r3, [r7, #4]
 8004732:	f8b3 3058 	ldrh.w	r3, [r3, #88]	; 0x58
 8004736:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 800473a:	429a      	cmp	r2, r3
 800473c:	f080 8154 	bcs.w	80049e8 <HAL_UART_IRQHandler+0x5ac>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8004740:	687b      	ldr	r3, [r7, #4]
 8004742:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8004746:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 800474a:	687b      	ldr	r3, [r7, #4]
 800474c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800474e:	699b      	ldr	r3, [r3, #24]
 8004750:	2b20      	cmp	r3, #32
 8004752:	f000 8085 	beq.w	8004860 <HAL_UART_IRQHandler+0x424>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8004756:	687b      	ldr	r3, [r7, #4]
 8004758:	681b      	ldr	r3, [r3, #0]
 800475a:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800475e:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8004762:	e853 3f00 	ldrex	r3, [r3]
 8004766:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 800476a:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 800476e:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8004772:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8004776:	687b      	ldr	r3, [r7, #4]
 8004778:	681b      	ldr	r3, [r3, #0]
 800477a:	461a      	mov	r2, r3
 800477c:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8004780:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 8004784:	f8c7 2090 	str.w	r2, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004788:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 800478c:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 8004790:	e841 2300 	strex	r3, r2, [r1]
 8004794:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 8004798:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800479c:	2b00      	cmp	r3, #0
 800479e:	d1da      	bne.n	8004756 <HAL_UART_IRQHandler+0x31a>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80047a0:	687b      	ldr	r3, [r7, #4]
 80047a2:	681b      	ldr	r3, [r3, #0]
 80047a4:	3308      	adds	r3, #8
 80047a6:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80047a8:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80047aa:	e853 3f00 	ldrex	r3, [r3]
 80047ae:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 80047b0:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80047b2:	f023 0301 	bic.w	r3, r3, #1
 80047b6:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 80047ba:	687b      	ldr	r3, [r7, #4]
 80047bc:	681b      	ldr	r3, [r3, #0]
 80047be:	3308      	adds	r3, #8
 80047c0:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 80047c4:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 80047c8:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80047ca:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 80047cc:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 80047d0:	e841 2300 	strex	r3, r2, [r1]
 80047d4:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 80047d6:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80047d8:	2b00      	cmp	r3, #0
 80047da:	d1e1      	bne.n	80047a0 <HAL_UART_IRQHandler+0x364>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80047dc:	687b      	ldr	r3, [r7, #4]
 80047de:	681b      	ldr	r3, [r3, #0]
 80047e0:	3308      	adds	r3, #8
 80047e2:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80047e4:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80047e6:	e853 3f00 	ldrex	r3, [r3]
 80047ea:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 80047ec:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80047ee:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80047f2:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 80047f6:	687b      	ldr	r3, [r7, #4]
 80047f8:	681b      	ldr	r3, [r3, #0]
 80047fa:	3308      	adds	r3, #8
 80047fc:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 8004800:	66fa      	str	r2, [r7, #108]	; 0x6c
 8004802:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004804:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 8004806:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 8004808:	e841 2300 	strex	r3, r2, [r1]
 800480c:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 800480e:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8004810:	2b00      	cmp	r3, #0
 8004812:	d1e3      	bne.n	80047dc <HAL_UART_IRQHandler+0x3a0>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8004814:	687b      	ldr	r3, [r7, #4]
 8004816:	2220      	movs	r2, #32
 8004818:	67da      	str	r2, [r3, #124]	; 0x7c
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800481a:	687b      	ldr	r3, [r7, #4]
 800481c:	2200      	movs	r2, #0
 800481e:	661a      	str	r2, [r3, #96]	; 0x60

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004820:	687b      	ldr	r3, [r7, #4]
 8004822:	681b      	ldr	r3, [r3, #0]
 8004824:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004826:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004828:	e853 3f00 	ldrex	r3, [r3]
 800482c:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 800482e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8004830:	f023 0310 	bic.w	r3, r3, #16
 8004834:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 8004838:	687b      	ldr	r3, [r7, #4]
 800483a:	681b      	ldr	r3, [r3, #0]
 800483c:	461a      	mov	r2, r3
 800483e:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8004842:	65bb      	str	r3, [r7, #88]	; 0x58
 8004844:	657a      	str	r2, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004846:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8004848:	6dba      	ldr	r2, [r7, #88]	; 0x58
 800484a:	e841 2300 	strex	r3, r2, [r1]
 800484e:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 8004850:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8004852:	2b00      	cmp	r3, #0
 8004854:	d1e4      	bne.n	8004820 <HAL_UART_IRQHandler+0x3e4>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8004856:	687b      	ldr	r3, [r7, #4]
 8004858:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800485a:	4618      	mov	r0, r3
 800485c:	f7fc fd89 	bl	8001372 <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8004860:	687b      	ldr	r3, [r7, #4]
 8004862:	f8b3 2058 	ldrh.w	r2, [r3, #88]	; 0x58
 8004866:	687b      	ldr	r3, [r7, #4]
 8004868:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 800486c:	b29b      	uxth	r3, r3
 800486e:	1ad3      	subs	r3, r2, r3
 8004870:	b29b      	uxth	r3, r3
 8004872:	4619      	mov	r1, r3
 8004874:	6878      	ldr	r0, [r7, #4]
 8004876:	f000 f8c9 	bl	8004a0c <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 800487a:	e0b5      	b.n	80049e8 <HAL_UART_IRQHandler+0x5ac>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 800487c:	687b      	ldr	r3, [r7, #4]
 800487e:	f8b3 2058 	ldrh.w	r2, [r3, #88]	; 0x58
 8004882:	687b      	ldr	r3, [r7, #4]
 8004884:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8004888:	b29b      	uxth	r3, r3
 800488a:	1ad3      	subs	r3, r2, r3
 800488c:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 8004890:	687b      	ldr	r3, [r7, #4]
 8004892:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8004896:	b29b      	uxth	r3, r3
 8004898:	2b00      	cmp	r3, #0
 800489a:	f000 80a7 	beq.w	80049ec <HAL_UART_IRQHandler+0x5b0>
          && (nb_rx_data > 0U))
 800489e:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 80048a2:	2b00      	cmp	r3, #0
 80048a4:	f000 80a2 	beq.w	80049ec <HAL_UART_IRQHandler+0x5b0>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80048a8:	687b      	ldr	r3, [r7, #4]
 80048aa:	681b      	ldr	r3, [r3, #0]
 80048ac:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80048ae:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80048b0:	e853 3f00 	ldrex	r3, [r3]
 80048b4:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 80048b6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80048b8:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 80048bc:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 80048c0:	687b      	ldr	r3, [r7, #4]
 80048c2:	681b      	ldr	r3, [r3, #0]
 80048c4:	461a      	mov	r2, r3
 80048c6:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 80048ca:	647b      	str	r3, [r7, #68]	; 0x44
 80048cc:	643a      	str	r2, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80048ce:	6c39      	ldr	r1, [r7, #64]	; 0x40
 80048d0:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 80048d2:	e841 2300 	strex	r3, r2, [r1]
 80048d6:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 80048d8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80048da:	2b00      	cmp	r3, #0
 80048dc:	d1e4      	bne.n	80048a8 <HAL_UART_IRQHandler+0x46c>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80048de:	687b      	ldr	r3, [r7, #4]
 80048e0:	681b      	ldr	r3, [r3, #0]
 80048e2:	3308      	adds	r3, #8
 80048e4:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80048e6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80048e8:	e853 3f00 	ldrex	r3, [r3]
 80048ec:	623b      	str	r3, [r7, #32]
   return(result);
 80048ee:	6a3b      	ldr	r3, [r7, #32]
 80048f0:	f023 0301 	bic.w	r3, r3, #1
 80048f4:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 80048f8:	687b      	ldr	r3, [r7, #4]
 80048fa:	681b      	ldr	r3, [r3, #0]
 80048fc:	3308      	adds	r3, #8
 80048fe:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 8004902:	633a      	str	r2, [r7, #48]	; 0x30
 8004904:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004906:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8004908:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800490a:	e841 2300 	strex	r3, r2, [r1]
 800490e:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8004910:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004912:	2b00      	cmp	r3, #0
 8004914:	d1e3      	bne.n	80048de <HAL_UART_IRQHandler+0x4a2>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8004916:	687b      	ldr	r3, [r7, #4]
 8004918:	2220      	movs	r2, #32
 800491a:	67da      	str	r2, [r3, #124]	; 0x7c
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800491c:	687b      	ldr	r3, [r7, #4]
 800491e:	2200      	movs	r2, #0
 8004920:	661a      	str	r2, [r3, #96]	; 0x60

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 8004922:	687b      	ldr	r3, [r7, #4]
 8004924:	2200      	movs	r2, #0
 8004926:	665a      	str	r2, [r3, #100]	; 0x64

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004928:	687b      	ldr	r3, [r7, #4]
 800492a:	681b      	ldr	r3, [r3, #0]
 800492c:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800492e:	693b      	ldr	r3, [r7, #16]
 8004930:	e853 3f00 	ldrex	r3, [r3]
 8004934:	60fb      	str	r3, [r7, #12]
   return(result);
 8004936:	68fb      	ldr	r3, [r7, #12]
 8004938:	f023 0310 	bic.w	r3, r3, #16
 800493c:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8004940:	687b      	ldr	r3, [r7, #4]
 8004942:	681b      	ldr	r3, [r3, #0]
 8004944:	461a      	mov	r2, r3
 8004946:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 800494a:	61fb      	str	r3, [r7, #28]
 800494c:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800494e:	69b9      	ldr	r1, [r7, #24]
 8004950:	69fa      	ldr	r2, [r7, #28]
 8004952:	e841 2300 	strex	r3, r2, [r1]
 8004956:	617b      	str	r3, [r7, #20]
   return(result);
 8004958:	697b      	ldr	r3, [r7, #20]
 800495a:	2b00      	cmp	r3, #0
 800495c:	d1e4      	bne.n	8004928 <HAL_UART_IRQHandler+0x4ec>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 800495e:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8004962:	4619      	mov	r1, r3
 8004964:	6878      	ldr	r0, [r7, #4]
 8004966:	f000 f851 	bl	8004a0c <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 800496a:	e03f      	b.n	80049ec <HAL_UART_IRQHandler+0x5b0>
    }
  }

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 800496c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004970:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8004974:	2b00      	cmp	r3, #0
 8004976:	d00e      	beq.n	8004996 <HAL_UART_IRQHandler+0x55a>
 8004978:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800497c:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8004980:	2b00      	cmp	r3, #0
 8004982:	d008      	beq.n	8004996 <HAL_UART_IRQHandler+0x55a>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 8004984:	687b      	ldr	r3, [r7, #4]
 8004986:	681b      	ldr	r3, [r3, #0]
 8004988:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 800498c:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 800498e:	6878      	ldr	r0, [r7, #4]
 8004990:	f000 fcd0 	bl	8005334 <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8004994:	e02d      	b.n	80049f2 <HAL_UART_IRQHandler+0x5b6>
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_ISR_TXE) != 0U)
 8004996:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800499a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800499e:	2b00      	cmp	r3, #0
 80049a0:	d00e      	beq.n	80049c0 <HAL_UART_IRQHandler+0x584>
      && ((cr1its & USART_CR1_TXEIE) != 0U))
 80049a2:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80049a6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80049aa:	2b00      	cmp	r3, #0
 80049ac:	d008      	beq.n	80049c0 <HAL_UART_IRQHandler+0x584>
  {
    if (huart->TxISR != NULL)
 80049ae:	687b      	ldr	r3, [r7, #4]
 80049b0:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80049b2:	2b00      	cmp	r3, #0
 80049b4:	d01c      	beq.n	80049f0 <HAL_UART_IRQHandler+0x5b4>
    {
      huart->TxISR(huart);
 80049b6:	687b      	ldr	r3, [r7, #4]
 80049b8:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80049ba:	6878      	ldr	r0, [r7, #4]
 80049bc:	4798      	blx	r3
    }
    return;
 80049be:	e017      	b.n	80049f0 <HAL_UART_IRQHandler+0x5b4>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 80049c0:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80049c4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80049c8:	2b00      	cmp	r3, #0
 80049ca:	d012      	beq.n	80049f2 <HAL_UART_IRQHandler+0x5b6>
 80049cc:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80049d0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80049d4:	2b00      	cmp	r3, #0
 80049d6:	d00c      	beq.n	80049f2 <HAL_UART_IRQHandler+0x5b6>
  {
    UART_EndTransmit_IT(huart);
 80049d8:	6878      	ldr	r0, [r7, #4]
 80049da:	f000 fc81 	bl	80052e0 <UART_EndTransmit_IT>
    return;
 80049de:	e008      	b.n	80049f2 <HAL_UART_IRQHandler+0x5b6>
      return;
 80049e0:	bf00      	nop
 80049e2:	e006      	b.n	80049f2 <HAL_UART_IRQHandler+0x5b6>
    return;
 80049e4:	bf00      	nop
 80049e6:	e004      	b.n	80049f2 <HAL_UART_IRQHandler+0x5b6>
      return;
 80049e8:	bf00      	nop
 80049ea:	e002      	b.n	80049f2 <HAL_UART_IRQHandler+0x5b6>
      return;
 80049ec:	bf00      	nop
 80049ee:	e000      	b.n	80049f2 <HAL_UART_IRQHandler+0x5b6>
    return;
 80049f0:	bf00      	nop
  }

}
 80049f2:	37e8      	adds	r7, #232	; 0xe8
 80049f4:	46bd      	mov	sp, r7
 80049f6:	bd80      	pop	{r7, pc}

080049f8 <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 80049f8:	b480      	push	{r7}
 80049fa:	b083      	sub	sp, #12
 80049fc:	af00      	add	r7, sp, #0
 80049fe:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 8004a00:	bf00      	nop
 8004a02:	370c      	adds	r7, #12
 8004a04:	46bd      	mov	sp, r7
 8004a06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a0a:	4770      	bx	lr

08004a0c <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8004a0c:	b480      	push	{r7}
 8004a0e:	b083      	sub	sp, #12
 8004a10:	af00      	add	r7, sp, #0
 8004a12:	6078      	str	r0, [r7, #4]
 8004a14:	460b      	mov	r3, r1
 8004a16:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8004a18:	bf00      	nop
 8004a1a:	370c      	adds	r7, #12
 8004a1c:	46bd      	mov	sp, r7
 8004a1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a22:	4770      	bx	lr

08004a24 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8004a24:	b580      	push	{r7, lr}
 8004a26:	b088      	sub	sp, #32
 8004a28:	af00      	add	r7, sp, #0
 8004a2a:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8004a2c:	2300      	movs	r3, #0
 8004a2e:	77bb      	strb	r3, [r7, #30]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8004a30:	687b      	ldr	r3, [r7, #4]
 8004a32:	689a      	ldr	r2, [r3, #8]
 8004a34:	687b      	ldr	r3, [r7, #4]
 8004a36:	691b      	ldr	r3, [r3, #16]
 8004a38:	431a      	orrs	r2, r3
 8004a3a:	687b      	ldr	r3, [r7, #4]
 8004a3c:	695b      	ldr	r3, [r3, #20]
 8004a3e:	431a      	orrs	r2, r3
 8004a40:	687b      	ldr	r3, [r7, #4]
 8004a42:	69db      	ldr	r3, [r3, #28]
 8004a44:	4313      	orrs	r3, r2
 8004a46:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8004a48:	687b      	ldr	r3, [r7, #4]
 8004a4a:	681b      	ldr	r3, [r3, #0]
 8004a4c:	681b      	ldr	r3, [r3, #0]
 8004a4e:	f423 4316 	bic.w	r3, r3, #38400	; 0x9600
 8004a52:	f023 030c 	bic.w	r3, r3, #12
 8004a56:	687a      	ldr	r2, [r7, #4]
 8004a58:	6812      	ldr	r2, [r2, #0]
 8004a5a:	6979      	ldr	r1, [r7, #20]
 8004a5c:	430b      	orrs	r3, r1
 8004a5e:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8004a60:	687b      	ldr	r3, [r7, #4]
 8004a62:	681b      	ldr	r3, [r3, #0]
 8004a64:	685b      	ldr	r3, [r3, #4]
 8004a66:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8004a6a:	687b      	ldr	r3, [r7, #4]
 8004a6c:	68da      	ldr	r2, [r3, #12]
 8004a6e:	687b      	ldr	r3, [r7, #4]
 8004a70:	681b      	ldr	r3, [r3, #0]
 8004a72:	430a      	orrs	r2, r1
 8004a74:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8004a76:	687b      	ldr	r3, [r7, #4]
 8004a78:	699b      	ldr	r3, [r3, #24]
 8004a7a:	617b      	str	r3, [r7, #20]

  tmpreg |= huart->Init.OneBitSampling;
 8004a7c:	687b      	ldr	r3, [r7, #4]
 8004a7e:	6a1b      	ldr	r3, [r3, #32]
 8004a80:	697a      	ldr	r2, [r7, #20]
 8004a82:	4313      	orrs	r3, r2
 8004a84:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8004a86:	687b      	ldr	r3, [r7, #4]
 8004a88:	681b      	ldr	r3, [r3, #0]
 8004a8a:	689b      	ldr	r3, [r3, #8]
 8004a8c:	f423 6130 	bic.w	r1, r3, #2816	; 0xb00
 8004a90:	687b      	ldr	r3, [r7, #4]
 8004a92:	681b      	ldr	r3, [r3, #0]
 8004a94:	697a      	ldr	r2, [r7, #20]
 8004a96:	430a      	orrs	r2, r1
 8004a98:	609a      	str	r2, [r3, #8]


  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8004a9a:	687b      	ldr	r3, [r7, #4]
 8004a9c:	681b      	ldr	r3, [r3, #0]
 8004a9e:	4a99      	ldr	r2, [pc, #612]	; (8004d04 <UART_SetConfig+0x2e0>)
 8004aa0:	4293      	cmp	r3, r2
 8004aa2:	d120      	bne.n	8004ae6 <UART_SetConfig+0xc2>
 8004aa4:	4b98      	ldr	r3, [pc, #608]	; (8004d08 <UART_SetConfig+0x2e4>)
 8004aa6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004aa8:	f003 0303 	and.w	r3, r3, #3
 8004aac:	2b03      	cmp	r3, #3
 8004aae:	d817      	bhi.n	8004ae0 <UART_SetConfig+0xbc>
 8004ab0:	a201      	add	r2, pc, #4	; (adr r2, 8004ab8 <UART_SetConfig+0x94>)
 8004ab2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004ab6:	bf00      	nop
 8004ab8:	08004ac9 	.word	0x08004ac9
 8004abc:	08004ad5 	.word	0x08004ad5
 8004ac0:	08004adb 	.word	0x08004adb
 8004ac4:	08004acf 	.word	0x08004acf
 8004ac8:	2301      	movs	r3, #1
 8004aca:	77fb      	strb	r3, [r7, #31]
 8004acc:	e061      	b.n	8004b92 <UART_SetConfig+0x16e>
 8004ace:	2302      	movs	r3, #2
 8004ad0:	77fb      	strb	r3, [r7, #31]
 8004ad2:	e05e      	b.n	8004b92 <UART_SetConfig+0x16e>
 8004ad4:	2304      	movs	r3, #4
 8004ad6:	77fb      	strb	r3, [r7, #31]
 8004ad8:	e05b      	b.n	8004b92 <UART_SetConfig+0x16e>
 8004ada:	2308      	movs	r3, #8
 8004adc:	77fb      	strb	r3, [r7, #31]
 8004ade:	e058      	b.n	8004b92 <UART_SetConfig+0x16e>
 8004ae0:	2310      	movs	r3, #16
 8004ae2:	77fb      	strb	r3, [r7, #31]
 8004ae4:	e055      	b.n	8004b92 <UART_SetConfig+0x16e>
 8004ae6:	687b      	ldr	r3, [r7, #4]
 8004ae8:	681b      	ldr	r3, [r3, #0]
 8004aea:	4a88      	ldr	r2, [pc, #544]	; (8004d0c <UART_SetConfig+0x2e8>)
 8004aec:	4293      	cmp	r3, r2
 8004aee:	d124      	bne.n	8004b3a <UART_SetConfig+0x116>
 8004af0:	4b85      	ldr	r3, [pc, #532]	; (8004d08 <UART_SetConfig+0x2e4>)
 8004af2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004af4:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8004af8:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 8004afc:	d011      	beq.n	8004b22 <UART_SetConfig+0xfe>
 8004afe:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 8004b02:	d817      	bhi.n	8004b34 <UART_SetConfig+0x110>
 8004b04:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8004b08:	d011      	beq.n	8004b2e <UART_SetConfig+0x10a>
 8004b0a:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8004b0e:	d811      	bhi.n	8004b34 <UART_SetConfig+0x110>
 8004b10:	2b00      	cmp	r3, #0
 8004b12:	d003      	beq.n	8004b1c <UART_SetConfig+0xf8>
 8004b14:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004b18:	d006      	beq.n	8004b28 <UART_SetConfig+0x104>
 8004b1a:	e00b      	b.n	8004b34 <UART_SetConfig+0x110>
 8004b1c:	2300      	movs	r3, #0
 8004b1e:	77fb      	strb	r3, [r7, #31]
 8004b20:	e037      	b.n	8004b92 <UART_SetConfig+0x16e>
 8004b22:	2302      	movs	r3, #2
 8004b24:	77fb      	strb	r3, [r7, #31]
 8004b26:	e034      	b.n	8004b92 <UART_SetConfig+0x16e>
 8004b28:	2304      	movs	r3, #4
 8004b2a:	77fb      	strb	r3, [r7, #31]
 8004b2c:	e031      	b.n	8004b92 <UART_SetConfig+0x16e>
 8004b2e:	2308      	movs	r3, #8
 8004b30:	77fb      	strb	r3, [r7, #31]
 8004b32:	e02e      	b.n	8004b92 <UART_SetConfig+0x16e>
 8004b34:	2310      	movs	r3, #16
 8004b36:	77fb      	strb	r3, [r7, #31]
 8004b38:	e02b      	b.n	8004b92 <UART_SetConfig+0x16e>
 8004b3a:	687b      	ldr	r3, [r7, #4]
 8004b3c:	681b      	ldr	r3, [r3, #0]
 8004b3e:	4a74      	ldr	r2, [pc, #464]	; (8004d10 <UART_SetConfig+0x2ec>)
 8004b40:	4293      	cmp	r3, r2
 8004b42:	d124      	bne.n	8004b8e <UART_SetConfig+0x16a>
 8004b44:	4b70      	ldr	r3, [pc, #448]	; (8004d08 <UART_SetConfig+0x2e4>)
 8004b46:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004b48:	f403 2340 	and.w	r3, r3, #786432	; 0xc0000
 8004b4c:	f5b3 2f40 	cmp.w	r3, #786432	; 0xc0000
 8004b50:	d011      	beq.n	8004b76 <UART_SetConfig+0x152>
 8004b52:	f5b3 2f40 	cmp.w	r3, #786432	; 0xc0000
 8004b56:	d817      	bhi.n	8004b88 <UART_SetConfig+0x164>
 8004b58:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 8004b5c:	d011      	beq.n	8004b82 <UART_SetConfig+0x15e>
 8004b5e:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 8004b62:	d811      	bhi.n	8004b88 <UART_SetConfig+0x164>
 8004b64:	2b00      	cmp	r3, #0
 8004b66:	d003      	beq.n	8004b70 <UART_SetConfig+0x14c>
 8004b68:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8004b6c:	d006      	beq.n	8004b7c <UART_SetConfig+0x158>
 8004b6e:	e00b      	b.n	8004b88 <UART_SetConfig+0x164>
 8004b70:	2300      	movs	r3, #0
 8004b72:	77fb      	strb	r3, [r7, #31]
 8004b74:	e00d      	b.n	8004b92 <UART_SetConfig+0x16e>
 8004b76:	2302      	movs	r3, #2
 8004b78:	77fb      	strb	r3, [r7, #31]
 8004b7a:	e00a      	b.n	8004b92 <UART_SetConfig+0x16e>
 8004b7c:	2304      	movs	r3, #4
 8004b7e:	77fb      	strb	r3, [r7, #31]
 8004b80:	e007      	b.n	8004b92 <UART_SetConfig+0x16e>
 8004b82:	2308      	movs	r3, #8
 8004b84:	77fb      	strb	r3, [r7, #31]
 8004b86:	e004      	b.n	8004b92 <UART_SetConfig+0x16e>
 8004b88:	2310      	movs	r3, #16
 8004b8a:	77fb      	strb	r3, [r7, #31]
 8004b8c:	e001      	b.n	8004b92 <UART_SetConfig+0x16e>
 8004b8e:	2310      	movs	r3, #16
 8004b90:	77fb      	strb	r3, [r7, #31]

  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8004b92:	687b      	ldr	r3, [r7, #4]
 8004b94:	69db      	ldr	r3, [r3, #28]
 8004b96:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8004b9a:	d15b      	bne.n	8004c54 <UART_SetConfig+0x230>
  {
    switch (clocksource)
 8004b9c:	7ffb      	ldrb	r3, [r7, #31]
 8004b9e:	2b08      	cmp	r3, #8
 8004ba0:	d827      	bhi.n	8004bf2 <UART_SetConfig+0x1ce>
 8004ba2:	a201      	add	r2, pc, #4	; (adr r2, 8004ba8 <UART_SetConfig+0x184>)
 8004ba4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004ba8:	08004bcd 	.word	0x08004bcd
 8004bac:	08004bd5 	.word	0x08004bd5
 8004bb0:	08004bdd 	.word	0x08004bdd
 8004bb4:	08004bf3 	.word	0x08004bf3
 8004bb8:	08004be3 	.word	0x08004be3
 8004bbc:	08004bf3 	.word	0x08004bf3
 8004bc0:	08004bf3 	.word	0x08004bf3
 8004bc4:	08004bf3 	.word	0x08004bf3
 8004bc8:	08004beb 	.word	0x08004beb
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8004bcc:	f7fe f826 	bl	8002c1c <HAL_RCC_GetPCLK1Freq>
 8004bd0:	61b8      	str	r0, [r7, #24]
        break;
 8004bd2:	e013      	b.n	8004bfc <UART_SetConfig+0x1d8>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8004bd4:	f7fe f844 	bl	8002c60 <HAL_RCC_GetPCLK2Freq>
 8004bd8:	61b8      	str	r0, [r7, #24]
        break;
 8004bda:	e00f      	b.n	8004bfc <UART_SetConfig+0x1d8>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8004bdc:	4b4d      	ldr	r3, [pc, #308]	; (8004d14 <UART_SetConfig+0x2f0>)
 8004bde:	61bb      	str	r3, [r7, #24]
        break;
 8004be0:	e00c      	b.n	8004bfc <UART_SetConfig+0x1d8>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8004be2:	f7fd ffa3 	bl	8002b2c <HAL_RCC_GetSysClockFreq>
 8004be6:	61b8      	str	r0, [r7, #24]
        break;
 8004be8:	e008      	b.n	8004bfc <UART_SetConfig+0x1d8>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8004bea:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8004bee:	61bb      	str	r3, [r7, #24]
        break;
 8004bf0:	e004      	b.n	8004bfc <UART_SetConfig+0x1d8>
      default:
        pclk = 0U;
 8004bf2:	2300      	movs	r3, #0
 8004bf4:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 8004bf6:	2301      	movs	r3, #1
 8004bf8:	77bb      	strb	r3, [r7, #30]
        break;
 8004bfa:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8004bfc:	69bb      	ldr	r3, [r7, #24]
 8004bfe:	2b00      	cmp	r3, #0
 8004c00:	d074      	beq.n	8004cec <UART_SetConfig+0x2c8>
    {
      usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8004c02:	69bb      	ldr	r3, [r7, #24]
 8004c04:	005a      	lsls	r2, r3, #1
 8004c06:	687b      	ldr	r3, [r7, #4]
 8004c08:	685b      	ldr	r3, [r3, #4]
 8004c0a:	085b      	lsrs	r3, r3, #1
 8004c0c:	441a      	add	r2, r3
 8004c0e:	687b      	ldr	r3, [r7, #4]
 8004c10:	685b      	ldr	r3, [r3, #4]
 8004c12:	fbb2 f3f3 	udiv	r3, r2, r3
 8004c16:	b29b      	uxth	r3, r3
 8004c18:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8004c1a:	693b      	ldr	r3, [r7, #16]
 8004c1c:	2b0f      	cmp	r3, #15
 8004c1e:	d916      	bls.n	8004c4e <UART_SetConfig+0x22a>
 8004c20:	693b      	ldr	r3, [r7, #16]
 8004c22:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004c26:	d212      	bcs.n	8004c4e <UART_SetConfig+0x22a>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8004c28:	693b      	ldr	r3, [r7, #16]
 8004c2a:	b29b      	uxth	r3, r3
 8004c2c:	f023 030f 	bic.w	r3, r3, #15
 8004c30:	81fb      	strh	r3, [r7, #14]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8004c32:	693b      	ldr	r3, [r7, #16]
 8004c34:	085b      	lsrs	r3, r3, #1
 8004c36:	b29b      	uxth	r3, r3
 8004c38:	f003 0307 	and.w	r3, r3, #7
 8004c3c:	b29a      	uxth	r2, r3
 8004c3e:	89fb      	ldrh	r3, [r7, #14]
 8004c40:	4313      	orrs	r3, r2
 8004c42:	81fb      	strh	r3, [r7, #14]
        huart->Instance->BRR = brrtemp;
 8004c44:	687b      	ldr	r3, [r7, #4]
 8004c46:	681b      	ldr	r3, [r3, #0]
 8004c48:	89fa      	ldrh	r2, [r7, #14]
 8004c4a:	60da      	str	r2, [r3, #12]
 8004c4c:	e04e      	b.n	8004cec <UART_SetConfig+0x2c8>
      }
      else
      {
        ret = HAL_ERROR;
 8004c4e:	2301      	movs	r3, #1
 8004c50:	77bb      	strb	r3, [r7, #30]
 8004c52:	e04b      	b.n	8004cec <UART_SetConfig+0x2c8>
      }
    }
  }
  else
  {
    switch (clocksource)
 8004c54:	7ffb      	ldrb	r3, [r7, #31]
 8004c56:	2b08      	cmp	r3, #8
 8004c58:	d827      	bhi.n	8004caa <UART_SetConfig+0x286>
 8004c5a:	a201      	add	r2, pc, #4	; (adr r2, 8004c60 <UART_SetConfig+0x23c>)
 8004c5c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004c60:	08004c85 	.word	0x08004c85
 8004c64:	08004c8d 	.word	0x08004c8d
 8004c68:	08004c95 	.word	0x08004c95
 8004c6c:	08004cab 	.word	0x08004cab
 8004c70:	08004c9b 	.word	0x08004c9b
 8004c74:	08004cab 	.word	0x08004cab
 8004c78:	08004cab 	.word	0x08004cab
 8004c7c:	08004cab 	.word	0x08004cab
 8004c80:	08004ca3 	.word	0x08004ca3
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8004c84:	f7fd ffca 	bl	8002c1c <HAL_RCC_GetPCLK1Freq>
 8004c88:	61b8      	str	r0, [r7, #24]
        break;
 8004c8a:	e013      	b.n	8004cb4 <UART_SetConfig+0x290>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8004c8c:	f7fd ffe8 	bl	8002c60 <HAL_RCC_GetPCLK2Freq>
 8004c90:	61b8      	str	r0, [r7, #24]
        break;
 8004c92:	e00f      	b.n	8004cb4 <UART_SetConfig+0x290>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8004c94:	4b1f      	ldr	r3, [pc, #124]	; (8004d14 <UART_SetConfig+0x2f0>)
 8004c96:	61bb      	str	r3, [r7, #24]
        break;
 8004c98:	e00c      	b.n	8004cb4 <UART_SetConfig+0x290>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8004c9a:	f7fd ff47 	bl	8002b2c <HAL_RCC_GetSysClockFreq>
 8004c9e:	61b8      	str	r0, [r7, #24]
        break;
 8004ca0:	e008      	b.n	8004cb4 <UART_SetConfig+0x290>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8004ca2:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8004ca6:	61bb      	str	r3, [r7, #24]
        break;
 8004ca8:	e004      	b.n	8004cb4 <UART_SetConfig+0x290>
      default:
        pclk = 0U;
 8004caa:	2300      	movs	r3, #0
 8004cac:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 8004cae:	2301      	movs	r3, #1
 8004cb0:	77bb      	strb	r3, [r7, #30]
        break;
 8004cb2:	bf00      	nop
    }

    if (pclk != 0U)
 8004cb4:	69bb      	ldr	r3, [r7, #24]
 8004cb6:	2b00      	cmp	r3, #0
 8004cb8:	d018      	beq.n	8004cec <UART_SetConfig+0x2c8>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8004cba:	687b      	ldr	r3, [r7, #4]
 8004cbc:	685b      	ldr	r3, [r3, #4]
 8004cbe:	085a      	lsrs	r2, r3, #1
 8004cc0:	69bb      	ldr	r3, [r7, #24]
 8004cc2:	441a      	add	r2, r3
 8004cc4:	687b      	ldr	r3, [r7, #4]
 8004cc6:	685b      	ldr	r3, [r3, #4]
 8004cc8:	fbb2 f3f3 	udiv	r3, r2, r3
 8004ccc:	b29b      	uxth	r3, r3
 8004cce:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8004cd0:	693b      	ldr	r3, [r7, #16]
 8004cd2:	2b0f      	cmp	r3, #15
 8004cd4:	d908      	bls.n	8004ce8 <UART_SetConfig+0x2c4>
 8004cd6:	693b      	ldr	r3, [r7, #16]
 8004cd8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004cdc:	d204      	bcs.n	8004ce8 <UART_SetConfig+0x2c4>
      {
        huart->Instance->BRR = usartdiv;
 8004cde:	687b      	ldr	r3, [r7, #4]
 8004ce0:	681b      	ldr	r3, [r3, #0]
 8004ce2:	693a      	ldr	r2, [r7, #16]
 8004ce4:	60da      	str	r2, [r3, #12]
 8004ce6:	e001      	b.n	8004cec <UART_SetConfig+0x2c8>
      }
      else
      {
        ret = HAL_ERROR;
 8004ce8:	2301      	movs	r3, #1
 8004cea:	77bb      	strb	r3, [r7, #30]
    }
  }


  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8004cec:	687b      	ldr	r3, [r7, #4]
 8004cee:	2200      	movs	r2, #0
 8004cf0:	665a      	str	r2, [r3, #100]	; 0x64
  huart->TxISR = NULL;
 8004cf2:	687b      	ldr	r3, [r7, #4]
 8004cf4:	2200      	movs	r2, #0
 8004cf6:	669a      	str	r2, [r3, #104]	; 0x68

  return ret;
 8004cf8:	7fbb      	ldrb	r3, [r7, #30]
}
 8004cfa:	4618      	mov	r0, r3
 8004cfc:	3720      	adds	r7, #32
 8004cfe:	46bd      	mov	sp, r7
 8004d00:	bd80      	pop	{r7, pc}
 8004d02:	bf00      	nop
 8004d04:	40013800 	.word	0x40013800
 8004d08:	40021000 	.word	0x40021000
 8004d0c:	40004400 	.word	0x40004400
 8004d10:	40004800 	.word	0x40004800
 8004d14:	007a1200 	.word	0x007a1200

08004d18 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8004d18:	b480      	push	{r7}
 8004d1a:	b083      	sub	sp, #12
 8004d1c:	af00      	add	r7, sp, #0
 8004d1e:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8004d20:	687b      	ldr	r3, [r7, #4]
 8004d22:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004d24:	f003 0301 	and.w	r3, r3, #1
 8004d28:	2b00      	cmp	r3, #0
 8004d2a:	d00a      	beq.n	8004d42 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8004d2c:	687b      	ldr	r3, [r7, #4]
 8004d2e:	681b      	ldr	r3, [r3, #0]
 8004d30:	685b      	ldr	r3, [r3, #4]
 8004d32:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 8004d36:	687b      	ldr	r3, [r7, #4]
 8004d38:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8004d3a:	687b      	ldr	r3, [r7, #4]
 8004d3c:	681b      	ldr	r3, [r3, #0]
 8004d3e:	430a      	orrs	r2, r1
 8004d40:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8004d42:	687b      	ldr	r3, [r7, #4]
 8004d44:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004d46:	f003 0302 	and.w	r3, r3, #2
 8004d4a:	2b00      	cmp	r3, #0
 8004d4c:	d00a      	beq.n	8004d64 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8004d4e:	687b      	ldr	r3, [r7, #4]
 8004d50:	681b      	ldr	r3, [r3, #0]
 8004d52:	685b      	ldr	r3, [r3, #4]
 8004d54:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 8004d58:	687b      	ldr	r3, [r7, #4]
 8004d5a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004d5c:	687b      	ldr	r3, [r7, #4]
 8004d5e:	681b      	ldr	r3, [r3, #0]
 8004d60:	430a      	orrs	r2, r1
 8004d62:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8004d64:	687b      	ldr	r3, [r7, #4]
 8004d66:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004d68:	f003 0304 	and.w	r3, r3, #4
 8004d6c:	2b00      	cmp	r3, #0
 8004d6e:	d00a      	beq.n	8004d86 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8004d70:	687b      	ldr	r3, [r7, #4]
 8004d72:	681b      	ldr	r3, [r3, #0]
 8004d74:	685b      	ldr	r3, [r3, #4]
 8004d76:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 8004d7a:	687b      	ldr	r3, [r7, #4]
 8004d7c:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8004d7e:	687b      	ldr	r3, [r7, #4]
 8004d80:	681b      	ldr	r3, [r3, #0]
 8004d82:	430a      	orrs	r2, r1
 8004d84:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8004d86:	687b      	ldr	r3, [r7, #4]
 8004d88:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004d8a:	f003 0308 	and.w	r3, r3, #8
 8004d8e:	2b00      	cmp	r3, #0
 8004d90:	d00a      	beq.n	8004da8 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8004d92:	687b      	ldr	r3, [r7, #4]
 8004d94:	681b      	ldr	r3, [r3, #0]
 8004d96:	685b      	ldr	r3, [r3, #4]
 8004d98:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 8004d9c:	687b      	ldr	r3, [r7, #4]
 8004d9e:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8004da0:	687b      	ldr	r3, [r7, #4]
 8004da2:	681b      	ldr	r3, [r3, #0]
 8004da4:	430a      	orrs	r2, r1
 8004da6:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8004da8:	687b      	ldr	r3, [r7, #4]
 8004daa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004dac:	f003 0310 	and.w	r3, r3, #16
 8004db0:	2b00      	cmp	r3, #0
 8004db2:	d00a      	beq.n	8004dca <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8004db4:	687b      	ldr	r3, [r7, #4]
 8004db6:	681b      	ldr	r3, [r3, #0]
 8004db8:	689b      	ldr	r3, [r3, #8]
 8004dba:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 8004dbe:	687b      	ldr	r3, [r7, #4]
 8004dc0:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8004dc2:	687b      	ldr	r3, [r7, #4]
 8004dc4:	681b      	ldr	r3, [r3, #0]
 8004dc6:	430a      	orrs	r2, r1
 8004dc8:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8004dca:	687b      	ldr	r3, [r7, #4]
 8004dcc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004dce:	f003 0320 	and.w	r3, r3, #32
 8004dd2:	2b00      	cmp	r3, #0
 8004dd4:	d00a      	beq.n	8004dec <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8004dd6:	687b      	ldr	r3, [r7, #4]
 8004dd8:	681b      	ldr	r3, [r3, #0]
 8004dda:	689b      	ldr	r3, [r3, #8]
 8004ddc:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 8004de0:	687b      	ldr	r3, [r7, #4]
 8004de2:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8004de4:	687b      	ldr	r3, [r7, #4]
 8004de6:	681b      	ldr	r3, [r3, #0]
 8004de8:	430a      	orrs	r2, r1
 8004dea:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8004dec:	687b      	ldr	r3, [r7, #4]
 8004dee:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004df0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004df4:	2b00      	cmp	r3, #0
 8004df6:	d01a      	beq.n	8004e2e <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8004df8:	687b      	ldr	r3, [r7, #4]
 8004dfa:	681b      	ldr	r3, [r3, #0]
 8004dfc:	685b      	ldr	r3, [r3, #4]
 8004dfe:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 8004e02:	687b      	ldr	r3, [r7, #4]
 8004e04:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8004e06:	687b      	ldr	r3, [r7, #4]
 8004e08:	681b      	ldr	r3, [r3, #0]
 8004e0a:	430a      	orrs	r2, r1
 8004e0c:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8004e0e:	687b      	ldr	r3, [r7, #4]
 8004e10:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004e12:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8004e16:	d10a      	bne.n	8004e2e <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8004e18:	687b      	ldr	r3, [r7, #4]
 8004e1a:	681b      	ldr	r3, [r3, #0]
 8004e1c:	685b      	ldr	r3, [r3, #4]
 8004e1e:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 8004e22:	687b      	ldr	r3, [r7, #4]
 8004e24:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8004e26:	687b      	ldr	r3, [r7, #4]
 8004e28:	681b      	ldr	r3, [r3, #0]
 8004e2a:	430a      	orrs	r2, r1
 8004e2c:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8004e2e:	687b      	ldr	r3, [r7, #4]
 8004e30:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004e32:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004e36:	2b00      	cmp	r3, #0
 8004e38:	d00a      	beq.n	8004e50 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8004e3a:	687b      	ldr	r3, [r7, #4]
 8004e3c:	681b      	ldr	r3, [r3, #0]
 8004e3e:	685b      	ldr	r3, [r3, #4]
 8004e40:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 8004e44:	687b      	ldr	r3, [r7, #4]
 8004e46:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8004e48:	687b      	ldr	r3, [r7, #4]
 8004e4a:	681b      	ldr	r3, [r3, #0]
 8004e4c:	430a      	orrs	r2, r1
 8004e4e:	605a      	str	r2, [r3, #4]
  }
}
 8004e50:	bf00      	nop
 8004e52:	370c      	adds	r7, #12
 8004e54:	46bd      	mov	sp, r7
 8004e56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e5a:	4770      	bx	lr

08004e5c <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8004e5c:	b580      	push	{r7, lr}
 8004e5e:	b086      	sub	sp, #24
 8004e60:	af02      	add	r7, sp, #8
 8004e62:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004e64:	687b      	ldr	r3, [r7, #4]
 8004e66:	2200      	movs	r2, #0
 8004e68:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8004e6c:	f7fb ff36 	bl	8000cdc <HAL_GetTick>
 8004e70:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8004e72:	687b      	ldr	r3, [r7, #4]
 8004e74:	681b      	ldr	r3, [r3, #0]
 8004e76:	681b      	ldr	r3, [r3, #0]
 8004e78:	f003 0308 	and.w	r3, r3, #8
 8004e7c:	2b08      	cmp	r3, #8
 8004e7e:	d10e      	bne.n	8004e9e <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8004e80:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8004e84:	9300      	str	r3, [sp, #0]
 8004e86:	68fb      	ldr	r3, [r7, #12]
 8004e88:	2200      	movs	r2, #0
 8004e8a:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 8004e8e:	6878      	ldr	r0, [r7, #4]
 8004e90:	f000 f82d 	bl	8004eee <UART_WaitOnFlagUntilTimeout>
 8004e94:	4603      	mov	r3, r0
 8004e96:	2b00      	cmp	r3, #0
 8004e98:	d001      	beq.n	8004e9e <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8004e9a:	2303      	movs	r3, #3
 8004e9c:	e023      	b.n	8004ee6 <UART_CheckIdleState+0x8a>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8004e9e:	687b      	ldr	r3, [r7, #4]
 8004ea0:	681b      	ldr	r3, [r3, #0]
 8004ea2:	681b      	ldr	r3, [r3, #0]
 8004ea4:	f003 0304 	and.w	r3, r3, #4
 8004ea8:	2b04      	cmp	r3, #4
 8004eaa:	d10e      	bne.n	8004eca <UART_CheckIdleState+0x6e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8004eac:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8004eb0:	9300      	str	r3, [sp, #0]
 8004eb2:	68fb      	ldr	r3, [r7, #12]
 8004eb4:	2200      	movs	r2, #0
 8004eb6:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 8004eba:	6878      	ldr	r0, [r7, #4]
 8004ebc:	f000 f817 	bl	8004eee <UART_WaitOnFlagUntilTimeout>
 8004ec0:	4603      	mov	r3, r0
 8004ec2:	2b00      	cmp	r3, #0
 8004ec4:	d001      	beq.n	8004eca <UART_CheckIdleState+0x6e>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8004ec6:	2303      	movs	r3, #3
 8004ec8:	e00d      	b.n	8004ee6 <UART_CheckIdleState+0x8a>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8004eca:	687b      	ldr	r3, [r7, #4]
 8004ecc:	2220      	movs	r2, #32
 8004ece:	679a      	str	r2, [r3, #120]	; 0x78
  huart->RxState = HAL_UART_STATE_READY;
 8004ed0:	687b      	ldr	r3, [r7, #4]
 8004ed2:	2220      	movs	r2, #32
 8004ed4:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004ed6:	687b      	ldr	r3, [r7, #4]
 8004ed8:	2200      	movs	r2, #0
 8004eda:	661a      	str	r2, [r3, #96]	; 0x60

  __HAL_UNLOCK(huart);
 8004edc:	687b      	ldr	r3, [r7, #4]
 8004ede:	2200      	movs	r2, #0
 8004ee0:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

  return HAL_OK;
 8004ee4:	2300      	movs	r3, #0
}
 8004ee6:	4618      	mov	r0, r3
 8004ee8:	3710      	adds	r7, #16
 8004eea:	46bd      	mov	sp, r7
 8004eec:	bd80      	pop	{r7, pc}

08004eee <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8004eee:	b580      	push	{r7, lr}
 8004ef0:	b09c      	sub	sp, #112	; 0x70
 8004ef2:	af00      	add	r7, sp, #0
 8004ef4:	60f8      	str	r0, [r7, #12]
 8004ef6:	60b9      	str	r1, [r7, #8]
 8004ef8:	603b      	str	r3, [r7, #0]
 8004efa:	4613      	mov	r3, r2
 8004efc:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8004efe:	e0a5      	b.n	800504c <UART_WaitOnFlagUntilTimeout+0x15e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004f00:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8004f02:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004f06:	f000 80a1 	beq.w	800504c <UART_WaitOnFlagUntilTimeout+0x15e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004f0a:	f7fb fee7 	bl	8000cdc <HAL_GetTick>
 8004f0e:	4602      	mov	r2, r0
 8004f10:	683b      	ldr	r3, [r7, #0]
 8004f12:	1ad3      	subs	r3, r2, r3
 8004f14:	6fba      	ldr	r2, [r7, #120]	; 0x78
 8004f16:	429a      	cmp	r2, r3
 8004f18:	d302      	bcc.n	8004f20 <UART_WaitOnFlagUntilTimeout+0x32>
 8004f1a:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8004f1c:	2b00      	cmp	r3, #0
 8004f1e:	d13e      	bne.n	8004f9e <UART_WaitOnFlagUntilTimeout+0xb0>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8004f20:	68fb      	ldr	r3, [r7, #12]
 8004f22:	681b      	ldr	r3, [r3, #0]
 8004f24:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004f26:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8004f28:	e853 3f00 	ldrex	r3, [r3]
 8004f2c:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 8004f2e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004f30:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8004f34:	667b      	str	r3, [r7, #100]	; 0x64
 8004f36:	68fb      	ldr	r3, [r7, #12]
 8004f38:	681b      	ldr	r3, [r3, #0]
 8004f3a:	461a      	mov	r2, r3
 8004f3c:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8004f3e:	65fb      	str	r3, [r7, #92]	; 0x5c
 8004f40:	65ba      	str	r2, [r7, #88]	; 0x58
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004f42:	6db9      	ldr	r1, [r7, #88]	; 0x58
 8004f44:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 8004f46:	e841 2300 	strex	r3, r2, [r1]
 8004f4a:	657b      	str	r3, [r7, #84]	; 0x54
   return(result);
 8004f4c:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8004f4e:	2b00      	cmp	r3, #0
 8004f50:	d1e6      	bne.n	8004f20 <UART_WaitOnFlagUntilTimeout+0x32>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004f52:	68fb      	ldr	r3, [r7, #12]
 8004f54:	681b      	ldr	r3, [r3, #0]
 8004f56:	3308      	adds	r3, #8
 8004f58:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004f5a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004f5c:	e853 3f00 	ldrex	r3, [r3]
 8004f60:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8004f62:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004f64:	f023 0301 	bic.w	r3, r3, #1
 8004f68:	663b      	str	r3, [r7, #96]	; 0x60
 8004f6a:	68fb      	ldr	r3, [r7, #12]
 8004f6c:	681b      	ldr	r3, [r3, #0]
 8004f6e:	3308      	adds	r3, #8
 8004f70:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8004f72:	64ba      	str	r2, [r7, #72]	; 0x48
 8004f74:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004f76:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8004f78:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8004f7a:	e841 2300 	strex	r3, r2, [r1]
 8004f7e:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 8004f80:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8004f82:	2b00      	cmp	r3, #0
 8004f84:	d1e5      	bne.n	8004f52 <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState = HAL_UART_STATE_READY;
 8004f86:	68fb      	ldr	r3, [r7, #12]
 8004f88:	2220      	movs	r2, #32
 8004f8a:	679a      	str	r2, [r3, #120]	; 0x78
        huart->RxState = HAL_UART_STATE_READY;
 8004f8c:	68fb      	ldr	r3, [r7, #12]
 8004f8e:	2220      	movs	r2, #32
 8004f90:	67da      	str	r2, [r3, #124]	; 0x7c

        __HAL_UNLOCK(huart);
 8004f92:	68fb      	ldr	r3, [r7, #12]
 8004f94:	2200      	movs	r2, #0
 8004f96:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

        return HAL_TIMEOUT;
 8004f9a:	2303      	movs	r3, #3
 8004f9c:	e067      	b.n	800506e <UART_WaitOnFlagUntilTimeout+0x180>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8004f9e:	68fb      	ldr	r3, [r7, #12]
 8004fa0:	681b      	ldr	r3, [r3, #0]
 8004fa2:	681b      	ldr	r3, [r3, #0]
 8004fa4:	f003 0304 	and.w	r3, r3, #4
 8004fa8:	2b00      	cmp	r3, #0
 8004faa:	d04f      	beq.n	800504c <UART_WaitOnFlagUntilTimeout+0x15e>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8004fac:	68fb      	ldr	r3, [r7, #12]
 8004fae:	681b      	ldr	r3, [r3, #0]
 8004fb0:	69db      	ldr	r3, [r3, #28]
 8004fb2:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8004fb6:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8004fba:	d147      	bne.n	800504c <UART_WaitOnFlagUntilTimeout+0x15e>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8004fbc:	68fb      	ldr	r3, [r7, #12]
 8004fbe:	681b      	ldr	r3, [r3, #0]
 8004fc0:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8004fc4:	621a      	str	r2, [r3, #32]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8004fc6:	68fb      	ldr	r3, [r7, #12]
 8004fc8:	681b      	ldr	r3, [r3, #0]
 8004fca:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004fcc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004fce:	e853 3f00 	ldrex	r3, [r3]
 8004fd2:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8004fd4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004fd6:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8004fda:	66fb      	str	r3, [r7, #108]	; 0x6c
 8004fdc:	68fb      	ldr	r3, [r7, #12]
 8004fde:	681b      	ldr	r3, [r3, #0]
 8004fe0:	461a      	mov	r2, r3
 8004fe2:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004fe4:	637b      	str	r3, [r7, #52]	; 0x34
 8004fe6:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004fe8:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8004fea:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8004fec:	e841 2300 	strex	r3, r2, [r1]
 8004ff0:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 8004ff2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004ff4:	2b00      	cmp	r3, #0
 8004ff6:	d1e6      	bne.n	8004fc6 <UART_WaitOnFlagUntilTimeout+0xd8>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004ff8:	68fb      	ldr	r3, [r7, #12]
 8004ffa:	681b      	ldr	r3, [r3, #0]
 8004ffc:	3308      	adds	r3, #8
 8004ffe:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005000:	697b      	ldr	r3, [r7, #20]
 8005002:	e853 3f00 	ldrex	r3, [r3]
 8005006:	613b      	str	r3, [r7, #16]
   return(result);
 8005008:	693b      	ldr	r3, [r7, #16]
 800500a:	f023 0301 	bic.w	r3, r3, #1
 800500e:	66bb      	str	r3, [r7, #104]	; 0x68
 8005010:	68fb      	ldr	r3, [r7, #12]
 8005012:	681b      	ldr	r3, [r3, #0]
 8005014:	3308      	adds	r3, #8
 8005016:	6eba      	ldr	r2, [r7, #104]	; 0x68
 8005018:	623a      	str	r2, [r7, #32]
 800501a:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800501c:	69f9      	ldr	r1, [r7, #28]
 800501e:	6a3a      	ldr	r2, [r7, #32]
 8005020:	e841 2300 	strex	r3, r2, [r1]
 8005024:	61bb      	str	r3, [r7, #24]
   return(result);
 8005026:	69bb      	ldr	r3, [r7, #24]
 8005028:	2b00      	cmp	r3, #0
 800502a:	d1e5      	bne.n	8004ff8 <UART_WaitOnFlagUntilTimeout+0x10a>

          huart->gState = HAL_UART_STATE_READY;
 800502c:	68fb      	ldr	r3, [r7, #12]
 800502e:	2220      	movs	r2, #32
 8005030:	679a      	str	r2, [r3, #120]	; 0x78
          huart->RxState = HAL_UART_STATE_READY;
 8005032:	68fb      	ldr	r3, [r7, #12]
 8005034:	2220      	movs	r2, #32
 8005036:	67da      	str	r2, [r3, #124]	; 0x7c
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8005038:	68fb      	ldr	r3, [r7, #12]
 800503a:	2220      	movs	r2, #32
 800503c:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8005040:	68fb      	ldr	r3, [r7, #12]
 8005042:	2200      	movs	r2, #0
 8005044:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

          return HAL_TIMEOUT;
 8005048:	2303      	movs	r3, #3
 800504a:	e010      	b.n	800506e <UART_WaitOnFlagUntilTimeout+0x180>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800504c:	68fb      	ldr	r3, [r7, #12]
 800504e:	681b      	ldr	r3, [r3, #0]
 8005050:	69da      	ldr	r2, [r3, #28]
 8005052:	68bb      	ldr	r3, [r7, #8]
 8005054:	4013      	ands	r3, r2
 8005056:	68ba      	ldr	r2, [r7, #8]
 8005058:	429a      	cmp	r2, r3
 800505a:	bf0c      	ite	eq
 800505c:	2301      	moveq	r3, #1
 800505e:	2300      	movne	r3, #0
 8005060:	b2db      	uxtb	r3, r3
 8005062:	461a      	mov	r2, r3
 8005064:	79fb      	ldrb	r3, [r7, #7]
 8005066:	429a      	cmp	r2, r3
 8005068:	f43f af4a 	beq.w	8004f00 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 800506c:	2300      	movs	r3, #0
}
 800506e:	4618      	mov	r0, r3
 8005070:	3770      	adds	r7, #112	; 0x70
 8005072:	46bd      	mov	sp, r7
 8005074:	bd80      	pop	{r7, pc}

08005076 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8005076:	b480      	push	{r7}
 8005078:	b095      	sub	sp, #84	; 0x54
 800507a:	af00      	add	r7, sp, #0
 800507c:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800507e:	687b      	ldr	r3, [r7, #4]
 8005080:	681b      	ldr	r3, [r3, #0]
 8005082:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005084:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005086:	e853 3f00 	ldrex	r3, [r3]
 800508a:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 800508c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800508e:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8005092:	64fb      	str	r3, [r7, #76]	; 0x4c
 8005094:	687b      	ldr	r3, [r7, #4]
 8005096:	681b      	ldr	r3, [r3, #0]
 8005098:	461a      	mov	r2, r3
 800509a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800509c:	643b      	str	r3, [r7, #64]	; 0x40
 800509e:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80050a0:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 80050a2:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 80050a4:	e841 2300 	strex	r3, r2, [r1]
 80050a8:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 80050aa:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80050ac:	2b00      	cmp	r3, #0
 80050ae:	d1e6      	bne.n	800507e <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80050b0:	687b      	ldr	r3, [r7, #4]
 80050b2:	681b      	ldr	r3, [r3, #0]
 80050b4:	3308      	adds	r3, #8
 80050b6:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80050b8:	6a3b      	ldr	r3, [r7, #32]
 80050ba:	e853 3f00 	ldrex	r3, [r3]
 80050be:	61fb      	str	r3, [r7, #28]
   return(result);
 80050c0:	69fb      	ldr	r3, [r7, #28]
 80050c2:	f023 0301 	bic.w	r3, r3, #1
 80050c6:	64bb      	str	r3, [r7, #72]	; 0x48
 80050c8:	687b      	ldr	r3, [r7, #4]
 80050ca:	681b      	ldr	r3, [r3, #0]
 80050cc:	3308      	adds	r3, #8
 80050ce:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80050d0:	62fa      	str	r2, [r7, #44]	; 0x2c
 80050d2:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80050d4:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80050d6:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80050d8:	e841 2300 	strex	r3, r2, [r1]
 80050dc:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 80050de:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80050e0:	2b00      	cmp	r3, #0
 80050e2:	d1e5      	bne.n	80050b0 <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80050e4:	687b      	ldr	r3, [r7, #4]
 80050e6:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80050e8:	2b01      	cmp	r3, #1
 80050ea:	d118      	bne.n	800511e <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80050ec:	687b      	ldr	r3, [r7, #4]
 80050ee:	681b      	ldr	r3, [r3, #0]
 80050f0:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80050f2:	68fb      	ldr	r3, [r7, #12]
 80050f4:	e853 3f00 	ldrex	r3, [r3]
 80050f8:	60bb      	str	r3, [r7, #8]
   return(result);
 80050fa:	68bb      	ldr	r3, [r7, #8]
 80050fc:	f023 0310 	bic.w	r3, r3, #16
 8005100:	647b      	str	r3, [r7, #68]	; 0x44
 8005102:	687b      	ldr	r3, [r7, #4]
 8005104:	681b      	ldr	r3, [r3, #0]
 8005106:	461a      	mov	r2, r3
 8005108:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800510a:	61bb      	str	r3, [r7, #24]
 800510c:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800510e:	6979      	ldr	r1, [r7, #20]
 8005110:	69ba      	ldr	r2, [r7, #24]
 8005112:	e841 2300 	strex	r3, r2, [r1]
 8005116:	613b      	str	r3, [r7, #16]
   return(result);
 8005118:	693b      	ldr	r3, [r7, #16]
 800511a:	2b00      	cmp	r3, #0
 800511c:	d1e6      	bne.n	80050ec <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800511e:	687b      	ldr	r3, [r7, #4]
 8005120:	2220      	movs	r2, #32
 8005122:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005124:	687b      	ldr	r3, [r7, #4]
 8005126:	2200      	movs	r2, #0
 8005128:	661a      	str	r2, [r3, #96]	; 0x60

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 800512a:	687b      	ldr	r3, [r7, #4]
 800512c:	2200      	movs	r2, #0
 800512e:	665a      	str	r2, [r3, #100]	; 0x64
}
 8005130:	bf00      	nop
 8005132:	3754      	adds	r7, #84	; 0x54
 8005134:	46bd      	mov	sp, r7
 8005136:	f85d 7b04 	ldr.w	r7, [sp], #4
 800513a:	4770      	bx	lr

0800513c <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 800513c:	b580      	push	{r7, lr}
 800513e:	b084      	sub	sp, #16
 8005140:	af00      	add	r7, sp, #0
 8005142:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8005144:	687b      	ldr	r3, [r7, #4]
 8005146:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005148:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 800514a:	68fb      	ldr	r3, [r7, #12]
 800514c:	2200      	movs	r2, #0
 800514e:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a
  huart->TxXferCount = 0U;
 8005152:	68fb      	ldr	r3, [r7, #12]
 8005154:	2200      	movs	r2, #0
 8005156:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 800515a:	68f8      	ldr	r0, [r7, #12]
 800515c:	f7ff fc4c 	bl	80049f8 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8005160:	bf00      	nop
 8005162:	3710      	adds	r7, #16
 8005164:	46bd      	mov	sp, r7
 8005166:	bd80      	pop	{r7, pc}

08005168 <UART_TxISR_8BIT>:
  *         interruptions have been enabled by HAL_UART_Transmit_IT().
  * @param huart UART handle.
  * @retval None
  */
static void UART_TxISR_8BIT(UART_HandleTypeDef *huart)
{
 8005168:	b480      	push	{r7}
 800516a:	b08f      	sub	sp, #60	; 0x3c
 800516c:	af00      	add	r7, sp, #0
 800516e:	6078      	str	r0, [r7, #4]
  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8005170:	687b      	ldr	r3, [r7, #4]
 8005172:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8005174:	2b21      	cmp	r3, #33	; 0x21
 8005176:	d14d      	bne.n	8005214 <UART_TxISR_8BIT+0xac>
  {
    if (huart->TxXferCount == 0U)
 8005178:	687b      	ldr	r3, [r7, #4]
 800517a:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 800517e:	b29b      	uxth	r3, r3
 8005180:	2b00      	cmp	r3, #0
 8005182:	d132      	bne.n	80051ea <UART_TxISR_8BIT+0x82>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TXEIE);
 8005184:	687b      	ldr	r3, [r7, #4]
 8005186:	681b      	ldr	r3, [r3, #0]
 8005188:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800518a:	6a3b      	ldr	r3, [r7, #32]
 800518c:	e853 3f00 	ldrex	r3, [r3]
 8005190:	61fb      	str	r3, [r7, #28]
   return(result);
 8005192:	69fb      	ldr	r3, [r7, #28]
 8005194:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8005198:	637b      	str	r3, [r7, #52]	; 0x34
 800519a:	687b      	ldr	r3, [r7, #4]
 800519c:	681b      	ldr	r3, [r3, #0]
 800519e:	461a      	mov	r2, r3
 80051a0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80051a2:	62fb      	str	r3, [r7, #44]	; 0x2c
 80051a4:	62ba      	str	r2, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80051a6:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80051a8:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80051aa:	e841 2300 	strex	r3, r2, [r1]
 80051ae:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 80051b0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80051b2:	2b00      	cmp	r3, #0
 80051b4:	d1e6      	bne.n	8005184 <UART_TxISR_8BIT+0x1c>

      /* Enable the UART Transmit Complete Interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 80051b6:	687b      	ldr	r3, [r7, #4]
 80051b8:	681b      	ldr	r3, [r3, #0]
 80051ba:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80051bc:	68fb      	ldr	r3, [r7, #12]
 80051be:	e853 3f00 	ldrex	r3, [r3]
 80051c2:	60bb      	str	r3, [r7, #8]
   return(result);
 80051c4:	68bb      	ldr	r3, [r7, #8]
 80051c6:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80051ca:	633b      	str	r3, [r7, #48]	; 0x30
 80051cc:	687b      	ldr	r3, [r7, #4]
 80051ce:	681b      	ldr	r3, [r3, #0]
 80051d0:	461a      	mov	r2, r3
 80051d2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80051d4:	61bb      	str	r3, [r7, #24]
 80051d6:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80051d8:	6979      	ldr	r1, [r7, #20]
 80051da:	69ba      	ldr	r2, [r7, #24]
 80051dc:	e841 2300 	strex	r3, r2, [r1]
 80051e0:	613b      	str	r3, [r7, #16]
   return(result);
 80051e2:	693b      	ldr	r3, [r7, #16]
 80051e4:	2b00      	cmp	r3, #0
 80051e6:	d1e6      	bne.n	80051b6 <UART_TxISR_8BIT+0x4e>
      huart->Instance->TDR = (uint8_t)(*huart->pTxBuffPtr & (uint8_t)0xFF);
      huart->pTxBuffPtr++;
      huart->TxXferCount--;
    }
  }
}
 80051e8:	e014      	b.n	8005214 <UART_TxISR_8BIT+0xac>
      huart->Instance->TDR = (uint8_t)(*huart->pTxBuffPtr & (uint8_t)0xFF);
 80051ea:	687b      	ldr	r3, [r7, #4]
 80051ec:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80051ee:	781a      	ldrb	r2, [r3, #0]
 80051f0:	687b      	ldr	r3, [r7, #4]
 80051f2:	681b      	ldr	r3, [r3, #0]
 80051f4:	b292      	uxth	r2, r2
 80051f6:	851a      	strh	r2, [r3, #40]	; 0x28
      huart->pTxBuffPtr++;
 80051f8:	687b      	ldr	r3, [r7, #4]
 80051fa:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80051fc:	1c5a      	adds	r2, r3, #1
 80051fe:	687b      	ldr	r3, [r7, #4]
 8005200:	64da      	str	r2, [r3, #76]	; 0x4c
      huart->TxXferCount--;
 8005202:	687b      	ldr	r3, [r7, #4]
 8005204:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 8005208:	b29b      	uxth	r3, r3
 800520a:	3b01      	subs	r3, #1
 800520c:	b29a      	uxth	r2, r3
 800520e:	687b      	ldr	r3, [r7, #4]
 8005210:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
}
 8005214:	bf00      	nop
 8005216:	373c      	adds	r7, #60	; 0x3c
 8005218:	46bd      	mov	sp, r7
 800521a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800521e:	4770      	bx	lr

08005220 <UART_TxISR_16BIT>:
  *         interruptions have been enabled by HAL_UART_Transmit_IT().
  * @param huart UART handle.
  * @retval None
  */
static void UART_TxISR_16BIT(UART_HandleTypeDef *huart)
{
 8005220:	b480      	push	{r7}
 8005222:	b091      	sub	sp, #68	; 0x44
 8005224:	af00      	add	r7, sp, #0
 8005226:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8005228:	687b      	ldr	r3, [r7, #4]
 800522a:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800522c:	2b21      	cmp	r3, #33	; 0x21
 800522e:	d151      	bne.n	80052d4 <UART_TxISR_16BIT+0xb4>
  {
    if (huart->TxXferCount == 0U)
 8005230:	687b      	ldr	r3, [r7, #4]
 8005232:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 8005236:	b29b      	uxth	r3, r3
 8005238:	2b00      	cmp	r3, #0
 800523a:	d132      	bne.n	80052a2 <UART_TxISR_16BIT+0x82>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TXEIE);
 800523c:	687b      	ldr	r3, [r7, #4]
 800523e:	681b      	ldr	r3, [r3, #0]
 8005240:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005242:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005244:	e853 3f00 	ldrex	r3, [r3]
 8005248:	623b      	str	r3, [r7, #32]
   return(result);
 800524a:	6a3b      	ldr	r3, [r7, #32]
 800524c:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8005250:	63bb      	str	r3, [r7, #56]	; 0x38
 8005252:	687b      	ldr	r3, [r7, #4]
 8005254:	681b      	ldr	r3, [r3, #0]
 8005256:	461a      	mov	r2, r3
 8005258:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800525a:	633b      	str	r3, [r7, #48]	; 0x30
 800525c:	62fa      	str	r2, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800525e:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8005260:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8005262:	e841 2300 	strex	r3, r2, [r1]
 8005266:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8005268:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800526a:	2b00      	cmp	r3, #0
 800526c:	d1e6      	bne.n	800523c <UART_TxISR_16BIT+0x1c>

      /* Enable the UART Transmit Complete Interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 800526e:	687b      	ldr	r3, [r7, #4]
 8005270:	681b      	ldr	r3, [r3, #0]
 8005272:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005274:	693b      	ldr	r3, [r7, #16]
 8005276:	e853 3f00 	ldrex	r3, [r3]
 800527a:	60fb      	str	r3, [r7, #12]
   return(result);
 800527c:	68fb      	ldr	r3, [r7, #12]
 800527e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8005282:	637b      	str	r3, [r7, #52]	; 0x34
 8005284:	687b      	ldr	r3, [r7, #4]
 8005286:	681b      	ldr	r3, [r3, #0]
 8005288:	461a      	mov	r2, r3
 800528a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800528c:	61fb      	str	r3, [r7, #28]
 800528e:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005290:	69b9      	ldr	r1, [r7, #24]
 8005292:	69fa      	ldr	r2, [r7, #28]
 8005294:	e841 2300 	strex	r3, r2, [r1]
 8005298:	617b      	str	r3, [r7, #20]
   return(result);
 800529a:	697b      	ldr	r3, [r7, #20]
 800529c:	2b00      	cmp	r3, #0
 800529e:	d1e6      	bne.n	800526e <UART_TxISR_16BIT+0x4e>
      huart->Instance->TDR = (((uint32_t)(*tmp)) & 0x01FFUL);
      huart->pTxBuffPtr += 2U;
      huart->TxXferCount--;
    }
  }
}
 80052a0:	e018      	b.n	80052d4 <UART_TxISR_16BIT+0xb4>
      tmp = (uint16_t *) huart->pTxBuffPtr;
 80052a2:	687b      	ldr	r3, [r7, #4]
 80052a4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80052a6:	63fb      	str	r3, [r7, #60]	; 0x3c
      huart->Instance->TDR = (((uint32_t)(*tmp)) & 0x01FFUL);
 80052a8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80052aa:	881a      	ldrh	r2, [r3, #0]
 80052ac:	687b      	ldr	r3, [r7, #4]
 80052ae:	681b      	ldr	r3, [r3, #0]
 80052b0:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80052b4:	b292      	uxth	r2, r2
 80052b6:	851a      	strh	r2, [r3, #40]	; 0x28
      huart->pTxBuffPtr += 2U;
 80052b8:	687b      	ldr	r3, [r7, #4]
 80052ba:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80052bc:	1c9a      	adds	r2, r3, #2
 80052be:	687b      	ldr	r3, [r7, #4]
 80052c0:	64da      	str	r2, [r3, #76]	; 0x4c
      huart->TxXferCount--;
 80052c2:	687b      	ldr	r3, [r7, #4]
 80052c4:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 80052c8:	b29b      	uxth	r3, r3
 80052ca:	3b01      	subs	r3, #1
 80052cc:	b29a      	uxth	r2, r3
 80052ce:	687b      	ldr	r3, [r7, #4]
 80052d0:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
}
 80052d4:	bf00      	nop
 80052d6:	3744      	adds	r7, #68	; 0x44
 80052d8:	46bd      	mov	sp, r7
 80052da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80052de:	4770      	bx	lr

080052e0 <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 80052e0:	b580      	push	{r7, lr}
 80052e2:	b088      	sub	sp, #32
 80052e4:	af00      	add	r7, sp, #0
 80052e6:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 80052e8:	687b      	ldr	r3, [r7, #4]
 80052ea:	681b      	ldr	r3, [r3, #0]
 80052ec:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80052ee:	68fb      	ldr	r3, [r7, #12]
 80052f0:	e853 3f00 	ldrex	r3, [r3]
 80052f4:	60bb      	str	r3, [r7, #8]
   return(result);
 80052f6:	68bb      	ldr	r3, [r7, #8]
 80052f8:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80052fc:	61fb      	str	r3, [r7, #28]
 80052fe:	687b      	ldr	r3, [r7, #4]
 8005300:	681b      	ldr	r3, [r3, #0]
 8005302:	461a      	mov	r2, r3
 8005304:	69fb      	ldr	r3, [r7, #28]
 8005306:	61bb      	str	r3, [r7, #24]
 8005308:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800530a:	6979      	ldr	r1, [r7, #20]
 800530c:	69ba      	ldr	r2, [r7, #24]
 800530e:	e841 2300 	strex	r3, r2, [r1]
 8005312:	613b      	str	r3, [r7, #16]
   return(result);
 8005314:	693b      	ldr	r3, [r7, #16]
 8005316:	2b00      	cmp	r3, #0
 8005318:	d1e6      	bne.n	80052e8 <UART_EndTransmit_IT+0x8>

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800531a:	687b      	ldr	r3, [r7, #4]
 800531c:	2220      	movs	r2, #32
 800531e:	679a      	str	r2, [r3, #120]	; 0x78

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 8005320:	687b      	ldr	r3, [r7, #4]
 8005322:	2200      	movs	r2, #0
 8005324:	669a      	str	r2, [r3, #104]	; 0x68
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8005326:	6878      	ldr	r0, [r7, #4]
 8005328:	f7fb fbd2 	bl	8000ad0 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800532c:	bf00      	nop
 800532e:	3720      	adds	r7, #32
 8005330:	46bd      	mov	sp, r7
 8005332:	bd80      	pop	{r7, pc}

08005334 <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 8005334:	b480      	push	{r7}
 8005336:	b083      	sub	sp, #12
 8005338:	af00      	add	r7, sp, #0
 800533a:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 800533c:	bf00      	nop
 800533e:	370c      	adds	r7, #12
 8005340:	46bd      	mov	sp, r7
 8005342:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005346:	4770      	bx	lr

08005348 <__libc_init_array>:
 8005348:	b570      	push	{r4, r5, r6, lr}
 800534a:	4d0d      	ldr	r5, [pc, #52]	; (8005380 <__libc_init_array+0x38>)
 800534c:	4c0d      	ldr	r4, [pc, #52]	; (8005384 <__libc_init_array+0x3c>)
 800534e:	1b64      	subs	r4, r4, r5
 8005350:	10a4      	asrs	r4, r4, #2
 8005352:	2600      	movs	r6, #0
 8005354:	42a6      	cmp	r6, r4
 8005356:	d109      	bne.n	800536c <__libc_init_array+0x24>
 8005358:	4d0b      	ldr	r5, [pc, #44]	; (8005388 <__libc_init_array+0x40>)
 800535a:	4c0c      	ldr	r4, [pc, #48]	; (800538c <__libc_init_array+0x44>)
 800535c:	f000 f820 	bl	80053a0 <_init>
 8005360:	1b64      	subs	r4, r4, r5
 8005362:	10a4      	asrs	r4, r4, #2
 8005364:	2600      	movs	r6, #0
 8005366:	42a6      	cmp	r6, r4
 8005368:	d105      	bne.n	8005376 <__libc_init_array+0x2e>
 800536a:	bd70      	pop	{r4, r5, r6, pc}
 800536c:	f855 3b04 	ldr.w	r3, [r5], #4
 8005370:	4798      	blx	r3
 8005372:	3601      	adds	r6, #1
 8005374:	e7ee      	b.n	8005354 <__libc_init_array+0xc>
 8005376:	f855 3b04 	ldr.w	r3, [r5], #4
 800537a:	4798      	blx	r3
 800537c:	3601      	adds	r6, #1
 800537e:	e7f2      	b.n	8005366 <__libc_init_array+0x1e>
 8005380:	080053f0 	.word	0x080053f0
 8005384:	080053f0 	.word	0x080053f0
 8005388:	080053f0 	.word	0x080053f0
 800538c:	080053f4 	.word	0x080053f4

08005390 <memset>:
 8005390:	4402      	add	r2, r0
 8005392:	4603      	mov	r3, r0
 8005394:	4293      	cmp	r3, r2
 8005396:	d100      	bne.n	800539a <memset+0xa>
 8005398:	4770      	bx	lr
 800539a:	f803 1b01 	strb.w	r1, [r3], #1
 800539e:	e7f9      	b.n	8005394 <memset+0x4>

080053a0 <_init>:
 80053a0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80053a2:	bf00      	nop
 80053a4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80053a6:	bc08      	pop	{r3}
 80053a8:	469e      	mov	lr, r3
 80053aa:	4770      	bx	lr

080053ac <_fini>:
 80053ac:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80053ae:	bf00      	nop
 80053b0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80053b2:	bc08      	pop	{r3}
 80053b4:	469e      	mov	lr, r3
 80053b6:	4770      	bx	lr
