
NUFSR.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00005c80  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000078  08005e10  08005e10  00015e10  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08005e88  08005e88  00020070  2**0
                  CONTENTS
  4 .ARM          00000000  08005e88  08005e88  00020070  2**0
                  CONTENTS
  5 .preinit_array 00000000  08005e88  08005e88  00020070  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08005e88  08005e88  00015e88  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08005e8c  08005e8c  00015e8c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000070  20000000  08005e90  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000019c  20000070  08005f00  00020070  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  2000020c  08005f00  0002020c  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020070  2**0
                  CONTENTS, READONLY
 12 .debug_info   000142aa  00000000  00000000  000200a0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00002e59  00000000  00000000  0003434a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000010b0  00000000  00000000  000371a8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000f68  00000000  00000000  00038258  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0001e119  00000000  00000000  000391c0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00016681  00000000  00000000  000572d9  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000adb6c  00000000  00000000  0006d95a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  0011b4c6  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00004874  00000000  00000000  0011b518  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	20000070 	.word	0x20000070
 80001ac:	00000000 	.word	0x00000000
 80001b0:	08005df8 	.word	0x08005df8

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	20000074 	.word	0x20000074
 80001cc:	08005df8 	.word	0x08005df8

080001d0 <strlen>:
 80001d0:	4603      	mov	r3, r0
 80001d2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001d6:	2a00      	cmp	r2, #0
 80001d8:	d1fb      	bne.n	80001d2 <strlen+0x2>
 80001da:	1a18      	subs	r0, r3, r0
 80001dc:	3801      	subs	r0, #1
 80001de:	4770      	bx	lr

080001e0 <memchr>:
 80001e0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001e4:	2a10      	cmp	r2, #16
 80001e6:	db2b      	blt.n	8000240 <memchr+0x60>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	d008      	beq.n	8000200 <memchr+0x20>
 80001ee:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001f2:	3a01      	subs	r2, #1
 80001f4:	428b      	cmp	r3, r1
 80001f6:	d02d      	beq.n	8000254 <memchr+0x74>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	b342      	cbz	r2, 8000250 <memchr+0x70>
 80001fe:	d1f6      	bne.n	80001ee <memchr+0xe>
 8000200:	b4f0      	push	{r4, r5, r6, r7}
 8000202:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000206:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800020a:	f022 0407 	bic.w	r4, r2, #7
 800020e:	f07f 0700 	mvns.w	r7, #0
 8000212:	2300      	movs	r3, #0
 8000214:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000218:	3c08      	subs	r4, #8
 800021a:	ea85 0501 	eor.w	r5, r5, r1
 800021e:	ea86 0601 	eor.w	r6, r6, r1
 8000222:	fa85 f547 	uadd8	r5, r5, r7
 8000226:	faa3 f587 	sel	r5, r3, r7
 800022a:	fa86 f647 	uadd8	r6, r6, r7
 800022e:	faa5 f687 	sel	r6, r5, r7
 8000232:	b98e      	cbnz	r6, 8000258 <memchr+0x78>
 8000234:	d1ee      	bne.n	8000214 <memchr+0x34>
 8000236:	bcf0      	pop	{r4, r5, r6, r7}
 8000238:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800023c:	f002 0207 	and.w	r2, r2, #7
 8000240:	b132      	cbz	r2, 8000250 <memchr+0x70>
 8000242:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000246:	3a01      	subs	r2, #1
 8000248:	ea83 0301 	eor.w	r3, r3, r1
 800024c:	b113      	cbz	r3, 8000254 <memchr+0x74>
 800024e:	d1f8      	bne.n	8000242 <memchr+0x62>
 8000250:	2000      	movs	r0, #0
 8000252:	4770      	bx	lr
 8000254:	3801      	subs	r0, #1
 8000256:	4770      	bx	lr
 8000258:	2d00      	cmp	r5, #0
 800025a:	bf06      	itte	eq
 800025c:	4635      	moveq	r5, r6
 800025e:	3803      	subeq	r0, #3
 8000260:	3807      	subne	r0, #7
 8000262:	f015 0f01 	tst.w	r5, #1
 8000266:	d107      	bne.n	8000278 <memchr+0x98>
 8000268:	3001      	adds	r0, #1
 800026a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800026e:	bf02      	ittt	eq
 8000270:	3001      	addeq	r0, #1
 8000272:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000276:	3001      	addeq	r0, #1
 8000278:	bcf0      	pop	{r4, r5, r6, r7}
 800027a:	3801      	subs	r0, #1
 800027c:	4770      	bx	lr
 800027e:	bf00      	nop

08000280 <MX_ADC1_Init>:

ADC_HandleTypeDef hadc1;

/* ADC1 init function */
void MX_ADC1_Init(void)
{
 8000280:	b580      	push	{r7, lr}
 8000282:	b084      	sub	sp, #16
 8000284:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8000286:	1d3b      	adds	r3, r7, #4
 8000288:	2200      	movs	r2, #0
 800028a:	601a      	str	r2, [r3, #0]
 800028c:	605a      	str	r2, [r3, #4]
 800028e:	609a      	str	r2, [r3, #8]

  /* USER CODE END ADC1_Init 1 */

  /** Common config
  */
  hadc1.Instance = ADC1;
 8000290:	4b2b      	ldr	r3, [pc, #172]	; (8000340 <MX_ADC1_Init+0xc0>)
 8000292:	4a2c      	ldr	r2, [pc, #176]	; (8000344 <MX_ADC1_Init+0xc4>)
 8000294:	601a      	str	r2, [r3, #0]
  hadc1.Init.ScanConvMode = ADC_SCAN_ENABLE;
 8000296:	4b2a      	ldr	r3, [pc, #168]	; (8000340 <MX_ADC1_Init+0xc0>)
 8000298:	f44f 7280 	mov.w	r2, #256	; 0x100
 800029c:	609a      	str	r2, [r3, #8]
  hadc1.Init.ContinuousConvMode = ENABLE;
 800029e:	4b28      	ldr	r3, [pc, #160]	; (8000340 <MX_ADC1_Init+0xc0>)
 80002a0:	2201      	movs	r2, #1
 80002a2:	731a      	strb	r2, [r3, #12]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 80002a4:	4b26      	ldr	r3, [pc, #152]	; (8000340 <MX_ADC1_Init+0xc0>)
 80002a6:	2200      	movs	r2, #0
 80002a8:	751a      	strb	r2, [r3, #20]
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 80002aa:	4b25      	ldr	r3, [pc, #148]	; (8000340 <MX_ADC1_Init+0xc0>)
 80002ac:	f44f 2260 	mov.w	r2, #917504	; 0xe0000
 80002b0:	61da      	str	r2, [r3, #28]
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 80002b2:	4b23      	ldr	r3, [pc, #140]	; (8000340 <MX_ADC1_Init+0xc0>)
 80002b4:	2200      	movs	r2, #0
 80002b6:	605a      	str	r2, [r3, #4]
  hadc1.Init.NbrOfConversion = 4;
 80002b8:	4b21      	ldr	r3, [pc, #132]	; (8000340 <MX_ADC1_Init+0xc0>)
 80002ba:	2204      	movs	r2, #4
 80002bc:	611a      	str	r2, [r3, #16]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 80002be:	4820      	ldr	r0, [pc, #128]	; (8000340 <MX_ADC1_Init+0xc0>)
 80002c0:	f000 fdf4 	bl	8000eac <HAL_ADC_Init>
 80002c4:	4603      	mov	r3, r0
 80002c6:	2b00      	cmp	r3, #0
 80002c8:	d001      	beq.n	80002ce <MX_ADC1_Init+0x4e>
  {
    Error_Handler();
 80002ca:	f000 fa97 	bl	80007fc <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_0;
 80002ce:	2300      	movs	r3, #0
 80002d0:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 80002d2:	2301      	movs	r3, #1
 80002d4:	60bb      	str	r3, [r7, #8]
  sConfig.SamplingTime = ADC_SAMPLETIME_1CYCLE_5;
 80002d6:	2300      	movs	r3, #0
 80002d8:	60fb      	str	r3, [r7, #12]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80002da:	1d3b      	adds	r3, r7, #4
 80002dc:	4619      	mov	r1, r3
 80002de:	4818      	ldr	r0, [pc, #96]	; (8000340 <MX_ADC1_Init+0xc0>)
 80002e0:	f000 febc 	bl	800105c <HAL_ADC_ConfigChannel>
 80002e4:	4603      	mov	r3, r0
 80002e6:	2b00      	cmp	r3, #0
 80002e8:	d001      	beq.n	80002ee <MX_ADC1_Init+0x6e>
  {
    Error_Handler();
 80002ea:	f000 fa87 	bl	80007fc <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Rank = ADC_REGULAR_RANK_2;
 80002ee:	2302      	movs	r3, #2
 80002f0:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80002f2:	1d3b      	adds	r3, r7, #4
 80002f4:	4619      	mov	r1, r3
 80002f6:	4812      	ldr	r0, [pc, #72]	; (8000340 <MX_ADC1_Init+0xc0>)
 80002f8:	f000 feb0 	bl	800105c <HAL_ADC_ConfigChannel>
 80002fc:	4603      	mov	r3, r0
 80002fe:	2b00      	cmp	r3, #0
 8000300:	d001      	beq.n	8000306 <MX_ADC1_Init+0x86>
  {
    Error_Handler();
 8000302:	f000 fa7b 	bl	80007fc <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Rank = ADC_REGULAR_RANK_3;
 8000306:	2303      	movs	r3, #3
 8000308:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 800030a:	1d3b      	adds	r3, r7, #4
 800030c:	4619      	mov	r1, r3
 800030e:	480c      	ldr	r0, [pc, #48]	; (8000340 <MX_ADC1_Init+0xc0>)
 8000310:	f000 fea4 	bl	800105c <HAL_ADC_ConfigChannel>
 8000314:	4603      	mov	r3, r0
 8000316:	2b00      	cmp	r3, #0
 8000318:	d001      	beq.n	800031e <MX_ADC1_Init+0x9e>
  {
    Error_Handler();
 800031a:	f000 fa6f 	bl	80007fc <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Rank = ADC_REGULAR_RANK_4;
 800031e:	2304      	movs	r3, #4
 8000320:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000322:	1d3b      	adds	r3, r7, #4
 8000324:	4619      	mov	r1, r3
 8000326:	4806      	ldr	r0, [pc, #24]	; (8000340 <MX_ADC1_Init+0xc0>)
 8000328:	f000 fe98 	bl	800105c <HAL_ADC_ConfigChannel>
 800032c:	4603      	mov	r3, r0
 800032e:	2b00      	cmp	r3, #0
 8000330:	d001      	beq.n	8000336 <MX_ADC1_Init+0xb6>
  {
    Error_Handler();
 8000332:	f000 fa63 	bl	80007fc <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8000336:	bf00      	nop
 8000338:	3710      	adds	r7, #16
 800033a:	46bd      	mov	sp, r7
 800033c:	bd80      	pop	{r7, pc}
 800033e:	bf00      	nop
 8000340:	2000008c 	.word	0x2000008c
 8000344:	40012400 	.word	0x40012400

08000348 <HAL_ADC_MspInit>:

void HAL_ADC_MspInit(ADC_HandleTypeDef* adcHandle)
{
 8000348:	b580      	push	{r7, lr}
 800034a:	b08a      	sub	sp, #40	; 0x28
 800034c:	af00      	add	r7, sp, #0
 800034e:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000350:	f107 0314 	add.w	r3, r7, #20
 8000354:	2200      	movs	r2, #0
 8000356:	601a      	str	r2, [r3, #0]
 8000358:	605a      	str	r2, [r3, #4]
 800035a:	609a      	str	r2, [r3, #8]
 800035c:	60da      	str	r2, [r3, #12]
 800035e:	611a      	str	r2, [r3, #16]
  if(adcHandle->Instance==ADC1)
 8000360:	687b      	ldr	r3, [r7, #4]
 8000362:	681b      	ldr	r3, [r3, #0]
 8000364:	4a15      	ldr	r2, [pc, #84]	; (80003bc <HAL_ADC_MspInit+0x74>)
 8000366:	4293      	cmp	r3, r2
 8000368:	d124      	bne.n	80003b4 <HAL_ADC_MspInit+0x6c>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* ADC1 clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 800036a:	4b15      	ldr	r3, [pc, #84]	; (80003c0 <HAL_ADC_MspInit+0x78>)
 800036c:	699b      	ldr	r3, [r3, #24]
 800036e:	4a14      	ldr	r2, [pc, #80]	; (80003c0 <HAL_ADC_MspInit+0x78>)
 8000370:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8000374:	6193      	str	r3, [r2, #24]
 8000376:	4b12      	ldr	r3, [pc, #72]	; (80003c0 <HAL_ADC_MspInit+0x78>)
 8000378:	699b      	ldr	r3, [r3, #24]
 800037a:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800037e:	613b      	str	r3, [r7, #16]
 8000380:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000382:	4b0f      	ldr	r3, [pc, #60]	; (80003c0 <HAL_ADC_MspInit+0x78>)
 8000384:	695b      	ldr	r3, [r3, #20]
 8000386:	4a0e      	ldr	r2, [pc, #56]	; (80003c0 <HAL_ADC_MspInit+0x78>)
 8000388:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800038c:	6153      	str	r3, [r2, #20]
 800038e:	4b0c      	ldr	r3, [pc, #48]	; (80003c0 <HAL_ADC_MspInit+0x78>)
 8000390:	695b      	ldr	r3, [r3, #20]
 8000392:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000396:	60fb      	str	r3, [r7, #12]
 8000398:	68fb      	ldr	r3, [r7, #12]
    PA0     ------> ADC1_IN0
    PA1     ------> ADC1_IN1
    PA2     ------> ADC1_IN2
    PA3     ------> ADC1_IN3
    */
    GPIO_InitStruct.Pin = FSR1_Pin|FSR2_Pin|FSR3_Pin|FSR4_Pin;
 800039a:	230f      	movs	r3, #15
 800039c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 800039e:	2303      	movs	r3, #3
 80003a0:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80003a2:	2300      	movs	r3, #0
 80003a4:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80003a6:	f107 0314 	add.w	r3, r7, #20
 80003aa:	4619      	mov	r1, r3
 80003ac:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80003b0:	f001 f90e 	bl	80015d0 <HAL_GPIO_Init>

  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }
}
 80003b4:	bf00      	nop
 80003b6:	3728      	adds	r7, #40	; 0x28
 80003b8:	46bd      	mov	sp, r7
 80003ba:	bd80      	pop	{r7, pc}
 80003bc:	40012400 	.word	0x40012400
 80003c0:	40021000 	.word	0x40021000

080003c4 <MX_GPIO_Init>:
        * EXTI
        * Free pins are configured automatically as Analog (this feature is enabled through
        * the Code Generation settings)
*/
void MX_GPIO_Init(void)
{
 80003c4:	b580      	push	{r7, lr}
 80003c6:	b08c      	sub	sp, #48	; 0x30
 80003c8:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80003ca:	f107 031c 	add.w	r3, r7, #28
 80003ce:	2200      	movs	r2, #0
 80003d0:	601a      	str	r2, [r3, #0]
 80003d2:	605a      	str	r2, [r3, #4]
 80003d4:	609a      	str	r2, [r3, #8]
 80003d6:	60da      	str	r2, [r3, #12]
 80003d8:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80003da:	4b69      	ldr	r3, [pc, #420]	; (8000580 <MX_GPIO_Init+0x1bc>)
 80003dc:	695b      	ldr	r3, [r3, #20]
 80003de:	4a68      	ldr	r2, [pc, #416]	; (8000580 <MX_GPIO_Init+0x1bc>)
 80003e0:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 80003e4:	6153      	str	r3, [r2, #20]
 80003e6:	4b66      	ldr	r3, [pc, #408]	; (8000580 <MX_GPIO_Init+0x1bc>)
 80003e8:	695b      	ldr	r3, [r3, #20]
 80003ea:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80003ee:	61bb      	str	r3, [r7, #24]
 80003f0:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 80003f2:	4b63      	ldr	r3, [pc, #396]	; (8000580 <MX_GPIO_Init+0x1bc>)
 80003f4:	695b      	ldr	r3, [r3, #20]
 80003f6:	4a62      	ldr	r2, [pc, #392]	; (8000580 <MX_GPIO_Init+0x1bc>)
 80003f8:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 80003fc:	6153      	str	r3, [r2, #20]
 80003fe:	4b60      	ldr	r3, [pc, #384]	; (8000580 <MX_GPIO_Init+0x1bc>)
 8000400:	695b      	ldr	r3, [r3, #20]
 8000402:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8000406:	617b      	str	r3, [r7, #20]
 8000408:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800040a:	4b5d      	ldr	r3, [pc, #372]	; (8000580 <MX_GPIO_Init+0x1bc>)
 800040c:	695b      	ldr	r3, [r3, #20]
 800040e:	4a5c      	ldr	r2, [pc, #368]	; (8000580 <MX_GPIO_Init+0x1bc>)
 8000410:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000414:	6153      	str	r3, [r2, #20]
 8000416:	4b5a      	ldr	r3, [pc, #360]	; (8000580 <MX_GPIO_Init+0x1bc>)
 8000418:	695b      	ldr	r3, [r3, #20]
 800041a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800041e:	613b      	str	r3, [r7, #16]
 8000420:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000422:	4b57      	ldr	r3, [pc, #348]	; (8000580 <MX_GPIO_Init+0x1bc>)
 8000424:	695b      	ldr	r3, [r3, #20]
 8000426:	4a56      	ldr	r2, [pc, #344]	; (8000580 <MX_GPIO_Init+0x1bc>)
 8000428:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800042c:	6153      	str	r3, [r2, #20]
 800042e:	4b54      	ldr	r3, [pc, #336]	; (8000580 <MX_GPIO_Init+0x1bc>)
 8000430:	695b      	ldr	r3, [r3, #20]
 8000432:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8000436:	60fb      	str	r3, [r7, #12]
 8000438:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOE_CLK_ENABLE();
 800043a:	4b51      	ldr	r3, [pc, #324]	; (8000580 <MX_GPIO_Init+0x1bc>)
 800043c:	695b      	ldr	r3, [r3, #20]
 800043e:	4a50      	ldr	r2, [pc, #320]	; (8000580 <MX_GPIO_Init+0x1bc>)
 8000440:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8000444:	6153      	str	r3, [r2, #20]
 8000446:	4b4e      	ldr	r3, [pc, #312]	; (8000580 <MX_GPIO_Init+0x1bc>)
 8000448:	695b      	ldr	r3, [r3, #20]
 800044a:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800044e:	60bb      	str	r3, [r7, #8]
 8000450:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000452:	4b4b      	ldr	r3, [pc, #300]	; (8000580 <MX_GPIO_Init+0x1bc>)
 8000454:	695b      	ldr	r3, [r3, #20]
 8000456:	4a4a      	ldr	r2, [pc, #296]	; (8000580 <MX_GPIO_Init+0x1bc>)
 8000458:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800045c:	6153      	str	r3, [r2, #20]
 800045e:	4b48      	ldr	r3, [pc, #288]	; (8000580 <MX_GPIO_Init+0x1bc>)
 8000460:	695b      	ldr	r3, [r3, #20]
 8000462:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8000466:	607b      	str	r3, [r7, #4]
 8000468:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(DXL_DIR_GPIO_Port, DXL_DIR_Pin, GPIO_PIN_RESET);
 800046a:	2200      	movs	r2, #0
 800046c:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000470:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000474:	f001 fa26 	bl	80018c4 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, LED1_Pin|LED2_Pin, GPIO_PIN_RESET);
 8000478:	2200      	movs	r2, #0
 800047a:	f44f 7140 	mov.w	r1, #768	; 0x300
 800047e:	4841      	ldr	r0, [pc, #260]	; (8000584 <MX_GPIO_Init+0x1c0>)
 8000480:	f001 fa20 	bl	80018c4 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PC13 PC14 PC15 PC0
                           PC1 PC2 PC3 PC4
                           PC5 PC10 PC11 PC12 */
  GPIO_InitStruct.Pin = GPIO_PIN_13|GPIO_PIN_14|GPIO_PIN_15|GPIO_PIN_0
 8000484:	f64f 433f 	movw	r3, #64575	; 0xfc3f
 8000488:	61fb      	str	r3, [r7, #28]
                          |GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_3|GPIO_PIN_4
                          |GPIO_PIN_5|GPIO_PIN_10|GPIO_PIN_11|GPIO_PIN_12;
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 800048a:	2303      	movs	r3, #3
 800048c:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800048e:	2300      	movs	r3, #0
 8000490:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000492:	f107 031c 	add.w	r3, r7, #28
 8000496:	4619      	mov	r1, r3
 8000498:	483b      	ldr	r0, [pc, #236]	; (8000588 <MX_GPIO_Init+0x1c4>)
 800049a:	f001 f899 	bl	80015d0 <HAL_GPIO_Init>

  /*Configure GPIO pins : PA4 PA5 PA6 PA7
                           PA11 PA12 */
  GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7
 800049e:	f641 03f0 	movw	r3, #6384	; 0x18f0
 80004a2:	61fb      	str	r3, [r7, #28]
                          |GPIO_PIN_11|GPIO_PIN_12;
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80004a4:	2303      	movs	r3, #3
 80004a6:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80004a8:	2300      	movs	r3, #0
 80004aa:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80004ac:	f107 031c 	add.w	r3, r7, #28
 80004b0:	4619      	mov	r1, r3
 80004b2:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80004b6:	f001 f88b 	bl	80015d0 <HAL_GPIO_Init>

  /*Configure GPIO pins : PB0 PB1 PB2 PB14
                           PB15 PB5 PB6 PB7 */
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_14
 80004ba:	f24c 03e7 	movw	r3, #49383	; 0xc0e7
 80004be:	61fb      	str	r3, [r7, #28]
                          |GPIO_PIN_15|GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7;
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80004c0:	2303      	movs	r3, #3
 80004c2:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80004c4:	2300      	movs	r3, #0
 80004c6:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80004c8:	f107 031c 	add.w	r3, r7, #28
 80004cc:	4619      	mov	r1, r3
 80004ce:	482d      	ldr	r0, [pc, #180]	; (8000584 <MX_GPIO_Init+0x1c0>)
 80004d0:	f001 f87e 	bl	80015d0 <HAL_GPIO_Init>

  /*Configure GPIO pins : PE8 PE9 */
  GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 80004d4:	f44f 7340 	mov.w	r3, #768	; 0x300
 80004d8:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80004da:	2303      	movs	r3, #3
 80004dc:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80004de:	2300      	movs	r3, #0
 80004e0:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 80004e2:	f107 031c 	add.w	r3, r7, #28
 80004e6:	4619      	mov	r1, r3
 80004e8:	4828      	ldr	r0, [pc, #160]	; (800058c <MX_GPIO_Init+0x1c8>)
 80004ea:	f001 f871 	bl	80015d0 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = MPU_INT_Pin;
 80004ee:	f44f 7380 	mov.w	r3, #256	; 0x100
 80004f2:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 80004f4:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 80004f8:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80004fa:	2300      	movs	r3, #0
 80004fc:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(MPU_INT_GPIO_Port, &GPIO_InitStruct);
 80004fe:	f107 031c 	add.w	r3, r7, #28
 8000502:	4619      	mov	r1, r3
 8000504:	4822      	ldr	r0, [pc, #136]	; (8000590 <MX_GPIO_Init+0x1cc>)
 8000506:	f001 f863 	bl	80015d0 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = DXL_DIR_Pin;
 800050a:	f44f 7380 	mov.w	r3, #256	; 0x100
 800050e:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000510:	2301      	movs	r3, #1
 8000512:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000514:	2300      	movs	r3, #0
 8000516:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000518:	2300      	movs	r3, #0
 800051a:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(DXL_DIR_GPIO_Port, &GPIO_InitStruct);
 800051c:	f107 031c 	add.w	r3, r7, #28
 8000520:	4619      	mov	r1, r3
 8000522:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000526:	f001 f853 	bl	80015d0 <HAL_GPIO_Init>

  /*Configure GPIO pins : PF6 PF7 */
  GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 800052a:	23c0      	movs	r3, #192	; 0xc0
 800052c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 800052e:	2303      	movs	r3, #3
 8000530:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000532:	2300      	movs	r3, #0
 8000534:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8000536:	f107 031c 	add.w	r3, r7, #28
 800053a:	4619      	mov	r1, r3
 800053c:	4815      	ldr	r0, [pc, #84]	; (8000594 <MX_GPIO_Init+0x1d0>)
 800053e:	f001 f847 	bl	80015d0 <HAL_GPIO_Init>

  /*Configure GPIO pin : PD2 */
  GPIO_InitStruct.Pin = GPIO_PIN_2;
 8000542:	2304      	movs	r3, #4
 8000544:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000546:	2303      	movs	r3, #3
 8000548:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800054a:	2300      	movs	r3, #0
 800054c:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 800054e:	f107 031c 	add.w	r3, r7, #28
 8000552:	4619      	mov	r1, r3
 8000554:	480e      	ldr	r0, [pc, #56]	; (8000590 <MX_GPIO_Init+0x1cc>)
 8000556:	f001 f83b 	bl	80015d0 <HAL_GPIO_Init>

  /*Configure GPIO pins : PBPin PBPin */
  GPIO_InitStruct.Pin = LED1_Pin|LED2_Pin;
 800055a:	f44f 7340 	mov.w	r3, #768	; 0x300
 800055e:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000560:	2301      	movs	r3, #1
 8000562:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000564:	2300      	movs	r3, #0
 8000566:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000568:	2300      	movs	r3, #0
 800056a:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800056c:	f107 031c 	add.w	r3, r7, #28
 8000570:	4619      	mov	r1, r3
 8000572:	4804      	ldr	r0, [pc, #16]	; (8000584 <MX_GPIO_Init+0x1c0>)
 8000574:	f001 f82c 	bl	80015d0 <HAL_GPIO_Init>

}
 8000578:	bf00      	nop
 800057a:	3730      	adds	r7, #48	; 0x30
 800057c:	46bd      	mov	sp, r7
 800057e:	bd80      	pop	{r7, pc}
 8000580:	40021000 	.word	0x40021000
 8000584:	48000400 	.word	0x48000400
 8000588:	48000800 	.word	0x48000800
 800058c:	48001000 	.word	0x48001000
 8000590:	48000c00 	.word	0x48000c00
 8000594:	48001400 	.word	0x48001400

08000598 <NUfsr_IMU_Transmit>:

#include "imu.h"
#include "spi.h"

void NUfsr_IMU_Transmit(uint8_t adr, uint8_t dat, int byte_size)
{
 8000598:	b580      	push	{r7, lr}
 800059a:	b084      	sub	sp, #16
 800059c:	af00      	add	r7, sp, #0
 800059e:	4603      	mov	r3, r0
 80005a0:	603a      	str	r2, [r7, #0]
 80005a2:	71fb      	strb	r3, [r7, #7]
 80005a4:	460b      	mov	r3, r1
 80005a6:	71bb      	strb	r3, [r7, #6]
	uint8_t pak[2] = {adr,dat};
 80005a8:	79fb      	ldrb	r3, [r7, #7]
 80005aa:	733b      	strb	r3, [r7, #12]
 80005ac:	79bb      	ldrb	r3, [r7, #6]
 80005ae:	737b      	strb	r3, [r7, #13]

	HAL_SPI_Transmit(&hspi1, pak, byte_size, HAL_MAX_DELAY);
 80005b0:	683b      	ldr	r3, [r7, #0]
 80005b2:	b29a      	uxth	r2, r3
 80005b4:	f107 010c 	add.w	r1, r7, #12
 80005b8:	f04f 33ff 	mov.w	r3, #4294967295
 80005bc:	4803      	ldr	r0, [pc, #12]	; (80005cc <NUfsr_IMU_Transmit+0x34>)
 80005be:	f002 fe48 	bl	8003252 <HAL_SPI_Transmit>

}
 80005c2:	bf00      	nop
 80005c4:	3710      	adds	r7, #16
 80005c6:	46bd      	mov	sp, r7
 80005c8:	bd80      	pop	{r7, pc}
 80005ca:	bf00      	nop
 80005cc:	200000bc 	.word	0x200000bc

080005d0 <NUfsr_IMU_TransmitReceive>:

void NUfsr_IMU_TransmitReceive(uint8_t adr, uint8_t dat, uint8_t* dat_return, int byte_size)
{
 80005d0:	b580      	push	{r7, lr}
 80005d2:	b088      	sub	sp, #32
 80005d4:	af02      	add	r7, sp, #8
 80005d6:	60ba      	str	r2, [r7, #8]
 80005d8:	607b      	str	r3, [r7, #4]
 80005da:	4603      	mov	r3, r0
 80005dc:	73fb      	strb	r3, [r7, #15]
 80005de:	460b      	mov	r3, r1
 80005e0:	73bb      	strb	r3, [r7, #14]
	uint8_t pak[2] = {adr,dat};
 80005e2:	7bfb      	ldrb	r3, [r7, #15]
 80005e4:	753b      	strb	r3, [r7, #20]
 80005e6:	7bbb      	ldrb	r3, [r7, #14]
 80005e8:	757b      	strb	r3, [r7, #21]

	HAL_SPI_TransmitReceive(&hspi1, pak, (uint8_t*)dat_return, byte_size, HAL_MAX_DELAY);
 80005ea:	687b      	ldr	r3, [r7, #4]
 80005ec:	b29b      	uxth	r3, r3
 80005ee:	f107 0114 	add.w	r1, r7, #20
 80005f2:	f04f 32ff 	mov.w	r2, #4294967295
 80005f6:	9200      	str	r2, [sp, #0]
 80005f8:	68ba      	ldr	r2, [r7, #8]
 80005fa:	4803      	ldr	r0, [pc, #12]	; (8000608 <NUfsr_IMU_TransmitReceive+0x38>)
 80005fc:	f002 ff97 	bl	800352e <HAL_SPI_TransmitReceive>
}
 8000600:	bf00      	nop
 8000602:	3718      	adds	r7, #24
 8000604:	46bd      	mov	sp, r7
 8000606:	bd80      	pop	{r7, pc}
 8000608:	200000bc 	.word	0x200000bc

0800060c <NUfsr_IMU_Init>:

void NUfsr_IMU_Init()
{
 800060c:	b580      	push	{r7, lr}
 800060e:	af00      	add	r7, sp, #0
	// Implement series of commands to configure appropriate settings

	// Ensure R/W registers are set from power-up
    HAL_Delay(100);
 8000610:	2064      	movs	r0, #100	; 0x64
 8000612:	f000 fc27 	bl	8000e64 <HAL_Delay>

	// Ensure we are in SPI mode
	NUfsr_IMU_Transmit(USER_CTRL, 0x1D, 2);
 8000616:	2202      	movs	r2, #2
 8000618:	211d      	movs	r1, #29
 800061a:	206a      	movs	r0, #106	; 0x6a
 800061c:	f7ff ffbc 	bl	8000598 <NUfsr_IMU_Transmit>

	// Reset device: 0x6b, 0x80
	NUfsr_IMU_Transmit(PWR_MGMT_1, 0x00, 2);
 8000620:	2202      	movs	r2, #2
 8000622:	2100      	movs	r1, #0
 8000624:	206b      	movs	r0, #107	; 0x6b
 8000626:	f7ff ffb7 	bl	8000598 <NUfsr_IMU_Transmit>

	// Turn off sleep mode:
	NUfsr_IMU_Transmit(PWR_MGMT_2, 0x00, 2);
 800062a:	2202      	movs	r2, #2
 800062c:	2100      	movs	r1, #0
 800062e:	206c      	movs	r0, #108	; 0x6c
 8000630:	f7ff ffb2 	bl	8000598 <NUfsr_IMU_Transmit>

	// Config settings
	NUfsr_IMU_Transmit(CONFIG, 0x00, 2);
 8000634:	2202      	movs	r2, #2
 8000636:	2100      	movs	r1, #0
 8000638:	201a      	movs	r0, #26
 800063a:	f7ff ffad 	bl	8000598 <NUfsr_IMU_Transmit>

	// Gyro Config
	NUfsr_IMU_Transmit(GYRO_CONFIG, 0x00, 2);
 800063e:	2202      	movs	r2, #2
 8000640:	2100      	movs	r1, #0
 8000642:	201b      	movs	r0, #27
 8000644:	f7ff ffa8 	bl	8000598 <NUfsr_IMU_Transmit>

	// Accel Config
	NUfsr_IMU_Transmit(ACCEL_CONFIG, 0x00, 2);
 8000648:	2202      	movs	r2, #2
 800064a:	2100      	movs	r1, #0
 800064c:	201c      	movs	r0, #28
 800064e:	f7ff ffa3 	bl	8000598 <NUfsr_IMU_Transmit>

	// Int config
	NUfsr_IMU_Transmit(INT_PIN_CFG, 0x20, 2);
 8000652:	2202      	movs	r2, #2
 8000654:	2120      	movs	r1, #32
 8000656:	2037      	movs	r0, #55	; 0x37
 8000658:	f7ff ff9e 	bl	8000598 <NUfsr_IMU_Transmit>

	// Interupt settings
	NUfsr_IMU_Transmit(INT_ENABLE, 0x01, 2);
 800065c:	2202      	movs	r2, #2
 800065e:	2101      	movs	r1, #1
 8000660:	2038      	movs	r0, #56	; 0x38
 8000662:	f7ff ff99 	bl	8000598 <NUfsr_IMU_Transmit>

	// Reset IMU int status
	NUfsr_IMU_Transmit(INT_STATUS | IMU_READ, 0x00, 2);
 8000666:	2202      	movs	r2, #2
 8000668:	2100      	movs	r1, #0
 800066a:	20ba      	movs	r0, #186	; 0xba
 800066c:	f7ff ff94 	bl	8000598 <NUfsr_IMU_Transmit>

}
 8000670:	bf00      	nop
 8000672:	bd80      	pop	{r7, pc}

08000674 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000674:	b580      	push	{r7, lr}
 8000676:	b092      	sub	sp, #72	; 0x48
 8000678:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800067a:	f000 fb8d 	bl	8000d98 <HAL_Init>

  /* USER CODE BEGIN Init */
  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800067e:	f000 f861 	bl	8000744 <SystemClock_Config>

  /* USER CODE BEGIN SysInit */
  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000682:	f7ff fe9f 	bl	80003c4 <MX_GPIO_Init>
  MX_ADC1_Init();
 8000686:	f7ff fdfb 	bl	8000280 <MX_ADC1_Init>
  MX_SPI1_Init();
 800068a:	f000 f8bd 	bl	8000808 <MX_SPI1_Init>
  MX_TIM3_Init();
 800068e:	f000 f9e7 	bl	8000a60 <MX_TIM3_Init>
  MX_USART1_UART_Init();
 8000692:	f000 fa59 	bl	8000b48 <MX_USART1_UART_Init>
  /* USER CODE BEGIN 2 */

  NUfsr_IMU_Init();
 8000696:	f7ff ffb9 	bl	800060c <NUfsr_IMU_Init>
 // uint8_t return_Data[2] = {1,2};
  char str_buffer[64];
  uint16_t return_Data = 0x0000;
 800069a:	2300      	movs	r3, #0
 800069c:	807b      	strh	r3, [r7, #2]
  uint16_t* p_return_data = &return_Data;
 800069e:	1cbb      	adds	r3, r7, #2
 80006a0:	647b      	str	r3, [r7, #68]	; 0x44
  //NUfsr_UART_Transmit(&huart1, return_Data, 1);
 // HAL_GPIO_WritePin(DXL_DIR_GPIO_Port, DXL_DIR_Pin, GPIO_PIN_SET);
  //HAL_UART_Transmit(&huart1, (uint8_t*)&return_Data, 1, HAL_MAX_DELAY);
  HAL_GPIO_WritePin(MPU_NSS_GPIO_Port, MPU_NSS_Pin, GPIO_PIN_RESET);
 80006a2:	2200      	movs	r2, #0
 80006a4:	2140      	movs	r1, #64	; 0x40
 80006a6:	4822      	ldr	r0, [pc, #136]	; (8000730 <main+0xbc>)
 80006a8:	f001 f90c 	bl	80018c4 <HAL_GPIO_WritePin>
  NUfsr_IMU_TransmitReceive(WHO_AM_I | IMU_READ, 0x00, (uint8_t*)p_return_data, 1);
 80006ac:	2301      	movs	r3, #1
 80006ae:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 80006b0:	2100      	movs	r1, #0
 80006b2:	20f5      	movs	r0, #245	; 0xf5
 80006b4:	f7ff ff8c 	bl	80005d0 <NUfsr_IMU_TransmitReceive>
  HAL_GPIO_WritePin(MPU_NSS_GPIO_Port, MPU_NSS_Pin, GPIO_PIN_SET);
 80006b8:	2201      	movs	r2, #1
 80006ba:	2140      	movs	r1, #64	; 0x40
 80006bc:	481c      	ldr	r0, [pc, #112]	; (8000730 <main+0xbc>)
 80006be:	f001 f901 	bl	80018c4 <HAL_GPIO_WritePin>

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
	  if (huart1_ITh.Tx_State == Tx_FINISHED){
 80006c2:	4b1c      	ldr	r3, [pc, #112]	; (8000734 <main+0xc0>)
 80006c4:	781b      	ldrb	r3, [r3, #0]
 80006c6:	b2db      	uxtb	r3, r3
 80006c8:	2b00      	cmp	r3, #0
 80006ca:	d112      	bne.n	80006f2 <main+0x7e>
		  sprintf(str_buffer, "IMU: %x\r\n", *(char*)p_return_data);
 80006cc:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80006ce:	781b      	ldrb	r3, [r3, #0]
 80006d0:	461a      	mov	r2, r3
 80006d2:	1d3b      	adds	r3, r7, #4
 80006d4:	4918      	ldr	r1, [pc, #96]	; (8000738 <main+0xc4>)
 80006d6:	4618      	mov	r0, r3
 80006d8:	f004 ff20 	bl	800551c <siprintf>
		  NUfsr_UART_Transmit(&huart1, str_buffer, strlen(str_buffer));
 80006dc:	1d3b      	adds	r3, r7, #4
 80006de:	4618      	mov	r0, r3
 80006e0:	f7ff fd76 	bl	80001d0 <strlen>
 80006e4:	4603      	mov	r3, r0
 80006e6:	b29a      	uxth	r2, r3
 80006e8:	1d3b      	adds	r3, r7, #4
 80006ea:	4619      	mov	r1, r3
 80006ec:	4813      	ldr	r0, [pc, #76]	; (800073c <main+0xc8>)
 80006ee:	f000 fab7 	bl	8000c60 <NUfsr_UART_Transmit>
	  }
	  	  //HAL_UART_Transmit(&huart1, (uint8_t*)&return_Data, 1, HAL_MAX_DELAY);
	  HAL_GPIO_TogglePin(GPIOB,LED1_Pin);
 80006f2:	f44f 7180 	mov.w	r1, #256	; 0x100
 80006f6:	4812      	ldr	r0, [pc, #72]	; (8000740 <main+0xcc>)
 80006f8:	f001 f8fc 	bl	80018f4 <HAL_GPIO_TogglePin>
	  HAL_GPIO_TogglePin(GPIOB,LED2_Pin);
 80006fc:	f44f 7100 	mov.w	r1, #512	; 0x200
 8000700:	480f      	ldr	r0, [pc, #60]	; (8000740 <main+0xcc>)
 8000702:	f001 f8f7 	bl	80018f4 <HAL_GPIO_TogglePin>
	  HAL_GPIO_WritePin(MPU_NSS_GPIO_Port, MPU_NSS_Pin, GPIO_PIN_RESET);
 8000706:	2200      	movs	r2, #0
 8000708:	2140      	movs	r1, #64	; 0x40
 800070a:	4809      	ldr	r0, [pc, #36]	; (8000730 <main+0xbc>)
 800070c:	f001 f8da 	bl	80018c4 <HAL_GPIO_WritePin>
	  NUfsr_IMU_TransmitReceive(WHO_AM_I | IMU_READ, 0x00, (uint8_t*)p_return_data, 1);
 8000710:	2301      	movs	r3, #1
 8000712:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8000714:	2100      	movs	r1, #0
 8000716:	20f5      	movs	r0, #245	; 0xf5
 8000718:	f7ff ff5a 	bl	80005d0 <NUfsr_IMU_TransmitReceive>
	  HAL_GPIO_WritePin(MPU_NSS_GPIO_Port, MPU_NSS_Pin, GPIO_PIN_SET);
 800071c:	2201      	movs	r2, #1
 800071e:	2140      	movs	r1, #64	; 0x40
 8000720:	4803      	ldr	r0, [pc, #12]	; (8000730 <main+0xbc>)
 8000722:	f001 f8cf 	bl	80018c4 <HAL_GPIO_WritePin>
	  HAL_Delay(500);
 8000726:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 800072a:	f000 fb9b 	bl	8000e64 <HAL_Delay>
	  if (huart1_ITh.Tx_State == Tx_FINISHED){
 800072e:	e7c8      	b.n	80006c2 <main+0x4e>
 8000730:	48000800 	.word	0x48000800
 8000734:	20000170 	.word	0x20000170
 8000738:	08005e10 	.word	0x08005e10
 800073c:	20000174 	.word	0x20000174
 8000740:	48000400 	.word	0x48000400

08000744 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None++++++++++++
  */
void SystemClock_Config(void)
{
 8000744:	b580      	push	{r7, lr}
 8000746:	b09a      	sub	sp, #104	; 0x68
 8000748:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800074a:	f107 0340 	add.w	r3, r7, #64	; 0x40
 800074e:	2228      	movs	r2, #40	; 0x28
 8000750:	2100      	movs	r1, #0
 8000752:	4618      	mov	r0, r3
 8000754:	f004 feda 	bl	800550c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000758:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800075c:	2200      	movs	r2, #0
 800075e:	601a      	str	r2, [r3, #0]
 8000760:	605a      	str	r2, [r3, #4]
 8000762:	609a      	str	r2, [r3, #8]
 8000764:	60da      	str	r2, [r3, #12]
 8000766:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000768:	463b      	mov	r3, r7
 800076a:	222c      	movs	r2, #44	; 0x2c
 800076c:	2100      	movs	r1, #0
 800076e:	4618      	mov	r0, r3
 8000770:	f004 fecc 	bl	800550c <memset>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8000774:	2301      	movs	r3, #1
 8000776:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8000778:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 800077c:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV4;
 800077e:	2303      	movs	r3, #3
 8000780:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000782:	2301      	movs	r3, #1
 8000784:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000786:	2302      	movs	r3, #2
 8000788:	65fb      	str	r3, [r7, #92]	; 0x5c
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 800078a:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 800078e:	663b      	str	r3, [r7, #96]	; 0x60
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 8000790:	f44f 13e0 	mov.w	r3, #1835008	; 0x1c0000
 8000794:	667b      	str	r3, [r7, #100]	; 0x64
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000796:	f107 0340 	add.w	r3, r7, #64	; 0x40
 800079a:	4618      	mov	r0, r3
 800079c:	f001 f8c4 	bl	8001928 <HAL_RCC_OscConfig>
 80007a0:	4603      	mov	r3, r0
 80007a2:	2b00      	cmp	r3, #0
 80007a4:	d001      	beq.n	80007aa <SystemClock_Config+0x66>
  {
    Error_Handler();
 80007a6:	f000 f829 	bl	80007fc <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80007aa:	230f      	movs	r3, #15
 80007ac:	62fb      	str	r3, [r7, #44]	; 0x2c
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80007ae:	2302      	movs	r3, #2
 80007b0:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80007b2:	2300      	movs	r3, #0
 80007b4:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 80007b6:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80007ba:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80007bc:	2300      	movs	r3, #0
 80007be:	63fb      	str	r3, [r7, #60]	; 0x3c

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 80007c0:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80007c4:	2102      	movs	r1, #2
 80007c6:	4618      	mov	r0, r3
 80007c8:	f002 f8ec 	bl	80029a4 <HAL_RCC_ClockConfig>
 80007cc:	4603      	mov	r3, r0
 80007ce:	2b00      	cmp	r3, #0
 80007d0:	d001      	beq.n	80007d6 <SystemClock_Config+0x92>
  {
    Error_Handler();
 80007d2:	f000 f813 	bl	80007fc <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART1|RCC_PERIPHCLK_ADC1;
 80007d6:	2381      	movs	r3, #129	; 0x81
 80007d8:	603b      	str	r3, [r7, #0]
  PeriphClkInit.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK2;
 80007da:	2300      	movs	r3, #0
 80007dc:	60bb      	str	r3, [r7, #8]
  PeriphClkInit.Adc1ClockSelection = RCC_ADC1PCLK2_DIV2;
 80007de:	2300      	movs	r3, #0
 80007e0:	61fb      	str	r3, [r7, #28]

  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80007e2:	463b      	mov	r3, r7
 80007e4:	4618      	mov	r0, r3
 80007e6:	f002 fb15 	bl	8002e14 <HAL_RCCEx_PeriphCLKConfig>
 80007ea:	4603      	mov	r3, r0
 80007ec:	2b00      	cmp	r3, #0
 80007ee:	d001      	beq.n	80007f4 <SystemClock_Config+0xb0>
  {
    Error_Handler();
 80007f0:	f000 f804 	bl	80007fc <Error_Handler>
  }
}
 80007f4:	bf00      	nop
 80007f6:	3768      	adds	r7, #104	; 0x68
 80007f8:	46bd      	mov	sp, r7
 80007fa:	bd80      	pop	{r7, pc}

080007fc <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80007fc:	b480      	push	{r7}
 80007fe:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000800:	b672      	cpsid	i
}
 8000802:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000804:	e7fe      	b.n	8000804 <Error_Handler+0x8>
	...

08000808 <MX_SPI1_Init>:

SPI_HandleTypeDef hspi1;

/* SPI1 init function */
void MX_SPI1_Init(void)
{
 8000808:	b580      	push	{r7, lr}
 800080a:	af00      	add	r7, sp, #0
  /* USER CODE END SPI1_Init 0 */

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  hspi1.Instance = SPI1;
 800080c:	4b1b      	ldr	r3, [pc, #108]	; (800087c <MX_SPI1_Init+0x74>)
 800080e:	4a1c      	ldr	r2, [pc, #112]	; (8000880 <MX_SPI1_Init+0x78>)
 8000810:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 8000812:	4b1a      	ldr	r3, [pc, #104]	; (800087c <MX_SPI1_Init+0x74>)
 8000814:	f44f 7282 	mov.w	r2, #260	; 0x104
 8000818:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 800081a:	4b18      	ldr	r3, [pc, #96]	; (800087c <MX_SPI1_Init+0x74>)
 800081c:	2200      	movs	r2, #0
 800081e:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_16BIT;
 8000820:	4b16      	ldr	r3, [pc, #88]	; (800087c <MX_SPI1_Init+0x74>)
 8000822:	f44f 6270 	mov.w	r2, #3840	; 0xf00
 8000826:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_HIGH;
 8000828:	4b14      	ldr	r3, [pc, #80]	; (800087c <MX_SPI1_Init+0x74>)
 800082a:	2202      	movs	r2, #2
 800082c:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_2EDGE;
 800082e:	4b13      	ldr	r3, [pc, #76]	; (800087c <MX_SPI1_Init+0x74>)
 8000830:	2201      	movs	r2, #1
 8000832:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_HARD_OUTPUT;
 8000834:	4b11      	ldr	r3, [pc, #68]	; (800087c <MX_SPI1_Init+0x74>)
 8000836:	f44f 2280 	mov.w	r2, #262144	; 0x40000
 800083a:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_256;
 800083c:	4b0f      	ldr	r3, [pc, #60]	; (800087c <MX_SPI1_Init+0x74>)
 800083e:	2238      	movs	r2, #56	; 0x38
 8000840:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8000842:	4b0e      	ldr	r3, [pc, #56]	; (800087c <MX_SPI1_Init+0x74>)
 8000844:	2200      	movs	r2, #0
 8000846:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8000848:	4b0c      	ldr	r3, [pc, #48]	; (800087c <MX_SPI1_Init+0x74>)
 800084a:	2200      	movs	r2, #0
 800084c:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800084e:	4b0b      	ldr	r3, [pc, #44]	; (800087c <MX_SPI1_Init+0x74>)
 8000850:	2200      	movs	r2, #0
 8000852:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 7;
 8000854:	4b09      	ldr	r3, [pc, #36]	; (800087c <MX_SPI1_Init+0x74>)
 8000856:	2207      	movs	r2, #7
 8000858:	62da      	str	r2, [r3, #44]	; 0x2c
  hspi1.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 800085a:	4b08      	ldr	r3, [pc, #32]	; (800087c <MX_SPI1_Init+0x74>)
 800085c:	2200      	movs	r2, #0
 800085e:	631a      	str	r2, [r3, #48]	; 0x30
  hspi1.Init.NSSPMode = SPI_NSS_PULSE_DISABLE;
 8000860:	4b06      	ldr	r3, [pc, #24]	; (800087c <MX_SPI1_Init+0x74>)
 8000862:	2200      	movs	r2, #0
 8000864:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8000866:	4805      	ldr	r0, [pc, #20]	; (800087c <MX_SPI1_Init+0x74>)
 8000868:	f002 fc48 	bl	80030fc <HAL_SPI_Init>
 800086c:	4603      	mov	r3, r0
 800086e:	2b00      	cmp	r3, #0
 8000870:	d001      	beq.n	8000876 <MX_SPI1_Init+0x6e>
  {
    Error_Handler();
 8000872:	f7ff ffc3 	bl	80007fc <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 8000876:	bf00      	nop
 8000878:	bd80      	pop	{r7, pc}
 800087a:	bf00      	nop
 800087c:	200000bc 	.word	0x200000bc
 8000880:	40013000 	.word	0x40013000

08000884 <HAL_SPI_MspInit>:

void HAL_SPI_MspInit(SPI_HandleTypeDef* spiHandle)
{
 8000884:	b580      	push	{r7, lr}
 8000886:	b08a      	sub	sp, #40	; 0x28
 8000888:	af00      	add	r7, sp, #0
 800088a:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800088c:	f107 0314 	add.w	r3, r7, #20
 8000890:	2200      	movs	r2, #0
 8000892:	601a      	str	r2, [r3, #0]
 8000894:	605a      	str	r2, [r3, #4]
 8000896:	609a      	str	r2, [r3, #8]
 8000898:	60da      	str	r2, [r3, #12]
 800089a:	611a      	str	r2, [r3, #16]
  if(spiHandle->Instance==SPI1)
 800089c:	687b      	ldr	r3, [r7, #4]
 800089e:	681b      	ldr	r3, [r3, #0]
 80008a0:	4a17      	ldr	r2, [pc, #92]	; (8000900 <HAL_SPI_MspInit+0x7c>)
 80008a2:	4293      	cmp	r3, r2
 80008a4:	d128      	bne.n	80008f8 <HAL_SPI_MspInit+0x74>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* SPI1 clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 80008a6:	4b17      	ldr	r3, [pc, #92]	; (8000904 <HAL_SPI_MspInit+0x80>)
 80008a8:	699b      	ldr	r3, [r3, #24]
 80008aa:	4a16      	ldr	r2, [pc, #88]	; (8000904 <HAL_SPI_MspInit+0x80>)
 80008ac:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 80008b0:	6193      	str	r3, [r2, #24]
 80008b2:	4b14      	ldr	r3, [pc, #80]	; (8000904 <HAL_SPI_MspInit+0x80>)
 80008b4:	699b      	ldr	r3, [r3, #24]
 80008b6:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80008ba:	613b      	str	r3, [r7, #16]
 80008bc:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 80008be:	4b11      	ldr	r3, [pc, #68]	; (8000904 <HAL_SPI_MspInit+0x80>)
 80008c0:	695b      	ldr	r3, [r3, #20]
 80008c2:	4a10      	ldr	r2, [pc, #64]	; (8000904 <HAL_SPI_MspInit+0x80>)
 80008c4:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 80008c8:	6153      	str	r3, [r2, #20]
 80008ca:	4b0e      	ldr	r3, [pc, #56]	; (8000904 <HAL_SPI_MspInit+0x80>)
 80008cc:	695b      	ldr	r3, [r3, #20]
 80008ce:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80008d2:	60fb      	str	r3, [r7, #12]
 80008d4:	68fb      	ldr	r3, [r7, #12]
    PC6     ------> SPI1_NSS
    PC7     ------> SPI1_SCK
    PC8     ------> SPI1_MISO
    PC9     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = MPU_NSS_Pin|MPU_CLK_Pin|MPU_MISO_Pin|MPU_MOSI_Pin;
 80008d6:	f44f 7370 	mov.w	r3, #960	; 0x3c0
 80008da:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80008dc:	2302      	movs	r3, #2
 80008de:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80008e0:	2300      	movs	r3, #0
 80008e2:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80008e4:	2303      	movs	r3, #3
 80008e6:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 80008e8:	2305      	movs	r3, #5
 80008ea:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80008ec:	f107 0314 	add.w	r3, r7, #20
 80008f0:	4619      	mov	r1, r3
 80008f2:	4805      	ldr	r0, [pc, #20]	; (8000908 <HAL_SPI_MspInit+0x84>)
 80008f4:	f000 fe6c 	bl	80015d0 <HAL_GPIO_Init>

  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }
}
 80008f8:	bf00      	nop
 80008fa:	3728      	adds	r7, #40	; 0x28
 80008fc:	46bd      	mov	sp, r7
 80008fe:	bd80      	pop	{r7, pc}
 8000900:	40013000 	.word	0x40013000
 8000904:	40021000 	.word	0x40021000
 8000908:	48000800 	.word	0x48000800

0800090c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 800090c:	b480      	push	{r7}
 800090e:	b083      	sub	sp, #12
 8000910:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000912:	4b0f      	ldr	r3, [pc, #60]	; (8000950 <HAL_MspInit+0x44>)
 8000914:	699b      	ldr	r3, [r3, #24]
 8000916:	4a0e      	ldr	r2, [pc, #56]	; (8000950 <HAL_MspInit+0x44>)
 8000918:	f043 0301 	orr.w	r3, r3, #1
 800091c:	6193      	str	r3, [r2, #24]
 800091e:	4b0c      	ldr	r3, [pc, #48]	; (8000950 <HAL_MspInit+0x44>)
 8000920:	699b      	ldr	r3, [r3, #24]
 8000922:	f003 0301 	and.w	r3, r3, #1
 8000926:	607b      	str	r3, [r7, #4]
 8000928:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800092a:	4b09      	ldr	r3, [pc, #36]	; (8000950 <HAL_MspInit+0x44>)
 800092c:	69db      	ldr	r3, [r3, #28]
 800092e:	4a08      	ldr	r2, [pc, #32]	; (8000950 <HAL_MspInit+0x44>)
 8000930:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000934:	61d3      	str	r3, [r2, #28]
 8000936:	4b06      	ldr	r3, [pc, #24]	; (8000950 <HAL_MspInit+0x44>)
 8000938:	69db      	ldr	r3, [r3, #28]
 800093a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800093e:	603b      	str	r3, [r7, #0]
 8000940:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000942:	bf00      	nop
 8000944:	370c      	adds	r7, #12
 8000946:	46bd      	mov	sp, r7
 8000948:	f85d 7b04 	ldr.w	r7, [sp], #4
 800094c:	4770      	bx	lr
 800094e:	bf00      	nop
 8000950:	40021000 	.word	0x40021000

08000954 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000954:	b480      	push	{r7}
 8000956:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000958:	e7fe      	b.n	8000958 <NMI_Handler+0x4>

0800095a <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800095a:	b480      	push	{r7}
 800095c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800095e:	e7fe      	b.n	800095e <HardFault_Handler+0x4>

08000960 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000960:	b480      	push	{r7}
 8000962:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000964:	e7fe      	b.n	8000964 <MemManage_Handler+0x4>

08000966 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000966:	b480      	push	{r7}
 8000968:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800096a:	e7fe      	b.n	800096a <BusFault_Handler+0x4>

0800096c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 800096c:	b480      	push	{r7}
 800096e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000970:	e7fe      	b.n	8000970 <UsageFault_Handler+0x4>

08000972 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000972:	b480      	push	{r7}
 8000974:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000976:	bf00      	nop
 8000978:	46bd      	mov	sp, r7
 800097a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800097e:	4770      	bx	lr

08000980 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000980:	b480      	push	{r7}
 8000982:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000984:	bf00      	nop
 8000986:	46bd      	mov	sp, r7
 8000988:	f85d 7b04 	ldr.w	r7, [sp], #4
 800098c:	4770      	bx	lr

0800098e <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800098e:	b480      	push	{r7}
 8000990:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000992:	bf00      	nop
 8000994:	46bd      	mov	sp, r7
 8000996:	f85d 7b04 	ldr.w	r7, [sp], #4
 800099a:	4770      	bx	lr

0800099c <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 800099c:	b580      	push	{r7, lr}
 800099e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80009a0:	f000 fa40 	bl	8000e24 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80009a4:	bf00      	nop
 80009a6:	bd80      	pop	{r7, pc}

080009a8 <TIM3_IRQHandler>:

/**
  * @brief This function handles TIM3 global interrupt.
  */
void TIM3_IRQHandler(void)
{
 80009a8:	b580      	push	{r7, lr}
 80009aa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM3_IRQn 0 */

  /* USER CODE END TIM3_IRQn 0 */
  HAL_TIM_IRQHandler(&htim3);
 80009ac:	4802      	ldr	r0, [pc, #8]	; (80009b8 <TIM3_IRQHandler+0x10>)
 80009ae:	f003 f984 	bl	8003cba <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM3_IRQn 1 */

  /* USER CODE END TIM3_IRQn 1 */
}
 80009b2:	bf00      	nop
 80009b4:	bd80      	pop	{r7, pc}
 80009b6:	bf00      	nop
 80009b8:	20000124 	.word	0x20000124

080009bc <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt / USART1 wake-up interrupt through EXTI line 25.
  */
void USART1_IRQHandler(void)
{
 80009bc:	b580      	push	{r7, lr}
 80009be:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 80009c0:	4802      	ldr	r0, [pc, #8]	; (80009cc <USART1_IRQHandler+0x10>)
 80009c2:	f003 fdf3 	bl	80045ac <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 80009c6:	bf00      	nop
 80009c8:	bd80      	pop	{r7, pc}
 80009ca:	bf00      	nop
 80009cc:	20000174 	.word	0x20000174

080009d0 <_sbrk>:
 80009d0:	b580      	push	{r7, lr}
 80009d2:	b086      	sub	sp, #24
 80009d4:	af00      	add	r7, sp, #0
 80009d6:	6078      	str	r0, [r7, #4]
 80009d8:	4a14      	ldr	r2, [pc, #80]	; (8000a2c <_sbrk+0x5c>)
 80009da:	4b15      	ldr	r3, [pc, #84]	; (8000a30 <_sbrk+0x60>)
 80009dc:	1ad3      	subs	r3, r2, r3
 80009de:	617b      	str	r3, [r7, #20]
 80009e0:	697b      	ldr	r3, [r7, #20]
 80009e2:	613b      	str	r3, [r7, #16]
 80009e4:	4b13      	ldr	r3, [pc, #76]	; (8000a34 <_sbrk+0x64>)
 80009e6:	681b      	ldr	r3, [r3, #0]
 80009e8:	2b00      	cmp	r3, #0
 80009ea:	d102      	bne.n	80009f2 <_sbrk+0x22>
 80009ec:	4b11      	ldr	r3, [pc, #68]	; (8000a34 <_sbrk+0x64>)
 80009ee:	4a12      	ldr	r2, [pc, #72]	; (8000a38 <_sbrk+0x68>)
 80009f0:	601a      	str	r2, [r3, #0]
 80009f2:	4b10      	ldr	r3, [pc, #64]	; (8000a34 <_sbrk+0x64>)
 80009f4:	681a      	ldr	r2, [r3, #0]
 80009f6:	687b      	ldr	r3, [r7, #4]
 80009f8:	4413      	add	r3, r2
 80009fa:	693a      	ldr	r2, [r7, #16]
 80009fc:	429a      	cmp	r2, r3
 80009fe:	d207      	bcs.n	8000a10 <_sbrk+0x40>
 8000a00:	f004 fd5a 	bl	80054b8 <__errno>
 8000a04:	4603      	mov	r3, r0
 8000a06:	220c      	movs	r2, #12
 8000a08:	601a      	str	r2, [r3, #0]
 8000a0a:	f04f 33ff 	mov.w	r3, #4294967295
 8000a0e:	e009      	b.n	8000a24 <_sbrk+0x54>
 8000a10:	4b08      	ldr	r3, [pc, #32]	; (8000a34 <_sbrk+0x64>)
 8000a12:	681b      	ldr	r3, [r3, #0]
 8000a14:	60fb      	str	r3, [r7, #12]
 8000a16:	4b07      	ldr	r3, [pc, #28]	; (8000a34 <_sbrk+0x64>)
 8000a18:	681a      	ldr	r2, [r3, #0]
 8000a1a:	687b      	ldr	r3, [r7, #4]
 8000a1c:	4413      	add	r3, r2
 8000a1e:	4a05      	ldr	r2, [pc, #20]	; (8000a34 <_sbrk+0x64>)
 8000a20:	6013      	str	r3, [r2, #0]
 8000a22:	68fb      	ldr	r3, [r7, #12]
 8000a24:	4618      	mov	r0, r3
 8000a26:	3718      	adds	r7, #24
 8000a28:	46bd      	mov	sp, r7
 8000a2a:	bd80      	pop	{r7, pc}
 8000a2c:	20008000 	.word	0x20008000
 8000a30:	00000400 	.word	0x00000400
 8000a34:	20000120 	.word	0x20000120
 8000a38:	20000210 	.word	0x20000210

08000a3c <SystemInit>:
  * @brief  Setup the microcontroller system
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000a3c:	b480      	push	{r7}
 8000a3e:	af00      	add	r7, sp, #0
/* FPU settings --------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000a40:	4b06      	ldr	r3, [pc, #24]	; (8000a5c <SystemInit+0x20>)
 8000a42:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000a46:	4a05      	ldr	r2, [pc, #20]	; (8000a5c <SystemInit+0x20>)
 8000a48:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000a4c:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000a50:	bf00      	nop
 8000a52:	46bd      	mov	sp, r7
 8000a54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a58:	4770      	bx	lr
 8000a5a:	bf00      	nop
 8000a5c:	e000ed00 	.word	0xe000ed00

08000a60 <MX_TIM3_Init>:

TIM_HandleTypeDef htim3;

/* TIM3 init function */
void MX_TIM3_Init(void)
{
 8000a60:	b580      	push	{r7, lr}
 8000a62:	b086      	sub	sp, #24
 8000a64:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000a66:	f107 0308 	add.w	r3, r7, #8
 8000a6a:	2200      	movs	r2, #0
 8000a6c:	601a      	str	r2, [r3, #0]
 8000a6e:	605a      	str	r2, [r3, #4]
 8000a70:	609a      	str	r2, [r3, #8]
 8000a72:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000a74:	463b      	mov	r3, r7
 8000a76:	2200      	movs	r2, #0
 8000a78:	601a      	str	r2, [r3, #0]
 8000a7a:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 8000a7c:	4b1d      	ldr	r3, [pc, #116]	; (8000af4 <MX_TIM3_Init+0x94>)
 8000a7e:	4a1e      	ldr	r2, [pc, #120]	; (8000af8 <MX_TIM3_Init+0x98>)
 8000a80:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 1112;
 8000a82:	4b1c      	ldr	r3, [pc, #112]	; (8000af4 <MX_TIM3_Init+0x94>)
 8000a84:	f44f 628b 	mov.w	r2, #1112	; 0x458
 8000a88:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000a8a:	4b1a      	ldr	r3, [pc, #104]	; (8000af4 <MX_TIM3_Init+0x94>)
 8000a8c:	2200      	movs	r2, #0
 8000a8e:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 64689;
 8000a90:	4b18      	ldr	r3, [pc, #96]	; (8000af4 <MX_TIM3_Init+0x94>)
 8000a92:	f64f 42b1 	movw	r2, #64689	; 0xfcb1
 8000a96:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000a98:	4b16      	ldr	r3, [pc, #88]	; (8000af4 <MX_TIM3_Init+0x94>)
 8000a9a:	2200      	movs	r2, #0
 8000a9c:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000a9e:	4b15      	ldr	r3, [pc, #84]	; (8000af4 <MX_TIM3_Init+0x94>)
 8000aa0:	2200      	movs	r2, #0
 8000aa2:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 8000aa4:	4813      	ldr	r0, [pc, #76]	; (8000af4 <MX_TIM3_Init+0x94>)
 8000aa6:	f003 f8b9 	bl	8003c1c <HAL_TIM_Base_Init>
 8000aaa:	4603      	mov	r3, r0
 8000aac:	2b00      	cmp	r3, #0
 8000aae:	d001      	beq.n	8000ab4 <MX_TIM3_Init+0x54>
  {
    Error_Handler();
 8000ab0:	f7ff fea4 	bl	80007fc <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000ab4:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000ab8:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 8000aba:	f107 0308 	add.w	r3, r7, #8
 8000abe:	4619      	mov	r1, r3
 8000ac0:	480c      	ldr	r0, [pc, #48]	; (8000af4 <MX_TIM3_Init+0x94>)
 8000ac2:	f003 fa02 	bl	8003eca <HAL_TIM_ConfigClockSource>
 8000ac6:	4603      	mov	r3, r0
 8000ac8:	2b00      	cmp	r3, #0
 8000aca:	d001      	beq.n	8000ad0 <MX_TIM3_Init+0x70>
  {
    Error_Handler();
 8000acc:	f7ff fe96 	bl	80007fc <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000ad0:	2300      	movs	r3, #0
 8000ad2:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000ad4:	2300      	movs	r3, #0
 8000ad6:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8000ad8:	463b      	mov	r3, r7
 8000ada:	4619      	mov	r1, r3
 8000adc:	4805      	ldr	r0, [pc, #20]	; (8000af4 <MX_TIM3_Init+0x94>)
 8000ade:	f003 fc21 	bl	8004324 <HAL_TIMEx_MasterConfigSynchronization>
 8000ae2:	4603      	mov	r3, r0
 8000ae4:	2b00      	cmp	r3, #0
 8000ae6:	d001      	beq.n	8000aec <MX_TIM3_Init+0x8c>
  {
    Error_Handler();
 8000ae8:	f7ff fe88 	bl	80007fc <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */

}
 8000aec:	bf00      	nop
 8000aee:	3718      	adds	r7, #24
 8000af0:	46bd      	mov	sp, r7
 8000af2:	bd80      	pop	{r7, pc}
 8000af4:	20000124 	.word	0x20000124
 8000af8:	40000400 	.word	0x40000400

08000afc <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 8000afc:	b580      	push	{r7, lr}
 8000afe:	b084      	sub	sp, #16
 8000b00:	af00      	add	r7, sp, #0
 8000b02:	6078      	str	r0, [r7, #4]

  if(tim_baseHandle->Instance==TIM3)
 8000b04:	687b      	ldr	r3, [r7, #4]
 8000b06:	681b      	ldr	r3, [r3, #0]
 8000b08:	4a0d      	ldr	r2, [pc, #52]	; (8000b40 <HAL_TIM_Base_MspInit+0x44>)
 8000b0a:	4293      	cmp	r3, r2
 8000b0c:	d113      	bne.n	8000b36 <HAL_TIM_Base_MspInit+0x3a>
  {
  /* USER CODE BEGIN TIM3_MspInit 0 */

  /* USER CODE END TIM3_MspInit 0 */
    /* TIM3 clock enable */
    __HAL_RCC_TIM3_CLK_ENABLE();
 8000b0e:	4b0d      	ldr	r3, [pc, #52]	; (8000b44 <HAL_TIM_Base_MspInit+0x48>)
 8000b10:	69db      	ldr	r3, [r3, #28]
 8000b12:	4a0c      	ldr	r2, [pc, #48]	; (8000b44 <HAL_TIM_Base_MspInit+0x48>)
 8000b14:	f043 0302 	orr.w	r3, r3, #2
 8000b18:	61d3      	str	r3, [r2, #28]
 8000b1a:	4b0a      	ldr	r3, [pc, #40]	; (8000b44 <HAL_TIM_Base_MspInit+0x48>)
 8000b1c:	69db      	ldr	r3, [r3, #28]
 8000b1e:	f003 0302 	and.w	r3, r3, #2
 8000b22:	60fb      	str	r3, [r7, #12]
 8000b24:	68fb      	ldr	r3, [r7, #12]

    /* TIM3 interrupt Init */
    HAL_NVIC_SetPriority(TIM3_IRQn, 0, 0);
 8000b26:	2200      	movs	r2, #0
 8000b28:	2100      	movs	r1, #0
 8000b2a:	201d      	movs	r0, #29
 8000b2c:	f000 fca3 	bl	8001476 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM3_IRQn);
 8000b30:	201d      	movs	r0, #29
 8000b32:	f000 fcbc 	bl	80014ae <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM3_MspInit 1 */

  /* USER CODE END TIM3_MspInit 1 */
  }
}
 8000b36:	bf00      	nop
 8000b38:	3710      	adds	r7, #16
 8000b3a:	46bd      	mov	sp, r7
 8000b3c:	bd80      	pop	{r7, pc}
 8000b3e:	bf00      	nop
 8000b40:	40000400 	.word	0x40000400
 8000b44:	40021000 	.word	0x40021000

08000b48 <MX_USART1_UART_Init>:
UART_HandleTypeDef huart1;

/* USART1 init function */

void MX_USART1_UART_Init(void)
{
 8000b48:	b580      	push	{r7, lr}
 8000b4a:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8000b4c:	4b14      	ldr	r3, [pc, #80]	; (8000ba0 <MX_USART1_UART_Init+0x58>)
 8000b4e:	4a15      	ldr	r2, [pc, #84]	; (8000ba4 <MX_USART1_UART_Init+0x5c>)
 8000b50:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 38400;
 8000b52:	4b13      	ldr	r3, [pc, #76]	; (8000ba0 <MX_USART1_UART_Init+0x58>)
 8000b54:	f44f 4216 	mov.w	r2, #38400	; 0x9600
 8000b58:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8000b5a:	4b11      	ldr	r3, [pc, #68]	; (8000ba0 <MX_USART1_UART_Init+0x58>)
 8000b5c:	2200      	movs	r2, #0
 8000b5e:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8000b60:	4b0f      	ldr	r3, [pc, #60]	; (8000ba0 <MX_USART1_UART_Init+0x58>)
 8000b62:	2200      	movs	r2, #0
 8000b64:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8000b66:	4b0e      	ldr	r3, [pc, #56]	; (8000ba0 <MX_USART1_UART_Init+0x58>)
 8000b68:	2200      	movs	r2, #0
 8000b6a:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8000b6c:	4b0c      	ldr	r3, [pc, #48]	; (8000ba0 <MX_USART1_UART_Init+0x58>)
 8000b6e:	220c      	movs	r2, #12
 8000b70:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000b72:	4b0b      	ldr	r3, [pc, #44]	; (8000ba0 <MX_USART1_UART_Init+0x58>)
 8000b74:	2200      	movs	r2, #0
 8000b76:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8000b78:	4b09      	ldr	r3, [pc, #36]	; (8000ba0 <MX_USART1_UART_Init+0x58>)
 8000b7a:	2200      	movs	r2, #0
 8000b7c:	61da      	str	r2, [r3, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000b7e:	4b08      	ldr	r3, [pc, #32]	; (8000ba0 <MX_USART1_UART_Init+0x58>)
 8000b80:	2200      	movs	r2, #0
 8000b82:	621a      	str	r2, [r3, #32]
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000b84:	4b06      	ldr	r3, [pc, #24]	; (8000ba0 <MX_USART1_UART_Init+0x58>)
 8000b86:	2200      	movs	r2, #0
 8000b88:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8000b8a:	4805      	ldr	r0, [pc, #20]	; (8000ba0 <MX_USART1_UART_Init+0x58>)
 8000b8c:	f003 fc52 	bl	8004434 <HAL_UART_Init>
 8000b90:	4603      	mov	r3, r0
 8000b92:	2b00      	cmp	r3, #0
 8000b94:	d001      	beq.n	8000b9a <MX_USART1_UART_Init+0x52>
  {
    Error_Handler();
 8000b96:	f7ff fe31 	bl	80007fc <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8000b9a:	bf00      	nop
 8000b9c:	bd80      	pop	{r7, pc}
 8000b9e:	bf00      	nop
 8000ba0:	20000174 	.word	0x20000174
 8000ba4:	40013800 	.word	0x40013800

08000ba8 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8000ba8:	b580      	push	{r7, lr}
 8000baa:	b08a      	sub	sp, #40	; 0x28
 8000bac:	af00      	add	r7, sp, #0
 8000bae:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000bb0:	f107 0314 	add.w	r3, r7, #20
 8000bb4:	2200      	movs	r2, #0
 8000bb6:	601a      	str	r2, [r3, #0]
 8000bb8:	605a      	str	r2, [r3, #4]
 8000bba:	609a      	str	r2, [r3, #8]
 8000bbc:	60da      	str	r2, [r3, #12]
 8000bbe:	611a      	str	r2, [r3, #16]
  if(uartHandle->Instance==USART1)
 8000bc0:	687b      	ldr	r3, [r7, #4]
 8000bc2:	681b      	ldr	r3, [r3, #0]
 8000bc4:	4a1c      	ldr	r2, [pc, #112]	; (8000c38 <HAL_UART_MspInit+0x90>)
 8000bc6:	4293      	cmp	r3, r2
 8000bc8:	d131      	bne.n	8000c2e <HAL_UART_MspInit+0x86>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* USART1 clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8000bca:	4b1c      	ldr	r3, [pc, #112]	; (8000c3c <HAL_UART_MspInit+0x94>)
 8000bcc:	699b      	ldr	r3, [r3, #24]
 8000bce:	4a1b      	ldr	r2, [pc, #108]	; (8000c3c <HAL_UART_MspInit+0x94>)
 8000bd0:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000bd4:	6193      	str	r3, [r2, #24]
 8000bd6:	4b19      	ldr	r3, [pc, #100]	; (8000c3c <HAL_UART_MspInit+0x94>)
 8000bd8:	699b      	ldr	r3, [r3, #24]
 8000bda:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000bde:	613b      	str	r3, [r7, #16]
 8000be0:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000be2:	4b16      	ldr	r3, [pc, #88]	; (8000c3c <HAL_UART_MspInit+0x94>)
 8000be4:	695b      	ldr	r3, [r3, #20]
 8000be6:	4a15      	ldr	r2, [pc, #84]	; (8000c3c <HAL_UART_MspInit+0x94>)
 8000be8:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000bec:	6153      	str	r3, [r2, #20]
 8000bee:	4b13      	ldr	r3, [pc, #76]	; (8000c3c <HAL_UART_MspInit+0x94>)
 8000bf0:	695b      	ldr	r3, [r3, #20]
 8000bf2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000bf6:	60fb      	str	r3, [r7, #12]
 8000bf8:	68fb      	ldr	r3, [r7, #12]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = DXL_P_Pin|DXL_N_Pin;
 8000bfa:	f44f 63c0 	mov.w	r3, #1536	; 0x600
 8000bfe:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000c00:	2302      	movs	r3, #2
 8000c02:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c04:	2300      	movs	r3, #0
 8000c06:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000c08:	2303      	movs	r3, #3
 8000c0a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8000c0c:	2307      	movs	r3, #7
 8000c0e:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000c10:	f107 0314 	add.w	r3, r7, #20
 8000c14:	4619      	mov	r1, r3
 8000c16:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000c1a:	f000 fcd9 	bl	80015d0 <HAL_GPIO_Init>

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 0, 0);
 8000c1e:	2200      	movs	r2, #0
 8000c20:	2100      	movs	r1, #0
 8000c22:	2025      	movs	r0, #37	; 0x25
 8000c24:	f000 fc27 	bl	8001476 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 8000c28:	2025      	movs	r0, #37	; 0x25
 8000c2a:	f000 fc40 	bl	80014ae <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }
}
 8000c2e:	bf00      	nop
 8000c30:	3728      	adds	r7, #40	; 0x28
 8000c32:	46bd      	mov	sp, r7
 8000c34:	bd80      	pop	{r7, pc}
 8000c36:	bf00      	nop
 8000c38:	40013800 	.word	0x40013800
 8000c3c:	40021000 	.word	0x40021000

08000c40 <HAL_UART_TxCpltCallback>:
}

/* USER CODE BEGIN 1 */
/* ISR */
void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8000c40:	b480      	push	{r7}
 8000c42:	b083      	sub	sp, #12
 8000c44:	af00      	add	r7, sp, #0
 8000c46:	6078      	str	r0, [r7, #4]
	/* Tx Complete Signal */
	huart1_ITh.Tx_State = Tx_FINISHED;
 8000c48:	4b04      	ldr	r3, [pc, #16]	; (8000c5c <HAL_UART_TxCpltCallback+0x1c>)
 8000c4a:	2200      	movs	r2, #0
 8000c4c:	701a      	strb	r2, [r3, #0]
}
 8000c4e:	bf00      	nop
 8000c50:	370c      	adds	r7, #12
 8000c52:	46bd      	mov	sp, r7
 8000c54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c58:	4770      	bx	lr
 8000c5a:	bf00      	nop
 8000c5c:	20000170 	.word	0x20000170

08000c60 <NUfsr_UART_Transmit>:
	huart1_ITh.Rx_State = Rx_FINISHED;
}

/* Tx and Rx operations */
HAL_StatusTypeDef NUfsr_UART_Transmit(UART_HandleTypeDef *huart, void *pData, uint16_t Byte_Size)
{
 8000c60:	b580      	push	{r7, lr}
 8000c62:	b086      	sub	sp, #24
 8000c64:	af00      	add	r7, sp, #0
 8000c66:	60f8      	str	r0, [r7, #12]
 8000c68:	60b9      	str	r1, [r7, #8]
 8000c6a:	4613      	mov	r3, r2
 8000c6c:	80fb      	strh	r3, [r7, #6]
	// Error checking
	if((huart == NULL) || (pData == NULL) || (Byte_Size == 0U))
 8000c6e:	68fb      	ldr	r3, [r7, #12]
 8000c70:	2b00      	cmp	r3, #0
 8000c72:	d005      	beq.n	8000c80 <NUfsr_UART_Transmit+0x20>
 8000c74:	68bb      	ldr	r3, [r7, #8]
 8000c76:	2b00      	cmp	r3, #0
 8000c78:	d002      	beq.n	8000c80 <NUfsr_UART_Transmit+0x20>
 8000c7a:	88fb      	ldrh	r3, [r7, #6]
 8000c7c:	2b00      	cmp	r3, #0
 8000c7e:	d101      	bne.n	8000c84 <NUfsr_UART_Transmit+0x24>
		return HAL_ERROR;
 8000c80:	2301      	movs	r3, #1
 8000c82:	e01c      	b.n	8000cbe <NUfsr_UART_Transmit+0x5e>

	HAL_StatusTypeDef state;

	// Wait for Rx poll
	if((state = NUfsr_UART_Poll_Rx(huart, HAL_MAX_DELAY)) != HAL_OK)
 8000c84:	f04f 31ff 	mov.w	r1, #4294967295
 8000c88:	68f8      	ldr	r0, [r7, #12]
 8000c8a:	f000 f81f 	bl	8000ccc <NUfsr_UART_Poll_Rx>
 8000c8e:	4603      	mov	r3, r0
 8000c90:	75fb      	strb	r3, [r7, #23]
 8000c92:	7dfb      	ldrb	r3, [r7, #23]
 8000c94:	2b00      	cmp	r3, #0
 8000c96:	d001      	beq.n	8000c9c <NUfsr_UART_Transmit+0x3c>
		return state;
 8000c98:	7dfb      	ldrb	r3, [r7, #23]
 8000c9a:	e010      	b.n	8000cbe <NUfsr_UART_Transmit+0x5e>

	// Update Tx state
	huart1_ITh.Tx_State = Tx_NOT_FINISHED;
 8000c9c:	4b0a      	ldr	r3, [pc, #40]	; (8000cc8 <NUfsr_UART_Transmit+0x68>)
 8000c9e:	2201      	movs	r2, #1
 8000ca0:	701a      	strb	r2, [r3, #0]

	// Set DXL_DIR
	HAL_GPIO_WritePin(GPIOA, GPIO_PIN_8, Tx);
 8000ca2:	2201      	movs	r2, #1
 8000ca4:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000ca8:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000cac:	f000 fe0a 	bl	80018c4 <HAL_GPIO_WritePin>

	// Begin transmission
	return HAL_UART_Transmit_IT(huart, (uint8_t*)pData, Byte_Size);
 8000cb0:	88fb      	ldrh	r3, [r7, #6]
 8000cb2:	461a      	mov	r2, r3
 8000cb4:	68b9      	ldr	r1, [r7, #8]
 8000cb6:	68f8      	ldr	r0, [r7, #12]
 8000cb8:	f003 fc0a 	bl	80044d0 <HAL_UART_Transmit_IT>
 8000cbc:	4603      	mov	r3, r0

}
 8000cbe:	4618      	mov	r0, r3
 8000cc0:	3718      	adds	r7, #24
 8000cc2:	46bd      	mov	sp, r7
 8000cc4:	bd80      	pop	{r7, pc}
 8000cc6:	bf00      	nop
 8000cc8:	20000170 	.word	0x20000170

08000ccc <NUfsr_UART_Poll_Rx>:

	return HAL_OK;
}

HAL_StatusTypeDef NUfsr_UART_Poll_Rx(UART_HandleTypeDef *huart, uint32_t Timeout)
{
 8000ccc:	b580      	push	{r7, lr}
 8000cce:	b084      	sub	sp, #16
 8000cd0:	af00      	add	r7, sp, #0
 8000cd2:	6078      	str	r0, [r7, #4]
 8000cd4:	6039      	str	r1, [r7, #0]
	// Error checking
	if(huart == NULL)
 8000cd6:	687b      	ldr	r3, [r7, #4]
 8000cd8:	2b00      	cmp	r3, #0
 8000cda:	d101      	bne.n	8000ce0 <NUfsr_UART_Poll_Rx+0x14>
		return HAL_ERROR;
 8000cdc:	2301      	movs	r3, #1
 8000cde:	e018      	b.n	8000d12 <NUfsr_UART_Poll_Rx+0x46>

	uint32_t tickstart = HAL_GetTick();
 8000ce0:	f000 f8b4 	bl	8000e4c <HAL_GetTick>
 8000ce4:	60f8      	str	r0, [r7, #12]

	// Begin Polling
	while(!NUfsr_UART_Rx_StatusComplete(huart))
 8000ce6:	e00d      	b.n	8000d04 <NUfsr_UART_Poll_Rx+0x38>
	{
		if(Timeout != HAL_MAX_DELAY)
 8000ce8:	683b      	ldr	r3, [r7, #0]
 8000cea:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000cee:	d009      	beq.n	8000d04 <NUfsr_UART_Poll_Rx+0x38>
		{
			if(HAL_GetTick() - tickstart > Timeout)
 8000cf0:	f000 f8ac 	bl	8000e4c <HAL_GetTick>
 8000cf4:	4602      	mov	r2, r0
 8000cf6:	68fb      	ldr	r3, [r7, #12]
 8000cf8:	1ad3      	subs	r3, r2, r3
 8000cfa:	683a      	ldr	r2, [r7, #0]
 8000cfc:	429a      	cmp	r2, r3
 8000cfe:	d201      	bcs.n	8000d04 <NUfsr_UART_Poll_Rx+0x38>
			{
				// Handle Error
				return HAL_ERROR;
 8000d00:	2301      	movs	r3, #1
 8000d02:	e006      	b.n	8000d12 <NUfsr_UART_Poll_Rx+0x46>
	while(!NUfsr_UART_Rx_StatusComplete(huart))
 8000d04:	6878      	ldr	r0, [r7, #4]
 8000d06:	f000 f809 	bl	8000d1c <NUfsr_UART_Rx_StatusComplete>
 8000d0a:	4603      	mov	r3, r0
 8000d0c:	2b00      	cmp	r3, #0
 8000d0e:	d0eb      	beq.n	8000ce8 <NUfsr_UART_Poll_Rx+0x1c>
			}
		}
	}

	return HAL_OK;
 8000d10:	2300      	movs	r3, #0
}
 8000d12:	4618      	mov	r0, r3
 8000d14:	3710      	adds	r7, #16
 8000d16:	46bd      	mov	sp, r7
 8000d18:	bd80      	pop	{r7, pc}
	...

08000d1c <NUfsr_UART_Rx_StatusComplete>:

	return 0;
}

uint32_t NUfsr_UART_Rx_StatusComplete(UART_HandleTypeDef *huart)
{
 8000d1c:	b480      	push	{r7}
 8000d1e:	b083      	sub	sp, #12
 8000d20:	af00      	add	r7, sp, #0
 8000d22:	6078      	str	r0, [r7, #4]
	if(huart1_ITh.Rx_State == Rx_FINISHED)
 8000d24:	4b06      	ldr	r3, [pc, #24]	; (8000d40 <NUfsr_UART_Rx_StatusComplete+0x24>)
 8000d26:	785b      	ldrb	r3, [r3, #1]
 8000d28:	b2db      	uxtb	r3, r3
 8000d2a:	2b00      	cmp	r3, #0
 8000d2c:	d101      	bne.n	8000d32 <NUfsr_UART_Rx_StatusComplete+0x16>
		return 1;
 8000d2e:	2301      	movs	r3, #1
 8000d30:	e000      	b.n	8000d34 <NUfsr_UART_Rx_StatusComplete+0x18>

	return 0;
 8000d32:	2300      	movs	r3, #0
}
 8000d34:	4618      	mov	r0, r3
 8000d36:	370c      	adds	r7, #12
 8000d38:	46bd      	mov	sp, r7
 8000d3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d3e:	4770      	bx	lr
 8000d40:	20000170 	.word	0x20000170

08000d44 <Reset_Handler>:
 8000d44:	f8df d034 	ldr.w	sp, [pc, #52]	; 8000d7c <LoopForever+0x2>
 8000d48:	480d      	ldr	r0, [pc, #52]	; (8000d80 <LoopForever+0x6>)
 8000d4a:	490e      	ldr	r1, [pc, #56]	; (8000d84 <LoopForever+0xa>)
 8000d4c:	4a0e      	ldr	r2, [pc, #56]	; (8000d88 <LoopForever+0xe>)
 8000d4e:	2300      	movs	r3, #0
 8000d50:	e002      	b.n	8000d58 <LoopCopyDataInit>

08000d52 <CopyDataInit>:
 8000d52:	58d4      	ldr	r4, [r2, r3]
 8000d54:	50c4      	str	r4, [r0, r3]
 8000d56:	3304      	adds	r3, #4

08000d58 <LoopCopyDataInit>:
 8000d58:	18c4      	adds	r4, r0, r3
 8000d5a:	428c      	cmp	r4, r1
 8000d5c:	d3f9      	bcc.n	8000d52 <CopyDataInit>
 8000d5e:	4a0b      	ldr	r2, [pc, #44]	; (8000d8c <LoopForever+0x12>)
 8000d60:	4c0b      	ldr	r4, [pc, #44]	; (8000d90 <LoopForever+0x16>)
 8000d62:	2300      	movs	r3, #0
 8000d64:	e001      	b.n	8000d6a <LoopFillZerobss>

08000d66 <FillZerobss>:
 8000d66:	6013      	str	r3, [r2, #0]
 8000d68:	3204      	adds	r2, #4

08000d6a <LoopFillZerobss>:
 8000d6a:	42a2      	cmp	r2, r4
 8000d6c:	d3fb      	bcc.n	8000d66 <FillZerobss>
 8000d6e:	f7ff fe65 	bl	8000a3c <SystemInit>
 8000d72:	f004 fba7 	bl	80054c4 <__libc_init_array>
 8000d76:	f7ff fc7d 	bl	8000674 <main>

08000d7a <LoopForever>:
 8000d7a:	e7fe      	b.n	8000d7a <LoopForever>
 8000d7c:	20008000 	.word	0x20008000
 8000d80:	20000000 	.word	0x20000000
 8000d84:	20000070 	.word	0x20000070
 8000d88:	08005e90 	.word	0x08005e90
 8000d8c:	20000070 	.word	0x20000070
 8000d90:	2000020c 	.word	0x2000020c

08000d94 <ADC1_IRQHandler>:
 8000d94:	e7fe      	b.n	8000d94 <ADC1_IRQHandler>
	...

08000d98 <HAL_Init>:
  *         In the default implementation,Systick is used as source of time base.
  *       The tick variable is incremented each 1ms in its ISR.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000d98:	b580      	push	{r7, lr}
 8000d9a:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch */
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000d9c:	4b08      	ldr	r3, [pc, #32]	; (8000dc0 <HAL_Init+0x28>)
 8000d9e:	681b      	ldr	r3, [r3, #0]
 8000da0:	4a07      	ldr	r2, [pc, #28]	; (8000dc0 <HAL_Init+0x28>)
 8000da2:	f043 0310 	orr.w	r3, r3, #16
 8000da6:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000da8:	2003      	movs	r0, #3
 8000daa:	f000 fb59 	bl	8001460 <HAL_NVIC_SetPriorityGrouping>

  /* Enable systick and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000dae:	2000      	movs	r0, #0
 8000db0:	f000 f808 	bl	8000dc4 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000db4:	f7ff fdaa 	bl	800090c <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000db8:	2300      	movs	r3, #0
}
 8000dba:	4618      	mov	r0, r3
 8000dbc:	bd80      	pop	{r7, pc}
 8000dbe:	bf00      	nop
 8000dc0:	40022000 	.word	0x40022000

08000dc4 <HAL_InitTick>:
  *         implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000dc4:	b580      	push	{r7, lr}
 8000dc6:	b082      	sub	sp, #8
 8000dc8:	af00      	add	r7, sp, #0
 8000dca:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000dcc:	4b12      	ldr	r3, [pc, #72]	; (8000e18 <HAL_InitTick+0x54>)
 8000dce:	681a      	ldr	r2, [r3, #0]
 8000dd0:	4b12      	ldr	r3, [pc, #72]	; (8000e1c <HAL_InitTick+0x58>)
 8000dd2:	781b      	ldrb	r3, [r3, #0]
 8000dd4:	4619      	mov	r1, r3
 8000dd6:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000dda:	fbb3 f3f1 	udiv	r3, r3, r1
 8000dde:	fbb2 f3f3 	udiv	r3, r2, r3
 8000de2:	4618      	mov	r0, r3
 8000de4:	f000 fb71 	bl	80014ca <HAL_SYSTICK_Config>
 8000de8:	4603      	mov	r3, r0
 8000dea:	2b00      	cmp	r3, #0
 8000dec:	d001      	beq.n	8000df2 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8000dee:	2301      	movs	r3, #1
 8000df0:	e00e      	b.n	8000e10 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000df2:	687b      	ldr	r3, [r7, #4]
 8000df4:	2b0f      	cmp	r3, #15
 8000df6:	d80a      	bhi.n	8000e0e <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000df8:	2200      	movs	r2, #0
 8000dfa:	6879      	ldr	r1, [r7, #4]
 8000dfc:	f04f 30ff 	mov.w	r0, #4294967295
 8000e00:	f000 fb39 	bl	8001476 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000e04:	4a06      	ldr	r2, [pc, #24]	; (8000e20 <HAL_InitTick+0x5c>)
 8000e06:	687b      	ldr	r3, [r7, #4]
 8000e08:	6013      	str	r3, [r2, #0]
  else
  {
    return HAL_ERROR;
  }
   /* Return function status */
  return HAL_OK;
 8000e0a:	2300      	movs	r3, #0
 8000e0c:	e000      	b.n	8000e10 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8000e0e:	2301      	movs	r3, #1
}
 8000e10:	4618      	mov	r0, r3
 8000e12:	3708      	adds	r7, #8
 8000e14:	46bd      	mov	sp, r7
 8000e16:	bd80      	pop	{r7, pc}
 8000e18:	20000000 	.word	0x20000000
 8000e1c:	20000008 	.word	0x20000008
 8000e20:	20000004 	.word	0x20000004

08000e24 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *         implementations  in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000e24:	b480      	push	{r7}
 8000e26:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000e28:	4b06      	ldr	r3, [pc, #24]	; (8000e44 <HAL_IncTick+0x20>)
 8000e2a:	781b      	ldrb	r3, [r3, #0]
 8000e2c:	461a      	mov	r2, r3
 8000e2e:	4b06      	ldr	r3, [pc, #24]	; (8000e48 <HAL_IncTick+0x24>)
 8000e30:	681b      	ldr	r3, [r3, #0]
 8000e32:	4413      	add	r3, r2
 8000e34:	4a04      	ldr	r2, [pc, #16]	; (8000e48 <HAL_IncTick+0x24>)
 8000e36:	6013      	str	r3, [r2, #0]
}
 8000e38:	bf00      	nop
 8000e3a:	46bd      	mov	sp, r7
 8000e3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e40:	4770      	bx	lr
 8000e42:	bf00      	nop
 8000e44:	20000008 	.word	0x20000008
 8000e48:	200001f8 	.word	0x200001f8

08000e4c <HAL_GetTick>:
  * @note   The function is declared as __Weak  to be overwritten  in case of other 
  *         implementations  in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000e4c:	b480      	push	{r7}
 8000e4e:	af00      	add	r7, sp, #0
  return uwTick;  
 8000e50:	4b03      	ldr	r3, [pc, #12]	; (8000e60 <HAL_GetTick+0x14>)
 8000e52:	681b      	ldr	r3, [r3, #0]
}
 8000e54:	4618      	mov	r0, r3
 8000e56:	46bd      	mov	sp, r7
 8000e58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e5c:	4770      	bx	lr
 8000e5e:	bf00      	nop
 8000e60:	200001f8 	.word	0x200001f8

08000e64 <HAL_Delay>:
  *         implementations  in user file.
  * @param  Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000e64:	b580      	push	{r7, lr}
 8000e66:	b084      	sub	sp, #16
 8000e68:	af00      	add	r7, sp, #0
 8000e6a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8000e6c:	f7ff ffee 	bl	8000e4c <HAL_GetTick>
 8000e70:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8000e72:	687b      	ldr	r3, [r7, #4]
 8000e74:	60fb      	str	r3, [r7, #12]
  
  /* Add freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000e76:	68fb      	ldr	r3, [r7, #12]
 8000e78:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000e7c:	d005      	beq.n	8000e8a <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8000e7e:	4b0a      	ldr	r3, [pc, #40]	; (8000ea8 <HAL_Delay+0x44>)
 8000e80:	781b      	ldrb	r3, [r3, #0]
 8000e82:	461a      	mov	r2, r3
 8000e84:	68fb      	ldr	r3, [r7, #12]
 8000e86:	4413      	add	r3, r2
 8000e88:	60fb      	str	r3, [r7, #12]
  }
  
  while((HAL_GetTick() - tickstart) < wait)
 8000e8a:	bf00      	nop
 8000e8c:	f7ff ffde 	bl	8000e4c <HAL_GetTick>
 8000e90:	4602      	mov	r2, r0
 8000e92:	68bb      	ldr	r3, [r7, #8]
 8000e94:	1ad3      	subs	r3, r2, r3
 8000e96:	68fa      	ldr	r2, [r7, #12]
 8000e98:	429a      	cmp	r2, r3
 8000e9a:	d8f7      	bhi.n	8000e8c <HAL_Delay+0x28>
  {
  }
}
 8000e9c:	bf00      	nop
 8000e9e:	bf00      	nop
 8000ea0:	3710      	adds	r7, #16
 8000ea2:	46bd      	mov	sp, r7
 8000ea4:	bd80      	pop	{r7, pc}
 8000ea6:	bf00      	nop
 8000ea8:	20000008 	.word	0x20000008

08000eac <HAL_ADC_Init>:
  *         of structure "ADC_InitTypeDef".
  * @param  hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 8000eac:	b580      	push	{r7, lr}
 8000eae:	b086      	sub	sp, #24
 8000eb0:	af00      	add	r7, sp, #0
 8000eb2:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8000eb4:	2300      	movs	r3, #0
 8000eb6:	75fb      	strb	r3, [r7, #23]
  uint32_t tmp_cr1 = 0U;
 8000eb8:	2300      	movs	r3, #0
 8000eba:	613b      	str	r3, [r7, #16]
  uint32_t tmp_cr2 = 0U;
 8000ebc:	2300      	movs	r3, #0
 8000ebe:	60bb      	str	r3, [r7, #8]
  uint32_t tmp_sqr1 = 0U;
 8000ec0:	2300      	movs	r3, #0
 8000ec2:	60fb      	str	r3, [r7, #12]
  
  /* Check ADC handle */
  if(hadc == NULL)
 8000ec4:	687b      	ldr	r3, [r7, #4]
 8000ec6:	2b00      	cmp	r3, #0
 8000ec8:	d101      	bne.n	8000ece <HAL_ADC_Init+0x22>
  {
    return HAL_ERROR;
 8000eca:	2301      	movs	r3, #1
 8000ecc:	e0be      	b.n	800104c <HAL_ADC_Init+0x1a0>
  assert_param(IS_ADC_DATA_ALIGN(hadc->Init.DataAlign));
  assert_param(IS_ADC_SCAN_MODE(hadc->Init.ScanConvMode));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXTTRIG(hadc->Init.ExternalTrigConv));
  
  if(hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 8000ece:	687b      	ldr	r3, [r7, #4]
 8000ed0:	689b      	ldr	r3, [r3, #8]
 8000ed2:	2b00      	cmp	r3, #0
  /* Refer to header of this file for more details on clock enabling          */
  /* procedure.                                                               */

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 8000ed4:	687b      	ldr	r3, [r7, #4]
 8000ed6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000ed8:	2b00      	cmp	r3, #0
 8000eda:	d109      	bne.n	8000ef0 <HAL_ADC_Init+0x44>
  {
    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 8000edc:	687b      	ldr	r3, [r7, #4]
 8000ede:	2200      	movs	r2, #0
 8000ee0:	62da      	str	r2, [r3, #44]	; 0x2c
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 8000ee2:	687b      	ldr	r3, [r7, #4]
 8000ee4:	2200      	movs	r2, #0
 8000ee6:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
    
    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8000eea:	6878      	ldr	r0, [r7, #4]
 8000eec:	f7ff fa2c 	bl	8000348 <HAL_ADC_MspInit>
  /* Stop potential conversion on going, on regular and injected groups */
  /* Disable ADC peripheral */
  /* Note: In case of ADC already enabled, precaution to not launch an        */
  /*       unwanted conversion while modifying register CR2 by writing 1 to   */
  /*       bit ADON.                                                          */
  tmp_hal_status = ADC_ConversionStop_Disable(hadc);
 8000ef0:	6878      	ldr	r0, [r7, #4]
 8000ef2:	f000 f9a3 	bl	800123c <ADC_ConversionStop_Disable>
 8000ef6:	4603      	mov	r3, r0
 8000ef8:	75fb      	strb	r3, [r7, #23]
  
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL) &&
 8000efa:	687b      	ldr	r3, [r7, #4]
 8000efc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000efe:	f003 0310 	and.w	r3, r3, #16
 8000f02:	2b00      	cmp	r3, #0
 8000f04:	f040 8099 	bne.w	800103a <HAL_ADC_Init+0x18e>
 8000f08:	7dfb      	ldrb	r3, [r7, #23]
 8000f0a:	2b00      	cmp	r3, #0
 8000f0c:	f040 8095 	bne.w	800103a <HAL_ADC_Init+0x18e>
      (tmp_hal_status == HAL_OK)                                  )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8000f10:	687b      	ldr	r3, [r7, #4]
 8000f12:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000f14:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 8000f18:	f023 0302 	bic.w	r3, r3, #2
 8000f1c:	f043 0202 	orr.w	r2, r3, #2
 8000f20:	687b      	ldr	r3, [r7, #4]
 8000f22:	629a      	str	r2, [r3, #40]	; 0x28
    /*  - continuous conversion mode                                          */
    /* Note: External trigger polarity (ADC_CR2_EXTTRIG) is set into          */
    /*       HAL_ADC_Start_xxx functions because if set in this function,     */
    /*       a conversion on injected group would start a conversion also on  */
    /*       regular group after ADC enabling.                                */
    tmp_cr2 |= (hadc->Init.DataAlign                             |
 8000f24:	687b      	ldr	r3, [r7, #4]
 8000f26:	685a      	ldr	r2, [r3, #4]
                hadc->Init.ExternalTrigConv                      |
 8000f28:	687b      	ldr	r3, [r7, #4]
 8000f2a:	69db      	ldr	r3, [r3, #28]
    tmp_cr2 |= (hadc->Init.DataAlign                             |
 8000f2c:	431a      	orrs	r2, r3
                ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode) );
 8000f2e:	687b      	ldr	r3, [r7, #4]
 8000f30:	7b1b      	ldrb	r3, [r3, #12]
 8000f32:	005b      	lsls	r3, r3, #1
                hadc->Init.ExternalTrigConv                      |
 8000f34:	4313      	orrs	r3, r2
    tmp_cr2 |= (hadc->Init.DataAlign                             |
 8000f36:	68ba      	ldr	r2, [r7, #8]
 8000f38:	4313      	orrs	r3, r2
 8000f3a:	60bb      	str	r3, [r7, #8]
    
    /* Configuration of ADC:                                                  */
    /*  - scan mode                                                           */
    /*  - discontinuous mode disable/enable                                   */
    /*  - discontinuous mode number of conversions                            */
    tmp_cr1 |= (ADC_CR1_SCAN_SET(hadc->Init.ScanConvMode));
 8000f3c:	687b      	ldr	r3, [r7, #4]
 8000f3e:	689b      	ldr	r3, [r3, #8]
 8000f40:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8000f44:	d003      	beq.n	8000f4e <HAL_ADC_Init+0xa2>
 8000f46:	687b      	ldr	r3, [r7, #4]
 8000f48:	689b      	ldr	r3, [r3, #8]
 8000f4a:	2b01      	cmp	r3, #1
 8000f4c:	d102      	bne.n	8000f54 <HAL_ADC_Init+0xa8>
 8000f4e:	f44f 7380 	mov.w	r3, #256	; 0x100
 8000f52:	e000      	b.n	8000f56 <HAL_ADC_Init+0xaa>
 8000f54:	2300      	movs	r3, #0
 8000f56:	693a      	ldr	r2, [r7, #16]
 8000f58:	4313      	orrs	r3, r2
 8000f5a:	613b      	str	r3, [r7, #16]

    /* Enable discontinuous mode only if continuous mode is disabled */
    /* Note: If parameter "Init.ScanConvMode" is set to disable, parameter    */
    /*       discontinuous is set anyway, but will have no effect on ADC HW.  */
    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8000f5c:	687b      	ldr	r3, [r7, #4]
 8000f5e:	7d1b      	ldrb	r3, [r3, #20]
 8000f60:	2b01      	cmp	r3, #1
 8000f62:	d119      	bne.n	8000f98 <HAL_ADC_Init+0xec>
    {
      if (hadc->Init.ContinuousConvMode == DISABLE)
 8000f64:	687b      	ldr	r3, [r7, #4]
 8000f66:	7b1b      	ldrb	r3, [r3, #12]
 8000f68:	2b00      	cmp	r3, #0
 8000f6a:	d109      	bne.n	8000f80 <HAL_ADC_Init+0xd4>
      {
        /* Enable the selected ADC regular discontinuous mode */
        /* Set the number of channels to be converted in discontinuous mode */
      tmp_cr1 |= (ADC_CR1_DISCEN                                           |
                  ADC_CR1_DISCONTINUOUS_NUM(hadc->Init.NbrOfDiscConversion) );
 8000f6c:	687b      	ldr	r3, [r7, #4]
 8000f6e:	699b      	ldr	r3, [r3, #24]
 8000f70:	3b01      	subs	r3, #1
 8000f72:	035a      	lsls	r2, r3, #13
      tmp_cr1 |= (ADC_CR1_DISCEN                                           |
 8000f74:	693b      	ldr	r3, [r7, #16]
 8000f76:	4313      	orrs	r3, r2
 8000f78:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8000f7c:	613b      	str	r3, [r7, #16]
 8000f7e:	e00b      	b.n	8000f98 <HAL_ADC_Init+0xec>
        /* ADC regular group discontinuous was intended to be enabled,        */
        /* but ADC regular group modes continuous and sequencer discontinuous */
        /* cannot be enabled simultaneously.                                  */
        
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8000f80:	687b      	ldr	r3, [r7, #4]
 8000f82:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000f84:	f043 0220 	orr.w	r2, r3, #32
 8000f88:	687b      	ldr	r3, [r7, #4]
 8000f8a:	629a      	str	r2, [r3, #40]	; 0x28
        
        /* Set ADC error code to ADC IP internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8000f8c:	687b      	ldr	r3, [r7, #4]
 8000f8e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000f90:	f043 0201 	orr.w	r2, r3, #1
 8000f94:	687b      	ldr	r3, [r7, #4]
 8000f96:	62da      	str	r2, [r3, #44]	; 0x2c
      }
    }
    
    /* Update ADC configuration register CR1 with previous settings */
      MODIFY_REG(hadc->Instance->CR1,
 8000f98:	687b      	ldr	r3, [r7, #4]
 8000f9a:	681b      	ldr	r3, [r3, #0]
 8000f9c:	685b      	ldr	r3, [r3, #4]
 8000f9e:	f423 4169 	bic.w	r1, r3, #59648	; 0xe900
 8000fa2:	687b      	ldr	r3, [r7, #4]
 8000fa4:	681b      	ldr	r3, [r3, #0]
 8000fa6:	693a      	ldr	r2, [r7, #16]
 8000fa8:	430a      	orrs	r2, r1
 8000faa:	605a      	str	r2, [r3, #4]
                 ADC_CR1_DISCEN  |
                 ADC_CR1_DISCNUM    ,
                 tmp_cr1             );
    
    /* Update ADC configuration register CR2 with previous settings */
      MODIFY_REG(hadc->Instance->CR2,
 8000fac:	687b      	ldr	r3, [r7, #4]
 8000fae:	681b      	ldr	r3, [r3, #0]
 8000fb0:	689a      	ldr	r2, [r3, #8]
 8000fb2:	4b28      	ldr	r3, [pc, #160]	; (8001054 <HAL_ADC_Init+0x1a8>)
 8000fb4:	4013      	ands	r3, r2
 8000fb6:	687a      	ldr	r2, [r7, #4]
 8000fb8:	6812      	ldr	r2, [r2, #0]
 8000fba:	68b9      	ldr	r1, [r7, #8]
 8000fbc:	430b      	orrs	r3, r1
 8000fbe:	6093      	str	r3, [r2, #8]
    /*   Note: Scan mode is present by hardware on this device and, if        */
    /*   disabled, discards automatically nb of conversions. Anyway, nb of    */
    /*   conversions is forced to 0x00 for alignment over all STM32 devices.  */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion"                                          */
    if (ADC_CR1_SCAN_SET(hadc->Init.ScanConvMode) == ADC_SCAN_ENABLE)
 8000fc0:	687b      	ldr	r3, [r7, #4]
 8000fc2:	689b      	ldr	r3, [r3, #8]
 8000fc4:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8000fc8:	d003      	beq.n	8000fd2 <HAL_ADC_Init+0x126>
 8000fca:	687b      	ldr	r3, [r7, #4]
 8000fcc:	689b      	ldr	r3, [r3, #8]
 8000fce:	2b01      	cmp	r3, #1
 8000fd0:	d104      	bne.n	8000fdc <HAL_ADC_Init+0x130>
    {
      tmp_sqr1 = ADC_SQR1_L_SHIFT(hadc->Init.NbrOfConversion);
 8000fd2:	687b      	ldr	r3, [r7, #4]
 8000fd4:	691b      	ldr	r3, [r3, #16]
 8000fd6:	3b01      	subs	r3, #1
 8000fd8:	051b      	lsls	r3, r3, #20
 8000fda:	60fb      	str	r3, [r7, #12]
    }
    
    MODIFY_REG(hadc->Instance->SQR1,
 8000fdc:	687b      	ldr	r3, [r7, #4]
 8000fde:	681b      	ldr	r3, [r3, #0]
 8000fe0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000fe2:	f423 0170 	bic.w	r1, r3, #15728640	; 0xf00000
 8000fe6:	687b      	ldr	r3, [r7, #4]
 8000fe8:	681b      	ldr	r3, [r3, #0]
 8000fea:	68fa      	ldr	r2, [r7, #12]
 8000fec:	430a      	orrs	r2, r1
 8000fee:	62da      	str	r2, [r3, #44]	; 0x2c
    /* ensure of no potential problem of ADC core IP clocking.                */
    /* Check through register CR2 (excluding bits set in other functions:     */
    /* execution control bits (ADON, JSWSTART, SWSTART), regular group bits   */
    /* (DMA), injected group bits (JEXTTRIG and JEXTSEL), channel internal    */
    /* measurement path bit (TSVREFE).                                        */
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 8000ff0:	687b      	ldr	r3, [r7, #4]
 8000ff2:	681b      	ldr	r3, [r3, #0]
 8000ff4:	689a      	ldr	r2, [r3, #8]
 8000ff6:	4b18      	ldr	r3, [pc, #96]	; (8001058 <HAL_ADC_Init+0x1ac>)
 8000ff8:	4013      	ands	r3, r2
 8000ffa:	68ba      	ldr	r2, [r7, #8]
 8000ffc:	429a      	cmp	r2, r3
 8000ffe:	d10b      	bne.n	8001018 <HAL_ADC_Init+0x16c>
                                        ADC_CR2_JEXTTRIG | ADC_CR2_JEXTSEL |
                                        ADC_CR2_TSVREFE                     ))
         == tmp_cr2)
    {
      /* Set ADC error code to none */
      ADC_CLEAR_ERRORCODE(hadc);
 8001000:	687b      	ldr	r3, [r7, #4]
 8001002:	2200      	movs	r2, #0
 8001004:	62da      	str	r2, [r3, #44]	; 0x2c
      
      /* Set the ADC state */
      ADC_STATE_CLR_SET(hadc->State,
 8001006:	687b      	ldr	r3, [r7, #4]
 8001008:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800100a:	f023 0303 	bic.w	r3, r3, #3
 800100e:	f043 0201 	orr.w	r2, r3, #1
 8001012:	687b      	ldr	r3, [r7, #4]
 8001014:	629a      	str	r2, [r3, #40]	; 0x28
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 8001016:	e018      	b.n	800104a <HAL_ADC_Init+0x19e>
                        HAL_ADC_STATE_READY);
    }
    else
    {
      /* Update ADC state machine to error */
      ADC_STATE_CLR_SET(hadc->State,
 8001018:	687b      	ldr	r3, [r7, #4]
 800101a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800101c:	f023 0312 	bic.w	r3, r3, #18
 8001020:	f043 0210 	orr.w	r2, r3, #16
 8001024:	687b      	ldr	r3, [r7, #4]
 8001026:	629a      	str	r2, [r3, #40]	; 0x28
                        HAL_ADC_STATE_BUSY_INTERNAL,
                        HAL_ADC_STATE_ERROR_INTERNAL);
      
      /* Set ADC error code to ADC IP internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001028:	687b      	ldr	r3, [r7, #4]
 800102a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800102c:	f043 0201 	orr.w	r2, r3, #1
 8001030:	687b      	ldr	r3, [r7, #4]
 8001032:	62da      	str	r2, [r3, #44]	; 0x2c
      
      tmp_hal_status = HAL_ERROR;
 8001034:	2301      	movs	r3, #1
 8001036:	75fb      	strb	r3, [r7, #23]
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 8001038:	e007      	b.n	800104a <HAL_ADC_Init+0x19e>
  
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800103a:	687b      	ldr	r3, [r7, #4]
 800103c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800103e:	f043 0210 	orr.w	r2, r3, #16
 8001042:	687b      	ldr	r3, [r7, #4]
 8001044:	629a      	str	r2, [r3, #40]	; 0x28
        
    tmp_hal_status = HAL_ERROR;
 8001046:	2301      	movs	r3, #1
 8001048:	75fb      	strb	r3, [r7, #23]
  }
  
  /* Return function status */
  return tmp_hal_status;
 800104a:	7dfb      	ldrb	r3, [r7, #23]
}
 800104c:	4618      	mov	r0, r3
 800104e:	3718      	adds	r7, #24
 8001050:	46bd      	mov	sp, r7
 8001052:	bd80      	pop	{r7, pc}
 8001054:	ffe1f7fd 	.word	0xffe1f7fd
 8001058:	ff1f0efe 	.word	0xff1f0efe

0800105c <HAL_ADC_ConfigChannel>:
  * @param  hadc ADC handle
  * @param  sConfig Structure of ADC channel for regular group.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{ 
 800105c:	b480      	push	{r7}
 800105e:	b085      	sub	sp, #20
 8001060:	af00      	add	r7, sp, #0
 8001062:	6078      	str	r0, [r7, #4]
 8001064:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001066:	2300      	movs	r3, #0
 8001068:	73fb      	strb	r3, [r7, #15]
  __IO uint32_t wait_loop_index = 0U;
 800106a:	2300      	movs	r3, #0
 800106c:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 800106e:	687b      	ldr	r3, [r7, #4]
 8001070:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8001074:	2b01      	cmp	r3, #1
 8001076:	d101      	bne.n	800107c <HAL_ADC_ConfigChannel+0x20>
 8001078:	2302      	movs	r3, #2
 800107a:	e0d2      	b.n	8001222 <HAL_ADC_ConfigChannel+0x1c6>
 800107c:	687b      	ldr	r3, [r7, #4]
 800107e:	2201      	movs	r2, #1
 8001080:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  
  
  /* Regular sequence configuration */
  /* For Rank 1 to 6U */
  if (sConfig->Rank < 7U)
 8001084:	683b      	ldr	r3, [r7, #0]
 8001086:	685b      	ldr	r3, [r3, #4]
 8001088:	2b06      	cmp	r3, #6
 800108a:	d81c      	bhi.n	80010c6 <HAL_ADC_ConfigChannel+0x6a>
  {
    MODIFY_REG(hadc->Instance->SQR3                        ,
 800108c:	687b      	ldr	r3, [r7, #4]
 800108e:	681b      	ldr	r3, [r3, #0]
 8001090:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8001092:	683b      	ldr	r3, [r7, #0]
 8001094:	685a      	ldr	r2, [r3, #4]
 8001096:	4613      	mov	r3, r2
 8001098:	009b      	lsls	r3, r3, #2
 800109a:	4413      	add	r3, r2
 800109c:	3b05      	subs	r3, #5
 800109e:	221f      	movs	r2, #31
 80010a0:	fa02 f303 	lsl.w	r3, r2, r3
 80010a4:	43db      	mvns	r3, r3
 80010a6:	4019      	ands	r1, r3
 80010a8:	683b      	ldr	r3, [r7, #0]
 80010aa:	6818      	ldr	r0, [r3, #0]
 80010ac:	683b      	ldr	r3, [r7, #0]
 80010ae:	685a      	ldr	r2, [r3, #4]
 80010b0:	4613      	mov	r3, r2
 80010b2:	009b      	lsls	r3, r3, #2
 80010b4:	4413      	add	r3, r2
 80010b6:	3b05      	subs	r3, #5
 80010b8:	fa00 f203 	lsl.w	r2, r0, r3
 80010bc:	687b      	ldr	r3, [r7, #4]
 80010be:	681b      	ldr	r3, [r3, #0]
 80010c0:	430a      	orrs	r2, r1
 80010c2:	635a      	str	r2, [r3, #52]	; 0x34
 80010c4:	e03c      	b.n	8001140 <HAL_ADC_ConfigChannel+0xe4>
               ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank)    ,
               ADC_SQR3_RK(sConfig->Channel, sConfig->Rank) );
  }
  /* For Rank 7 to 12U */
  else if (sConfig->Rank < 13U)
 80010c6:	683b      	ldr	r3, [r7, #0]
 80010c8:	685b      	ldr	r3, [r3, #4]
 80010ca:	2b0c      	cmp	r3, #12
 80010cc:	d81c      	bhi.n	8001108 <HAL_ADC_ConfigChannel+0xac>
  {
    MODIFY_REG(hadc->Instance->SQR2                        ,
 80010ce:	687b      	ldr	r3, [r7, #4]
 80010d0:	681b      	ldr	r3, [r3, #0]
 80010d2:	6b19      	ldr	r1, [r3, #48]	; 0x30
 80010d4:	683b      	ldr	r3, [r7, #0]
 80010d6:	685a      	ldr	r2, [r3, #4]
 80010d8:	4613      	mov	r3, r2
 80010da:	009b      	lsls	r3, r3, #2
 80010dc:	4413      	add	r3, r2
 80010de:	3b23      	subs	r3, #35	; 0x23
 80010e0:	221f      	movs	r2, #31
 80010e2:	fa02 f303 	lsl.w	r3, r2, r3
 80010e6:	43db      	mvns	r3, r3
 80010e8:	4019      	ands	r1, r3
 80010ea:	683b      	ldr	r3, [r7, #0]
 80010ec:	6818      	ldr	r0, [r3, #0]
 80010ee:	683b      	ldr	r3, [r7, #0]
 80010f0:	685a      	ldr	r2, [r3, #4]
 80010f2:	4613      	mov	r3, r2
 80010f4:	009b      	lsls	r3, r3, #2
 80010f6:	4413      	add	r3, r2
 80010f8:	3b23      	subs	r3, #35	; 0x23
 80010fa:	fa00 f203 	lsl.w	r2, r0, r3
 80010fe:	687b      	ldr	r3, [r7, #4]
 8001100:	681b      	ldr	r3, [r3, #0]
 8001102:	430a      	orrs	r2, r1
 8001104:	631a      	str	r2, [r3, #48]	; 0x30
 8001106:	e01b      	b.n	8001140 <HAL_ADC_ConfigChannel+0xe4>
               ADC_SQR2_RK(sConfig->Channel, sConfig->Rank) );
  }
  /* For Rank 13 to 16U */
  else
  {
    MODIFY_REG(hadc->Instance->SQR1                        ,
 8001108:	687b      	ldr	r3, [r7, #4]
 800110a:	681b      	ldr	r3, [r3, #0]
 800110c:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 800110e:	683b      	ldr	r3, [r7, #0]
 8001110:	685a      	ldr	r2, [r3, #4]
 8001112:	4613      	mov	r3, r2
 8001114:	009b      	lsls	r3, r3, #2
 8001116:	4413      	add	r3, r2
 8001118:	3b41      	subs	r3, #65	; 0x41
 800111a:	221f      	movs	r2, #31
 800111c:	fa02 f303 	lsl.w	r3, r2, r3
 8001120:	43db      	mvns	r3, r3
 8001122:	4019      	ands	r1, r3
 8001124:	683b      	ldr	r3, [r7, #0]
 8001126:	6818      	ldr	r0, [r3, #0]
 8001128:	683b      	ldr	r3, [r7, #0]
 800112a:	685a      	ldr	r2, [r3, #4]
 800112c:	4613      	mov	r3, r2
 800112e:	009b      	lsls	r3, r3, #2
 8001130:	4413      	add	r3, r2
 8001132:	3b41      	subs	r3, #65	; 0x41
 8001134:	fa00 f203 	lsl.w	r2, r0, r3
 8001138:	687b      	ldr	r3, [r7, #4]
 800113a:	681b      	ldr	r3, [r3, #0]
 800113c:	430a      	orrs	r2, r1
 800113e:	62da      	str	r2, [r3, #44]	; 0x2c
  }
  
  
  /* Channel sampling time configuration */
  /* For channels 10 to 18U */
  if (sConfig->Channel > ADC_CHANNEL_10)
 8001140:	683b      	ldr	r3, [r7, #0]
 8001142:	681b      	ldr	r3, [r3, #0]
 8001144:	2b0a      	cmp	r3, #10
 8001146:	d91c      	bls.n	8001182 <HAL_ADC_ConfigChannel+0x126>
  {
    MODIFY_REG(hadc->Instance->SMPR1                             ,
 8001148:	687b      	ldr	r3, [r7, #4]
 800114a:	681b      	ldr	r3, [r3, #0]
 800114c:	68d9      	ldr	r1, [r3, #12]
 800114e:	683b      	ldr	r3, [r7, #0]
 8001150:	681a      	ldr	r2, [r3, #0]
 8001152:	4613      	mov	r3, r2
 8001154:	005b      	lsls	r3, r3, #1
 8001156:	4413      	add	r3, r2
 8001158:	3b1e      	subs	r3, #30
 800115a:	2207      	movs	r2, #7
 800115c:	fa02 f303 	lsl.w	r3, r2, r3
 8001160:	43db      	mvns	r3, r3
 8001162:	4019      	ands	r1, r3
 8001164:	683b      	ldr	r3, [r7, #0]
 8001166:	6898      	ldr	r0, [r3, #8]
 8001168:	683b      	ldr	r3, [r7, #0]
 800116a:	681a      	ldr	r2, [r3, #0]
 800116c:	4613      	mov	r3, r2
 800116e:	005b      	lsls	r3, r3, #1
 8001170:	4413      	add	r3, r2
 8001172:	3b1e      	subs	r3, #30
 8001174:	fa00 f203 	lsl.w	r2, r0, r3
 8001178:	687b      	ldr	r3, [r7, #4]
 800117a:	681b      	ldr	r3, [r3, #0]
 800117c:	430a      	orrs	r2, r1
 800117e:	60da      	str	r2, [r3, #12]
 8001180:	e019      	b.n	80011b6 <HAL_ADC_ConfigChannel+0x15a>
               ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel)      ,
               ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel) );
  }
  else   /* For channels 0 to 9U */
  {
    MODIFY_REG(hadc->Instance->SMPR2                             ,
 8001182:	687b      	ldr	r3, [r7, #4]
 8001184:	681b      	ldr	r3, [r3, #0]
 8001186:	6919      	ldr	r1, [r3, #16]
 8001188:	683b      	ldr	r3, [r7, #0]
 800118a:	681a      	ldr	r2, [r3, #0]
 800118c:	4613      	mov	r3, r2
 800118e:	005b      	lsls	r3, r3, #1
 8001190:	4413      	add	r3, r2
 8001192:	2207      	movs	r2, #7
 8001194:	fa02 f303 	lsl.w	r3, r2, r3
 8001198:	43db      	mvns	r3, r3
 800119a:	4019      	ands	r1, r3
 800119c:	683b      	ldr	r3, [r7, #0]
 800119e:	6898      	ldr	r0, [r3, #8]
 80011a0:	683b      	ldr	r3, [r7, #0]
 80011a2:	681a      	ldr	r2, [r3, #0]
 80011a4:	4613      	mov	r3, r2
 80011a6:	005b      	lsls	r3, r3, #1
 80011a8:	4413      	add	r3, r2
 80011aa:	fa00 f203 	lsl.w	r2, r0, r3
 80011ae:	687b      	ldr	r3, [r7, #4]
 80011b0:	681b      	ldr	r3, [r3, #0]
 80011b2:	430a      	orrs	r2, r1
 80011b4:	611a      	str	r2, [r3, #16]
               ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel) );
  }
  
  /* If ADC1 Channel_16 or Channel_17 is selected, enable Temperature sensor  */
  /* and VREFINT measurement path.                                            */
  if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) ||
 80011b6:	683b      	ldr	r3, [r7, #0]
 80011b8:	681b      	ldr	r3, [r3, #0]
 80011ba:	2b10      	cmp	r3, #16
 80011bc:	d003      	beq.n	80011c6 <HAL_ADC_ConfigChannel+0x16a>
      (sConfig->Channel == ADC_CHANNEL_VREFINT)      )
 80011be:	683b      	ldr	r3, [r7, #0]
 80011c0:	681b      	ldr	r3, [r3, #0]
  if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) ||
 80011c2:	2b11      	cmp	r3, #17
 80011c4:	d11e      	bne.n	8001204 <HAL_ADC_ConfigChannel+0x1a8>
  {
    SET_BIT(hadc->Instance->CR2, ADC_CR2_TSVREFE);
 80011c6:	687b      	ldr	r3, [r7, #4]
 80011c8:	681b      	ldr	r3, [r3, #0]
 80011ca:	689a      	ldr	r2, [r3, #8]
 80011cc:	687b      	ldr	r3, [r7, #4]
 80011ce:	681b      	ldr	r3, [r3, #0]
 80011d0:	f442 0200 	orr.w	r2, r2, #8388608	; 0x800000
 80011d4:	609a      	str	r2, [r3, #8]
    
    if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR))
 80011d6:	683b      	ldr	r3, [r7, #0]
 80011d8:	681b      	ldr	r3, [r3, #0]
 80011da:	2b10      	cmp	r3, #16
 80011dc:	d11c      	bne.n	8001218 <HAL_ADC_ConfigChannel+0x1bc>
    {
      /* Delay for temperature sensor stabilization time */
      /* Compute number of CPU cycles to wait for */
      wait_loop_index = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 80011de:	4b14      	ldr	r3, [pc, #80]	; (8001230 <HAL_ADC_ConfigChannel+0x1d4>)
 80011e0:	681b      	ldr	r3, [r3, #0]
 80011e2:	4a14      	ldr	r2, [pc, #80]	; (8001234 <HAL_ADC_ConfigChannel+0x1d8>)
 80011e4:	fba2 2303 	umull	r2, r3, r2, r3
 80011e8:	0c9a      	lsrs	r2, r3, #18
 80011ea:	4613      	mov	r3, r2
 80011ec:	009b      	lsls	r3, r3, #2
 80011ee:	4413      	add	r3, r2
 80011f0:	005b      	lsls	r3, r3, #1
 80011f2:	60bb      	str	r3, [r7, #8]
      while(wait_loop_index != 0U)
 80011f4:	e002      	b.n	80011fc <HAL_ADC_ConfigChannel+0x1a0>
      {
        wait_loop_index--;
 80011f6:	68bb      	ldr	r3, [r7, #8]
 80011f8:	3b01      	subs	r3, #1
 80011fa:	60bb      	str	r3, [r7, #8]
      while(wait_loop_index != 0U)
 80011fc:	68bb      	ldr	r3, [r7, #8]
 80011fe:	2b00      	cmp	r3, #0
 8001200:	d1f9      	bne.n	80011f6 <HAL_ADC_ConfigChannel+0x19a>
    if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR))
 8001202:	e009      	b.n	8001218 <HAL_ADC_ConfigChannel+0x1bc>
      }
    }
  }
  /* if ADC1 Channel_18 is selected, enable VBAT measurement path */
  else if (sConfig->Channel == ADC_CHANNEL_VBAT)
 8001204:	683b      	ldr	r3, [r7, #0]
 8001206:	681b      	ldr	r3, [r3, #0]
 8001208:	2b12      	cmp	r3, #18
 800120a:	d105      	bne.n	8001218 <HAL_ADC_ConfigChannel+0x1bc>
  {
    SET_BIT(SYSCFG->CFGR1, SYSCFG_CFGR1_VBAT);
 800120c:	4b0a      	ldr	r3, [pc, #40]	; (8001238 <HAL_ADC_ConfigChannel+0x1dc>)
 800120e:	681b      	ldr	r3, [r3, #0]
 8001210:	4a09      	ldr	r2, [pc, #36]	; (8001238 <HAL_ADC_ConfigChannel+0x1dc>)
 8001212:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8001216:	6013      	str	r3, [r2, #0]
  }

   
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8001218:	687b      	ldr	r3, [r7, #4]
 800121a:	2200      	movs	r2, #0
 800121c:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  
  /* Return function status */
  return tmp_hal_status;
 8001220:	7bfb      	ldrb	r3, [r7, #15]
}
 8001222:	4618      	mov	r0, r3
 8001224:	3714      	adds	r7, #20
 8001226:	46bd      	mov	sp, r7
 8001228:	f85d 7b04 	ldr.w	r7, [sp], #4
 800122c:	4770      	bx	lr
 800122e:	bf00      	nop
 8001230:	20000000 	.word	0x20000000
 8001234:	431bde83 	.word	0x431bde83
 8001238:	40010000 	.word	0x40010000

0800123c <ADC_ConversionStop_Disable>:
  * @brief  Stop ADC conversion and disable the selected ADC
  * @param  hadc ADC handle
  * @retval HAL status.
  */
static HAL_StatusTypeDef ADC_ConversionStop_Disable(ADC_HandleTypeDef* hadc)
{
 800123c:	b580      	push	{r7, lr}
 800123e:	b084      	sub	sp, #16
 8001240:	af00      	add	r7, sp, #0
 8001242:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8001244:	2300      	movs	r3, #0
 8001246:	60fb      	str	r3, [r7, #12]
  
  /* Verification if ADC is not already disabled:                             */
  if (ADC_IS_ENABLE(hadc) != RESET)
 8001248:	687b      	ldr	r3, [r7, #4]
 800124a:	681b      	ldr	r3, [r3, #0]
 800124c:	689b      	ldr	r3, [r3, #8]
 800124e:	f003 0301 	and.w	r3, r3, #1
 8001252:	2b01      	cmp	r3, #1
 8001254:	d12e      	bne.n	80012b4 <ADC_ConversionStop_Disable+0x78>
  {
    /* Disable the ADC peripheral */
    __HAL_ADC_DISABLE(hadc);
 8001256:	687b      	ldr	r3, [r7, #4]
 8001258:	681b      	ldr	r3, [r3, #0]
 800125a:	689a      	ldr	r2, [r3, #8]
 800125c:	687b      	ldr	r3, [r7, #4]
 800125e:	681b      	ldr	r3, [r3, #0]
 8001260:	f022 0201 	bic.w	r2, r2, #1
 8001264:	609a      	str	r2, [r3, #8]
     
    /* Get tick count */
    tickstart = HAL_GetTick();
 8001266:	f7ff fdf1 	bl	8000e4c <HAL_GetTick>
 800126a:	60f8      	str	r0, [r7, #12]
    
    /* Wait for ADC effectively disabled */
    while(ADC_IS_ENABLE(hadc) != RESET)
 800126c:	e01b      	b.n	80012a6 <ADC_ConversionStop_Disable+0x6a>
    {
      if((HAL_GetTick() - tickstart) > ADC_DISABLE_TIMEOUT)
 800126e:	f7ff fded 	bl	8000e4c <HAL_GetTick>
 8001272:	4602      	mov	r2, r0
 8001274:	68fb      	ldr	r3, [r7, #12]
 8001276:	1ad3      	subs	r3, r2, r3
 8001278:	2b02      	cmp	r3, #2
 800127a:	d914      	bls.n	80012a6 <ADC_ConversionStop_Disable+0x6a>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(ADC_IS_ENABLE(hadc) != RESET)
 800127c:	687b      	ldr	r3, [r7, #4]
 800127e:	681b      	ldr	r3, [r3, #0]
 8001280:	689b      	ldr	r3, [r3, #8]
 8001282:	f003 0301 	and.w	r3, r3, #1
 8001286:	2b01      	cmp	r3, #1
 8001288:	d10d      	bne.n	80012a6 <ADC_ConversionStop_Disable+0x6a>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800128a:	687b      	ldr	r3, [r7, #4]
 800128c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800128e:	f043 0210 	orr.w	r2, r3, #16
 8001292:	687b      	ldr	r3, [r7, #4]
 8001294:	629a      	str	r2, [r3, #40]	; 0x28

          /* Set ADC error code to ADC IP internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001296:	687b      	ldr	r3, [r7, #4]
 8001298:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800129a:	f043 0201 	orr.w	r2, r3, #1
 800129e:	687b      	ldr	r3, [r7, #4]
 80012a0:	62da      	str	r2, [r3, #44]	; 0x2c

          return HAL_ERROR;
 80012a2:	2301      	movs	r3, #1
 80012a4:	e007      	b.n	80012b6 <ADC_ConversionStop_Disable+0x7a>
    while(ADC_IS_ENABLE(hadc) != RESET)
 80012a6:	687b      	ldr	r3, [r7, #4]
 80012a8:	681b      	ldr	r3, [r3, #0]
 80012aa:	689b      	ldr	r3, [r3, #8]
 80012ac:	f003 0301 	and.w	r3, r3, #1
 80012b0:	2b01      	cmp	r3, #1
 80012b2:	d0dc      	beq.n	800126e <ADC_ConversionStop_Disable+0x32>
      }
    }
  }
  
  /* Return HAL status */
  return HAL_OK;
 80012b4:	2300      	movs	r3, #0
}
 80012b6:	4618      	mov	r0, r3
 80012b8:	3710      	adds	r7, #16
 80012ba:	46bd      	mov	sp, r7
 80012bc:	bd80      	pop	{r7, pc}
	...

080012c0 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80012c0:	b480      	push	{r7}
 80012c2:	b085      	sub	sp, #20
 80012c4:	af00      	add	r7, sp, #0
 80012c6:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80012c8:	687b      	ldr	r3, [r7, #4]
 80012ca:	f003 0307 	and.w	r3, r3, #7
 80012ce:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80012d0:	4b0c      	ldr	r3, [pc, #48]	; (8001304 <__NVIC_SetPriorityGrouping+0x44>)
 80012d2:	68db      	ldr	r3, [r3, #12]
 80012d4:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80012d6:	68ba      	ldr	r2, [r7, #8]
 80012d8:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80012dc:	4013      	ands	r3, r2
 80012de:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80012e0:	68fb      	ldr	r3, [r7, #12]
 80012e2:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80012e4:	68bb      	ldr	r3, [r7, #8]
 80012e6:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80012e8:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80012ec:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80012f0:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80012f2:	4a04      	ldr	r2, [pc, #16]	; (8001304 <__NVIC_SetPriorityGrouping+0x44>)
 80012f4:	68bb      	ldr	r3, [r7, #8]
 80012f6:	60d3      	str	r3, [r2, #12]
}
 80012f8:	bf00      	nop
 80012fa:	3714      	adds	r7, #20
 80012fc:	46bd      	mov	sp, r7
 80012fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001302:	4770      	bx	lr
 8001304:	e000ed00 	.word	0xe000ed00

08001308 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001308:	b480      	push	{r7}
 800130a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 800130c:	4b04      	ldr	r3, [pc, #16]	; (8001320 <__NVIC_GetPriorityGrouping+0x18>)
 800130e:	68db      	ldr	r3, [r3, #12]
 8001310:	0a1b      	lsrs	r3, r3, #8
 8001312:	f003 0307 	and.w	r3, r3, #7
}
 8001316:	4618      	mov	r0, r3
 8001318:	46bd      	mov	sp, r7
 800131a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800131e:	4770      	bx	lr
 8001320:	e000ed00 	.word	0xe000ed00

08001324 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001324:	b480      	push	{r7}
 8001326:	b083      	sub	sp, #12
 8001328:	af00      	add	r7, sp, #0
 800132a:	4603      	mov	r3, r0
 800132c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800132e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001332:	2b00      	cmp	r3, #0
 8001334:	db0b      	blt.n	800134e <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001336:	79fb      	ldrb	r3, [r7, #7]
 8001338:	f003 021f 	and.w	r2, r3, #31
 800133c:	4907      	ldr	r1, [pc, #28]	; (800135c <__NVIC_EnableIRQ+0x38>)
 800133e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001342:	095b      	lsrs	r3, r3, #5
 8001344:	2001      	movs	r0, #1
 8001346:	fa00 f202 	lsl.w	r2, r0, r2
 800134a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 800134e:	bf00      	nop
 8001350:	370c      	adds	r7, #12
 8001352:	46bd      	mov	sp, r7
 8001354:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001358:	4770      	bx	lr
 800135a:	bf00      	nop
 800135c:	e000e100 	.word	0xe000e100

08001360 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001360:	b480      	push	{r7}
 8001362:	b083      	sub	sp, #12
 8001364:	af00      	add	r7, sp, #0
 8001366:	4603      	mov	r3, r0
 8001368:	6039      	str	r1, [r7, #0]
 800136a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800136c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001370:	2b00      	cmp	r3, #0
 8001372:	db0a      	blt.n	800138a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001374:	683b      	ldr	r3, [r7, #0]
 8001376:	b2da      	uxtb	r2, r3
 8001378:	490c      	ldr	r1, [pc, #48]	; (80013ac <__NVIC_SetPriority+0x4c>)
 800137a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800137e:	0112      	lsls	r2, r2, #4
 8001380:	b2d2      	uxtb	r2, r2
 8001382:	440b      	add	r3, r1
 8001384:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001388:	e00a      	b.n	80013a0 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800138a:	683b      	ldr	r3, [r7, #0]
 800138c:	b2da      	uxtb	r2, r3
 800138e:	4908      	ldr	r1, [pc, #32]	; (80013b0 <__NVIC_SetPriority+0x50>)
 8001390:	79fb      	ldrb	r3, [r7, #7]
 8001392:	f003 030f 	and.w	r3, r3, #15
 8001396:	3b04      	subs	r3, #4
 8001398:	0112      	lsls	r2, r2, #4
 800139a:	b2d2      	uxtb	r2, r2
 800139c:	440b      	add	r3, r1
 800139e:	761a      	strb	r2, [r3, #24]
}
 80013a0:	bf00      	nop
 80013a2:	370c      	adds	r7, #12
 80013a4:	46bd      	mov	sp, r7
 80013a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013aa:	4770      	bx	lr
 80013ac:	e000e100 	.word	0xe000e100
 80013b0:	e000ed00 	.word	0xe000ed00

080013b4 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80013b4:	b480      	push	{r7}
 80013b6:	b089      	sub	sp, #36	; 0x24
 80013b8:	af00      	add	r7, sp, #0
 80013ba:	60f8      	str	r0, [r7, #12]
 80013bc:	60b9      	str	r1, [r7, #8]
 80013be:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80013c0:	68fb      	ldr	r3, [r7, #12]
 80013c2:	f003 0307 	and.w	r3, r3, #7
 80013c6:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80013c8:	69fb      	ldr	r3, [r7, #28]
 80013ca:	f1c3 0307 	rsb	r3, r3, #7
 80013ce:	2b04      	cmp	r3, #4
 80013d0:	bf28      	it	cs
 80013d2:	2304      	movcs	r3, #4
 80013d4:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80013d6:	69fb      	ldr	r3, [r7, #28]
 80013d8:	3304      	adds	r3, #4
 80013da:	2b06      	cmp	r3, #6
 80013dc:	d902      	bls.n	80013e4 <NVIC_EncodePriority+0x30>
 80013de:	69fb      	ldr	r3, [r7, #28]
 80013e0:	3b03      	subs	r3, #3
 80013e2:	e000      	b.n	80013e6 <NVIC_EncodePriority+0x32>
 80013e4:	2300      	movs	r3, #0
 80013e6:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80013e8:	f04f 32ff 	mov.w	r2, #4294967295
 80013ec:	69bb      	ldr	r3, [r7, #24]
 80013ee:	fa02 f303 	lsl.w	r3, r2, r3
 80013f2:	43da      	mvns	r2, r3
 80013f4:	68bb      	ldr	r3, [r7, #8]
 80013f6:	401a      	ands	r2, r3
 80013f8:	697b      	ldr	r3, [r7, #20]
 80013fa:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80013fc:	f04f 31ff 	mov.w	r1, #4294967295
 8001400:	697b      	ldr	r3, [r7, #20]
 8001402:	fa01 f303 	lsl.w	r3, r1, r3
 8001406:	43d9      	mvns	r1, r3
 8001408:	687b      	ldr	r3, [r7, #4]
 800140a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800140c:	4313      	orrs	r3, r2
         );
}
 800140e:	4618      	mov	r0, r3
 8001410:	3724      	adds	r7, #36	; 0x24
 8001412:	46bd      	mov	sp, r7
 8001414:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001418:	4770      	bx	lr
	...

0800141c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 800141c:	b580      	push	{r7, lr}
 800141e:	b082      	sub	sp, #8
 8001420:	af00      	add	r7, sp, #0
 8001422:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001424:	687b      	ldr	r3, [r7, #4]
 8001426:	3b01      	subs	r3, #1
 8001428:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 800142c:	d301      	bcc.n	8001432 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800142e:	2301      	movs	r3, #1
 8001430:	e00f      	b.n	8001452 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001432:	4a0a      	ldr	r2, [pc, #40]	; (800145c <SysTick_Config+0x40>)
 8001434:	687b      	ldr	r3, [r7, #4]
 8001436:	3b01      	subs	r3, #1
 8001438:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800143a:	210f      	movs	r1, #15
 800143c:	f04f 30ff 	mov.w	r0, #4294967295
 8001440:	f7ff ff8e 	bl	8001360 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001444:	4b05      	ldr	r3, [pc, #20]	; (800145c <SysTick_Config+0x40>)
 8001446:	2200      	movs	r2, #0
 8001448:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800144a:	4b04      	ldr	r3, [pc, #16]	; (800145c <SysTick_Config+0x40>)
 800144c:	2207      	movs	r2, #7
 800144e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001450:	2300      	movs	r3, #0
}
 8001452:	4618      	mov	r0, r3
 8001454:	3708      	adds	r7, #8
 8001456:	46bd      	mov	sp, r7
 8001458:	bd80      	pop	{r7, pc}
 800145a:	bf00      	nop
 800145c:	e000e010 	.word	0xe000e010

08001460 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001460:	b580      	push	{r7, lr}
 8001462:	b082      	sub	sp, #8
 8001464:	af00      	add	r7, sp, #0
 8001466:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001468:	6878      	ldr	r0, [r7, #4]
 800146a:	f7ff ff29 	bl	80012c0 <__NVIC_SetPriorityGrouping>
}
 800146e:	bf00      	nop
 8001470:	3708      	adds	r7, #8
 8001472:	46bd      	mov	sp, r7
 8001474:	bd80      	pop	{r7, pc}

08001476 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15 as described in the table CORTEX_NVIC_Priority_Table
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001476:	b580      	push	{r7, lr}
 8001478:	b086      	sub	sp, #24
 800147a:	af00      	add	r7, sp, #0
 800147c:	4603      	mov	r3, r0
 800147e:	60b9      	str	r1, [r7, #8]
 8001480:	607a      	str	r2, [r7, #4]
 8001482:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001484:	2300      	movs	r3, #0
 8001486:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001488:	f7ff ff3e 	bl	8001308 <__NVIC_GetPriorityGrouping>
 800148c:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800148e:	687a      	ldr	r2, [r7, #4]
 8001490:	68b9      	ldr	r1, [r7, #8]
 8001492:	6978      	ldr	r0, [r7, #20]
 8001494:	f7ff ff8e 	bl	80013b4 <NVIC_EncodePriority>
 8001498:	4602      	mov	r2, r0
 800149a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800149e:	4611      	mov	r1, r2
 80014a0:	4618      	mov	r0, r3
 80014a2:	f7ff ff5d 	bl	8001360 <__NVIC_SetPriority>
}
 80014a6:	bf00      	nop
 80014a8:	3718      	adds	r7, #24
 80014aa:	46bd      	mov	sp, r7
 80014ac:	bd80      	pop	{r7, pc}

080014ae <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f3xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80014ae:	b580      	push	{r7, lr}
 80014b0:	b082      	sub	sp, #8
 80014b2:	af00      	add	r7, sp, #0
 80014b4:	4603      	mov	r3, r0
 80014b6:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80014b8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80014bc:	4618      	mov	r0, r3
 80014be:	f7ff ff31 	bl	8001324 <__NVIC_EnableIRQ>
}
 80014c2:	bf00      	nop
 80014c4:	3708      	adds	r7, #8
 80014c6:	46bd      	mov	sp, r7
 80014c8:	bd80      	pop	{r7, pc}

080014ca <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80014ca:	b580      	push	{r7, lr}
 80014cc:	b082      	sub	sp, #8
 80014ce:	af00      	add	r7, sp, #0
 80014d0:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80014d2:	6878      	ldr	r0, [r7, #4]
 80014d4:	f7ff ffa2 	bl	800141c <SysTick_Config>
 80014d8:	4603      	mov	r3, r0
}
 80014da:	4618      	mov	r0, r3
 80014dc:	3708      	adds	r7, #8
 80014de:	46bd      	mov	sp, r7
 80014e0:	bd80      	pop	{r7, pc}

080014e2 <HAL_DMA_Abort>:
  * @param  hdma  : pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 80014e2:	b480      	push	{r7}
 80014e4:	b083      	sub	sp, #12
 80014e6:	af00      	add	r7, sp, #0
 80014e8:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 80014ea:	687b      	ldr	r3, [r7, #4]
 80014ec:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 80014f0:	2b02      	cmp	r3, #2
 80014f2:	d008      	beq.n	8001506 <HAL_DMA_Abort+0x24>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80014f4:	687b      	ldr	r3, [r7, #4]
 80014f6:	2204      	movs	r2, #4
 80014f8:	639a      	str	r2, [r3, #56]	; 0x38
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80014fa:	687b      	ldr	r3, [r7, #4]
 80014fc:	2200      	movs	r2, #0
 80014fe:	f883 2020 	strb.w	r2, [r3, #32]
    
    return HAL_ERROR;
 8001502:	2301      	movs	r3, #1
 8001504:	e020      	b.n	8001548 <HAL_DMA_Abort+0x66>
  }
  else
  {
    /* Disable DMA IT */
     hdma->Instance->CCR &= ~(DMA_IT_TC | DMA_IT_HT | DMA_IT_TE);
 8001506:	687b      	ldr	r3, [r7, #4]
 8001508:	681b      	ldr	r3, [r3, #0]
 800150a:	681a      	ldr	r2, [r3, #0]
 800150c:	687b      	ldr	r3, [r7, #4]
 800150e:	681b      	ldr	r3, [r3, #0]
 8001510:	f022 020e 	bic.w	r2, r2, #14
 8001514:	601a      	str	r2, [r3, #0]
    
    /* Disable the channel */
    hdma->Instance->CCR &= ~DMA_CCR_EN;
 8001516:	687b      	ldr	r3, [r7, #4]
 8001518:	681b      	ldr	r3, [r3, #0]
 800151a:	681a      	ldr	r2, [r3, #0]
 800151c:	687b      	ldr	r3, [r7, #4]
 800151e:	681b      	ldr	r3, [r3, #0]
 8001520:	f022 0201 	bic.w	r2, r2, #1
 8001524:	601a      	str	r2, [r3, #0]
    
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_FLAG_GL1 << hdma->ChannelIndex);
 8001526:	687b      	ldr	r3, [r7, #4]
 8001528:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800152a:	687b      	ldr	r3, [r7, #4]
 800152c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800152e:	2101      	movs	r1, #1
 8001530:	fa01 f202 	lsl.w	r2, r1, r2
 8001534:	605a      	str	r2, [r3, #4]
  }
  /* Change the DMA state*/
  hdma->State = HAL_DMA_STATE_READY; 
 8001536:	687b      	ldr	r3, [r7, #4]
 8001538:	2201      	movs	r2, #1
 800153a:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
  
  /* Process Unlocked */
  __HAL_UNLOCK(hdma);
 800153e:	687b      	ldr	r3, [r7, #4]
 8001540:	2200      	movs	r2, #0
 8001542:	f883 2020 	strb.w	r2, [r3, #32]
  
  return HAL_OK;
 8001546:	2300      	movs	r3, #0
}
 8001548:	4618      	mov	r0, r3
 800154a:	370c      	adds	r7, #12
 800154c:	46bd      	mov	sp, r7
 800154e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001552:	4770      	bx	lr

08001554 <HAL_DMA_Abort_IT>:
  * @param  hdma  : pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{  
 8001554:	b580      	push	{r7, lr}
 8001556:	b084      	sub	sp, #16
 8001558:	af00      	add	r7, sp, #0
 800155a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800155c:	2300      	movs	r3, #0
 800155e:	73fb      	strb	r3, [r7, #15]
  
  if(HAL_DMA_STATE_BUSY != hdma->State)
 8001560:	687b      	ldr	r3, [r7, #4]
 8001562:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 8001566:	2b02      	cmp	r3, #2
 8001568:	d005      	beq.n	8001576 <HAL_DMA_Abort_IT+0x22>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 800156a:	687b      	ldr	r3, [r7, #4]
 800156c:	2204      	movs	r2, #4
 800156e:	639a      	str	r2, [r3, #56]	; 0x38
        
    status = HAL_ERROR;
 8001570:	2301      	movs	r3, #1
 8001572:	73fb      	strb	r3, [r7, #15]
 8001574:	e027      	b.n	80015c6 <HAL_DMA_Abort_IT+0x72>
  }
  else
  { 
  
    /* Disable DMA IT */
    hdma->Instance->CCR &= ~(DMA_IT_TC | DMA_IT_HT | DMA_IT_TE);
 8001576:	687b      	ldr	r3, [r7, #4]
 8001578:	681b      	ldr	r3, [r3, #0]
 800157a:	681a      	ldr	r2, [r3, #0]
 800157c:	687b      	ldr	r3, [r7, #4]
 800157e:	681b      	ldr	r3, [r3, #0]
 8001580:	f022 020e 	bic.w	r2, r2, #14
 8001584:	601a      	str	r2, [r3, #0]
    
    /* Disable the channel */
    hdma->Instance->CCR &= ~DMA_CCR_EN;
 8001586:	687b      	ldr	r3, [r7, #4]
 8001588:	681b      	ldr	r3, [r3, #0]
 800158a:	681a      	ldr	r2, [r3, #0]
 800158c:	687b      	ldr	r3, [r7, #4]
 800158e:	681b      	ldr	r3, [r3, #0]
 8001590:	f022 0201 	bic.w	r2, r2, #1
 8001594:	601a      	str	r2, [r3, #0]
    
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = DMA_FLAG_GL1 << hdma->ChannelIndex;
 8001596:	687b      	ldr	r3, [r7, #4]
 8001598:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800159a:	687b      	ldr	r3, [r7, #4]
 800159c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800159e:	2101      	movs	r1, #1
 80015a0:	fa01 f202 	lsl.w	r2, r1, r2
 80015a4:	605a      	str	r2, [r3, #4]
    
    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 80015a6:	687b      	ldr	r3, [r7, #4]
 80015a8:	2201      	movs	r2, #1
 80015aa:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80015ae:	687b      	ldr	r3, [r7, #4]
 80015b0:	2200      	movs	r2, #0
 80015b2:	f883 2020 	strb.w	r2, [r3, #32]
    
    /* Call User Abort callback */ 
    if(hdma->XferAbortCallback != NULL)
 80015b6:	687b      	ldr	r3, [r7, #4]
 80015b8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80015ba:	2b00      	cmp	r3, #0
 80015bc:	d003      	beq.n	80015c6 <HAL_DMA_Abort_IT+0x72>
    {
      hdma->XferAbortCallback(hdma);
 80015be:	687b      	ldr	r3, [r7, #4]
 80015c0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80015c2:	6878      	ldr	r0, [r7, #4]
 80015c4:	4798      	blx	r3
    } 
  }
  return status;
 80015c6:	7bfb      	ldrb	r3, [r7, #15]
}
 80015c8:	4618      	mov	r0, r3
 80015ca:	3710      	adds	r7, #16
 80015cc:	46bd      	mov	sp, r7
 80015ce:	bd80      	pop	{r7, pc}

080015d0 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80015d0:	b480      	push	{r7}
 80015d2:	b087      	sub	sp, #28
 80015d4:	af00      	add	r7, sp, #0
 80015d6:	6078      	str	r0, [r7, #4]
 80015d8:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 80015da:	2300      	movs	r3, #0
 80015dc:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80015de:	e154      	b.n	800188a <HAL_GPIO_Init+0x2ba>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 80015e0:	683b      	ldr	r3, [r7, #0]
 80015e2:	681a      	ldr	r2, [r3, #0]
 80015e4:	2101      	movs	r1, #1
 80015e6:	697b      	ldr	r3, [r7, #20]
 80015e8:	fa01 f303 	lsl.w	r3, r1, r3
 80015ec:	4013      	ands	r3, r2
 80015ee:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 80015f0:	68fb      	ldr	r3, [r7, #12]
 80015f2:	2b00      	cmp	r3, #0
 80015f4:	f000 8146 	beq.w	8001884 <HAL_GPIO_Init+0x2b4>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 80015f8:	683b      	ldr	r3, [r7, #0]
 80015fa:	685b      	ldr	r3, [r3, #4]
 80015fc:	f003 0303 	and.w	r3, r3, #3
 8001600:	2b01      	cmp	r3, #1
 8001602:	d005      	beq.n	8001610 <HAL_GPIO_Init+0x40>
 8001604:	683b      	ldr	r3, [r7, #0]
 8001606:	685b      	ldr	r3, [r3, #4]
 8001608:	f003 0303 	and.w	r3, r3, #3
 800160c:	2b02      	cmp	r3, #2
 800160e:	d130      	bne.n	8001672 <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8001610:	687b      	ldr	r3, [r7, #4]
 8001612:	689b      	ldr	r3, [r3, #8]
 8001614:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2u));
 8001616:	697b      	ldr	r3, [r7, #20]
 8001618:	005b      	lsls	r3, r3, #1
 800161a:	2203      	movs	r2, #3
 800161c:	fa02 f303 	lsl.w	r3, r2, r3
 8001620:	43db      	mvns	r3, r3
 8001622:	693a      	ldr	r2, [r7, #16]
 8001624:	4013      	ands	r3, r2
 8001626:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8001628:	683b      	ldr	r3, [r7, #0]
 800162a:	68da      	ldr	r2, [r3, #12]
 800162c:	697b      	ldr	r3, [r7, #20]
 800162e:	005b      	lsls	r3, r3, #1
 8001630:	fa02 f303 	lsl.w	r3, r2, r3
 8001634:	693a      	ldr	r2, [r7, #16]
 8001636:	4313      	orrs	r3, r2
 8001638:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 800163a:	687b      	ldr	r3, [r7, #4]
 800163c:	693a      	ldr	r2, [r7, #16]
 800163e:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001640:	687b      	ldr	r3, [r7, #4]
 8001642:	685b      	ldr	r3, [r3, #4]
 8001644:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8001646:	2201      	movs	r2, #1
 8001648:	697b      	ldr	r3, [r7, #20]
 800164a:	fa02 f303 	lsl.w	r3, r2, r3
 800164e:	43db      	mvns	r3, r3
 8001650:	693a      	ldr	r2, [r7, #16]
 8001652:	4013      	ands	r3, r2
 8001654:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8001656:	683b      	ldr	r3, [r7, #0]
 8001658:	685b      	ldr	r3, [r3, #4]
 800165a:	091b      	lsrs	r3, r3, #4
 800165c:	f003 0201 	and.w	r2, r3, #1
 8001660:	697b      	ldr	r3, [r7, #20]
 8001662:	fa02 f303 	lsl.w	r3, r2, r3
 8001666:	693a      	ldr	r2, [r7, #16]
 8001668:	4313      	orrs	r3, r2
 800166a:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 800166c:	687b      	ldr	r3, [r7, #4]
 800166e:	693a      	ldr	r2, [r7, #16]
 8001670:	605a      	str	r2, [r3, #4]
      }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001672:	683b      	ldr	r3, [r7, #0]
 8001674:	685b      	ldr	r3, [r3, #4]
 8001676:	f003 0303 	and.w	r3, r3, #3
 800167a:	2b03      	cmp	r3, #3
 800167c:	d017      	beq.n	80016ae <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 800167e:	687b      	ldr	r3, [r7, #4]
 8001680:	68db      	ldr	r3, [r3, #12]
 8001682:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2u));
 8001684:	697b      	ldr	r3, [r7, #20]
 8001686:	005b      	lsls	r3, r3, #1
 8001688:	2203      	movs	r2, #3
 800168a:	fa02 f303 	lsl.w	r3, r2, r3
 800168e:	43db      	mvns	r3, r3
 8001690:	693a      	ldr	r2, [r7, #16]
 8001692:	4013      	ands	r3, r2
 8001694:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2u));
 8001696:	683b      	ldr	r3, [r7, #0]
 8001698:	689a      	ldr	r2, [r3, #8]
 800169a:	697b      	ldr	r3, [r7, #20]
 800169c:	005b      	lsls	r3, r3, #1
 800169e:	fa02 f303 	lsl.w	r3, r2, r3
 80016a2:	693a      	ldr	r2, [r7, #16]
 80016a4:	4313      	orrs	r3, r2
 80016a6:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 80016a8:	687b      	ldr	r3, [r7, #4]
 80016aa:	693a      	ldr	r2, [r7, #16]
 80016ac:	60da      	str	r2, [r3, #12]
      }

      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80016ae:	683b      	ldr	r3, [r7, #0]
 80016b0:	685b      	ldr	r3, [r3, #4]
 80016b2:	f003 0303 	and.w	r3, r3, #3
 80016b6:	2b02      	cmp	r3, #2
 80016b8:	d123      	bne.n	8001702 <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 80016ba:	697b      	ldr	r3, [r7, #20]
 80016bc:	08da      	lsrs	r2, r3, #3
 80016be:	687b      	ldr	r3, [r7, #4]
 80016c0:	3208      	adds	r2, #8
 80016c2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80016c6:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 80016c8:	697b      	ldr	r3, [r7, #20]
 80016ca:	f003 0307 	and.w	r3, r3, #7
 80016ce:	009b      	lsls	r3, r3, #2
 80016d0:	220f      	movs	r2, #15
 80016d2:	fa02 f303 	lsl.w	r3, r2, r3
 80016d6:	43db      	mvns	r3, r3
 80016d8:	693a      	ldr	r2, [r7, #16]
 80016da:	4013      	ands	r3, r2
 80016dc:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 80016de:	683b      	ldr	r3, [r7, #0]
 80016e0:	691a      	ldr	r2, [r3, #16]
 80016e2:	697b      	ldr	r3, [r7, #20]
 80016e4:	f003 0307 	and.w	r3, r3, #7
 80016e8:	009b      	lsls	r3, r3, #2
 80016ea:	fa02 f303 	lsl.w	r3, r2, r3
 80016ee:	693a      	ldr	r2, [r7, #16]
 80016f0:	4313      	orrs	r3, r2
 80016f2:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 80016f4:	697b      	ldr	r3, [r7, #20]
 80016f6:	08da      	lsrs	r2, r3, #3
 80016f8:	687b      	ldr	r3, [r7, #4]
 80016fa:	3208      	adds	r2, #8
 80016fc:	6939      	ldr	r1, [r7, #16]
 80016fe:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001702:	687b      	ldr	r3, [r7, #4]
 8001704:	681b      	ldr	r3, [r3, #0]
 8001706:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2u));
 8001708:	697b      	ldr	r3, [r7, #20]
 800170a:	005b      	lsls	r3, r3, #1
 800170c:	2203      	movs	r2, #3
 800170e:	fa02 f303 	lsl.w	r3, r2, r3
 8001712:	43db      	mvns	r3, r3
 8001714:	693a      	ldr	r2, [r7, #16]
 8001716:	4013      	ands	r3, r2
 8001718:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 800171a:	683b      	ldr	r3, [r7, #0]
 800171c:	685b      	ldr	r3, [r3, #4]
 800171e:	f003 0203 	and.w	r2, r3, #3
 8001722:	697b      	ldr	r3, [r7, #20]
 8001724:	005b      	lsls	r3, r3, #1
 8001726:	fa02 f303 	lsl.w	r3, r2, r3
 800172a:	693a      	ldr	r2, [r7, #16]
 800172c:	4313      	orrs	r3, r2
 800172e:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8001730:	687b      	ldr	r3, [r7, #4]
 8001732:	693a      	ldr	r2, [r7, #16]
 8001734:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8001736:	683b      	ldr	r3, [r7, #0]
 8001738:	685b      	ldr	r3, [r3, #4]
 800173a:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 800173e:	2b00      	cmp	r3, #0
 8001740:	f000 80a0 	beq.w	8001884 <HAL_GPIO_Init+0x2b4>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001744:	4b58      	ldr	r3, [pc, #352]	; (80018a8 <HAL_GPIO_Init+0x2d8>)
 8001746:	699b      	ldr	r3, [r3, #24]
 8001748:	4a57      	ldr	r2, [pc, #348]	; (80018a8 <HAL_GPIO_Init+0x2d8>)
 800174a:	f043 0301 	orr.w	r3, r3, #1
 800174e:	6193      	str	r3, [r2, #24]
 8001750:	4b55      	ldr	r3, [pc, #340]	; (80018a8 <HAL_GPIO_Init+0x2d8>)
 8001752:	699b      	ldr	r3, [r3, #24]
 8001754:	f003 0301 	and.w	r3, r3, #1
 8001758:	60bb      	str	r3, [r7, #8]
 800175a:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 800175c:	4a53      	ldr	r2, [pc, #332]	; (80018ac <HAL_GPIO_Init+0x2dc>)
 800175e:	697b      	ldr	r3, [r7, #20]
 8001760:	089b      	lsrs	r3, r3, #2
 8001762:	3302      	adds	r3, #2
 8001764:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001768:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 800176a:	697b      	ldr	r3, [r7, #20]
 800176c:	f003 0303 	and.w	r3, r3, #3
 8001770:	009b      	lsls	r3, r3, #2
 8001772:	220f      	movs	r2, #15
 8001774:	fa02 f303 	lsl.w	r3, r2, r3
 8001778:	43db      	mvns	r3, r3
 800177a:	693a      	ldr	r2, [r7, #16]
 800177c:	4013      	ands	r3, r2
 800177e:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8001780:	687b      	ldr	r3, [r7, #4]
 8001782:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 8001786:	d019      	beq.n	80017bc <HAL_GPIO_Init+0x1ec>
 8001788:	687b      	ldr	r3, [r7, #4]
 800178a:	4a49      	ldr	r2, [pc, #292]	; (80018b0 <HAL_GPIO_Init+0x2e0>)
 800178c:	4293      	cmp	r3, r2
 800178e:	d013      	beq.n	80017b8 <HAL_GPIO_Init+0x1e8>
 8001790:	687b      	ldr	r3, [r7, #4]
 8001792:	4a48      	ldr	r2, [pc, #288]	; (80018b4 <HAL_GPIO_Init+0x2e4>)
 8001794:	4293      	cmp	r3, r2
 8001796:	d00d      	beq.n	80017b4 <HAL_GPIO_Init+0x1e4>
 8001798:	687b      	ldr	r3, [r7, #4]
 800179a:	4a47      	ldr	r2, [pc, #284]	; (80018b8 <HAL_GPIO_Init+0x2e8>)
 800179c:	4293      	cmp	r3, r2
 800179e:	d007      	beq.n	80017b0 <HAL_GPIO_Init+0x1e0>
 80017a0:	687b      	ldr	r3, [r7, #4]
 80017a2:	4a46      	ldr	r2, [pc, #280]	; (80018bc <HAL_GPIO_Init+0x2ec>)
 80017a4:	4293      	cmp	r3, r2
 80017a6:	d101      	bne.n	80017ac <HAL_GPIO_Init+0x1dc>
 80017a8:	2304      	movs	r3, #4
 80017aa:	e008      	b.n	80017be <HAL_GPIO_Init+0x1ee>
 80017ac:	2305      	movs	r3, #5
 80017ae:	e006      	b.n	80017be <HAL_GPIO_Init+0x1ee>
 80017b0:	2303      	movs	r3, #3
 80017b2:	e004      	b.n	80017be <HAL_GPIO_Init+0x1ee>
 80017b4:	2302      	movs	r3, #2
 80017b6:	e002      	b.n	80017be <HAL_GPIO_Init+0x1ee>
 80017b8:	2301      	movs	r3, #1
 80017ba:	e000      	b.n	80017be <HAL_GPIO_Init+0x1ee>
 80017bc:	2300      	movs	r3, #0
 80017be:	697a      	ldr	r2, [r7, #20]
 80017c0:	f002 0203 	and.w	r2, r2, #3
 80017c4:	0092      	lsls	r2, r2, #2
 80017c6:	4093      	lsls	r3, r2
 80017c8:	693a      	ldr	r2, [r7, #16]
 80017ca:	4313      	orrs	r3, r2
 80017cc:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 80017ce:	4937      	ldr	r1, [pc, #220]	; (80018ac <HAL_GPIO_Init+0x2dc>)
 80017d0:	697b      	ldr	r3, [r7, #20]
 80017d2:	089b      	lsrs	r3, r3, #2
 80017d4:	3302      	adds	r3, #2
 80017d6:	693a      	ldr	r2, [r7, #16]
 80017d8:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80017dc:	4b38      	ldr	r3, [pc, #224]	; (80018c0 <HAL_GPIO_Init+0x2f0>)
 80017de:	681b      	ldr	r3, [r3, #0]
 80017e0:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80017e2:	68fb      	ldr	r3, [r7, #12]
 80017e4:	43db      	mvns	r3, r3
 80017e6:	693a      	ldr	r2, [r7, #16]
 80017e8:	4013      	ands	r3, r2
 80017ea:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 80017ec:	683b      	ldr	r3, [r7, #0]
 80017ee:	685b      	ldr	r3, [r3, #4]
 80017f0:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80017f4:	2b00      	cmp	r3, #0
 80017f6:	d003      	beq.n	8001800 <HAL_GPIO_Init+0x230>
        {
          temp |= iocurrent;
 80017f8:	693a      	ldr	r2, [r7, #16]
 80017fa:	68fb      	ldr	r3, [r7, #12]
 80017fc:	4313      	orrs	r3, r2
 80017fe:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR = temp;
 8001800:	4a2f      	ldr	r2, [pc, #188]	; (80018c0 <HAL_GPIO_Init+0x2f0>)
 8001802:	693b      	ldr	r3, [r7, #16]
 8001804:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 8001806:	4b2e      	ldr	r3, [pc, #184]	; (80018c0 <HAL_GPIO_Init+0x2f0>)
 8001808:	685b      	ldr	r3, [r3, #4]
 800180a:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800180c:	68fb      	ldr	r3, [r7, #12]
 800180e:	43db      	mvns	r3, r3
 8001810:	693a      	ldr	r2, [r7, #16]
 8001812:	4013      	ands	r3, r2
 8001814:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8001816:	683b      	ldr	r3, [r7, #0]
 8001818:	685b      	ldr	r3, [r3, #4]
 800181a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800181e:	2b00      	cmp	r3, #0
 8001820:	d003      	beq.n	800182a <HAL_GPIO_Init+0x25a>
        {
          temp |= iocurrent;
 8001822:	693a      	ldr	r2, [r7, #16]
 8001824:	68fb      	ldr	r3, [r7, #12]
 8001826:	4313      	orrs	r3, r2
 8001828:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR = temp;
 800182a:	4a25      	ldr	r2, [pc, #148]	; (80018c0 <HAL_GPIO_Init+0x2f0>)
 800182c:	693b      	ldr	r3, [r7, #16]
 800182e:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8001830:	4b23      	ldr	r3, [pc, #140]	; (80018c0 <HAL_GPIO_Init+0x2f0>)
 8001832:	689b      	ldr	r3, [r3, #8]
 8001834:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001836:	68fb      	ldr	r3, [r7, #12]
 8001838:	43db      	mvns	r3, r3
 800183a:	693a      	ldr	r2, [r7, #16]
 800183c:	4013      	ands	r3, r2
 800183e:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8001840:	683b      	ldr	r3, [r7, #0]
 8001842:	685b      	ldr	r3, [r3, #4]
 8001844:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001848:	2b00      	cmp	r3, #0
 800184a:	d003      	beq.n	8001854 <HAL_GPIO_Init+0x284>
        {
          temp |= iocurrent;
 800184c:	693a      	ldr	r2, [r7, #16]
 800184e:	68fb      	ldr	r3, [r7, #12]
 8001850:	4313      	orrs	r3, r2
 8001852:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR = temp;
 8001854:	4a1a      	ldr	r2, [pc, #104]	; (80018c0 <HAL_GPIO_Init+0x2f0>)
 8001856:	693b      	ldr	r3, [r7, #16]
 8001858:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 800185a:	4b19      	ldr	r3, [pc, #100]	; (80018c0 <HAL_GPIO_Init+0x2f0>)
 800185c:	68db      	ldr	r3, [r3, #12]
 800185e:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001860:	68fb      	ldr	r3, [r7, #12]
 8001862:	43db      	mvns	r3, r3
 8001864:	693a      	ldr	r2, [r7, #16]
 8001866:	4013      	ands	r3, r2
 8001868:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 800186a:	683b      	ldr	r3, [r7, #0]
 800186c:	685b      	ldr	r3, [r3, #4]
 800186e:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001872:	2b00      	cmp	r3, #0
 8001874:	d003      	beq.n	800187e <HAL_GPIO_Init+0x2ae>
        {
          temp |= iocurrent;
 8001876:	693a      	ldr	r2, [r7, #16]
 8001878:	68fb      	ldr	r3, [r7, #12]
 800187a:	4313      	orrs	r3, r2
 800187c:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR = temp;
 800187e:	4a10      	ldr	r2, [pc, #64]	; (80018c0 <HAL_GPIO_Init+0x2f0>)
 8001880:	693b      	ldr	r3, [r7, #16]
 8001882:	60d3      	str	r3, [r2, #12]
      }
    }

    position++;
 8001884:	697b      	ldr	r3, [r7, #20]
 8001886:	3301      	adds	r3, #1
 8001888:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800188a:	683b      	ldr	r3, [r7, #0]
 800188c:	681a      	ldr	r2, [r3, #0]
 800188e:	697b      	ldr	r3, [r7, #20]
 8001890:	fa22 f303 	lsr.w	r3, r2, r3
 8001894:	2b00      	cmp	r3, #0
 8001896:	f47f aea3 	bne.w	80015e0 <HAL_GPIO_Init+0x10>
  }
}
 800189a:	bf00      	nop
 800189c:	bf00      	nop
 800189e:	371c      	adds	r7, #28
 80018a0:	46bd      	mov	sp, r7
 80018a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018a6:	4770      	bx	lr
 80018a8:	40021000 	.word	0x40021000
 80018ac:	40010000 	.word	0x40010000
 80018b0:	48000400 	.word	0x48000400
 80018b4:	48000800 	.word	0x48000800
 80018b8:	48000c00 	.word	0x48000c00
 80018bc:	48001000 	.word	0x48001000
 80018c0:	40010400 	.word	0x40010400

080018c4 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80018c4:	b480      	push	{r7}
 80018c6:	b083      	sub	sp, #12
 80018c8:	af00      	add	r7, sp, #0
 80018ca:	6078      	str	r0, [r7, #4]
 80018cc:	460b      	mov	r3, r1
 80018ce:	807b      	strh	r3, [r7, #2]
 80018d0:	4613      	mov	r3, r2
 80018d2:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 80018d4:	787b      	ldrb	r3, [r7, #1]
 80018d6:	2b00      	cmp	r3, #0
 80018d8:	d003      	beq.n	80018e2 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 80018da:	887a      	ldrh	r2, [r7, #2]
 80018dc:	687b      	ldr	r3, [r7, #4]
 80018de:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 80018e0:	e002      	b.n	80018e8 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 80018e2:	887a      	ldrh	r2, [r7, #2]
 80018e4:	687b      	ldr	r3, [r7, #4]
 80018e6:	629a      	str	r2, [r3, #40]	; 0x28
}
 80018e8:	bf00      	nop
 80018ea:	370c      	adds	r7, #12
 80018ec:	46bd      	mov	sp, r7
 80018ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018f2:	4770      	bx	lr

080018f4 <HAL_GPIO_TogglePin>:
  * @param  GPIOx where x can be (A..F) to select the GPIO peripheral for STM32F3 family
  * @param  GPIO_Pin specifies the pin to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 80018f4:	b480      	push	{r7}
 80018f6:	b085      	sub	sp, #20
 80018f8:	af00      	add	r7, sp, #0
 80018fa:	6078      	str	r0, [r7, #4]
 80018fc:	460b      	mov	r3, r1
 80018fe:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Ouput Data Register value */
  odr = GPIOx->ODR;
 8001900:	687b      	ldr	r3, [r7, #4]
 8001902:	695b      	ldr	r3, [r3, #20]
 8001904:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8001906:	887a      	ldrh	r2, [r7, #2]
 8001908:	68fb      	ldr	r3, [r7, #12]
 800190a:	4013      	ands	r3, r2
 800190c:	041a      	lsls	r2, r3, #16
 800190e:	68fb      	ldr	r3, [r7, #12]
 8001910:	43d9      	mvns	r1, r3
 8001912:	887b      	ldrh	r3, [r7, #2]
 8001914:	400b      	ands	r3, r1
 8001916:	431a      	orrs	r2, r3
 8001918:	687b      	ldr	r3, [r7, #4]
 800191a:	619a      	str	r2, [r3, #24]
}
 800191c:	bf00      	nop
 800191e:	3714      	adds	r7, #20
 8001920:	46bd      	mov	sp, r7
 8001922:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001926:	4770      	bx	lr

08001928 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001928:	b580      	push	{r7, lr}
 800192a:	f5ad 7d00 	sub.w	sp, sp, #512	; 0x200
 800192e:	af00      	add	r7, sp, #0
 8001930:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001934:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8001938:	6018      	str	r0, [r3, #0]
#if defined(RCC_CFGR_PLLSRC_HSI_PREDIV)
  uint32_t pll_config2;
#endif /* RCC_CFGR_PLLSRC_HSI_PREDIV */

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 800193a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800193e:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8001942:	681b      	ldr	r3, [r3, #0]
 8001944:	2b00      	cmp	r3, #0
 8001946:	d102      	bne.n	800194e <HAL_RCC_OscConfig+0x26>
  {
    return HAL_ERROR;
 8001948:	2301      	movs	r3, #1
 800194a:	f001 b823 	b.w	8002994 <HAL_RCC_OscConfig+0x106c>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800194e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001952:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8001956:	681b      	ldr	r3, [r3, #0]
 8001958:	681b      	ldr	r3, [r3, #0]
 800195a:	f003 0301 	and.w	r3, r3, #1
 800195e:	2b00      	cmp	r3, #0
 8001960:	f000 817d 	beq.w	8001c5e <HAL_RCC_OscConfig+0x336>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE) 
 8001964:	4bbc      	ldr	r3, [pc, #752]	; (8001c58 <HAL_RCC_OscConfig+0x330>)
 8001966:	685b      	ldr	r3, [r3, #4]
 8001968:	f003 030c 	and.w	r3, r3, #12
 800196c:	2b04      	cmp	r3, #4
 800196e:	d00c      	beq.n	800198a <HAL_RCC_OscConfig+0x62>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8001970:	4bb9      	ldr	r3, [pc, #740]	; (8001c58 <HAL_RCC_OscConfig+0x330>)
 8001972:	685b      	ldr	r3, [r3, #4]
 8001974:	f003 030c 	and.w	r3, r3, #12
 8001978:	2b08      	cmp	r3, #8
 800197a:	d15c      	bne.n	8001a36 <HAL_RCC_OscConfig+0x10e>
 800197c:	4bb6      	ldr	r3, [pc, #728]	; (8001c58 <HAL_RCC_OscConfig+0x330>)
 800197e:	685b      	ldr	r3, [r3, #4]
 8001980:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001984:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001988:	d155      	bne.n	8001a36 <HAL_RCC_OscConfig+0x10e>
 800198a:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 800198e:	f8c7 31f0 	str.w	r3, [r7, #496]	; 0x1f0
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001992:	f8d7 31f0 	ldr.w	r3, [r7, #496]	; 0x1f0
 8001996:	fa93 f3a3 	rbit	r3, r3
 800199a:	f8c7 31ec 	str.w	r3, [r7, #492]	; 0x1ec
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 800199e:	f8d7 31ec 	ldr.w	r3, [r7, #492]	; 0x1ec
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80019a2:	fab3 f383 	clz	r3, r3
 80019a6:	b2db      	uxtb	r3, r3
 80019a8:	095b      	lsrs	r3, r3, #5
 80019aa:	b2db      	uxtb	r3, r3
 80019ac:	f043 0301 	orr.w	r3, r3, #1
 80019b0:	b2db      	uxtb	r3, r3
 80019b2:	2b01      	cmp	r3, #1
 80019b4:	d102      	bne.n	80019bc <HAL_RCC_OscConfig+0x94>
 80019b6:	4ba8      	ldr	r3, [pc, #672]	; (8001c58 <HAL_RCC_OscConfig+0x330>)
 80019b8:	681b      	ldr	r3, [r3, #0]
 80019ba:	e015      	b.n	80019e8 <HAL_RCC_OscConfig+0xc0>
 80019bc:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80019c0:	f8c7 31e8 	str.w	r3, [r7, #488]	; 0x1e8
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80019c4:	f8d7 31e8 	ldr.w	r3, [r7, #488]	; 0x1e8
 80019c8:	fa93 f3a3 	rbit	r3, r3
 80019cc:	f8c7 31e4 	str.w	r3, [r7, #484]	; 0x1e4
 80019d0:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80019d4:	f8c7 31e0 	str.w	r3, [r7, #480]	; 0x1e0
 80019d8:	f8d7 31e0 	ldr.w	r3, [r7, #480]	; 0x1e0
 80019dc:	fa93 f3a3 	rbit	r3, r3
 80019e0:	f8c7 31dc 	str.w	r3, [r7, #476]	; 0x1dc
 80019e4:	4b9c      	ldr	r3, [pc, #624]	; (8001c58 <HAL_RCC_OscConfig+0x330>)
 80019e6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80019e8:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 80019ec:	f8c7 21d8 	str.w	r2, [r7, #472]	; 0x1d8
 80019f0:	f8d7 21d8 	ldr.w	r2, [r7, #472]	; 0x1d8
 80019f4:	fa92 f2a2 	rbit	r2, r2
 80019f8:	f8c7 21d4 	str.w	r2, [r7, #468]	; 0x1d4
  return result;
 80019fc:	f8d7 21d4 	ldr.w	r2, [r7, #468]	; 0x1d4
 8001a00:	fab2 f282 	clz	r2, r2
 8001a04:	b2d2      	uxtb	r2, r2
 8001a06:	f042 0220 	orr.w	r2, r2, #32
 8001a0a:	b2d2      	uxtb	r2, r2
 8001a0c:	f002 021f 	and.w	r2, r2, #31
 8001a10:	2101      	movs	r1, #1
 8001a12:	fa01 f202 	lsl.w	r2, r1, r2
 8001a16:	4013      	ands	r3, r2
 8001a18:	2b00      	cmp	r3, #0
 8001a1a:	f000 811f 	beq.w	8001c5c <HAL_RCC_OscConfig+0x334>
 8001a1e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001a22:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8001a26:	681b      	ldr	r3, [r3, #0]
 8001a28:	685b      	ldr	r3, [r3, #4]
 8001a2a:	2b00      	cmp	r3, #0
 8001a2c:	f040 8116 	bne.w	8001c5c <HAL_RCC_OscConfig+0x334>
      {
        return HAL_ERROR;
 8001a30:	2301      	movs	r3, #1
 8001a32:	f000 bfaf 	b.w	8002994 <HAL_RCC_OscConfig+0x106c>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001a36:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001a3a:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8001a3e:	681b      	ldr	r3, [r3, #0]
 8001a40:	685b      	ldr	r3, [r3, #4]
 8001a42:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001a46:	d106      	bne.n	8001a56 <HAL_RCC_OscConfig+0x12e>
 8001a48:	4b83      	ldr	r3, [pc, #524]	; (8001c58 <HAL_RCC_OscConfig+0x330>)
 8001a4a:	681b      	ldr	r3, [r3, #0]
 8001a4c:	4a82      	ldr	r2, [pc, #520]	; (8001c58 <HAL_RCC_OscConfig+0x330>)
 8001a4e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001a52:	6013      	str	r3, [r2, #0]
 8001a54:	e036      	b.n	8001ac4 <HAL_RCC_OscConfig+0x19c>
 8001a56:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001a5a:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8001a5e:	681b      	ldr	r3, [r3, #0]
 8001a60:	685b      	ldr	r3, [r3, #4]
 8001a62:	2b00      	cmp	r3, #0
 8001a64:	d10c      	bne.n	8001a80 <HAL_RCC_OscConfig+0x158>
 8001a66:	4b7c      	ldr	r3, [pc, #496]	; (8001c58 <HAL_RCC_OscConfig+0x330>)
 8001a68:	681b      	ldr	r3, [r3, #0]
 8001a6a:	4a7b      	ldr	r2, [pc, #492]	; (8001c58 <HAL_RCC_OscConfig+0x330>)
 8001a6c:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001a70:	6013      	str	r3, [r2, #0]
 8001a72:	4b79      	ldr	r3, [pc, #484]	; (8001c58 <HAL_RCC_OscConfig+0x330>)
 8001a74:	681b      	ldr	r3, [r3, #0]
 8001a76:	4a78      	ldr	r2, [pc, #480]	; (8001c58 <HAL_RCC_OscConfig+0x330>)
 8001a78:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001a7c:	6013      	str	r3, [r2, #0]
 8001a7e:	e021      	b.n	8001ac4 <HAL_RCC_OscConfig+0x19c>
 8001a80:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001a84:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8001a88:	681b      	ldr	r3, [r3, #0]
 8001a8a:	685b      	ldr	r3, [r3, #4]
 8001a8c:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8001a90:	d10c      	bne.n	8001aac <HAL_RCC_OscConfig+0x184>
 8001a92:	4b71      	ldr	r3, [pc, #452]	; (8001c58 <HAL_RCC_OscConfig+0x330>)
 8001a94:	681b      	ldr	r3, [r3, #0]
 8001a96:	4a70      	ldr	r2, [pc, #448]	; (8001c58 <HAL_RCC_OscConfig+0x330>)
 8001a98:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001a9c:	6013      	str	r3, [r2, #0]
 8001a9e:	4b6e      	ldr	r3, [pc, #440]	; (8001c58 <HAL_RCC_OscConfig+0x330>)
 8001aa0:	681b      	ldr	r3, [r3, #0]
 8001aa2:	4a6d      	ldr	r2, [pc, #436]	; (8001c58 <HAL_RCC_OscConfig+0x330>)
 8001aa4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001aa8:	6013      	str	r3, [r2, #0]
 8001aaa:	e00b      	b.n	8001ac4 <HAL_RCC_OscConfig+0x19c>
 8001aac:	4b6a      	ldr	r3, [pc, #424]	; (8001c58 <HAL_RCC_OscConfig+0x330>)
 8001aae:	681b      	ldr	r3, [r3, #0]
 8001ab0:	4a69      	ldr	r2, [pc, #420]	; (8001c58 <HAL_RCC_OscConfig+0x330>)
 8001ab2:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001ab6:	6013      	str	r3, [r2, #0]
 8001ab8:	4b67      	ldr	r3, [pc, #412]	; (8001c58 <HAL_RCC_OscConfig+0x330>)
 8001aba:	681b      	ldr	r3, [r3, #0]
 8001abc:	4a66      	ldr	r2, [pc, #408]	; (8001c58 <HAL_RCC_OscConfig+0x330>)
 8001abe:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001ac2:	6013      	str	r3, [r2, #0]
      
#if defined(RCC_CFGR_PLLSRC_HSI_DIV2)
      /* Configure the HSE predivision factor --------------------------------*/
      __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8001ac4:	4b64      	ldr	r3, [pc, #400]	; (8001c58 <HAL_RCC_OscConfig+0x330>)
 8001ac6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001ac8:	f023 020f 	bic.w	r2, r3, #15
 8001acc:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001ad0:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8001ad4:	681b      	ldr	r3, [r3, #0]
 8001ad6:	689b      	ldr	r3, [r3, #8]
 8001ad8:	495f      	ldr	r1, [pc, #380]	; (8001c58 <HAL_RCC_OscConfig+0x330>)
 8001ada:	4313      	orrs	r3, r2
 8001adc:	62cb      	str	r3, [r1, #44]	; 0x2c
#endif /* RCC_CFGR_PLLSRC_HSI_DIV2 */

       /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8001ade:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001ae2:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8001ae6:	681b      	ldr	r3, [r3, #0]
 8001ae8:	685b      	ldr	r3, [r3, #4]
 8001aea:	2b00      	cmp	r3, #0
 8001aec:	d059      	beq.n	8001ba2 <HAL_RCC_OscConfig+0x27a>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001aee:	f7ff f9ad 	bl	8000e4c <HAL_GetTick>
 8001af2:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001af6:	e00a      	b.n	8001b0e <HAL_RCC_OscConfig+0x1e6>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001af8:	f7ff f9a8 	bl	8000e4c <HAL_GetTick>
 8001afc:	4602      	mov	r2, r0
 8001afe:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8001b02:	1ad3      	subs	r3, r2, r3
 8001b04:	2b64      	cmp	r3, #100	; 0x64
 8001b06:	d902      	bls.n	8001b0e <HAL_RCC_OscConfig+0x1e6>
          {
            return HAL_TIMEOUT;
 8001b08:	2303      	movs	r3, #3
 8001b0a:	f000 bf43 	b.w	8002994 <HAL_RCC_OscConfig+0x106c>
 8001b0e:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8001b12:	f8c7 31d0 	str.w	r3, [r7, #464]	; 0x1d0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001b16:	f8d7 31d0 	ldr.w	r3, [r7, #464]	; 0x1d0
 8001b1a:	fa93 f3a3 	rbit	r3, r3
 8001b1e:	f8c7 31cc 	str.w	r3, [r7, #460]	; 0x1cc
  return result;
 8001b22:	f8d7 31cc 	ldr.w	r3, [r7, #460]	; 0x1cc
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001b26:	fab3 f383 	clz	r3, r3
 8001b2a:	b2db      	uxtb	r3, r3
 8001b2c:	095b      	lsrs	r3, r3, #5
 8001b2e:	b2db      	uxtb	r3, r3
 8001b30:	f043 0301 	orr.w	r3, r3, #1
 8001b34:	b2db      	uxtb	r3, r3
 8001b36:	2b01      	cmp	r3, #1
 8001b38:	d102      	bne.n	8001b40 <HAL_RCC_OscConfig+0x218>
 8001b3a:	4b47      	ldr	r3, [pc, #284]	; (8001c58 <HAL_RCC_OscConfig+0x330>)
 8001b3c:	681b      	ldr	r3, [r3, #0]
 8001b3e:	e015      	b.n	8001b6c <HAL_RCC_OscConfig+0x244>
 8001b40:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8001b44:	f8c7 31c8 	str.w	r3, [r7, #456]	; 0x1c8
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001b48:	f8d7 31c8 	ldr.w	r3, [r7, #456]	; 0x1c8
 8001b4c:	fa93 f3a3 	rbit	r3, r3
 8001b50:	f8c7 31c4 	str.w	r3, [r7, #452]	; 0x1c4
 8001b54:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8001b58:	f8c7 31c0 	str.w	r3, [r7, #448]	; 0x1c0
 8001b5c:	f8d7 31c0 	ldr.w	r3, [r7, #448]	; 0x1c0
 8001b60:	fa93 f3a3 	rbit	r3, r3
 8001b64:	f8c7 31bc 	str.w	r3, [r7, #444]	; 0x1bc
 8001b68:	4b3b      	ldr	r3, [pc, #236]	; (8001c58 <HAL_RCC_OscConfig+0x330>)
 8001b6a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001b6c:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8001b70:	f8c7 21b8 	str.w	r2, [r7, #440]	; 0x1b8
 8001b74:	f8d7 21b8 	ldr.w	r2, [r7, #440]	; 0x1b8
 8001b78:	fa92 f2a2 	rbit	r2, r2
 8001b7c:	f8c7 21b4 	str.w	r2, [r7, #436]	; 0x1b4
  return result;
 8001b80:	f8d7 21b4 	ldr.w	r2, [r7, #436]	; 0x1b4
 8001b84:	fab2 f282 	clz	r2, r2
 8001b88:	b2d2      	uxtb	r2, r2
 8001b8a:	f042 0220 	orr.w	r2, r2, #32
 8001b8e:	b2d2      	uxtb	r2, r2
 8001b90:	f002 021f 	and.w	r2, r2, #31
 8001b94:	2101      	movs	r1, #1
 8001b96:	fa01 f202 	lsl.w	r2, r1, r2
 8001b9a:	4013      	ands	r3, r2
 8001b9c:	2b00      	cmp	r3, #0
 8001b9e:	d0ab      	beq.n	8001af8 <HAL_RCC_OscConfig+0x1d0>
 8001ba0:	e05d      	b.n	8001c5e <HAL_RCC_OscConfig+0x336>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001ba2:	f7ff f953 	bl	8000e4c <HAL_GetTick>
 8001ba6:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001baa:	e00a      	b.n	8001bc2 <HAL_RCC_OscConfig+0x29a>
        {
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001bac:	f7ff f94e 	bl	8000e4c <HAL_GetTick>
 8001bb0:	4602      	mov	r2, r0
 8001bb2:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8001bb6:	1ad3      	subs	r3, r2, r3
 8001bb8:	2b64      	cmp	r3, #100	; 0x64
 8001bba:	d902      	bls.n	8001bc2 <HAL_RCC_OscConfig+0x29a>
          {
            return HAL_TIMEOUT;
 8001bbc:	2303      	movs	r3, #3
 8001bbe:	f000 bee9 	b.w	8002994 <HAL_RCC_OscConfig+0x106c>
 8001bc2:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8001bc6:	f8c7 31b0 	str.w	r3, [r7, #432]	; 0x1b0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001bca:	f8d7 31b0 	ldr.w	r3, [r7, #432]	; 0x1b0
 8001bce:	fa93 f3a3 	rbit	r3, r3
 8001bd2:	f8c7 31ac 	str.w	r3, [r7, #428]	; 0x1ac
  return result;
 8001bd6:	f8d7 31ac 	ldr.w	r3, [r7, #428]	; 0x1ac
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001bda:	fab3 f383 	clz	r3, r3
 8001bde:	b2db      	uxtb	r3, r3
 8001be0:	095b      	lsrs	r3, r3, #5
 8001be2:	b2db      	uxtb	r3, r3
 8001be4:	f043 0301 	orr.w	r3, r3, #1
 8001be8:	b2db      	uxtb	r3, r3
 8001bea:	2b01      	cmp	r3, #1
 8001bec:	d102      	bne.n	8001bf4 <HAL_RCC_OscConfig+0x2cc>
 8001bee:	4b1a      	ldr	r3, [pc, #104]	; (8001c58 <HAL_RCC_OscConfig+0x330>)
 8001bf0:	681b      	ldr	r3, [r3, #0]
 8001bf2:	e015      	b.n	8001c20 <HAL_RCC_OscConfig+0x2f8>
 8001bf4:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8001bf8:	f8c7 31a8 	str.w	r3, [r7, #424]	; 0x1a8
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001bfc:	f8d7 31a8 	ldr.w	r3, [r7, #424]	; 0x1a8
 8001c00:	fa93 f3a3 	rbit	r3, r3
 8001c04:	f8c7 31a4 	str.w	r3, [r7, #420]	; 0x1a4
 8001c08:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8001c0c:	f8c7 31a0 	str.w	r3, [r7, #416]	; 0x1a0
 8001c10:	f8d7 31a0 	ldr.w	r3, [r7, #416]	; 0x1a0
 8001c14:	fa93 f3a3 	rbit	r3, r3
 8001c18:	f8c7 319c 	str.w	r3, [r7, #412]	; 0x19c
 8001c1c:	4b0e      	ldr	r3, [pc, #56]	; (8001c58 <HAL_RCC_OscConfig+0x330>)
 8001c1e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001c20:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8001c24:	f8c7 2198 	str.w	r2, [r7, #408]	; 0x198
 8001c28:	f8d7 2198 	ldr.w	r2, [r7, #408]	; 0x198
 8001c2c:	fa92 f2a2 	rbit	r2, r2
 8001c30:	f8c7 2194 	str.w	r2, [r7, #404]	; 0x194
  return result;
 8001c34:	f8d7 2194 	ldr.w	r2, [r7, #404]	; 0x194
 8001c38:	fab2 f282 	clz	r2, r2
 8001c3c:	b2d2      	uxtb	r2, r2
 8001c3e:	f042 0220 	orr.w	r2, r2, #32
 8001c42:	b2d2      	uxtb	r2, r2
 8001c44:	f002 021f 	and.w	r2, r2, #31
 8001c48:	2101      	movs	r1, #1
 8001c4a:	fa01 f202 	lsl.w	r2, r1, r2
 8001c4e:	4013      	ands	r3, r2
 8001c50:	2b00      	cmp	r3, #0
 8001c52:	d1ab      	bne.n	8001bac <HAL_RCC_OscConfig+0x284>
 8001c54:	e003      	b.n	8001c5e <HAL_RCC_OscConfig+0x336>
 8001c56:	bf00      	nop
 8001c58:	40021000 	.word	0x40021000
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001c5c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001c5e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001c62:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8001c66:	681b      	ldr	r3, [r3, #0]
 8001c68:	681b      	ldr	r3, [r3, #0]
 8001c6a:	f003 0302 	and.w	r3, r3, #2
 8001c6e:	2b00      	cmp	r3, #0
 8001c70:	f000 817d 	beq.w	8001f6e <HAL_RCC_OscConfig+0x646>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
    
    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */ 
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI) 
 8001c74:	4ba6      	ldr	r3, [pc, #664]	; (8001f10 <HAL_RCC_OscConfig+0x5e8>)
 8001c76:	685b      	ldr	r3, [r3, #4]
 8001c78:	f003 030c 	and.w	r3, r3, #12
 8001c7c:	2b00      	cmp	r3, #0
 8001c7e:	d00b      	beq.n	8001c98 <HAL_RCC_OscConfig+0x370>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI)))
 8001c80:	4ba3      	ldr	r3, [pc, #652]	; (8001f10 <HAL_RCC_OscConfig+0x5e8>)
 8001c82:	685b      	ldr	r3, [r3, #4]
 8001c84:	f003 030c 	and.w	r3, r3, #12
 8001c88:	2b08      	cmp	r3, #8
 8001c8a:	d172      	bne.n	8001d72 <HAL_RCC_OscConfig+0x44a>
 8001c8c:	4ba0      	ldr	r3, [pc, #640]	; (8001f10 <HAL_RCC_OscConfig+0x5e8>)
 8001c8e:	685b      	ldr	r3, [r3, #4]
 8001c90:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001c94:	2b00      	cmp	r3, #0
 8001c96:	d16c      	bne.n	8001d72 <HAL_RCC_OscConfig+0x44a>
 8001c98:	2302      	movs	r3, #2
 8001c9a:	f8c7 3190 	str.w	r3, [r7, #400]	; 0x190
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001c9e:	f8d7 3190 	ldr.w	r3, [r7, #400]	; 0x190
 8001ca2:	fa93 f3a3 	rbit	r3, r3
 8001ca6:	f8c7 318c 	str.w	r3, [r7, #396]	; 0x18c
  return result;
 8001caa:	f8d7 318c 	ldr.w	r3, [r7, #396]	; 0x18c
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001cae:	fab3 f383 	clz	r3, r3
 8001cb2:	b2db      	uxtb	r3, r3
 8001cb4:	095b      	lsrs	r3, r3, #5
 8001cb6:	b2db      	uxtb	r3, r3
 8001cb8:	f043 0301 	orr.w	r3, r3, #1
 8001cbc:	b2db      	uxtb	r3, r3
 8001cbe:	2b01      	cmp	r3, #1
 8001cc0:	d102      	bne.n	8001cc8 <HAL_RCC_OscConfig+0x3a0>
 8001cc2:	4b93      	ldr	r3, [pc, #588]	; (8001f10 <HAL_RCC_OscConfig+0x5e8>)
 8001cc4:	681b      	ldr	r3, [r3, #0]
 8001cc6:	e013      	b.n	8001cf0 <HAL_RCC_OscConfig+0x3c8>
 8001cc8:	2302      	movs	r3, #2
 8001cca:	f8c7 3188 	str.w	r3, [r7, #392]	; 0x188
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001cce:	f8d7 3188 	ldr.w	r3, [r7, #392]	; 0x188
 8001cd2:	fa93 f3a3 	rbit	r3, r3
 8001cd6:	f8c7 3184 	str.w	r3, [r7, #388]	; 0x184
 8001cda:	2302      	movs	r3, #2
 8001cdc:	f8c7 3180 	str.w	r3, [r7, #384]	; 0x180
 8001ce0:	f8d7 3180 	ldr.w	r3, [r7, #384]	; 0x180
 8001ce4:	fa93 f3a3 	rbit	r3, r3
 8001ce8:	f8c7 317c 	str.w	r3, [r7, #380]	; 0x17c
 8001cec:	4b88      	ldr	r3, [pc, #544]	; (8001f10 <HAL_RCC_OscConfig+0x5e8>)
 8001cee:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001cf0:	2202      	movs	r2, #2
 8001cf2:	f8c7 2178 	str.w	r2, [r7, #376]	; 0x178
 8001cf6:	f8d7 2178 	ldr.w	r2, [r7, #376]	; 0x178
 8001cfa:	fa92 f2a2 	rbit	r2, r2
 8001cfe:	f8c7 2174 	str.w	r2, [r7, #372]	; 0x174
  return result;
 8001d02:	f8d7 2174 	ldr.w	r2, [r7, #372]	; 0x174
 8001d06:	fab2 f282 	clz	r2, r2
 8001d0a:	b2d2      	uxtb	r2, r2
 8001d0c:	f042 0220 	orr.w	r2, r2, #32
 8001d10:	b2d2      	uxtb	r2, r2
 8001d12:	f002 021f 	and.w	r2, r2, #31
 8001d16:	2101      	movs	r1, #1
 8001d18:	fa01 f202 	lsl.w	r2, r1, r2
 8001d1c:	4013      	ands	r3, r2
 8001d1e:	2b00      	cmp	r3, #0
 8001d20:	d00a      	beq.n	8001d38 <HAL_RCC_OscConfig+0x410>
 8001d22:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001d26:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8001d2a:	681b      	ldr	r3, [r3, #0]
 8001d2c:	691b      	ldr	r3, [r3, #16]
 8001d2e:	2b01      	cmp	r3, #1
 8001d30:	d002      	beq.n	8001d38 <HAL_RCC_OscConfig+0x410>
      {
        return HAL_ERROR;
 8001d32:	2301      	movs	r3, #1
 8001d34:	f000 be2e 	b.w	8002994 <HAL_RCC_OscConfig+0x106c>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001d38:	4b75      	ldr	r3, [pc, #468]	; (8001f10 <HAL_RCC_OscConfig+0x5e8>)
 8001d3a:	681b      	ldr	r3, [r3, #0]
 8001d3c:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001d40:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001d44:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8001d48:	681b      	ldr	r3, [r3, #0]
 8001d4a:	695b      	ldr	r3, [r3, #20]
 8001d4c:	21f8      	movs	r1, #248	; 0xf8
 8001d4e:	f8c7 1170 	str.w	r1, [r7, #368]	; 0x170
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001d52:	f8d7 1170 	ldr.w	r1, [r7, #368]	; 0x170
 8001d56:	fa91 f1a1 	rbit	r1, r1
 8001d5a:	f8c7 116c 	str.w	r1, [r7, #364]	; 0x16c
  return result;
 8001d5e:	f8d7 116c 	ldr.w	r1, [r7, #364]	; 0x16c
 8001d62:	fab1 f181 	clz	r1, r1
 8001d66:	b2c9      	uxtb	r1, r1
 8001d68:	408b      	lsls	r3, r1
 8001d6a:	4969      	ldr	r1, [pc, #420]	; (8001f10 <HAL_RCC_OscConfig+0x5e8>)
 8001d6c:	4313      	orrs	r3, r2
 8001d6e:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001d70:	e0fd      	b.n	8001f6e <HAL_RCC_OscConfig+0x646>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8001d72:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001d76:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8001d7a:	681b      	ldr	r3, [r3, #0]
 8001d7c:	691b      	ldr	r3, [r3, #16]
 8001d7e:	2b00      	cmp	r3, #0
 8001d80:	f000 8088 	beq.w	8001e94 <HAL_RCC_OscConfig+0x56c>
 8001d84:	2301      	movs	r3, #1
 8001d86:	f8c7 3168 	str.w	r3, [r7, #360]	; 0x168
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001d8a:	f8d7 3168 	ldr.w	r3, [r7, #360]	; 0x168
 8001d8e:	fa93 f3a3 	rbit	r3, r3
 8001d92:	f8c7 3164 	str.w	r3, [r7, #356]	; 0x164
  return result;
 8001d96:	f8d7 3164 	ldr.w	r3, [r7, #356]	; 0x164
      {
       /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001d9a:	fab3 f383 	clz	r3, r3
 8001d9e:	b2db      	uxtb	r3, r3
 8001da0:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8001da4:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8001da8:	009b      	lsls	r3, r3, #2
 8001daa:	461a      	mov	r2, r3
 8001dac:	2301      	movs	r3, #1
 8001dae:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001db0:	f7ff f84c 	bl	8000e4c <HAL_GetTick>
 8001db4:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001db8:	e00a      	b.n	8001dd0 <HAL_RCC_OscConfig+0x4a8>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001dba:	f7ff f847 	bl	8000e4c <HAL_GetTick>
 8001dbe:	4602      	mov	r2, r0
 8001dc0:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8001dc4:	1ad3      	subs	r3, r2, r3
 8001dc6:	2b02      	cmp	r3, #2
 8001dc8:	d902      	bls.n	8001dd0 <HAL_RCC_OscConfig+0x4a8>
          {
            return HAL_TIMEOUT;
 8001dca:	2303      	movs	r3, #3
 8001dcc:	f000 bde2 	b.w	8002994 <HAL_RCC_OscConfig+0x106c>
 8001dd0:	2302      	movs	r3, #2
 8001dd2:	f8c7 3160 	str.w	r3, [r7, #352]	; 0x160
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001dd6:	f8d7 3160 	ldr.w	r3, [r7, #352]	; 0x160
 8001dda:	fa93 f3a3 	rbit	r3, r3
 8001dde:	f8c7 315c 	str.w	r3, [r7, #348]	; 0x15c
  return result;
 8001de2:	f8d7 315c 	ldr.w	r3, [r7, #348]	; 0x15c
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001de6:	fab3 f383 	clz	r3, r3
 8001dea:	b2db      	uxtb	r3, r3
 8001dec:	095b      	lsrs	r3, r3, #5
 8001dee:	b2db      	uxtb	r3, r3
 8001df0:	f043 0301 	orr.w	r3, r3, #1
 8001df4:	b2db      	uxtb	r3, r3
 8001df6:	2b01      	cmp	r3, #1
 8001df8:	d102      	bne.n	8001e00 <HAL_RCC_OscConfig+0x4d8>
 8001dfa:	4b45      	ldr	r3, [pc, #276]	; (8001f10 <HAL_RCC_OscConfig+0x5e8>)
 8001dfc:	681b      	ldr	r3, [r3, #0]
 8001dfe:	e013      	b.n	8001e28 <HAL_RCC_OscConfig+0x500>
 8001e00:	2302      	movs	r3, #2
 8001e02:	f8c7 3158 	str.w	r3, [r7, #344]	; 0x158
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001e06:	f8d7 3158 	ldr.w	r3, [r7, #344]	; 0x158
 8001e0a:	fa93 f3a3 	rbit	r3, r3
 8001e0e:	f8c7 3154 	str.w	r3, [r7, #340]	; 0x154
 8001e12:	2302      	movs	r3, #2
 8001e14:	f8c7 3150 	str.w	r3, [r7, #336]	; 0x150
 8001e18:	f8d7 3150 	ldr.w	r3, [r7, #336]	; 0x150
 8001e1c:	fa93 f3a3 	rbit	r3, r3
 8001e20:	f8c7 314c 	str.w	r3, [r7, #332]	; 0x14c
 8001e24:	4b3a      	ldr	r3, [pc, #232]	; (8001f10 <HAL_RCC_OscConfig+0x5e8>)
 8001e26:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001e28:	2202      	movs	r2, #2
 8001e2a:	f8c7 2148 	str.w	r2, [r7, #328]	; 0x148
 8001e2e:	f8d7 2148 	ldr.w	r2, [r7, #328]	; 0x148
 8001e32:	fa92 f2a2 	rbit	r2, r2
 8001e36:	f8c7 2144 	str.w	r2, [r7, #324]	; 0x144
  return result;
 8001e3a:	f8d7 2144 	ldr.w	r2, [r7, #324]	; 0x144
 8001e3e:	fab2 f282 	clz	r2, r2
 8001e42:	b2d2      	uxtb	r2, r2
 8001e44:	f042 0220 	orr.w	r2, r2, #32
 8001e48:	b2d2      	uxtb	r2, r2
 8001e4a:	f002 021f 	and.w	r2, r2, #31
 8001e4e:	2101      	movs	r1, #1
 8001e50:	fa01 f202 	lsl.w	r2, r1, r2
 8001e54:	4013      	ands	r3, r2
 8001e56:	2b00      	cmp	r3, #0
 8001e58:	d0af      	beq.n	8001dba <HAL_RCC_OscConfig+0x492>
          }
        }
                
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001e5a:	4b2d      	ldr	r3, [pc, #180]	; (8001f10 <HAL_RCC_OscConfig+0x5e8>)
 8001e5c:	681b      	ldr	r3, [r3, #0]
 8001e5e:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001e62:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001e66:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8001e6a:	681b      	ldr	r3, [r3, #0]
 8001e6c:	695b      	ldr	r3, [r3, #20]
 8001e6e:	21f8      	movs	r1, #248	; 0xf8
 8001e70:	f8c7 1140 	str.w	r1, [r7, #320]	; 0x140
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001e74:	f8d7 1140 	ldr.w	r1, [r7, #320]	; 0x140
 8001e78:	fa91 f1a1 	rbit	r1, r1
 8001e7c:	f8c7 113c 	str.w	r1, [r7, #316]	; 0x13c
  return result;
 8001e80:	f8d7 113c 	ldr.w	r1, [r7, #316]	; 0x13c
 8001e84:	fab1 f181 	clz	r1, r1
 8001e88:	b2c9      	uxtb	r1, r1
 8001e8a:	408b      	lsls	r3, r1
 8001e8c:	4920      	ldr	r1, [pc, #128]	; (8001f10 <HAL_RCC_OscConfig+0x5e8>)
 8001e8e:	4313      	orrs	r3, r2
 8001e90:	600b      	str	r3, [r1, #0]
 8001e92:	e06c      	b.n	8001f6e <HAL_RCC_OscConfig+0x646>
 8001e94:	2301      	movs	r3, #1
 8001e96:	f8c7 3138 	str.w	r3, [r7, #312]	; 0x138
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001e9a:	f8d7 3138 	ldr.w	r3, [r7, #312]	; 0x138
 8001e9e:	fa93 f3a3 	rbit	r3, r3
 8001ea2:	f8c7 3134 	str.w	r3, [r7, #308]	; 0x134
  return result;
 8001ea6:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001eaa:	fab3 f383 	clz	r3, r3
 8001eae:	b2db      	uxtb	r3, r3
 8001eb0:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8001eb4:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8001eb8:	009b      	lsls	r3, r3, #2
 8001eba:	461a      	mov	r2, r3
 8001ebc:	2300      	movs	r3, #0
 8001ebe:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001ec0:	f7fe ffc4 	bl	8000e4c <HAL_GetTick>
 8001ec4:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001ec8:	e00a      	b.n	8001ee0 <HAL_RCC_OscConfig+0x5b8>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001eca:	f7fe ffbf 	bl	8000e4c <HAL_GetTick>
 8001ece:	4602      	mov	r2, r0
 8001ed0:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8001ed4:	1ad3      	subs	r3, r2, r3
 8001ed6:	2b02      	cmp	r3, #2
 8001ed8:	d902      	bls.n	8001ee0 <HAL_RCC_OscConfig+0x5b8>
          {
            return HAL_TIMEOUT;
 8001eda:	2303      	movs	r3, #3
 8001edc:	f000 bd5a 	b.w	8002994 <HAL_RCC_OscConfig+0x106c>
 8001ee0:	2302      	movs	r3, #2
 8001ee2:	f8c7 3130 	str.w	r3, [r7, #304]	; 0x130
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001ee6:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
 8001eea:	fa93 f3a3 	rbit	r3, r3
 8001eee:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
  return result;
 8001ef2:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001ef6:	fab3 f383 	clz	r3, r3
 8001efa:	b2db      	uxtb	r3, r3
 8001efc:	095b      	lsrs	r3, r3, #5
 8001efe:	b2db      	uxtb	r3, r3
 8001f00:	f043 0301 	orr.w	r3, r3, #1
 8001f04:	b2db      	uxtb	r3, r3
 8001f06:	2b01      	cmp	r3, #1
 8001f08:	d104      	bne.n	8001f14 <HAL_RCC_OscConfig+0x5ec>
 8001f0a:	4b01      	ldr	r3, [pc, #4]	; (8001f10 <HAL_RCC_OscConfig+0x5e8>)
 8001f0c:	681b      	ldr	r3, [r3, #0]
 8001f0e:	e015      	b.n	8001f3c <HAL_RCC_OscConfig+0x614>
 8001f10:	40021000 	.word	0x40021000
 8001f14:	2302      	movs	r3, #2
 8001f16:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001f1a:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8001f1e:	fa93 f3a3 	rbit	r3, r3
 8001f22:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
 8001f26:	2302      	movs	r3, #2
 8001f28:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
 8001f2c:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 8001f30:	fa93 f3a3 	rbit	r3, r3
 8001f34:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
 8001f38:	4bc8      	ldr	r3, [pc, #800]	; (800225c <HAL_RCC_OscConfig+0x934>)
 8001f3a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001f3c:	2202      	movs	r2, #2
 8001f3e:	f8c7 2118 	str.w	r2, [r7, #280]	; 0x118
 8001f42:	f8d7 2118 	ldr.w	r2, [r7, #280]	; 0x118
 8001f46:	fa92 f2a2 	rbit	r2, r2
 8001f4a:	f8c7 2114 	str.w	r2, [r7, #276]	; 0x114
  return result;
 8001f4e:	f8d7 2114 	ldr.w	r2, [r7, #276]	; 0x114
 8001f52:	fab2 f282 	clz	r2, r2
 8001f56:	b2d2      	uxtb	r2, r2
 8001f58:	f042 0220 	orr.w	r2, r2, #32
 8001f5c:	b2d2      	uxtb	r2, r2
 8001f5e:	f002 021f 	and.w	r2, r2, #31
 8001f62:	2101      	movs	r1, #1
 8001f64:	fa01 f202 	lsl.w	r2, r1, r2
 8001f68:	4013      	ands	r3, r2
 8001f6a:	2b00      	cmp	r3, #0
 8001f6c:	d1ad      	bne.n	8001eca <HAL_RCC_OscConfig+0x5a2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001f6e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001f72:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8001f76:	681b      	ldr	r3, [r3, #0]
 8001f78:	681b      	ldr	r3, [r3, #0]
 8001f7a:	f003 0308 	and.w	r3, r3, #8
 8001f7e:	2b00      	cmp	r3, #0
 8001f80:	f000 8110 	beq.w	80021a4 <HAL_RCC_OscConfig+0x87c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));
    
    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8001f84:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001f88:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8001f8c:	681b      	ldr	r3, [r3, #0]
 8001f8e:	699b      	ldr	r3, [r3, #24]
 8001f90:	2b00      	cmp	r3, #0
 8001f92:	d079      	beq.n	8002088 <HAL_RCC_OscConfig+0x760>
 8001f94:	2301      	movs	r3, #1
 8001f96:	f8c7 3110 	str.w	r3, [r7, #272]	; 0x110
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001f9a:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
 8001f9e:	fa93 f3a3 	rbit	r3, r3
 8001fa2:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
  return result;
 8001fa6:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001faa:	fab3 f383 	clz	r3, r3
 8001fae:	b2db      	uxtb	r3, r3
 8001fb0:	461a      	mov	r2, r3
 8001fb2:	4bab      	ldr	r3, [pc, #684]	; (8002260 <HAL_RCC_OscConfig+0x938>)
 8001fb4:	4413      	add	r3, r2
 8001fb6:	009b      	lsls	r3, r3, #2
 8001fb8:	461a      	mov	r2, r3
 8001fba:	2301      	movs	r3, #1
 8001fbc:	6013      	str	r3, [r2, #0]
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001fbe:	f7fe ff45 	bl	8000e4c <HAL_GetTick>
 8001fc2:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
      
      /* Wait till LSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001fc6:	e00a      	b.n	8001fde <HAL_RCC_OscConfig+0x6b6>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8001fc8:	f7fe ff40 	bl	8000e4c <HAL_GetTick>
 8001fcc:	4602      	mov	r2, r0
 8001fce:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8001fd2:	1ad3      	subs	r3, r2, r3
 8001fd4:	2b02      	cmp	r3, #2
 8001fd6:	d902      	bls.n	8001fde <HAL_RCC_OscConfig+0x6b6>
        {
          return HAL_TIMEOUT;
 8001fd8:	2303      	movs	r3, #3
 8001fda:	f000 bcdb 	b.w	8002994 <HAL_RCC_OscConfig+0x106c>
 8001fde:	2302      	movs	r3, #2
 8001fe0:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001fe4:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 8001fe8:	fa93 f3a3 	rbit	r3, r3
 8001fec:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
 8001ff0:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001ff4:	f5a3 7380 	sub.w	r3, r3, #256	; 0x100
 8001ff8:	2202      	movs	r2, #2
 8001ffa:	601a      	str	r2, [r3, #0]
 8001ffc:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002000:	f5a3 7380 	sub.w	r3, r3, #256	; 0x100
 8002004:	681b      	ldr	r3, [r3, #0]
 8002006:	fa93 f2a3 	rbit	r2, r3
 800200a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800200e:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8002012:	601a      	str	r2, [r3, #0]
 8002014:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002018:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800201c:	2202      	movs	r2, #2
 800201e:	601a      	str	r2, [r3, #0]
 8002020:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002024:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8002028:	681b      	ldr	r3, [r3, #0]
 800202a:	fa93 f2a3 	rbit	r2, r3
 800202e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002032:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 8002036:	601a      	str	r2, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002038:	4b88      	ldr	r3, [pc, #544]	; (800225c <HAL_RCC_OscConfig+0x934>)
 800203a:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800203c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002040:	f5a3 7388 	sub.w	r3, r3, #272	; 0x110
 8002044:	2102      	movs	r1, #2
 8002046:	6019      	str	r1, [r3, #0]
 8002048:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800204c:	f5a3 7388 	sub.w	r3, r3, #272	; 0x110
 8002050:	681b      	ldr	r3, [r3, #0]
 8002052:	fa93 f1a3 	rbit	r1, r3
 8002056:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800205a:	f5a3 738a 	sub.w	r3, r3, #276	; 0x114
 800205e:	6019      	str	r1, [r3, #0]
  return result;
 8002060:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002064:	f5a3 738a 	sub.w	r3, r3, #276	; 0x114
 8002068:	681b      	ldr	r3, [r3, #0]
 800206a:	fab3 f383 	clz	r3, r3
 800206e:	b2db      	uxtb	r3, r3
 8002070:	f043 0360 	orr.w	r3, r3, #96	; 0x60
 8002074:	b2db      	uxtb	r3, r3
 8002076:	f003 031f 	and.w	r3, r3, #31
 800207a:	2101      	movs	r1, #1
 800207c:	fa01 f303 	lsl.w	r3, r1, r3
 8002080:	4013      	ands	r3, r2
 8002082:	2b00      	cmp	r3, #0
 8002084:	d0a0      	beq.n	8001fc8 <HAL_RCC_OscConfig+0x6a0>
 8002086:	e08d      	b.n	80021a4 <HAL_RCC_OscConfig+0x87c>
 8002088:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800208c:	f5a3 738c 	sub.w	r3, r3, #280	; 0x118
 8002090:	2201      	movs	r2, #1
 8002092:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002094:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002098:	f5a3 738c 	sub.w	r3, r3, #280	; 0x118
 800209c:	681b      	ldr	r3, [r3, #0]
 800209e:	fa93 f2a3 	rbit	r2, r3
 80020a2:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80020a6:	f5a3 738e 	sub.w	r3, r3, #284	; 0x11c
 80020aa:	601a      	str	r2, [r3, #0]
  return result;
 80020ac:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80020b0:	f5a3 738e 	sub.w	r3, r3, #284	; 0x11c
 80020b4:	681b      	ldr	r3, [r3, #0]
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80020b6:	fab3 f383 	clz	r3, r3
 80020ba:	b2db      	uxtb	r3, r3
 80020bc:	461a      	mov	r2, r3
 80020be:	4b68      	ldr	r3, [pc, #416]	; (8002260 <HAL_RCC_OscConfig+0x938>)
 80020c0:	4413      	add	r3, r2
 80020c2:	009b      	lsls	r3, r3, #2
 80020c4:	461a      	mov	r2, r3
 80020c6:	2300      	movs	r3, #0
 80020c8:	6013      	str	r3, [r2, #0]
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80020ca:	f7fe febf 	bl	8000e4c <HAL_GetTick>
 80020ce:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
      
      /* Wait till LSI is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80020d2:	e00a      	b.n	80020ea <HAL_RCC_OscConfig+0x7c2>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80020d4:	f7fe feba 	bl	8000e4c <HAL_GetTick>
 80020d8:	4602      	mov	r2, r0
 80020da:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 80020de:	1ad3      	subs	r3, r2, r3
 80020e0:	2b02      	cmp	r3, #2
 80020e2:	d902      	bls.n	80020ea <HAL_RCC_OscConfig+0x7c2>
        {
          return HAL_TIMEOUT;
 80020e4:	2303      	movs	r3, #3
 80020e6:	f000 bc55 	b.w	8002994 <HAL_RCC_OscConfig+0x106c>
 80020ea:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80020ee:	f5a3 7390 	sub.w	r3, r3, #288	; 0x120
 80020f2:	2202      	movs	r2, #2
 80020f4:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80020f6:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80020fa:	f5a3 7390 	sub.w	r3, r3, #288	; 0x120
 80020fe:	681b      	ldr	r3, [r3, #0]
 8002100:	fa93 f2a3 	rbit	r2, r3
 8002104:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002108:	f5a3 7392 	sub.w	r3, r3, #292	; 0x124
 800210c:	601a      	str	r2, [r3, #0]
 800210e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002112:	f5a3 7394 	sub.w	r3, r3, #296	; 0x128
 8002116:	2202      	movs	r2, #2
 8002118:	601a      	str	r2, [r3, #0]
 800211a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800211e:	f5a3 7394 	sub.w	r3, r3, #296	; 0x128
 8002122:	681b      	ldr	r3, [r3, #0]
 8002124:	fa93 f2a3 	rbit	r2, r3
 8002128:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800212c:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8002130:	601a      	str	r2, [r3, #0]
 8002132:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002136:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800213a:	2202      	movs	r2, #2
 800213c:	601a      	str	r2, [r3, #0]
 800213e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002142:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8002146:	681b      	ldr	r3, [r3, #0]
 8002148:	fa93 f2a3 	rbit	r2, r3
 800214c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002150:	f5a3 739a 	sub.w	r3, r3, #308	; 0x134
 8002154:	601a      	str	r2, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002156:	4b41      	ldr	r3, [pc, #260]	; (800225c <HAL_RCC_OscConfig+0x934>)
 8002158:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800215a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800215e:	f5a3 739c 	sub.w	r3, r3, #312	; 0x138
 8002162:	2102      	movs	r1, #2
 8002164:	6019      	str	r1, [r3, #0]
 8002166:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800216a:	f5a3 739c 	sub.w	r3, r3, #312	; 0x138
 800216e:	681b      	ldr	r3, [r3, #0]
 8002170:	fa93 f1a3 	rbit	r1, r3
 8002174:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002178:	f5a3 739e 	sub.w	r3, r3, #316	; 0x13c
 800217c:	6019      	str	r1, [r3, #0]
  return result;
 800217e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002182:	f5a3 739e 	sub.w	r3, r3, #316	; 0x13c
 8002186:	681b      	ldr	r3, [r3, #0]
 8002188:	fab3 f383 	clz	r3, r3
 800218c:	b2db      	uxtb	r3, r3
 800218e:	f043 0360 	orr.w	r3, r3, #96	; 0x60
 8002192:	b2db      	uxtb	r3, r3
 8002194:	f003 031f 	and.w	r3, r3, #31
 8002198:	2101      	movs	r1, #1
 800219a:	fa01 f303 	lsl.w	r3, r1, r3
 800219e:	4013      	ands	r3, r2
 80021a0:	2b00      	cmp	r3, #0
 80021a2:	d197      	bne.n	80020d4 <HAL_RCC_OscConfig+0x7ac>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80021a4:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80021a8:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 80021ac:	681b      	ldr	r3, [r3, #0]
 80021ae:	681b      	ldr	r3, [r3, #0]
 80021b0:	f003 0304 	and.w	r3, r3, #4
 80021b4:	2b00      	cmp	r3, #0
 80021b6:	f000 81a1 	beq.w	80024fc <HAL_RCC_OscConfig+0xbd4>
  {
    FlagStatus       pwrclkchanged = RESET;
 80021ba:	2300      	movs	r3, #0
 80021bc:	f887 31ff 	strb.w	r3, [r7, #511]	; 0x1ff
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80021c0:	4b26      	ldr	r3, [pc, #152]	; (800225c <HAL_RCC_OscConfig+0x934>)
 80021c2:	69db      	ldr	r3, [r3, #28]
 80021c4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80021c8:	2b00      	cmp	r3, #0
 80021ca:	d116      	bne.n	80021fa <HAL_RCC_OscConfig+0x8d2>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80021cc:	4b23      	ldr	r3, [pc, #140]	; (800225c <HAL_RCC_OscConfig+0x934>)
 80021ce:	69db      	ldr	r3, [r3, #28]
 80021d0:	4a22      	ldr	r2, [pc, #136]	; (800225c <HAL_RCC_OscConfig+0x934>)
 80021d2:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80021d6:	61d3      	str	r3, [r2, #28]
 80021d8:	4b20      	ldr	r3, [pc, #128]	; (800225c <HAL_RCC_OscConfig+0x934>)
 80021da:	69db      	ldr	r3, [r3, #28]
 80021dc:	f003 5280 	and.w	r2, r3, #268435456	; 0x10000000
 80021e0:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80021e4:	f5a3 73fc 	sub.w	r3, r3, #504	; 0x1f8
 80021e8:	601a      	str	r2, [r3, #0]
 80021ea:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80021ee:	f5a3 73fc 	sub.w	r3, r3, #504	; 0x1f8
 80021f2:	681b      	ldr	r3, [r3, #0]
      pwrclkchanged = SET;
 80021f4:	2301      	movs	r3, #1
 80021f6:	f887 31ff 	strb.w	r3, [r7, #511]	; 0x1ff
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80021fa:	4b1a      	ldr	r3, [pc, #104]	; (8002264 <HAL_RCC_OscConfig+0x93c>)
 80021fc:	681b      	ldr	r3, [r3, #0]
 80021fe:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002202:	2b00      	cmp	r3, #0
 8002204:	d11a      	bne.n	800223c <HAL_RCC_OscConfig+0x914>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8002206:	4b17      	ldr	r3, [pc, #92]	; (8002264 <HAL_RCC_OscConfig+0x93c>)
 8002208:	681b      	ldr	r3, [r3, #0]
 800220a:	4a16      	ldr	r2, [pc, #88]	; (8002264 <HAL_RCC_OscConfig+0x93c>)
 800220c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002210:	6013      	str	r3, [r2, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002212:	f7fe fe1b 	bl	8000e4c <HAL_GetTick>
 8002216:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800221a:	e009      	b.n	8002230 <HAL_RCC_OscConfig+0x908>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800221c:	f7fe fe16 	bl	8000e4c <HAL_GetTick>
 8002220:	4602      	mov	r2, r0
 8002222:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8002226:	1ad3      	subs	r3, r2, r3
 8002228:	2b64      	cmp	r3, #100	; 0x64
 800222a:	d901      	bls.n	8002230 <HAL_RCC_OscConfig+0x908>
        {
          return HAL_TIMEOUT;
 800222c:	2303      	movs	r3, #3
 800222e:	e3b1      	b.n	8002994 <HAL_RCC_OscConfig+0x106c>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002230:	4b0c      	ldr	r3, [pc, #48]	; (8002264 <HAL_RCC_OscConfig+0x93c>)
 8002232:	681b      	ldr	r3, [r3, #0]
 8002234:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002238:	2b00      	cmp	r3, #0
 800223a:	d0ef      	beq.n	800221c <HAL_RCC_OscConfig+0x8f4>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800223c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002240:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8002244:	681b      	ldr	r3, [r3, #0]
 8002246:	68db      	ldr	r3, [r3, #12]
 8002248:	2b01      	cmp	r3, #1
 800224a:	d10d      	bne.n	8002268 <HAL_RCC_OscConfig+0x940>
 800224c:	4b03      	ldr	r3, [pc, #12]	; (800225c <HAL_RCC_OscConfig+0x934>)
 800224e:	6a1b      	ldr	r3, [r3, #32]
 8002250:	4a02      	ldr	r2, [pc, #8]	; (800225c <HAL_RCC_OscConfig+0x934>)
 8002252:	f043 0301 	orr.w	r3, r3, #1
 8002256:	6213      	str	r3, [r2, #32]
 8002258:	e03c      	b.n	80022d4 <HAL_RCC_OscConfig+0x9ac>
 800225a:	bf00      	nop
 800225c:	40021000 	.word	0x40021000
 8002260:	10908120 	.word	0x10908120
 8002264:	40007000 	.word	0x40007000
 8002268:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800226c:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8002270:	681b      	ldr	r3, [r3, #0]
 8002272:	68db      	ldr	r3, [r3, #12]
 8002274:	2b00      	cmp	r3, #0
 8002276:	d10c      	bne.n	8002292 <HAL_RCC_OscConfig+0x96a>
 8002278:	4bc1      	ldr	r3, [pc, #772]	; (8002580 <HAL_RCC_OscConfig+0xc58>)
 800227a:	6a1b      	ldr	r3, [r3, #32]
 800227c:	4ac0      	ldr	r2, [pc, #768]	; (8002580 <HAL_RCC_OscConfig+0xc58>)
 800227e:	f023 0301 	bic.w	r3, r3, #1
 8002282:	6213      	str	r3, [r2, #32]
 8002284:	4bbe      	ldr	r3, [pc, #760]	; (8002580 <HAL_RCC_OscConfig+0xc58>)
 8002286:	6a1b      	ldr	r3, [r3, #32]
 8002288:	4abd      	ldr	r2, [pc, #756]	; (8002580 <HAL_RCC_OscConfig+0xc58>)
 800228a:	f023 0304 	bic.w	r3, r3, #4
 800228e:	6213      	str	r3, [r2, #32]
 8002290:	e020      	b.n	80022d4 <HAL_RCC_OscConfig+0x9ac>
 8002292:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002296:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 800229a:	681b      	ldr	r3, [r3, #0]
 800229c:	68db      	ldr	r3, [r3, #12]
 800229e:	2b05      	cmp	r3, #5
 80022a0:	d10c      	bne.n	80022bc <HAL_RCC_OscConfig+0x994>
 80022a2:	4bb7      	ldr	r3, [pc, #732]	; (8002580 <HAL_RCC_OscConfig+0xc58>)
 80022a4:	6a1b      	ldr	r3, [r3, #32]
 80022a6:	4ab6      	ldr	r2, [pc, #728]	; (8002580 <HAL_RCC_OscConfig+0xc58>)
 80022a8:	f043 0304 	orr.w	r3, r3, #4
 80022ac:	6213      	str	r3, [r2, #32]
 80022ae:	4bb4      	ldr	r3, [pc, #720]	; (8002580 <HAL_RCC_OscConfig+0xc58>)
 80022b0:	6a1b      	ldr	r3, [r3, #32]
 80022b2:	4ab3      	ldr	r2, [pc, #716]	; (8002580 <HAL_RCC_OscConfig+0xc58>)
 80022b4:	f043 0301 	orr.w	r3, r3, #1
 80022b8:	6213      	str	r3, [r2, #32]
 80022ba:	e00b      	b.n	80022d4 <HAL_RCC_OscConfig+0x9ac>
 80022bc:	4bb0      	ldr	r3, [pc, #704]	; (8002580 <HAL_RCC_OscConfig+0xc58>)
 80022be:	6a1b      	ldr	r3, [r3, #32]
 80022c0:	4aaf      	ldr	r2, [pc, #700]	; (8002580 <HAL_RCC_OscConfig+0xc58>)
 80022c2:	f023 0301 	bic.w	r3, r3, #1
 80022c6:	6213      	str	r3, [r2, #32]
 80022c8:	4bad      	ldr	r3, [pc, #692]	; (8002580 <HAL_RCC_OscConfig+0xc58>)
 80022ca:	6a1b      	ldr	r3, [r3, #32]
 80022cc:	4aac      	ldr	r2, [pc, #688]	; (8002580 <HAL_RCC_OscConfig+0xc58>)
 80022ce:	f023 0304 	bic.w	r3, r3, #4
 80022d2:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 80022d4:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80022d8:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 80022dc:	681b      	ldr	r3, [r3, #0]
 80022de:	68db      	ldr	r3, [r3, #12]
 80022e0:	2b00      	cmp	r3, #0
 80022e2:	f000 8081 	beq.w	80023e8 <HAL_RCC_OscConfig+0xac0>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80022e6:	f7fe fdb1 	bl	8000e4c <HAL_GetTick>
 80022ea:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
      
      /* Wait till LSE is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80022ee:	e00b      	b.n	8002308 <HAL_RCC_OscConfig+0x9e0>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80022f0:	f7fe fdac 	bl	8000e4c <HAL_GetTick>
 80022f4:	4602      	mov	r2, r0
 80022f6:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 80022fa:	1ad3      	subs	r3, r2, r3
 80022fc:	f241 3288 	movw	r2, #5000	; 0x1388
 8002300:	4293      	cmp	r3, r2
 8002302:	d901      	bls.n	8002308 <HAL_RCC_OscConfig+0x9e0>
        {
          return HAL_TIMEOUT;
 8002304:	2303      	movs	r3, #3
 8002306:	e345      	b.n	8002994 <HAL_RCC_OscConfig+0x106c>
 8002308:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800230c:	f5a3 73a0 	sub.w	r3, r3, #320	; 0x140
 8002310:	2202      	movs	r2, #2
 8002312:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002314:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002318:	f5a3 73a0 	sub.w	r3, r3, #320	; 0x140
 800231c:	681b      	ldr	r3, [r3, #0]
 800231e:	fa93 f2a3 	rbit	r2, r3
 8002322:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002326:	f5a3 73a2 	sub.w	r3, r3, #324	; 0x144
 800232a:	601a      	str	r2, [r3, #0]
 800232c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002330:	f5a3 73a4 	sub.w	r3, r3, #328	; 0x148
 8002334:	2202      	movs	r2, #2
 8002336:	601a      	str	r2, [r3, #0]
 8002338:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800233c:	f5a3 73a4 	sub.w	r3, r3, #328	; 0x148
 8002340:	681b      	ldr	r3, [r3, #0]
 8002342:	fa93 f2a3 	rbit	r2, r3
 8002346:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800234a:	f5a3 73a6 	sub.w	r3, r3, #332	; 0x14c
 800234e:	601a      	str	r2, [r3, #0]
  return result;
 8002350:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002354:	f5a3 73a6 	sub.w	r3, r3, #332	; 0x14c
 8002358:	681b      	ldr	r3, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800235a:	fab3 f383 	clz	r3, r3
 800235e:	b2db      	uxtb	r3, r3
 8002360:	095b      	lsrs	r3, r3, #5
 8002362:	b2db      	uxtb	r3, r3
 8002364:	f043 0302 	orr.w	r3, r3, #2
 8002368:	b2db      	uxtb	r3, r3
 800236a:	2b02      	cmp	r3, #2
 800236c:	d102      	bne.n	8002374 <HAL_RCC_OscConfig+0xa4c>
 800236e:	4b84      	ldr	r3, [pc, #528]	; (8002580 <HAL_RCC_OscConfig+0xc58>)
 8002370:	6a1b      	ldr	r3, [r3, #32]
 8002372:	e013      	b.n	800239c <HAL_RCC_OscConfig+0xa74>
 8002374:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002378:	f5a3 73a8 	sub.w	r3, r3, #336	; 0x150
 800237c:	2202      	movs	r2, #2
 800237e:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002380:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002384:	f5a3 73a8 	sub.w	r3, r3, #336	; 0x150
 8002388:	681b      	ldr	r3, [r3, #0]
 800238a:	fa93 f2a3 	rbit	r2, r3
 800238e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002392:	f5a3 73aa 	sub.w	r3, r3, #340	; 0x154
 8002396:	601a      	str	r2, [r3, #0]
 8002398:	4b79      	ldr	r3, [pc, #484]	; (8002580 <HAL_RCC_OscConfig+0xc58>)
 800239a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800239c:	f507 7200 	add.w	r2, r7, #512	; 0x200
 80023a0:	f5a2 72ac 	sub.w	r2, r2, #344	; 0x158
 80023a4:	2102      	movs	r1, #2
 80023a6:	6011      	str	r1, [r2, #0]
 80023a8:	f507 7200 	add.w	r2, r7, #512	; 0x200
 80023ac:	f5a2 72ac 	sub.w	r2, r2, #344	; 0x158
 80023b0:	6812      	ldr	r2, [r2, #0]
 80023b2:	fa92 f1a2 	rbit	r1, r2
 80023b6:	f507 7200 	add.w	r2, r7, #512	; 0x200
 80023ba:	f5a2 72ae 	sub.w	r2, r2, #348	; 0x15c
 80023be:	6011      	str	r1, [r2, #0]
  return result;
 80023c0:	f507 7200 	add.w	r2, r7, #512	; 0x200
 80023c4:	f5a2 72ae 	sub.w	r2, r2, #348	; 0x15c
 80023c8:	6812      	ldr	r2, [r2, #0]
 80023ca:	fab2 f282 	clz	r2, r2
 80023ce:	b2d2      	uxtb	r2, r2
 80023d0:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80023d4:	b2d2      	uxtb	r2, r2
 80023d6:	f002 021f 	and.w	r2, r2, #31
 80023da:	2101      	movs	r1, #1
 80023dc:	fa01 f202 	lsl.w	r2, r1, r2
 80023e0:	4013      	ands	r3, r2
 80023e2:	2b00      	cmp	r3, #0
 80023e4:	d084      	beq.n	80022f0 <HAL_RCC_OscConfig+0x9c8>
 80023e6:	e07f      	b.n	80024e8 <HAL_RCC_OscConfig+0xbc0>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80023e8:	f7fe fd30 	bl	8000e4c <HAL_GetTick>
 80023ec:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
      
      /* Wait till LSE is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80023f0:	e00b      	b.n	800240a <HAL_RCC_OscConfig+0xae2>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80023f2:	f7fe fd2b 	bl	8000e4c <HAL_GetTick>
 80023f6:	4602      	mov	r2, r0
 80023f8:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 80023fc:	1ad3      	subs	r3, r2, r3
 80023fe:	f241 3288 	movw	r2, #5000	; 0x1388
 8002402:	4293      	cmp	r3, r2
 8002404:	d901      	bls.n	800240a <HAL_RCC_OscConfig+0xae2>
        {
          return HAL_TIMEOUT;
 8002406:	2303      	movs	r3, #3
 8002408:	e2c4      	b.n	8002994 <HAL_RCC_OscConfig+0x106c>
 800240a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800240e:	f5a3 73b0 	sub.w	r3, r3, #352	; 0x160
 8002412:	2202      	movs	r2, #2
 8002414:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002416:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800241a:	f5a3 73b0 	sub.w	r3, r3, #352	; 0x160
 800241e:	681b      	ldr	r3, [r3, #0]
 8002420:	fa93 f2a3 	rbit	r2, r3
 8002424:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002428:	f5a3 73b2 	sub.w	r3, r3, #356	; 0x164
 800242c:	601a      	str	r2, [r3, #0]
 800242e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002432:	f5a3 73b4 	sub.w	r3, r3, #360	; 0x168
 8002436:	2202      	movs	r2, #2
 8002438:	601a      	str	r2, [r3, #0]
 800243a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800243e:	f5a3 73b4 	sub.w	r3, r3, #360	; 0x168
 8002442:	681b      	ldr	r3, [r3, #0]
 8002444:	fa93 f2a3 	rbit	r2, r3
 8002448:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800244c:	f5a3 73b6 	sub.w	r3, r3, #364	; 0x16c
 8002450:	601a      	str	r2, [r3, #0]
  return result;
 8002452:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002456:	f5a3 73b6 	sub.w	r3, r3, #364	; 0x16c
 800245a:	681b      	ldr	r3, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800245c:	fab3 f383 	clz	r3, r3
 8002460:	b2db      	uxtb	r3, r3
 8002462:	095b      	lsrs	r3, r3, #5
 8002464:	b2db      	uxtb	r3, r3
 8002466:	f043 0302 	orr.w	r3, r3, #2
 800246a:	b2db      	uxtb	r3, r3
 800246c:	2b02      	cmp	r3, #2
 800246e:	d102      	bne.n	8002476 <HAL_RCC_OscConfig+0xb4e>
 8002470:	4b43      	ldr	r3, [pc, #268]	; (8002580 <HAL_RCC_OscConfig+0xc58>)
 8002472:	6a1b      	ldr	r3, [r3, #32]
 8002474:	e013      	b.n	800249e <HAL_RCC_OscConfig+0xb76>
 8002476:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800247a:	f5a3 73b8 	sub.w	r3, r3, #368	; 0x170
 800247e:	2202      	movs	r2, #2
 8002480:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002482:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002486:	f5a3 73b8 	sub.w	r3, r3, #368	; 0x170
 800248a:	681b      	ldr	r3, [r3, #0]
 800248c:	fa93 f2a3 	rbit	r2, r3
 8002490:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002494:	f5a3 73ba 	sub.w	r3, r3, #372	; 0x174
 8002498:	601a      	str	r2, [r3, #0]
 800249a:	4b39      	ldr	r3, [pc, #228]	; (8002580 <HAL_RCC_OscConfig+0xc58>)
 800249c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800249e:	f507 7200 	add.w	r2, r7, #512	; 0x200
 80024a2:	f5a2 72bc 	sub.w	r2, r2, #376	; 0x178
 80024a6:	2102      	movs	r1, #2
 80024a8:	6011      	str	r1, [r2, #0]
 80024aa:	f507 7200 	add.w	r2, r7, #512	; 0x200
 80024ae:	f5a2 72bc 	sub.w	r2, r2, #376	; 0x178
 80024b2:	6812      	ldr	r2, [r2, #0]
 80024b4:	fa92 f1a2 	rbit	r1, r2
 80024b8:	f507 7200 	add.w	r2, r7, #512	; 0x200
 80024bc:	f5a2 72be 	sub.w	r2, r2, #380	; 0x17c
 80024c0:	6011      	str	r1, [r2, #0]
  return result;
 80024c2:	f507 7200 	add.w	r2, r7, #512	; 0x200
 80024c6:	f5a2 72be 	sub.w	r2, r2, #380	; 0x17c
 80024ca:	6812      	ldr	r2, [r2, #0]
 80024cc:	fab2 f282 	clz	r2, r2
 80024d0:	b2d2      	uxtb	r2, r2
 80024d2:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80024d6:	b2d2      	uxtb	r2, r2
 80024d8:	f002 021f 	and.w	r2, r2, #31
 80024dc:	2101      	movs	r1, #1
 80024de:	fa01 f202 	lsl.w	r2, r1, r2
 80024e2:	4013      	ands	r3, r2
 80024e4:	2b00      	cmp	r3, #0
 80024e6:	d184      	bne.n	80023f2 <HAL_RCC_OscConfig+0xaca>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 80024e8:	f897 31ff 	ldrb.w	r3, [r7, #511]	; 0x1ff
 80024ec:	2b01      	cmp	r3, #1
 80024ee:	d105      	bne.n	80024fc <HAL_RCC_OscConfig+0xbd4>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80024f0:	4b23      	ldr	r3, [pc, #140]	; (8002580 <HAL_RCC_OscConfig+0xc58>)
 80024f2:	69db      	ldr	r3, [r3, #28]
 80024f4:	4a22      	ldr	r2, [pc, #136]	; (8002580 <HAL_RCC_OscConfig+0xc58>)
 80024f6:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80024fa:	61d3      	str	r3, [r2, #28]
  }

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80024fc:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002500:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8002504:	681b      	ldr	r3, [r3, #0]
 8002506:	69db      	ldr	r3, [r3, #28]
 8002508:	2b00      	cmp	r3, #0
 800250a:	f000 8242 	beq.w	8002992 <HAL_RCC_OscConfig+0x106a>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 800250e:	4b1c      	ldr	r3, [pc, #112]	; (8002580 <HAL_RCC_OscConfig+0xc58>)
 8002510:	685b      	ldr	r3, [r3, #4]
 8002512:	f003 030c 	and.w	r3, r3, #12
 8002516:	2b08      	cmp	r3, #8
 8002518:	f000 8213 	beq.w	8002942 <HAL_RCC_OscConfig+0x101a>
    { 
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800251c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002520:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8002524:	681b      	ldr	r3, [r3, #0]
 8002526:	69db      	ldr	r3, [r3, #28]
 8002528:	2b02      	cmp	r3, #2
 800252a:	f040 8162 	bne.w	80027f2 <HAL_RCC_OscConfig+0xeca>
 800252e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002532:	f5a3 73c0 	sub.w	r3, r3, #384	; 0x180
 8002536:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 800253a:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800253c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002540:	f5a3 73c0 	sub.w	r3, r3, #384	; 0x180
 8002544:	681b      	ldr	r3, [r3, #0]
 8002546:	fa93 f2a3 	rbit	r2, r3
 800254a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800254e:	f5a3 73c2 	sub.w	r3, r3, #388	; 0x184
 8002552:	601a      	str	r2, [r3, #0]
  return result;
 8002554:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002558:	f5a3 73c2 	sub.w	r3, r3, #388	; 0x184
 800255c:	681b      	ldr	r3, [r3, #0]
#if   defined(RCC_CFGR_PLLSRC_HSI_PREDIV)
        assert_param(IS_RCC_PREDIV(RCC_OscInitStruct->PLL.PREDIV));
#endif
  
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800255e:	fab3 f383 	clz	r3, r3
 8002562:	b2db      	uxtb	r3, r3
 8002564:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8002568:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 800256c:	009b      	lsls	r3, r3, #2
 800256e:	461a      	mov	r2, r3
 8002570:	2300      	movs	r3, #0
 8002572:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002574:	f7fe fc6a 	bl	8000e4c <HAL_GetTick>
 8002578:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800257c:	e00c      	b.n	8002598 <HAL_RCC_OscConfig+0xc70>
 800257e:	bf00      	nop
 8002580:	40021000 	.word	0x40021000
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002584:	f7fe fc62 	bl	8000e4c <HAL_GetTick>
 8002588:	4602      	mov	r2, r0
 800258a:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 800258e:	1ad3      	subs	r3, r2, r3
 8002590:	2b02      	cmp	r3, #2
 8002592:	d901      	bls.n	8002598 <HAL_RCC_OscConfig+0xc70>
          {
            return HAL_TIMEOUT;
 8002594:	2303      	movs	r3, #3
 8002596:	e1fd      	b.n	8002994 <HAL_RCC_OscConfig+0x106c>
 8002598:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800259c:	f5a3 73c4 	sub.w	r3, r3, #392	; 0x188
 80025a0:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 80025a4:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80025a6:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80025aa:	f5a3 73c4 	sub.w	r3, r3, #392	; 0x188
 80025ae:	681b      	ldr	r3, [r3, #0]
 80025b0:	fa93 f2a3 	rbit	r2, r3
 80025b4:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80025b8:	f5a3 73c6 	sub.w	r3, r3, #396	; 0x18c
 80025bc:	601a      	str	r2, [r3, #0]
  return result;
 80025be:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80025c2:	f5a3 73c6 	sub.w	r3, r3, #396	; 0x18c
 80025c6:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80025c8:	fab3 f383 	clz	r3, r3
 80025cc:	b2db      	uxtb	r3, r3
 80025ce:	095b      	lsrs	r3, r3, #5
 80025d0:	b2db      	uxtb	r3, r3
 80025d2:	f043 0301 	orr.w	r3, r3, #1
 80025d6:	b2db      	uxtb	r3, r3
 80025d8:	2b01      	cmp	r3, #1
 80025da:	d102      	bne.n	80025e2 <HAL_RCC_OscConfig+0xcba>
 80025dc:	4bb0      	ldr	r3, [pc, #704]	; (80028a0 <HAL_RCC_OscConfig+0xf78>)
 80025de:	681b      	ldr	r3, [r3, #0]
 80025e0:	e027      	b.n	8002632 <HAL_RCC_OscConfig+0xd0a>
 80025e2:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80025e6:	f5a3 73c8 	sub.w	r3, r3, #400	; 0x190
 80025ea:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 80025ee:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80025f0:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80025f4:	f5a3 73c8 	sub.w	r3, r3, #400	; 0x190
 80025f8:	681b      	ldr	r3, [r3, #0]
 80025fa:	fa93 f2a3 	rbit	r2, r3
 80025fe:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002602:	f5a3 73ca 	sub.w	r3, r3, #404	; 0x194
 8002606:	601a      	str	r2, [r3, #0]
 8002608:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800260c:	f5a3 73cc 	sub.w	r3, r3, #408	; 0x198
 8002610:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8002614:	601a      	str	r2, [r3, #0]
 8002616:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800261a:	f5a3 73cc 	sub.w	r3, r3, #408	; 0x198
 800261e:	681b      	ldr	r3, [r3, #0]
 8002620:	fa93 f2a3 	rbit	r2, r3
 8002624:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002628:	f5a3 73ce 	sub.w	r3, r3, #412	; 0x19c
 800262c:	601a      	str	r2, [r3, #0]
 800262e:	4b9c      	ldr	r3, [pc, #624]	; (80028a0 <HAL_RCC_OscConfig+0xf78>)
 8002630:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002632:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8002636:	f5a2 72d0 	sub.w	r2, r2, #416	; 0x1a0
 800263a:	f04f 7100 	mov.w	r1, #33554432	; 0x2000000
 800263e:	6011      	str	r1, [r2, #0]
 8002640:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8002644:	f5a2 72d0 	sub.w	r2, r2, #416	; 0x1a0
 8002648:	6812      	ldr	r2, [r2, #0]
 800264a:	fa92 f1a2 	rbit	r1, r2
 800264e:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8002652:	f5a2 72d2 	sub.w	r2, r2, #420	; 0x1a4
 8002656:	6011      	str	r1, [r2, #0]
  return result;
 8002658:	f507 7200 	add.w	r2, r7, #512	; 0x200
 800265c:	f5a2 72d2 	sub.w	r2, r2, #420	; 0x1a4
 8002660:	6812      	ldr	r2, [r2, #0]
 8002662:	fab2 f282 	clz	r2, r2
 8002666:	b2d2      	uxtb	r2, r2
 8002668:	f042 0220 	orr.w	r2, r2, #32
 800266c:	b2d2      	uxtb	r2, r2
 800266e:	f002 021f 	and.w	r2, r2, #31
 8002672:	2101      	movs	r1, #1
 8002674:	fa01 f202 	lsl.w	r2, r1, r2
 8002678:	4013      	ands	r3, r2
 800267a:	2b00      	cmp	r3, #0
 800267c:	d182      	bne.n	8002584 <HAL_RCC_OscConfig+0xc5c>
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
                             RCC_OscInitStruct->PLL.PREDIV,
                             RCC_OscInitStruct->PLL.PLLMUL);
#else
      /* Configure the main PLL clock source and multiplication factor. */
      __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 800267e:	4b88      	ldr	r3, [pc, #544]	; (80028a0 <HAL_RCC_OscConfig+0xf78>)
 8002680:	685b      	ldr	r3, [r3, #4]
 8002682:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 8002686:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800268a:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 800268e:	681b      	ldr	r3, [r3, #0]
 8002690:	6a59      	ldr	r1, [r3, #36]	; 0x24
 8002692:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002696:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 800269a:	681b      	ldr	r3, [r3, #0]
 800269c:	6a1b      	ldr	r3, [r3, #32]
 800269e:	430b      	orrs	r3, r1
 80026a0:	497f      	ldr	r1, [pc, #508]	; (80028a0 <HAL_RCC_OscConfig+0xf78>)
 80026a2:	4313      	orrs	r3, r2
 80026a4:	604b      	str	r3, [r1, #4]
 80026a6:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80026aa:	f5a3 73d4 	sub.w	r3, r3, #424	; 0x1a8
 80026ae:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 80026b2:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80026b4:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80026b8:	f5a3 73d4 	sub.w	r3, r3, #424	; 0x1a8
 80026bc:	681b      	ldr	r3, [r3, #0]
 80026be:	fa93 f2a3 	rbit	r2, r3
 80026c2:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80026c6:	f5a3 73d6 	sub.w	r3, r3, #428	; 0x1ac
 80026ca:	601a      	str	r2, [r3, #0]
  return result;
 80026cc:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80026d0:	f5a3 73d6 	sub.w	r3, r3, #428	; 0x1ac
 80026d4:	681b      	ldr	r3, [r3, #0]
                           RCC_OscInitStruct->PLL.PLLMUL);
#endif /* RCC_CFGR_PLLSRC_HSI_PREDIV */
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80026d6:	fab3 f383 	clz	r3, r3
 80026da:	b2db      	uxtb	r3, r3
 80026dc:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 80026e0:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 80026e4:	009b      	lsls	r3, r3, #2
 80026e6:	461a      	mov	r2, r3
 80026e8:	2301      	movs	r3, #1
 80026ea:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80026ec:	f7fe fbae 	bl	8000e4c <HAL_GetTick>
 80026f0:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 80026f4:	e009      	b.n	800270a <HAL_RCC_OscConfig+0xde2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80026f6:	f7fe fba9 	bl	8000e4c <HAL_GetTick>
 80026fa:	4602      	mov	r2, r0
 80026fc:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8002700:	1ad3      	subs	r3, r2, r3
 8002702:	2b02      	cmp	r3, #2
 8002704:	d901      	bls.n	800270a <HAL_RCC_OscConfig+0xde2>
          {
            return HAL_TIMEOUT;
 8002706:	2303      	movs	r3, #3
 8002708:	e144      	b.n	8002994 <HAL_RCC_OscConfig+0x106c>
 800270a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800270e:	f5a3 73d8 	sub.w	r3, r3, #432	; 0x1b0
 8002712:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8002716:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002718:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800271c:	f5a3 73d8 	sub.w	r3, r3, #432	; 0x1b0
 8002720:	681b      	ldr	r3, [r3, #0]
 8002722:	fa93 f2a3 	rbit	r2, r3
 8002726:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800272a:	f5a3 73da 	sub.w	r3, r3, #436	; 0x1b4
 800272e:	601a      	str	r2, [r3, #0]
  return result;
 8002730:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002734:	f5a3 73da 	sub.w	r3, r3, #436	; 0x1b4
 8002738:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 800273a:	fab3 f383 	clz	r3, r3
 800273e:	b2db      	uxtb	r3, r3
 8002740:	095b      	lsrs	r3, r3, #5
 8002742:	b2db      	uxtb	r3, r3
 8002744:	f043 0301 	orr.w	r3, r3, #1
 8002748:	b2db      	uxtb	r3, r3
 800274a:	2b01      	cmp	r3, #1
 800274c:	d102      	bne.n	8002754 <HAL_RCC_OscConfig+0xe2c>
 800274e:	4b54      	ldr	r3, [pc, #336]	; (80028a0 <HAL_RCC_OscConfig+0xf78>)
 8002750:	681b      	ldr	r3, [r3, #0]
 8002752:	e027      	b.n	80027a4 <HAL_RCC_OscConfig+0xe7c>
 8002754:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002758:	f5a3 73dc 	sub.w	r3, r3, #440	; 0x1b8
 800275c:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8002760:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002762:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002766:	f5a3 73dc 	sub.w	r3, r3, #440	; 0x1b8
 800276a:	681b      	ldr	r3, [r3, #0]
 800276c:	fa93 f2a3 	rbit	r2, r3
 8002770:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002774:	f5a3 73de 	sub.w	r3, r3, #444	; 0x1bc
 8002778:	601a      	str	r2, [r3, #0]
 800277a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800277e:	f5a3 73e0 	sub.w	r3, r3, #448	; 0x1c0
 8002782:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8002786:	601a      	str	r2, [r3, #0]
 8002788:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800278c:	f5a3 73e0 	sub.w	r3, r3, #448	; 0x1c0
 8002790:	681b      	ldr	r3, [r3, #0]
 8002792:	fa93 f2a3 	rbit	r2, r3
 8002796:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800279a:	f5a3 73e2 	sub.w	r3, r3, #452	; 0x1c4
 800279e:	601a      	str	r2, [r3, #0]
 80027a0:	4b3f      	ldr	r3, [pc, #252]	; (80028a0 <HAL_RCC_OscConfig+0xf78>)
 80027a2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80027a4:	f507 7200 	add.w	r2, r7, #512	; 0x200
 80027a8:	f5a2 72e4 	sub.w	r2, r2, #456	; 0x1c8
 80027ac:	f04f 7100 	mov.w	r1, #33554432	; 0x2000000
 80027b0:	6011      	str	r1, [r2, #0]
 80027b2:	f507 7200 	add.w	r2, r7, #512	; 0x200
 80027b6:	f5a2 72e4 	sub.w	r2, r2, #456	; 0x1c8
 80027ba:	6812      	ldr	r2, [r2, #0]
 80027bc:	fa92 f1a2 	rbit	r1, r2
 80027c0:	f507 7200 	add.w	r2, r7, #512	; 0x200
 80027c4:	f5a2 72e6 	sub.w	r2, r2, #460	; 0x1cc
 80027c8:	6011      	str	r1, [r2, #0]
  return result;
 80027ca:	f507 7200 	add.w	r2, r7, #512	; 0x200
 80027ce:	f5a2 72e6 	sub.w	r2, r2, #460	; 0x1cc
 80027d2:	6812      	ldr	r2, [r2, #0]
 80027d4:	fab2 f282 	clz	r2, r2
 80027d8:	b2d2      	uxtb	r2, r2
 80027da:	f042 0220 	orr.w	r2, r2, #32
 80027de:	b2d2      	uxtb	r2, r2
 80027e0:	f002 021f 	and.w	r2, r2, #31
 80027e4:	2101      	movs	r1, #1
 80027e6:	fa01 f202 	lsl.w	r2, r1, r2
 80027ea:	4013      	ands	r3, r2
 80027ec:	2b00      	cmp	r3, #0
 80027ee:	d082      	beq.n	80026f6 <HAL_RCC_OscConfig+0xdce>
 80027f0:	e0cf      	b.n	8002992 <HAL_RCC_OscConfig+0x106a>
 80027f2:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80027f6:	f5a3 73e8 	sub.w	r3, r3, #464	; 0x1d0
 80027fa:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 80027fe:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002800:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002804:	f5a3 73e8 	sub.w	r3, r3, #464	; 0x1d0
 8002808:	681b      	ldr	r3, [r3, #0]
 800280a:	fa93 f2a3 	rbit	r2, r3
 800280e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002812:	f5a3 73ea 	sub.w	r3, r3, #468	; 0x1d4
 8002816:	601a      	str	r2, [r3, #0]
  return result;
 8002818:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800281c:	f5a3 73ea 	sub.w	r3, r3, #468	; 0x1d4
 8002820:	681b      	ldr	r3, [r3, #0]
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002822:	fab3 f383 	clz	r3, r3
 8002826:	b2db      	uxtb	r3, r3
 8002828:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 800282c:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8002830:	009b      	lsls	r3, r3, #2
 8002832:	461a      	mov	r2, r3
 8002834:	2300      	movs	r3, #0
 8002836:	6013      	str	r3, [r2, #0]
 
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002838:	f7fe fb08 	bl	8000e4c <HAL_GetTick>
 800283c:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till PLL is disabled */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002840:	e009      	b.n	8002856 <HAL_RCC_OscConfig+0xf2e>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002842:	f7fe fb03 	bl	8000e4c <HAL_GetTick>
 8002846:	4602      	mov	r2, r0
 8002848:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 800284c:	1ad3      	subs	r3, r2, r3
 800284e:	2b02      	cmp	r3, #2
 8002850:	d901      	bls.n	8002856 <HAL_RCC_OscConfig+0xf2e>
          {
            return HAL_TIMEOUT;
 8002852:	2303      	movs	r3, #3
 8002854:	e09e      	b.n	8002994 <HAL_RCC_OscConfig+0x106c>
 8002856:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800285a:	f5a3 73ec 	sub.w	r3, r3, #472	; 0x1d8
 800285e:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8002862:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002864:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002868:	f5a3 73ec 	sub.w	r3, r3, #472	; 0x1d8
 800286c:	681b      	ldr	r3, [r3, #0]
 800286e:	fa93 f2a3 	rbit	r2, r3
 8002872:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002876:	f5a3 73ee 	sub.w	r3, r3, #476	; 0x1dc
 800287a:	601a      	str	r2, [r3, #0]
  return result;
 800287c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002880:	f5a3 73ee 	sub.w	r3, r3, #476	; 0x1dc
 8002884:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002886:	fab3 f383 	clz	r3, r3
 800288a:	b2db      	uxtb	r3, r3
 800288c:	095b      	lsrs	r3, r3, #5
 800288e:	b2db      	uxtb	r3, r3
 8002890:	f043 0301 	orr.w	r3, r3, #1
 8002894:	b2db      	uxtb	r3, r3
 8002896:	2b01      	cmp	r3, #1
 8002898:	d104      	bne.n	80028a4 <HAL_RCC_OscConfig+0xf7c>
 800289a:	4b01      	ldr	r3, [pc, #4]	; (80028a0 <HAL_RCC_OscConfig+0xf78>)
 800289c:	681b      	ldr	r3, [r3, #0]
 800289e:	e029      	b.n	80028f4 <HAL_RCC_OscConfig+0xfcc>
 80028a0:	40021000 	.word	0x40021000
 80028a4:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80028a8:	f5a3 73f0 	sub.w	r3, r3, #480	; 0x1e0
 80028ac:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 80028b0:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80028b2:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80028b6:	f5a3 73f0 	sub.w	r3, r3, #480	; 0x1e0
 80028ba:	681b      	ldr	r3, [r3, #0]
 80028bc:	fa93 f2a3 	rbit	r2, r3
 80028c0:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80028c4:	f5a3 73f2 	sub.w	r3, r3, #484	; 0x1e4
 80028c8:	601a      	str	r2, [r3, #0]
 80028ca:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80028ce:	f5a3 73f4 	sub.w	r3, r3, #488	; 0x1e8
 80028d2:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 80028d6:	601a      	str	r2, [r3, #0]
 80028d8:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80028dc:	f5a3 73f4 	sub.w	r3, r3, #488	; 0x1e8
 80028e0:	681b      	ldr	r3, [r3, #0]
 80028e2:	fa93 f2a3 	rbit	r2, r3
 80028e6:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80028ea:	f5a3 73f6 	sub.w	r3, r3, #492	; 0x1ec
 80028ee:	601a      	str	r2, [r3, #0]
 80028f0:	4b2b      	ldr	r3, [pc, #172]	; (80029a0 <HAL_RCC_OscConfig+0x1078>)
 80028f2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80028f4:	f507 7200 	add.w	r2, r7, #512	; 0x200
 80028f8:	f5a2 72f8 	sub.w	r2, r2, #496	; 0x1f0
 80028fc:	f04f 7100 	mov.w	r1, #33554432	; 0x2000000
 8002900:	6011      	str	r1, [r2, #0]
 8002902:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8002906:	f5a2 72f8 	sub.w	r2, r2, #496	; 0x1f0
 800290a:	6812      	ldr	r2, [r2, #0]
 800290c:	fa92 f1a2 	rbit	r1, r2
 8002910:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8002914:	f5a2 72fa 	sub.w	r2, r2, #500	; 0x1f4
 8002918:	6011      	str	r1, [r2, #0]
  return result;
 800291a:	f507 7200 	add.w	r2, r7, #512	; 0x200
 800291e:	f5a2 72fa 	sub.w	r2, r2, #500	; 0x1f4
 8002922:	6812      	ldr	r2, [r2, #0]
 8002924:	fab2 f282 	clz	r2, r2
 8002928:	b2d2      	uxtb	r2, r2
 800292a:	f042 0220 	orr.w	r2, r2, #32
 800292e:	b2d2      	uxtb	r2, r2
 8002930:	f002 021f 	and.w	r2, r2, #31
 8002934:	2101      	movs	r1, #1
 8002936:	fa01 f202 	lsl.w	r2, r1, r2
 800293a:	4013      	ands	r3, r2
 800293c:	2b00      	cmp	r3, #0
 800293e:	d180      	bne.n	8002842 <HAL_RCC_OscConfig+0xf1a>
 8002940:	e027      	b.n	8002992 <HAL_RCC_OscConfig+0x106a>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8002942:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002946:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 800294a:	681b      	ldr	r3, [r3, #0]
 800294c:	69db      	ldr	r3, [r3, #28]
 800294e:	2b01      	cmp	r3, #1
 8002950:	d101      	bne.n	8002956 <HAL_RCC_OscConfig+0x102e>
      {
        return HAL_ERROR;
 8002952:	2301      	movs	r3, #1
 8002954:	e01e      	b.n	8002994 <HAL_RCC_OscConfig+0x106c>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8002956:	4b12      	ldr	r3, [pc, #72]	; (80029a0 <HAL_RCC_OscConfig+0x1078>)
 8002958:	685b      	ldr	r3, [r3, #4]
 800295a:	f8c7 31f4 	str.w	r3, [r7, #500]	; 0x1f4
        pll_config2 = RCC->CFGR2;
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL)   != RCC_OscInitStruct->PLL.PLLMUL)    ||      
           (READ_BIT(pll_config2, RCC_CFGR2_PREDIV)  != RCC_OscInitStruct->PLL.PREDIV))     
#else
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
 800295e:	f8d7 31f4 	ldr.w	r3, [r7, #500]	; 0x1f4
 8002962:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 8002966:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800296a:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 800296e:	681b      	ldr	r3, [r3, #0]
 8002970:	6a1b      	ldr	r3, [r3, #32]
 8002972:	429a      	cmp	r2, r3
 8002974:	d10b      	bne.n	800298e <HAL_RCC_OscConfig+0x1066>
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL)   != RCC_OscInitStruct->PLL.PLLMUL))
 8002976:	f8d7 31f4 	ldr.w	r3, [r7, #500]	; 0x1f4
 800297a:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 800297e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002982:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8002986:	681b      	ldr	r3, [r3, #0]
 8002988:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
 800298a:	429a      	cmp	r2, r3
 800298c:	d001      	beq.n	8002992 <HAL_RCC_OscConfig+0x106a>
#endif
        {
          return HAL_ERROR;
 800298e:	2301      	movs	r3, #1
 8002990:	e000      	b.n	8002994 <HAL_RCC_OscConfig+0x106c>
        }
      }
    }
  }

  return HAL_OK;
 8002992:	2300      	movs	r3, #0
}
 8002994:	4618      	mov	r0, r3
 8002996:	f507 7700 	add.w	r7, r7, #512	; 0x200
 800299a:	46bd      	mov	sp, r7
 800299c:	bd80      	pop	{r7, pc}
 800299e:	bf00      	nop
 80029a0:	40021000 	.word	0x40021000

080029a4 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80029a4:	b580      	push	{r7, lr}
 80029a6:	b09e      	sub	sp, #120	; 0x78
 80029a8:	af00      	add	r7, sp, #0
 80029aa:	6078      	str	r0, [r7, #4]
 80029ac:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0U;
 80029ae:	2300      	movs	r3, #0
 80029b0:	677b      	str	r3, [r7, #116]	; 0x74

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 80029b2:	687b      	ldr	r3, [r7, #4]
 80029b4:	2b00      	cmp	r3, #0
 80029b6:	d101      	bne.n	80029bc <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 80029b8:	2301      	movs	r3, #1
 80029ba:	e162      	b.n	8002c82 <HAL_RCC_ClockConfig+0x2de>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY) 
  must be correctly programmed according to the frequency of the CPU clock 
    (HCLK) of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80029bc:	4b90      	ldr	r3, [pc, #576]	; (8002c00 <HAL_RCC_ClockConfig+0x25c>)
 80029be:	681b      	ldr	r3, [r3, #0]
 80029c0:	f003 0307 	and.w	r3, r3, #7
 80029c4:	683a      	ldr	r2, [r7, #0]
 80029c6:	429a      	cmp	r2, r3
 80029c8:	d910      	bls.n	80029ec <HAL_RCC_ClockConfig+0x48>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80029ca:	4b8d      	ldr	r3, [pc, #564]	; (8002c00 <HAL_RCC_ClockConfig+0x25c>)
 80029cc:	681b      	ldr	r3, [r3, #0]
 80029ce:	f023 0207 	bic.w	r2, r3, #7
 80029d2:	498b      	ldr	r1, [pc, #556]	; (8002c00 <HAL_RCC_ClockConfig+0x25c>)
 80029d4:	683b      	ldr	r3, [r7, #0]
 80029d6:	4313      	orrs	r3, r2
 80029d8:	600b      	str	r3, [r1, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80029da:	4b89      	ldr	r3, [pc, #548]	; (8002c00 <HAL_RCC_ClockConfig+0x25c>)
 80029dc:	681b      	ldr	r3, [r3, #0]
 80029de:	f003 0307 	and.w	r3, r3, #7
 80029e2:	683a      	ldr	r2, [r7, #0]
 80029e4:	429a      	cmp	r2, r3
 80029e6:	d001      	beq.n	80029ec <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 80029e8:	2301      	movs	r3, #1
 80029ea:	e14a      	b.n	8002c82 <HAL_RCC_ClockConfig+0x2de>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80029ec:	687b      	ldr	r3, [r7, #4]
 80029ee:	681b      	ldr	r3, [r3, #0]
 80029f0:	f003 0302 	and.w	r3, r3, #2
 80029f4:	2b00      	cmp	r3, #0
 80029f6:	d008      	beq.n	8002a0a <HAL_RCC_ClockConfig+0x66>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80029f8:	4b82      	ldr	r3, [pc, #520]	; (8002c04 <HAL_RCC_ClockConfig+0x260>)
 80029fa:	685b      	ldr	r3, [r3, #4]
 80029fc:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002a00:	687b      	ldr	r3, [r7, #4]
 8002a02:	689b      	ldr	r3, [r3, #8]
 8002a04:	497f      	ldr	r1, [pc, #508]	; (8002c04 <HAL_RCC_ClockConfig+0x260>)
 8002a06:	4313      	orrs	r3, r2
 8002a08:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002a0a:	687b      	ldr	r3, [r7, #4]
 8002a0c:	681b      	ldr	r3, [r3, #0]
 8002a0e:	f003 0301 	and.w	r3, r3, #1
 8002a12:	2b00      	cmp	r3, #0
 8002a14:	f000 80dc 	beq.w	8002bd0 <HAL_RCC_ClockConfig+0x22c>
  {    
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
    
    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002a18:	687b      	ldr	r3, [r7, #4]
 8002a1a:	685b      	ldr	r3, [r3, #4]
 8002a1c:	2b01      	cmp	r3, #1
 8002a1e:	d13c      	bne.n	8002a9a <HAL_RCC_ClockConfig+0xf6>
 8002a20:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8002a24:	673b      	str	r3, [r7, #112]	; 0x70
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002a26:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8002a28:	fa93 f3a3 	rbit	r3, r3
 8002a2c:	66fb      	str	r3, [r7, #108]	; 0x6c
  return result;
 8002a2e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
    {
      /* Check the HSE ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002a30:	fab3 f383 	clz	r3, r3
 8002a34:	b2db      	uxtb	r3, r3
 8002a36:	095b      	lsrs	r3, r3, #5
 8002a38:	b2db      	uxtb	r3, r3
 8002a3a:	f043 0301 	orr.w	r3, r3, #1
 8002a3e:	b2db      	uxtb	r3, r3
 8002a40:	2b01      	cmp	r3, #1
 8002a42:	d102      	bne.n	8002a4a <HAL_RCC_ClockConfig+0xa6>
 8002a44:	4b6f      	ldr	r3, [pc, #444]	; (8002c04 <HAL_RCC_ClockConfig+0x260>)
 8002a46:	681b      	ldr	r3, [r3, #0]
 8002a48:	e00f      	b.n	8002a6a <HAL_RCC_ClockConfig+0xc6>
 8002a4a:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8002a4e:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002a50:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8002a52:	fa93 f3a3 	rbit	r3, r3
 8002a56:	667b      	str	r3, [r7, #100]	; 0x64
 8002a58:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8002a5c:	663b      	str	r3, [r7, #96]	; 0x60
 8002a5e:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8002a60:	fa93 f3a3 	rbit	r3, r3
 8002a64:	65fb      	str	r3, [r7, #92]	; 0x5c
 8002a66:	4b67      	ldr	r3, [pc, #412]	; (8002c04 <HAL_RCC_ClockConfig+0x260>)
 8002a68:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002a6a:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8002a6e:	65ba      	str	r2, [r7, #88]	; 0x58
 8002a70:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8002a72:	fa92 f2a2 	rbit	r2, r2
 8002a76:	657a      	str	r2, [r7, #84]	; 0x54
  return result;
 8002a78:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8002a7a:	fab2 f282 	clz	r2, r2
 8002a7e:	b2d2      	uxtb	r2, r2
 8002a80:	f042 0220 	orr.w	r2, r2, #32
 8002a84:	b2d2      	uxtb	r2, r2
 8002a86:	f002 021f 	and.w	r2, r2, #31
 8002a8a:	2101      	movs	r1, #1
 8002a8c:	fa01 f202 	lsl.w	r2, r1, r2
 8002a90:	4013      	ands	r3, r2
 8002a92:	2b00      	cmp	r3, #0
 8002a94:	d17b      	bne.n	8002b8e <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 8002a96:	2301      	movs	r3, #1
 8002a98:	e0f3      	b.n	8002c82 <HAL_RCC_ClockConfig+0x2de>
      }
    }
    /* PLL is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8002a9a:	687b      	ldr	r3, [r7, #4]
 8002a9c:	685b      	ldr	r3, [r3, #4]
 8002a9e:	2b02      	cmp	r3, #2
 8002aa0:	d13c      	bne.n	8002b1c <HAL_RCC_ClockConfig+0x178>
 8002aa2:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8002aa6:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002aa8:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8002aaa:	fa93 f3a3 	rbit	r3, r3
 8002aae:	64fb      	str	r3, [r7, #76]	; 0x4c
  return result;
 8002ab0:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
    {
      /* Check the PLL ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002ab2:	fab3 f383 	clz	r3, r3
 8002ab6:	b2db      	uxtb	r3, r3
 8002ab8:	095b      	lsrs	r3, r3, #5
 8002aba:	b2db      	uxtb	r3, r3
 8002abc:	f043 0301 	orr.w	r3, r3, #1
 8002ac0:	b2db      	uxtb	r3, r3
 8002ac2:	2b01      	cmp	r3, #1
 8002ac4:	d102      	bne.n	8002acc <HAL_RCC_ClockConfig+0x128>
 8002ac6:	4b4f      	ldr	r3, [pc, #316]	; (8002c04 <HAL_RCC_ClockConfig+0x260>)
 8002ac8:	681b      	ldr	r3, [r3, #0]
 8002aca:	e00f      	b.n	8002aec <HAL_RCC_ClockConfig+0x148>
 8002acc:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8002ad0:	64bb      	str	r3, [r7, #72]	; 0x48
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002ad2:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8002ad4:	fa93 f3a3 	rbit	r3, r3
 8002ad8:	647b      	str	r3, [r7, #68]	; 0x44
 8002ada:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8002ade:	643b      	str	r3, [r7, #64]	; 0x40
 8002ae0:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8002ae2:	fa93 f3a3 	rbit	r3, r3
 8002ae6:	63fb      	str	r3, [r7, #60]	; 0x3c
 8002ae8:	4b46      	ldr	r3, [pc, #280]	; (8002c04 <HAL_RCC_ClockConfig+0x260>)
 8002aea:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002aec:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8002af0:	63ba      	str	r2, [r7, #56]	; 0x38
 8002af2:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8002af4:	fa92 f2a2 	rbit	r2, r2
 8002af8:	637a      	str	r2, [r7, #52]	; 0x34
  return result;
 8002afa:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8002afc:	fab2 f282 	clz	r2, r2
 8002b00:	b2d2      	uxtb	r2, r2
 8002b02:	f042 0220 	orr.w	r2, r2, #32
 8002b06:	b2d2      	uxtb	r2, r2
 8002b08:	f002 021f 	and.w	r2, r2, #31
 8002b0c:	2101      	movs	r1, #1
 8002b0e:	fa01 f202 	lsl.w	r2, r1, r2
 8002b12:	4013      	ands	r3, r2
 8002b14:	2b00      	cmp	r3, #0
 8002b16:	d13a      	bne.n	8002b8e <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 8002b18:	2301      	movs	r3, #1
 8002b1a:	e0b2      	b.n	8002c82 <HAL_RCC_ClockConfig+0x2de>
 8002b1c:	2302      	movs	r3, #2
 8002b1e:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002b20:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002b22:	fa93 f3a3 	rbit	r3, r3
 8002b26:	62fb      	str	r3, [r7, #44]	; 0x2c
  return result;
 8002b28:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002b2a:	fab3 f383 	clz	r3, r3
 8002b2e:	b2db      	uxtb	r3, r3
 8002b30:	095b      	lsrs	r3, r3, #5
 8002b32:	b2db      	uxtb	r3, r3
 8002b34:	f043 0301 	orr.w	r3, r3, #1
 8002b38:	b2db      	uxtb	r3, r3
 8002b3a:	2b01      	cmp	r3, #1
 8002b3c:	d102      	bne.n	8002b44 <HAL_RCC_ClockConfig+0x1a0>
 8002b3e:	4b31      	ldr	r3, [pc, #196]	; (8002c04 <HAL_RCC_ClockConfig+0x260>)
 8002b40:	681b      	ldr	r3, [r3, #0]
 8002b42:	e00d      	b.n	8002b60 <HAL_RCC_ClockConfig+0x1bc>
 8002b44:	2302      	movs	r3, #2
 8002b46:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002b48:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002b4a:	fa93 f3a3 	rbit	r3, r3
 8002b4e:	627b      	str	r3, [r7, #36]	; 0x24
 8002b50:	2302      	movs	r3, #2
 8002b52:	623b      	str	r3, [r7, #32]
 8002b54:	6a3b      	ldr	r3, [r7, #32]
 8002b56:	fa93 f3a3 	rbit	r3, r3
 8002b5a:	61fb      	str	r3, [r7, #28]
 8002b5c:	4b29      	ldr	r3, [pc, #164]	; (8002c04 <HAL_RCC_ClockConfig+0x260>)
 8002b5e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002b60:	2202      	movs	r2, #2
 8002b62:	61ba      	str	r2, [r7, #24]
 8002b64:	69ba      	ldr	r2, [r7, #24]
 8002b66:	fa92 f2a2 	rbit	r2, r2
 8002b6a:	617a      	str	r2, [r7, #20]
  return result;
 8002b6c:	697a      	ldr	r2, [r7, #20]
 8002b6e:	fab2 f282 	clz	r2, r2
 8002b72:	b2d2      	uxtb	r2, r2
 8002b74:	f042 0220 	orr.w	r2, r2, #32
 8002b78:	b2d2      	uxtb	r2, r2
 8002b7a:	f002 021f 	and.w	r2, r2, #31
 8002b7e:	2101      	movs	r1, #1
 8002b80:	fa01 f202 	lsl.w	r2, r1, r2
 8002b84:	4013      	ands	r3, r2
 8002b86:	2b00      	cmp	r3, #0
 8002b88:	d101      	bne.n	8002b8e <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 8002b8a:	2301      	movs	r3, #1
 8002b8c:	e079      	b.n	8002c82 <HAL_RCC_ClockConfig+0x2de>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8002b8e:	4b1d      	ldr	r3, [pc, #116]	; (8002c04 <HAL_RCC_ClockConfig+0x260>)
 8002b90:	685b      	ldr	r3, [r3, #4]
 8002b92:	f023 0203 	bic.w	r2, r3, #3
 8002b96:	687b      	ldr	r3, [r7, #4]
 8002b98:	685b      	ldr	r3, [r3, #4]
 8002b9a:	491a      	ldr	r1, [pc, #104]	; (8002c04 <HAL_RCC_ClockConfig+0x260>)
 8002b9c:	4313      	orrs	r3, r2
 8002b9e:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8002ba0:	f7fe f954 	bl	8000e4c <HAL_GetTick>
 8002ba4:	6778      	str	r0, [r7, #116]	; 0x74
    
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002ba6:	e00a      	b.n	8002bbe <HAL_RCC_ClockConfig+0x21a>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002ba8:	f7fe f950 	bl	8000e4c <HAL_GetTick>
 8002bac:	4602      	mov	r2, r0
 8002bae:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8002bb0:	1ad3      	subs	r3, r2, r3
 8002bb2:	f241 3288 	movw	r2, #5000	; 0x1388
 8002bb6:	4293      	cmp	r3, r2
 8002bb8:	d901      	bls.n	8002bbe <HAL_RCC_ClockConfig+0x21a>
      {
        return HAL_TIMEOUT;
 8002bba:	2303      	movs	r3, #3
 8002bbc:	e061      	b.n	8002c82 <HAL_RCC_ClockConfig+0x2de>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002bbe:	4b11      	ldr	r3, [pc, #68]	; (8002c04 <HAL_RCC_ClockConfig+0x260>)
 8002bc0:	685b      	ldr	r3, [r3, #4]
 8002bc2:	f003 020c 	and.w	r2, r3, #12
 8002bc6:	687b      	ldr	r3, [r7, #4]
 8002bc8:	685b      	ldr	r3, [r3, #4]
 8002bca:	009b      	lsls	r3, r3, #2
 8002bcc:	429a      	cmp	r2, r3
 8002bce:	d1eb      	bne.n	8002ba8 <HAL_RCC_ClockConfig+0x204>
      }
    }
  }
  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8002bd0:	4b0b      	ldr	r3, [pc, #44]	; (8002c00 <HAL_RCC_ClockConfig+0x25c>)
 8002bd2:	681b      	ldr	r3, [r3, #0]
 8002bd4:	f003 0307 	and.w	r3, r3, #7
 8002bd8:	683a      	ldr	r2, [r7, #0]
 8002bda:	429a      	cmp	r2, r3
 8002bdc:	d214      	bcs.n	8002c08 <HAL_RCC_ClockConfig+0x264>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002bde:	4b08      	ldr	r3, [pc, #32]	; (8002c00 <HAL_RCC_ClockConfig+0x25c>)
 8002be0:	681b      	ldr	r3, [r3, #0]
 8002be2:	f023 0207 	bic.w	r2, r3, #7
 8002be6:	4906      	ldr	r1, [pc, #24]	; (8002c00 <HAL_RCC_ClockConfig+0x25c>)
 8002be8:	683b      	ldr	r3, [r7, #0]
 8002bea:	4313      	orrs	r3, r2
 8002bec:	600b      	str	r3, [r1, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002bee:	4b04      	ldr	r3, [pc, #16]	; (8002c00 <HAL_RCC_ClockConfig+0x25c>)
 8002bf0:	681b      	ldr	r3, [r3, #0]
 8002bf2:	f003 0307 	and.w	r3, r3, #7
 8002bf6:	683a      	ldr	r2, [r7, #0]
 8002bf8:	429a      	cmp	r2, r3
 8002bfa:	d005      	beq.n	8002c08 <HAL_RCC_ClockConfig+0x264>
    {
      return HAL_ERROR;
 8002bfc:	2301      	movs	r3, #1
 8002bfe:	e040      	b.n	8002c82 <HAL_RCC_ClockConfig+0x2de>
 8002c00:	40022000 	.word	0x40022000
 8002c04:	40021000 	.word	0x40021000
    }
  }    

  /*-------------------------- PCLK1 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002c08:	687b      	ldr	r3, [r7, #4]
 8002c0a:	681b      	ldr	r3, [r3, #0]
 8002c0c:	f003 0304 	and.w	r3, r3, #4
 8002c10:	2b00      	cmp	r3, #0
 8002c12:	d008      	beq.n	8002c26 <HAL_RCC_ClockConfig+0x282>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002c14:	4b1d      	ldr	r3, [pc, #116]	; (8002c8c <HAL_RCC_ClockConfig+0x2e8>)
 8002c16:	685b      	ldr	r3, [r3, #4]
 8002c18:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8002c1c:	687b      	ldr	r3, [r7, #4]
 8002c1e:	68db      	ldr	r3, [r3, #12]
 8002c20:	491a      	ldr	r1, [pc, #104]	; (8002c8c <HAL_RCC_ClockConfig+0x2e8>)
 8002c22:	4313      	orrs	r3, r2
 8002c24:	604b      	str	r3, [r1, #4]
  }
  
  /*-------------------------- PCLK2 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002c26:	687b      	ldr	r3, [r7, #4]
 8002c28:	681b      	ldr	r3, [r3, #0]
 8002c2a:	f003 0308 	and.w	r3, r3, #8
 8002c2e:	2b00      	cmp	r3, #0
 8002c30:	d009      	beq.n	8002c46 <HAL_RCC_ClockConfig+0x2a2>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8002c32:	4b16      	ldr	r3, [pc, #88]	; (8002c8c <HAL_RCC_ClockConfig+0x2e8>)
 8002c34:	685b      	ldr	r3, [r3, #4]
 8002c36:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8002c3a:	687b      	ldr	r3, [r7, #4]
 8002c3c:	691b      	ldr	r3, [r3, #16]
 8002c3e:	00db      	lsls	r3, r3, #3
 8002c40:	4912      	ldr	r1, [pc, #72]	; (8002c8c <HAL_RCC_ClockConfig+0x2e8>)
 8002c42:	4313      	orrs	r3, r2
 8002c44:	604b      	str	r3, [r1, #4]
  }
 
  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_BITNUMBER];
 8002c46:	f000 f829 	bl	8002c9c <HAL_RCC_GetSysClockFreq>
 8002c4a:	4601      	mov	r1, r0
 8002c4c:	4b0f      	ldr	r3, [pc, #60]	; (8002c8c <HAL_RCC_ClockConfig+0x2e8>)
 8002c4e:	685b      	ldr	r3, [r3, #4]
 8002c50:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8002c54:	22f0      	movs	r2, #240	; 0xf0
 8002c56:	613a      	str	r2, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002c58:	693a      	ldr	r2, [r7, #16]
 8002c5a:	fa92 f2a2 	rbit	r2, r2
 8002c5e:	60fa      	str	r2, [r7, #12]
  return result;
 8002c60:	68fa      	ldr	r2, [r7, #12]
 8002c62:	fab2 f282 	clz	r2, r2
 8002c66:	b2d2      	uxtb	r2, r2
 8002c68:	40d3      	lsrs	r3, r2
 8002c6a:	4a09      	ldr	r2, [pc, #36]	; (8002c90 <HAL_RCC_ClockConfig+0x2ec>)
 8002c6c:	5cd3      	ldrb	r3, [r2, r3]
 8002c6e:	fa21 f303 	lsr.w	r3, r1, r3
 8002c72:	4a08      	ldr	r2, [pc, #32]	; (8002c94 <HAL_RCC_ClockConfig+0x2f0>)
 8002c74:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick (uwTickPrio);
 8002c76:	4b08      	ldr	r3, [pc, #32]	; (8002c98 <HAL_RCC_ClockConfig+0x2f4>)
 8002c78:	681b      	ldr	r3, [r3, #0]
 8002c7a:	4618      	mov	r0, r3
 8002c7c:	f7fe f8a2 	bl	8000dc4 <HAL_InitTick>
  
  return HAL_OK;
 8002c80:	2300      	movs	r3, #0
}
 8002c82:	4618      	mov	r0, r3
 8002c84:	3778      	adds	r7, #120	; 0x78
 8002c86:	46bd      	mov	sp, r7
 8002c88:	bd80      	pop	{r7, pc}
 8002c8a:	bf00      	nop
 8002c8c:	40021000 	.word	0x40021000
 8002c90:	08005e1c 	.word	0x08005e1c
 8002c94:	20000000 	.word	0x20000000
 8002c98:	20000004 	.word	0x20000004

08002c9c <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *         
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002c9c:	b480      	push	{r7}
 8002c9e:	b08b      	sub	sp, #44	; 0x2c
 8002ca0:	af00      	add	r7, sp, #0
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8002ca2:	2300      	movs	r3, #0
 8002ca4:	61fb      	str	r3, [r7, #28]
 8002ca6:	2300      	movs	r3, #0
 8002ca8:	61bb      	str	r3, [r7, #24]
 8002caa:	2300      	movs	r3, #0
 8002cac:	627b      	str	r3, [r7, #36]	; 0x24
 8002cae:	2300      	movs	r3, #0
 8002cb0:	617b      	str	r3, [r7, #20]
  uint32_t sysclockfreq = 0U;
 8002cb2:	2300      	movs	r3, #0
 8002cb4:	623b      	str	r3, [r7, #32]
  
  tmpreg = RCC->CFGR;
 8002cb6:	4b29      	ldr	r3, [pc, #164]	; (8002d5c <HAL_RCC_GetSysClockFreq+0xc0>)
 8002cb8:	685b      	ldr	r3, [r3, #4]
 8002cba:	61fb      	str	r3, [r7, #28]
  
  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8002cbc:	69fb      	ldr	r3, [r7, #28]
 8002cbe:	f003 030c 	and.w	r3, r3, #12
 8002cc2:	2b04      	cmp	r3, #4
 8002cc4:	d002      	beq.n	8002ccc <HAL_RCC_GetSysClockFreq+0x30>
 8002cc6:	2b08      	cmp	r3, #8
 8002cc8:	d003      	beq.n	8002cd2 <HAL_RCC_GetSysClockFreq+0x36>
 8002cca:	e03c      	b.n	8002d46 <HAL_RCC_GetSysClockFreq+0xaa>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8002ccc:	4b24      	ldr	r3, [pc, #144]	; (8002d60 <HAL_RCC_GetSysClockFreq+0xc4>)
 8002cce:	623b      	str	r3, [r7, #32]
      break;
 8002cd0:	e03c      	b.n	8002d4c <HAL_RCC_GetSysClockFreq+0xb0>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> POSITION_VAL(RCC_CFGR_PLLMUL)];
 8002cd2:	69fb      	ldr	r3, [r7, #28]
 8002cd4:	f403 1370 	and.w	r3, r3, #3932160	; 0x3c0000
 8002cd8:	f44f 1270 	mov.w	r2, #3932160	; 0x3c0000
 8002cdc:	60ba      	str	r2, [r7, #8]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002cde:	68ba      	ldr	r2, [r7, #8]
 8002ce0:	fa92 f2a2 	rbit	r2, r2
 8002ce4:	607a      	str	r2, [r7, #4]
  return result;
 8002ce6:	687a      	ldr	r2, [r7, #4]
 8002ce8:	fab2 f282 	clz	r2, r2
 8002cec:	b2d2      	uxtb	r2, r2
 8002cee:	40d3      	lsrs	r3, r2
 8002cf0:	4a1c      	ldr	r2, [pc, #112]	; (8002d64 <HAL_RCC_GetSysClockFreq+0xc8>)
 8002cf2:	5cd3      	ldrb	r3, [r2, r3]
 8002cf4:	617b      	str	r3, [r7, #20]
      prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV) >> POSITION_VAL(RCC_CFGR2_PREDIV)];
 8002cf6:	4b19      	ldr	r3, [pc, #100]	; (8002d5c <HAL_RCC_GetSysClockFreq+0xc0>)
 8002cf8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002cfa:	f003 030f 	and.w	r3, r3, #15
 8002cfe:	220f      	movs	r2, #15
 8002d00:	613a      	str	r2, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002d02:	693a      	ldr	r2, [r7, #16]
 8002d04:	fa92 f2a2 	rbit	r2, r2
 8002d08:	60fa      	str	r2, [r7, #12]
  return result;
 8002d0a:	68fa      	ldr	r2, [r7, #12]
 8002d0c:	fab2 f282 	clz	r2, r2
 8002d10:	b2d2      	uxtb	r2, r2
 8002d12:	40d3      	lsrs	r3, r2
 8002d14:	4a14      	ldr	r2, [pc, #80]	; (8002d68 <HAL_RCC_GetSysClockFreq+0xcc>)
 8002d16:	5cd3      	ldrb	r3, [r2, r3]
 8002d18:	61bb      	str	r3, [r7, #24]
#if defined(RCC_CFGR_PLLSRC_HSI_DIV2)
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI)
 8002d1a:	69fb      	ldr	r3, [r7, #28]
 8002d1c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002d20:	2b00      	cmp	r3, #0
 8002d22:	d008      	beq.n	8002d36 <HAL_RCC_GetSysClockFreq+0x9a>
      {
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSE_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 8002d24:	4a0e      	ldr	r2, [pc, #56]	; (8002d60 <HAL_RCC_GetSysClockFreq+0xc4>)
 8002d26:	69bb      	ldr	r3, [r7, #24]
 8002d28:	fbb2 f2f3 	udiv	r2, r2, r3
 8002d2c:	697b      	ldr	r3, [r7, #20]
 8002d2e:	fb02 f303 	mul.w	r3, r2, r3
 8002d32:	627b      	str	r3, [r7, #36]	; 0x24
 8002d34:	e004      	b.n	8002d40 <HAL_RCC_GetSysClockFreq+0xa4>
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((uint64_t) (HSI_VALUE >> 1U) * ((uint64_t) pllmul));
 8002d36:	697b      	ldr	r3, [r7, #20]
 8002d38:	4a0c      	ldr	r2, [pc, #48]	; (8002d6c <HAL_RCC_GetSysClockFreq+0xd0>)
 8002d3a:	fb02 f303 	mul.w	r3, r2, r3
 8002d3e:	627b      	str	r3, [r7, #36]	; 0x24
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSI_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
      }
#endif /* RCC_CFGR_PLLSRC_HSI_DIV2 */
      sysclockfreq = pllclk;
 8002d40:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002d42:	623b      	str	r3, [r7, #32]
      break;
 8002d44:	e002      	b.n	8002d4c <HAL_RCC_GetSysClockFreq+0xb0>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8002d46:	4b0a      	ldr	r3, [pc, #40]	; (8002d70 <HAL_RCC_GetSysClockFreq+0xd4>)
 8002d48:	623b      	str	r3, [r7, #32]
      break;
 8002d4a:	bf00      	nop
    }
  }
  return sysclockfreq;
 8002d4c:	6a3b      	ldr	r3, [r7, #32]
}
 8002d4e:	4618      	mov	r0, r3
 8002d50:	372c      	adds	r7, #44	; 0x2c
 8002d52:	46bd      	mov	sp, r7
 8002d54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d58:	4770      	bx	lr
 8002d5a:	bf00      	nop
 8002d5c:	40021000 	.word	0x40021000
 8002d60:	01e84800 	.word	0x01e84800
 8002d64:	08005e34 	.word	0x08005e34
 8002d68:	08005e44 	.word	0x08005e44
 8002d6c:	003d0900 	.word	0x003d0900
 8002d70:	007a1200 	.word	0x007a1200

08002d74 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency 
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002d74:	b480      	push	{r7}
 8002d76:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8002d78:	4b03      	ldr	r3, [pc, #12]	; (8002d88 <HAL_RCC_GetHCLKFreq+0x14>)
 8002d7a:	681b      	ldr	r3, [r3, #0]
}
 8002d7c:	4618      	mov	r0, r3
 8002d7e:	46bd      	mov	sp, r7
 8002d80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d84:	4770      	bx	lr
 8002d86:	bf00      	nop
 8002d88:	20000000 	.word	0x20000000

08002d8c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8002d8c:	b580      	push	{r7, lr}
 8002d8e:	b082      	sub	sp, #8
 8002d90:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_BITNUMBER]);
 8002d92:	f7ff ffef 	bl	8002d74 <HAL_RCC_GetHCLKFreq>
 8002d96:	4601      	mov	r1, r0
 8002d98:	4b0b      	ldr	r3, [pc, #44]	; (8002dc8 <HAL_RCC_GetPCLK1Freq+0x3c>)
 8002d9a:	685b      	ldr	r3, [r3, #4]
 8002d9c:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8002da0:	f44f 62e0 	mov.w	r2, #1792	; 0x700
 8002da4:	607a      	str	r2, [r7, #4]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002da6:	687a      	ldr	r2, [r7, #4]
 8002da8:	fa92 f2a2 	rbit	r2, r2
 8002dac:	603a      	str	r2, [r7, #0]
  return result;
 8002dae:	683a      	ldr	r2, [r7, #0]
 8002db0:	fab2 f282 	clz	r2, r2
 8002db4:	b2d2      	uxtb	r2, r2
 8002db6:	40d3      	lsrs	r3, r2
 8002db8:	4a04      	ldr	r2, [pc, #16]	; (8002dcc <HAL_RCC_GetPCLK1Freq+0x40>)
 8002dba:	5cd3      	ldrb	r3, [r2, r3]
 8002dbc:	fa21 f303 	lsr.w	r3, r1, r3
}    
 8002dc0:	4618      	mov	r0, r3
 8002dc2:	3708      	adds	r7, #8
 8002dc4:	46bd      	mov	sp, r7
 8002dc6:	bd80      	pop	{r7, pc}
 8002dc8:	40021000 	.word	0x40021000
 8002dcc:	08005e2c 	.word	0x08005e2c

08002dd0 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8002dd0:	b580      	push	{r7, lr}
 8002dd2:	b082      	sub	sp, #8
 8002dd4:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_BITNUMBER]);
 8002dd6:	f7ff ffcd 	bl	8002d74 <HAL_RCC_GetHCLKFreq>
 8002dda:	4601      	mov	r1, r0
 8002ddc:	4b0b      	ldr	r3, [pc, #44]	; (8002e0c <HAL_RCC_GetPCLK2Freq+0x3c>)
 8002dde:	685b      	ldr	r3, [r3, #4]
 8002de0:	f403 5360 	and.w	r3, r3, #14336	; 0x3800
 8002de4:	f44f 5260 	mov.w	r2, #14336	; 0x3800
 8002de8:	607a      	str	r2, [r7, #4]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002dea:	687a      	ldr	r2, [r7, #4]
 8002dec:	fa92 f2a2 	rbit	r2, r2
 8002df0:	603a      	str	r2, [r7, #0]
  return result;
 8002df2:	683a      	ldr	r2, [r7, #0]
 8002df4:	fab2 f282 	clz	r2, r2
 8002df8:	b2d2      	uxtb	r2, r2
 8002dfa:	40d3      	lsrs	r3, r2
 8002dfc:	4a04      	ldr	r2, [pc, #16]	; (8002e10 <HAL_RCC_GetPCLK2Freq+0x40>)
 8002dfe:	5cd3      	ldrb	r3, [r2, r3]
 8002e00:	fa21 f303 	lsr.w	r3, r1, r3
} 
 8002e04:	4618      	mov	r0, r3
 8002e06:	3708      	adds	r7, #8
 8002e08:	46bd      	mov	sp, r7
 8002e0a:	bd80      	pop	{r7, pc}
 8002e0c:	40021000 	.word	0x40021000
 8002e10:	08005e2c 	.word	0x08005e2c

08002e14 <HAL_RCCEx_PeriphCLKConfig>:
  *         When the TIMx clock source is PLL clock, so the TIMx clock is PLL clock x 2.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8002e14:	b580      	push	{r7, lr}
 8002e16:	b092      	sub	sp, #72	; 0x48
 8002e18:	af00      	add	r7, sp, #0
 8002e1a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8002e1c:	2300      	movs	r3, #0
 8002e1e:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t temp_reg = 0U;
 8002e20:	2300      	movs	r3, #0
 8002e22:	63fb      	str	r3, [r7, #60]	; 0x3c
  FlagStatus       pwrclkchanged = RESET;
 8002e24:	2300      	movs	r3, #0
 8002e26:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
    
  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));
  
  /*---------------------------- RTC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8002e2a:	687b      	ldr	r3, [r7, #4]
 8002e2c:	681b      	ldr	r3, [r3, #0]
 8002e2e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002e32:	2b00      	cmp	r3, #0
 8002e34:	f000 80d4 	beq.w	8002fe0 <HAL_RCCEx_PeriphCLKConfig+0x1cc>


    /* As soon as function is called to change RTC clock source, activation of the 
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002e38:	4b4e      	ldr	r3, [pc, #312]	; (8002f74 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002e3a:	69db      	ldr	r3, [r3, #28]
 8002e3c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002e40:	2b00      	cmp	r3, #0
 8002e42:	d10e      	bne.n	8002e62 <HAL_RCCEx_PeriphCLKConfig+0x4e>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002e44:	4b4b      	ldr	r3, [pc, #300]	; (8002f74 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002e46:	69db      	ldr	r3, [r3, #28]
 8002e48:	4a4a      	ldr	r2, [pc, #296]	; (8002f74 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002e4a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002e4e:	61d3      	str	r3, [r2, #28]
 8002e50:	4b48      	ldr	r3, [pc, #288]	; (8002f74 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002e52:	69db      	ldr	r3, [r3, #28]
 8002e54:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002e58:	60bb      	str	r3, [r7, #8]
 8002e5a:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002e5c:	2301      	movs	r3, #1
 8002e5e:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002e62:	4b45      	ldr	r3, [pc, #276]	; (8002f78 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8002e64:	681b      	ldr	r3, [r3, #0]
 8002e66:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002e6a:	2b00      	cmp	r3, #0
 8002e6c:	d118      	bne.n	8002ea0 <HAL_RCCEx_PeriphCLKConfig+0x8c>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8002e6e:	4b42      	ldr	r3, [pc, #264]	; (8002f78 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8002e70:	681b      	ldr	r3, [r3, #0]
 8002e72:	4a41      	ldr	r2, [pc, #260]	; (8002f78 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8002e74:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002e78:	6013      	str	r3, [r2, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002e7a:	f7fd ffe7 	bl	8000e4c <HAL_GetTick>
 8002e7e:	6438      	str	r0, [r7, #64]	; 0x40
      
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002e80:	e008      	b.n	8002e94 <HAL_RCCEx_PeriphCLKConfig+0x80>
      {
          if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002e82:	f7fd ffe3 	bl	8000e4c <HAL_GetTick>
 8002e86:	4602      	mov	r2, r0
 8002e88:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8002e8a:	1ad3      	subs	r3, r2, r3
 8002e8c:	2b64      	cmp	r3, #100	; 0x64
 8002e8e:	d901      	bls.n	8002e94 <HAL_RCCEx_PeriphCLKConfig+0x80>
        {
          return HAL_TIMEOUT;
 8002e90:	2303      	movs	r3, #3
 8002e92:	e12d      	b.n	80030f0 <HAL_RCCEx_PeriphCLKConfig+0x2dc>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002e94:	4b38      	ldr	r3, [pc, #224]	; (8002f78 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8002e96:	681b      	ldr	r3, [r3, #0]
 8002e98:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002e9c:	2b00      	cmp	r3, #0
 8002e9e:	d0f0      	beq.n	8002e82 <HAL_RCCEx_PeriphCLKConfig+0x6e>
        }
      }
    }
    
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */ 
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8002ea0:	4b34      	ldr	r3, [pc, #208]	; (8002f74 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002ea2:	6a1b      	ldr	r3, [r3, #32]
 8002ea4:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002ea8:	63fb      	str	r3, [r7, #60]	; 0x3c
    if((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8002eaa:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8002eac:	2b00      	cmp	r3, #0
 8002eae:	f000 8084 	beq.w	8002fba <HAL_RCCEx_PeriphCLKConfig+0x1a6>
 8002eb2:	687b      	ldr	r3, [r7, #4]
 8002eb4:	685b      	ldr	r3, [r3, #4]
 8002eb6:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002eba:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8002ebc:	429a      	cmp	r2, r3
 8002ebe:	d07c      	beq.n	8002fba <HAL_RCCEx_PeriphCLKConfig+0x1a6>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8002ec0:	4b2c      	ldr	r3, [pc, #176]	; (8002f74 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002ec2:	6a1b      	ldr	r3, [r3, #32]
 8002ec4:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002ec8:	63fb      	str	r3, [r7, #60]	; 0x3c
 8002eca:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8002ece:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002ed0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002ed2:	fa93 f3a3 	rbit	r3, r3
 8002ed6:	62fb      	str	r3, [r7, #44]	; 0x2c
  return result;
 8002ed8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8002eda:	fab3 f383 	clz	r3, r3
 8002ede:	b2db      	uxtb	r3, r3
 8002ee0:	461a      	mov	r2, r3
 8002ee2:	4b26      	ldr	r3, [pc, #152]	; (8002f7c <HAL_RCCEx_PeriphCLKConfig+0x168>)
 8002ee4:	4413      	add	r3, r2
 8002ee6:	009b      	lsls	r3, r3, #2
 8002ee8:	461a      	mov	r2, r3
 8002eea:	2301      	movs	r3, #1
 8002eec:	6013      	str	r3, [r2, #0]
 8002eee:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8002ef2:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002ef4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002ef6:	fa93 f3a3 	rbit	r3, r3
 8002efa:	637b      	str	r3, [r7, #52]	; 0x34
  return result;
 8002efc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
      __HAL_RCC_BACKUPRESET_RELEASE();
 8002efe:	fab3 f383 	clz	r3, r3
 8002f02:	b2db      	uxtb	r3, r3
 8002f04:	461a      	mov	r2, r3
 8002f06:	4b1d      	ldr	r3, [pc, #116]	; (8002f7c <HAL_RCCEx_PeriphCLKConfig+0x168>)
 8002f08:	4413      	add	r3, r2
 8002f0a:	009b      	lsls	r3, r3, #2
 8002f0c:	461a      	mov	r2, r3
 8002f0e:	2300      	movs	r3, #0
 8002f10:	6013      	str	r3, [r2, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
 8002f12:	4a18      	ldr	r2, [pc, #96]	; (8002f74 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002f14:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8002f16:	6213      	str	r3, [r2, #32]
    
      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 8002f18:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8002f1a:	f003 0301 	and.w	r3, r3, #1
 8002f1e:	2b00      	cmp	r3, #0
 8002f20:	d04b      	beq.n	8002fba <HAL_RCCEx_PeriphCLKConfig+0x1a6>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002f22:	f7fd ff93 	bl	8000e4c <HAL_GetTick>
 8002f26:	6438      	str	r0, [r7, #64]	; 0x40
        
        /* Wait till LSE is ready */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002f28:	e00a      	b.n	8002f40 <HAL_RCCEx_PeriphCLKConfig+0x12c>
        {
            if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002f2a:	f7fd ff8f 	bl	8000e4c <HAL_GetTick>
 8002f2e:	4602      	mov	r2, r0
 8002f30:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8002f32:	1ad3      	subs	r3, r2, r3
 8002f34:	f241 3288 	movw	r2, #5000	; 0x1388
 8002f38:	4293      	cmp	r3, r2
 8002f3a:	d901      	bls.n	8002f40 <HAL_RCCEx_PeriphCLKConfig+0x12c>
          {
            return HAL_TIMEOUT;
 8002f3c:	2303      	movs	r3, #3
 8002f3e:	e0d7      	b.n	80030f0 <HAL_RCCEx_PeriphCLKConfig+0x2dc>
 8002f40:	2302      	movs	r3, #2
 8002f42:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002f44:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002f46:	fa93 f3a3 	rbit	r3, r3
 8002f4a:	627b      	str	r3, [r7, #36]	; 0x24
 8002f4c:	2302      	movs	r3, #2
 8002f4e:	623b      	str	r3, [r7, #32]
 8002f50:	6a3b      	ldr	r3, [r7, #32]
 8002f52:	fa93 f3a3 	rbit	r3, r3
 8002f56:	61fb      	str	r3, [r7, #28]
  return result;
 8002f58:	69fb      	ldr	r3, [r7, #28]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002f5a:	fab3 f383 	clz	r3, r3
 8002f5e:	b2db      	uxtb	r3, r3
 8002f60:	095b      	lsrs	r3, r3, #5
 8002f62:	b2db      	uxtb	r3, r3
 8002f64:	f043 0302 	orr.w	r3, r3, #2
 8002f68:	b2db      	uxtb	r3, r3
 8002f6a:	2b02      	cmp	r3, #2
 8002f6c:	d108      	bne.n	8002f80 <HAL_RCCEx_PeriphCLKConfig+0x16c>
 8002f6e:	4b01      	ldr	r3, [pc, #4]	; (8002f74 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002f70:	6a1b      	ldr	r3, [r3, #32]
 8002f72:	e00d      	b.n	8002f90 <HAL_RCCEx_PeriphCLKConfig+0x17c>
 8002f74:	40021000 	.word	0x40021000
 8002f78:	40007000 	.word	0x40007000
 8002f7c:	10908100 	.word	0x10908100
 8002f80:	2302      	movs	r3, #2
 8002f82:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002f84:	69bb      	ldr	r3, [r7, #24]
 8002f86:	fa93 f3a3 	rbit	r3, r3
 8002f8a:	617b      	str	r3, [r7, #20]
 8002f8c:	4b5a      	ldr	r3, [pc, #360]	; (80030f8 <HAL_RCCEx_PeriphCLKConfig+0x2e4>)
 8002f8e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002f90:	2202      	movs	r2, #2
 8002f92:	613a      	str	r2, [r7, #16]
 8002f94:	693a      	ldr	r2, [r7, #16]
 8002f96:	fa92 f2a2 	rbit	r2, r2
 8002f9a:	60fa      	str	r2, [r7, #12]
  return result;
 8002f9c:	68fa      	ldr	r2, [r7, #12]
 8002f9e:	fab2 f282 	clz	r2, r2
 8002fa2:	b2d2      	uxtb	r2, r2
 8002fa4:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8002fa8:	b2d2      	uxtb	r2, r2
 8002faa:	f002 021f 	and.w	r2, r2, #31
 8002fae:	2101      	movs	r1, #1
 8002fb0:	fa01 f202 	lsl.w	r2, r1, r2
 8002fb4:	4013      	ands	r3, r2
 8002fb6:	2b00      	cmp	r3, #0
 8002fb8:	d0b7      	beq.n	8002f2a <HAL_RCCEx_PeriphCLKConfig+0x116>
          }      
        }  
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection); 
 8002fba:	4b4f      	ldr	r3, [pc, #316]	; (80030f8 <HAL_RCCEx_PeriphCLKConfig+0x2e4>)
 8002fbc:	6a1b      	ldr	r3, [r3, #32]
 8002fbe:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8002fc2:	687b      	ldr	r3, [r7, #4]
 8002fc4:	685b      	ldr	r3, [r3, #4]
 8002fc6:	494c      	ldr	r1, [pc, #304]	; (80030f8 <HAL_RCCEx_PeriphCLKConfig+0x2e4>)
 8002fc8:	4313      	orrs	r3, r2
 8002fca:	620b      	str	r3, [r1, #32]

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 8002fcc:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 8002fd0:	2b01      	cmp	r3, #1
 8002fd2:	d105      	bne.n	8002fe0 <HAL_RCCEx_PeriphCLKConfig+0x1cc>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002fd4:	4b48      	ldr	r3, [pc, #288]	; (80030f8 <HAL_RCCEx_PeriphCLKConfig+0x2e4>)
 8002fd6:	69db      	ldr	r3, [r3, #28]
 8002fd8:	4a47      	ldr	r2, [pc, #284]	; (80030f8 <HAL_RCCEx_PeriphCLKConfig+0x2e4>)
 8002fda:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002fde:	61d3      	str	r3, [r2, #28]
    }
  }

  /*------------------------------- USART1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8002fe0:	687b      	ldr	r3, [r7, #4]
 8002fe2:	681b      	ldr	r3, [r3, #0]
 8002fe4:	f003 0301 	and.w	r3, r3, #1
 8002fe8:	2b00      	cmp	r3, #0
 8002fea:	d008      	beq.n	8002ffe <HAL_RCCEx_PeriphCLKConfig+0x1ea>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));
    
    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8002fec:	4b42      	ldr	r3, [pc, #264]	; (80030f8 <HAL_RCCEx_PeriphCLKConfig+0x2e4>)
 8002fee:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002ff0:	f023 0203 	bic.w	r2, r3, #3
 8002ff4:	687b      	ldr	r3, [r7, #4]
 8002ff6:	689b      	ldr	r3, [r3, #8]
 8002ff8:	493f      	ldr	r1, [pc, #252]	; (80030f8 <HAL_RCCEx_PeriphCLKConfig+0x2e4>)
 8002ffa:	4313      	orrs	r3, r2
 8002ffc:	630b      	str	r3, [r1, #48]	; 0x30
  }

#if defined(RCC_CFGR3_USART2SW)
  /*----------------------------- USART2 Configuration --------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8002ffe:	687b      	ldr	r3, [r7, #4]
 8003000:	681b      	ldr	r3, [r3, #0]
 8003002:	f003 0302 	and.w	r3, r3, #2
 8003006:	2b00      	cmp	r3, #0
 8003008:	d008      	beq.n	800301c <HAL_RCCEx_PeriphCLKConfig+0x208>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));
    
    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 800300a:	4b3b      	ldr	r3, [pc, #236]	; (80030f8 <HAL_RCCEx_PeriphCLKConfig+0x2e4>)
 800300c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800300e:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8003012:	687b      	ldr	r3, [r7, #4]
 8003014:	68db      	ldr	r3, [r3, #12]
 8003016:	4938      	ldr	r1, [pc, #224]	; (80030f8 <HAL_RCCEx_PeriphCLKConfig+0x2e4>)
 8003018:	4313      	orrs	r3, r2
 800301a:	630b      	str	r3, [r1, #48]	; 0x30
  }
#endif /* RCC_CFGR3_USART2SW */

#if defined(RCC_CFGR3_USART3SW)
  /*------------------------------ USART3 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 800301c:	687b      	ldr	r3, [r7, #4]
 800301e:	681b      	ldr	r3, [r3, #0]
 8003020:	f003 0304 	and.w	r3, r3, #4
 8003024:	2b00      	cmp	r3, #0
 8003026:	d008      	beq.n	800303a <HAL_RCCEx_PeriphCLKConfig+0x226>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));
    
    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8003028:	4b33      	ldr	r3, [pc, #204]	; (80030f8 <HAL_RCCEx_PeriphCLKConfig+0x2e4>)
 800302a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800302c:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 8003030:	687b      	ldr	r3, [r7, #4]
 8003032:	691b      	ldr	r3, [r3, #16]
 8003034:	4930      	ldr	r1, [pc, #192]	; (80030f8 <HAL_RCCEx_PeriphCLKConfig+0x2e4>)
 8003036:	4313      	orrs	r3, r2
 8003038:	630b      	str	r3, [r1, #48]	; 0x30
  }
#endif /* RCC_CFGR3_USART3SW */

  /*------------------------------ I2C1 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 800303a:	687b      	ldr	r3, [r7, #4]
 800303c:	681b      	ldr	r3, [r3, #0]
 800303e:	f003 0320 	and.w	r3, r3, #32
 8003042:	2b00      	cmp	r3, #0
 8003044:	d008      	beq.n	8003058 <HAL_RCCEx_PeriphCLKConfig+0x244>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));
    
    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8003046:	4b2c      	ldr	r3, [pc, #176]	; (80030f8 <HAL_RCCEx_PeriphCLKConfig+0x2e4>)
 8003048:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800304a:	f023 0210 	bic.w	r2, r3, #16
 800304e:	687b      	ldr	r3, [r7, #4]
 8003050:	695b      	ldr	r3, [r3, #20]
 8003052:	4929      	ldr	r1, [pc, #164]	; (80030f8 <HAL_RCCEx_PeriphCLKConfig+0x2e4>)
 8003054:	4313      	orrs	r3, r2
 8003056:	630b      	str	r3, [r1, #48]	; 0x30
#if defined(STM32F302xE) || defined(STM32F303xE)\
 || defined(STM32F302xC) || defined(STM32F303xC)\
 || defined(STM32F302x8)                        \
 || defined(STM32F373xC)
  /*------------------------------ USB Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 8003058:	687b      	ldr	r3, [r7, #4]
 800305a:	681b      	ldr	r3, [r3, #0]
 800305c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003060:	2b00      	cmp	r3, #0
 8003062:	d008      	beq.n	8003076 <HAL_RCCEx_PeriphCLKConfig+0x262>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->USBClockSelection));
    
    /* Configure the USB clock source */
    __HAL_RCC_USB_CONFIG(PeriphClkInit->USBClockSelection);
 8003064:	4b24      	ldr	r3, [pc, #144]	; (80030f8 <HAL_RCCEx_PeriphCLKConfig+0x2e4>)
 8003066:	685b      	ldr	r3, [r3, #4]
 8003068:	f423 0280 	bic.w	r2, r3, #4194304	; 0x400000
 800306c:	687b      	ldr	r3, [r7, #4]
 800306e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003070:	4921      	ldr	r1, [pc, #132]	; (80030f8 <HAL_RCCEx_PeriphCLKConfig+0x2e4>)
 8003072:	4313      	orrs	r3, r2
 8003074:	604b      	str	r3, [r1, #4]
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)\
 || defined(STM32F373xC) || defined(STM32F378xx)

  /*------------------------------ I2C2 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8003076:	687b      	ldr	r3, [r7, #4]
 8003078:	681b      	ldr	r3, [r3, #0]
 800307a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800307e:	2b00      	cmp	r3, #0
 8003080:	d008      	beq.n	8003094 <HAL_RCCEx_PeriphCLKConfig+0x280>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));
    
    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8003082:	4b1d      	ldr	r3, [pc, #116]	; (80030f8 <HAL_RCCEx_PeriphCLKConfig+0x2e4>)
 8003084:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003086:	f023 0220 	bic.w	r2, r3, #32
 800308a:	687b      	ldr	r3, [r7, #4]
 800308c:	699b      	ldr	r3, [r3, #24]
 800308e:	491a      	ldr	r1, [pc, #104]	; (80030f8 <HAL_RCCEx_PeriphCLKConfig+0x2e4>)
 8003090:	4313      	orrs	r3, r2
 8003092:	630b      	str	r3, [r1, #48]	; 0x30
       /* STM32F303xC || STM32F358xx    */

#if defined(STM32F373xC) || defined(STM32F378xx)
      
  /*------------------------------ ADC1 clock Configuration ------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC1) == RCC_PERIPHCLK_ADC1)
 8003094:	687b      	ldr	r3, [r7, #4]
 8003096:	681b      	ldr	r3, [r3, #0]
 8003098:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800309c:	2b00      	cmp	r3, #0
 800309e:	d008      	beq.n	80030b2 <HAL_RCCEx_PeriphCLKConfig+0x29e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC1PCLK2_DIV(PeriphClkInit->Adc1ClockSelection));
    
    /* Configure the ADC1 clock source */
    __HAL_RCC_ADC1_CONFIG(PeriphClkInit->Adc1ClockSelection);
 80030a0:	4b15      	ldr	r3, [pc, #84]	; (80030f8 <HAL_RCCEx_PeriphCLKConfig+0x2e4>)
 80030a2:	685b      	ldr	r3, [r3, #4]
 80030a4:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 80030a8:	687b      	ldr	r3, [r7, #4]
 80030aa:	69db      	ldr	r3, [r3, #28]
 80030ac:	4912      	ldr	r1, [pc, #72]	; (80030f8 <HAL_RCCEx_PeriphCLKConfig+0x2e4>)
 80030ae:	4313      	orrs	r3, r2
 80030b0:	604b      	str	r3, [r1, #4]
#endif /* STM32F334x8 */

#if defined(STM32F373xC) || defined(STM32F378xx)
  
  /*------------------------------ SDADC clock Configuration -------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDADC) == RCC_PERIPHCLK_SDADC)
 80030b2:	687b      	ldr	r3, [r7, #4]
 80030b4:	681b      	ldr	r3, [r3, #0]
 80030b6:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80030ba:	2b00      	cmp	r3, #0
 80030bc:	d008      	beq.n	80030d0 <HAL_RCCEx_PeriphCLKConfig+0x2bc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDADCSYSCLK_DIV(PeriphClkInit->SdadcClockSelection));
    
    /* Configure the SDADC clock prescaler */
    __HAL_RCC_SDADC_CONFIG(PeriphClkInit->SdadcClockSelection);
 80030be:	4b0e      	ldr	r3, [pc, #56]	; (80030f8 <HAL_RCCEx_PeriphCLKConfig+0x2e4>)
 80030c0:	685b      	ldr	r3, [r3, #4]
 80030c2:	f023 4278 	bic.w	r2, r3, #4160749568	; 0xf8000000
 80030c6:	687b      	ldr	r3, [r7, #4]
 80030c8:	6a1b      	ldr	r3, [r3, #32]
 80030ca:	490b      	ldr	r1, [pc, #44]	; (80030f8 <HAL_RCCEx_PeriphCLKConfig+0x2e4>)
 80030cc:	4313      	orrs	r3, r2
 80030ce:	604b      	str	r3, [r1, #4]
  }

  /*------------------------------ CEC clock Configuration -------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 80030d0:	687b      	ldr	r3, [r7, #4]
 80030d2:	681b      	ldr	r3, [r3, #0]
 80030d4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80030d8:	2b00      	cmp	r3, #0
 80030da:	d008      	beq.n	80030ee <HAL_RCCEx_PeriphCLKConfig+0x2da>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));
    
    /* Configure the CEC clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 80030dc:	4b06      	ldr	r3, [pc, #24]	; (80030f8 <HAL_RCCEx_PeriphCLKConfig+0x2e4>)
 80030de:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80030e0:	f023 0240 	bic.w	r2, r3, #64	; 0x40
 80030e4:	687b      	ldr	r3, [r7, #4]
 80030e6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80030e8:	4903      	ldr	r1, [pc, #12]	; (80030f8 <HAL_RCCEx_PeriphCLKConfig+0x2e4>)
 80030ea:	4313      	orrs	r3, r2
 80030ec:	630b      	str	r3, [r1, #48]	; 0x30
    __HAL_RCC_TIM20_CONFIG(PeriphClkInit->Tim20ClockSelection);
  }
#endif /* STM32F303xE || STM32F398xx */  

  
  return HAL_OK;
 80030ee:	2300      	movs	r3, #0
}
 80030f0:	4618      	mov	r0, r3
 80030f2:	3748      	adds	r7, #72	; 0x48
 80030f4:	46bd      	mov	sp, r7
 80030f6:	bd80      	pop	{r7, pc}
 80030f8:	40021000 	.word	0x40021000

080030fc <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 80030fc:	b580      	push	{r7, lr}
 80030fe:	b084      	sub	sp, #16
 8003100:	af00      	add	r7, sp, #0
 8003102:	6078      	str	r0, [r7, #4]
  uint32_t frxth;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8003104:	687b      	ldr	r3, [r7, #4]
 8003106:	2b00      	cmp	r3, #0
 8003108:	d101      	bne.n	800310e <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 800310a:	2301      	movs	r3, #1
 800310c:	e09d      	b.n	800324a <HAL_SPI_Init+0x14e>
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_NSSP(hspi->Init.NSSPMode));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 800310e:	687b      	ldr	r3, [r7, #4]
 8003110:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003112:	2b00      	cmp	r3, #0
 8003114:	d108      	bne.n	8003128 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8003116:	687b      	ldr	r3, [r7, #4]
 8003118:	685b      	ldr	r3, [r3, #4]
 800311a:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800311e:	d009      	beq.n	8003134 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8003120:	687b      	ldr	r3, [r7, #4]
 8003122:	2200      	movs	r2, #0
 8003124:	61da      	str	r2, [r3, #28]
 8003126:	e005      	b.n	8003134 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8003128:	687b      	ldr	r3, [r7, #4]
 800312a:	2200      	movs	r2, #0
 800312c:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 800312e:	687b      	ldr	r3, [r7, #4]
 8003130:	2200      	movs	r2, #0
 8003132:	615a      	str	r2, [r3, #20]
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_LENGTH(hspi->Init.CRCLength));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8003134:	687b      	ldr	r3, [r7, #4]
 8003136:	2200      	movs	r2, #0
 8003138:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 800313a:	687b      	ldr	r3, [r7, #4]
 800313c:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 8003140:	b2db      	uxtb	r3, r3
 8003142:	2b00      	cmp	r3, #0
 8003144:	d106      	bne.n	8003154 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8003146:	687b      	ldr	r3, [r7, #4]
 8003148:	2200      	movs	r2, #0
 800314a:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 800314e:	6878      	ldr	r0, [r7, #4]
 8003150:	f7fd fb98 	bl	8000884 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8003154:	687b      	ldr	r3, [r7, #4]
 8003156:	2202      	movs	r2, #2
 8003158:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 800315c:	687b      	ldr	r3, [r7, #4]
 800315e:	681b      	ldr	r3, [r3, #0]
 8003160:	681a      	ldr	r2, [r3, #0]
 8003162:	687b      	ldr	r3, [r7, #4]
 8003164:	681b      	ldr	r3, [r3, #0]
 8003166:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800316a:	601a      	str	r2, [r3, #0]

  /* Align by default the rs fifo threshold on the data size */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 800316c:	687b      	ldr	r3, [r7, #4]
 800316e:	68db      	ldr	r3, [r3, #12]
 8003170:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8003174:	d902      	bls.n	800317c <HAL_SPI_Init+0x80>
  {
    frxth = SPI_RXFIFO_THRESHOLD_HF;
 8003176:	2300      	movs	r3, #0
 8003178:	60fb      	str	r3, [r7, #12]
 800317a:	e002      	b.n	8003182 <HAL_SPI_Init+0x86>
  }
  else
  {
    frxth = SPI_RXFIFO_THRESHOLD_QF;
 800317c:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8003180:	60fb      	str	r3, [r7, #12]
  }

  /* CRC calculation is valid only for 16Bit and 8 Bit */
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
 8003182:	687b      	ldr	r3, [r7, #4]
 8003184:	68db      	ldr	r3, [r3, #12]
 8003186:	f5b3 6f70 	cmp.w	r3, #3840	; 0xf00
 800318a:	d007      	beq.n	800319c <HAL_SPI_Init+0xa0>
 800318c:	687b      	ldr	r3, [r7, #4]
 800318e:	68db      	ldr	r3, [r3, #12]
 8003190:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8003194:	d002      	beq.n	800319c <HAL_SPI_Init+0xa0>
  {
    /* CRC must be disabled */
    hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8003196:	687b      	ldr	r3, [r7, #4]
 8003198:	2200      	movs	r2, #0
 800319a:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 800319c:	687b      	ldr	r3, [r7, #4]
 800319e:	685b      	ldr	r3, [r3, #4]
 80031a0:	f403 7282 	and.w	r2, r3, #260	; 0x104
 80031a4:	687b      	ldr	r3, [r7, #4]
 80031a6:	689b      	ldr	r3, [r3, #8]
 80031a8:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 80031ac:	431a      	orrs	r2, r3
 80031ae:	687b      	ldr	r3, [r7, #4]
 80031b0:	691b      	ldr	r3, [r3, #16]
 80031b2:	f003 0302 	and.w	r3, r3, #2
 80031b6:	431a      	orrs	r2, r3
 80031b8:	687b      	ldr	r3, [r7, #4]
 80031ba:	695b      	ldr	r3, [r3, #20]
 80031bc:	f003 0301 	and.w	r3, r3, #1
 80031c0:	431a      	orrs	r2, r3
 80031c2:	687b      	ldr	r3, [r7, #4]
 80031c4:	699b      	ldr	r3, [r3, #24]
 80031c6:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80031ca:	431a      	orrs	r2, r3
 80031cc:	687b      	ldr	r3, [r7, #4]
 80031ce:	69db      	ldr	r3, [r3, #28]
 80031d0:	f003 0338 	and.w	r3, r3, #56	; 0x38
 80031d4:	431a      	orrs	r2, r3
 80031d6:	687b      	ldr	r3, [r7, #4]
 80031d8:	6a1b      	ldr	r3, [r3, #32]
 80031da:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80031de:	ea42 0103 	orr.w	r1, r2, r3
 80031e2:	687b      	ldr	r3, [r7, #4]
 80031e4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80031e6:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 80031ea:	687b      	ldr	r3, [r7, #4]
 80031ec:	681b      	ldr	r3, [r3, #0]
 80031ee:	430a      	orrs	r2, r1
 80031f0:	601a      	str	r2, [r3, #0]
    }
  }
#endif /* USE_SPI_CRC */

  /* Configure : NSS management, TI Mode, NSS Pulse, Data size and Rx Fifo threshold */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) |
 80031f2:	687b      	ldr	r3, [r7, #4]
 80031f4:	699b      	ldr	r3, [r3, #24]
 80031f6:	0c1b      	lsrs	r3, r3, #16
 80031f8:	f003 0204 	and.w	r2, r3, #4
 80031fc:	687b      	ldr	r3, [r7, #4]
 80031fe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003200:	f003 0310 	and.w	r3, r3, #16
 8003204:	431a      	orrs	r2, r3
 8003206:	687b      	ldr	r3, [r7, #4]
 8003208:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800320a:	f003 0308 	and.w	r3, r3, #8
 800320e:	431a      	orrs	r2, r3
 8003210:	687b      	ldr	r3, [r7, #4]
 8003212:	68db      	ldr	r3, [r3, #12]
 8003214:	f403 6370 	and.w	r3, r3, #3840	; 0xf00
 8003218:	ea42 0103 	orr.w	r1, r2, r3
 800321c:	68fb      	ldr	r3, [r7, #12]
 800321e:	f403 5280 	and.w	r2, r3, #4096	; 0x1000
 8003222:	687b      	ldr	r3, [r7, #4]
 8003224:	681b      	ldr	r3, [r3, #0]
 8003226:	430a      	orrs	r2, r1
 8003228:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 800322a:	687b      	ldr	r3, [r7, #4]
 800322c:	681b      	ldr	r3, [r3, #0]
 800322e:	69da      	ldr	r2, [r3, #28]
 8003230:	687b      	ldr	r3, [r7, #4]
 8003232:	681b      	ldr	r3, [r3, #0]
 8003234:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8003238:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 800323a:	687b      	ldr	r3, [r7, #4]
 800323c:	2200      	movs	r2, #0
 800323e:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->State     = HAL_SPI_STATE_READY;
 8003240:	687b      	ldr	r3, [r7, #4]
 8003242:	2201      	movs	r2, #1
 8003244:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  return HAL_OK;
 8003248:	2300      	movs	r3, #0
}
 800324a:	4618      	mov	r0, r3
 800324c:	3710      	adds	r7, #16
 800324e:	46bd      	mov	sp, r7
 8003250:	bd80      	pop	{r7, pc}

08003252 <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003252:	b580      	push	{r7, lr}
 8003254:	b088      	sub	sp, #32
 8003256:	af00      	add	r7, sp, #0
 8003258:	60f8      	str	r0, [r7, #12]
 800325a:	60b9      	str	r1, [r7, #8]
 800325c:	603b      	str	r3, [r7, #0]
 800325e:	4613      	mov	r3, r2
 8003260:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 8003262:	2300      	movs	r3, #0
 8003264:	77fb      	strb	r3, [r7, #31]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8003266:	68fb      	ldr	r3, [r7, #12]
 8003268:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 800326c:	2b01      	cmp	r3, #1
 800326e:	d101      	bne.n	8003274 <HAL_SPI_Transmit+0x22>
 8003270:	2302      	movs	r3, #2
 8003272:	e158      	b.n	8003526 <HAL_SPI_Transmit+0x2d4>
 8003274:	68fb      	ldr	r3, [r7, #12]
 8003276:	2201      	movs	r2, #1
 8003278:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 800327c:	f7fd fde6 	bl	8000e4c <HAL_GetTick>
 8003280:	61b8      	str	r0, [r7, #24]
  initial_TxXferCount = Size;
 8003282:	88fb      	ldrh	r3, [r7, #6]
 8003284:	82fb      	strh	r3, [r7, #22]

  if (hspi->State != HAL_SPI_STATE_READY)
 8003286:	68fb      	ldr	r3, [r7, #12]
 8003288:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 800328c:	b2db      	uxtb	r3, r3
 800328e:	2b01      	cmp	r3, #1
 8003290:	d002      	beq.n	8003298 <HAL_SPI_Transmit+0x46>
  {
    errorcode = HAL_BUSY;
 8003292:	2302      	movs	r3, #2
 8003294:	77fb      	strb	r3, [r7, #31]
    goto error;
 8003296:	e13d      	b.n	8003514 <HAL_SPI_Transmit+0x2c2>
  }

  if ((pData == NULL) || (Size == 0U))
 8003298:	68bb      	ldr	r3, [r7, #8]
 800329a:	2b00      	cmp	r3, #0
 800329c:	d002      	beq.n	80032a4 <HAL_SPI_Transmit+0x52>
 800329e:	88fb      	ldrh	r3, [r7, #6]
 80032a0:	2b00      	cmp	r3, #0
 80032a2:	d102      	bne.n	80032aa <HAL_SPI_Transmit+0x58>
  {
    errorcode = HAL_ERROR;
 80032a4:	2301      	movs	r3, #1
 80032a6:	77fb      	strb	r3, [r7, #31]
    goto error;
 80032a8:	e134      	b.n	8003514 <HAL_SPI_Transmit+0x2c2>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 80032aa:	68fb      	ldr	r3, [r7, #12]
 80032ac:	2203      	movs	r2, #3
 80032ae:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 80032b2:	68fb      	ldr	r3, [r7, #12]
 80032b4:	2200      	movs	r2, #0
 80032b6:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 80032b8:	68fb      	ldr	r3, [r7, #12]
 80032ba:	68ba      	ldr	r2, [r7, #8]
 80032bc:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->TxXferSize  = Size;
 80032be:	68fb      	ldr	r3, [r7, #12]
 80032c0:	88fa      	ldrh	r2, [r7, #6]
 80032c2:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->TxXferCount = Size;
 80032c4:	68fb      	ldr	r3, [r7, #12]
 80032c6:	88fa      	ldrh	r2, [r7, #6]
 80032c8:	87da      	strh	r2, [r3, #62]	; 0x3e

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 80032ca:	68fb      	ldr	r3, [r7, #12]
 80032cc:	2200      	movs	r2, #0
 80032ce:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->RxXferSize  = 0U;
 80032d0:	68fb      	ldr	r3, [r7, #12]
 80032d2:	2200      	movs	r2, #0
 80032d4:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  hspi->RxXferCount = 0U;
 80032d8:	68fb      	ldr	r3, [r7, #12]
 80032da:	2200      	movs	r2, #0
 80032dc:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
  hspi->TxISR       = NULL;
 80032e0:	68fb      	ldr	r3, [r7, #12]
 80032e2:	2200      	movs	r2, #0
 80032e4:	651a      	str	r2, [r3, #80]	; 0x50
  hspi->RxISR       = NULL;
 80032e6:	68fb      	ldr	r3, [r7, #12]
 80032e8:	2200      	movs	r2, #0
 80032ea:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80032ec:	68fb      	ldr	r3, [r7, #12]
 80032ee:	689b      	ldr	r3, [r3, #8]
 80032f0:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80032f4:	d10f      	bne.n	8003316 <HAL_SPI_Transmit+0xc4>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 80032f6:	68fb      	ldr	r3, [r7, #12]
 80032f8:	681b      	ldr	r3, [r3, #0]
 80032fa:	681a      	ldr	r2, [r3, #0]
 80032fc:	68fb      	ldr	r3, [r7, #12]
 80032fe:	681b      	ldr	r3, [r3, #0]
 8003300:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8003304:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 8003306:	68fb      	ldr	r3, [r7, #12]
 8003308:	681b      	ldr	r3, [r3, #0]
 800330a:	681a      	ldr	r2, [r3, #0]
 800330c:	68fb      	ldr	r3, [r7, #12]
 800330e:	681b      	ldr	r3, [r3, #0]
 8003310:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8003314:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8003316:	68fb      	ldr	r3, [r7, #12]
 8003318:	681b      	ldr	r3, [r3, #0]
 800331a:	681b      	ldr	r3, [r3, #0]
 800331c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003320:	2b40      	cmp	r3, #64	; 0x40
 8003322:	d007      	beq.n	8003334 <HAL_SPI_Transmit+0xe2>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8003324:	68fb      	ldr	r3, [r7, #12]
 8003326:	681b      	ldr	r3, [r3, #0]
 8003328:	681a      	ldr	r2, [r3, #0]
 800332a:	68fb      	ldr	r3, [r7, #12]
 800332c:	681b      	ldr	r3, [r3, #0]
 800332e:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8003332:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8003334:	68fb      	ldr	r3, [r7, #12]
 8003336:	68db      	ldr	r3, [r3, #12]
 8003338:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 800333c:	d94b      	bls.n	80033d6 <HAL_SPI_Transmit+0x184>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800333e:	68fb      	ldr	r3, [r7, #12]
 8003340:	685b      	ldr	r3, [r3, #4]
 8003342:	2b00      	cmp	r3, #0
 8003344:	d002      	beq.n	800334c <HAL_SPI_Transmit+0xfa>
 8003346:	8afb      	ldrh	r3, [r7, #22]
 8003348:	2b01      	cmp	r3, #1
 800334a:	d13e      	bne.n	80033ca <HAL_SPI_Transmit+0x178>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800334c:	68fb      	ldr	r3, [r7, #12]
 800334e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003350:	881a      	ldrh	r2, [r3, #0]
 8003352:	68fb      	ldr	r3, [r7, #12]
 8003354:	681b      	ldr	r3, [r3, #0]
 8003356:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8003358:	68fb      	ldr	r3, [r7, #12]
 800335a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800335c:	1c9a      	adds	r2, r3, #2
 800335e:	68fb      	ldr	r3, [r7, #12]
 8003360:	639a      	str	r2, [r3, #56]	; 0x38
      hspi->TxXferCount--;
 8003362:	68fb      	ldr	r3, [r7, #12]
 8003364:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003366:	b29b      	uxth	r3, r3
 8003368:	3b01      	subs	r3, #1
 800336a:	b29a      	uxth	r2, r3
 800336c:	68fb      	ldr	r3, [r7, #12]
 800336e:	87da      	strh	r2, [r3, #62]	; 0x3e
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 8003370:	e02b      	b.n	80033ca <HAL_SPI_Transmit+0x178>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8003372:	68fb      	ldr	r3, [r7, #12]
 8003374:	681b      	ldr	r3, [r3, #0]
 8003376:	689b      	ldr	r3, [r3, #8]
 8003378:	f003 0302 	and.w	r3, r3, #2
 800337c:	2b02      	cmp	r3, #2
 800337e:	d112      	bne.n	80033a6 <HAL_SPI_Transmit+0x154>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8003380:	68fb      	ldr	r3, [r7, #12]
 8003382:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003384:	881a      	ldrh	r2, [r3, #0]
 8003386:	68fb      	ldr	r3, [r7, #12]
 8003388:	681b      	ldr	r3, [r3, #0]
 800338a:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 800338c:	68fb      	ldr	r3, [r7, #12]
 800338e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003390:	1c9a      	adds	r2, r3, #2
 8003392:	68fb      	ldr	r3, [r7, #12]
 8003394:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 8003396:	68fb      	ldr	r3, [r7, #12]
 8003398:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800339a:	b29b      	uxth	r3, r3
 800339c:	3b01      	subs	r3, #1
 800339e:	b29a      	uxth	r2, r3
 80033a0:	68fb      	ldr	r3, [r7, #12]
 80033a2:	87da      	strh	r2, [r3, #62]	; 0x3e
 80033a4:	e011      	b.n	80033ca <HAL_SPI_Transmit+0x178>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 80033a6:	f7fd fd51 	bl	8000e4c <HAL_GetTick>
 80033aa:	4602      	mov	r2, r0
 80033ac:	69bb      	ldr	r3, [r7, #24]
 80033ae:	1ad3      	subs	r3, r2, r3
 80033b0:	683a      	ldr	r2, [r7, #0]
 80033b2:	429a      	cmp	r2, r3
 80033b4:	d803      	bhi.n	80033be <HAL_SPI_Transmit+0x16c>
 80033b6:	683b      	ldr	r3, [r7, #0]
 80033b8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80033bc:	d102      	bne.n	80033c4 <HAL_SPI_Transmit+0x172>
 80033be:	683b      	ldr	r3, [r7, #0]
 80033c0:	2b00      	cmp	r3, #0
 80033c2:	d102      	bne.n	80033ca <HAL_SPI_Transmit+0x178>
        {
          errorcode = HAL_TIMEOUT;
 80033c4:	2303      	movs	r3, #3
 80033c6:	77fb      	strb	r3, [r7, #31]
          goto error;
 80033c8:	e0a4      	b.n	8003514 <HAL_SPI_Transmit+0x2c2>
    while (hspi->TxXferCount > 0U)
 80033ca:	68fb      	ldr	r3, [r7, #12]
 80033cc:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80033ce:	b29b      	uxth	r3, r3
 80033d0:	2b00      	cmp	r3, #0
 80033d2:	d1ce      	bne.n	8003372 <HAL_SPI_Transmit+0x120>
 80033d4:	e07c      	b.n	80034d0 <HAL_SPI_Transmit+0x27e>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80033d6:	68fb      	ldr	r3, [r7, #12]
 80033d8:	685b      	ldr	r3, [r3, #4]
 80033da:	2b00      	cmp	r3, #0
 80033dc:	d002      	beq.n	80033e4 <HAL_SPI_Transmit+0x192>
 80033de:	8afb      	ldrh	r3, [r7, #22]
 80033e0:	2b01      	cmp	r3, #1
 80033e2:	d170      	bne.n	80034c6 <HAL_SPI_Transmit+0x274>
    {
      if (hspi->TxXferCount > 1U)
 80033e4:	68fb      	ldr	r3, [r7, #12]
 80033e6:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80033e8:	b29b      	uxth	r3, r3
 80033ea:	2b01      	cmp	r3, #1
 80033ec:	d912      	bls.n	8003414 <HAL_SPI_Transmit+0x1c2>
      {
        /* write on the data register in packing mode */
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80033ee:	68fb      	ldr	r3, [r7, #12]
 80033f0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80033f2:	881a      	ldrh	r2, [r3, #0]
 80033f4:	68fb      	ldr	r3, [r7, #12]
 80033f6:	681b      	ldr	r3, [r3, #0]
 80033f8:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 80033fa:	68fb      	ldr	r3, [r7, #12]
 80033fc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80033fe:	1c9a      	adds	r2, r3, #2
 8003400:	68fb      	ldr	r3, [r7, #12]
 8003402:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount -= 2U;
 8003404:	68fb      	ldr	r3, [r7, #12]
 8003406:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003408:	b29b      	uxth	r3, r3
 800340a:	3b02      	subs	r3, #2
 800340c:	b29a      	uxth	r2, r3
 800340e:	68fb      	ldr	r3, [r7, #12]
 8003410:	87da      	strh	r2, [r3, #62]	; 0x3e
 8003412:	e058      	b.n	80034c6 <HAL_SPI_Transmit+0x274>
      }
      else
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8003414:	68fb      	ldr	r3, [r7, #12]
 8003416:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8003418:	68fb      	ldr	r3, [r7, #12]
 800341a:	681b      	ldr	r3, [r3, #0]
 800341c:	330c      	adds	r3, #12
 800341e:	7812      	ldrb	r2, [r2, #0]
 8003420:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr ++;
 8003422:	68fb      	ldr	r3, [r7, #12]
 8003424:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003426:	1c5a      	adds	r2, r3, #1
 8003428:	68fb      	ldr	r3, [r7, #12]
 800342a:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 800342c:	68fb      	ldr	r3, [r7, #12]
 800342e:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003430:	b29b      	uxth	r3, r3
 8003432:	3b01      	subs	r3, #1
 8003434:	b29a      	uxth	r2, r3
 8003436:	68fb      	ldr	r3, [r7, #12]
 8003438:	87da      	strh	r2, [r3, #62]	; 0x3e
      }
    }
    while (hspi->TxXferCount > 0U)
 800343a:	e044      	b.n	80034c6 <HAL_SPI_Transmit+0x274>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 800343c:	68fb      	ldr	r3, [r7, #12]
 800343e:	681b      	ldr	r3, [r3, #0]
 8003440:	689b      	ldr	r3, [r3, #8]
 8003442:	f003 0302 	and.w	r3, r3, #2
 8003446:	2b02      	cmp	r3, #2
 8003448:	d12b      	bne.n	80034a2 <HAL_SPI_Transmit+0x250>
      {
        if (hspi->TxXferCount > 1U)
 800344a:	68fb      	ldr	r3, [r7, #12]
 800344c:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800344e:	b29b      	uxth	r3, r3
 8003450:	2b01      	cmp	r3, #1
 8003452:	d912      	bls.n	800347a <HAL_SPI_Transmit+0x228>
        {
          /* write on the data register in packing mode */
          hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8003454:	68fb      	ldr	r3, [r7, #12]
 8003456:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003458:	881a      	ldrh	r2, [r3, #0]
 800345a:	68fb      	ldr	r3, [r7, #12]
 800345c:	681b      	ldr	r3, [r3, #0]
 800345e:	60da      	str	r2, [r3, #12]
          hspi->pTxBuffPtr += sizeof(uint16_t);
 8003460:	68fb      	ldr	r3, [r7, #12]
 8003462:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003464:	1c9a      	adds	r2, r3, #2
 8003466:	68fb      	ldr	r3, [r7, #12]
 8003468:	639a      	str	r2, [r3, #56]	; 0x38
          hspi->TxXferCount -= 2U;
 800346a:	68fb      	ldr	r3, [r7, #12]
 800346c:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800346e:	b29b      	uxth	r3, r3
 8003470:	3b02      	subs	r3, #2
 8003472:	b29a      	uxth	r2, r3
 8003474:	68fb      	ldr	r3, [r7, #12]
 8003476:	87da      	strh	r2, [r3, #62]	; 0x3e
 8003478:	e025      	b.n	80034c6 <HAL_SPI_Transmit+0x274>
        }
        else
        {
          *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 800347a:	68fb      	ldr	r3, [r7, #12]
 800347c:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800347e:	68fb      	ldr	r3, [r7, #12]
 8003480:	681b      	ldr	r3, [r3, #0]
 8003482:	330c      	adds	r3, #12
 8003484:	7812      	ldrb	r2, [r2, #0]
 8003486:	701a      	strb	r2, [r3, #0]
          hspi->pTxBuffPtr++;
 8003488:	68fb      	ldr	r3, [r7, #12]
 800348a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800348c:	1c5a      	adds	r2, r3, #1
 800348e:	68fb      	ldr	r3, [r7, #12]
 8003490:	639a      	str	r2, [r3, #56]	; 0x38
          hspi->TxXferCount--;
 8003492:	68fb      	ldr	r3, [r7, #12]
 8003494:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003496:	b29b      	uxth	r3, r3
 8003498:	3b01      	subs	r3, #1
 800349a:	b29a      	uxth	r2, r3
 800349c:	68fb      	ldr	r3, [r7, #12]
 800349e:	87da      	strh	r2, [r3, #62]	; 0x3e
 80034a0:	e011      	b.n	80034c6 <HAL_SPI_Transmit+0x274>
        }
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 80034a2:	f7fd fcd3 	bl	8000e4c <HAL_GetTick>
 80034a6:	4602      	mov	r2, r0
 80034a8:	69bb      	ldr	r3, [r7, #24]
 80034aa:	1ad3      	subs	r3, r2, r3
 80034ac:	683a      	ldr	r2, [r7, #0]
 80034ae:	429a      	cmp	r2, r3
 80034b0:	d803      	bhi.n	80034ba <HAL_SPI_Transmit+0x268>
 80034b2:	683b      	ldr	r3, [r7, #0]
 80034b4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80034b8:	d102      	bne.n	80034c0 <HAL_SPI_Transmit+0x26e>
 80034ba:	683b      	ldr	r3, [r7, #0]
 80034bc:	2b00      	cmp	r3, #0
 80034be:	d102      	bne.n	80034c6 <HAL_SPI_Transmit+0x274>
        {
          errorcode = HAL_TIMEOUT;
 80034c0:	2303      	movs	r3, #3
 80034c2:	77fb      	strb	r3, [r7, #31]
          goto error;
 80034c4:	e026      	b.n	8003514 <HAL_SPI_Transmit+0x2c2>
    while (hspi->TxXferCount > 0U)
 80034c6:	68fb      	ldr	r3, [r7, #12]
 80034c8:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80034ca:	b29b      	uxth	r3, r3
 80034cc:	2b00      	cmp	r3, #0
 80034ce:	d1b5      	bne.n	800343c <HAL_SPI_Transmit+0x1ea>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 80034d0:	69ba      	ldr	r2, [r7, #24]
 80034d2:	6839      	ldr	r1, [r7, #0]
 80034d4:	68f8      	ldr	r0, [r7, #12]
 80034d6:	f000 fb5b 	bl	8003b90 <SPI_EndRxTxTransaction>
 80034da:	4603      	mov	r3, r0
 80034dc:	2b00      	cmp	r3, #0
 80034de:	d002      	beq.n	80034e6 <HAL_SPI_Transmit+0x294>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 80034e0:	68fb      	ldr	r3, [r7, #12]
 80034e2:	2220      	movs	r2, #32
 80034e4:	661a      	str	r2, [r3, #96]	; 0x60
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 80034e6:	68fb      	ldr	r3, [r7, #12]
 80034e8:	689b      	ldr	r3, [r3, #8]
 80034ea:	2b00      	cmp	r3, #0
 80034ec:	d10a      	bne.n	8003504 <HAL_SPI_Transmit+0x2b2>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 80034ee:	2300      	movs	r3, #0
 80034f0:	613b      	str	r3, [r7, #16]
 80034f2:	68fb      	ldr	r3, [r7, #12]
 80034f4:	681b      	ldr	r3, [r3, #0]
 80034f6:	68db      	ldr	r3, [r3, #12]
 80034f8:	613b      	str	r3, [r7, #16]
 80034fa:	68fb      	ldr	r3, [r7, #12]
 80034fc:	681b      	ldr	r3, [r3, #0]
 80034fe:	689b      	ldr	r3, [r3, #8]
 8003500:	613b      	str	r3, [r7, #16]
 8003502:	693b      	ldr	r3, [r7, #16]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8003504:	68fb      	ldr	r3, [r7, #12]
 8003506:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003508:	2b00      	cmp	r3, #0
 800350a:	d002      	beq.n	8003512 <HAL_SPI_Transmit+0x2c0>
  {
    errorcode = HAL_ERROR;
 800350c:	2301      	movs	r3, #1
 800350e:	77fb      	strb	r3, [r7, #31]
 8003510:	e000      	b.n	8003514 <HAL_SPI_Transmit+0x2c2>
  }

error:
 8003512:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 8003514:	68fb      	ldr	r3, [r7, #12]
 8003516:	2201      	movs	r2, #1
 8003518:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 800351c:	68fb      	ldr	r3, [r7, #12]
 800351e:	2200      	movs	r2, #0
 8003520:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c
  return errorcode;
 8003524:	7ffb      	ldrb	r3, [r7, #31]
}
 8003526:	4618      	mov	r0, r3
 8003528:	3720      	adds	r7, #32
 800352a:	46bd      	mov	sp, r7
 800352c:	bd80      	pop	{r7, pc}

0800352e <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size,
                                          uint32_t Timeout)
{
 800352e:	b580      	push	{r7, lr}
 8003530:	b08a      	sub	sp, #40	; 0x28
 8003532:	af00      	add	r7, sp, #0
 8003534:	60f8      	str	r0, [r7, #12]
 8003536:	60b9      	str	r1, [r7, #8]
 8003538:	607a      	str	r2, [r7, #4]
 800353a:	807b      	strh	r3, [r7, #2]
  __IO uint8_t  * ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
#endif /* USE_SPI_CRC */

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 800353c:	2301      	movs	r3, #1
 800353e:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_StatusTypeDef    errorcode = HAL_OK;
 8003540:	2300      	movs	r3, #0
 8003542:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8003546:	68fb      	ldr	r3, [r7, #12]
 8003548:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 800354c:	2b01      	cmp	r3, #1
 800354e:	d101      	bne.n	8003554 <HAL_SPI_TransmitReceive+0x26>
 8003550:	2302      	movs	r3, #2
 8003552:	e1fb      	b.n	800394c <HAL_SPI_TransmitReceive+0x41e>
 8003554:	68fb      	ldr	r3, [r7, #12]
 8003556:	2201      	movs	r2, #1
 8003558:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 800355c:	f7fd fc76 	bl	8000e4c <HAL_GetTick>
 8003560:	61f8      	str	r0, [r7, #28]

  /* Init temporary variables */
  tmp_state           = hspi->State;
 8003562:	68fb      	ldr	r3, [r7, #12]
 8003564:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 8003568:	76fb      	strb	r3, [r7, #27]
  tmp_mode            = hspi->Init.Mode;
 800356a:	68fb      	ldr	r3, [r7, #12]
 800356c:	685b      	ldr	r3, [r3, #4]
 800356e:	617b      	str	r3, [r7, #20]
  initial_TxXferCount = Size;
 8003570:	887b      	ldrh	r3, [r7, #2]
 8003572:	827b      	strh	r3, [r7, #18]
  initial_RxXferCount = Size;
 8003574:	887b      	ldrh	r3, [r7, #2]
 8003576:	823b      	strh	r3, [r7, #16]
#if (USE_SPI_CRC != 0U)
  spi_cr1             = READ_REG(hspi->Instance->CR1);
  spi_cr2             = READ_REG(hspi->Instance->CR2);
#endif /* USE_SPI_CRC */

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 8003578:	7efb      	ldrb	r3, [r7, #27]
 800357a:	2b01      	cmp	r3, #1
 800357c:	d00e      	beq.n	800359c <HAL_SPI_TransmitReceive+0x6e>
 800357e:	697b      	ldr	r3, [r7, #20]
 8003580:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8003584:	d106      	bne.n	8003594 <HAL_SPI_TransmitReceive+0x66>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 8003586:	68fb      	ldr	r3, [r7, #12]
 8003588:	689b      	ldr	r3, [r3, #8]
 800358a:	2b00      	cmp	r3, #0
 800358c:	d102      	bne.n	8003594 <HAL_SPI_TransmitReceive+0x66>
 800358e:	7efb      	ldrb	r3, [r7, #27]
 8003590:	2b04      	cmp	r3, #4
 8003592:	d003      	beq.n	800359c <HAL_SPI_TransmitReceive+0x6e>
  {
    errorcode = HAL_BUSY;
 8003594:	2302      	movs	r3, #2
 8003596:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
    goto error;
 800359a:	e1cd      	b.n	8003938 <HAL_SPI_TransmitReceive+0x40a>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 800359c:	68bb      	ldr	r3, [r7, #8]
 800359e:	2b00      	cmp	r3, #0
 80035a0:	d005      	beq.n	80035ae <HAL_SPI_TransmitReceive+0x80>
 80035a2:	687b      	ldr	r3, [r7, #4]
 80035a4:	2b00      	cmp	r3, #0
 80035a6:	d002      	beq.n	80035ae <HAL_SPI_TransmitReceive+0x80>
 80035a8:	887b      	ldrh	r3, [r7, #2]
 80035aa:	2b00      	cmp	r3, #0
 80035ac:	d103      	bne.n	80035b6 <HAL_SPI_TransmitReceive+0x88>
  {
    errorcode = HAL_ERROR;
 80035ae:	2301      	movs	r3, #1
 80035b0:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
    goto error;
 80035b4:	e1c0      	b.n	8003938 <HAL_SPI_TransmitReceive+0x40a>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 80035b6:	68fb      	ldr	r3, [r7, #12]
 80035b8:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 80035bc:	b2db      	uxtb	r3, r3
 80035be:	2b04      	cmp	r3, #4
 80035c0:	d003      	beq.n	80035ca <HAL_SPI_TransmitReceive+0x9c>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 80035c2:	68fb      	ldr	r3, [r7, #12]
 80035c4:	2205      	movs	r2, #5
 80035c6:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 80035ca:	68fb      	ldr	r3, [r7, #12]
 80035cc:	2200      	movs	r2, #0
 80035ce:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 80035d0:	68fb      	ldr	r3, [r7, #12]
 80035d2:	687a      	ldr	r2, [r7, #4]
 80035d4:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->RxXferCount = Size;
 80035d6:	68fb      	ldr	r3, [r7, #12]
 80035d8:	887a      	ldrh	r2, [r7, #2]
 80035da:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
  hspi->RxXferSize  = Size;
 80035de:	68fb      	ldr	r3, [r7, #12]
 80035e0:	887a      	ldrh	r2, [r7, #2]
 80035e2:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 80035e6:	68fb      	ldr	r3, [r7, #12]
 80035e8:	68ba      	ldr	r2, [r7, #8]
 80035ea:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->TxXferCount = Size;
 80035ec:	68fb      	ldr	r3, [r7, #12]
 80035ee:	887a      	ldrh	r2, [r7, #2]
 80035f0:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxXferSize  = Size;
 80035f2:	68fb      	ldr	r3, [r7, #12]
 80035f4:	887a      	ldrh	r2, [r7, #2]
 80035f6:	879a      	strh	r2, [r3, #60]	; 0x3c

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 80035f8:	68fb      	ldr	r3, [r7, #12]
 80035fa:	2200      	movs	r2, #0
 80035fc:	64da      	str	r2, [r3, #76]	; 0x4c
  hspi->TxISR       = NULL;
 80035fe:	68fb      	ldr	r3, [r7, #12]
 8003600:	2200      	movs	r2, #0
 8003602:	651a      	str	r2, [r3, #80]	; 0x50
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Set the Rx Fifo threshold */
  if ((hspi->Init.DataSize > SPI_DATASIZE_8BIT) || (initial_RxXferCount > 1U))
 8003604:	68fb      	ldr	r3, [r7, #12]
 8003606:	68db      	ldr	r3, [r3, #12]
 8003608:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 800360c:	d802      	bhi.n	8003614 <HAL_SPI_TransmitReceive+0xe6>
 800360e:	8a3b      	ldrh	r3, [r7, #16]
 8003610:	2b01      	cmp	r3, #1
 8003612:	d908      	bls.n	8003626 <HAL_SPI_TransmitReceive+0xf8>
  {
    /* Set fiforxthreshold according the reception data length: 16bit */
    CLEAR_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8003614:	68fb      	ldr	r3, [r7, #12]
 8003616:	681b      	ldr	r3, [r3, #0]
 8003618:	685a      	ldr	r2, [r3, #4]
 800361a:	68fb      	ldr	r3, [r7, #12]
 800361c:	681b      	ldr	r3, [r3, #0]
 800361e:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8003622:	605a      	str	r2, [r3, #4]
 8003624:	e007      	b.n	8003636 <HAL_SPI_TransmitReceive+0x108>
  }
  else
  {
    /* Set fiforxthreshold according the reception data length: 8bit */
    SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8003626:	68fb      	ldr	r3, [r7, #12]
 8003628:	681b      	ldr	r3, [r3, #0]
 800362a:	685a      	ldr	r2, [r3, #4]
 800362c:	68fb      	ldr	r3, [r7, #12]
 800362e:	681b      	ldr	r3, [r3, #0]
 8003630:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8003634:	605a      	str	r2, [r3, #4]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8003636:	68fb      	ldr	r3, [r7, #12]
 8003638:	681b      	ldr	r3, [r3, #0]
 800363a:	681b      	ldr	r3, [r3, #0]
 800363c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003640:	2b40      	cmp	r3, #64	; 0x40
 8003642:	d007      	beq.n	8003654 <HAL_SPI_TransmitReceive+0x126>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8003644:	68fb      	ldr	r3, [r7, #12]
 8003646:	681b      	ldr	r3, [r3, #0]
 8003648:	681a      	ldr	r2, [r3, #0]
 800364a:	68fb      	ldr	r3, [r7, #12]
 800364c:	681b      	ldr	r3, [r3, #0]
 800364e:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8003652:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8003654:	68fb      	ldr	r3, [r7, #12]
 8003656:	68db      	ldr	r3, [r3, #12]
 8003658:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 800365c:	d97c      	bls.n	8003758 <HAL_SPI_TransmitReceive+0x22a>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800365e:	68fb      	ldr	r3, [r7, #12]
 8003660:	685b      	ldr	r3, [r3, #4]
 8003662:	2b00      	cmp	r3, #0
 8003664:	d002      	beq.n	800366c <HAL_SPI_TransmitReceive+0x13e>
 8003666:	8a7b      	ldrh	r3, [r7, #18]
 8003668:	2b01      	cmp	r3, #1
 800366a:	d169      	bne.n	8003740 <HAL_SPI_TransmitReceive+0x212>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800366c:	68fb      	ldr	r3, [r7, #12]
 800366e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003670:	881a      	ldrh	r2, [r3, #0]
 8003672:	68fb      	ldr	r3, [r7, #12]
 8003674:	681b      	ldr	r3, [r3, #0]
 8003676:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8003678:	68fb      	ldr	r3, [r7, #12]
 800367a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800367c:	1c9a      	adds	r2, r3, #2
 800367e:	68fb      	ldr	r3, [r7, #12]
 8003680:	639a      	str	r2, [r3, #56]	; 0x38
      hspi->TxXferCount--;
 8003682:	68fb      	ldr	r3, [r7, #12]
 8003684:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003686:	b29b      	uxth	r3, r3
 8003688:	3b01      	subs	r3, #1
 800368a:	b29a      	uxth	r2, r3
 800368c:	68fb      	ldr	r3, [r7, #12]
 800368e:	87da      	strh	r2, [r3, #62]	; 0x3e
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8003690:	e056      	b.n	8003740 <HAL_SPI_TransmitReceive+0x212>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8003692:	68fb      	ldr	r3, [r7, #12]
 8003694:	681b      	ldr	r3, [r3, #0]
 8003696:	689b      	ldr	r3, [r3, #8]
 8003698:	f003 0302 	and.w	r3, r3, #2
 800369c:	2b02      	cmp	r3, #2
 800369e:	d11b      	bne.n	80036d8 <HAL_SPI_TransmitReceive+0x1aa>
 80036a0:	68fb      	ldr	r3, [r7, #12]
 80036a2:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80036a4:	b29b      	uxth	r3, r3
 80036a6:	2b00      	cmp	r3, #0
 80036a8:	d016      	beq.n	80036d8 <HAL_SPI_TransmitReceive+0x1aa>
 80036aa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80036ac:	2b01      	cmp	r3, #1
 80036ae:	d113      	bne.n	80036d8 <HAL_SPI_TransmitReceive+0x1aa>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80036b0:	68fb      	ldr	r3, [r7, #12]
 80036b2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80036b4:	881a      	ldrh	r2, [r3, #0]
 80036b6:	68fb      	ldr	r3, [r7, #12]
 80036b8:	681b      	ldr	r3, [r3, #0]
 80036ba:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 80036bc:	68fb      	ldr	r3, [r7, #12]
 80036be:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80036c0:	1c9a      	adds	r2, r3, #2
 80036c2:	68fb      	ldr	r3, [r7, #12]
 80036c4:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 80036c6:	68fb      	ldr	r3, [r7, #12]
 80036c8:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80036ca:	b29b      	uxth	r3, r3
 80036cc:	3b01      	subs	r3, #1
 80036ce:	b29a      	uxth	r2, r3
 80036d0:	68fb      	ldr	r3, [r7, #12]
 80036d2:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 80036d4:	2300      	movs	r3, #0
 80036d6:	627b      	str	r3, [r7, #36]	; 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 80036d8:	68fb      	ldr	r3, [r7, #12]
 80036da:	681b      	ldr	r3, [r3, #0]
 80036dc:	689b      	ldr	r3, [r3, #8]
 80036de:	f003 0301 	and.w	r3, r3, #1
 80036e2:	2b01      	cmp	r3, #1
 80036e4:	d11c      	bne.n	8003720 <HAL_SPI_TransmitReceive+0x1f2>
 80036e6:	68fb      	ldr	r3, [r7, #12]
 80036e8:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 80036ec:	b29b      	uxth	r3, r3
 80036ee:	2b00      	cmp	r3, #0
 80036f0:	d016      	beq.n	8003720 <HAL_SPI_TransmitReceive+0x1f2>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 80036f2:	68fb      	ldr	r3, [r7, #12]
 80036f4:	681b      	ldr	r3, [r3, #0]
 80036f6:	68da      	ldr	r2, [r3, #12]
 80036f8:	68fb      	ldr	r3, [r7, #12]
 80036fa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80036fc:	b292      	uxth	r2, r2
 80036fe:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8003700:	68fb      	ldr	r3, [r7, #12]
 8003702:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003704:	1c9a      	adds	r2, r3, #2
 8003706:	68fb      	ldr	r3, [r7, #12]
 8003708:	641a      	str	r2, [r3, #64]	; 0x40
        hspi->RxXferCount--;
 800370a:	68fb      	ldr	r3, [r7, #12]
 800370c:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8003710:	b29b      	uxth	r3, r3
 8003712:	3b01      	subs	r3, #1
 8003714:	b29a      	uxth	r2, r3
 8003716:	68fb      	ldr	r3, [r7, #12]
 8003718:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 800371c:	2301      	movs	r3, #1
 800371e:	627b      	str	r3, [r7, #36]	; 0x24
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 8003720:	f7fd fb94 	bl	8000e4c <HAL_GetTick>
 8003724:	4602      	mov	r2, r0
 8003726:	69fb      	ldr	r3, [r7, #28]
 8003728:	1ad3      	subs	r3, r2, r3
 800372a:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800372c:	429a      	cmp	r2, r3
 800372e:	d807      	bhi.n	8003740 <HAL_SPI_TransmitReceive+0x212>
 8003730:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003732:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003736:	d003      	beq.n	8003740 <HAL_SPI_TransmitReceive+0x212>
      {
        errorcode = HAL_TIMEOUT;
 8003738:	2303      	movs	r3, #3
 800373a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
        goto error;
 800373e:	e0fb      	b.n	8003938 <HAL_SPI_TransmitReceive+0x40a>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8003740:	68fb      	ldr	r3, [r7, #12]
 8003742:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003744:	b29b      	uxth	r3, r3
 8003746:	2b00      	cmp	r3, #0
 8003748:	d1a3      	bne.n	8003692 <HAL_SPI_TransmitReceive+0x164>
 800374a:	68fb      	ldr	r3, [r7, #12]
 800374c:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8003750:	b29b      	uxth	r3, r3
 8003752:	2b00      	cmp	r3, #0
 8003754:	d19d      	bne.n	8003692 <HAL_SPI_TransmitReceive+0x164>
 8003756:	e0df      	b.n	8003918 <HAL_SPI_TransmitReceive+0x3ea>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8003758:	68fb      	ldr	r3, [r7, #12]
 800375a:	685b      	ldr	r3, [r3, #4]
 800375c:	2b00      	cmp	r3, #0
 800375e:	d003      	beq.n	8003768 <HAL_SPI_TransmitReceive+0x23a>
 8003760:	8a7b      	ldrh	r3, [r7, #18]
 8003762:	2b01      	cmp	r3, #1
 8003764:	f040 80cb 	bne.w	80038fe <HAL_SPI_TransmitReceive+0x3d0>
    {
      if (hspi->TxXferCount > 1U)
 8003768:	68fb      	ldr	r3, [r7, #12]
 800376a:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800376c:	b29b      	uxth	r3, r3
 800376e:	2b01      	cmp	r3, #1
 8003770:	d912      	bls.n	8003798 <HAL_SPI_TransmitReceive+0x26a>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8003772:	68fb      	ldr	r3, [r7, #12]
 8003774:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003776:	881a      	ldrh	r2, [r3, #0]
 8003778:	68fb      	ldr	r3, [r7, #12]
 800377a:	681b      	ldr	r3, [r3, #0]
 800377c:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 800377e:	68fb      	ldr	r3, [r7, #12]
 8003780:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003782:	1c9a      	adds	r2, r3, #2
 8003784:	68fb      	ldr	r3, [r7, #12]
 8003786:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount -= 2U;
 8003788:	68fb      	ldr	r3, [r7, #12]
 800378a:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800378c:	b29b      	uxth	r3, r3
 800378e:	3b02      	subs	r3, #2
 8003790:	b29a      	uxth	r2, r3
 8003792:	68fb      	ldr	r3, [r7, #12]
 8003794:	87da      	strh	r2, [r3, #62]	; 0x3e
 8003796:	e0b2      	b.n	80038fe <HAL_SPI_TransmitReceive+0x3d0>
      }
      else
      {
        *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 8003798:	68fb      	ldr	r3, [r7, #12]
 800379a:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800379c:	68fb      	ldr	r3, [r7, #12]
 800379e:	681b      	ldr	r3, [r3, #0]
 80037a0:	330c      	adds	r3, #12
 80037a2:	7812      	ldrb	r2, [r2, #0]
 80037a4:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 80037a6:	68fb      	ldr	r3, [r7, #12]
 80037a8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80037aa:	1c5a      	adds	r2, r3, #1
 80037ac:	68fb      	ldr	r3, [r7, #12]
 80037ae:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 80037b0:	68fb      	ldr	r3, [r7, #12]
 80037b2:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80037b4:	b29b      	uxth	r3, r3
 80037b6:	3b01      	subs	r3, #1
 80037b8:	b29a      	uxth	r2, r3
 80037ba:	68fb      	ldr	r3, [r7, #12]
 80037bc:	87da      	strh	r2, [r3, #62]	; 0x3e
      }
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 80037be:	e09e      	b.n	80038fe <HAL_SPI_TransmitReceive+0x3d0>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 80037c0:	68fb      	ldr	r3, [r7, #12]
 80037c2:	681b      	ldr	r3, [r3, #0]
 80037c4:	689b      	ldr	r3, [r3, #8]
 80037c6:	f003 0302 	and.w	r3, r3, #2
 80037ca:	2b02      	cmp	r3, #2
 80037cc:	d134      	bne.n	8003838 <HAL_SPI_TransmitReceive+0x30a>
 80037ce:	68fb      	ldr	r3, [r7, #12]
 80037d0:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80037d2:	b29b      	uxth	r3, r3
 80037d4:	2b00      	cmp	r3, #0
 80037d6:	d02f      	beq.n	8003838 <HAL_SPI_TransmitReceive+0x30a>
 80037d8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80037da:	2b01      	cmp	r3, #1
 80037dc:	d12c      	bne.n	8003838 <HAL_SPI_TransmitReceive+0x30a>
      {
        if (hspi->TxXferCount > 1U)
 80037de:	68fb      	ldr	r3, [r7, #12]
 80037e0:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80037e2:	b29b      	uxth	r3, r3
 80037e4:	2b01      	cmp	r3, #1
 80037e6:	d912      	bls.n	800380e <HAL_SPI_TransmitReceive+0x2e0>
        {
          hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80037e8:	68fb      	ldr	r3, [r7, #12]
 80037ea:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80037ec:	881a      	ldrh	r2, [r3, #0]
 80037ee:	68fb      	ldr	r3, [r7, #12]
 80037f0:	681b      	ldr	r3, [r3, #0]
 80037f2:	60da      	str	r2, [r3, #12]
          hspi->pTxBuffPtr += sizeof(uint16_t);
 80037f4:	68fb      	ldr	r3, [r7, #12]
 80037f6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80037f8:	1c9a      	adds	r2, r3, #2
 80037fa:	68fb      	ldr	r3, [r7, #12]
 80037fc:	639a      	str	r2, [r3, #56]	; 0x38
          hspi->TxXferCount -= 2U;
 80037fe:	68fb      	ldr	r3, [r7, #12]
 8003800:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003802:	b29b      	uxth	r3, r3
 8003804:	3b02      	subs	r3, #2
 8003806:	b29a      	uxth	r2, r3
 8003808:	68fb      	ldr	r3, [r7, #12]
 800380a:	87da      	strh	r2, [r3, #62]	; 0x3e
 800380c:	e012      	b.n	8003834 <HAL_SPI_TransmitReceive+0x306>
        }
        else
        {
          *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 800380e:	68fb      	ldr	r3, [r7, #12]
 8003810:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8003812:	68fb      	ldr	r3, [r7, #12]
 8003814:	681b      	ldr	r3, [r3, #0]
 8003816:	330c      	adds	r3, #12
 8003818:	7812      	ldrb	r2, [r2, #0]
 800381a:	701a      	strb	r2, [r3, #0]
          hspi->pTxBuffPtr++;
 800381c:	68fb      	ldr	r3, [r7, #12]
 800381e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003820:	1c5a      	adds	r2, r3, #1
 8003822:	68fb      	ldr	r3, [r7, #12]
 8003824:	639a      	str	r2, [r3, #56]	; 0x38
          hspi->TxXferCount--;
 8003826:	68fb      	ldr	r3, [r7, #12]
 8003828:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800382a:	b29b      	uxth	r3, r3
 800382c:	3b01      	subs	r3, #1
 800382e:	b29a      	uxth	r2, r3
 8003830:	68fb      	ldr	r3, [r7, #12]
 8003832:	87da      	strh	r2, [r3, #62]	; 0x3e
        }
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8003834:	2300      	movs	r3, #0
 8003836:	627b      	str	r3, [r7, #36]	; 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8003838:	68fb      	ldr	r3, [r7, #12]
 800383a:	681b      	ldr	r3, [r3, #0]
 800383c:	689b      	ldr	r3, [r3, #8]
 800383e:	f003 0301 	and.w	r3, r3, #1
 8003842:	2b01      	cmp	r3, #1
 8003844:	d148      	bne.n	80038d8 <HAL_SPI_TransmitReceive+0x3aa>
 8003846:	68fb      	ldr	r3, [r7, #12]
 8003848:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 800384c:	b29b      	uxth	r3, r3
 800384e:	2b00      	cmp	r3, #0
 8003850:	d042      	beq.n	80038d8 <HAL_SPI_TransmitReceive+0x3aa>
      {
        if (hspi->RxXferCount > 1U)
 8003852:	68fb      	ldr	r3, [r7, #12]
 8003854:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8003858:	b29b      	uxth	r3, r3
 800385a:	2b01      	cmp	r3, #1
 800385c:	d923      	bls.n	80038a6 <HAL_SPI_TransmitReceive+0x378>
        {
          *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 800385e:	68fb      	ldr	r3, [r7, #12]
 8003860:	681b      	ldr	r3, [r3, #0]
 8003862:	68da      	ldr	r2, [r3, #12]
 8003864:	68fb      	ldr	r3, [r7, #12]
 8003866:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003868:	b292      	uxth	r2, r2
 800386a:	801a      	strh	r2, [r3, #0]
          hspi->pRxBuffPtr += sizeof(uint16_t);
 800386c:	68fb      	ldr	r3, [r7, #12]
 800386e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003870:	1c9a      	adds	r2, r3, #2
 8003872:	68fb      	ldr	r3, [r7, #12]
 8003874:	641a      	str	r2, [r3, #64]	; 0x40
          hspi->RxXferCount -= 2U;
 8003876:	68fb      	ldr	r3, [r7, #12]
 8003878:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 800387c:	b29b      	uxth	r3, r3
 800387e:	3b02      	subs	r3, #2
 8003880:	b29a      	uxth	r2, r3
 8003882:	68fb      	ldr	r3, [r7, #12]
 8003884:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
          if (hspi->RxXferCount <= 1U)
 8003888:	68fb      	ldr	r3, [r7, #12]
 800388a:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 800388e:	b29b      	uxth	r3, r3
 8003890:	2b01      	cmp	r3, #1
 8003892:	d81f      	bhi.n	80038d4 <HAL_SPI_TransmitReceive+0x3a6>
          {
            /* Set RX Fifo threshold before to switch on 8 bit data size */
            SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8003894:	68fb      	ldr	r3, [r7, #12]
 8003896:	681b      	ldr	r3, [r3, #0]
 8003898:	685a      	ldr	r2, [r3, #4]
 800389a:	68fb      	ldr	r3, [r7, #12]
 800389c:	681b      	ldr	r3, [r3, #0]
 800389e:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 80038a2:	605a      	str	r2, [r3, #4]
 80038a4:	e016      	b.n	80038d4 <HAL_SPI_TransmitReceive+0x3a6>
          }
        }
        else
        {
          (*(uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 80038a6:	68fb      	ldr	r3, [r7, #12]
 80038a8:	681b      	ldr	r3, [r3, #0]
 80038aa:	f103 020c 	add.w	r2, r3, #12
 80038ae:	68fb      	ldr	r3, [r7, #12]
 80038b0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80038b2:	7812      	ldrb	r2, [r2, #0]
 80038b4:	b2d2      	uxtb	r2, r2
 80038b6:	701a      	strb	r2, [r3, #0]
          hspi->pRxBuffPtr++;
 80038b8:	68fb      	ldr	r3, [r7, #12]
 80038ba:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80038bc:	1c5a      	adds	r2, r3, #1
 80038be:	68fb      	ldr	r3, [r7, #12]
 80038c0:	641a      	str	r2, [r3, #64]	; 0x40
          hspi->RxXferCount--;
 80038c2:	68fb      	ldr	r3, [r7, #12]
 80038c4:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 80038c8:	b29b      	uxth	r3, r3
 80038ca:	3b01      	subs	r3, #1
 80038cc:	b29a      	uxth	r2, r3
 80038ce:	68fb      	ldr	r3, [r7, #12]
 80038d0:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
        }
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 80038d4:	2301      	movs	r3, #1
 80038d6:	627b      	str	r3, [r7, #36]	; 0x24
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 80038d8:	f7fd fab8 	bl	8000e4c <HAL_GetTick>
 80038dc:	4602      	mov	r2, r0
 80038de:	69fb      	ldr	r3, [r7, #28]
 80038e0:	1ad3      	subs	r3, r2, r3
 80038e2:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80038e4:	429a      	cmp	r2, r3
 80038e6:	d803      	bhi.n	80038f0 <HAL_SPI_TransmitReceive+0x3c2>
 80038e8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80038ea:	f1b3 3fff 	cmp.w	r3, #4294967295
 80038ee:	d102      	bne.n	80038f6 <HAL_SPI_TransmitReceive+0x3c8>
 80038f0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80038f2:	2b00      	cmp	r3, #0
 80038f4:	d103      	bne.n	80038fe <HAL_SPI_TransmitReceive+0x3d0>
      {
        errorcode = HAL_TIMEOUT;
 80038f6:	2303      	movs	r3, #3
 80038f8:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
        goto error;
 80038fc:	e01c      	b.n	8003938 <HAL_SPI_TransmitReceive+0x40a>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 80038fe:	68fb      	ldr	r3, [r7, #12]
 8003900:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003902:	b29b      	uxth	r3, r3
 8003904:	2b00      	cmp	r3, #0
 8003906:	f47f af5b 	bne.w	80037c0 <HAL_SPI_TransmitReceive+0x292>
 800390a:	68fb      	ldr	r3, [r7, #12]
 800390c:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8003910:	b29b      	uxth	r3, r3
 8003912:	2b00      	cmp	r3, #0
 8003914:	f47f af54 	bne.w	80037c0 <HAL_SPI_TransmitReceive+0x292>
    errorcode = HAL_ERROR;
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8003918:	69fa      	ldr	r2, [r7, #28]
 800391a:	6b39      	ldr	r1, [r7, #48]	; 0x30
 800391c:	68f8      	ldr	r0, [r7, #12]
 800391e:	f000 f937 	bl	8003b90 <SPI_EndRxTxTransaction>
 8003922:	4603      	mov	r3, r0
 8003924:	2b00      	cmp	r3, #0
 8003926:	d006      	beq.n	8003936 <HAL_SPI_TransmitReceive+0x408>
  {
    errorcode = HAL_ERROR;
 8003928:	2301      	movs	r3, #1
 800392a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 800392e:	68fb      	ldr	r3, [r7, #12]
 8003930:	2220      	movs	r2, #32
 8003932:	661a      	str	r2, [r3, #96]	; 0x60
 8003934:	e000      	b.n	8003938 <HAL_SPI_TransmitReceive+0x40a>
  }

error :
 8003936:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 8003938:	68fb      	ldr	r3, [r7, #12]
 800393a:	2201      	movs	r2, #1
 800393c:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  __HAL_UNLOCK(hspi);
 8003940:	68fb      	ldr	r3, [r7, #12]
 8003942:	2200      	movs	r2, #0
 8003944:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c
  return errorcode;
 8003948:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
}
 800394c:	4618      	mov	r0, r3
 800394e:	3728      	adds	r7, #40	; 0x28
 8003950:	46bd      	mov	sp, r7
 8003952:	bd80      	pop	{r7, pc}

08003954 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8003954:	b580      	push	{r7, lr}
 8003956:	b088      	sub	sp, #32
 8003958:	af00      	add	r7, sp, #0
 800395a:	60f8      	str	r0, [r7, #12]
 800395c:	60b9      	str	r1, [r7, #8]
 800395e:	603b      	str	r3, [r7, #0]
 8003960:	4613      	mov	r3, r2
 8003962:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 8003964:	f7fd fa72 	bl	8000e4c <HAL_GetTick>
 8003968:	4602      	mov	r2, r0
 800396a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800396c:	1a9b      	subs	r3, r3, r2
 800396e:	683a      	ldr	r2, [r7, #0]
 8003970:	4413      	add	r3, r2
 8003972:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 8003974:	f7fd fa6a 	bl	8000e4c <HAL_GetTick>
 8003978:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 800397a:	4b39      	ldr	r3, [pc, #228]	; (8003a60 <SPI_WaitFlagStateUntilTimeout+0x10c>)
 800397c:	681b      	ldr	r3, [r3, #0]
 800397e:	015b      	lsls	r3, r3, #5
 8003980:	0d1b      	lsrs	r3, r3, #20
 8003982:	69fa      	ldr	r2, [r7, #28]
 8003984:	fb02 f303 	mul.w	r3, r2, r3
 8003988:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 800398a:	e054      	b.n	8003a36 <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 800398c:	683b      	ldr	r3, [r7, #0]
 800398e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003992:	d050      	beq.n	8003a36 <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8003994:	f7fd fa5a 	bl	8000e4c <HAL_GetTick>
 8003998:	4602      	mov	r2, r0
 800399a:	69bb      	ldr	r3, [r7, #24]
 800399c:	1ad3      	subs	r3, r2, r3
 800399e:	69fa      	ldr	r2, [r7, #28]
 80039a0:	429a      	cmp	r2, r3
 80039a2:	d902      	bls.n	80039aa <SPI_WaitFlagStateUntilTimeout+0x56>
 80039a4:	69fb      	ldr	r3, [r7, #28]
 80039a6:	2b00      	cmp	r3, #0
 80039a8:	d13d      	bne.n	8003a26 <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 80039aa:	68fb      	ldr	r3, [r7, #12]
 80039ac:	681b      	ldr	r3, [r3, #0]
 80039ae:	685a      	ldr	r2, [r3, #4]
 80039b0:	68fb      	ldr	r3, [r7, #12]
 80039b2:	681b      	ldr	r3, [r3, #0]
 80039b4:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 80039b8:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80039ba:	68fb      	ldr	r3, [r7, #12]
 80039bc:	685b      	ldr	r3, [r3, #4]
 80039be:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80039c2:	d111      	bne.n	80039e8 <SPI_WaitFlagStateUntilTimeout+0x94>
 80039c4:	68fb      	ldr	r3, [r7, #12]
 80039c6:	689b      	ldr	r3, [r3, #8]
 80039c8:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80039cc:	d004      	beq.n	80039d8 <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 80039ce:	68fb      	ldr	r3, [r7, #12]
 80039d0:	689b      	ldr	r3, [r3, #8]
 80039d2:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80039d6:	d107      	bne.n	80039e8 <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 80039d8:	68fb      	ldr	r3, [r7, #12]
 80039da:	681b      	ldr	r3, [r3, #0]
 80039dc:	681a      	ldr	r2, [r3, #0]
 80039de:	68fb      	ldr	r3, [r7, #12]
 80039e0:	681b      	ldr	r3, [r3, #0]
 80039e2:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80039e6:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 80039e8:	68fb      	ldr	r3, [r7, #12]
 80039ea:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80039ec:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80039f0:	d10f      	bne.n	8003a12 <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 80039f2:	68fb      	ldr	r3, [r7, #12]
 80039f4:	681b      	ldr	r3, [r3, #0]
 80039f6:	681a      	ldr	r2, [r3, #0]
 80039f8:	68fb      	ldr	r3, [r7, #12]
 80039fa:	681b      	ldr	r3, [r3, #0]
 80039fc:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8003a00:	601a      	str	r2, [r3, #0]
 8003a02:	68fb      	ldr	r3, [r7, #12]
 8003a04:	681b      	ldr	r3, [r3, #0]
 8003a06:	681a      	ldr	r2, [r3, #0]
 8003a08:	68fb      	ldr	r3, [r7, #12]
 8003a0a:	681b      	ldr	r3, [r3, #0]
 8003a0c:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8003a10:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8003a12:	68fb      	ldr	r3, [r7, #12]
 8003a14:	2201      	movs	r2, #1
 8003a16:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8003a1a:	68fb      	ldr	r3, [r7, #12]
 8003a1c:	2200      	movs	r2, #0
 8003a1e:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

        return HAL_TIMEOUT;
 8003a22:	2303      	movs	r3, #3
 8003a24:	e017      	b.n	8003a56 <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if(count == 0U)
 8003a26:	697b      	ldr	r3, [r7, #20]
 8003a28:	2b00      	cmp	r3, #0
 8003a2a:	d101      	bne.n	8003a30 <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 8003a2c:	2300      	movs	r3, #0
 8003a2e:	61fb      	str	r3, [r7, #28]
      }
      count--;
 8003a30:	697b      	ldr	r3, [r7, #20]
 8003a32:	3b01      	subs	r3, #1
 8003a34:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8003a36:	68fb      	ldr	r3, [r7, #12]
 8003a38:	681b      	ldr	r3, [r3, #0]
 8003a3a:	689a      	ldr	r2, [r3, #8]
 8003a3c:	68bb      	ldr	r3, [r7, #8]
 8003a3e:	4013      	ands	r3, r2
 8003a40:	68ba      	ldr	r2, [r7, #8]
 8003a42:	429a      	cmp	r2, r3
 8003a44:	bf0c      	ite	eq
 8003a46:	2301      	moveq	r3, #1
 8003a48:	2300      	movne	r3, #0
 8003a4a:	b2db      	uxtb	r3, r3
 8003a4c:	461a      	mov	r2, r3
 8003a4e:	79fb      	ldrb	r3, [r7, #7]
 8003a50:	429a      	cmp	r2, r3
 8003a52:	d19b      	bne.n	800398c <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 8003a54:	2300      	movs	r3, #0
}
 8003a56:	4618      	mov	r0, r3
 8003a58:	3720      	adds	r7, #32
 8003a5a:	46bd      	mov	sp, r7
 8003a5c:	bd80      	pop	{r7, pc}
 8003a5e:	bf00      	nop
 8003a60:	20000000 	.word	0x20000000

08003a64 <SPI_WaitFifoStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFifoStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Fifo, uint32_t State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8003a64:	b580      	push	{r7, lr}
 8003a66:	b08a      	sub	sp, #40	; 0x28
 8003a68:	af00      	add	r7, sp, #0
 8003a6a:	60f8      	str	r0, [r7, #12]
 8003a6c:	60b9      	str	r1, [r7, #8]
 8003a6e:	607a      	str	r2, [r7, #4]
 8003a70:	603b      	str	r3, [r7, #0]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;
  __IO uint8_t  * ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
 8003a72:	2300      	movs	r3, #0
 8003a74:	75fb      	strb	r3, [r7, #23]

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout = Timeout - (HAL_GetTick() - Tickstart);
 8003a76:	f7fd f9e9 	bl	8000e4c <HAL_GetTick>
 8003a7a:	4602      	mov	r2, r0
 8003a7c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003a7e:	1a9b      	subs	r3, r3, r2
 8003a80:	683a      	ldr	r2, [r7, #0]
 8003a82:	4413      	add	r3, r2
 8003a84:	627b      	str	r3, [r7, #36]	; 0x24
  tmp_tickstart = HAL_GetTick();
 8003a86:	f7fd f9e1 	bl	8000e4c <HAL_GetTick>
 8003a8a:	6238      	str	r0, [r7, #32]

  /* Initialize the 8bit temporary pointer */
  ptmpreg8 = (__IO uint8_t *)&hspi->Instance->DR;
 8003a8c:	68fb      	ldr	r3, [r7, #12]
 8003a8e:	681b      	ldr	r3, [r3, #0]
 8003a90:	330c      	adds	r3, #12
 8003a92:	61fb      	str	r3, [r7, #28]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 35U) >> 20U);
 8003a94:	4b3d      	ldr	r3, [pc, #244]	; (8003b8c <SPI_WaitFifoStateUntilTimeout+0x128>)
 8003a96:	681a      	ldr	r2, [r3, #0]
 8003a98:	4613      	mov	r3, r2
 8003a9a:	009b      	lsls	r3, r3, #2
 8003a9c:	4413      	add	r3, r2
 8003a9e:	00da      	lsls	r2, r3, #3
 8003aa0:	1ad3      	subs	r3, r2, r3
 8003aa2:	0d1b      	lsrs	r3, r3, #20
 8003aa4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003aa6:	fb02 f303 	mul.w	r3, r2, r3
 8003aaa:	61bb      	str	r3, [r7, #24]

  while ((hspi->Instance->SR & Fifo) != State)
 8003aac:	e060      	b.n	8003b70 <SPI_WaitFifoStateUntilTimeout+0x10c>
  {
    if ((Fifo == SPI_SR_FRLVL) && (State == SPI_FRLVL_EMPTY))
 8003aae:	68bb      	ldr	r3, [r7, #8]
 8003ab0:	f5b3 6fc0 	cmp.w	r3, #1536	; 0x600
 8003ab4:	d107      	bne.n	8003ac6 <SPI_WaitFifoStateUntilTimeout+0x62>
 8003ab6:	687b      	ldr	r3, [r7, #4]
 8003ab8:	2b00      	cmp	r3, #0
 8003aba:	d104      	bne.n	8003ac6 <SPI_WaitFifoStateUntilTimeout+0x62>
    {
      /* Flush Data Register by a blank read */
      tmpreg8 = *ptmpreg8;
 8003abc:	69fb      	ldr	r3, [r7, #28]
 8003abe:	781b      	ldrb	r3, [r3, #0]
 8003ac0:	b2db      	uxtb	r3, r3
 8003ac2:	75fb      	strb	r3, [r7, #23]
      /* To avoid GCC warning */
      UNUSED(tmpreg8);
 8003ac4:	7dfb      	ldrb	r3, [r7, #23]
    }

    if (Timeout != HAL_MAX_DELAY)
 8003ac6:	683b      	ldr	r3, [r7, #0]
 8003ac8:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003acc:	d050      	beq.n	8003b70 <SPI_WaitFifoStateUntilTimeout+0x10c>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8003ace:	f7fd f9bd 	bl	8000e4c <HAL_GetTick>
 8003ad2:	4602      	mov	r2, r0
 8003ad4:	6a3b      	ldr	r3, [r7, #32]
 8003ad6:	1ad3      	subs	r3, r2, r3
 8003ad8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003ada:	429a      	cmp	r2, r3
 8003adc:	d902      	bls.n	8003ae4 <SPI_WaitFifoStateUntilTimeout+0x80>
 8003ade:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003ae0:	2b00      	cmp	r3, #0
 8003ae2:	d13d      	bne.n	8003b60 <SPI_WaitFifoStateUntilTimeout+0xfc>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8003ae4:	68fb      	ldr	r3, [r7, #12]
 8003ae6:	681b      	ldr	r3, [r3, #0]
 8003ae8:	685a      	ldr	r2, [r3, #4]
 8003aea:	68fb      	ldr	r3, [r7, #12]
 8003aec:	681b      	ldr	r3, [r3, #0]
 8003aee:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 8003af2:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8003af4:	68fb      	ldr	r3, [r7, #12]
 8003af6:	685b      	ldr	r3, [r3, #4]
 8003af8:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8003afc:	d111      	bne.n	8003b22 <SPI_WaitFifoStateUntilTimeout+0xbe>
 8003afe:	68fb      	ldr	r3, [r7, #12]
 8003b00:	689b      	ldr	r3, [r3, #8]
 8003b02:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8003b06:	d004      	beq.n	8003b12 <SPI_WaitFifoStateUntilTimeout+0xae>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8003b08:	68fb      	ldr	r3, [r7, #12]
 8003b0a:	689b      	ldr	r3, [r3, #8]
 8003b0c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003b10:	d107      	bne.n	8003b22 <SPI_WaitFifoStateUntilTimeout+0xbe>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8003b12:	68fb      	ldr	r3, [r7, #12]
 8003b14:	681b      	ldr	r3, [r3, #0]
 8003b16:	681a      	ldr	r2, [r3, #0]
 8003b18:	68fb      	ldr	r3, [r7, #12]
 8003b1a:	681b      	ldr	r3, [r3, #0]
 8003b1c:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8003b20:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8003b22:	68fb      	ldr	r3, [r7, #12]
 8003b24:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003b26:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003b2a:	d10f      	bne.n	8003b4c <SPI_WaitFifoStateUntilTimeout+0xe8>
        {
          SPI_RESET_CRC(hspi);
 8003b2c:	68fb      	ldr	r3, [r7, #12]
 8003b2e:	681b      	ldr	r3, [r3, #0]
 8003b30:	681a      	ldr	r2, [r3, #0]
 8003b32:	68fb      	ldr	r3, [r7, #12]
 8003b34:	681b      	ldr	r3, [r3, #0]
 8003b36:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8003b3a:	601a      	str	r2, [r3, #0]
 8003b3c:	68fb      	ldr	r3, [r7, #12]
 8003b3e:	681b      	ldr	r3, [r3, #0]
 8003b40:	681a      	ldr	r2, [r3, #0]
 8003b42:	68fb      	ldr	r3, [r7, #12]
 8003b44:	681b      	ldr	r3, [r3, #0]
 8003b46:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8003b4a:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8003b4c:	68fb      	ldr	r3, [r7, #12]
 8003b4e:	2201      	movs	r2, #1
 8003b50:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8003b54:	68fb      	ldr	r3, [r7, #12]
 8003b56:	2200      	movs	r2, #0
 8003b58:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

        return HAL_TIMEOUT;
 8003b5c:	2303      	movs	r3, #3
 8003b5e:	e010      	b.n	8003b82 <SPI_WaitFifoStateUntilTimeout+0x11e>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if(count == 0U)
 8003b60:	69bb      	ldr	r3, [r7, #24]
 8003b62:	2b00      	cmp	r3, #0
 8003b64:	d101      	bne.n	8003b6a <SPI_WaitFifoStateUntilTimeout+0x106>
      {
        tmp_timeout = 0U;
 8003b66:	2300      	movs	r3, #0
 8003b68:	627b      	str	r3, [r7, #36]	; 0x24
      }      
      count--;
 8003b6a:	69bb      	ldr	r3, [r7, #24]
 8003b6c:	3b01      	subs	r3, #1
 8003b6e:	61bb      	str	r3, [r7, #24]
  while ((hspi->Instance->SR & Fifo) != State)
 8003b70:	68fb      	ldr	r3, [r7, #12]
 8003b72:	681b      	ldr	r3, [r3, #0]
 8003b74:	689a      	ldr	r2, [r3, #8]
 8003b76:	68bb      	ldr	r3, [r7, #8]
 8003b78:	4013      	ands	r3, r2
 8003b7a:	687a      	ldr	r2, [r7, #4]
 8003b7c:	429a      	cmp	r2, r3
 8003b7e:	d196      	bne.n	8003aae <SPI_WaitFifoStateUntilTimeout+0x4a>
    }
  }

  return HAL_OK;
 8003b80:	2300      	movs	r3, #0
}
 8003b82:	4618      	mov	r0, r3
 8003b84:	3728      	adds	r7, #40	; 0x28
 8003b86:	46bd      	mov	sp, r7
 8003b88:	bd80      	pop	{r7, pc}
 8003b8a:	bf00      	nop
 8003b8c:	20000000 	.word	0x20000000

08003b90 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8003b90:	b580      	push	{r7, lr}
 8003b92:	b086      	sub	sp, #24
 8003b94:	af02      	add	r7, sp, #8
 8003b96:	60f8      	str	r0, [r7, #12]
 8003b98:	60b9      	str	r1, [r7, #8]
 8003b9a:	607a      	str	r2, [r7, #4]
  /* Control if the TX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FTLVL, SPI_FTLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 8003b9c:	687b      	ldr	r3, [r7, #4]
 8003b9e:	9300      	str	r3, [sp, #0]
 8003ba0:	68bb      	ldr	r3, [r7, #8]
 8003ba2:	2200      	movs	r2, #0
 8003ba4:	f44f 51c0 	mov.w	r1, #6144	; 0x1800
 8003ba8:	68f8      	ldr	r0, [r7, #12]
 8003baa:	f7ff ff5b 	bl	8003a64 <SPI_WaitFifoStateUntilTimeout>
 8003bae:	4603      	mov	r3, r0
 8003bb0:	2b00      	cmp	r3, #0
 8003bb2:	d007      	beq.n	8003bc4 <SPI_EndRxTxTransaction+0x34>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8003bb4:	68fb      	ldr	r3, [r7, #12]
 8003bb6:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003bb8:	f043 0220 	orr.w	r2, r3, #32
 8003bbc:	68fb      	ldr	r3, [r7, #12]
 8003bbe:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 8003bc0:	2303      	movs	r3, #3
 8003bc2:	e027      	b.n	8003c14 <SPI_EndRxTxTransaction+0x84>
  }

  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8003bc4:	687b      	ldr	r3, [r7, #4]
 8003bc6:	9300      	str	r3, [sp, #0]
 8003bc8:	68bb      	ldr	r3, [r7, #8]
 8003bca:	2200      	movs	r2, #0
 8003bcc:	2180      	movs	r1, #128	; 0x80
 8003bce:	68f8      	ldr	r0, [r7, #12]
 8003bd0:	f7ff fec0 	bl	8003954 <SPI_WaitFlagStateUntilTimeout>
 8003bd4:	4603      	mov	r3, r0
 8003bd6:	2b00      	cmp	r3, #0
 8003bd8:	d007      	beq.n	8003bea <SPI_EndRxTxTransaction+0x5a>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8003bda:	68fb      	ldr	r3, [r7, #12]
 8003bdc:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003bde:	f043 0220 	orr.w	r2, r3, #32
 8003be2:	68fb      	ldr	r3, [r7, #12]
 8003be4:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 8003be6:	2303      	movs	r3, #3
 8003be8:	e014      	b.n	8003c14 <SPI_EndRxTxTransaction+0x84>
  }

  /* Control if the RX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FRLVL, SPI_FRLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 8003bea:	687b      	ldr	r3, [r7, #4]
 8003bec:	9300      	str	r3, [sp, #0]
 8003bee:	68bb      	ldr	r3, [r7, #8]
 8003bf0:	2200      	movs	r2, #0
 8003bf2:	f44f 61c0 	mov.w	r1, #1536	; 0x600
 8003bf6:	68f8      	ldr	r0, [r7, #12]
 8003bf8:	f7ff ff34 	bl	8003a64 <SPI_WaitFifoStateUntilTimeout>
 8003bfc:	4603      	mov	r3, r0
 8003bfe:	2b00      	cmp	r3, #0
 8003c00:	d007      	beq.n	8003c12 <SPI_EndRxTxTransaction+0x82>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8003c02:	68fb      	ldr	r3, [r7, #12]
 8003c04:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003c06:	f043 0220 	orr.w	r2, r3, #32
 8003c0a:	68fb      	ldr	r3, [r7, #12]
 8003c0c:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 8003c0e:	2303      	movs	r3, #3
 8003c10:	e000      	b.n	8003c14 <SPI_EndRxTxTransaction+0x84>
  }

  return HAL_OK;
 8003c12:	2300      	movs	r3, #0
}
 8003c14:	4618      	mov	r0, r3
 8003c16:	3710      	adds	r7, #16
 8003c18:	46bd      	mov	sp, r7
 8003c1a:	bd80      	pop	{r7, pc}

08003c1c <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8003c1c:	b580      	push	{r7, lr}
 8003c1e:	b082      	sub	sp, #8
 8003c20:	af00      	add	r7, sp, #0
 8003c22:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8003c24:	687b      	ldr	r3, [r7, #4]
 8003c26:	2b00      	cmp	r3, #0
 8003c28:	d101      	bne.n	8003c2e <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8003c2a:	2301      	movs	r3, #1
 8003c2c:	e041      	b.n	8003cb2 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8003c2e:	687b      	ldr	r3, [r7, #4]
 8003c30:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003c34:	b2db      	uxtb	r3, r3
 8003c36:	2b00      	cmp	r3, #0
 8003c38:	d106      	bne.n	8003c48 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8003c3a:	687b      	ldr	r3, [r7, #4]
 8003c3c:	2200      	movs	r2, #0
 8003c3e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8003c42:	6878      	ldr	r0, [r7, #4]
 8003c44:	f7fc ff5a 	bl	8000afc <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003c48:	687b      	ldr	r3, [r7, #4]
 8003c4a:	2202      	movs	r2, #2
 8003c4c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8003c50:	687b      	ldr	r3, [r7, #4]
 8003c52:	681a      	ldr	r2, [r3, #0]
 8003c54:	687b      	ldr	r3, [r7, #4]
 8003c56:	3304      	adds	r3, #4
 8003c58:	4619      	mov	r1, r3
 8003c5a:	4610      	mov	r0, r2
 8003c5c:	f000 fa2e 	bl	80040bc <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8003c60:	687b      	ldr	r3, [r7, #4]
 8003c62:	2201      	movs	r2, #1
 8003c64:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003c68:	687b      	ldr	r3, [r7, #4]
 8003c6a:	2201      	movs	r2, #1
 8003c6c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8003c70:	687b      	ldr	r3, [r7, #4]
 8003c72:	2201      	movs	r2, #1
 8003c74:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8003c78:	687b      	ldr	r3, [r7, #4]
 8003c7a:	2201      	movs	r2, #1
 8003c7c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8003c80:	687b      	ldr	r3, [r7, #4]
 8003c82:	2201      	movs	r2, #1
 8003c84:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003c88:	687b      	ldr	r3, [r7, #4]
 8003c8a:	2201      	movs	r2, #1
 8003c8c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8003c90:	687b      	ldr	r3, [r7, #4]
 8003c92:	2201      	movs	r2, #1
 8003c94:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8003c98:	687b      	ldr	r3, [r7, #4]
 8003c9a:	2201      	movs	r2, #1
 8003c9c:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8003ca0:	687b      	ldr	r3, [r7, #4]
 8003ca2:	2201      	movs	r2, #1
 8003ca4:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8003ca8:	687b      	ldr	r3, [r7, #4]
 8003caa:	2201      	movs	r2, #1
 8003cac:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8003cb0:	2300      	movs	r3, #0
}
 8003cb2:	4618      	mov	r0, r3
 8003cb4:	3708      	adds	r7, #8
 8003cb6:	46bd      	mov	sp, r7
 8003cb8:	bd80      	pop	{r7, pc}

08003cba <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8003cba:	b580      	push	{r7, lr}
 8003cbc:	b082      	sub	sp, #8
 8003cbe:	af00      	add	r7, sp, #0
 8003cc0:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8003cc2:	687b      	ldr	r3, [r7, #4]
 8003cc4:	681b      	ldr	r3, [r3, #0]
 8003cc6:	691b      	ldr	r3, [r3, #16]
 8003cc8:	f003 0302 	and.w	r3, r3, #2
 8003ccc:	2b02      	cmp	r3, #2
 8003cce:	d122      	bne.n	8003d16 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8003cd0:	687b      	ldr	r3, [r7, #4]
 8003cd2:	681b      	ldr	r3, [r3, #0]
 8003cd4:	68db      	ldr	r3, [r3, #12]
 8003cd6:	f003 0302 	and.w	r3, r3, #2
 8003cda:	2b02      	cmp	r3, #2
 8003cdc:	d11b      	bne.n	8003d16 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8003cde:	687b      	ldr	r3, [r7, #4]
 8003ce0:	681b      	ldr	r3, [r3, #0]
 8003ce2:	f06f 0202 	mvn.w	r2, #2
 8003ce6:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8003ce8:	687b      	ldr	r3, [r7, #4]
 8003cea:	2201      	movs	r2, #1
 8003cec:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8003cee:	687b      	ldr	r3, [r7, #4]
 8003cf0:	681b      	ldr	r3, [r3, #0]
 8003cf2:	699b      	ldr	r3, [r3, #24]
 8003cf4:	f003 0303 	and.w	r3, r3, #3
 8003cf8:	2b00      	cmp	r3, #0
 8003cfa:	d003      	beq.n	8003d04 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8003cfc:	6878      	ldr	r0, [r7, #4]
 8003cfe:	f000 f9bf 	bl	8004080 <HAL_TIM_IC_CaptureCallback>
 8003d02:	e005      	b.n	8003d10 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8003d04:	6878      	ldr	r0, [r7, #4]
 8003d06:	f000 f9b1 	bl	800406c <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003d0a:	6878      	ldr	r0, [r7, #4]
 8003d0c:	f000 f9c2 	bl	8004094 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003d10:	687b      	ldr	r3, [r7, #4]
 8003d12:	2200      	movs	r2, #0
 8003d14:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8003d16:	687b      	ldr	r3, [r7, #4]
 8003d18:	681b      	ldr	r3, [r3, #0]
 8003d1a:	691b      	ldr	r3, [r3, #16]
 8003d1c:	f003 0304 	and.w	r3, r3, #4
 8003d20:	2b04      	cmp	r3, #4
 8003d22:	d122      	bne.n	8003d6a <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8003d24:	687b      	ldr	r3, [r7, #4]
 8003d26:	681b      	ldr	r3, [r3, #0]
 8003d28:	68db      	ldr	r3, [r3, #12]
 8003d2a:	f003 0304 	and.w	r3, r3, #4
 8003d2e:	2b04      	cmp	r3, #4
 8003d30:	d11b      	bne.n	8003d6a <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8003d32:	687b      	ldr	r3, [r7, #4]
 8003d34:	681b      	ldr	r3, [r3, #0]
 8003d36:	f06f 0204 	mvn.w	r2, #4
 8003d3a:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8003d3c:	687b      	ldr	r3, [r7, #4]
 8003d3e:	2202      	movs	r2, #2
 8003d40:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8003d42:	687b      	ldr	r3, [r7, #4]
 8003d44:	681b      	ldr	r3, [r3, #0]
 8003d46:	699b      	ldr	r3, [r3, #24]
 8003d48:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003d4c:	2b00      	cmp	r3, #0
 8003d4e:	d003      	beq.n	8003d58 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003d50:	6878      	ldr	r0, [r7, #4]
 8003d52:	f000 f995 	bl	8004080 <HAL_TIM_IC_CaptureCallback>
 8003d56:	e005      	b.n	8003d64 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003d58:	6878      	ldr	r0, [r7, #4]
 8003d5a:	f000 f987 	bl	800406c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003d5e:	6878      	ldr	r0, [r7, #4]
 8003d60:	f000 f998 	bl	8004094 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003d64:	687b      	ldr	r3, [r7, #4]
 8003d66:	2200      	movs	r2, #0
 8003d68:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8003d6a:	687b      	ldr	r3, [r7, #4]
 8003d6c:	681b      	ldr	r3, [r3, #0]
 8003d6e:	691b      	ldr	r3, [r3, #16]
 8003d70:	f003 0308 	and.w	r3, r3, #8
 8003d74:	2b08      	cmp	r3, #8
 8003d76:	d122      	bne.n	8003dbe <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8003d78:	687b      	ldr	r3, [r7, #4]
 8003d7a:	681b      	ldr	r3, [r3, #0]
 8003d7c:	68db      	ldr	r3, [r3, #12]
 8003d7e:	f003 0308 	and.w	r3, r3, #8
 8003d82:	2b08      	cmp	r3, #8
 8003d84:	d11b      	bne.n	8003dbe <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8003d86:	687b      	ldr	r3, [r7, #4]
 8003d88:	681b      	ldr	r3, [r3, #0]
 8003d8a:	f06f 0208 	mvn.w	r2, #8
 8003d8e:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8003d90:	687b      	ldr	r3, [r7, #4]
 8003d92:	2204      	movs	r2, #4
 8003d94:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8003d96:	687b      	ldr	r3, [r7, #4]
 8003d98:	681b      	ldr	r3, [r3, #0]
 8003d9a:	69db      	ldr	r3, [r3, #28]
 8003d9c:	f003 0303 	and.w	r3, r3, #3
 8003da0:	2b00      	cmp	r3, #0
 8003da2:	d003      	beq.n	8003dac <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003da4:	6878      	ldr	r0, [r7, #4]
 8003da6:	f000 f96b 	bl	8004080 <HAL_TIM_IC_CaptureCallback>
 8003daa:	e005      	b.n	8003db8 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003dac:	6878      	ldr	r0, [r7, #4]
 8003dae:	f000 f95d 	bl	800406c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003db2:	6878      	ldr	r0, [r7, #4]
 8003db4:	f000 f96e 	bl	8004094 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003db8:	687b      	ldr	r3, [r7, #4]
 8003dba:	2200      	movs	r2, #0
 8003dbc:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8003dbe:	687b      	ldr	r3, [r7, #4]
 8003dc0:	681b      	ldr	r3, [r3, #0]
 8003dc2:	691b      	ldr	r3, [r3, #16]
 8003dc4:	f003 0310 	and.w	r3, r3, #16
 8003dc8:	2b10      	cmp	r3, #16
 8003dca:	d122      	bne.n	8003e12 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8003dcc:	687b      	ldr	r3, [r7, #4]
 8003dce:	681b      	ldr	r3, [r3, #0]
 8003dd0:	68db      	ldr	r3, [r3, #12]
 8003dd2:	f003 0310 	and.w	r3, r3, #16
 8003dd6:	2b10      	cmp	r3, #16
 8003dd8:	d11b      	bne.n	8003e12 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8003dda:	687b      	ldr	r3, [r7, #4]
 8003ddc:	681b      	ldr	r3, [r3, #0]
 8003dde:	f06f 0210 	mvn.w	r2, #16
 8003de2:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8003de4:	687b      	ldr	r3, [r7, #4]
 8003de6:	2208      	movs	r2, #8
 8003de8:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8003dea:	687b      	ldr	r3, [r7, #4]
 8003dec:	681b      	ldr	r3, [r3, #0]
 8003dee:	69db      	ldr	r3, [r3, #28]
 8003df0:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003df4:	2b00      	cmp	r3, #0
 8003df6:	d003      	beq.n	8003e00 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003df8:	6878      	ldr	r0, [r7, #4]
 8003dfa:	f000 f941 	bl	8004080 <HAL_TIM_IC_CaptureCallback>
 8003dfe:	e005      	b.n	8003e0c <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003e00:	6878      	ldr	r0, [r7, #4]
 8003e02:	f000 f933 	bl	800406c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003e06:	6878      	ldr	r0, [r7, #4]
 8003e08:	f000 f944 	bl	8004094 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003e0c:	687b      	ldr	r3, [r7, #4]
 8003e0e:	2200      	movs	r2, #0
 8003e10:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8003e12:	687b      	ldr	r3, [r7, #4]
 8003e14:	681b      	ldr	r3, [r3, #0]
 8003e16:	691b      	ldr	r3, [r3, #16]
 8003e18:	f003 0301 	and.w	r3, r3, #1
 8003e1c:	2b01      	cmp	r3, #1
 8003e1e:	d10e      	bne.n	8003e3e <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8003e20:	687b      	ldr	r3, [r7, #4]
 8003e22:	681b      	ldr	r3, [r3, #0]
 8003e24:	68db      	ldr	r3, [r3, #12]
 8003e26:	f003 0301 	and.w	r3, r3, #1
 8003e2a:	2b01      	cmp	r3, #1
 8003e2c:	d107      	bne.n	8003e3e <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8003e2e:	687b      	ldr	r3, [r7, #4]
 8003e30:	681b      	ldr	r3, [r3, #0]
 8003e32:	f06f 0201 	mvn.w	r2, #1
 8003e36:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8003e38:	6878      	ldr	r0, [r7, #4]
 8003e3a:	f000 f90d 	bl	8004058 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8003e3e:	687b      	ldr	r3, [r7, #4]
 8003e40:	681b      	ldr	r3, [r3, #0]
 8003e42:	691b      	ldr	r3, [r3, #16]
 8003e44:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003e48:	2b80      	cmp	r3, #128	; 0x80
 8003e4a:	d10e      	bne.n	8003e6a <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8003e4c:	687b      	ldr	r3, [r7, #4]
 8003e4e:	681b      	ldr	r3, [r3, #0]
 8003e50:	68db      	ldr	r3, [r3, #12]
 8003e52:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003e56:	2b80      	cmp	r3, #128	; 0x80
 8003e58:	d107      	bne.n	8003e6a <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8003e5a:	687b      	ldr	r3, [r7, #4]
 8003e5c:	681b      	ldr	r3, [r3, #0]
 8003e5e:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8003e62:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8003e64:	6878      	ldr	r0, [r7, #4]
 8003e66:	f000 fadb 	bl	8004420 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
#endif /* TIM_BDTR_BK2E */
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8003e6a:	687b      	ldr	r3, [r7, #4]
 8003e6c:	681b      	ldr	r3, [r3, #0]
 8003e6e:	691b      	ldr	r3, [r3, #16]
 8003e70:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003e74:	2b40      	cmp	r3, #64	; 0x40
 8003e76:	d10e      	bne.n	8003e96 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8003e78:	687b      	ldr	r3, [r7, #4]
 8003e7a:	681b      	ldr	r3, [r3, #0]
 8003e7c:	68db      	ldr	r3, [r3, #12]
 8003e7e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003e82:	2b40      	cmp	r3, #64	; 0x40
 8003e84:	d107      	bne.n	8003e96 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8003e86:	687b      	ldr	r3, [r7, #4]
 8003e88:	681b      	ldr	r3, [r3, #0]
 8003e8a:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8003e8e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8003e90:	6878      	ldr	r0, [r7, #4]
 8003e92:	f000 f909 	bl	80040a8 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8003e96:	687b      	ldr	r3, [r7, #4]
 8003e98:	681b      	ldr	r3, [r3, #0]
 8003e9a:	691b      	ldr	r3, [r3, #16]
 8003e9c:	f003 0320 	and.w	r3, r3, #32
 8003ea0:	2b20      	cmp	r3, #32
 8003ea2:	d10e      	bne.n	8003ec2 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8003ea4:	687b      	ldr	r3, [r7, #4]
 8003ea6:	681b      	ldr	r3, [r3, #0]
 8003ea8:	68db      	ldr	r3, [r3, #12]
 8003eaa:	f003 0320 	and.w	r3, r3, #32
 8003eae:	2b20      	cmp	r3, #32
 8003eb0:	d107      	bne.n	8003ec2 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8003eb2:	687b      	ldr	r3, [r7, #4]
 8003eb4:	681b      	ldr	r3, [r3, #0]
 8003eb6:	f06f 0220 	mvn.w	r2, #32
 8003eba:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8003ebc:	6878      	ldr	r0, [r7, #4]
 8003ebe:	f000 faa5 	bl	800440c <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8003ec2:	bf00      	nop
 8003ec4:	3708      	adds	r7, #8
 8003ec6:	46bd      	mov	sp, r7
 8003ec8:	bd80      	pop	{r7, pc}

08003eca <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8003eca:	b580      	push	{r7, lr}
 8003ecc:	b084      	sub	sp, #16
 8003ece:	af00      	add	r7, sp, #0
 8003ed0:	6078      	str	r0, [r7, #4]
 8003ed2:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8003ed4:	2300      	movs	r3, #0
 8003ed6:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8003ed8:	687b      	ldr	r3, [r7, #4]
 8003eda:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003ede:	2b01      	cmp	r3, #1
 8003ee0:	d101      	bne.n	8003ee6 <HAL_TIM_ConfigClockSource+0x1c>
 8003ee2:	2302      	movs	r3, #2
 8003ee4:	e0b4      	b.n	8004050 <HAL_TIM_ConfigClockSource+0x186>
 8003ee6:	687b      	ldr	r3, [r7, #4]
 8003ee8:	2201      	movs	r2, #1
 8003eea:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8003eee:	687b      	ldr	r3, [r7, #4]
 8003ef0:	2202      	movs	r2, #2
 8003ef2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8003ef6:	687b      	ldr	r3, [r7, #4]
 8003ef8:	681b      	ldr	r3, [r3, #0]
 8003efa:	689b      	ldr	r3, [r3, #8]
 8003efc:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8003efe:	68bb      	ldr	r3, [r7, #8]
 8003f00:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 8003f04:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8003f06:	68bb      	ldr	r3, [r7, #8]
 8003f08:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8003f0c:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8003f0e:	687b      	ldr	r3, [r7, #4]
 8003f10:	681b      	ldr	r3, [r3, #0]
 8003f12:	68ba      	ldr	r2, [r7, #8]
 8003f14:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8003f16:	683b      	ldr	r3, [r7, #0]
 8003f18:	681b      	ldr	r3, [r3, #0]
 8003f1a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003f1e:	d03e      	beq.n	8003f9e <HAL_TIM_ConfigClockSource+0xd4>
 8003f20:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003f24:	f200 8087 	bhi.w	8004036 <HAL_TIM_ConfigClockSource+0x16c>
 8003f28:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003f2c:	f000 8086 	beq.w	800403c <HAL_TIM_ConfigClockSource+0x172>
 8003f30:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003f34:	d87f      	bhi.n	8004036 <HAL_TIM_ConfigClockSource+0x16c>
 8003f36:	2b70      	cmp	r3, #112	; 0x70
 8003f38:	d01a      	beq.n	8003f70 <HAL_TIM_ConfigClockSource+0xa6>
 8003f3a:	2b70      	cmp	r3, #112	; 0x70
 8003f3c:	d87b      	bhi.n	8004036 <HAL_TIM_ConfigClockSource+0x16c>
 8003f3e:	2b60      	cmp	r3, #96	; 0x60
 8003f40:	d050      	beq.n	8003fe4 <HAL_TIM_ConfigClockSource+0x11a>
 8003f42:	2b60      	cmp	r3, #96	; 0x60
 8003f44:	d877      	bhi.n	8004036 <HAL_TIM_ConfigClockSource+0x16c>
 8003f46:	2b50      	cmp	r3, #80	; 0x50
 8003f48:	d03c      	beq.n	8003fc4 <HAL_TIM_ConfigClockSource+0xfa>
 8003f4a:	2b50      	cmp	r3, #80	; 0x50
 8003f4c:	d873      	bhi.n	8004036 <HAL_TIM_ConfigClockSource+0x16c>
 8003f4e:	2b40      	cmp	r3, #64	; 0x40
 8003f50:	d058      	beq.n	8004004 <HAL_TIM_ConfigClockSource+0x13a>
 8003f52:	2b40      	cmp	r3, #64	; 0x40
 8003f54:	d86f      	bhi.n	8004036 <HAL_TIM_ConfigClockSource+0x16c>
 8003f56:	2b30      	cmp	r3, #48	; 0x30
 8003f58:	d064      	beq.n	8004024 <HAL_TIM_ConfigClockSource+0x15a>
 8003f5a:	2b30      	cmp	r3, #48	; 0x30
 8003f5c:	d86b      	bhi.n	8004036 <HAL_TIM_ConfigClockSource+0x16c>
 8003f5e:	2b20      	cmp	r3, #32
 8003f60:	d060      	beq.n	8004024 <HAL_TIM_ConfigClockSource+0x15a>
 8003f62:	2b20      	cmp	r3, #32
 8003f64:	d867      	bhi.n	8004036 <HAL_TIM_ConfigClockSource+0x16c>
 8003f66:	2b00      	cmp	r3, #0
 8003f68:	d05c      	beq.n	8004024 <HAL_TIM_ConfigClockSource+0x15a>
 8003f6a:	2b10      	cmp	r3, #16
 8003f6c:	d05a      	beq.n	8004024 <HAL_TIM_ConfigClockSource+0x15a>
 8003f6e:	e062      	b.n	8004036 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8003f70:	687b      	ldr	r3, [r7, #4]
 8003f72:	6818      	ldr	r0, [r3, #0]
 8003f74:	683b      	ldr	r3, [r7, #0]
 8003f76:	6899      	ldr	r1, [r3, #8]
 8003f78:	683b      	ldr	r3, [r7, #0]
 8003f7a:	685a      	ldr	r2, [r3, #4]
 8003f7c:	683b      	ldr	r3, [r7, #0]
 8003f7e:	68db      	ldr	r3, [r3, #12]
 8003f80:	f000 f9b0 	bl	80042e4 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8003f84:	687b      	ldr	r3, [r7, #4]
 8003f86:	681b      	ldr	r3, [r3, #0]
 8003f88:	689b      	ldr	r3, [r3, #8]
 8003f8a:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8003f8c:	68bb      	ldr	r3, [r7, #8]
 8003f8e:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8003f92:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8003f94:	687b      	ldr	r3, [r7, #4]
 8003f96:	681b      	ldr	r3, [r3, #0]
 8003f98:	68ba      	ldr	r2, [r7, #8]
 8003f9a:	609a      	str	r2, [r3, #8]
      break;
 8003f9c:	e04f      	b.n	800403e <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8003f9e:	687b      	ldr	r3, [r7, #4]
 8003fa0:	6818      	ldr	r0, [r3, #0]
 8003fa2:	683b      	ldr	r3, [r7, #0]
 8003fa4:	6899      	ldr	r1, [r3, #8]
 8003fa6:	683b      	ldr	r3, [r7, #0]
 8003fa8:	685a      	ldr	r2, [r3, #4]
 8003faa:	683b      	ldr	r3, [r7, #0]
 8003fac:	68db      	ldr	r3, [r3, #12]
 8003fae:	f000 f999 	bl	80042e4 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8003fb2:	687b      	ldr	r3, [r7, #4]
 8003fb4:	681b      	ldr	r3, [r3, #0]
 8003fb6:	689a      	ldr	r2, [r3, #8]
 8003fb8:	687b      	ldr	r3, [r7, #4]
 8003fba:	681b      	ldr	r3, [r3, #0]
 8003fbc:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8003fc0:	609a      	str	r2, [r3, #8]
      break;
 8003fc2:	e03c      	b.n	800403e <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8003fc4:	687b      	ldr	r3, [r7, #4]
 8003fc6:	6818      	ldr	r0, [r3, #0]
 8003fc8:	683b      	ldr	r3, [r7, #0]
 8003fca:	6859      	ldr	r1, [r3, #4]
 8003fcc:	683b      	ldr	r3, [r7, #0]
 8003fce:	68db      	ldr	r3, [r3, #12]
 8003fd0:	461a      	mov	r2, r3
 8003fd2:	f000 f90d 	bl	80041f0 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8003fd6:	687b      	ldr	r3, [r7, #4]
 8003fd8:	681b      	ldr	r3, [r3, #0]
 8003fda:	2150      	movs	r1, #80	; 0x50
 8003fdc:	4618      	mov	r0, r3
 8003fde:	f000 f966 	bl	80042ae <TIM_ITRx_SetConfig>
      break;
 8003fe2:	e02c      	b.n	800403e <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8003fe4:	687b      	ldr	r3, [r7, #4]
 8003fe6:	6818      	ldr	r0, [r3, #0]
 8003fe8:	683b      	ldr	r3, [r7, #0]
 8003fea:	6859      	ldr	r1, [r3, #4]
 8003fec:	683b      	ldr	r3, [r7, #0]
 8003fee:	68db      	ldr	r3, [r3, #12]
 8003ff0:	461a      	mov	r2, r3
 8003ff2:	f000 f92c 	bl	800424e <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8003ff6:	687b      	ldr	r3, [r7, #4]
 8003ff8:	681b      	ldr	r3, [r3, #0]
 8003ffa:	2160      	movs	r1, #96	; 0x60
 8003ffc:	4618      	mov	r0, r3
 8003ffe:	f000 f956 	bl	80042ae <TIM_ITRx_SetConfig>
      break;
 8004002:	e01c      	b.n	800403e <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8004004:	687b      	ldr	r3, [r7, #4]
 8004006:	6818      	ldr	r0, [r3, #0]
 8004008:	683b      	ldr	r3, [r7, #0]
 800400a:	6859      	ldr	r1, [r3, #4]
 800400c:	683b      	ldr	r3, [r7, #0]
 800400e:	68db      	ldr	r3, [r3, #12]
 8004010:	461a      	mov	r2, r3
 8004012:	f000 f8ed 	bl	80041f0 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8004016:	687b      	ldr	r3, [r7, #4]
 8004018:	681b      	ldr	r3, [r3, #0]
 800401a:	2140      	movs	r1, #64	; 0x40
 800401c:	4618      	mov	r0, r3
 800401e:	f000 f946 	bl	80042ae <TIM_ITRx_SetConfig>
      break;
 8004022:	e00c      	b.n	800403e <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8004024:	687b      	ldr	r3, [r7, #4]
 8004026:	681a      	ldr	r2, [r3, #0]
 8004028:	683b      	ldr	r3, [r7, #0]
 800402a:	681b      	ldr	r3, [r3, #0]
 800402c:	4619      	mov	r1, r3
 800402e:	4610      	mov	r0, r2
 8004030:	f000 f93d 	bl	80042ae <TIM_ITRx_SetConfig>
      break;
 8004034:	e003      	b.n	800403e <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 8004036:	2301      	movs	r3, #1
 8004038:	73fb      	strb	r3, [r7, #15]
      break;
 800403a:	e000      	b.n	800403e <HAL_TIM_ConfigClockSource+0x174>
      break;
 800403c:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 800403e:	687b      	ldr	r3, [r7, #4]
 8004040:	2201      	movs	r2, #1
 8004042:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8004046:	687b      	ldr	r3, [r7, #4]
 8004048:	2200      	movs	r2, #0
 800404a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 800404e:	7bfb      	ldrb	r3, [r7, #15]
}
 8004050:	4618      	mov	r0, r3
 8004052:	3710      	adds	r7, #16
 8004054:	46bd      	mov	sp, r7
 8004056:	bd80      	pop	{r7, pc}

08004058 <HAL_TIM_PeriodElapsedCallback>:
  * @brief  Period elapsed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8004058:	b480      	push	{r7}
 800405a:	b083      	sub	sp, #12
 800405c:	af00      	add	r7, sp, #0
 800405e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PeriodElapsedCallback could be implemented in the user file
   */
}
 8004060:	bf00      	nop
 8004062:	370c      	adds	r7, #12
 8004064:	46bd      	mov	sp, r7
 8004066:	f85d 7b04 	ldr.w	r7, [sp], #4
 800406a:	4770      	bx	lr

0800406c <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 800406c:	b480      	push	{r7}
 800406e:	b083      	sub	sp, #12
 8004070:	af00      	add	r7, sp, #0
 8004072:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8004074:	bf00      	nop
 8004076:	370c      	adds	r7, #12
 8004078:	46bd      	mov	sp, r7
 800407a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800407e:	4770      	bx	lr

08004080 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8004080:	b480      	push	{r7}
 8004082:	b083      	sub	sp, #12
 8004084:	af00      	add	r7, sp, #0
 8004086:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8004088:	bf00      	nop
 800408a:	370c      	adds	r7, #12
 800408c:	46bd      	mov	sp, r7
 800408e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004092:	4770      	bx	lr

08004094 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8004094:	b480      	push	{r7}
 8004096:	b083      	sub	sp, #12
 8004098:	af00      	add	r7, sp, #0
 800409a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 800409c:	bf00      	nop
 800409e:	370c      	adds	r7, #12
 80040a0:	46bd      	mov	sp, r7
 80040a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80040a6:	4770      	bx	lr

080040a8 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 80040a8:	b480      	push	{r7}
 80040aa:	b083      	sub	sp, #12
 80040ac:	af00      	add	r7, sp, #0
 80040ae:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 80040b0:	bf00      	nop
 80040b2:	370c      	adds	r7, #12
 80040b4:	46bd      	mov	sp, r7
 80040b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80040ba:	4770      	bx	lr

080040bc <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 80040bc:	b480      	push	{r7}
 80040be:	b085      	sub	sp, #20
 80040c0:	af00      	add	r7, sp, #0
 80040c2:	6078      	str	r0, [r7, #4]
 80040c4:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80040c6:	687b      	ldr	r3, [r7, #4]
 80040c8:	681b      	ldr	r3, [r3, #0]
 80040ca:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80040cc:	687b      	ldr	r3, [r7, #4]
 80040ce:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80040d2:	d00f      	beq.n	80040f4 <TIM_Base_SetConfig+0x38>
 80040d4:	687b      	ldr	r3, [r7, #4]
 80040d6:	4a3c      	ldr	r2, [pc, #240]	; (80041c8 <TIM_Base_SetConfig+0x10c>)
 80040d8:	4293      	cmp	r3, r2
 80040da:	d00b      	beq.n	80040f4 <TIM_Base_SetConfig+0x38>
 80040dc:	687b      	ldr	r3, [r7, #4]
 80040de:	4a3b      	ldr	r2, [pc, #236]	; (80041cc <TIM_Base_SetConfig+0x110>)
 80040e0:	4293      	cmp	r3, r2
 80040e2:	d007      	beq.n	80040f4 <TIM_Base_SetConfig+0x38>
 80040e4:	687b      	ldr	r3, [r7, #4]
 80040e6:	4a3a      	ldr	r2, [pc, #232]	; (80041d0 <TIM_Base_SetConfig+0x114>)
 80040e8:	4293      	cmp	r3, r2
 80040ea:	d003      	beq.n	80040f4 <TIM_Base_SetConfig+0x38>
 80040ec:	687b      	ldr	r3, [r7, #4]
 80040ee:	4a39      	ldr	r2, [pc, #228]	; (80041d4 <TIM_Base_SetConfig+0x118>)
 80040f0:	4293      	cmp	r3, r2
 80040f2:	d108      	bne.n	8004106 <TIM_Base_SetConfig+0x4a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80040f4:	68fb      	ldr	r3, [r7, #12]
 80040f6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80040fa:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80040fc:	683b      	ldr	r3, [r7, #0]
 80040fe:	685b      	ldr	r3, [r3, #4]
 8004100:	68fa      	ldr	r2, [r7, #12]
 8004102:	4313      	orrs	r3, r2
 8004104:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8004106:	687b      	ldr	r3, [r7, #4]
 8004108:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800410c:	d027      	beq.n	800415e <TIM_Base_SetConfig+0xa2>
 800410e:	687b      	ldr	r3, [r7, #4]
 8004110:	4a2d      	ldr	r2, [pc, #180]	; (80041c8 <TIM_Base_SetConfig+0x10c>)
 8004112:	4293      	cmp	r3, r2
 8004114:	d023      	beq.n	800415e <TIM_Base_SetConfig+0xa2>
 8004116:	687b      	ldr	r3, [r7, #4]
 8004118:	4a2c      	ldr	r2, [pc, #176]	; (80041cc <TIM_Base_SetConfig+0x110>)
 800411a:	4293      	cmp	r3, r2
 800411c:	d01f      	beq.n	800415e <TIM_Base_SetConfig+0xa2>
 800411e:	687b      	ldr	r3, [r7, #4]
 8004120:	4a2b      	ldr	r2, [pc, #172]	; (80041d0 <TIM_Base_SetConfig+0x114>)
 8004122:	4293      	cmp	r3, r2
 8004124:	d01b      	beq.n	800415e <TIM_Base_SetConfig+0xa2>
 8004126:	687b      	ldr	r3, [r7, #4]
 8004128:	4a2b      	ldr	r2, [pc, #172]	; (80041d8 <TIM_Base_SetConfig+0x11c>)
 800412a:	4293      	cmp	r3, r2
 800412c:	d017      	beq.n	800415e <TIM_Base_SetConfig+0xa2>
 800412e:	687b      	ldr	r3, [r7, #4]
 8004130:	4a2a      	ldr	r2, [pc, #168]	; (80041dc <TIM_Base_SetConfig+0x120>)
 8004132:	4293      	cmp	r3, r2
 8004134:	d013      	beq.n	800415e <TIM_Base_SetConfig+0xa2>
 8004136:	687b      	ldr	r3, [r7, #4]
 8004138:	4a29      	ldr	r2, [pc, #164]	; (80041e0 <TIM_Base_SetConfig+0x124>)
 800413a:	4293      	cmp	r3, r2
 800413c:	d00f      	beq.n	800415e <TIM_Base_SetConfig+0xa2>
 800413e:	687b      	ldr	r3, [r7, #4]
 8004140:	4a28      	ldr	r2, [pc, #160]	; (80041e4 <TIM_Base_SetConfig+0x128>)
 8004142:	4293      	cmp	r3, r2
 8004144:	d00b      	beq.n	800415e <TIM_Base_SetConfig+0xa2>
 8004146:	687b      	ldr	r3, [r7, #4]
 8004148:	4a27      	ldr	r2, [pc, #156]	; (80041e8 <TIM_Base_SetConfig+0x12c>)
 800414a:	4293      	cmp	r3, r2
 800414c:	d007      	beq.n	800415e <TIM_Base_SetConfig+0xa2>
 800414e:	687b      	ldr	r3, [r7, #4]
 8004150:	4a26      	ldr	r2, [pc, #152]	; (80041ec <TIM_Base_SetConfig+0x130>)
 8004152:	4293      	cmp	r3, r2
 8004154:	d003      	beq.n	800415e <TIM_Base_SetConfig+0xa2>
 8004156:	687b      	ldr	r3, [r7, #4]
 8004158:	4a1e      	ldr	r2, [pc, #120]	; (80041d4 <TIM_Base_SetConfig+0x118>)
 800415a:	4293      	cmp	r3, r2
 800415c:	d108      	bne.n	8004170 <TIM_Base_SetConfig+0xb4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800415e:	68fb      	ldr	r3, [r7, #12]
 8004160:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004164:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8004166:	683b      	ldr	r3, [r7, #0]
 8004168:	68db      	ldr	r3, [r3, #12]
 800416a:	68fa      	ldr	r2, [r7, #12]
 800416c:	4313      	orrs	r3, r2
 800416e:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8004170:	68fb      	ldr	r3, [r7, #12]
 8004172:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8004176:	683b      	ldr	r3, [r7, #0]
 8004178:	695b      	ldr	r3, [r3, #20]
 800417a:	4313      	orrs	r3, r2
 800417c:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800417e:	687b      	ldr	r3, [r7, #4]
 8004180:	68fa      	ldr	r2, [r7, #12]
 8004182:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8004184:	683b      	ldr	r3, [r7, #0]
 8004186:	689a      	ldr	r2, [r3, #8]
 8004188:	687b      	ldr	r3, [r7, #4]
 800418a:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800418c:	683b      	ldr	r3, [r7, #0]
 800418e:	681a      	ldr	r2, [r3, #0]
 8004190:	687b      	ldr	r3, [r7, #4]
 8004192:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8004194:	687b      	ldr	r3, [r7, #4]
 8004196:	4a13      	ldr	r2, [pc, #76]	; (80041e4 <TIM_Base_SetConfig+0x128>)
 8004198:	4293      	cmp	r3, r2
 800419a:	d007      	beq.n	80041ac <TIM_Base_SetConfig+0xf0>
 800419c:	687b      	ldr	r3, [r7, #4]
 800419e:	4a12      	ldr	r2, [pc, #72]	; (80041e8 <TIM_Base_SetConfig+0x12c>)
 80041a0:	4293      	cmp	r3, r2
 80041a2:	d003      	beq.n	80041ac <TIM_Base_SetConfig+0xf0>
 80041a4:	687b      	ldr	r3, [r7, #4]
 80041a6:	4a11      	ldr	r2, [pc, #68]	; (80041ec <TIM_Base_SetConfig+0x130>)
 80041a8:	4293      	cmp	r3, r2
 80041aa:	d103      	bne.n	80041b4 <TIM_Base_SetConfig+0xf8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80041ac:	683b      	ldr	r3, [r7, #0]
 80041ae:	691a      	ldr	r2, [r3, #16]
 80041b0:	687b      	ldr	r3, [r7, #4]
 80041b2:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80041b4:	687b      	ldr	r3, [r7, #4]
 80041b6:	2201      	movs	r2, #1
 80041b8:	615a      	str	r2, [r3, #20]
}
 80041ba:	bf00      	nop
 80041bc:	3714      	adds	r7, #20
 80041be:	46bd      	mov	sp, r7
 80041c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80041c4:	4770      	bx	lr
 80041c6:	bf00      	nop
 80041c8:	40000400 	.word	0x40000400
 80041cc:	40000800 	.word	0x40000800
 80041d0:	40000c00 	.word	0x40000c00
 80041d4:	40015c00 	.word	0x40015c00
 80041d8:	40001800 	.word	0x40001800
 80041dc:	40001c00 	.word	0x40001c00
 80041e0:	40002000 	.word	0x40002000
 80041e4:	40014000 	.word	0x40014000
 80041e8:	40014400 	.word	0x40014400
 80041ec:	40014800 	.word	0x40014800

080041f0 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80041f0:	b480      	push	{r7}
 80041f2:	b087      	sub	sp, #28
 80041f4:	af00      	add	r7, sp, #0
 80041f6:	60f8      	str	r0, [r7, #12]
 80041f8:	60b9      	str	r1, [r7, #8]
 80041fa:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 80041fc:	68fb      	ldr	r3, [r7, #12]
 80041fe:	6a1b      	ldr	r3, [r3, #32]
 8004200:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8004202:	68fb      	ldr	r3, [r7, #12]
 8004204:	6a1b      	ldr	r3, [r3, #32]
 8004206:	f023 0201 	bic.w	r2, r3, #1
 800420a:	68fb      	ldr	r3, [r7, #12]
 800420c:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800420e:	68fb      	ldr	r3, [r7, #12]
 8004210:	699b      	ldr	r3, [r3, #24]
 8004212:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8004214:	693b      	ldr	r3, [r7, #16]
 8004216:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800421a:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 800421c:	687b      	ldr	r3, [r7, #4]
 800421e:	011b      	lsls	r3, r3, #4
 8004220:	693a      	ldr	r2, [r7, #16]
 8004222:	4313      	orrs	r3, r2
 8004224:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8004226:	697b      	ldr	r3, [r7, #20]
 8004228:	f023 030a 	bic.w	r3, r3, #10
 800422c:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 800422e:	697a      	ldr	r2, [r7, #20]
 8004230:	68bb      	ldr	r3, [r7, #8]
 8004232:	4313      	orrs	r3, r2
 8004234:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8004236:	68fb      	ldr	r3, [r7, #12]
 8004238:	693a      	ldr	r2, [r7, #16]
 800423a:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800423c:	68fb      	ldr	r3, [r7, #12]
 800423e:	697a      	ldr	r2, [r7, #20]
 8004240:	621a      	str	r2, [r3, #32]
}
 8004242:	bf00      	nop
 8004244:	371c      	adds	r7, #28
 8004246:	46bd      	mov	sp, r7
 8004248:	f85d 7b04 	ldr.w	r7, [sp], #4
 800424c:	4770      	bx	lr

0800424e <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800424e:	b480      	push	{r7}
 8004250:	b087      	sub	sp, #28
 8004252:	af00      	add	r7, sp, #0
 8004254:	60f8      	str	r0, [r7, #12]
 8004256:	60b9      	str	r1, [r7, #8]
 8004258:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800425a:	68fb      	ldr	r3, [r7, #12]
 800425c:	6a1b      	ldr	r3, [r3, #32]
 800425e:	f023 0210 	bic.w	r2, r3, #16
 8004262:	68fb      	ldr	r3, [r7, #12]
 8004264:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8004266:	68fb      	ldr	r3, [r7, #12]
 8004268:	699b      	ldr	r3, [r3, #24]
 800426a:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 800426c:	68fb      	ldr	r3, [r7, #12]
 800426e:	6a1b      	ldr	r3, [r3, #32]
 8004270:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8004272:	697b      	ldr	r3, [r7, #20]
 8004274:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8004278:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 800427a:	687b      	ldr	r3, [r7, #4]
 800427c:	031b      	lsls	r3, r3, #12
 800427e:	697a      	ldr	r2, [r7, #20]
 8004280:	4313      	orrs	r3, r2
 8004282:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8004284:	693b      	ldr	r3, [r7, #16]
 8004286:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 800428a:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 800428c:	68bb      	ldr	r3, [r7, #8]
 800428e:	011b      	lsls	r3, r3, #4
 8004290:	693a      	ldr	r2, [r7, #16]
 8004292:	4313      	orrs	r3, r2
 8004294:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8004296:	68fb      	ldr	r3, [r7, #12]
 8004298:	697a      	ldr	r2, [r7, #20]
 800429a:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800429c:	68fb      	ldr	r3, [r7, #12]
 800429e:	693a      	ldr	r2, [r7, #16]
 80042a0:	621a      	str	r2, [r3, #32]
}
 80042a2:	bf00      	nop
 80042a4:	371c      	adds	r7, #28
 80042a6:	46bd      	mov	sp, r7
 80042a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80042ac:	4770      	bx	lr

080042ae <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 80042ae:	b480      	push	{r7}
 80042b0:	b085      	sub	sp, #20
 80042b2:	af00      	add	r7, sp, #0
 80042b4:	6078      	str	r0, [r7, #4]
 80042b6:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 80042b8:	687b      	ldr	r3, [r7, #4]
 80042ba:	689b      	ldr	r3, [r3, #8]
 80042bc:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 80042be:	68fb      	ldr	r3, [r7, #12]
 80042c0:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80042c4:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 80042c6:	683a      	ldr	r2, [r7, #0]
 80042c8:	68fb      	ldr	r3, [r7, #12]
 80042ca:	4313      	orrs	r3, r2
 80042cc:	f043 0307 	orr.w	r3, r3, #7
 80042d0:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80042d2:	687b      	ldr	r3, [r7, #4]
 80042d4:	68fa      	ldr	r2, [r7, #12]
 80042d6:	609a      	str	r2, [r3, #8]
}
 80042d8:	bf00      	nop
 80042da:	3714      	adds	r7, #20
 80042dc:	46bd      	mov	sp, r7
 80042de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80042e2:	4770      	bx	lr

080042e4 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 80042e4:	b480      	push	{r7}
 80042e6:	b087      	sub	sp, #28
 80042e8:	af00      	add	r7, sp, #0
 80042ea:	60f8      	str	r0, [r7, #12]
 80042ec:	60b9      	str	r1, [r7, #8]
 80042ee:	607a      	str	r2, [r7, #4]
 80042f0:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 80042f2:	68fb      	ldr	r3, [r7, #12]
 80042f4:	689b      	ldr	r3, [r3, #8]
 80042f6:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80042f8:	697b      	ldr	r3, [r7, #20]
 80042fa:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 80042fe:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8004300:	683b      	ldr	r3, [r7, #0]
 8004302:	021a      	lsls	r2, r3, #8
 8004304:	687b      	ldr	r3, [r7, #4]
 8004306:	431a      	orrs	r2, r3
 8004308:	68bb      	ldr	r3, [r7, #8]
 800430a:	4313      	orrs	r3, r2
 800430c:	697a      	ldr	r2, [r7, #20]
 800430e:	4313      	orrs	r3, r2
 8004310:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8004312:	68fb      	ldr	r3, [r7, #12]
 8004314:	697a      	ldr	r2, [r7, #20]
 8004316:	609a      	str	r2, [r3, #8]
}
 8004318:	bf00      	nop
 800431a:	371c      	adds	r7, #28
 800431c:	46bd      	mov	sp, r7
 800431e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004322:	4770      	bx	lr

08004324 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8004324:	b480      	push	{r7}
 8004326:	b085      	sub	sp, #20
 8004328:	af00      	add	r7, sp, #0
 800432a:	6078      	str	r0, [r7, #4]
 800432c:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800432e:	687b      	ldr	r3, [r7, #4]
 8004330:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004334:	2b01      	cmp	r3, #1
 8004336:	d101      	bne.n	800433c <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8004338:	2302      	movs	r3, #2
 800433a:	e055      	b.n	80043e8 <HAL_TIMEx_MasterConfigSynchronization+0xc4>
 800433c:	687b      	ldr	r3, [r7, #4]
 800433e:	2201      	movs	r2, #1
 8004340:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004344:	687b      	ldr	r3, [r7, #4]
 8004346:	2202      	movs	r2, #2
 8004348:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 800434c:	687b      	ldr	r3, [r7, #4]
 800434e:	681b      	ldr	r3, [r3, #0]
 8004350:	685b      	ldr	r3, [r3, #4]
 8004352:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8004354:	687b      	ldr	r3, [r7, #4]
 8004356:	681b      	ldr	r3, [r3, #0]
 8004358:	689b      	ldr	r3, [r3, #8]
 800435a:	60bb      	str	r3, [r7, #8]
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
  }
#endif /* TIM_CR2_MMS2 */

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 800435c:	68fb      	ldr	r3, [r7, #12]
 800435e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004362:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8004364:	683b      	ldr	r3, [r7, #0]
 8004366:	681b      	ldr	r3, [r3, #0]
 8004368:	68fa      	ldr	r2, [r7, #12]
 800436a:	4313      	orrs	r3, r2
 800436c:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800436e:	687b      	ldr	r3, [r7, #4]
 8004370:	681b      	ldr	r3, [r3, #0]
 8004372:	68fa      	ldr	r2, [r7, #12]
 8004374:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8004376:	687b      	ldr	r3, [r7, #4]
 8004378:	681b      	ldr	r3, [r3, #0]
 800437a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800437e:	d01d      	beq.n	80043bc <HAL_TIMEx_MasterConfigSynchronization+0x98>
 8004380:	687b      	ldr	r3, [r7, #4]
 8004382:	681b      	ldr	r3, [r3, #0]
 8004384:	4a1b      	ldr	r2, [pc, #108]	; (80043f4 <HAL_TIMEx_MasterConfigSynchronization+0xd0>)
 8004386:	4293      	cmp	r3, r2
 8004388:	d018      	beq.n	80043bc <HAL_TIMEx_MasterConfigSynchronization+0x98>
 800438a:	687b      	ldr	r3, [r7, #4]
 800438c:	681b      	ldr	r3, [r3, #0]
 800438e:	4a1a      	ldr	r2, [pc, #104]	; (80043f8 <HAL_TIMEx_MasterConfigSynchronization+0xd4>)
 8004390:	4293      	cmp	r3, r2
 8004392:	d013      	beq.n	80043bc <HAL_TIMEx_MasterConfigSynchronization+0x98>
 8004394:	687b      	ldr	r3, [r7, #4]
 8004396:	681b      	ldr	r3, [r3, #0]
 8004398:	4a18      	ldr	r2, [pc, #96]	; (80043fc <HAL_TIMEx_MasterConfigSynchronization+0xd8>)
 800439a:	4293      	cmp	r3, r2
 800439c:	d00e      	beq.n	80043bc <HAL_TIMEx_MasterConfigSynchronization+0x98>
 800439e:	687b      	ldr	r3, [r7, #4]
 80043a0:	681b      	ldr	r3, [r3, #0]
 80043a2:	4a17      	ldr	r2, [pc, #92]	; (8004400 <HAL_TIMEx_MasterConfigSynchronization+0xdc>)
 80043a4:	4293      	cmp	r3, r2
 80043a6:	d009      	beq.n	80043bc <HAL_TIMEx_MasterConfigSynchronization+0x98>
 80043a8:	687b      	ldr	r3, [r7, #4]
 80043aa:	681b      	ldr	r3, [r3, #0]
 80043ac:	4a15      	ldr	r2, [pc, #84]	; (8004404 <HAL_TIMEx_MasterConfigSynchronization+0xe0>)
 80043ae:	4293      	cmp	r3, r2
 80043b0:	d004      	beq.n	80043bc <HAL_TIMEx_MasterConfigSynchronization+0x98>
 80043b2:	687b      	ldr	r3, [r7, #4]
 80043b4:	681b      	ldr	r3, [r3, #0]
 80043b6:	4a14      	ldr	r2, [pc, #80]	; (8004408 <HAL_TIMEx_MasterConfigSynchronization+0xe4>)
 80043b8:	4293      	cmp	r3, r2
 80043ba:	d10c      	bne.n	80043d6 <HAL_TIMEx_MasterConfigSynchronization+0xb2>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 80043bc:	68bb      	ldr	r3, [r7, #8]
 80043be:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80043c2:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 80043c4:	683b      	ldr	r3, [r7, #0]
 80043c6:	685b      	ldr	r3, [r3, #4]
 80043c8:	68ba      	ldr	r2, [r7, #8]
 80043ca:	4313      	orrs	r3, r2
 80043cc:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 80043ce:	687b      	ldr	r3, [r7, #4]
 80043d0:	681b      	ldr	r3, [r3, #0]
 80043d2:	68ba      	ldr	r2, [r7, #8]
 80043d4:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 80043d6:	687b      	ldr	r3, [r7, #4]
 80043d8:	2201      	movs	r2, #1
 80043da:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80043de:	687b      	ldr	r3, [r7, #4]
 80043e0:	2200      	movs	r2, #0
 80043e2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80043e6:	2300      	movs	r3, #0
}
 80043e8:	4618      	mov	r0, r3
 80043ea:	3714      	adds	r7, #20
 80043ec:	46bd      	mov	sp, r7
 80043ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80043f2:	4770      	bx	lr
 80043f4:	40000400 	.word	0x40000400
 80043f8:	40000800 	.word	0x40000800
 80043fc:	40000c00 	.word	0x40000c00
 8004400:	40001800 	.word	0x40001800
 8004404:	40014000 	.word	0x40014000
 8004408:	40015c00 	.word	0x40015c00

0800440c <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 800440c:	b480      	push	{r7}
 800440e:	b083      	sub	sp, #12
 8004410:	af00      	add	r7, sp, #0
 8004412:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8004414:	bf00      	nop
 8004416:	370c      	adds	r7, #12
 8004418:	46bd      	mov	sp, r7
 800441a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800441e:	4770      	bx	lr

08004420 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8004420:	b480      	push	{r7}
 8004422:	b083      	sub	sp, #12
 8004424:	af00      	add	r7, sp, #0
 8004426:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8004428:	bf00      	nop
 800442a:	370c      	adds	r7, #12
 800442c:	46bd      	mov	sp, r7
 800442e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004432:	4770      	bx	lr

08004434 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8004434:	b580      	push	{r7, lr}
 8004436:	b082      	sub	sp, #8
 8004438:	af00      	add	r7, sp, #0
 800443a:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800443c:	687b      	ldr	r3, [r7, #4]
 800443e:	2b00      	cmp	r3, #0
 8004440:	d101      	bne.n	8004446 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8004442:	2301      	movs	r3, #1
 8004444:	e040      	b.n	80044c8 <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8004446:	687b      	ldr	r3, [r7, #4]
 8004448:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800444a:	2b00      	cmp	r3, #0
 800444c:	d106      	bne.n	800445c <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800444e:	687b      	ldr	r3, [r7, #4]
 8004450:	2200      	movs	r2, #0
 8004452:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8004456:	6878      	ldr	r0, [r7, #4]
 8004458:	f7fc fba6 	bl	8000ba8 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800445c:	687b      	ldr	r3, [r7, #4]
 800445e:	2224      	movs	r2, #36	; 0x24
 8004460:	679a      	str	r2, [r3, #120]	; 0x78

  __HAL_UART_DISABLE(huart);
 8004462:	687b      	ldr	r3, [r7, #4]
 8004464:	681b      	ldr	r3, [r3, #0]
 8004466:	681a      	ldr	r2, [r3, #0]
 8004468:	687b      	ldr	r3, [r7, #4]
 800446a:	681b      	ldr	r3, [r3, #0]
 800446c:	f022 0201 	bic.w	r2, r2, #1
 8004470:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8004472:	6878      	ldr	r0, [r7, #4]
 8004474:	f000 fb8e 	bl	8004b94 <UART_SetConfig>
 8004478:	4603      	mov	r3, r0
 800447a:	2b01      	cmp	r3, #1
 800447c:	d101      	bne.n	8004482 <HAL_UART_Init+0x4e>
  {
    return HAL_ERROR;
 800447e:	2301      	movs	r3, #1
 8004480:	e022      	b.n	80044c8 <HAL_UART_Init+0x94>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8004482:	687b      	ldr	r3, [r7, #4]
 8004484:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004486:	2b00      	cmp	r3, #0
 8004488:	d002      	beq.n	8004490 <HAL_UART_Init+0x5c>
  {
    UART_AdvFeatureConfig(huart);
 800448a:	6878      	ldr	r0, [r7, #4]
 800448c:	f000 fcfc 	bl	8004e88 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8004490:	687b      	ldr	r3, [r7, #4]
 8004492:	681b      	ldr	r3, [r3, #0]
 8004494:	685a      	ldr	r2, [r3, #4]
 8004496:	687b      	ldr	r3, [r7, #4]
 8004498:	681b      	ldr	r3, [r3, #0]
 800449a:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 800449e:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80044a0:	687b      	ldr	r3, [r7, #4]
 80044a2:	681b      	ldr	r3, [r3, #0]
 80044a4:	689a      	ldr	r2, [r3, #8]
 80044a6:	687b      	ldr	r3, [r7, #4]
 80044a8:	681b      	ldr	r3, [r3, #0]
 80044aa:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 80044ae:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 80044b0:	687b      	ldr	r3, [r7, #4]
 80044b2:	681b      	ldr	r3, [r3, #0]
 80044b4:	681a      	ldr	r2, [r3, #0]
 80044b6:	687b      	ldr	r3, [r7, #4]
 80044b8:	681b      	ldr	r3, [r3, #0]
 80044ba:	f042 0201 	orr.w	r2, r2, #1
 80044be:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 80044c0:	6878      	ldr	r0, [r7, #4]
 80044c2:	f000 fd83 	bl	8004fcc <UART_CheckIdleState>
 80044c6:	4603      	mov	r3, r0
}
 80044c8:	4618      	mov	r0, r3
 80044ca:	3708      	adds	r7, #8
 80044cc:	46bd      	mov	sp, r7
 80044ce:	bd80      	pop	{r7, pc}

080044d0 <HAL_UART_Transmit_IT>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be sent.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 80044d0:	b480      	push	{r7}
 80044d2:	b08b      	sub	sp, #44	; 0x2c
 80044d4:	af00      	add	r7, sp, #0
 80044d6:	60f8      	str	r0, [r7, #12]
 80044d8:	60b9      	str	r1, [r7, #8]
 80044da:	4613      	mov	r3, r2
 80044dc:	80fb      	strh	r3, [r7, #6]
  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 80044de:	68fb      	ldr	r3, [r7, #12]
 80044e0:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80044e2:	2b20      	cmp	r3, #32
 80044e4:	d156      	bne.n	8004594 <HAL_UART_Transmit_IT+0xc4>
  {
    if ((pData == NULL) || (Size == 0U))
 80044e6:	68bb      	ldr	r3, [r7, #8]
 80044e8:	2b00      	cmp	r3, #0
 80044ea:	d002      	beq.n	80044f2 <HAL_UART_Transmit_IT+0x22>
 80044ec:	88fb      	ldrh	r3, [r7, #6]
 80044ee:	2b00      	cmp	r3, #0
 80044f0:	d101      	bne.n	80044f6 <HAL_UART_Transmit_IT+0x26>
    {
      return HAL_ERROR;
 80044f2:	2301      	movs	r3, #1
 80044f4:	e04f      	b.n	8004596 <HAL_UART_Transmit_IT+0xc6>
    }

    __HAL_LOCK(huart);
 80044f6:	68fb      	ldr	r3, [r7, #12]
 80044f8:	f893 3074 	ldrb.w	r3, [r3, #116]	; 0x74
 80044fc:	2b01      	cmp	r3, #1
 80044fe:	d101      	bne.n	8004504 <HAL_UART_Transmit_IT+0x34>
 8004500:	2302      	movs	r3, #2
 8004502:	e048      	b.n	8004596 <HAL_UART_Transmit_IT+0xc6>
 8004504:	68fb      	ldr	r3, [r7, #12]
 8004506:	2201      	movs	r2, #1
 8004508:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    huart->pTxBuffPtr  = pData;
 800450c:	68fb      	ldr	r3, [r7, #12]
 800450e:	68ba      	ldr	r2, [r7, #8]
 8004510:	64da      	str	r2, [r3, #76]	; 0x4c
    huart->TxXferSize  = Size;
 8004512:	68fb      	ldr	r3, [r7, #12]
 8004514:	88fa      	ldrh	r2, [r7, #6]
 8004516:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50
    huart->TxXferCount = Size;
 800451a:	68fb      	ldr	r3, [r7, #12]
 800451c:	88fa      	ldrh	r2, [r7, #6]
 800451e:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
    huart->TxISR       = NULL;
 8004522:	68fb      	ldr	r3, [r7, #12]
 8004524:	2200      	movs	r2, #0
 8004526:	669a      	str	r2, [r3, #104]	; 0x68

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004528:	68fb      	ldr	r3, [r7, #12]
 800452a:	2200      	movs	r2, #0
 800452c:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8004530:	68fb      	ldr	r3, [r7, #12]
 8004532:	2221      	movs	r2, #33	; 0x21
 8004534:	679a      	str	r2, [r3, #120]	; 0x78

    /* Set the Tx ISR function pointer according to the data word length */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8004536:	68fb      	ldr	r3, [r7, #12]
 8004538:	689b      	ldr	r3, [r3, #8]
 800453a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800453e:	d107      	bne.n	8004550 <HAL_UART_Transmit_IT+0x80>
 8004540:	68fb      	ldr	r3, [r7, #12]
 8004542:	691b      	ldr	r3, [r3, #16]
 8004544:	2b00      	cmp	r3, #0
 8004546:	d103      	bne.n	8004550 <HAL_UART_Transmit_IT+0x80>
    {
      huart->TxISR = UART_TxISR_16BIT;
 8004548:	68fb      	ldr	r3, [r7, #12]
 800454a:	4a16      	ldr	r2, [pc, #88]	; (80045a4 <HAL_UART_Transmit_IT+0xd4>)
 800454c:	669a      	str	r2, [r3, #104]	; 0x68
 800454e:	e002      	b.n	8004556 <HAL_UART_Transmit_IT+0x86>
    }
    else
    {
      huart->TxISR = UART_TxISR_8BIT;
 8004550:	68fb      	ldr	r3, [r7, #12]
 8004552:	4a15      	ldr	r2, [pc, #84]	; (80045a8 <HAL_UART_Transmit_IT+0xd8>)
 8004554:	669a      	str	r2, [r3, #104]	; 0x68
    }

    __HAL_UNLOCK(huart);
 8004556:	68fb      	ldr	r3, [r7, #12]
 8004558:	2200      	movs	r2, #0
 800455a:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    /* Enable the Transmit Data Register Empty interrupt */
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TXEIE);
 800455e:	68fb      	ldr	r3, [r7, #12]
 8004560:	681b      	ldr	r3, [r3, #0]
 8004562:	617b      	str	r3, [r7, #20]
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004564:	697b      	ldr	r3, [r7, #20]
 8004566:	e853 3f00 	ldrex	r3, [r3]
 800456a:	613b      	str	r3, [r7, #16]
   return(result);
 800456c:	693b      	ldr	r3, [r7, #16]
 800456e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004572:	627b      	str	r3, [r7, #36]	; 0x24
 8004574:	68fb      	ldr	r3, [r7, #12]
 8004576:	681b      	ldr	r3, [r3, #0]
 8004578:	461a      	mov	r2, r3
 800457a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800457c:	623b      	str	r3, [r7, #32]
 800457e:	61fa      	str	r2, [r7, #28]
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004580:	69f9      	ldr	r1, [r7, #28]
 8004582:	6a3a      	ldr	r2, [r7, #32]
 8004584:	e841 2300 	strex	r3, r2, [r1]
 8004588:	61bb      	str	r3, [r7, #24]
   return(result);
 800458a:	69bb      	ldr	r3, [r7, #24]
 800458c:	2b00      	cmp	r3, #0
 800458e:	d1e6      	bne.n	800455e <HAL_UART_Transmit_IT+0x8e>

    return HAL_OK;
 8004590:	2300      	movs	r3, #0
 8004592:	e000      	b.n	8004596 <HAL_UART_Transmit_IT+0xc6>
  }
  else
  {
    return HAL_BUSY;
 8004594:	2302      	movs	r3, #2
  }
}
 8004596:	4618      	mov	r0, r3
 8004598:	372c      	adds	r7, #44	; 0x2c
 800459a:	46bd      	mov	sp, r7
 800459c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80045a0:	4770      	bx	lr
 80045a2:	bf00      	nop
 80045a4:	08005391 	.word	0x08005391
 80045a8:	080052d9 	.word	0x080052d9

080045ac <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 80045ac:	b580      	push	{r7, lr}
 80045ae:	b0ba      	sub	sp, #232	; 0xe8
 80045b0:	af00      	add	r7, sp, #0
 80045b2:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 80045b4:	687b      	ldr	r3, [r7, #4]
 80045b6:	681b      	ldr	r3, [r3, #0]
 80045b8:	69db      	ldr	r3, [r3, #28]
 80045ba:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 80045be:	687b      	ldr	r3, [r7, #4]
 80045c0:	681b      	ldr	r3, [r3, #0]
 80045c2:	681b      	ldr	r3, [r3, #0]
 80045c4:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 80045c8:	687b      	ldr	r3, [r7, #4]
 80045ca:	681b      	ldr	r3, [r3, #0]
 80045cc:	689b      	ldr	r3, [r3, #8]
 80045ce:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 80045d2:	f8d7 20e4 	ldr.w	r2, [r7, #228]	; 0xe4
 80045d6:	f640 030f 	movw	r3, #2063	; 0x80f
 80045da:	4013      	ands	r3, r2
 80045dc:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == 0U)
 80045e0:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 80045e4:	2b00      	cmp	r3, #0
 80045e6:	d115      	bne.n	8004614 <HAL_UART_IRQHandler+0x68>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
    if (((isrflags & USART_ISR_RXNE) != 0U)
 80045e8:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80045ec:	f003 0320 	and.w	r3, r3, #32
 80045f0:	2b00      	cmp	r3, #0
 80045f2:	d00f      	beq.n	8004614 <HAL_UART_IRQHandler+0x68>
        && ((cr1its & USART_CR1_RXNEIE) != 0U))
 80045f4:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80045f8:	f003 0320 	and.w	r3, r3, #32
 80045fc:	2b00      	cmp	r3, #0
 80045fe:	d009      	beq.n	8004614 <HAL_UART_IRQHandler+0x68>
    {
      if (huart->RxISR != NULL)
 8004600:	687b      	ldr	r3, [r7, #4]
 8004602:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8004604:	2b00      	cmp	r3, #0
 8004606:	f000 82a3 	beq.w	8004b50 <HAL_UART_IRQHandler+0x5a4>
      {
        huart->RxISR(huart);
 800460a:	687b      	ldr	r3, [r7, #4]
 800460c:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800460e:	6878      	ldr	r0, [r7, #4]
 8004610:	4798      	blx	r3
      }
      return;
 8004612:	e29d      	b.n	8004b50 <HAL_UART_IRQHandler+0x5a4>
    }
  }

  /* If some errors occur */
  if ((errorflags != 0U)
 8004614:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8004618:	2b00      	cmp	r3, #0
 800461a:	f000 8117 	beq.w	800484c <HAL_UART_IRQHandler+0x2a0>
      && (((cr3its & USART_CR3_EIE) != 0U)
 800461e:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8004622:	f003 0301 	and.w	r3, r3, #1
 8004626:	2b00      	cmp	r3, #0
 8004628:	d106      	bne.n	8004638 <HAL_UART_IRQHandler+0x8c>
          || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U)))
 800462a:	f8d7 20e0 	ldr.w	r2, [r7, #224]	; 0xe0
 800462e:	4b85      	ldr	r3, [pc, #532]	; (8004844 <HAL_UART_IRQHandler+0x298>)
 8004630:	4013      	ands	r3, r2
 8004632:	2b00      	cmp	r3, #0
 8004634:	f000 810a 	beq.w	800484c <HAL_UART_IRQHandler+0x2a0>
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 8004638:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800463c:	f003 0301 	and.w	r3, r3, #1
 8004640:	2b00      	cmp	r3, #0
 8004642:	d011      	beq.n	8004668 <HAL_UART_IRQHandler+0xbc>
 8004644:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8004648:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800464c:	2b00      	cmp	r3, #0
 800464e:	d00b      	beq.n	8004668 <HAL_UART_IRQHandler+0xbc>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 8004650:	687b      	ldr	r3, [r7, #4]
 8004652:	681b      	ldr	r3, [r3, #0]
 8004654:	2201      	movs	r2, #1
 8004656:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8004658:	687b      	ldr	r3, [r7, #4]
 800465a:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800465e:	f043 0201 	orr.w	r2, r3, #1
 8004662:	687b      	ldr	r3, [r7, #4]
 8004664:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8004668:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800466c:	f003 0302 	and.w	r3, r3, #2
 8004670:	2b00      	cmp	r3, #0
 8004672:	d011      	beq.n	8004698 <HAL_UART_IRQHandler+0xec>
 8004674:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8004678:	f003 0301 	and.w	r3, r3, #1
 800467c:	2b00      	cmp	r3, #0
 800467e:	d00b      	beq.n	8004698 <HAL_UART_IRQHandler+0xec>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 8004680:	687b      	ldr	r3, [r7, #4]
 8004682:	681b      	ldr	r3, [r3, #0]
 8004684:	2202      	movs	r2, #2
 8004686:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8004688:	687b      	ldr	r3, [r7, #4]
 800468a:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800468e:	f043 0204 	orr.w	r2, r3, #4
 8004692:	687b      	ldr	r3, [r7, #4]
 8004694:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8004698:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800469c:	f003 0304 	and.w	r3, r3, #4
 80046a0:	2b00      	cmp	r3, #0
 80046a2:	d011      	beq.n	80046c8 <HAL_UART_IRQHandler+0x11c>
 80046a4:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80046a8:	f003 0301 	and.w	r3, r3, #1
 80046ac:	2b00      	cmp	r3, #0
 80046ae:	d00b      	beq.n	80046c8 <HAL_UART_IRQHandler+0x11c>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 80046b0:	687b      	ldr	r3, [r7, #4]
 80046b2:	681b      	ldr	r3, [r3, #0]
 80046b4:	2204      	movs	r2, #4
 80046b6:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 80046b8:	687b      	ldr	r3, [r7, #4]
 80046ba:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80046be:	f043 0202 	orr.w	r2, r3, #2
 80046c2:	687b      	ldr	r3, [r7, #4]
 80046c4:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    }

    /* UART Over-Run interrupt occurred -----------------------------------------*/
    if (((isrflags & USART_ISR_ORE) != 0U)
 80046c8:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80046cc:	f003 0308 	and.w	r3, r3, #8
 80046d0:	2b00      	cmp	r3, #0
 80046d2:	d017      	beq.n	8004704 <HAL_UART_IRQHandler+0x158>
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 80046d4:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80046d8:	f003 0320 	and.w	r3, r3, #32
 80046dc:	2b00      	cmp	r3, #0
 80046de:	d105      	bne.n	80046ec <HAL_UART_IRQHandler+0x140>
            ((cr3its & USART_CR3_EIE) != 0U)))
 80046e0:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80046e4:	f003 0301 	and.w	r3, r3, #1
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 80046e8:	2b00      	cmp	r3, #0
 80046ea:	d00b      	beq.n	8004704 <HAL_UART_IRQHandler+0x158>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 80046ec:	687b      	ldr	r3, [r7, #4]
 80046ee:	681b      	ldr	r3, [r3, #0]
 80046f0:	2208      	movs	r2, #8
 80046f2:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 80046f4:	687b      	ldr	r3, [r7, #4]
 80046f6:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80046fa:	f043 0208 	orr.w	r2, r3, #8
 80046fe:	687b      	ldr	r3, [r7, #4]
 8004700:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 8004704:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004708:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800470c:	2b00      	cmp	r3, #0
 800470e:	d012      	beq.n	8004736 <HAL_UART_IRQHandler+0x18a>
 8004710:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8004714:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8004718:	2b00      	cmp	r3, #0
 800471a:	d00c      	beq.n	8004736 <HAL_UART_IRQHandler+0x18a>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800471c:	687b      	ldr	r3, [r7, #4]
 800471e:	681b      	ldr	r3, [r3, #0]
 8004720:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8004724:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 8004726:	687b      	ldr	r3, [r7, #4]
 8004728:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800472c:	f043 0220 	orr.w	r2, r3, #32
 8004730:	687b      	ldr	r3, [r7, #4]
 8004732:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8004736:	687b      	ldr	r3, [r7, #4]
 8004738:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800473c:	2b00      	cmp	r3, #0
 800473e:	f000 8209 	beq.w	8004b54 <HAL_UART_IRQHandler+0x5a8>
    {
      /* UART in mode Receiver --------------------------------------------------*/
      if (((isrflags & USART_ISR_RXNE) != 0U)
 8004742:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004746:	f003 0320 	and.w	r3, r3, #32
 800474a:	2b00      	cmp	r3, #0
 800474c:	d00d      	beq.n	800476a <HAL_UART_IRQHandler+0x1be>
          && ((cr1its & USART_CR1_RXNEIE) != 0U))
 800474e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8004752:	f003 0320 	and.w	r3, r3, #32
 8004756:	2b00      	cmp	r3, #0
 8004758:	d007      	beq.n	800476a <HAL_UART_IRQHandler+0x1be>
      {
        if (huart->RxISR != NULL)
 800475a:	687b      	ldr	r3, [r7, #4]
 800475c:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800475e:	2b00      	cmp	r3, #0
 8004760:	d003      	beq.n	800476a <HAL_UART_IRQHandler+0x1be>
        {
          huart->RxISR(huart);
 8004762:	687b      	ldr	r3, [r7, #4]
 8004764:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8004766:	6878      	ldr	r0, [r7, #4]
 8004768:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 800476a:	687b      	ldr	r3, [r7, #4]
 800476c:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8004770:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8004774:	687b      	ldr	r3, [r7, #4]
 8004776:	681b      	ldr	r3, [r3, #0]
 8004778:	689b      	ldr	r3, [r3, #8]
 800477a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800477e:	2b40      	cmp	r3, #64	; 0x40
 8004780:	d005      	beq.n	800478e <HAL_UART_IRQHandler+0x1e2>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 8004782:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8004786:	f003 0328 	and.w	r3, r3, #40	; 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 800478a:	2b00      	cmp	r3, #0
 800478c:	d04f      	beq.n	800482e <HAL_UART_IRQHandler+0x282>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 800478e:	6878      	ldr	r0, [r7, #4]
 8004790:	f000 fd29 	bl	80051e6 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004794:	687b      	ldr	r3, [r7, #4]
 8004796:	681b      	ldr	r3, [r3, #0]
 8004798:	689b      	ldr	r3, [r3, #8]
 800479a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800479e:	2b40      	cmp	r3, #64	; 0x40
 80047a0:	d141      	bne.n	8004826 <HAL_UART_IRQHandler+0x27a>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80047a2:	687b      	ldr	r3, [r7, #4]
 80047a4:	681b      	ldr	r3, [r3, #0]
 80047a6:	3308      	adds	r3, #8
 80047a8:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80047ac:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 80047b0:	e853 3f00 	ldrex	r3, [r3]
 80047b4:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 80047b8:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 80047bc:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80047c0:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 80047c4:	687b      	ldr	r3, [r7, #4]
 80047c6:	681b      	ldr	r3, [r3, #0]
 80047c8:	3308      	adds	r3, #8
 80047ca:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 80047ce:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 80047d2:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80047d6:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 80047da:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 80047de:	e841 2300 	strex	r3, r2, [r1]
 80047e2:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 80047e6:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 80047ea:	2b00      	cmp	r3, #0
 80047ec:	d1d9      	bne.n	80047a2 <HAL_UART_IRQHandler+0x1f6>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 80047ee:	687b      	ldr	r3, [r7, #4]
 80047f0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80047f2:	2b00      	cmp	r3, #0
 80047f4:	d013      	beq.n	800481e <HAL_UART_IRQHandler+0x272>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 80047f6:	687b      	ldr	r3, [r7, #4]
 80047f8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80047fa:	4a13      	ldr	r2, [pc, #76]	; (8004848 <HAL_UART_IRQHandler+0x29c>)
 80047fc:	635a      	str	r2, [r3, #52]	; 0x34

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 80047fe:	687b      	ldr	r3, [r7, #4]
 8004800:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004802:	4618      	mov	r0, r3
 8004804:	f7fc fea6 	bl	8001554 <HAL_DMA_Abort_IT>
 8004808:	4603      	mov	r3, r0
 800480a:	2b00      	cmp	r3, #0
 800480c:	d017      	beq.n	800483e <HAL_UART_IRQHandler+0x292>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 800480e:	687b      	ldr	r3, [r7, #4]
 8004810:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004812:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004814:	687a      	ldr	r2, [r7, #4]
 8004816:	6f12      	ldr	r2, [r2, #112]	; 0x70
 8004818:	4610      	mov	r0, r2
 800481a:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800481c:	e00f      	b.n	800483e <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 800481e:	6878      	ldr	r0, [r7, #4]
 8004820:	f000 f9a2 	bl	8004b68 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004824:	e00b      	b.n	800483e <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8004826:	6878      	ldr	r0, [r7, #4]
 8004828:	f000 f99e 	bl	8004b68 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800482c:	e007      	b.n	800483e <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 800482e:	6878      	ldr	r0, [r7, #4]
 8004830:	f000 f99a 	bl	8004b68 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004834:	687b      	ldr	r3, [r7, #4]
 8004836:	2200      	movs	r2, #0
 8004838:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
      }
    }
    return;
 800483c:	e18a      	b.n	8004b54 <HAL_UART_IRQHandler+0x5a8>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800483e:	bf00      	nop
    return;
 8004840:	e188      	b.n	8004b54 <HAL_UART_IRQHandler+0x5a8>
 8004842:	bf00      	nop
 8004844:	04000120 	.word	0x04000120
 8004848:	080052ad 	.word	0x080052ad

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800484c:	687b      	ldr	r3, [r7, #4]
 800484e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004850:	2b01      	cmp	r3, #1
 8004852:	f040 8143 	bne.w	8004adc <HAL_UART_IRQHandler+0x530>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 8004856:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800485a:	f003 0310 	and.w	r3, r3, #16
 800485e:	2b00      	cmp	r3, #0
 8004860:	f000 813c 	beq.w	8004adc <HAL_UART_IRQHandler+0x530>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 8004864:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8004868:	f003 0310 	and.w	r3, r3, #16
 800486c:	2b00      	cmp	r3, #0
 800486e:	f000 8135 	beq.w	8004adc <HAL_UART_IRQHandler+0x530>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8004872:	687b      	ldr	r3, [r7, #4]
 8004874:	681b      	ldr	r3, [r3, #0]
 8004876:	2210      	movs	r2, #16
 8004878:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800487a:	687b      	ldr	r3, [r7, #4]
 800487c:	681b      	ldr	r3, [r3, #0]
 800487e:	689b      	ldr	r3, [r3, #8]
 8004880:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004884:	2b40      	cmp	r3, #64	; 0x40
 8004886:	f040 80b1 	bne.w	80049ec <HAL_UART_IRQHandler+0x440>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 800488a:	687b      	ldr	r3, [r7, #4]
 800488c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800488e:	681b      	ldr	r3, [r3, #0]
 8004890:	685b      	ldr	r3, [r3, #4]
 8004892:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 8004896:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 800489a:	2b00      	cmp	r3, #0
 800489c:	f000 815c 	beq.w	8004b58 <HAL_UART_IRQHandler+0x5ac>
          && (nb_remaining_rx_data < huart->RxXferSize))
 80048a0:	687b      	ldr	r3, [r7, #4]
 80048a2:	f8b3 3058 	ldrh.w	r3, [r3, #88]	; 0x58
 80048a6:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 80048aa:	429a      	cmp	r2, r3
 80048ac:	f080 8154 	bcs.w	8004b58 <HAL_UART_IRQHandler+0x5ac>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 80048b0:	687b      	ldr	r3, [r7, #4]
 80048b2:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 80048b6:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 80048ba:	687b      	ldr	r3, [r7, #4]
 80048bc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80048be:	699b      	ldr	r3, [r3, #24]
 80048c0:	2b20      	cmp	r3, #32
 80048c2:	f000 8085 	beq.w	80049d0 <HAL_UART_IRQHandler+0x424>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 80048c6:	687b      	ldr	r3, [r7, #4]
 80048c8:	681b      	ldr	r3, [r3, #0]
 80048ca:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80048ce:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 80048d2:	e853 3f00 	ldrex	r3, [r3]
 80048d6:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 80048da:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 80048de:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80048e2:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 80048e6:	687b      	ldr	r3, [r7, #4]
 80048e8:	681b      	ldr	r3, [r3, #0]
 80048ea:	461a      	mov	r2, r3
 80048ec:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 80048f0:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 80048f4:	f8c7 2090 	str.w	r2, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80048f8:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 80048fc:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 8004900:	e841 2300 	strex	r3, r2, [r1]
 8004904:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 8004908:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800490c:	2b00      	cmp	r3, #0
 800490e:	d1da      	bne.n	80048c6 <HAL_UART_IRQHandler+0x31a>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004910:	687b      	ldr	r3, [r7, #4]
 8004912:	681b      	ldr	r3, [r3, #0]
 8004914:	3308      	adds	r3, #8
 8004916:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004918:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800491a:	e853 3f00 	ldrex	r3, [r3]
 800491e:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 8004920:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8004922:	f023 0301 	bic.w	r3, r3, #1
 8004926:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 800492a:	687b      	ldr	r3, [r7, #4]
 800492c:	681b      	ldr	r3, [r3, #0]
 800492e:	3308      	adds	r3, #8
 8004930:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 8004934:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 8004938:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800493a:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 800493c:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 8004940:	e841 2300 	strex	r3, r2, [r1]
 8004944:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 8004946:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8004948:	2b00      	cmp	r3, #0
 800494a:	d1e1      	bne.n	8004910 <HAL_UART_IRQHandler+0x364>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800494c:	687b      	ldr	r3, [r7, #4]
 800494e:	681b      	ldr	r3, [r3, #0]
 8004950:	3308      	adds	r3, #8
 8004952:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004954:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8004956:	e853 3f00 	ldrex	r3, [r3]
 800495a:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 800495c:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800495e:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8004962:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8004966:	687b      	ldr	r3, [r7, #4]
 8004968:	681b      	ldr	r3, [r3, #0]
 800496a:	3308      	adds	r3, #8
 800496c:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 8004970:	66fa      	str	r2, [r7, #108]	; 0x6c
 8004972:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004974:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 8004976:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 8004978:	e841 2300 	strex	r3, r2, [r1]
 800497c:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 800497e:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8004980:	2b00      	cmp	r3, #0
 8004982:	d1e3      	bne.n	800494c <HAL_UART_IRQHandler+0x3a0>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8004984:	687b      	ldr	r3, [r7, #4]
 8004986:	2220      	movs	r2, #32
 8004988:	67da      	str	r2, [r3, #124]	; 0x7c
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800498a:	687b      	ldr	r3, [r7, #4]
 800498c:	2200      	movs	r2, #0
 800498e:	661a      	str	r2, [r3, #96]	; 0x60

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004990:	687b      	ldr	r3, [r7, #4]
 8004992:	681b      	ldr	r3, [r3, #0]
 8004994:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004996:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004998:	e853 3f00 	ldrex	r3, [r3]
 800499c:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 800499e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80049a0:	f023 0310 	bic.w	r3, r3, #16
 80049a4:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 80049a8:	687b      	ldr	r3, [r7, #4]
 80049aa:	681b      	ldr	r3, [r3, #0]
 80049ac:	461a      	mov	r2, r3
 80049ae:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 80049b2:	65bb      	str	r3, [r7, #88]	; 0x58
 80049b4:	657a      	str	r2, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80049b6:	6d79      	ldr	r1, [r7, #84]	; 0x54
 80049b8:	6dba      	ldr	r2, [r7, #88]	; 0x58
 80049ba:	e841 2300 	strex	r3, r2, [r1]
 80049be:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 80049c0:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80049c2:	2b00      	cmp	r3, #0
 80049c4:	d1e4      	bne.n	8004990 <HAL_UART_IRQHandler+0x3e4>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 80049c6:	687b      	ldr	r3, [r7, #4]
 80049c8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80049ca:	4618      	mov	r0, r3
 80049cc:	f7fc fd89 	bl	80014e2 <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 80049d0:	687b      	ldr	r3, [r7, #4]
 80049d2:	f8b3 2058 	ldrh.w	r2, [r3, #88]	; 0x58
 80049d6:	687b      	ldr	r3, [r7, #4]
 80049d8:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 80049dc:	b29b      	uxth	r3, r3
 80049de:	1ad3      	subs	r3, r2, r3
 80049e0:	b29b      	uxth	r3, r3
 80049e2:	4619      	mov	r1, r3
 80049e4:	6878      	ldr	r0, [r7, #4]
 80049e6:	f000 f8c9 	bl	8004b7c <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 80049ea:	e0b5      	b.n	8004b58 <HAL_UART_IRQHandler+0x5ac>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 80049ec:	687b      	ldr	r3, [r7, #4]
 80049ee:	f8b3 2058 	ldrh.w	r2, [r3, #88]	; 0x58
 80049f2:	687b      	ldr	r3, [r7, #4]
 80049f4:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 80049f8:	b29b      	uxth	r3, r3
 80049fa:	1ad3      	subs	r3, r2, r3
 80049fc:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 8004a00:	687b      	ldr	r3, [r7, #4]
 8004a02:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8004a06:	b29b      	uxth	r3, r3
 8004a08:	2b00      	cmp	r3, #0
 8004a0a:	f000 80a7 	beq.w	8004b5c <HAL_UART_IRQHandler+0x5b0>
          && (nb_rx_data > 0U))
 8004a0e:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8004a12:	2b00      	cmp	r3, #0
 8004a14:	f000 80a2 	beq.w	8004b5c <HAL_UART_IRQHandler+0x5b0>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8004a18:	687b      	ldr	r3, [r7, #4]
 8004a1a:	681b      	ldr	r3, [r3, #0]
 8004a1c:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004a1e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004a20:	e853 3f00 	ldrex	r3, [r3]
 8004a24:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8004a26:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004a28:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8004a2c:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8004a30:	687b      	ldr	r3, [r7, #4]
 8004a32:	681b      	ldr	r3, [r3, #0]
 8004a34:	461a      	mov	r2, r3
 8004a36:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8004a3a:	647b      	str	r3, [r7, #68]	; 0x44
 8004a3c:	643a      	str	r2, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004a3e:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8004a40:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8004a42:	e841 2300 	strex	r3, r2, [r1]
 8004a46:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8004a48:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004a4a:	2b00      	cmp	r3, #0
 8004a4c:	d1e4      	bne.n	8004a18 <HAL_UART_IRQHandler+0x46c>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004a4e:	687b      	ldr	r3, [r7, #4]
 8004a50:	681b      	ldr	r3, [r3, #0]
 8004a52:	3308      	adds	r3, #8
 8004a54:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004a56:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004a58:	e853 3f00 	ldrex	r3, [r3]
 8004a5c:	623b      	str	r3, [r7, #32]
   return(result);
 8004a5e:	6a3b      	ldr	r3, [r7, #32]
 8004a60:	f023 0301 	bic.w	r3, r3, #1
 8004a64:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 8004a68:	687b      	ldr	r3, [r7, #4]
 8004a6a:	681b      	ldr	r3, [r3, #0]
 8004a6c:	3308      	adds	r3, #8
 8004a6e:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 8004a72:	633a      	str	r2, [r7, #48]	; 0x30
 8004a74:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004a76:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8004a78:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8004a7a:	e841 2300 	strex	r3, r2, [r1]
 8004a7e:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8004a80:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004a82:	2b00      	cmp	r3, #0
 8004a84:	d1e3      	bne.n	8004a4e <HAL_UART_IRQHandler+0x4a2>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8004a86:	687b      	ldr	r3, [r7, #4]
 8004a88:	2220      	movs	r2, #32
 8004a8a:	67da      	str	r2, [r3, #124]	; 0x7c
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004a8c:	687b      	ldr	r3, [r7, #4]
 8004a8e:	2200      	movs	r2, #0
 8004a90:	661a      	str	r2, [r3, #96]	; 0x60

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 8004a92:	687b      	ldr	r3, [r7, #4]
 8004a94:	2200      	movs	r2, #0
 8004a96:	665a      	str	r2, [r3, #100]	; 0x64

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004a98:	687b      	ldr	r3, [r7, #4]
 8004a9a:	681b      	ldr	r3, [r3, #0]
 8004a9c:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004a9e:	693b      	ldr	r3, [r7, #16]
 8004aa0:	e853 3f00 	ldrex	r3, [r3]
 8004aa4:	60fb      	str	r3, [r7, #12]
   return(result);
 8004aa6:	68fb      	ldr	r3, [r7, #12]
 8004aa8:	f023 0310 	bic.w	r3, r3, #16
 8004aac:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8004ab0:	687b      	ldr	r3, [r7, #4]
 8004ab2:	681b      	ldr	r3, [r3, #0]
 8004ab4:	461a      	mov	r2, r3
 8004ab6:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8004aba:	61fb      	str	r3, [r7, #28]
 8004abc:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004abe:	69b9      	ldr	r1, [r7, #24]
 8004ac0:	69fa      	ldr	r2, [r7, #28]
 8004ac2:	e841 2300 	strex	r3, r2, [r1]
 8004ac6:	617b      	str	r3, [r7, #20]
   return(result);
 8004ac8:	697b      	ldr	r3, [r7, #20]
 8004aca:	2b00      	cmp	r3, #0
 8004acc:	d1e4      	bne.n	8004a98 <HAL_UART_IRQHandler+0x4ec>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8004ace:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8004ad2:	4619      	mov	r1, r3
 8004ad4:	6878      	ldr	r0, [r7, #4]
 8004ad6:	f000 f851 	bl	8004b7c <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 8004ada:	e03f      	b.n	8004b5c <HAL_UART_IRQHandler+0x5b0>
    }
  }

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 8004adc:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004ae0:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8004ae4:	2b00      	cmp	r3, #0
 8004ae6:	d00e      	beq.n	8004b06 <HAL_UART_IRQHandler+0x55a>
 8004ae8:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8004aec:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8004af0:	2b00      	cmp	r3, #0
 8004af2:	d008      	beq.n	8004b06 <HAL_UART_IRQHandler+0x55a>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 8004af4:	687b      	ldr	r3, [r7, #4]
 8004af6:	681b      	ldr	r3, [r3, #0]
 8004af8:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 8004afc:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 8004afe:	6878      	ldr	r0, [r7, #4]
 8004b00:	f000 fcd0 	bl	80054a4 <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8004b04:	e02d      	b.n	8004b62 <HAL_UART_IRQHandler+0x5b6>
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_ISR_TXE) != 0U)
 8004b06:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004b0a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004b0e:	2b00      	cmp	r3, #0
 8004b10:	d00e      	beq.n	8004b30 <HAL_UART_IRQHandler+0x584>
      && ((cr1its & USART_CR1_TXEIE) != 0U))
 8004b12:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8004b16:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004b1a:	2b00      	cmp	r3, #0
 8004b1c:	d008      	beq.n	8004b30 <HAL_UART_IRQHandler+0x584>
  {
    if (huart->TxISR != NULL)
 8004b1e:	687b      	ldr	r3, [r7, #4]
 8004b20:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8004b22:	2b00      	cmp	r3, #0
 8004b24:	d01c      	beq.n	8004b60 <HAL_UART_IRQHandler+0x5b4>
    {
      huart->TxISR(huart);
 8004b26:	687b      	ldr	r3, [r7, #4]
 8004b28:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8004b2a:	6878      	ldr	r0, [r7, #4]
 8004b2c:	4798      	blx	r3
    }
    return;
 8004b2e:	e017      	b.n	8004b60 <HAL_UART_IRQHandler+0x5b4>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 8004b30:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004b34:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004b38:	2b00      	cmp	r3, #0
 8004b3a:	d012      	beq.n	8004b62 <HAL_UART_IRQHandler+0x5b6>
 8004b3c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8004b40:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004b44:	2b00      	cmp	r3, #0
 8004b46:	d00c      	beq.n	8004b62 <HAL_UART_IRQHandler+0x5b6>
  {
    UART_EndTransmit_IT(huart);
 8004b48:	6878      	ldr	r0, [r7, #4]
 8004b4a:	f000 fc81 	bl	8005450 <UART_EndTransmit_IT>
    return;
 8004b4e:	e008      	b.n	8004b62 <HAL_UART_IRQHandler+0x5b6>
      return;
 8004b50:	bf00      	nop
 8004b52:	e006      	b.n	8004b62 <HAL_UART_IRQHandler+0x5b6>
    return;
 8004b54:	bf00      	nop
 8004b56:	e004      	b.n	8004b62 <HAL_UART_IRQHandler+0x5b6>
      return;
 8004b58:	bf00      	nop
 8004b5a:	e002      	b.n	8004b62 <HAL_UART_IRQHandler+0x5b6>
      return;
 8004b5c:	bf00      	nop
 8004b5e:	e000      	b.n	8004b62 <HAL_UART_IRQHandler+0x5b6>
    return;
 8004b60:	bf00      	nop
  }

}
 8004b62:	37e8      	adds	r7, #232	; 0xe8
 8004b64:	46bd      	mov	sp, r7
 8004b66:	bd80      	pop	{r7, pc}

08004b68 <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8004b68:	b480      	push	{r7}
 8004b6a:	b083      	sub	sp, #12
 8004b6c:	af00      	add	r7, sp, #0
 8004b6e:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 8004b70:	bf00      	nop
 8004b72:	370c      	adds	r7, #12
 8004b74:	46bd      	mov	sp, r7
 8004b76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b7a:	4770      	bx	lr

08004b7c <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8004b7c:	b480      	push	{r7}
 8004b7e:	b083      	sub	sp, #12
 8004b80:	af00      	add	r7, sp, #0
 8004b82:	6078      	str	r0, [r7, #4]
 8004b84:	460b      	mov	r3, r1
 8004b86:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8004b88:	bf00      	nop
 8004b8a:	370c      	adds	r7, #12
 8004b8c:	46bd      	mov	sp, r7
 8004b8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b92:	4770      	bx	lr

08004b94 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8004b94:	b580      	push	{r7, lr}
 8004b96:	b088      	sub	sp, #32
 8004b98:	af00      	add	r7, sp, #0
 8004b9a:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8004b9c:	2300      	movs	r3, #0
 8004b9e:	77bb      	strb	r3, [r7, #30]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8004ba0:	687b      	ldr	r3, [r7, #4]
 8004ba2:	689a      	ldr	r2, [r3, #8]
 8004ba4:	687b      	ldr	r3, [r7, #4]
 8004ba6:	691b      	ldr	r3, [r3, #16]
 8004ba8:	431a      	orrs	r2, r3
 8004baa:	687b      	ldr	r3, [r7, #4]
 8004bac:	695b      	ldr	r3, [r3, #20]
 8004bae:	431a      	orrs	r2, r3
 8004bb0:	687b      	ldr	r3, [r7, #4]
 8004bb2:	69db      	ldr	r3, [r3, #28]
 8004bb4:	4313      	orrs	r3, r2
 8004bb6:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8004bb8:	687b      	ldr	r3, [r7, #4]
 8004bba:	681b      	ldr	r3, [r3, #0]
 8004bbc:	681b      	ldr	r3, [r3, #0]
 8004bbe:	f423 4316 	bic.w	r3, r3, #38400	; 0x9600
 8004bc2:	f023 030c 	bic.w	r3, r3, #12
 8004bc6:	687a      	ldr	r2, [r7, #4]
 8004bc8:	6812      	ldr	r2, [r2, #0]
 8004bca:	6979      	ldr	r1, [r7, #20]
 8004bcc:	430b      	orrs	r3, r1
 8004bce:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8004bd0:	687b      	ldr	r3, [r7, #4]
 8004bd2:	681b      	ldr	r3, [r3, #0]
 8004bd4:	685b      	ldr	r3, [r3, #4]
 8004bd6:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8004bda:	687b      	ldr	r3, [r7, #4]
 8004bdc:	68da      	ldr	r2, [r3, #12]
 8004bde:	687b      	ldr	r3, [r7, #4]
 8004be0:	681b      	ldr	r3, [r3, #0]
 8004be2:	430a      	orrs	r2, r1
 8004be4:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8004be6:	687b      	ldr	r3, [r7, #4]
 8004be8:	699b      	ldr	r3, [r3, #24]
 8004bea:	617b      	str	r3, [r7, #20]

  tmpreg |= huart->Init.OneBitSampling;
 8004bec:	687b      	ldr	r3, [r7, #4]
 8004bee:	6a1b      	ldr	r3, [r3, #32]
 8004bf0:	697a      	ldr	r2, [r7, #20]
 8004bf2:	4313      	orrs	r3, r2
 8004bf4:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8004bf6:	687b      	ldr	r3, [r7, #4]
 8004bf8:	681b      	ldr	r3, [r3, #0]
 8004bfa:	689b      	ldr	r3, [r3, #8]
 8004bfc:	f423 6130 	bic.w	r1, r3, #2816	; 0xb00
 8004c00:	687b      	ldr	r3, [r7, #4]
 8004c02:	681b      	ldr	r3, [r3, #0]
 8004c04:	697a      	ldr	r2, [r7, #20]
 8004c06:	430a      	orrs	r2, r1
 8004c08:	609a      	str	r2, [r3, #8]


  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8004c0a:	687b      	ldr	r3, [r7, #4]
 8004c0c:	681b      	ldr	r3, [r3, #0]
 8004c0e:	4a99      	ldr	r2, [pc, #612]	; (8004e74 <UART_SetConfig+0x2e0>)
 8004c10:	4293      	cmp	r3, r2
 8004c12:	d120      	bne.n	8004c56 <UART_SetConfig+0xc2>
 8004c14:	4b98      	ldr	r3, [pc, #608]	; (8004e78 <UART_SetConfig+0x2e4>)
 8004c16:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004c18:	f003 0303 	and.w	r3, r3, #3
 8004c1c:	2b03      	cmp	r3, #3
 8004c1e:	d817      	bhi.n	8004c50 <UART_SetConfig+0xbc>
 8004c20:	a201      	add	r2, pc, #4	; (adr r2, 8004c28 <UART_SetConfig+0x94>)
 8004c22:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004c26:	bf00      	nop
 8004c28:	08004c39 	.word	0x08004c39
 8004c2c:	08004c45 	.word	0x08004c45
 8004c30:	08004c4b 	.word	0x08004c4b
 8004c34:	08004c3f 	.word	0x08004c3f
 8004c38:	2301      	movs	r3, #1
 8004c3a:	77fb      	strb	r3, [r7, #31]
 8004c3c:	e061      	b.n	8004d02 <UART_SetConfig+0x16e>
 8004c3e:	2302      	movs	r3, #2
 8004c40:	77fb      	strb	r3, [r7, #31]
 8004c42:	e05e      	b.n	8004d02 <UART_SetConfig+0x16e>
 8004c44:	2304      	movs	r3, #4
 8004c46:	77fb      	strb	r3, [r7, #31]
 8004c48:	e05b      	b.n	8004d02 <UART_SetConfig+0x16e>
 8004c4a:	2308      	movs	r3, #8
 8004c4c:	77fb      	strb	r3, [r7, #31]
 8004c4e:	e058      	b.n	8004d02 <UART_SetConfig+0x16e>
 8004c50:	2310      	movs	r3, #16
 8004c52:	77fb      	strb	r3, [r7, #31]
 8004c54:	e055      	b.n	8004d02 <UART_SetConfig+0x16e>
 8004c56:	687b      	ldr	r3, [r7, #4]
 8004c58:	681b      	ldr	r3, [r3, #0]
 8004c5a:	4a88      	ldr	r2, [pc, #544]	; (8004e7c <UART_SetConfig+0x2e8>)
 8004c5c:	4293      	cmp	r3, r2
 8004c5e:	d124      	bne.n	8004caa <UART_SetConfig+0x116>
 8004c60:	4b85      	ldr	r3, [pc, #532]	; (8004e78 <UART_SetConfig+0x2e4>)
 8004c62:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004c64:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8004c68:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 8004c6c:	d011      	beq.n	8004c92 <UART_SetConfig+0xfe>
 8004c6e:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 8004c72:	d817      	bhi.n	8004ca4 <UART_SetConfig+0x110>
 8004c74:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8004c78:	d011      	beq.n	8004c9e <UART_SetConfig+0x10a>
 8004c7a:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8004c7e:	d811      	bhi.n	8004ca4 <UART_SetConfig+0x110>
 8004c80:	2b00      	cmp	r3, #0
 8004c82:	d003      	beq.n	8004c8c <UART_SetConfig+0xf8>
 8004c84:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004c88:	d006      	beq.n	8004c98 <UART_SetConfig+0x104>
 8004c8a:	e00b      	b.n	8004ca4 <UART_SetConfig+0x110>
 8004c8c:	2300      	movs	r3, #0
 8004c8e:	77fb      	strb	r3, [r7, #31]
 8004c90:	e037      	b.n	8004d02 <UART_SetConfig+0x16e>
 8004c92:	2302      	movs	r3, #2
 8004c94:	77fb      	strb	r3, [r7, #31]
 8004c96:	e034      	b.n	8004d02 <UART_SetConfig+0x16e>
 8004c98:	2304      	movs	r3, #4
 8004c9a:	77fb      	strb	r3, [r7, #31]
 8004c9c:	e031      	b.n	8004d02 <UART_SetConfig+0x16e>
 8004c9e:	2308      	movs	r3, #8
 8004ca0:	77fb      	strb	r3, [r7, #31]
 8004ca2:	e02e      	b.n	8004d02 <UART_SetConfig+0x16e>
 8004ca4:	2310      	movs	r3, #16
 8004ca6:	77fb      	strb	r3, [r7, #31]
 8004ca8:	e02b      	b.n	8004d02 <UART_SetConfig+0x16e>
 8004caa:	687b      	ldr	r3, [r7, #4]
 8004cac:	681b      	ldr	r3, [r3, #0]
 8004cae:	4a74      	ldr	r2, [pc, #464]	; (8004e80 <UART_SetConfig+0x2ec>)
 8004cb0:	4293      	cmp	r3, r2
 8004cb2:	d124      	bne.n	8004cfe <UART_SetConfig+0x16a>
 8004cb4:	4b70      	ldr	r3, [pc, #448]	; (8004e78 <UART_SetConfig+0x2e4>)
 8004cb6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004cb8:	f403 2340 	and.w	r3, r3, #786432	; 0xc0000
 8004cbc:	f5b3 2f40 	cmp.w	r3, #786432	; 0xc0000
 8004cc0:	d011      	beq.n	8004ce6 <UART_SetConfig+0x152>
 8004cc2:	f5b3 2f40 	cmp.w	r3, #786432	; 0xc0000
 8004cc6:	d817      	bhi.n	8004cf8 <UART_SetConfig+0x164>
 8004cc8:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 8004ccc:	d011      	beq.n	8004cf2 <UART_SetConfig+0x15e>
 8004cce:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 8004cd2:	d811      	bhi.n	8004cf8 <UART_SetConfig+0x164>
 8004cd4:	2b00      	cmp	r3, #0
 8004cd6:	d003      	beq.n	8004ce0 <UART_SetConfig+0x14c>
 8004cd8:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8004cdc:	d006      	beq.n	8004cec <UART_SetConfig+0x158>
 8004cde:	e00b      	b.n	8004cf8 <UART_SetConfig+0x164>
 8004ce0:	2300      	movs	r3, #0
 8004ce2:	77fb      	strb	r3, [r7, #31]
 8004ce4:	e00d      	b.n	8004d02 <UART_SetConfig+0x16e>
 8004ce6:	2302      	movs	r3, #2
 8004ce8:	77fb      	strb	r3, [r7, #31]
 8004cea:	e00a      	b.n	8004d02 <UART_SetConfig+0x16e>
 8004cec:	2304      	movs	r3, #4
 8004cee:	77fb      	strb	r3, [r7, #31]
 8004cf0:	e007      	b.n	8004d02 <UART_SetConfig+0x16e>
 8004cf2:	2308      	movs	r3, #8
 8004cf4:	77fb      	strb	r3, [r7, #31]
 8004cf6:	e004      	b.n	8004d02 <UART_SetConfig+0x16e>
 8004cf8:	2310      	movs	r3, #16
 8004cfa:	77fb      	strb	r3, [r7, #31]
 8004cfc:	e001      	b.n	8004d02 <UART_SetConfig+0x16e>
 8004cfe:	2310      	movs	r3, #16
 8004d00:	77fb      	strb	r3, [r7, #31]

  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8004d02:	687b      	ldr	r3, [r7, #4]
 8004d04:	69db      	ldr	r3, [r3, #28]
 8004d06:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8004d0a:	d15b      	bne.n	8004dc4 <UART_SetConfig+0x230>
  {
    switch (clocksource)
 8004d0c:	7ffb      	ldrb	r3, [r7, #31]
 8004d0e:	2b08      	cmp	r3, #8
 8004d10:	d827      	bhi.n	8004d62 <UART_SetConfig+0x1ce>
 8004d12:	a201      	add	r2, pc, #4	; (adr r2, 8004d18 <UART_SetConfig+0x184>)
 8004d14:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004d18:	08004d3d 	.word	0x08004d3d
 8004d1c:	08004d45 	.word	0x08004d45
 8004d20:	08004d4d 	.word	0x08004d4d
 8004d24:	08004d63 	.word	0x08004d63
 8004d28:	08004d53 	.word	0x08004d53
 8004d2c:	08004d63 	.word	0x08004d63
 8004d30:	08004d63 	.word	0x08004d63
 8004d34:	08004d63 	.word	0x08004d63
 8004d38:	08004d5b 	.word	0x08004d5b
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8004d3c:	f7fe f826 	bl	8002d8c <HAL_RCC_GetPCLK1Freq>
 8004d40:	61b8      	str	r0, [r7, #24]
        break;
 8004d42:	e013      	b.n	8004d6c <UART_SetConfig+0x1d8>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8004d44:	f7fe f844 	bl	8002dd0 <HAL_RCC_GetPCLK2Freq>
 8004d48:	61b8      	str	r0, [r7, #24]
        break;
 8004d4a:	e00f      	b.n	8004d6c <UART_SetConfig+0x1d8>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8004d4c:	4b4d      	ldr	r3, [pc, #308]	; (8004e84 <UART_SetConfig+0x2f0>)
 8004d4e:	61bb      	str	r3, [r7, #24]
        break;
 8004d50:	e00c      	b.n	8004d6c <UART_SetConfig+0x1d8>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8004d52:	f7fd ffa3 	bl	8002c9c <HAL_RCC_GetSysClockFreq>
 8004d56:	61b8      	str	r0, [r7, #24]
        break;
 8004d58:	e008      	b.n	8004d6c <UART_SetConfig+0x1d8>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8004d5a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8004d5e:	61bb      	str	r3, [r7, #24]
        break;
 8004d60:	e004      	b.n	8004d6c <UART_SetConfig+0x1d8>
      default:
        pclk = 0U;
 8004d62:	2300      	movs	r3, #0
 8004d64:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 8004d66:	2301      	movs	r3, #1
 8004d68:	77bb      	strb	r3, [r7, #30]
        break;
 8004d6a:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8004d6c:	69bb      	ldr	r3, [r7, #24]
 8004d6e:	2b00      	cmp	r3, #0
 8004d70:	d074      	beq.n	8004e5c <UART_SetConfig+0x2c8>
    {
      usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8004d72:	69bb      	ldr	r3, [r7, #24]
 8004d74:	005a      	lsls	r2, r3, #1
 8004d76:	687b      	ldr	r3, [r7, #4]
 8004d78:	685b      	ldr	r3, [r3, #4]
 8004d7a:	085b      	lsrs	r3, r3, #1
 8004d7c:	441a      	add	r2, r3
 8004d7e:	687b      	ldr	r3, [r7, #4]
 8004d80:	685b      	ldr	r3, [r3, #4]
 8004d82:	fbb2 f3f3 	udiv	r3, r2, r3
 8004d86:	b29b      	uxth	r3, r3
 8004d88:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8004d8a:	693b      	ldr	r3, [r7, #16]
 8004d8c:	2b0f      	cmp	r3, #15
 8004d8e:	d916      	bls.n	8004dbe <UART_SetConfig+0x22a>
 8004d90:	693b      	ldr	r3, [r7, #16]
 8004d92:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004d96:	d212      	bcs.n	8004dbe <UART_SetConfig+0x22a>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8004d98:	693b      	ldr	r3, [r7, #16]
 8004d9a:	b29b      	uxth	r3, r3
 8004d9c:	f023 030f 	bic.w	r3, r3, #15
 8004da0:	81fb      	strh	r3, [r7, #14]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8004da2:	693b      	ldr	r3, [r7, #16]
 8004da4:	085b      	lsrs	r3, r3, #1
 8004da6:	b29b      	uxth	r3, r3
 8004da8:	f003 0307 	and.w	r3, r3, #7
 8004dac:	b29a      	uxth	r2, r3
 8004dae:	89fb      	ldrh	r3, [r7, #14]
 8004db0:	4313      	orrs	r3, r2
 8004db2:	81fb      	strh	r3, [r7, #14]
        huart->Instance->BRR = brrtemp;
 8004db4:	687b      	ldr	r3, [r7, #4]
 8004db6:	681b      	ldr	r3, [r3, #0]
 8004db8:	89fa      	ldrh	r2, [r7, #14]
 8004dba:	60da      	str	r2, [r3, #12]
 8004dbc:	e04e      	b.n	8004e5c <UART_SetConfig+0x2c8>
      }
      else
      {
        ret = HAL_ERROR;
 8004dbe:	2301      	movs	r3, #1
 8004dc0:	77bb      	strb	r3, [r7, #30]
 8004dc2:	e04b      	b.n	8004e5c <UART_SetConfig+0x2c8>
      }
    }
  }
  else
  {
    switch (clocksource)
 8004dc4:	7ffb      	ldrb	r3, [r7, #31]
 8004dc6:	2b08      	cmp	r3, #8
 8004dc8:	d827      	bhi.n	8004e1a <UART_SetConfig+0x286>
 8004dca:	a201      	add	r2, pc, #4	; (adr r2, 8004dd0 <UART_SetConfig+0x23c>)
 8004dcc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004dd0:	08004df5 	.word	0x08004df5
 8004dd4:	08004dfd 	.word	0x08004dfd
 8004dd8:	08004e05 	.word	0x08004e05
 8004ddc:	08004e1b 	.word	0x08004e1b
 8004de0:	08004e0b 	.word	0x08004e0b
 8004de4:	08004e1b 	.word	0x08004e1b
 8004de8:	08004e1b 	.word	0x08004e1b
 8004dec:	08004e1b 	.word	0x08004e1b
 8004df0:	08004e13 	.word	0x08004e13
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8004df4:	f7fd ffca 	bl	8002d8c <HAL_RCC_GetPCLK1Freq>
 8004df8:	61b8      	str	r0, [r7, #24]
        break;
 8004dfa:	e013      	b.n	8004e24 <UART_SetConfig+0x290>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8004dfc:	f7fd ffe8 	bl	8002dd0 <HAL_RCC_GetPCLK2Freq>
 8004e00:	61b8      	str	r0, [r7, #24]
        break;
 8004e02:	e00f      	b.n	8004e24 <UART_SetConfig+0x290>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8004e04:	4b1f      	ldr	r3, [pc, #124]	; (8004e84 <UART_SetConfig+0x2f0>)
 8004e06:	61bb      	str	r3, [r7, #24]
        break;
 8004e08:	e00c      	b.n	8004e24 <UART_SetConfig+0x290>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8004e0a:	f7fd ff47 	bl	8002c9c <HAL_RCC_GetSysClockFreq>
 8004e0e:	61b8      	str	r0, [r7, #24]
        break;
 8004e10:	e008      	b.n	8004e24 <UART_SetConfig+0x290>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8004e12:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8004e16:	61bb      	str	r3, [r7, #24]
        break;
 8004e18:	e004      	b.n	8004e24 <UART_SetConfig+0x290>
      default:
        pclk = 0U;
 8004e1a:	2300      	movs	r3, #0
 8004e1c:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 8004e1e:	2301      	movs	r3, #1
 8004e20:	77bb      	strb	r3, [r7, #30]
        break;
 8004e22:	bf00      	nop
    }

    if (pclk != 0U)
 8004e24:	69bb      	ldr	r3, [r7, #24]
 8004e26:	2b00      	cmp	r3, #0
 8004e28:	d018      	beq.n	8004e5c <UART_SetConfig+0x2c8>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8004e2a:	687b      	ldr	r3, [r7, #4]
 8004e2c:	685b      	ldr	r3, [r3, #4]
 8004e2e:	085a      	lsrs	r2, r3, #1
 8004e30:	69bb      	ldr	r3, [r7, #24]
 8004e32:	441a      	add	r2, r3
 8004e34:	687b      	ldr	r3, [r7, #4]
 8004e36:	685b      	ldr	r3, [r3, #4]
 8004e38:	fbb2 f3f3 	udiv	r3, r2, r3
 8004e3c:	b29b      	uxth	r3, r3
 8004e3e:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8004e40:	693b      	ldr	r3, [r7, #16]
 8004e42:	2b0f      	cmp	r3, #15
 8004e44:	d908      	bls.n	8004e58 <UART_SetConfig+0x2c4>
 8004e46:	693b      	ldr	r3, [r7, #16]
 8004e48:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004e4c:	d204      	bcs.n	8004e58 <UART_SetConfig+0x2c4>
      {
        huart->Instance->BRR = usartdiv;
 8004e4e:	687b      	ldr	r3, [r7, #4]
 8004e50:	681b      	ldr	r3, [r3, #0]
 8004e52:	693a      	ldr	r2, [r7, #16]
 8004e54:	60da      	str	r2, [r3, #12]
 8004e56:	e001      	b.n	8004e5c <UART_SetConfig+0x2c8>
      }
      else
      {
        ret = HAL_ERROR;
 8004e58:	2301      	movs	r3, #1
 8004e5a:	77bb      	strb	r3, [r7, #30]
    }
  }


  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8004e5c:	687b      	ldr	r3, [r7, #4]
 8004e5e:	2200      	movs	r2, #0
 8004e60:	665a      	str	r2, [r3, #100]	; 0x64
  huart->TxISR = NULL;
 8004e62:	687b      	ldr	r3, [r7, #4]
 8004e64:	2200      	movs	r2, #0
 8004e66:	669a      	str	r2, [r3, #104]	; 0x68

  return ret;
 8004e68:	7fbb      	ldrb	r3, [r7, #30]
}
 8004e6a:	4618      	mov	r0, r3
 8004e6c:	3720      	adds	r7, #32
 8004e6e:	46bd      	mov	sp, r7
 8004e70:	bd80      	pop	{r7, pc}
 8004e72:	bf00      	nop
 8004e74:	40013800 	.word	0x40013800
 8004e78:	40021000 	.word	0x40021000
 8004e7c:	40004400 	.word	0x40004400
 8004e80:	40004800 	.word	0x40004800
 8004e84:	007a1200 	.word	0x007a1200

08004e88 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8004e88:	b480      	push	{r7}
 8004e8a:	b083      	sub	sp, #12
 8004e8c:	af00      	add	r7, sp, #0
 8004e8e:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8004e90:	687b      	ldr	r3, [r7, #4]
 8004e92:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004e94:	f003 0301 	and.w	r3, r3, #1
 8004e98:	2b00      	cmp	r3, #0
 8004e9a:	d00a      	beq.n	8004eb2 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8004e9c:	687b      	ldr	r3, [r7, #4]
 8004e9e:	681b      	ldr	r3, [r3, #0]
 8004ea0:	685b      	ldr	r3, [r3, #4]
 8004ea2:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 8004ea6:	687b      	ldr	r3, [r7, #4]
 8004ea8:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8004eaa:	687b      	ldr	r3, [r7, #4]
 8004eac:	681b      	ldr	r3, [r3, #0]
 8004eae:	430a      	orrs	r2, r1
 8004eb0:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8004eb2:	687b      	ldr	r3, [r7, #4]
 8004eb4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004eb6:	f003 0302 	and.w	r3, r3, #2
 8004eba:	2b00      	cmp	r3, #0
 8004ebc:	d00a      	beq.n	8004ed4 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8004ebe:	687b      	ldr	r3, [r7, #4]
 8004ec0:	681b      	ldr	r3, [r3, #0]
 8004ec2:	685b      	ldr	r3, [r3, #4]
 8004ec4:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 8004ec8:	687b      	ldr	r3, [r7, #4]
 8004eca:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004ecc:	687b      	ldr	r3, [r7, #4]
 8004ece:	681b      	ldr	r3, [r3, #0]
 8004ed0:	430a      	orrs	r2, r1
 8004ed2:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8004ed4:	687b      	ldr	r3, [r7, #4]
 8004ed6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004ed8:	f003 0304 	and.w	r3, r3, #4
 8004edc:	2b00      	cmp	r3, #0
 8004ede:	d00a      	beq.n	8004ef6 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8004ee0:	687b      	ldr	r3, [r7, #4]
 8004ee2:	681b      	ldr	r3, [r3, #0]
 8004ee4:	685b      	ldr	r3, [r3, #4]
 8004ee6:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 8004eea:	687b      	ldr	r3, [r7, #4]
 8004eec:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8004eee:	687b      	ldr	r3, [r7, #4]
 8004ef0:	681b      	ldr	r3, [r3, #0]
 8004ef2:	430a      	orrs	r2, r1
 8004ef4:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8004ef6:	687b      	ldr	r3, [r7, #4]
 8004ef8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004efa:	f003 0308 	and.w	r3, r3, #8
 8004efe:	2b00      	cmp	r3, #0
 8004f00:	d00a      	beq.n	8004f18 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8004f02:	687b      	ldr	r3, [r7, #4]
 8004f04:	681b      	ldr	r3, [r3, #0]
 8004f06:	685b      	ldr	r3, [r3, #4]
 8004f08:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 8004f0c:	687b      	ldr	r3, [r7, #4]
 8004f0e:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8004f10:	687b      	ldr	r3, [r7, #4]
 8004f12:	681b      	ldr	r3, [r3, #0]
 8004f14:	430a      	orrs	r2, r1
 8004f16:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8004f18:	687b      	ldr	r3, [r7, #4]
 8004f1a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004f1c:	f003 0310 	and.w	r3, r3, #16
 8004f20:	2b00      	cmp	r3, #0
 8004f22:	d00a      	beq.n	8004f3a <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8004f24:	687b      	ldr	r3, [r7, #4]
 8004f26:	681b      	ldr	r3, [r3, #0]
 8004f28:	689b      	ldr	r3, [r3, #8]
 8004f2a:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 8004f2e:	687b      	ldr	r3, [r7, #4]
 8004f30:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8004f32:	687b      	ldr	r3, [r7, #4]
 8004f34:	681b      	ldr	r3, [r3, #0]
 8004f36:	430a      	orrs	r2, r1
 8004f38:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8004f3a:	687b      	ldr	r3, [r7, #4]
 8004f3c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004f3e:	f003 0320 	and.w	r3, r3, #32
 8004f42:	2b00      	cmp	r3, #0
 8004f44:	d00a      	beq.n	8004f5c <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8004f46:	687b      	ldr	r3, [r7, #4]
 8004f48:	681b      	ldr	r3, [r3, #0]
 8004f4a:	689b      	ldr	r3, [r3, #8]
 8004f4c:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 8004f50:	687b      	ldr	r3, [r7, #4]
 8004f52:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8004f54:	687b      	ldr	r3, [r7, #4]
 8004f56:	681b      	ldr	r3, [r3, #0]
 8004f58:	430a      	orrs	r2, r1
 8004f5a:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8004f5c:	687b      	ldr	r3, [r7, #4]
 8004f5e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004f60:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004f64:	2b00      	cmp	r3, #0
 8004f66:	d01a      	beq.n	8004f9e <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8004f68:	687b      	ldr	r3, [r7, #4]
 8004f6a:	681b      	ldr	r3, [r3, #0]
 8004f6c:	685b      	ldr	r3, [r3, #4]
 8004f6e:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 8004f72:	687b      	ldr	r3, [r7, #4]
 8004f74:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8004f76:	687b      	ldr	r3, [r7, #4]
 8004f78:	681b      	ldr	r3, [r3, #0]
 8004f7a:	430a      	orrs	r2, r1
 8004f7c:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8004f7e:	687b      	ldr	r3, [r7, #4]
 8004f80:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004f82:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8004f86:	d10a      	bne.n	8004f9e <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8004f88:	687b      	ldr	r3, [r7, #4]
 8004f8a:	681b      	ldr	r3, [r3, #0]
 8004f8c:	685b      	ldr	r3, [r3, #4]
 8004f8e:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 8004f92:	687b      	ldr	r3, [r7, #4]
 8004f94:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8004f96:	687b      	ldr	r3, [r7, #4]
 8004f98:	681b      	ldr	r3, [r3, #0]
 8004f9a:	430a      	orrs	r2, r1
 8004f9c:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8004f9e:	687b      	ldr	r3, [r7, #4]
 8004fa0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004fa2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004fa6:	2b00      	cmp	r3, #0
 8004fa8:	d00a      	beq.n	8004fc0 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8004faa:	687b      	ldr	r3, [r7, #4]
 8004fac:	681b      	ldr	r3, [r3, #0]
 8004fae:	685b      	ldr	r3, [r3, #4]
 8004fb0:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 8004fb4:	687b      	ldr	r3, [r7, #4]
 8004fb6:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8004fb8:	687b      	ldr	r3, [r7, #4]
 8004fba:	681b      	ldr	r3, [r3, #0]
 8004fbc:	430a      	orrs	r2, r1
 8004fbe:	605a      	str	r2, [r3, #4]
  }
}
 8004fc0:	bf00      	nop
 8004fc2:	370c      	adds	r7, #12
 8004fc4:	46bd      	mov	sp, r7
 8004fc6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004fca:	4770      	bx	lr

08004fcc <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8004fcc:	b580      	push	{r7, lr}
 8004fce:	b086      	sub	sp, #24
 8004fd0:	af02      	add	r7, sp, #8
 8004fd2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004fd4:	687b      	ldr	r3, [r7, #4]
 8004fd6:	2200      	movs	r2, #0
 8004fd8:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8004fdc:	f7fb ff36 	bl	8000e4c <HAL_GetTick>
 8004fe0:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8004fe2:	687b      	ldr	r3, [r7, #4]
 8004fe4:	681b      	ldr	r3, [r3, #0]
 8004fe6:	681b      	ldr	r3, [r3, #0]
 8004fe8:	f003 0308 	and.w	r3, r3, #8
 8004fec:	2b08      	cmp	r3, #8
 8004fee:	d10e      	bne.n	800500e <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8004ff0:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8004ff4:	9300      	str	r3, [sp, #0]
 8004ff6:	68fb      	ldr	r3, [r7, #12]
 8004ff8:	2200      	movs	r2, #0
 8004ffa:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 8004ffe:	6878      	ldr	r0, [r7, #4]
 8005000:	f000 f82d 	bl	800505e <UART_WaitOnFlagUntilTimeout>
 8005004:	4603      	mov	r3, r0
 8005006:	2b00      	cmp	r3, #0
 8005008:	d001      	beq.n	800500e <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 800500a:	2303      	movs	r3, #3
 800500c:	e023      	b.n	8005056 <UART_CheckIdleState+0x8a>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 800500e:	687b      	ldr	r3, [r7, #4]
 8005010:	681b      	ldr	r3, [r3, #0]
 8005012:	681b      	ldr	r3, [r3, #0]
 8005014:	f003 0304 	and.w	r3, r3, #4
 8005018:	2b04      	cmp	r3, #4
 800501a:	d10e      	bne.n	800503a <UART_CheckIdleState+0x6e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800501c:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8005020:	9300      	str	r3, [sp, #0]
 8005022:	68fb      	ldr	r3, [r7, #12]
 8005024:	2200      	movs	r2, #0
 8005026:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 800502a:	6878      	ldr	r0, [r7, #4]
 800502c:	f000 f817 	bl	800505e <UART_WaitOnFlagUntilTimeout>
 8005030:	4603      	mov	r3, r0
 8005032:	2b00      	cmp	r3, #0
 8005034:	d001      	beq.n	800503a <UART_CheckIdleState+0x6e>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8005036:	2303      	movs	r3, #3
 8005038:	e00d      	b.n	8005056 <UART_CheckIdleState+0x8a>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 800503a:	687b      	ldr	r3, [r7, #4]
 800503c:	2220      	movs	r2, #32
 800503e:	679a      	str	r2, [r3, #120]	; 0x78
  huart->RxState = HAL_UART_STATE_READY;
 8005040:	687b      	ldr	r3, [r7, #4]
 8005042:	2220      	movs	r2, #32
 8005044:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005046:	687b      	ldr	r3, [r7, #4]
 8005048:	2200      	movs	r2, #0
 800504a:	661a      	str	r2, [r3, #96]	; 0x60

  __HAL_UNLOCK(huart);
 800504c:	687b      	ldr	r3, [r7, #4]
 800504e:	2200      	movs	r2, #0
 8005050:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

  return HAL_OK;
 8005054:	2300      	movs	r3, #0
}
 8005056:	4618      	mov	r0, r3
 8005058:	3710      	adds	r7, #16
 800505a:	46bd      	mov	sp, r7
 800505c:	bd80      	pop	{r7, pc}

0800505e <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 800505e:	b580      	push	{r7, lr}
 8005060:	b09c      	sub	sp, #112	; 0x70
 8005062:	af00      	add	r7, sp, #0
 8005064:	60f8      	str	r0, [r7, #12]
 8005066:	60b9      	str	r1, [r7, #8]
 8005068:	603b      	str	r3, [r7, #0]
 800506a:	4613      	mov	r3, r2
 800506c:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800506e:	e0a5      	b.n	80051bc <UART_WaitOnFlagUntilTimeout+0x15e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8005070:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8005072:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005076:	f000 80a1 	beq.w	80051bc <UART_WaitOnFlagUntilTimeout+0x15e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800507a:	f7fb fee7 	bl	8000e4c <HAL_GetTick>
 800507e:	4602      	mov	r2, r0
 8005080:	683b      	ldr	r3, [r7, #0]
 8005082:	1ad3      	subs	r3, r2, r3
 8005084:	6fba      	ldr	r2, [r7, #120]	; 0x78
 8005086:	429a      	cmp	r2, r3
 8005088:	d302      	bcc.n	8005090 <UART_WaitOnFlagUntilTimeout+0x32>
 800508a:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800508c:	2b00      	cmp	r3, #0
 800508e:	d13e      	bne.n	800510e <UART_WaitOnFlagUntilTimeout+0xb0>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8005090:	68fb      	ldr	r3, [r7, #12]
 8005092:	681b      	ldr	r3, [r3, #0]
 8005094:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005096:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8005098:	e853 3f00 	ldrex	r3, [r3]
 800509c:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 800509e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80050a0:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 80050a4:	667b      	str	r3, [r7, #100]	; 0x64
 80050a6:	68fb      	ldr	r3, [r7, #12]
 80050a8:	681b      	ldr	r3, [r3, #0]
 80050aa:	461a      	mov	r2, r3
 80050ac:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80050ae:	65fb      	str	r3, [r7, #92]	; 0x5c
 80050b0:	65ba      	str	r2, [r7, #88]	; 0x58
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80050b2:	6db9      	ldr	r1, [r7, #88]	; 0x58
 80050b4:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 80050b6:	e841 2300 	strex	r3, r2, [r1]
 80050ba:	657b      	str	r3, [r7, #84]	; 0x54
   return(result);
 80050bc:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80050be:	2b00      	cmp	r3, #0
 80050c0:	d1e6      	bne.n	8005090 <UART_WaitOnFlagUntilTimeout+0x32>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80050c2:	68fb      	ldr	r3, [r7, #12]
 80050c4:	681b      	ldr	r3, [r3, #0]
 80050c6:	3308      	adds	r3, #8
 80050c8:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80050ca:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80050cc:	e853 3f00 	ldrex	r3, [r3]
 80050d0:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 80050d2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80050d4:	f023 0301 	bic.w	r3, r3, #1
 80050d8:	663b      	str	r3, [r7, #96]	; 0x60
 80050da:	68fb      	ldr	r3, [r7, #12]
 80050dc:	681b      	ldr	r3, [r3, #0]
 80050de:	3308      	adds	r3, #8
 80050e0:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 80050e2:	64ba      	str	r2, [r7, #72]	; 0x48
 80050e4:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80050e6:	6c79      	ldr	r1, [r7, #68]	; 0x44
 80050e8:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80050ea:	e841 2300 	strex	r3, r2, [r1]
 80050ee:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 80050f0:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80050f2:	2b00      	cmp	r3, #0
 80050f4:	d1e5      	bne.n	80050c2 <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState = HAL_UART_STATE_READY;
 80050f6:	68fb      	ldr	r3, [r7, #12]
 80050f8:	2220      	movs	r2, #32
 80050fa:	679a      	str	r2, [r3, #120]	; 0x78
        huart->RxState = HAL_UART_STATE_READY;
 80050fc:	68fb      	ldr	r3, [r7, #12]
 80050fe:	2220      	movs	r2, #32
 8005100:	67da      	str	r2, [r3, #124]	; 0x7c

        __HAL_UNLOCK(huart);
 8005102:	68fb      	ldr	r3, [r7, #12]
 8005104:	2200      	movs	r2, #0
 8005106:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

        return HAL_TIMEOUT;
 800510a:	2303      	movs	r3, #3
 800510c:	e067      	b.n	80051de <UART_WaitOnFlagUntilTimeout+0x180>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 800510e:	68fb      	ldr	r3, [r7, #12]
 8005110:	681b      	ldr	r3, [r3, #0]
 8005112:	681b      	ldr	r3, [r3, #0]
 8005114:	f003 0304 	and.w	r3, r3, #4
 8005118:	2b00      	cmp	r3, #0
 800511a:	d04f      	beq.n	80051bc <UART_WaitOnFlagUntilTimeout+0x15e>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 800511c:	68fb      	ldr	r3, [r7, #12]
 800511e:	681b      	ldr	r3, [r3, #0]
 8005120:	69db      	ldr	r3, [r3, #28]
 8005122:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8005126:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800512a:	d147      	bne.n	80051bc <UART_WaitOnFlagUntilTimeout+0x15e>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800512c:	68fb      	ldr	r3, [r7, #12]
 800512e:	681b      	ldr	r3, [r3, #0]
 8005130:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8005134:	621a      	str	r2, [r3, #32]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8005136:	68fb      	ldr	r3, [r7, #12]
 8005138:	681b      	ldr	r3, [r3, #0]
 800513a:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800513c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800513e:	e853 3f00 	ldrex	r3, [r3]
 8005142:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8005144:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005146:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 800514a:	66fb      	str	r3, [r7, #108]	; 0x6c
 800514c:	68fb      	ldr	r3, [r7, #12]
 800514e:	681b      	ldr	r3, [r3, #0]
 8005150:	461a      	mov	r2, r3
 8005152:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005154:	637b      	str	r3, [r7, #52]	; 0x34
 8005156:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005158:	6b39      	ldr	r1, [r7, #48]	; 0x30
 800515a:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800515c:	e841 2300 	strex	r3, r2, [r1]
 8005160:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 8005162:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005164:	2b00      	cmp	r3, #0
 8005166:	d1e6      	bne.n	8005136 <UART_WaitOnFlagUntilTimeout+0xd8>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005168:	68fb      	ldr	r3, [r7, #12]
 800516a:	681b      	ldr	r3, [r3, #0]
 800516c:	3308      	adds	r3, #8
 800516e:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005170:	697b      	ldr	r3, [r7, #20]
 8005172:	e853 3f00 	ldrex	r3, [r3]
 8005176:	613b      	str	r3, [r7, #16]
   return(result);
 8005178:	693b      	ldr	r3, [r7, #16]
 800517a:	f023 0301 	bic.w	r3, r3, #1
 800517e:	66bb      	str	r3, [r7, #104]	; 0x68
 8005180:	68fb      	ldr	r3, [r7, #12]
 8005182:	681b      	ldr	r3, [r3, #0]
 8005184:	3308      	adds	r3, #8
 8005186:	6eba      	ldr	r2, [r7, #104]	; 0x68
 8005188:	623a      	str	r2, [r7, #32]
 800518a:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800518c:	69f9      	ldr	r1, [r7, #28]
 800518e:	6a3a      	ldr	r2, [r7, #32]
 8005190:	e841 2300 	strex	r3, r2, [r1]
 8005194:	61bb      	str	r3, [r7, #24]
   return(result);
 8005196:	69bb      	ldr	r3, [r7, #24]
 8005198:	2b00      	cmp	r3, #0
 800519a:	d1e5      	bne.n	8005168 <UART_WaitOnFlagUntilTimeout+0x10a>

          huart->gState = HAL_UART_STATE_READY;
 800519c:	68fb      	ldr	r3, [r7, #12]
 800519e:	2220      	movs	r2, #32
 80051a0:	679a      	str	r2, [r3, #120]	; 0x78
          huart->RxState = HAL_UART_STATE_READY;
 80051a2:	68fb      	ldr	r3, [r7, #12]
 80051a4:	2220      	movs	r2, #32
 80051a6:	67da      	str	r2, [r3, #124]	; 0x7c
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 80051a8:	68fb      	ldr	r3, [r7, #12]
 80051aa:	2220      	movs	r2, #32
 80051ac:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 80051b0:	68fb      	ldr	r3, [r7, #12]
 80051b2:	2200      	movs	r2, #0
 80051b4:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

          return HAL_TIMEOUT;
 80051b8:	2303      	movs	r3, #3
 80051ba:	e010      	b.n	80051de <UART_WaitOnFlagUntilTimeout+0x180>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80051bc:	68fb      	ldr	r3, [r7, #12]
 80051be:	681b      	ldr	r3, [r3, #0]
 80051c0:	69da      	ldr	r2, [r3, #28]
 80051c2:	68bb      	ldr	r3, [r7, #8]
 80051c4:	4013      	ands	r3, r2
 80051c6:	68ba      	ldr	r2, [r7, #8]
 80051c8:	429a      	cmp	r2, r3
 80051ca:	bf0c      	ite	eq
 80051cc:	2301      	moveq	r3, #1
 80051ce:	2300      	movne	r3, #0
 80051d0:	b2db      	uxtb	r3, r3
 80051d2:	461a      	mov	r2, r3
 80051d4:	79fb      	ldrb	r3, [r7, #7]
 80051d6:	429a      	cmp	r2, r3
 80051d8:	f43f af4a 	beq.w	8005070 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 80051dc:	2300      	movs	r3, #0
}
 80051de:	4618      	mov	r0, r3
 80051e0:	3770      	adds	r7, #112	; 0x70
 80051e2:	46bd      	mov	sp, r7
 80051e4:	bd80      	pop	{r7, pc}

080051e6 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 80051e6:	b480      	push	{r7}
 80051e8:	b095      	sub	sp, #84	; 0x54
 80051ea:	af00      	add	r7, sp, #0
 80051ec:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80051ee:	687b      	ldr	r3, [r7, #4]
 80051f0:	681b      	ldr	r3, [r3, #0]
 80051f2:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80051f4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80051f6:	e853 3f00 	ldrex	r3, [r3]
 80051fa:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 80051fc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80051fe:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8005202:	64fb      	str	r3, [r7, #76]	; 0x4c
 8005204:	687b      	ldr	r3, [r7, #4]
 8005206:	681b      	ldr	r3, [r3, #0]
 8005208:	461a      	mov	r2, r3
 800520a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800520c:	643b      	str	r3, [r7, #64]	; 0x40
 800520e:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005210:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8005212:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8005214:	e841 2300 	strex	r3, r2, [r1]
 8005218:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 800521a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800521c:	2b00      	cmp	r3, #0
 800521e:	d1e6      	bne.n	80051ee <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005220:	687b      	ldr	r3, [r7, #4]
 8005222:	681b      	ldr	r3, [r3, #0]
 8005224:	3308      	adds	r3, #8
 8005226:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005228:	6a3b      	ldr	r3, [r7, #32]
 800522a:	e853 3f00 	ldrex	r3, [r3]
 800522e:	61fb      	str	r3, [r7, #28]
   return(result);
 8005230:	69fb      	ldr	r3, [r7, #28]
 8005232:	f023 0301 	bic.w	r3, r3, #1
 8005236:	64bb      	str	r3, [r7, #72]	; 0x48
 8005238:	687b      	ldr	r3, [r7, #4]
 800523a:	681b      	ldr	r3, [r3, #0]
 800523c:	3308      	adds	r3, #8
 800523e:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8005240:	62fa      	str	r2, [r7, #44]	; 0x2c
 8005242:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005244:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8005246:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8005248:	e841 2300 	strex	r3, r2, [r1]
 800524c:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800524e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005250:	2b00      	cmp	r3, #0
 8005252:	d1e5      	bne.n	8005220 <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8005254:	687b      	ldr	r3, [r7, #4]
 8005256:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8005258:	2b01      	cmp	r3, #1
 800525a:	d118      	bne.n	800528e <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800525c:	687b      	ldr	r3, [r7, #4]
 800525e:	681b      	ldr	r3, [r3, #0]
 8005260:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005262:	68fb      	ldr	r3, [r7, #12]
 8005264:	e853 3f00 	ldrex	r3, [r3]
 8005268:	60bb      	str	r3, [r7, #8]
   return(result);
 800526a:	68bb      	ldr	r3, [r7, #8]
 800526c:	f023 0310 	bic.w	r3, r3, #16
 8005270:	647b      	str	r3, [r7, #68]	; 0x44
 8005272:	687b      	ldr	r3, [r7, #4]
 8005274:	681b      	ldr	r3, [r3, #0]
 8005276:	461a      	mov	r2, r3
 8005278:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800527a:	61bb      	str	r3, [r7, #24]
 800527c:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800527e:	6979      	ldr	r1, [r7, #20]
 8005280:	69ba      	ldr	r2, [r7, #24]
 8005282:	e841 2300 	strex	r3, r2, [r1]
 8005286:	613b      	str	r3, [r7, #16]
   return(result);
 8005288:	693b      	ldr	r3, [r7, #16]
 800528a:	2b00      	cmp	r3, #0
 800528c:	d1e6      	bne.n	800525c <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800528e:	687b      	ldr	r3, [r7, #4]
 8005290:	2220      	movs	r2, #32
 8005292:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005294:	687b      	ldr	r3, [r7, #4]
 8005296:	2200      	movs	r2, #0
 8005298:	661a      	str	r2, [r3, #96]	; 0x60

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 800529a:	687b      	ldr	r3, [r7, #4]
 800529c:	2200      	movs	r2, #0
 800529e:	665a      	str	r2, [r3, #100]	; 0x64
}
 80052a0:	bf00      	nop
 80052a2:	3754      	adds	r7, #84	; 0x54
 80052a4:	46bd      	mov	sp, r7
 80052a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80052aa:	4770      	bx	lr

080052ac <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 80052ac:	b580      	push	{r7, lr}
 80052ae:	b084      	sub	sp, #16
 80052b0:	af00      	add	r7, sp, #0
 80052b2:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 80052b4:	687b      	ldr	r3, [r7, #4]
 80052b6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80052b8:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 80052ba:	68fb      	ldr	r3, [r7, #12]
 80052bc:	2200      	movs	r2, #0
 80052be:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a
  huart->TxXferCount = 0U;
 80052c2:	68fb      	ldr	r3, [r7, #12]
 80052c4:	2200      	movs	r2, #0
 80052c6:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 80052ca:	68f8      	ldr	r0, [r7, #12]
 80052cc:	f7ff fc4c 	bl	8004b68 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80052d0:	bf00      	nop
 80052d2:	3710      	adds	r7, #16
 80052d4:	46bd      	mov	sp, r7
 80052d6:	bd80      	pop	{r7, pc}

080052d8 <UART_TxISR_8BIT>:
  *         interruptions have been enabled by HAL_UART_Transmit_IT().
  * @param huart UART handle.
  * @retval None
  */
static void UART_TxISR_8BIT(UART_HandleTypeDef *huart)
{
 80052d8:	b480      	push	{r7}
 80052da:	b08f      	sub	sp, #60	; 0x3c
 80052dc:	af00      	add	r7, sp, #0
 80052de:	6078      	str	r0, [r7, #4]
  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 80052e0:	687b      	ldr	r3, [r7, #4]
 80052e2:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80052e4:	2b21      	cmp	r3, #33	; 0x21
 80052e6:	d14d      	bne.n	8005384 <UART_TxISR_8BIT+0xac>
  {
    if (huart->TxXferCount == 0U)
 80052e8:	687b      	ldr	r3, [r7, #4]
 80052ea:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 80052ee:	b29b      	uxth	r3, r3
 80052f0:	2b00      	cmp	r3, #0
 80052f2:	d132      	bne.n	800535a <UART_TxISR_8BIT+0x82>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TXEIE);
 80052f4:	687b      	ldr	r3, [r7, #4]
 80052f6:	681b      	ldr	r3, [r3, #0]
 80052f8:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80052fa:	6a3b      	ldr	r3, [r7, #32]
 80052fc:	e853 3f00 	ldrex	r3, [r3]
 8005300:	61fb      	str	r3, [r7, #28]
   return(result);
 8005302:	69fb      	ldr	r3, [r7, #28]
 8005304:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8005308:	637b      	str	r3, [r7, #52]	; 0x34
 800530a:	687b      	ldr	r3, [r7, #4]
 800530c:	681b      	ldr	r3, [r3, #0]
 800530e:	461a      	mov	r2, r3
 8005310:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005312:	62fb      	str	r3, [r7, #44]	; 0x2c
 8005314:	62ba      	str	r2, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005316:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8005318:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800531a:	e841 2300 	strex	r3, r2, [r1]
 800531e:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8005320:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005322:	2b00      	cmp	r3, #0
 8005324:	d1e6      	bne.n	80052f4 <UART_TxISR_8BIT+0x1c>

      /* Enable the UART Transmit Complete Interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8005326:	687b      	ldr	r3, [r7, #4]
 8005328:	681b      	ldr	r3, [r3, #0]
 800532a:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800532c:	68fb      	ldr	r3, [r7, #12]
 800532e:	e853 3f00 	ldrex	r3, [r3]
 8005332:	60bb      	str	r3, [r7, #8]
   return(result);
 8005334:	68bb      	ldr	r3, [r7, #8]
 8005336:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800533a:	633b      	str	r3, [r7, #48]	; 0x30
 800533c:	687b      	ldr	r3, [r7, #4]
 800533e:	681b      	ldr	r3, [r3, #0]
 8005340:	461a      	mov	r2, r3
 8005342:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005344:	61bb      	str	r3, [r7, #24]
 8005346:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005348:	6979      	ldr	r1, [r7, #20]
 800534a:	69ba      	ldr	r2, [r7, #24]
 800534c:	e841 2300 	strex	r3, r2, [r1]
 8005350:	613b      	str	r3, [r7, #16]
   return(result);
 8005352:	693b      	ldr	r3, [r7, #16]
 8005354:	2b00      	cmp	r3, #0
 8005356:	d1e6      	bne.n	8005326 <UART_TxISR_8BIT+0x4e>
      huart->Instance->TDR = (uint8_t)(*huart->pTxBuffPtr & (uint8_t)0xFF);
      huart->pTxBuffPtr++;
      huart->TxXferCount--;
    }
  }
}
 8005358:	e014      	b.n	8005384 <UART_TxISR_8BIT+0xac>
      huart->Instance->TDR = (uint8_t)(*huart->pTxBuffPtr & (uint8_t)0xFF);
 800535a:	687b      	ldr	r3, [r7, #4]
 800535c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800535e:	781a      	ldrb	r2, [r3, #0]
 8005360:	687b      	ldr	r3, [r7, #4]
 8005362:	681b      	ldr	r3, [r3, #0]
 8005364:	b292      	uxth	r2, r2
 8005366:	851a      	strh	r2, [r3, #40]	; 0x28
      huart->pTxBuffPtr++;
 8005368:	687b      	ldr	r3, [r7, #4]
 800536a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800536c:	1c5a      	adds	r2, r3, #1
 800536e:	687b      	ldr	r3, [r7, #4]
 8005370:	64da      	str	r2, [r3, #76]	; 0x4c
      huart->TxXferCount--;
 8005372:	687b      	ldr	r3, [r7, #4]
 8005374:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 8005378:	b29b      	uxth	r3, r3
 800537a:	3b01      	subs	r3, #1
 800537c:	b29a      	uxth	r2, r3
 800537e:	687b      	ldr	r3, [r7, #4]
 8005380:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
}
 8005384:	bf00      	nop
 8005386:	373c      	adds	r7, #60	; 0x3c
 8005388:	46bd      	mov	sp, r7
 800538a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800538e:	4770      	bx	lr

08005390 <UART_TxISR_16BIT>:
  *         interruptions have been enabled by HAL_UART_Transmit_IT().
  * @param huart UART handle.
  * @retval None
  */
static void UART_TxISR_16BIT(UART_HandleTypeDef *huart)
{
 8005390:	b480      	push	{r7}
 8005392:	b091      	sub	sp, #68	; 0x44
 8005394:	af00      	add	r7, sp, #0
 8005396:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8005398:	687b      	ldr	r3, [r7, #4]
 800539a:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800539c:	2b21      	cmp	r3, #33	; 0x21
 800539e:	d151      	bne.n	8005444 <UART_TxISR_16BIT+0xb4>
  {
    if (huart->TxXferCount == 0U)
 80053a0:	687b      	ldr	r3, [r7, #4]
 80053a2:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 80053a6:	b29b      	uxth	r3, r3
 80053a8:	2b00      	cmp	r3, #0
 80053aa:	d132      	bne.n	8005412 <UART_TxISR_16BIT+0x82>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TXEIE);
 80053ac:	687b      	ldr	r3, [r7, #4]
 80053ae:	681b      	ldr	r3, [r3, #0]
 80053b0:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80053b2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80053b4:	e853 3f00 	ldrex	r3, [r3]
 80053b8:	623b      	str	r3, [r7, #32]
   return(result);
 80053ba:	6a3b      	ldr	r3, [r7, #32]
 80053bc:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80053c0:	63bb      	str	r3, [r7, #56]	; 0x38
 80053c2:	687b      	ldr	r3, [r7, #4]
 80053c4:	681b      	ldr	r3, [r3, #0]
 80053c6:	461a      	mov	r2, r3
 80053c8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80053ca:	633b      	str	r3, [r7, #48]	; 0x30
 80053cc:	62fa      	str	r2, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80053ce:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 80053d0:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80053d2:	e841 2300 	strex	r3, r2, [r1]
 80053d6:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 80053d8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80053da:	2b00      	cmp	r3, #0
 80053dc:	d1e6      	bne.n	80053ac <UART_TxISR_16BIT+0x1c>

      /* Enable the UART Transmit Complete Interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 80053de:	687b      	ldr	r3, [r7, #4]
 80053e0:	681b      	ldr	r3, [r3, #0]
 80053e2:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80053e4:	693b      	ldr	r3, [r7, #16]
 80053e6:	e853 3f00 	ldrex	r3, [r3]
 80053ea:	60fb      	str	r3, [r7, #12]
   return(result);
 80053ec:	68fb      	ldr	r3, [r7, #12]
 80053ee:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80053f2:	637b      	str	r3, [r7, #52]	; 0x34
 80053f4:	687b      	ldr	r3, [r7, #4]
 80053f6:	681b      	ldr	r3, [r3, #0]
 80053f8:	461a      	mov	r2, r3
 80053fa:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80053fc:	61fb      	str	r3, [r7, #28]
 80053fe:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005400:	69b9      	ldr	r1, [r7, #24]
 8005402:	69fa      	ldr	r2, [r7, #28]
 8005404:	e841 2300 	strex	r3, r2, [r1]
 8005408:	617b      	str	r3, [r7, #20]
   return(result);
 800540a:	697b      	ldr	r3, [r7, #20]
 800540c:	2b00      	cmp	r3, #0
 800540e:	d1e6      	bne.n	80053de <UART_TxISR_16BIT+0x4e>
      huart->Instance->TDR = (((uint32_t)(*tmp)) & 0x01FFUL);
      huart->pTxBuffPtr += 2U;
      huart->TxXferCount--;
    }
  }
}
 8005410:	e018      	b.n	8005444 <UART_TxISR_16BIT+0xb4>
      tmp = (uint16_t *) huart->pTxBuffPtr;
 8005412:	687b      	ldr	r3, [r7, #4]
 8005414:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005416:	63fb      	str	r3, [r7, #60]	; 0x3c
      huart->Instance->TDR = (((uint32_t)(*tmp)) & 0x01FFUL);
 8005418:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800541a:	881a      	ldrh	r2, [r3, #0]
 800541c:	687b      	ldr	r3, [r7, #4]
 800541e:	681b      	ldr	r3, [r3, #0]
 8005420:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8005424:	b292      	uxth	r2, r2
 8005426:	851a      	strh	r2, [r3, #40]	; 0x28
      huart->pTxBuffPtr += 2U;
 8005428:	687b      	ldr	r3, [r7, #4]
 800542a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800542c:	1c9a      	adds	r2, r3, #2
 800542e:	687b      	ldr	r3, [r7, #4]
 8005430:	64da      	str	r2, [r3, #76]	; 0x4c
      huart->TxXferCount--;
 8005432:	687b      	ldr	r3, [r7, #4]
 8005434:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 8005438:	b29b      	uxth	r3, r3
 800543a:	3b01      	subs	r3, #1
 800543c:	b29a      	uxth	r2, r3
 800543e:	687b      	ldr	r3, [r7, #4]
 8005440:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
}
 8005444:	bf00      	nop
 8005446:	3744      	adds	r7, #68	; 0x44
 8005448:	46bd      	mov	sp, r7
 800544a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800544e:	4770      	bx	lr

08005450 <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8005450:	b580      	push	{r7, lr}
 8005452:	b088      	sub	sp, #32
 8005454:	af00      	add	r7, sp, #0
 8005456:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8005458:	687b      	ldr	r3, [r7, #4]
 800545a:	681b      	ldr	r3, [r3, #0]
 800545c:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800545e:	68fb      	ldr	r3, [r7, #12]
 8005460:	e853 3f00 	ldrex	r3, [r3]
 8005464:	60bb      	str	r3, [r7, #8]
   return(result);
 8005466:	68bb      	ldr	r3, [r7, #8]
 8005468:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800546c:	61fb      	str	r3, [r7, #28]
 800546e:	687b      	ldr	r3, [r7, #4]
 8005470:	681b      	ldr	r3, [r3, #0]
 8005472:	461a      	mov	r2, r3
 8005474:	69fb      	ldr	r3, [r7, #28]
 8005476:	61bb      	str	r3, [r7, #24]
 8005478:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800547a:	6979      	ldr	r1, [r7, #20]
 800547c:	69ba      	ldr	r2, [r7, #24]
 800547e:	e841 2300 	strex	r3, r2, [r1]
 8005482:	613b      	str	r3, [r7, #16]
   return(result);
 8005484:	693b      	ldr	r3, [r7, #16]
 8005486:	2b00      	cmp	r3, #0
 8005488:	d1e6      	bne.n	8005458 <UART_EndTransmit_IT+0x8>

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800548a:	687b      	ldr	r3, [r7, #4]
 800548c:	2220      	movs	r2, #32
 800548e:	679a      	str	r2, [r3, #120]	; 0x78

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 8005490:	687b      	ldr	r3, [r7, #4]
 8005492:	2200      	movs	r2, #0
 8005494:	669a      	str	r2, [r3, #104]	; 0x68
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8005496:	6878      	ldr	r0, [r7, #4]
 8005498:	f7fb fbd2 	bl	8000c40 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800549c:	bf00      	nop
 800549e:	3720      	adds	r7, #32
 80054a0:	46bd      	mov	sp, r7
 80054a2:	bd80      	pop	{r7, pc}

080054a4 <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 80054a4:	b480      	push	{r7}
 80054a6:	b083      	sub	sp, #12
 80054a8:	af00      	add	r7, sp, #0
 80054aa:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 80054ac:	bf00      	nop
 80054ae:	370c      	adds	r7, #12
 80054b0:	46bd      	mov	sp, r7
 80054b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80054b6:	4770      	bx	lr

080054b8 <__errno>:
 80054b8:	4b01      	ldr	r3, [pc, #4]	; (80054c0 <__errno+0x8>)
 80054ba:	6818      	ldr	r0, [r3, #0]
 80054bc:	4770      	bx	lr
 80054be:	bf00      	nop
 80054c0:	2000000c 	.word	0x2000000c

080054c4 <__libc_init_array>:
 80054c4:	b570      	push	{r4, r5, r6, lr}
 80054c6:	4d0d      	ldr	r5, [pc, #52]	; (80054fc <__libc_init_array+0x38>)
 80054c8:	4c0d      	ldr	r4, [pc, #52]	; (8005500 <__libc_init_array+0x3c>)
 80054ca:	1b64      	subs	r4, r4, r5
 80054cc:	10a4      	asrs	r4, r4, #2
 80054ce:	2600      	movs	r6, #0
 80054d0:	42a6      	cmp	r6, r4
 80054d2:	d109      	bne.n	80054e8 <__libc_init_array+0x24>
 80054d4:	4d0b      	ldr	r5, [pc, #44]	; (8005504 <__libc_init_array+0x40>)
 80054d6:	4c0c      	ldr	r4, [pc, #48]	; (8005508 <__libc_init_array+0x44>)
 80054d8:	f000 fc8e 	bl	8005df8 <_init>
 80054dc:	1b64      	subs	r4, r4, r5
 80054de:	10a4      	asrs	r4, r4, #2
 80054e0:	2600      	movs	r6, #0
 80054e2:	42a6      	cmp	r6, r4
 80054e4:	d105      	bne.n	80054f2 <__libc_init_array+0x2e>
 80054e6:	bd70      	pop	{r4, r5, r6, pc}
 80054e8:	f855 3b04 	ldr.w	r3, [r5], #4
 80054ec:	4798      	blx	r3
 80054ee:	3601      	adds	r6, #1
 80054f0:	e7ee      	b.n	80054d0 <__libc_init_array+0xc>
 80054f2:	f855 3b04 	ldr.w	r3, [r5], #4
 80054f6:	4798      	blx	r3
 80054f8:	3601      	adds	r6, #1
 80054fa:	e7f2      	b.n	80054e2 <__libc_init_array+0x1e>
 80054fc:	08005e88 	.word	0x08005e88
 8005500:	08005e88 	.word	0x08005e88
 8005504:	08005e88 	.word	0x08005e88
 8005508:	08005e8c 	.word	0x08005e8c

0800550c <memset>:
 800550c:	4402      	add	r2, r0
 800550e:	4603      	mov	r3, r0
 8005510:	4293      	cmp	r3, r2
 8005512:	d100      	bne.n	8005516 <memset+0xa>
 8005514:	4770      	bx	lr
 8005516:	f803 1b01 	strb.w	r1, [r3], #1
 800551a:	e7f9      	b.n	8005510 <memset+0x4>

0800551c <siprintf>:
 800551c:	b40e      	push	{r1, r2, r3}
 800551e:	b500      	push	{lr}
 8005520:	b09c      	sub	sp, #112	; 0x70
 8005522:	ab1d      	add	r3, sp, #116	; 0x74
 8005524:	9002      	str	r0, [sp, #8]
 8005526:	9006      	str	r0, [sp, #24]
 8005528:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 800552c:	4809      	ldr	r0, [pc, #36]	; (8005554 <siprintf+0x38>)
 800552e:	9107      	str	r1, [sp, #28]
 8005530:	9104      	str	r1, [sp, #16]
 8005532:	4909      	ldr	r1, [pc, #36]	; (8005558 <siprintf+0x3c>)
 8005534:	f853 2b04 	ldr.w	r2, [r3], #4
 8005538:	9105      	str	r1, [sp, #20]
 800553a:	6800      	ldr	r0, [r0, #0]
 800553c:	9301      	str	r3, [sp, #4]
 800553e:	a902      	add	r1, sp, #8
 8005540:	f000 f868 	bl	8005614 <_svfiprintf_r>
 8005544:	9b02      	ldr	r3, [sp, #8]
 8005546:	2200      	movs	r2, #0
 8005548:	701a      	strb	r2, [r3, #0]
 800554a:	b01c      	add	sp, #112	; 0x70
 800554c:	f85d eb04 	ldr.w	lr, [sp], #4
 8005550:	b003      	add	sp, #12
 8005552:	4770      	bx	lr
 8005554:	2000000c 	.word	0x2000000c
 8005558:	ffff0208 	.word	0xffff0208

0800555c <__ssputs_r>:
 800555c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8005560:	688e      	ldr	r6, [r1, #8]
 8005562:	429e      	cmp	r6, r3
 8005564:	4682      	mov	sl, r0
 8005566:	460c      	mov	r4, r1
 8005568:	4690      	mov	r8, r2
 800556a:	461f      	mov	r7, r3
 800556c:	d838      	bhi.n	80055e0 <__ssputs_r+0x84>
 800556e:	898a      	ldrh	r2, [r1, #12]
 8005570:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8005574:	d032      	beq.n	80055dc <__ssputs_r+0x80>
 8005576:	6825      	ldr	r5, [r4, #0]
 8005578:	6909      	ldr	r1, [r1, #16]
 800557a:	eba5 0901 	sub.w	r9, r5, r1
 800557e:	6965      	ldr	r5, [r4, #20]
 8005580:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8005584:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8005588:	3301      	adds	r3, #1
 800558a:	444b      	add	r3, r9
 800558c:	106d      	asrs	r5, r5, #1
 800558e:	429d      	cmp	r5, r3
 8005590:	bf38      	it	cc
 8005592:	461d      	movcc	r5, r3
 8005594:	0553      	lsls	r3, r2, #21
 8005596:	d531      	bpl.n	80055fc <__ssputs_r+0xa0>
 8005598:	4629      	mov	r1, r5
 800559a:	f000 fb63 	bl	8005c64 <_malloc_r>
 800559e:	4606      	mov	r6, r0
 80055a0:	b950      	cbnz	r0, 80055b8 <__ssputs_r+0x5c>
 80055a2:	230c      	movs	r3, #12
 80055a4:	f8ca 3000 	str.w	r3, [sl]
 80055a8:	89a3      	ldrh	r3, [r4, #12]
 80055aa:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80055ae:	81a3      	strh	r3, [r4, #12]
 80055b0:	f04f 30ff 	mov.w	r0, #4294967295
 80055b4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80055b8:	6921      	ldr	r1, [r4, #16]
 80055ba:	464a      	mov	r2, r9
 80055bc:	f000 fabe 	bl	8005b3c <memcpy>
 80055c0:	89a3      	ldrh	r3, [r4, #12]
 80055c2:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 80055c6:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80055ca:	81a3      	strh	r3, [r4, #12]
 80055cc:	6126      	str	r6, [r4, #16]
 80055ce:	6165      	str	r5, [r4, #20]
 80055d0:	444e      	add	r6, r9
 80055d2:	eba5 0509 	sub.w	r5, r5, r9
 80055d6:	6026      	str	r6, [r4, #0]
 80055d8:	60a5      	str	r5, [r4, #8]
 80055da:	463e      	mov	r6, r7
 80055dc:	42be      	cmp	r6, r7
 80055de:	d900      	bls.n	80055e2 <__ssputs_r+0x86>
 80055e0:	463e      	mov	r6, r7
 80055e2:	6820      	ldr	r0, [r4, #0]
 80055e4:	4632      	mov	r2, r6
 80055e6:	4641      	mov	r1, r8
 80055e8:	f000 fab6 	bl	8005b58 <memmove>
 80055ec:	68a3      	ldr	r3, [r4, #8]
 80055ee:	1b9b      	subs	r3, r3, r6
 80055f0:	60a3      	str	r3, [r4, #8]
 80055f2:	6823      	ldr	r3, [r4, #0]
 80055f4:	4433      	add	r3, r6
 80055f6:	6023      	str	r3, [r4, #0]
 80055f8:	2000      	movs	r0, #0
 80055fa:	e7db      	b.n	80055b4 <__ssputs_r+0x58>
 80055fc:	462a      	mov	r2, r5
 80055fe:	f000 fba5 	bl	8005d4c <_realloc_r>
 8005602:	4606      	mov	r6, r0
 8005604:	2800      	cmp	r0, #0
 8005606:	d1e1      	bne.n	80055cc <__ssputs_r+0x70>
 8005608:	6921      	ldr	r1, [r4, #16]
 800560a:	4650      	mov	r0, sl
 800560c:	f000 fabe 	bl	8005b8c <_free_r>
 8005610:	e7c7      	b.n	80055a2 <__ssputs_r+0x46>
	...

08005614 <_svfiprintf_r>:
 8005614:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005618:	4698      	mov	r8, r3
 800561a:	898b      	ldrh	r3, [r1, #12]
 800561c:	061b      	lsls	r3, r3, #24
 800561e:	b09d      	sub	sp, #116	; 0x74
 8005620:	4607      	mov	r7, r0
 8005622:	460d      	mov	r5, r1
 8005624:	4614      	mov	r4, r2
 8005626:	d50e      	bpl.n	8005646 <_svfiprintf_r+0x32>
 8005628:	690b      	ldr	r3, [r1, #16]
 800562a:	b963      	cbnz	r3, 8005646 <_svfiprintf_r+0x32>
 800562c:	2140      	movs	r1, #64	; 0x40
 800562e:	f000 fb19 	bl	8005c64 <_malloc_r>
 8005632:	6028      	str	r0, [r5, #0]
 8005634:	6128      	str	r0, [r5, #16]
 8005636:	b920      	cbnz	r0, 8005642 <_svfiprintf_r+0x2e>
 8005638:	230c      	movs	r3, #12
 800563a:	603b      	str	r3, [r7, #0]
 800563c:	f04f 30ff 	mov.w	r0, #4294967295
 8005640:	e0d1      	b.n	80057e6 <_svfiprintf_r+0x1d2>
 8005642:	2340      	movs	r3, #64	; 0x40
 8005644:	616b      	str	r3, [r5, #20]
 8005646:	2300      	movs	r3, #0
 8005648:	9309      	str	r3, [sp, #36]	; 0x24
 800564a:	2320      	movs	r3, #32
 800564c:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8005650:	f8cd 800c 	str.w	r8, [sp, #12]
 8005654:	2330      	movs	r3, #48	; 0x30
 8005656:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 8005800 <_svfiprintf_r+0x1ec>
 800565a:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800565e:	f04f 0901 	mov.w	r9, #1
 8005662:	4623      	mov	r3, r4
 8005664:	469a      	mov	sl, r3
 8005666:	f813 2b01 	ldrb.w	r2, [r3], #1
 800566a:	b10a      	cbz	r2, 8005670 <_svfiprintf_r+0x5c>
 800566c:	2a25      	cmp	r2, #37	; 0x25
 800566e:	d1f9      	bne.n	8005664 <_svfiprintf_r+0x50>
 8005670:	ebba 0b04 	subs.w	fp, sl, r4
 8005674:	d00b      	beq.n	800568e <_svfiprintf_r+0x7a>
 8005676:	465b      	mov	r3, fp
 8005678:	4622      	mov	r2, r4
 800567a:	4629      	mov	r1, r5
 800567c:	4638      	mov	r0, r7
 800567e:	f7ff ff6d 	bl	800555c <__ssputs_r>
 8005682:	3001      	adds	r0, #1
 8005684:	f000 80aa 	beq.w	80057dc <_svfiprintf_r+0x1c8>
 8005688:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800568a:	445a      	add	r2, fp
 800568c:	9209      	str	r2, [sp, #36]	; 0x24
 800568e:	f89a 3000 	ldrb.w	r3, [sl]
 8005692:	2b00      	cmp	r3, #0
 8005694:	f000 80a2 	beq.w	80057dc <_svfiprintf_r+0x1c8>
 8005698:	2300      	movs	r3, #0
 800569a:	f04f 32ff 	mov.w	r2, #4294967295
 800569e:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80056a2:	f10a 0a01 	add.w	sl, sl, #1
 80056a6:	9304      	str	r3, [sp, #16]
 80056a8:	9307      	str	r3, [sp, #28]
 80056aa:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 80056ae:	931a      	str	r3, [sp, #104]	; 0x68
 80056b0:	4654      	mov	r4, sl
 80056b2:	2205      	movs	r2, #5
 80056b4:	f814 1b01 	ldrb.w	r1, [r4], #1
 80056b8:	4851      	ldr	r0, [pc, #324]	; (8005800 <_svfiprintf_r+0x1ec>)
 80056ba:	f7fa fd91 	bl	80001e0 <memchr>
 80056be:	9a04      	ldr	r2, [sp, #16]
 80056c0:	b9d8      	cbnz	r0, 80056fa <_svfiprintf_r+0xe6>
 80056c2:	06d0      	lsls	r0, r2, #27
 80056c4:	bf44      	itt	mi
 80056c6:	2320      	movmi	r3, #32
 80056c8:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80056cc:	0711      	lsls	r1, r2, #28
 80056ce:	bf44      	itt	mi
 80056d0:	232b      	movmi	r3, #43	; 0x2b
 80056d2:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80056d6:	f89a 3000 	ldrb.w	r3, [sl]
 80056da:	2b2a      	cmp	r3, #42	; 0x2a
 80056dc:	d015      	beq.n	800570a <_svfiprintf_r+0xf6>
 80056de:	9a07      	ldr	r2, [sp, #28]
 80056e0:	4654      	mov	r4, sl
 80056e2:	2000      	movs	r0, #0
 80056e4:	f04f 0c0a 	mov.w	ip, #10
 80056e8:	4621      	mov	r1, r4
 80056ea:	f811 3b01 	ldrb.w	r3, [r1], #1
 80056ee:	3b30      	subs	r3, #48	; 0x30
 80056f0:	2b09      	cmp	r3, #9
 80056f2:	d94e      	bls.n	8005792 <_svfiprintf_r+0x17e>
 80056f4:	b1b0      	cbz	r0, 8005724 <_svfiprintf_r+0x110>
 80056f6:	9207      	str	r2, [sp, #28]
 80056f8:	e014      	b.n	8005724 <_svfiprintf_r+0x110>
 80056fa:	eba0 0308 	sub.w	r3, r0, r8
 80056fe:	fa09 f303 	lsl.w	r3, r9, r3
 8005702:	4313      	orrs	r3, r2
 8005704:	9304      	str	r3, [sp, #16]
 8005706:	46a2      	mov	sl, r4
 8005708:	e7d2      	b.n	80056b0 <_svfiprintf_r+0x9c>
 800570a:	9b03      	ldr	r3, [sp, #12]
 800570c:	1d19      	adds	r1, r3, #4
 800570e:	681b      	ldr	r3, [r3, #0]
 8005710:	9103      	str	r1, [sp, #12]
 8005712:	2b00      	cmp	r3, #0
 8005714:	bfbb      	ittet	lt
 8005716:	425b      	neglt	r3, r3
 8005718:	f042 0202 	orrlt.w	r2, r2, #2
 800571c:	9307      	strge	r3, [sp, #28]
 800571e:	9307      	strlt	r3, [sp, #28]
 8005720:	bfb8      	it	lt
 8005722:	9204      	strlt	r2, [sp, #16]
 8005724:	7823      	ldrb	r3, [r4, #0]
 8005726:	2b2e      	cmp	r3, #46	; 0x2e
 8005728:	d10c      	bne.n	8005744 <_svfiprintf_r+0x130>
 800572a:	7863      	ldrb	r3, [r4, #1]
 800572c:	2b2a      	cmp	r3, #42	; 0x2a
 800572e:	d135      	bne.n	800579c <_svfiprintf_r+0x188>
 8005730:	9b03      	ldr	r3, [sp, #12]
 8005732:	1d1a      	adds	r2, r3, #4
 8005734:	681b      	ldr	r3, [r3, #0]
 8005736:	9203      	str	r2, [sp, #12]
 8005738:	2b00      	cmp	r3, #0
 800573a:	bfb8      	it	lt
 800573c:	f04f 33ff 	movlt.w	r3, #4294967295
 8005740:	3402      	adds	r4, #2
 8005742:	9305      	str	r3, [sp, #20]
 8005744:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 8005810 <_svfiprintf_r+0x1fc>
 8005748:	7821      	ldrb	r1, [r4, #0]
 800574a:	2203      	movs	r2, #3
 800574c:	4650      	mov	r0, sl
 800574e:	f7fa fd47 	bl	80001e0 <memchr>
 8005752:	b140      	cbz	r0, 8005766 <_svfiprintf_r+0x152>
 8005754:	2340      	movs	r3, #64	; 0x40
 8005756:	eba0 000a 	sub.w	r0, r0, sl
 800575a:	fa03 f000 	lsl.w	r0, r3, r0
 800575e:	9b04      	ldr	r3, [sp, #16]
 8005760:	4303      	orrs	r3, r0
 8005762:	3401      	adds	r4, #1
 8005764:	9304      	str	r3, [sp, #16]
 8005766:	f814 1b01 	ldrb.w	r1, [r4], #1
 800576a:	4826      	ldr	r0, [pc, #152]	; (8005804 <_svfiprintf_r+0x1f0>)
 800576c:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8005770:	2206      	movs	r2, #6
 8005772:	f7fa fd35 	bl	80001e0 <memchr>
 8005776:	2800      	cmp	r0, #0
 8005778:	d038      	beq.n	80057ec <_svfiprintf_r+0x1d8>
 800577a:	4b23      	ldr	r3, [pc, #140]	; (8005808 <_svfiprintf_r+0x1f4>)
 800577c:	bb1b      	cbnz	r3, 80057c6 <_svfiprintf_r+0x1b2>
 800577e:	9b03      	ldr	r3, [sp, #12]
 8005780:	3307      	adds	r3, #7
 8005782:	f023 0307 	bic.w	r3, r3, #7
 8005786:	3308      	adds	r3, #8
 8005788:	9303      	str	r3, [sp, #12]
 800578a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800578c:	4433      	add	r3, r6
 800578e:	9309      	str	r3, [sp, #36]	; 0x24
 8005790:	e767      	b.n	8005662 <_svfiprintf_r+0x4e>
 8005792:	fb0c 3202 	mla	r2, ip, r2, r3
 8005796:	460c      	mov	r4, r1
 8005798:	2001      	movs	r0, #1
 800579a:	e7a5      	b.n	80056e8 <_svfiprintf_r+0xd4>
 800579c:	2300      	movs	r3, #0
 800579e:	3401      	adds	r4, #1
 80057a0:	9305      	str	r3, [sp, #20]
 80057a2:	4619      	mov	r1, r3
 80057a4:	f04f 0c0a 	mov.w	ip, #10
 80057a8:	4620      	mov	r0, r4
 80057aa:	f810 2b01 	ldrb.w	r2, [r0], #1
 80057ae:	3a30      	subs	r2, #48	; 0x30
 80057b0:	2a09      	cmp	r2, #9
 80057b2:	d903      	bls.n	80057bc <_svfiprintf_r+0x1a8>
 80057b4:	2b00      	cmp	r3, #0
 80057b6:	d0c5      	beq.n	8005744 <_svfiprintf_r+0x130>
 80057b8:	9105      	str	r1, [sp, #20]
 80057ba:	e7c3      	b.n	8005744 <_svfiprintf_r+0x130>
 80057bc:	fb0c 2101 	mla	r1, ip, r1, r2
 80057c0:	4604      	mov	r4, r0
 80057c2:	2301      	movs	r3, #1
 80057c4:	e7f0      	b.n	80057a8 <_svfiprintf_r+0x194>
 80057c6:	ab03      	add	r3, sp, #12
 80057c8:	9300      	str	r3, [sp, #0]
 80057ca:	462a      	mov	r2, r5
 80057cc:	4b0f      	ldr	r3, [pc, #60]	; (800580c <_svfiprintf_r+0x1f8>)
 80057ce:	a904      	add	r1, sp, #16
 80057d0:	4638      	mov	r0, r7
 80057d2:	f3af 8000 	nop.w
 80057d6:	1c42      	adds	r2, r0, #1
 80057d8:	4606      	mov	r6, r0
 80057da:	d1d6      	bne.n	800578a <_svfiprintf_r+0x176>
 80057dc:	89ab      	ldrh	r3, [r5, #12]
 80057de:	065b      	lsls	r3, r3, #25
 80057e0:	f53f af2c 	bmi.w	800563c <_svfiprintf_r+0x28>
 80057e4:	9809      	ldr	r0, [sp, #36]	; 0x24
 80057e6:	b01d      	add	sp, #116	; 0x74
 80057e8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80057ec:	ab03      	add	r3, sp, #12
 80057ee:	9300      	str	r3, [sp, #0]
 80057f0:	462a      	mov	r2, r5
 80057f2:	4b06      	ldr	r3, [pc, #24]	; (800580c <_svfiprintf_r+0x1f8>)
 80057f4:	a904      	add	r1, sp, #16
 80057f6:	4638      	mov	r0, r7
 80057f8:	f000 f87a 	bl	80058f0 <_printf_i>
 80057fc:	e7eb      	b.n	80057d6 <_svfiprintf_r+0x1c2>
 80057fe:	bf00      	nop
 8005800:	08005e54 	.word	0x08005e54
 8005804:	08005e5e 	.word	0x08005e5e
 8005808:	00000000 	.word	0x00000000
 800580c:	0800555d 	.word	0x0800555d
 8005810:	08005e5a 	.word	0x08005e5a

08005814 <_printf_common>:
 8005814:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8005818:	4616      	mov	r6, r2
 800581a:	4699      	mov	r9, r3
 800581c:	688a      	ldr	r2, [r1, #8]
 800581e:	690b      	ldr	r3, [r1, #16]
 8005820:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8005824:	4293      	cmp	r3, r2
 8005826:	bfb8      	it	lt
 8005828:	4613      	movlt	r3, r2
 800582a:	6033      	str	r3, [r6, #0]
 800582c:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8005830:	4607      	mov	r7, r0
 8005832:	460c      	mov	r4, r1
 8005834:	b10a      	cbz	r2, 800583a <_printf_common+0x26>
 8005836:	3301      	adds	r3, #1
 8005838:	6033      	str	r3, [r6, #0]
 800583a:	6823      	ldr	r3, [r4, #0]
 800583c:	0699      	lsls	r1, r3, #26
 800583e:	bf42      	ittt	mi
 8005840:	6833      	ldrmi	r3, [r6, #0]
 8005842:	3302      	addmi	r3, #2
 8005844:	6033      	strmi	r3, [r6, #0]
 8005846:	6825      	ldr	r5, [r4, #0]
 8005848:	f015 0506 	ands.w	r5, r5, #6
 800584c:	d106      	bne.n	800585c <_printf_common+0x48>
 800584e:	f104 0a19 	add.w	sl, r4, #25
 8005852:	68e3      	ldr	r3, [r4, #12]
 8005854:	6832      	ldr	r2, [r6, #0]
 8005856:	1a9b      	subs	r3, r3, r2
 8005858:	42ab      	cmp	r3, r5
 800585a:	dc26      	bgt.n	80058aa <_printf_common+0x96>
 800585c:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8005860:	1e13      	subs	r3, r2, #0
 8005862:	6822      	ldr	r2, [r4, #0]
 8005864:	bf18      	it	ne
 8005866:	2301      	movne	r3, #1
 8005868:	0692      	lsls	r2, r2, #26
 800586a:	d42b      	bmi.n	80058c4 <_printf_common+0xb0>
 800586c:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8005870:	4649      	mov	r1, r9
 8005872:	4638      	mov	r0, r7
 8005874:	47c0      	blx	r8
 8005876:	3001      	adds	r0, #1
 8005878:	d01e      	beq.n	80058b8 <_printf_common+0xa4>
 800587a:	6823      	ldr	r3, [r4, #0]
 800587c:	68e5      	ldr	r5, [r4, #12]
 800587e:	6832      	ldr	r2, [r6, #0]
 8005880:	f003 0306 	and.w	r3, r3, #6
 8005884:	2b04      	cmp	r3, #4
 8005886:	bf08      	it	eq
 8005888:	1aad      	subeq	r5, r5, r2
 800588a:	68a3      	ldr	r3, [r4, #8]
 800588c:	6922      	ldr	r2, [r4, #16]
 800588e:	bf0c      	ite	eq
 8005890:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8005894:	2500      	movne	r5, #0
 8005896:	4293      	cmp	r3, r2
 8005898:	bfc4      	itt	gt
 800589a:	1a9b      	subgt	r3, r3, r2
 800589c:	18ed      	addgt	r5, r5, r3
 800589e:	2600      	movs	r6, #0
 80058a0:	341a      	adds	r4, #26
 80058a2:	42b5      	cmp	r5, r6
 80058a4:	d11a      	bne.n	80058dc <_printf_common+0xc8>
 80058a6:	2000      	movs	r0, #0
 80058a8:	e008      	b.n	80058bc <_printf_common+0xa8>
 80058aa:	2301      	movs	r3, #1
 80058ac:	4652      	mov	r2, sl
 80058ae:	4649      	mov	r1, r9
 80058b0:	4638      	mov	r0, r7
 80058b2:	47c0      	blx	r8
 80058b4:	3001      	adds	r0, #1
 80058b6:	d103      	bne.n	80058c0 <_printf_common+0xac>
 80058b8:	f04f 30ff 	mov.w	r0, #4294967295
 80058bc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80058c0:	3501      	adds	r5, #1
 80058c2:	e7c6      	b.n	8005852 <_printf_common+0x3e>
 80058c4:	18e1      	adds	r1, r4, r3
 80058c6:	1c5a      	adds	r2, r3, #1
 80058c8:	2030      	movs	r0, #48	; 0x30
 80058ca:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 80058ce:	4422      	add	r2, r4
 80058d0:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 80058d4:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 80058d8:	3302      	adds	r3, #2
 80058da:	e7c7      	b.n	800586c <_printf_common+0x58>
 80058dc:	2301      	movs	r3, #1
 80058de:	4622      	mov	r2, r4
 80058e0:	4649      	mov	r1, r9
 80058e2:	4638      	mov	r0, r7
 80058e4:	47c0      	blx	r8
 80058e6:	3001      	adds	r0, #1
 80058e8:	d0e6      	beq.n	80058b8 <_printf_common+0xa4>
 80058ea:	3601      	adds	r6, #1
 80058ec:	e7d9      	b.n	80058a2 <_printf_common+0x8e>
	...

080058f0 <_printf_i>:
 80058f0:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 80058f4:	7e0f      	ldrb	r7, [r1, #24]
 80058f6:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 80058f8:	2f78      	cmp	r7, #120	; 0x78
 80058fa:	4691      	mov	r9, r2
 80058fc:	4680      	mov	r8, r0
 80058fe:	460c      	mov	r4, r1
 8005900:	469a      	mov	sl, r3
 8005902:	f101 0243 	add.w	r2, r1, #67	; 0x43
 8005906:	d807      	bhi.n	8005918 <_printf_i+0x28>
 8005908:	2f62      	cmp	r7, #98	; 0x62
 800590a:	d80a      	bhi.n	8005922 <_printf_i+0x32>
 800590c:	2f00      	cmp	r7, #0
 800590e:	f000 80d8 	beq.w	8005ac2 <_printf_i+0x1d2>
 8005912:	2f58      	cmp	r7, #88	; 0x58
 8005914:	f000 80a3 	beq.w	8005a5e <_printf_i+0x16e>
 8005918:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800591c:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8005920:	e03a      	b.n	8005998 <_printf_i+0xa8>
 8005922:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8005926:	2b15      	cmp	r3, #21
 8005928:	d8f6      	bhi.n	8005918 <_printf_i+0x28>
 800592a:	a101      	add	r1, pc, #4	; (adr r1, 8005930 <_printf_i+0x40>)
 800592c:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8005930:	08005989 	.word	0x08005989
 8005934:	0800599d 	.word	0x0800599d
 8005938:	08005919 	.word	0x08005919
 800593c:	08005919 	.word	0x08005919
 8005940:	08005919 	.word	0x08005919
 8005944:	08005919 	.word	0x08005919
 8005948:	0800599d 	.word	0x0800599d
 800594c:	08005919 	.word	0x08005919
 8005950:	08005919 	.word	0x08005919
 8005954:	08005919 	.word	0x08005919
 8005958:	08005919 	.word	0x08005919
 800595c:	08005aa9 	.word	0x08005aa9
 8005960:	080059cd 	.word	0x080059cd
 8005964:	08005a8b 	.word	0x08005a8b
 8005968:	08005919 	.word	0x08005919
 800596c:	08005919 	.word	0x08005919
 8005970:	08005acb 	.word	0x08005acb
 8005974:	08005919 	.word	0x08005919
 8005978:	080059cd 	.word	0x080059cd
 800597c:	08005919 	.word	0x08005919
 8005980:	08005919 	.word	0x08005919
 8005984:	08005a93 	.word	0x08005a93
 8005988:	682b      	ldr	r3, [r5, #0]
 800598a:	1d1a      	adds	r2, r3, #4
 800598c:	681b      	ldr	r3, [r3, #0]
 800598e:	602a      	str	r2, [r5, #0]
 8005990:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8005994:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8005998:	2301      	movs	r3, #1
 800599a:	e0a3      	b.n	8005ae4 <_printf_i+0x1f4>
 800599c:	6820      	ldr	r0, [r4, #0]
 800599e:	6829      	ldr	r1, [r5, #0]
 80059a0:	0606      	lsls	r6, r0, #24
 80059a2:	f101 0304 	add.w	r3, r1, #4
 80059a6:	d50a      	bpl.n	80059be <_printf_i+0xce>
 80059a8:	680e      	ldr	r6, [r1, #0]
 80059aa:	602b      	str	r3, [r5, #0]
 80059ac:	2e00      	cmp	r6, #0
 80059ae:	da03      	bge.n	80059b8 <_printf_i+0xc8>
 80059b0:	232d      	movs	r3, #45	; 0x2d
 80059b2:	4276      	negs	r6, r6
 80059b4:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80059b8:	485e      	ldr	r0, [pc, #376]	; (8005b34 <_printf_i+0x244>)
 80059ba:	230a      	movs	r3, #10
 80059bc:	e019      	b.n	80059f2 <_printf_i+0x102>
 80059be:	680e      	ldr	r6, [r1, #0]
 80059c0:	602b      	str	r3, [r5, #0]
 80059c2:	f010 0f40 	tst.w	r0, #64	; 0x40
 80059c6:	bf18      	it	ne
 80059c8:	b236      	sxthne	r6, r6
 80059ca:	e7ef      	b.n	80059ac <_printf_i+0xbc>
 80059cc:	682b      	ldr	r3, [r5, #0]
 80059ce:	6820      	ldr	r0, [r4, #0]
 80059d0:	1d19      	adds	r1, r3, #4
 80059d2:	6029      	str	r1, [r5, #0]
 80059d4:	0601      	lsls	r1, r0, #24
 80059d6:	d501      	bpl.n	80059dc <_printf_i+0xec>
 80059d8:	681e      	ldr	r6, [r3, #0]
 80059da:	e002      	b.n	80059e2 <_printf_i+0xf2>
 80059dc:	0646      	lsls	r6, r0, #25
 80059de:	d5fb      	bpl.n	80059d8 <_printf_i+0xe8>
 80059e0:	881e      	ldrh	r6, [r3, #0]
 80059e2:	4854      	ldr	r0, [pc, #336]	; (8005b34 <_printf_i+0x244>)
 80059e4:	2f6f      	cmp	r7, #111	; 0x6f
 80059e6:	bf0c      	ite	eq
 80059e8:	2308      	moveq	r3, #8
 80059ea:	230a      	movne	r3, #10
 80059ec:	2100      	movs	r1, #0
 80059ee:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 80059f2:	6865      	ldr	r5, [r4, #4]
 80059f4:	60a5      	str	r5, [r4, #8]
 80059f6:	2d00      	cmp	r5, #0
 80059f8:	bfa2      	ittt	ge
 80059fa:	6821      	ldrge	r1, [r4, #0]
 80059fc:	f021 0104 	bicge.w	r1, r1, #4
 8005a00:	6021      	strge	r1, [r4, #0]
 8005a02:	b90e      	cbnz	r6, 8005a08 <_printf_i+0x118>
 8005a04:	2d00      	cmp	r5, #0
 8005a06:	d04d      	beq.n	8005aa4 <_printf_i+0x1b4>
 8005a08:	4615      	mov	r5, r2
 8005a0a:	fbb6 f1f3 	udiv	r1, r6, r3
 8005a0e:	fb03 6711 	mls	r7, r3, r1, r6
 8005a12:	5dc7      	ldrb	r7, [r0, r7]
 8005a14:	f805 7d01 	strb.w	r7, [r5, #-1]!
 8005a18:	4637      	mov	r7, r6
 8005a1a:	42bb      	cmp	r3, r7
 8005a1c:	460e      	mov	r6, r1
 8005a1e:	d9f4      	bls.n	8005a0a <_printf_i+0x11a>
 8005a20:	2b08      	cmp	r3, #8
 8005a22:	d10b      	bne.n	8005a3c <_printf_i+0x14c>
 8005a24:	6823      	ldr	r3, [r4, #0]
 8005a26:	07de      	lsls	r6, r3, #31
 8005a28:	d508      	bpl.n	8005a3c <_printf_i+0x14c>
 8005a2a:	6923      	ldr	r3, [r4, #16]
 8005a2c:	6861      	ldr	r1, [r4, #4]
 8005a2e:	4299      	cmp	r1, r3
 8005a30:	bfde      	ittt	le
 8005a32:	2330      	movle	r3, #48	; 0x30
 8005a34:	f805 3c01 	strble.w	r3, [r5, #-1]
 8005a38:	f105 35ff 	addle.w	r5, r5, #4294967295
 8005a3c:	1b52      	subs	r2, r2, r5
 8005a3e:	6122      	str	r2, [r4, #16]
 8005a40:	f8cd a000 	str.w	sl, [sp]
 8005a44:	464b      	mov	r3, r9
 8005a46:	aa03      	add	r2, sp, #12
 8005a48:	4621      	mov	r1, r4
 8005a4a:	4640      	mov	r0, r8
 8005a4c:	f7ff fee2 	bl	8005814 <_printf_common>
 8005a50:	3001      	adds	r0, #1
 8005a52:	d14c      	bne.n	8005aee <_printf_i+0x1fe>
 8005a54:	f04f 30ff 	mov.w	r0, #4294967295
 8005a58:	b004      	add	sp, #16
 8005a5a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005a5e:	4835      	ldr	r0, [pc, #212]	; (8005b34 <_printf_i+0x244>)
 8005a60:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 8005a64:	6829      	ldr	r1, [r5, #0]
 8005a66:	6823      	ldr	r3, [r4, #0]
 8005a68:	f851 6b04 	ldr.w	r6, [r1], #4
 8005a6c:	6029      	str	r1, [r5, #0]
 8005a6e:	061d      	lsls	r5, r3, #24
 8005a70:	d514      	bpl.n	8005a9c <_printf_i+0x1ac>
 8005a72:	07df      	lsls	r7, r3, #31
 8005a74:	bf44      	itt	mi
 8005a76:	f043 0320 	orrmi.w	r3, r3, #32
 8005a7a:	6023      	strmi	r3, [r4, #0]
 8005a7c:	b91e      	cbnz	r6, 8005a86 <_printf_i+0x196>
 8005a7e:	6823      	ldr	r3, [r4, #0]
 8005a80:	f023 0320 	bic.w	r3, r3, #32
 8005a84:	6023      	str	r3, [r4, #0]
 8005a86:	2310      	movs	r3, #16
 8005a88:	e7b0      	b.n	80059ec <_printf_i+0xfc>
 8005a8a:	6823      	ldr	r3, [r4, #0]
 8005a8c:	f043 0320 	orr.w	r3, r3, #32
 8005a90:	6023      	str	r3, [r4, #0]
 8005a92:	2378      	movs	r3, #120	; 0x78
 8005a94:	4828      	ldr	r0, [pc, #160]	; (8005b38 <_printf_i+0x248>)
 8005a96:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8005a9a:	e7e3      	b.n	8005a64 <_printf_i+0x174>
 8005a9c:	0659      	lsls	r1, r3, #25
 8005a9e:	bf48      	it	mi
 8005aa0:	b2b6      	uxthmi	r6, r6
 8005aa2:	e7e6      	b.n	8005a72 <_printf_i+0x182>
 8005aa4:	4615      	mov	r5, r2
 8005aa6:	e7bb      	b.n	8005a20 <_printf_i+0x130>
 8005aa8:	682b      	ldr	r3, [r5, #0]
 8005aaa:	6826      	ldr	r6, [r4, #0]
 8005aac:	6961      	ldr	r1, [r4, #20]
 8005aae:	1d18      	adds	r0, r3, #4
 8005ab0:	6028      	str	r0, [r5, #0]
 8005ab2:	0635      	lsls	r5, r6, #24
 8005ab4:	681b      	ldr	r3, [r3, #0]
 8005ab6:	d501      	bpl.n	8005abc <_printf_i+0x1cc>
 8005ab8:	6019      	str	r1, [r3, #0]
 8005aba:	e002      	b.n	8005ac2 <_printf_i+0x1d2>
 8005abc:	0670      	lsls	r0, r6, #25
 8005abe:	d5fb      	bpl.n	8005ab8 <_printf_i+0x1c8>
 8005ac0:	8019      	strh	r1, [r3, #0]
 8005ac2:	2300      	movs	r3, #0
 8005ac4:	6123      	str	r3, [r4, #16]
 8005ac6:	4615      	mov	r5, r2
 8005ac8:	e7ba      	b.n	8005a40 <_printf_i+0x150>
 8005aca:	682b      	ldr	r3, [r5, #0]
 8005acc:	1d1a      	adds	r2, r3, #4
 8005ace:	602a      	str	r2, [r5, #0]
 8005ad0:	681d      	ldr	r5, [r3, #0]
 8005ad2:	6862      	ldr	r2, [r4, #4]
 8005ad4:	2100      	movs	r1, #0
 8005ad6:	4628      	mov	r0, r5
 8005ad8:	f7fa fb82 	bl	80001e0 <memchr>
 8005adc:	b108      	cbz	r0, 8005ae2 <_printf_i+0x1f2>
 8005ade:	1b40      	subs	r0, r0, r5
 8005ae0:	6060      	str	r0, [r4, #4]
 8005ae2:	6863      	ldr	r3, [r4, #4]
 8005ae4:	6123      	str	r3, [r4, #16]
 8005ae6:	2300      	movs	r3, #0
 8005ae8:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8005aec:	e7a8      	b.n	8005a40 <_printf_i+0x150>
 8005aee:	6923      	ldr	r3, [r4, #16]
 8005af0:	462a      	mov	r2, r5
 8005af2:	4649      	mov	r1, r9
 8005af4:	4640      	mov	r0, r8
 8005af6:	47d0      	blx	sl
 8005af8:	3001      	adds	r0, #1
 8005afa:	d0ab      	beq.n	8005a54 <_printf_i+0x164>
 8005afc:	6823      	ldr	r3, [r4, #0]
 8005afe:	079b      	lsls	r3, r3, #30
 8005b00:	d413      	bmi.n	8005b2a <_printf_i+0x23a>
 8005b02:	68e0      	ldr	r0, [r4, #12]
 8005b04:	9b03      	ldr	r3, [sp, #12]
 8005b06:	4298      	cmp	r0, r3
 8005b08:	bfb8      	it	lt
 8005b0a:	4618      	movlt	r0, r3
 8005b0c:	e7a4      	b.n	8005a58 <_printf_i+0x168>
 8005b0e:	2301      	movs	r3, #1
 8005b10:	4632      	mov	r2, r6
 8005b12:	4649      	mov	r1, r9
 8005b14:	4640      	mov	r0, r8
 8005b16:	47d0      	blx	sl
 8005b18:	3001      	adds	r0, #1
 8005b1a:	d09b      	beq.n	8005a54 <_printf_i+0x164>
 8005b1c:	3501      	adds	r5, #1
 8005b1e:	68e3      	ldr	r3, [r4, #12]
 8005b20:	9903      	ldr	r1, [sp, #12]
 8005b22:	1a5b      	subs	r3, r3, r1
 8005b24:	42ab      	cmp	r3, r5
 8005b26:	dcf2      	bgt.n	8005b0e <_printf_i+0x21e>
 8005b28:	e7eb      	b.n	8005b02 <_printf_i+0x212>
 8005b2a:	2500      	movs	r5, #0
 8005b2c:	f104 0619 	add.w	r6, r4, #25
 8005b30:	e7f5      	b.n	8005b1e <_printf_i+0x22e>
 8005b32:	bf00      	nop
 8005b34:	08005e65 	.word	0x08005e65
 8005b38:	08005e76 	.word	0x08005e76

08005b3c <memcpy>:
 8005b3c:	440a      	add	r2, r1
 8005b3e:	4291      	cmp	r1, r2
 8005b40:	f100 33ff 	add.w	r3, r0, #4294967295
 8005b44:	d100      	bne.n	8005b48 <memcpy+0xc>
 8005b46:	4770      	bx	lr
 8005b48:	b510      	push	{r4, lr}
 8005b4a:	f811 4b01 	ldrb.w	r4, [r1], #1
 8005b4e:	f803 4f01 	strb.w	r4, [r3, #1]!
 8005b52:	4291      	cmp	r1, r2
 8005b54:	d1f9      	bne.n	8005b4a <memcpy+0xe>
 8005b56:	bd10      	pop	{r4, pc}

08005b58 <memmove>:
 8005b58:	4288      	cmp	r0, r1
 8005b5a:	b510      	push	{r4, lr}
 8005b5c:	eb01 0402 	add.w	r4, r1, r2
 8005b60:	d902      	bls.n	8005b68 <memmove+0x10>
 8005b62:	4284      	cmp	r4, r0
 8005b64:	4623      	mov	r3, r4
 8005b66:	d807      	bhi.n	8005b78 <memmove+0x20>
 8005b68:	1e43      	subs	r3, r0, #1
 8005b6a:	42a1      	cmp	r1, r4
 8005b6c:	d008      	beq.n	8005b80 <memmove+0x28>
 8005b6e:	f811 2b01 	ldrb.w	r2, [r1], #1
 8005b72:	f803 2f01 	strb.w	r2, [r3, #1]!
 8005b76:	e7f8      	b.n	8005b6a <memmove+0x12>
 8005b78:	4402      	add	r2, r0
 8005b7a:	4601      	mov	r1, r0
 8005b7c:	428a      	cmp	r2, r1
 8005b7e:	d100      	bne.n	8005b82 <memmove+0x2a>
 8005b80:	bd10      	pop	{r4, pc}
 8005b82:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8005b86:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8005b8a:	e7f7      	b.n	8005b7c <memmove+0x24>

08005b8c <_free_r>:
 8005b8c:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8005b8e:	2900      	cmp	r1, #0
 8005b90:	d044      	beq.n	8005c1c <_free_r+0x90>
 8005b92:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8005b96:	9001      	str	r0, [sp, #4]
 8005b98:	2b00      	cmp	r3, #0
 8005b9a:	f1a1 0404 	sub.w	r4, r1, #4
 8005b9e:	bfb8      	it	lt
 8005ba0:	18e4      	addlt	r4, r4, r3
 8005ba2:	f000 f913 	bl	8005dcc <__malloc_lock>
 8005ba6:	4a1e      	ldr	r2, [pc, #120]	; (8005c20 <_free_r+0x94>)
 8005ba8:	9801      	ldr	r0, [sp, #4]
 8005baa:	6813      	ldr	r3, [r2, #0]
 8005bac:	b933      	cbnz	r3, 8005bbc <_free_r+0x30>
 8005bae:	6063      	str	r3, [r4, #4]
 8005bb0:	6014      	str	r4, [r2, #0]
 8005bb2:	b003      	add	sp, #12
 8005bb4:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8005bb8:	f000 b90e 	b.w	8005dd8 <__malloc_unlock>
 8005bbc:	42a3      	cmp	r3, r4
 8005bbe:	d908      	bls.n	8005bd2 <_free_r+0x46>
 8005bc0:	6825      	ldr	r5, [r4, #0]
 8005bc2:	1961      	adds	r1, r4, r5
 8005bc4:	428b      	cmp	r3, r1
 8005bc6:	bf01      	itttt	eq
 8005bc8:	6819      	ldreq	r1, [r3, #0]
 8005bca:	685b      	ldreq	r3, [r3, #4]
 8005bcc:	1949      	addeq	r1, r1, r5
 8005bce:	6021      	streq	r1, [r4, #0]
 8005bd0:	e7ed      	b.n	8005bae <_free_r+0x22>
 8005bd2:	461a      	mov	r2, r3
 8005bd4:	685b      	ldr	r3, [r3, #4]
 8005bd6:	b10b      	cbz	r3, 8005bdc <_free_r+0x50>
 8005bd8:	42a3      	cmp	r3, r4
 8005bda:	d9fa      	bls.n	8005bd2 <_free_r+0x46>
 8005bdc:	6811      	ldr	r1, [r2, #0]
 8005bde:	1855      	adds	r5, r2, r1
 8005be0:	42a5      	cmp	r5, r4
 8005be2:	d10b      	bne.n	8005bfc <_free_r+0x70>
 8005be4:	6824      	ldr	r4, [r4, #0]
 8005be6:	4421      	add	r1, r4
 8005be8:	1854      	adds	r4, r2, r1
 8005bea:	42a3      	cmp	r3, r4
 8005bec:	6011      	str	r1, [r2, #0]
 8005bee:	d1e0      	bne.n	8005bb2 <_free_r+0x26>
 8005bf0:	681c      	ldr	r4, [r3, #0]
 8005bf2:	685b      	ldr	r3, [r3, #4]
 8005bf4:	6053      	str	r3, [r2, #4]
 8005bf6:	4421      	add	r1, r4
 8005bf8:	6011      	str	r1, [r2, #0]
 8005bfa:	e7da      	b.n	8005bb2 <_free_r+0x26>
 8005bfc:	d902      	bls.n	8005c04 <_free_r+0x78>
 8005bfe:	230c      	movs	r3, #12
 8005c00:	6003      	str	r3, [r0, #0]
 8005c02:	e7d6      	b.n	8005bb2 <_free_r+0x26>
 8005c04:	6825      	ldr	r5, [r4, #0]
 8005c06:	1961      	adds	r1, r4, r5
 8005c08:	428b      	cmp	r3, r1
 8005c0a:	bf04      	itt	eq
 8005c0c:	6819      	ldreq	r1, [r3, #0]
 8005c0e:	685b      	ldreq	r3, [r3, #4]
 8005c10:	6063      	str	r3, [r4, #4]
 8005c12:	bf04      	itt	eq
 8005c14:	1949      	addeq	r1, r1, r5
 8005c16:	6021      	streq	r1, [r4, #0]
 8005c18:	6054      	str	r4, [r2, #4]
 8005c1a:	e7ca      	b.n	8005bb2 <_free_r+0x26>
 8005c1c:	b003      	add	sp, #12
 8005c1e:	bd30      	pop	{r4, r5, pc}
 8005c20:	200001fc 	.word	0x200001fc

08005c24 <sbrk_aligned>:
 8005c24:	b570      	push	{r4, r5, r6, lr}
 8005c26:	4e0e      	ldr	r6, [pc, #56]	; (8005c60 <sbrk_aligned+0x3c>)
 8005c28:	460c      	mov	r4, r1
 8005c2a:	6831      	ldr	r1, [r6, #0]
 8005c2c:	4605      	mov	r5, r0
 8005c2e:	b911      	cbnz	r1, 8005c36 <sbrk_aligned+0x12>
 8005c30:	f000 f8bc 	bl	8005dac <_sbrk_r>
 8005c34:	6030      	str	r0, [r6, #0]
 8005c36:	4621      	mov	r1, r4
 8005c38:	4628      	mov	r0, r5
 8005c3a:	f000 f8b7 	bl	8005dac <_sbrk_r>
 8005c3e:	1c43      	adds	r3, r0, #1
 8005c40:	d00a      	beq.n	8005c58 <sbrk_aligned+0x34>
 8005c42:	1cc4      	adds	r4, r0, #3
 8005c44:	f024 0403 	bic.w	r4, r4, #3
 8005c48:	42a0      	cmp	r0, r4
 8005c4a:	d007      	beq.n	8005c5c <sbrk_aligned+0x38>
 8005c4c:	1a21      	subs	r1, r4, r0
 8005c4e:	4628      	mov	r0, r5
 8005c50:	f000 f8ac 	bl	8005dac <_sbrk_r>
 8005c54:	3001      	adds	r0, #1
 8005c56:	d101      	bne.n	8005c5c <sbrk_aligned+0x38>
 8005c58:	f04f 34ff 	mov.w	r4, #4294967295
 8005c5c:	4620      	mov	r0, r4
 8005c5e:	bd70      	pop	{r4, r5, r6, pc}
 8005c60:	20000200 	.word	0x20000200

08005c64 <_malloc_r>:
 8005c64:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8005c68:	1ccd      	adds	r5, r1, #3
 8005c6a:	f025 0503 	bic.w	r5, r5, #3
 8005c6e:	3508      	adds	r5, #8
 8005c70:	2d0c      	cmp	r5, #12
 8005c72:	bf38      	it	cc
 8005c74:	250c      	movcc	r5, #12
 8005c76:	2d00      	cmp	r5, #0
 8005c78:	4607      	mov	r7, r0
 8005c7a:	db01      	blt.n	8005c80 <_malloc_r+0x1c>
 8005c7c:	42a9      	cmp	r1, r5
 8005c7e:	d905      	bls.n	8005c8c <_malloc_r+0x28>
 8005c80:	230c      	movs	r3, #12
 8005c82:	603b      	str	r3, [r7, #0]
 8005c84:	2600      	movs	r6, #0
 8005c86:	4630      	mov	r0, r6
 8005c88:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8005c8c:	4e2e      	ldr	r6, [pc, #184]	; (8005d48 <_malloc_r+0xe4>)
 8005c8e:	f000 f89d 	bl	8005dcc <__malloc_lock>
 8005c92:	6833      	ldr	r3, [r6, #0]
 8005c94:	461c      	mov	r4, r3
 8005c96:	bb34      	cbnz	r4, 8005ce6 <_malloc_r+0x82>
 8005c98:	4629      	mov	r1, r5
 8005c9a:	4638      	mov	r0, r7
 8005c9c:	f7ff ffc2 	bl	8005c24 <sbrk_aligned>
 8005ca0:	1c43      	adds	r3, r0, #1
 8005ca2:	4604      	mov	r4, r0
 8005ca4:	d14d      	bne.n	8005d42 <_malloc_r+0xde>
 8005ca6:	6834      	ldr	r4, [r6, #0]
 8005ca8:	4626      	mov	r6, r4
 8005caa:	2e00      	cmp	r6, #0
 8005cac:	d140      	bne.n	8005d30 <_malloc_r+0xcc>
 8005cae:	6823      	ldr	r3, [r4, #0]
 8005cb0:	4631      	mov	r1, r6
 8005cb2:	4638      	mov	r0, r7
 8005cb4:	eb04 0803 	add.w	r8, r4, r3
 8005cb8:	f000 f878 	bl	8005dac <_sbrk_r>
 8005cbc:	4580      	cmp	r8, r0
 8005cbe:	d13a      	bne.n	8005d36 <_malloc_r+0xd2>
 8005cc0:	6821      	ldr	r1, [r4, #0]
 8005cc2:	3503      	adds	r5, #3
 8005cc4:	1a6d      	subs	r5, r5, r1
 8005cc6:	f025 0503 	bic.w	r5, r5, #3
 8005cca:	3508      	adds	r5, #8
 8005ccc:	2d0c      	cmp	r5, #12
 8005cce:	bf38      	it	cc
 8005cd0:	250c      	movcc	r5, #12
 8005cd2:	4629      	mov	r1, r5
 8005cd4:	4638      	mov	r0, r7
 8005cd6:	f7ff ffa5 	bl	8005c24 <sbrk_aligned>
 8005cda:	3001      	adds	r0, #1
 8005cdc:	d02b      	beq.n	8005d36 <_malloc_r+0xd2>
 8005cde:	6823      	ldr	r3, [r4, #0]
 8005ce0:	442b      	add	r3, r5
 8005ce2:	6023      	str	r3, [r4, #0]
 8005ce4:	e00e      	b.n	8005d04 <_malloc_r+0xa0>
 8005ce6:	6822      	ldr	r2, [r4, #0]
 8005ce8:	1b52      	subs	r2, r2, r5
 8005cea:	d41e      	bmi.n	8005d2a <_malloc_r+0xc6>
 8005cec:	2a0b      	cmp	r2, #11
 8005cee:	d916      	bls.n	8005d1e <_malloc_r+0xba>
 8005cf0:	1961      	adds	r1, r4, r5
 8005cf2:	42a3      	cmp	r3, r4
 8005cf4:	6025      	str	r5, [r4, #0]
 8005cf6:	bf18      	it	ne
 8005cf8:	6059      	strne	r1, [r3, #4]
 8005cfa:	6863      	ldr	r3, [r4, #4]
 8005cfc:	bf08      	it	eq
 8005cfe:	6031      	streq	r1, [r6, #0]
 8005d00:	5162      	str	r2, [r4, r5]
 8005d02:	604b      	str	r3, [r1, #4]
 8005d04:	4638      	mov	r0, r7
 8005d06:	f104 060b 	add.w	r6, r4, #11
 8005d0a:	f000 f865 	bl	8005dd8 <__malloc_unlock>
 8005d0e:	f026 0607 	bic.w	r6, r6, #7
 8005d12:	1d23      	adds	r3, r4, #4
 8005d14:	1af2      	subs	r2, r6, r3
 8005d16:	d0b6      	beq.n	8005c86 <_malloc_r+0x22>
 8005d18:	1b9b      	subs	r3, r3, r6
 8005d1a:	50a3      	str	r3, [r4, r2]
 8005d1c:	e7b3      	b.n	8005c86 <_malloc_r+0x22>
 8005d1e:	6862      	ldr	r2, [r4, #4]
 8005d20:	42a3      	cmp	r3, r4
 8005d22:	bf0c      	ite	eq
 8005d24:	6032      	streq	r2, [r6, #0]
 8005d26:	605a      	strne	r2, [r3, #4]
 8005d28:	e7ec      	b.n	8005d04 <_malloc_r+0xa0>
 8005d2a:	4623      	mov	r3, r4
 8005d2c:	6864      	ldr	r4, [r4, #4]
 8005d2e:	e7b2      	b.n	8005c96 <_malloc_r+0x32>
 8005d30:	4634      	mov	r4, r6
 8005d32:	6876      	ldr	r6, [r6, #4]
 8005d34:	e7b9      	b.n	8005caa <_malloc_r+0x46>
 8005d36:	230c      	movs	r3, #12
 8005d38:	603b      	str	r3, [r7, #0]
 8005d3a:	4638      	mov	r0, r7
 8005d3c:	f000 f84c 	bl	8005dd8 <__malloc_unlock>
 8005d40:	e7a1      	b.n	8005c86 <_malloc_r+0x22>
 8005d42:	6025      	str	r5, [r4, #0]
 8005d44:	e7de      	b.n	8005d04 <_malloc_r+0xa0>
 8005d46:	bf00      	nop
 8005d48:	200001fc 	.word	0x200001fc

08005d4c <_realloc_r>:
 8005d4c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8005d50:	4680      	mov	r8, r0
 8005d52:	4614      	mov	r4, r2
 8005d54:	460e      	mov	r6, r1
 8005d56:	b921      	cbnz	r1, 8005d62 <_realloc_r+0x16>
 8005d58:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8005d5c:	4611      	mov	r1, r2
 8005d5e:	f7ff bf81 	b.w	8005c64 <_malloc_r>
 8005d62:	b92a      	cbnz	r2, 8005d70 <_realloc_r+0x24>
 8005d64:	f7ff ff12 	bl	8005b8c <_free_r>
 8005d68:	4625      	mov	r5, r4
 8005d6a:	4628      	mov	r0, r5
 8005d6c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8005d70:	f000 f838 	bl	8005de4 <_malloc_usable_size_r>
 8005d74:	4284      	cmp	r4, r0
 8005d76:	4607      	mov	r7, r0
 8005d78:	d802      	bhi.n	8005d80 <_realloc_r+0x34>
 8005d7a:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 8005d7e:	d812      	bhi.n	8005da6 <_realloc_r+0x5a>
 8005d80:	4621      	mov	r1, r4
 8005d82:	4640      	mov	r0, r8
 8005d84:	f7ff ff6e 	bl	8005c64 <_malloc_r>
 8005d88:	4605      	mov	r5, r0
 8005d8a:	2800      	cmp	r0, #0
 8005d8c:	d0ed      	beq.n	8005d6a <_realloc_r+0x1e>
 8005d8e:	42bc      	cmp	r4, r7
 8005d90:	4622      	mov	r2, r4
 8005d92:	4631      	mov	r1, r6
 8005d94:	bf28      	it	cs
 8005d96:	463a      	movcs	r2, r7
 8005d98:	f7ff fed0 	bl	8005b3c <memcpy>
 8005d9c:	4631      	mov	r1, r6
 8005d9e:	4640      	mov	r0, r8
 8005da0:	f7ff fef4 	bl	8005b8c <_free_r>
 8005da4:	e7e1      	b.n	8005d6a <_realloc_r+0x1e>
 8005da6:	4635      	mov	r5, r6
 8005da8:	e7df      	b.n	8005d6a <_realloc_r+0x1e>
	...

08005dac <_sbrk_r>:
 8005dac:	b538      	push	{r3, r4, r5, lr}
 8005dae:	4d06      	ldr	r5, [pc, #24]	; (8005dc8 <_sbrk_r+0x1c>)
 8005db0:	2300      	movs	r3, #0
 8005db2:	4604      	mov	r4, r0
 8005db4:	4608      	mov	r0, r1
 8005db6:	602b      	str	r3, [r5, #0]
 8005db8:	f7fa fe0a 	bl	80009d0 <_sbrk>
 8005dbc:	1c43      	adds	r3, r0, #1
 8005dbe:	d102      	bne.n	8005dc6 <_sbrk_r+0x1a>
 8005dc0:	682b      	ldr	r3, [r5, #0]
 8005dc2:	b103      	cbz	r3, 8005dc6 <_sbrk_r+0x1a>
 8005dc4:	6023      	str	r3, [r4, #0]
 8005dc6:	bd38      	pop	{r3, r4, r5, pc}
 8005dc8:	20000204 	.word	0x20000204

08005dcc <__malloc_lock>:
 8005dcc:	4801      	ldr	r0, [pc, #4]	; (8005dd4 <__malloc_lock+0x8>)
 8005dce:	f000 b811 	b.w	8005df4 <__retarget_lock_acquire_recursive>
 8005dd2:	bf00      	nop
 8005dd4:	20000208 	.word	0x20000208

08005dd8 <__malloc_unlock>:
 8005dd8:	4801      	ldr	r0, [pc, #4]	; (8005de0 <__malloc_unlock+0x8>)
 8005dda:	f000 b80c 	b.w	8005df6 <__retarget_lock_release_recursive>
 8005dde:	bf00      	nop
 8005de0:	20000208 	.word	0x20000208

08005de4 <_malloc_usable_size_r>:
 8005de4:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8005de8:	1f18      	subs	r0, r3, #4
 8005dea:	2b00      	cmp	r3, #0
 8005dec:	bfbc      	itt	lt
 8005dee:	580b      	ldrlt	r3, [r1, r0]
 8005df0:	18c0      	addlt	r0, r0, r3
 8005df2:	4770      	bx	lr

08005df4 <__retarget_lock_acquire_recursive>:
 8005df4:	4770      	bx	lr

08005df6 <__retarget_lock_release_recursive>:
 8005df6:	4770      	bx	lr

08005df8 <_init>:
 8005df8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005dfa:	bf00      	nop
 8005dfc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8005dfe:	bc08      	pop	{r3}
 8005e00:	469e      	mov	lr, r3
 8005e02:	4770      	bx	lr

08005e04 <_fini>:
 8005e04:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005e06:	bf00      	nop
 8005e08:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8005e0a:	bc08      	pop	{r3}
 8005e0c:	469e      	mov	lr, r3
 8005e0e:	4770      	bx	lr
