
NUsense_USB_0.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000298  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00009c18  080002a0  080002a0  000102a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000000b0  08009eb8  08009eb8  00019eb8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .init_array   00000004  08009f68  08009f68  00019f68  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  4 .fini_array   00000004  08009f6c  08009f6c  00019f6c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .data         00000164  24000000  08009f70  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  6 .bss          00001cc8  24000164  0800a0d4  00020164  2**2
                  ALLOC
  7 ._user_heap_stack 00000604  24001e2c  0800a0d4  00021e2c  2**0
                  ALLOC
  8 .ARM.attributes 0000002e  00000000  00000000  00020164  2**0
                  CONTENTS, READONLY
  9 .debug_info   00016d20  00000000  00000000  00020192  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 10 .debug_abbrev 00003841  00000000  00000000  00036eb2  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 11 .debug_aranges 00001090  00000000  00000000  0003a6f8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 12 .debug_ranges 00000ee8  00000000  00000000  0003b788  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_macro  0003a547  00000000  00000000  0003c670  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_line   000174b5  00000000  00000000  00076bb7  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_str    0015ad4a  00000000  00000000  0008e06c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .comment      00000050  00000000  00000000  001e8db6  2**0
                  CONTENTS, READONLY
 17 .debug_frame  00004614  00000000  00000000  001e8e08  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080002a0 <__do_global_dtors_aux>:
 80002a0:	b510      	push	{r4, lr}
 80002a2:	4c05      	ldr	r4, [pc, #20]	; (80002b8 <__do_global_dtors_aux+0x18>)
 80002a4:	7823      	ldrb	r3, [r4, #0]
 80002a6:	b933      	cbnz	r3, 80002b6 <__do_global_dtors_aux+0x16>
 80002a8:	4b04      	ldr	r3, [pc, #16]	; (80002bc <__do_global_dtors_aux+0x1c>)
 80002aa:	b113      	cbz	r3, 80002b2 <__do_global_dtors_aux+0x12>
 80002ac:	4804      	ldr	r0, [pc, #16]	; (80002c0 <__do_global_dtors_aux+0x20>)
 80002ae:	f3af 8000 	nop.w
 80002b2:	2301      	movs	r3, #1
 80002b4:	7023      	strb	r3, [r4, #0]
 80002b6:	bd10      	pop	{r4, pc}
 80002b8:	24000164 	.word	0x24000164
 80002bc:	00000000 	.word	0x00000000
 80002c0:	08009ea0 	.word	0x08009ea0

080002c4 <frame_dummy>:
 80002c4:	b508      	push	{r3, lr}
 80002c6:	4b03      	ldr	r3, [pc, #12]	; (80002d4 <frame_dummy+0x10>)
 80002c8:	b11b      	cbz	r3, 80002d2 <frame_dummy+0xe>
 80002ca:	4903      	ldr	r1, [pc, #12]	; (80002d8 <frame_dummy+0x14>)
 80002cc:	4803      	ldr	r0, [pc, #12]	; (80002dc <frame_dummy+0x18>)
 80002ce:	f3af 8000 	nop.w
 80002d2:	bd08      	pop	{r3, pc}
 80002d4:	00000000 	.word	0x00000000
 80002d8:	24000168 	.word	0x24000168
 80002dc:	08009ea0 	.word	0x08009ea0

080002e0 <strlen>:
 80002e0:	4603      	mov	r3, r0
 80002e2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80002e6:	2a00      	cmp	r2, #0
 80002e8:	d1fb      	bne.n	80002e2 <strlen+0x2>
 80002ea:	1a18      	subs	r0, r3, r0
 80002ec:	3801      	subs	r0, #1
 80002ee:	4770      	bx	lr

080002f0 <memchr>:
 80002f0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80002f4:	2a10      	cmp	r2, #16
 80002f6:	db2b      	blt.n	8000350 <memchr+0x60>
 80002f8:	f010 0f07 	tst.w	r0, #7
 80002fc:	d008      	beq.n	8000310 <memchr+0x20>
 80002fe:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000302:	3a01      	subs	r2, #1
 8000304:	428b      	cmp	r3, r1
 8000306:	d02d      	beq.n	8000364 <memchr+0x74>
 8000308:	f010 0f07 	tst.w	r0, #7
 800030c:	b342      	cbz	r2, 8000360 <memchr+0x70>
 800030e:	d1f6      	bne.n	80002fe <memchr+0xe>
 8000310:	b4f0      	push	{r4, r5, r6, r7}
 8000312:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000316:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800031a:	f022 0407 	bic.w	r4, r2, #7
 800031e:	f07f 0700 	mvns.w	r7, #0
 8000322:	2300      	movs	r3, #0
 8000324:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000328:	3c08      	subs	r4, #8
 800032a:	ea85 0501 	eor.w	r5, r5, r1
 800032e:	ea86 0601 	eor.w	r6, r6, r1
 8000332:	fa85 f547 	uadd8	r5, r5, r7
 8000336:	faa3 f587 	sel	r5, r3, r7
 800033a:	fa86 f647 	uadd8	r6, r6, r7
 800033e:	faa5 f687 	sel	r6, r5, r7
 8000342:	b98e      	cbnz	r6, 8000368 <memchr+0x78>
 8000344:	d1ee      	bne.n	8000324 <memchr+0x34>
 8000346:	bcf0      	pop	{r4, r5, r6, r7}
 8000348:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800034c:	f002 0207 	and.w	r2, r2, #7
 8000350:	b132      	cbz	r2, 8000360 <memchr+0x70>
 8000352:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000356:	3a01      	subs	r2, #1
 8000358:	ea83 0301 	eor.w	r3, r3, r1
 800035c:	b113      	cbz	r3, 8000364 <memchr+0x74>
 800035e:	d1f8      	bne.n	8000352 <memchr+0x62>
 8000360:	2000      	movs	r0, #0
 8000362:	4770      	bx	lr
 8000364:	3801      	subs	r0, #1
 8000366:	4770      	bx	lr
 8000368:	2d00      	cmp	r5, #0
 800036a:	bf06      	itte	eq
 800036c:	4635      	moveq	r5, r6
 800036e:	3803      	subeq	r0, #3
 8000370:	3807      	subne	r0, #7
 8000372:	f015 0f01 	tst.w	r5, #1
 8000376:	d107      	bne.n	8000388 <memchr+0x98>
 8000378:	3001      	adds	r0, #1
 800037a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800037e:	bf02      	ittt	eq
 8000380:	3001      	addeq	r0, #1
 8000382:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000386:	3001      	addeq	r0, #1
 8000388:	bcf0      	pop	{r4, r5, r6, r7}
 800038a:	3801      	subs	r0, #1
 800038c:	4770      	bx	lr
 800038e:	bf00      	nop

08000390 <MX_GPIO_Init>:
/** Configure pins
     PA13 (JTMS/SWDIO)   ------> DEBUG_JTMS-SWDIO
     PA14 (JTCK/SWCLK)   ------> DEBUG_JTCK-SWCLK
*/
void MX_GPIO_Init(void)
{
 8000390:	b580      	push	{r7, lr}
 8000392:	b08a      	sub	sp, #40	; 0x28
 8000394:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000396:	f107 0314 	add.w	r3, r7, #20
 800039a:	2200      	movs	r2, #0
 800039c:	601a      	str	r2, [r3, #0]
 800039e:	605a      	str	r2, [r3, #4]
 80003a0:	609a      	str	r2, [r3, #8]
 80003a2:	60da      	str	r2, [r3, #12]
 80003a4:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80003a6:	4b29      	ldr	r3, [pc, #164]	; (800044c <MX_GPIO_Init+0xbc>)
 80003a8:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80003ac:	4a27      	ldr	r2, [pc, #156]	; (800044c <MX_GPIO_Init+0xbc>)
 80003ae:	f043 0304 	orr.w	r3, r3, #4
 80003b2:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80003b6:	4b25      	ldr	r3, [pc, #148]	; (800044c <MX_GPIO_Init+0xbc>)
 80003b8:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80003bc:	f003 0304 	and.w	r3, r3, #4
 80003c0:	613b      	str	r3, [r7, #16]
 80003c2:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80003c4:	4b21      	ldr	r3, [pc, #132]	; (800044c <MX_GPIO_Init+0xbc>)
 80003c6:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80003ca:	4a20      	ldr	r2, [pc, #128]	; (800044c <MX_GPIO_Init+0xbc>)
 80003cc:	f043 0301 	orr.w	r3, r3, #1
 80003d0:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80003d4:	4b1d      	ldr	r3, [pc, #116]	; (800044c <MX_GPIO_Init+0xbc>)
 80003d6:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80003da:	f003 0301 	and.w	r3, r3, #1
 80003de:	60fb      	str	r3, [r7, #12]
 80003e0:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80003e2:	4b1a      	ldr	r3, [pc, #104]	; (800044c <MX_GPIO_Init+0xbc>)
 80003e4:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80003e8:	4a18      	ldr	r2, [pc, #96]	; (800044c <MX_GPIO_Init+0xbc>)
 80003ea:	f043 0302 	orr.w	r3, r3, #2
 80003ee:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80003f2:	4b16      	ldr	r3, [pc, #88]	; (800044c <MX_GPIO_Init+0xbc>)
 80003f4:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80003f8:	f003 0302 	and.w	r3, r3, #2
 80003fc:	60bb      	str	r3, [r7, #8]
 80003fe:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8000400:	4b12      	ldr	r3, [pc, #72]	; (800044c <MX_GPIO_Init+0xbc>)
 8000402:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000406:	4a11      	ldr	r2, [pc, #68]	; (800044c <MX_GPIO_Init+0xbc>)
 8000408:	f043 0310 	orr.w	r3, r3, #16
 800040c:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000410:	4b0e      	ldr	r3, [pc, #56]	; (800044c <MX_GPIO_Init+0xbc>)
 8000412:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000416:	f003 0310 	and.w	r3, r3, #16
 800041a:	607b      	str	r3, [r7, #4]
 800041c:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(BUZZER_SIG_GPIO_Port, BUZZER_SIG_Pin, GPIO_PIN_SET);
 800041e:	2201      	movs	r2, #1
 8000420:	2180      	movs	r1, #128	; 0x80
 8000422:	480b      	ldr	r0, [pc, #44]	; (8000450 <MX_GPIO_Init+0xc0>)
 8000424:	f000 ff4e 	bl	80012c4 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = BUZZER_SIG_Pin;
 8000428:	2380      	movs	r3, #128	; 0x80
 800042a:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800042c:	2301      	movs	r3, #1
 800042e:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000430:	2300      	movs	r3, #0
 8000432:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000434:	2300      	movs	r3, #0
 8000436:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(BUZZER_SIG_GPIO_Port, &GPIO_InitStruct);
 8000438:	f107 0314 	add.w	r3, r7, #20
 800043c:	4619      	mov	r1, r3
 800043e:	4804      	ldr	r0, [pc, #16]	; (8000450 <MX_GPIO_Init+0xc0>)
 8000440:	f000 fd90 	bl	8000f64 <HAL_GPIO_Init>

}
 8000444:	bf00      	nop
 8000446:	3728      	adds	r7, #40	; 0x28
 8000448:	46bd      	mov	sp, r7
 800044a:	bd80      	pop	{r7, pc}
 800044c:	58024400 	.word	0x58024400
 8000450:	58020400 	.word	0x58020400

08000454 <NUfsr_IMU_TransmitReceive>:
	HAL_SPI_Transmit(&hspi4, pak_ptr, byte_size, HAL_MAX_DELAY);

}

void NUfsr_IMU_TransmitReceive(uint8_t adr, uint8_t dat, uint16_t* dat_return, int byte_size)
{
 8000454:	b580      	push	{r7, lr}
 8000456:	b088      	sub	sp, #32
 8000458:	af02      	add	r7, sp, #8
 800045a:	60ba      	str	r2, [r7, #8]
 800045c:	607b      	str	r3, [r7, #4]
 800045e:	4603      	mov	r3, r0
 8000460:	73fb      	strb	r3, [r7, #15]
 8000462:	460b      	mov	r3, r1
 8000464:	73bb      	strb	r3, [r7, #14]
	uint16_t pak = (adr << 8) | dat;
 8000466:	7bfb      	ldrb	r3, [r7, #15]
 8000468:	021b      	lsls	r3, r3, #8
 800046a:	b21a      	sxth	r2, r3
 800046c:	7bbb      	ldrb	r3, [r7, #14]
 800046e:	b21b      	sxth	r3, r3
 8000470:	4313      	orrs	r3, r2
 8000472:	b21b      	sxth	r3, r3
 8000474:	b29b      	uxth	r3, r3
 8000476:	827b      	strh	r3, [r7, #18]
	uint8_t* pak_ptr = (uint8_t*)&pak;
 8000478:	f107 0312 	add.w	r3, r7, #18
 800047c:	617b      	str	r3, [r7, #20]

	HAL_SPI_TransmitReceive(&hspi4, pak_ptr, (uint8_t*)dat_return, byte_size, HAL_MAX_DELAY);
 800047e:	687b      	ldr	r3, [r7, #4]
 8000480:	b29b      	uxth	r3, r3
 8000482:	f04f 32ff 	mov.w	r2, #4294967295
 8000486:	9200      	str	r2, [sp, #0]
 8000488:	68ba      	ldr	r2, [r7, #8]
 800048a:	6979      	ldr	r1, [r7, #20]
 800048c:	4803      	ldr	r0, [pc, #12]	; (800049c <NUfsr_IMU_TransmitReceive+0x48>)
 800048e:	f004 fb8f 	bl	8004bb0 <HAL_SPI_TransmitReceive>
}
 8000492:	bf00      	nop
 8000494:	3718      	adds	r7, #24
 8000496:	46bd      	mov	sp, r7
 8000498:	bd80      	pop	{r7, pc}
 800049a:	bf00      	nop
 800049c:	24000180 	.word	0x24000180

080004a0 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80004a0:	b580      	push	{r7, lr}
 80004a2:	b09a      	sub	sp, #104	; 0x68
 80004a4:	af02      	add	r7, sp, #8
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80004a6:	f000 fb8b 	bl	8000bc0 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80004aa:	f000 f921 	bl	80006f0 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80004ae:	f7ff ff6f 	bl	8000390 <MX_GPIO_Init>
  MX_USB_DEVICE_Init();
 80004b2:	f008 fab9 	bl	8008a28 <MX_USB_DEVICE_Init>
  MX_SPI4_Init();
 80004b6:	f000 f98f 	bl	80007d8 <MX_SPI4_Init>
  /* USER CODE BEGIN 2 */
  HAL_GPIO_WritePin(BUZZER_SIG_GPIO_Port, BUZZER_SIG_Pin, GPIO_PIN_SET);
 80004ba:	2201      	movs	r2, #1
 80004bc:	2180      	movs	r1, #128	; 0x80
 80004be:	4886      	ldr	r0, [pc, #536]	; (80006d8 <main+0x238>)
 80004c0:	f000 ff00 	bl	80012c4 <HAL_GPIO_WritePin>
  HAL_Delay(500);
 80004c4:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 80004c8:	f000 fc0c 	bl	8000ce4 <HAL_Delay>
  HAL_GPIO_WritePin(BUZZER_SIG_GPIO_Port, BUZZER_SIG_Pin, GPIO_PIN_RESET);
 80004cc:	2200      	movs	r2, #0
 80004ce:	2180      	movs	r1, #128	; 0x80
 80004d0:	4881      	ldr	r0, [pc, #516]	; (80006d8 <main+0x238>)
 80004d2:	f000 fef7 	bl	80012c4 <HAL_GPIO_WritePin>

  uint16_t Rx = 0x0000;
 80004d6:	2300      	movs	r3, #0
 80004d8:	f8a7 304a 	strh.w	r3, [r7, #74]	; 0x4a
  uint16_t Rx_X = 0x0000;
 80004dc:	2300      	movs	r3, #0
 80004de:	f8a7 3048 	strh.w	r3, [r7, #72]	; 0x48
  uint16_t Rx_Y = 0x0000;
 80004e2:	2300      	movs	r3, #0
 80004e4:	f8a7 3046 	strh.w	r3, [r7, #70]	; 0x46
  uint16_t Rx_Z = 0x0000;
 80004e8:	2300      	movs	r3, #0
 80004ea:	f8a7 3044 	strh.w	r3, [r7, #68]	; 0x44
  uint16_t Rx_T = 0x0000;
 80004ee:	2300      	movs	r3, #0
 80004f0:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42
  uint16_t* Ptr_Rx = &Rx;
 80004f4:	f107 034a 	add.w	r3, r7, #74	; 0x4a
 80004f8:	65fb      	str	r3, [r7, #92]	; 0x5c
  uint16_t* Ptr_Rx_X = &Rx_X;
 80004fa:	f107 0348 	add.w	r3, r7, #72	; 0x48
 80004fe:	65bb      	str	r3, [r7, #88]	; 0x58
  uint16_t* Ptr_Rx_Y = &Rx_Y;
 8000500:	f107 0346 	add.w	r3, r7, #70	; 0x46
 8000504:	657b      	str	r3, [r7, #84]	; 0x54
  uint16_t* Ptr_Rx_Z = &Rx_Z;
 8000506:	f107 0344 	add.w	r3, r7, #68	; 0x44
 800050a:	653b      	str	r3, [r7, #80]	; 0x50
  uint16_t* Ptr_Rx_T = &Rx_T;
 800050c:	f107 0342 	add.w	r3, r7, #66	; 0x42
 8000510:	64fb      	str	r3, [r7, #76]	; 0x4c

  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  HAL_Delay(5000);
 8000512:	f241 3088 	movw	r0, #5000	; 0x1388
 8000516:	f000 fbe5 	bl	8000ce4 <HAL_Delay>

  HAL_GPIO_WritePin(MPU_NSS_GPIO_Port, MPU_NSS_Pin, GPIO_PIN_RESET);
 800051a:	2200      	movs	r2, #0
 800051c:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8000520:	486e      	ldr	r0, [pc, #440]	; (80006dc <main+0x23c>)
 8000522:	f000 fecf 	bl	80012c4 <HAL_GPIO_WritePin>
  NUfsr_IMU_TransmitReceive(IMU_SELF_TEST_X_ACCEL 	| IMU_READ, 0x00, Ptr_Rx_X, 1);
 8000526:	2301      	movs	r3, #1
 8000528:	6dba      	ldr	r2, [r7, #88]	; 0x58
 800052a:	2100      	movs	r1, #0
 800052c:	208d      	movs	r0, #141	; 0x8d
 800052e:	f7ff ff91 	bl	8000454 <NUfsr_IMU_TransmitReceive>
  NUfsr_IMU_TransmitReceive(IMU_SELF_TEST_Y_ACCEL 	| IMU_READ, 0x00, Ptr_Rx_Y, 1);
 8000532:	2301      	movs	r3, #1
 8000534:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8000536:	2100      	movs	r1, #0
 8000538:	208e      	movs	r0, #142	; 0x8e
 800053a:	f7ff ff8b 	bl	8000454 <NUfsr_IMU_TransmitReceive>
  NUfsr_IMU_TransmitReceive(IMU_SELF_TEST_Z_ACCEL 	| IMU_READ, 0x00, Ptr_Rx_Z, 1);
 800053e:	2301      	movs	r3, #1
 8000540:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 8000542:	2100      	movs	r1, #0
 8000544:	208f      	movs	r0, #143	; 0x8f
 8000546:	f7ff ff85 	bl	8000454 <NUfsr_IMU_TransmitReceive>
  HAL_GPIO_WritePin(MPU_NSS_GPIO_Port, MPU_NSS_Pin, GPIO_PIN_SET);
 800054a:	2201      	movs	r2, #1
 800054c:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8000550:	4862      	ldr	r0, [pc, #392]	; (80006dc <main+0x23c>)
 8000552:	f000 feb7 	bl	80012c4 <HAL_GPIO_WritePin>

  char buffer[64];
  sprintf(buffer, "ST:\t%d\t%d\t%d\r\n", *Ptr_Rx_X, *Ptr_Rx_Y, *Ptr_Rx_Z);
 8000556:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8000558:	881b      	ldrh	r3, [r3, #0]
 800055a:	461a      	mov	r2, r3
 800055c:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800055e:	881b      	ldrh	r3, [r3, #0]
 8000560:	4619      	mov	r1, r3
 8000562:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8000564:	881b      	ldrh	r3, [r3, #0]
 8000566:	4638      	mov	r0, r7
 8000568:	9300      	str	r3, [sp, #0]
 800056a:	460b      	mov	r3, r1
 800056c:	495c      	ldr	r1, [pc, #368]	; (80006e0 <main+0x240>)
 800056e:	f009 f829 	bl	80095c4 <siprintf>
  CDC_Transmit_HS((uint8_t*)buffer, strlen(buffer));
 8000572:	463b      	mov	r3, r7
 8000574:	4618      	mov	r0, r3
 8000576:	f7ff feb3 	bl	80002e0 <strlen>
 800057a:	4603      	mov	r3, r0
 800057c:	b29a      	uxth	r2, r3
 800057e:	463b      	mov	r3, r7
 8000580:	4611      	mov	r1, r2
 8000582:	4618      	mov	r0, r3
 8000584:	f008 fb10 	bl	8008ba8 <CDC_Transmit_HS>
  while (1)
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
	  HAL_GPIO_WritePin(MPU_NSS_GPIO_Port, MPU_NSS_Pin, GPIO_PIN_RESET);
 8000588:	2200      	movs	r2, #0
 800058a:	f44f 6100 	mov.w	r1, #2048	; 0x800
 800058e:	4853      	ldr	r0, [pc, #332]	; (80006dc <main+0x23c>)
 8000590:	f000 fe98 	bl	80012c4 <HAL_GPIO_WritePin>
	  NUfsr_IMU_TransmitReceive(WHO_AM_I 		| IMU_READ, 0x00, Ptr_Rx, 1);
 8000594:	2301      	movs	r3, #1
 8000596:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 8000598:	2100      	movs	r1, #0
 800059a:	20f5      	movs	r0, #245	; 0xf5
 800059c:	f7ff ff5a 	bl	8000454 <NUfsr_IMU_TransmitReceive>
	  sprintf(buffer, "IMU:\t%x", *Ptr_Rx);
 80005a0:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80005a2:	881b      	ldrh	r3, [r3, #0]
 80005a4:	461a      	mov	r2, r3
 80005a6:	463b      	mov	r3, r7
 80005a8:	494e      	ldr	r1, [pc, #312]	; (80006e4 <main+0x244>)
 80005aa:	4618      	mov	r0, r3
 80005ac:	f009 f80a 	bl	80095c4 <siprintf>
	  CDC_Transmit_HS((uint8_t*)buffer, strlen(buffer));
 80005b0:	463b      	mov	r3, r7
 80005b2:	4618      	mov	r0, r3
 80005b4:	f7ff fe94 	bl	80002e0 <strlen>
 80005b8:	4603      	mov	r3, r0
 80005ba:	b29a      	uxth	r2, r3
 80005bc:	463b      	mov	r3, r7
 80005be:	4611      	mov	r1, r2
 80005c0:	4618      	mov	r0, r3
 80005c2:	f008 faf1 	bl	8008ba8 <CDC_Transmit_HS>
	  NUfsr_IMU_TransmitReceive(ACCEL_XOUT_H 	| IMU_READ, 0x00, Ptr_Rx, 2);
 80005c6:	2302      	movs	r3, #2
 80005c8:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 80005ca:	2100      	movs	r1, #0
 80005cc:	20bb      	movs	r0, #187	; 0xbb
 80005ce:	f7ff ff41 	bl	8000454 <NUfsr_IMU_TransmitReceive>
	  sprintf(buffer, "\t%d", *Ptr_Rx);
 80005d2:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80005d4:	881b      	ldrh	r3, [r3, #0]
 80005d6:	461a      	mov	r2, r3
 80005d8:	463b      	mov	r3, r7
 80005da:	4943      	ldr	r1, [pc, #268]	; (80006e8 <main+0x248>)
 80005dc:	4618      	mov	r0, r3
 80005de:	f008 fff1 	bl	80095c4 <siprintf>
	  CDC_Transmit_HS((uint8_t*)buffer, strlen(buffer));
 80005e2:	463b      	mov	r3, r7
 80005e4:	4618      	mov	r0, r3
 80005e6:	f7ff fe7b 	bl	80002e0 <strlen>
 80005ea:	4603      	mov	r3, r0
 80005ec:	b29a      	uxth	r2, r3
 80005ee:	463b      	mov	r3, r7
 80005f0:	4611      	mov	r1, r2
 80005f2:	4618      	mov	r0, r3
 80005f4:	f008 fad8 	bl	8008ba8 <CDC_Transmit_HS>
	  NUfsr_IMU_TransmitReceive(ACCEL_YOUT_H 	| IMU_READ, 0x00, Ptr_Rx, 2);
 80005f8:	2302      	movs	r3, #2
 80005fa:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 80005fc:	2100      	movs	r1, #0
 80005fe:	20bd      	movs	r0, #189	; 0xbd
 8000600:	f7ff ff28 	bl	8000454 <NUfsr_IMU_TransmitReceive>
	  sprintf(buffer, "\t%d", *Ptr_Rx);
 8000604:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8000606:	881b      	ldrh	r3, [r3, #0]
 8000608:	461a      	mov	r2, r3
 800060a:	463b      	mov	r3, r7
 800060c:	4936      	ldr	r1, [pc, #216]	; (80006e8 <main+0x248>)
 800060e:	4618      	mov	r0, r3
 8000610:	f008 ffd8 	bl	80095c4 <siprintf>
	  CDC_Transmit_HS((uint8_t*)buffer, strlen(buffer));
 8000614:	463b      	mov	r3, r7
 8000616:	4618      	mov	r0, r3
 8000618:	f7ff fe62 	bl	80002e0 <strlen>
 800061c:	4603      	mov	r3, r0
 800061e:	b29a      	uxth	r2, r3
 8000620:	463b      	mov	r3, r7
 8000622:	4611      	mov	r1, r2
 8000624:	4618      	mov	r0, r3
 8000626:	f008 fabf 	bl	8008ba8 <CDC_Transmit_HS>
	  NUfsr_IMU_TransmitReceive(ACCEL_ZOUT_H 	| IMU_READ, 0x00, Ptr_Rx, 2);
 800062a:	2302      	movs	r3, #2
 800062c:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 800062e:	2100      	movs	r1, #0
 8000630:	20bf      	movs	r0, #191	; 0xbf
 8000632:	f7ff ff0f 	bl	8000454 <NUfsr_IMU_TransmitReceive>
	  sprintf(buffer, "\t%d", *Ptr_Rx);
 8000636:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8000638:	881b      	ldrh	r3, [r3, #0]
 800063a:	461a      	mov	r2, r3
 800063c:	463b      	mov	r3, r7
 800063e:	492a      	ldr	r1, [pc, #168]	; (80006e8 <main+0x248>)
 8000640:	4618      	mov	r0, r3
 8000642:	f008 ffbf 	bl	80095c4 <siprintf>
	  CDC_Transmit_HS((uint8_t*)buffer, strlen(buffer));
 8000646:	463b      	mov	r3, r7
 8000648:	4618      	mov	r0, r3
 800064a:	f7ff fe49 	bl	80002e0 <strlen>
 800064e:	4603      	mov	r3, r0
 8000650:	b29a      	uxth	r2, r3
 8000652:	463b      	mov	r3, r7
 8000654:	4611      	mov	r1, r2
 8000656:	4618      	mov	r0, r3
 8000658:	f008 faa6 	bl	8008ba8 <CDC_Transmit_HS>
	  NUfsr_IMU_TransmitReceive(TEMP_OUT_H 		| IMU_READ, 0x00, Ptr_Rx, 2);
 800065c:	2302      	movs	r3, #2
 800065e:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 8000660:	2100      	movs	r1, #0
 8000662:	20c1      	movs	r0, #193	; 0xc1
 8000664:	f7ff fef6 	bl	8000454 <NUfsr_IMU_TransmitReceive>
	  sprintf(buffer, "\t%d", *Ptr_Rx);
 8000668:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800066a:	881b      	ldrh	r3, [r3, #0]
 800066c:	461a      	mov	r2, r3
 800066e:	463b      	mov	r3, r7
 8000670:	491d      	ldr	r1, [pc, #116]	; (80006e8 <main+0x248>)
 8000672:	4618      	mov	r0, r3
 8000674:	f008 ffa6 	bl	80095c4 <siprintf>
	  CDC_Transmit_HS((uint8_t*)buffer, strlen(buffer));
 8000678:	463b      	mov	r3, r7
 800067a:	4618      	mov	r0, r3
 800067c:	f7ff fe30 	bl	80002e0 <strlen>
 8000680:	4603      	mov	r3, r0
 8000682:	b29a      	uxth	r2, r3
 8000684:	463b      	mov	r3, r7
 8000686:	4611      	mov	r1, r2
 8000688:	4618      	mov	r0, r3
 800068a:	f008 fa8d 	bl	8008ba8 <CDC_Transmit_HS>
	  NUfsr_IMU_TransmitReceive(WHO_AM_I 		| IMU_READ, 0x00, Ptr_Rx, 1);
 800068e:	2301      	movs	r3, #1
 8000690:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 8000692:	2100      	movs	r1, #0
 8000694:	20f5      	movs	r0, #245	; 0xf5
 8000696:	f7ff fedd 	bl	8000454 <NUfsr_IMU_TransmitReceive>
	  sprintf(buffer, "\t%x\r\n", *Ptr_Rx);
 800069a:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800069c:	881b      	ldrh	r3, [r3, #0]
 800069e:	461a      	mov	r2, r3
 80006a0:	463b      	mov	r3, r7
 80006a2:	4912      	ldr	r1, [pc, #72]	; (80006ec <main+0x24c>)
 80006a4:	4618      	mov	r0, r3
 80006a6:	f008 ff8d 	bl	80095c4 <siprintf>
	  CDC_Transmit_HS((uint8_t*)buffer, strlen(buffer));
 80006aa:	463b      	mov	r3, r7
 80006ac:	4618      	mov	r0, r3
 80006ae:	f7ff fe17 	bl	80002e0 <strlen>
 80006b2:	4603      	mov	r3, r0
 80006b4:	b29a      	uxth	r2, r3
 80006b6:	463b      	mov	r3, r7
 80006b8:	4611      	mov	r1, r2
 80006ba:	4618      	mov	r0, r3
 80006bc:	f008 fa74 	bl	8008ba8 <CDC_Transmit_HS>
	  HAL_GPIO_WritePin(MPU_NSS_GPIO_Port, MPU_NSS_Pin, GPIO_PIN_SET);
 80006c0:	2201      	movs	r2, #1
 80006c2:	f44f 6100 	mov.w	r1, #2048	; 0x800
 80006c6:	4805      	ldr	r0, [pc, #20]	; (80006dc <main+0x23c>)
 80006c8:	f000 fdfc 	bl	80012c4 <HAL_GPIO_WritePin>


	  HAL_Delay(1000);
 80006cc:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80006d0:	f000 fb08 	bl	8000ce4 <HAL_Delay>
	  HAL_GPIO_WritePin(MPU_NSS_GPIO_Port, MPU_NSS_Pin, GPIO_PIN_RESET);
 80006d4:	e758      	b.n	8000588 <main+0xe8>
 80006d6:	bf00      	nop
 80006d8:	58020400 	.word	0x58020400
 80006dc:	58021000 	.word	0x58021000
 80006e0:	08009eb8 	.word	0x08009eb8
 80006e4:	08009ec8 	.word	0x08009ec8
 80006e8:	08009ed0 	.word	0x08009ed0
 80006ec:	08009ed4 	.word	0x08009ed4

080006f0 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80006f0:	b580      	push	{r7, lr}
 80006f2:	b09c      	sub	sp, #112	; 0x70
 80006f4:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80006f6:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80006fa:	224c      	movs	r2, #76	; 0x4c
 80006fc:	2100      	movs	r1, #0
 80006fe:	4618      	mov	r0, r3
 8000700:	f008 ff58 	bl	80095b4 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000704:	1d3b      	adds	r3, r7, #4
 8000706:	2220      	movs	r2, #32
 8000708:	2100      	movs	r1, #0
 800070a:	4618      	mov	r0, r3
 800070c:	f008 ff52 	bl	80095b4 <memset>

  /** Supply configuration update enable
  */
  HAL_PWREx_ConfigSupply(PWR_LDO_SUPPLY);
 8000710:	2002      	movs	r0, #2
 8000712:	f002 f8c5 	bl	80028a0 <HAL_PWREx_ConfigSupply>

  /** Configure the main internal regulator output voltage
  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE3);
 8000716:	2300      	movs	r3, #0
 8000718:	603b      	str	r3, [r7, #0]
 800071a:	4b2a      	ldr	r3, [pc, #168]	; (80007c4 <SystemClock_Config+0xd4>)
 800071c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800071e:	4a29      	ldr	r2, [pc, #164]	; (80007c4 <SystemClock_Config+0xd4>)
 8000720:	f023 0301 	bic.w	r3, r3, #1
 8000724:	62d3      	str	r3, [r2, #44]	; 0x2c
 8000726:	4b27      	ldr	r3, [pc, #156]	; (80007c4 <SystemClock_Config+0xd4>)
 8000728:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800072a:	f003 0301 	and.w	r3, r3, #1
 800072e:	603b      	str	r3, [r7, #0]
 8000730:	4b25      	ldr	r3, [pc, #148]	; (80007c8 <SystemClock_Config+0xd8>)
 8000732:	699b      	ldr	r3, [r3, #24]
 8000734:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 8000738:	4a23      	ldr	r2, [pc, #140]	; (80007c8 <SystemClock_Config+0xd8>)
 800073a:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800073e:	6193      	str	r3, [r2, #24]
 8000740:	4b21      	ldr	r3, [pc, #132]	; (80007c8 <SystemClock_Config+0xd8>)
 8000742:	699b      	ldr	r3, [r3, #24]
 8000744:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8000748:	603b      	str	r3, [r7, #0]
 800074a:	683b      	ldr	r3, [r7, #0]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_VOSRDY)) {}
 800074c:	bf00      	nop
 800074e:	4b1e      	ldr	r3, [pc, #120]	; (80007c8 <SystemClock_Config+0xd8>)
 8000750:	699b      	ldr	r3, [r3, #24]
 8000752:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8000756:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800075a:	d1f8      	bne.n	800074e <SystemClock_Config+0x5e>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI48|RCC_OSCILLATORTYPE_HSI;
 800075c:	2322      	movs	r3, #34	; 0x22
 800075e:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.HSIState = RCC_HSI_DIV1;
 8000760:	2301      	movs	r3, #1
 8000762:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000764:	2340      	movs	r3, #64	; 0x40
 8000766:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.HSI48State = RCC_HSI48_ON;
 8000768:	2301      	movs	r3, #1
 800076a:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 800076c:	2300      	movs	r3, #0
 800076e:	64bb      	str	r3, [r7, #72]	; 0x48
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000770:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000774:	4618      	mov	r0, r3
 8000776:	f002 f8dd 	bl	8002934 <HAL_RCC_OscConfig>
 800077a:	4603      	mov	r3, r0
 800077c:	2b00      	cmp	r3, #0
 800077e:	d001      	beq.n	8000784 <SystemClock_Config+0x94>
  {
    Error_Handler();
 8000780:	f000 f824 	bl	80007cc <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000784:	233f      	movs	r3, #63	; 0x3f
 8000786:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2
                              |RCC_CLOCKTYPE_D3PCLK1|RCC_CLOCKTYPE_D1PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 8000788:	2300      	movs	r3, #0
 800078a:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.SYSCLKDivider = RCC_SYSCLK_DIV1;
 800078c:	2300      	movs	r3, #0
 800078e:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_HCLK_DIV1;
 8000790:	2300      	movs	r3, #0
 8000792:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB3CLKDivider = RCC_APB3_DIV1;
 8000794:	2300      	movs	r3, #0
 8000796:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_APB1_DIV1;
 8000798:	2300      	movs	r3, #0
 800079a:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_APB2_DIV2;
 800079c:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80007a0:	61fb      	str	r3, [r7, #28]
  RCC_ClkInitStruct.APB4CLKDivider = RCC_APB4_DIV1;
 80007a2:	2300      	movs	r3, #0
 80007a4:	623b      	str	r3, [r7, #32]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 80007a6:	1d3b      	adds	r3, r7, #4
 80007a8:	2101      	movs	r1, #1
 80007aa:	4618      	mov	r0, r3
 80007ac:	f002 fcf0 	bl	8003190 <HAL_RCC_ClockConfig>
 80007b0:	4603      	mov	r3, r0
 80007b2:	2b00      	cmp	r3, #0
 80007b4:	d001      	beq.n	80007ba <SystemClock_Config+0xca>
  {
    Error_Handler();
 80007b6:	f000 f809 	bl	80007cc <Error_Handler>
  }
}
 80007ba:	bf00      	nop
 80007bc:	3770      	adds	r7, #112	; 0x70
 80007be:	46bd      	mov	sp, r7
 80007c0:	bd80      	pop	{r7, pc}
 80007c2:	bf00      	nop
 80007c4:	58000400 	.word	0x58000400
 80007c8:	58024800 	.word	0x58024800

080007cc <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80007cc:	b480      	push	{r7}
 80007ce:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80007d0:	b672      	cpsid	i
}
 80007d2:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80007d4:	e7fe      	b.n	80007d4 <Error_Handler+0x8>
	...

080007d8 <MX_SPI4_Init>:

SPI_HandleTypeDef hspi4;

/* SPI4 init function */
void MX_SPI4_Init(void)
{
 80007d8:	b580      	push	{r7, lr}
 80007da:	af00      	add	r7, sp, #0
  /* USER CODE END SPI4_Init 0 */

  /* USER CODE BEGIN SPI4_Init 1 */

  /* USER CODE END SPI4_Init 1 */
  hspi4.Instance = SPI4;
 80007dc:	4b28      	ldr	r3, [pc, #160]	; (8000880 <MX_SPI4_Init+0xa8>)
 80007de:	4a29      	ldr	r2, [pc, #164]	; (8000884 <MX_SPI4_Init+0xac>)
 80007e0:	601a      	str	r2, [r3, #0]
  hspi4.Init.Mode = SPI_MODE_MASTER;
 80007e2:	4b27      	ldr	r3, [pc, #156]	; (8000880 <MX_SPI4_Init+0xa8>)
 80007e4:	f44f 0280 	mov.w	r2, #4194304	; 0x400000
 80007e8:	605a      	str	r2, [r3, #4]
  hspi4.Init.Direction = SPI_DIRECTION_2LINES;
 80007ea:	4b25      	ldr	r3, [pc, #148]	; (8000880 <MX_SPI4_Init+0xa8>)
 80007ec:	2200      	movs	r2, #0
 80007ee:	609a      	str	r2, [r3, #8]
  hspi4.Init.DataSize = SPI_DATASIZE_16BIT;
 80007f0:	4b23      	ldr	r3, [pc, #140]	; (8000880 <MX_SPI4_Init+0xa8>)
 80007f2:	220f      	movs	r2, #15
 80007f4:	60da      	str	r2, [r3, #12]
  hspi4.Init.CLKPolarity = SPI_POLARITY_HIGH;
 80007f6:	4b22      	ldr	r3, [pc, #136]	; (8000880 <MX_SPI4_Init+0xa8>)
 80007f8:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 80007fc:	611a      	str	r2, [r3, #16]
  hspi4.Init.CLKPhase = SPI_PHASE_2EDGE;
 80007fe:	4b20      	ldr	r3, [pc, #128]	; (8000880 <MX_SPI4_Init+0xa8>)
 8000800:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8000804:	615a      	str	r2, [r3, #20]
  hspi4.Init.NSS = SPI_NSS_HARD_OUTPUT;
 8000806:	4b1e      	ldr	r3, [pc, #120]	; (8000880 <MX_SPI4_Init+0xa8>)
 8000808:	f04f 5200 	mov.w	r2, #536870912	; 0x20000000
 800080c:	619a      	str	r2, [r3, #24]
  hspi4.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_16;
 800080e:	4b1c      	ldr	r3, [pc, #112]	; (8000880 <MX_SPI4_Init+0xa8>)
 8000810:	f04f 5240 	mov.w	r2, #805306368	; 0x30000000
 8000814:	61da      	str	r2, [r3, #28]
  hspi4.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8000816:	4b1a      	ldr	r3, [pc, #104]	; (8000880 <MX_SPI4_Init+0xa8>)
 8000818:	2200      	movs	r2, #0
 800081a:	621a      	str	r2, [r3, #32]
  hspi4.Init.TIMode = SPI_TIMODE_DISABLE;
 800081c:	4b18      	ldr	r3, [pc, #96]	; (8000880 <MX_SPI4_Init+0xa8>)
 800081e:	2200      	movs	r2, #0
 8000820:	625a      	str	r2, [r3, #36]	; 0x24
  hspi4.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8000822:	4b17      	ldr	r3, [pc, #92]	; (8000880 <MX_SPI4_Init+0xa8>)
 8000824:	2200      	movs	r2, #0
 8000826:	629a      	str	r2, [r3, #40]	; 0x28
  hspi4.Init.CRCPolynomial = 0x0;
 8000828:	4b15      	ldr	r3, [pc, #84]	; (8000880 <MX_SPI4_Init+0xa8>)
 800082a:	2200      	movs	r2, #0
 800082c:	62da      	str	r2, [r3, #44]	; 0x2c
  hspi4.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 800082e:	4b14      	ldr	r3, [pc, #80]	; (8000880 <MX_SPI4_Init+0xa8>)
 8000830:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8000834:	635a      	str	r2, [r3, #52]	; 0x34
  hspi4.Init.NSSPolarity = SPI_NSS_POLARITY_LOW;
 8000836:	4b12      	ldr	r3, [pc, #72]	; (8000880 <MX_SPI4_Init+0xa8>)
 8000838:	2200      	movs	r2, #0
 800083a:	639a      	str	r2, [r3, #56]	; 0x38
  hspi4.Init.FifoThreshold = SPI_FIFO_THRESHOLD_01DATA;
 800083c:	4b10      	ldr	r3, [pc, #64]	; (8000880 <MX_SPI4_Init+0xa8>)
 800083e:	2200      	movs	r2, #0
 8000840:	63da      	str	r2, [r3, #60]	; 0x3c
  hspi4.Init.TxCRCInitializationPattern = SPI_CRC_INITIALIZATION_ALL_ZERO_PATTERN;
 8000842:	4b0f      	ldr	r3, [pc, #60]	; (8000880 <MX_SPI4_Init+0xa8>)
 8000844:	2200      	movs	r2, #0
 8000846:	641a      	str	r2, [r3, #64]	; 0x40
  hspi4.Init.RxCRCInitializationPattern = SPI_CRC_INITIALIZATION_ALL_ZERO_PATTERN;
 8000848:	4b0d      	ldr	r3, [pc, #52]	; (8000880 <MX_SPI4_Init+0xa8>)
 800084a:	2200      	movs	r2, #0
 800084c:	645a      	str	r2, [r3, #68]	; 0x44
  hspi4.Init.MasterSSIdleness = SPI_MASTER_SS_IDLENESS_00CYCLE;
 800084e:	4b0c      	ldr	r3, [pc, #48]	; (8000880 <MX_SPI4_Init+0xa8>)
 8000850:	2200      	movs	r2, #0
 8000852:	649a      	str	r2, [r3, #72]	; 0x48
  hspi4.Init.MasterInterDataIdleness = SPI_MASTER_INTERDATA_IDLENESS_00CYCLE;
 8000854:	4b0a      	ldr	r3, [pc, #40]	; (8000880 <MX_SPI4_Init+0xa8>)
 8000856:	2200      	movs	r2, #0
 8000858:	64da      	str	r2, [r3, #76]	; 0x4c
  hspi4.Init.MasterReceiverAutoSusp = SPI_MASTER_RX_AUTOSUSP_DISABLE;
 800085a:	4b09      	ldr	r3, [pc, #36]	; (8000880 <MX_SPI4_Init+0xa8>)
 800085c:	2200      	movs	r2, #0
 800085e:	651a      	str	r2, [r3, #80]	; 0x50
  hspi4.Init.MasterKeepIOState = SPI_MASTER_KEEP_IO_STATE_DISABLE;
 8000860:	4b07      	ldr	r3, [pc, #28]	; (8000880 <MX_SPI4_Init+0xa8>)
 8000862:	2200      	movs	r2, #0
 8000864:	655a      	str	r2, [r3, #84]	; 0x54
  hspi4.Init.IOSwap = SPI_IO_SWAP_DISABLE;
 8000866:	4b06      	ldr	r3, [pc, #24]	; (8000880 <MX_SPI4_Init+0xa8>)
 8000868:	2200      	movs	r2, #0
 800086a:	659a      	str	r2, [r3, #88]	; 0x58
  if (HAL_SPI_Init(&hspi4) != HAL_OK)
 800086c:	4804      	ldr	r0, [pc, #16]	; (8000880 <MX_SPI4_Init+0xa8>)
 800086e:	f004 f899 	bl	80049a4 <HAL_SPI_Init>
 8000872:	4603      	mov	r3, r0
 8000874:	2b00      	cmp	r3, #0
 8000876:	d001      	beq.n	800087c <MX_SPI4_Init+0xa4>
  {
    Error_Handler();
 8000878:	f7ff ffa8 	bl	80007cc <Error_Handler>
  }
  /* USER CODE BEGIN SPI4_Init 2 */

  /* USER CODE END SPI4_Init 2 */

}
 800087c:	bf00      	nop
 800087e:	bd80      	pop	{r7, pc}
 8000880:	24000180 	.word	0x24000180
 8000884:	40013400 	.word	0x40013400

08000888 <HAL_SPI_MspInit>:

void HAL_SPI_MspInit(SPI_HandleTypeDef* spiHandle)
{
 8000888:	b580      	push	{r7, lr}
 800088a:	b0b8      	sub	sp, #224	; 0xe0
 800088c:	af00      	add	r7, sp, #0
 800088e:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000890:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 8000894:	2200      	movs	r2, #0
 8000896:	601a      	str	r2, [r3, #0]
 8000898:	605a      	str	r2, [r3, #4]
 800089a:	609a      	str	r2, [r3, #8]
 800089c:	60da      	str	r2, [r3, #12]
 800089e:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 80008a0:	f107 0310 	add.w	r3, r7, #16
 80008a4:	22bc      	movs	r2, #188	; 0xbc
 80008a6:	2100      	movs	r1, #0
 80008a8:	4618      	mov	r0, r3
 80008aa:	f008 fe83 	bl	80095b4 <memset>
  if(spiHandle->Instance==SPI4)
 80008ae:	687b      	ldr	r3, [r7, #4]
 80008b0:	681b      	ldr	r3, [r3, #0]
 80008b2:	4a25      	ldr	r2, [pc, #148]	; (8000948 <HAL_SPI_MspInit+0xc0>)
 80008b4:	4293      	cmp	r3, r2
 80008b6:	d142      	bne.n	800093e <HAL_SPI_MspInit+0xb6>

  /* USER CODE END SPI4_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_SPI4;
 80008b8:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80008bc:	613b      	str	r3, [r7, #16]
    PeriphClkInitStruct.Spi45ClockSelection = RCC_SPI45CLKSOURCE_D2PCLK1;
 80008be:	2300      	movs	r3, #0
 80008c0:	673b      	str	r3, [r7, #112]	; 0x70
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 80008c2:	f107 0310 	add.w	r3, r7, #16
 80008c6:	4618      	mov	r0, r3
 80008c8:	f002 ffc2 	bl	8003850 <HAL_RCCEx_PeriphCLKConfig>
 80008cc:	4603      	mov	r3, r0
 80008ce:	2b00      	cmp	r3, #0
 80008d0:	d001      	beq.n	80008d6 <HAL_SPI_MspInit+0x4e>
    {
      Error_Handler();
 80008d2:	f7ff ff7b 	bl	80007cc <Error_Handler>
    }

    /* SPI4 clock enable */
    __HAL_RCC_SPI4_CLK_ENABLE();
 80008d6:	4b1d      	ldr	r3, [pc, #116]	; (800094c <HAL_SPI_MspInit+0xc4>)
 80008d8:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 80008dc:	4a1b      	ldr	r2, [pc, #108]	; (800094c <HAL_SPI_MspInit+0xc4>)
 80008de:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 80008e2:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0
 80008e6:	4b19      	ldr	r3, [pc, #100]	; (800094c <HAL_SPI_MspInit+0xc4>)
 80008e8:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 80008ec:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80008f0:	60fb      	str	r3, [r7, #12]
 80008f2:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOE_CLK_ENABLE();
 80008f4:	4b15      	ldr	r3, [pc, #84]	; (800094c <HAL_SPI_MspInit+0xc4>)
 80008f6:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80008fa:	4a14      	ldr	r2, [pc, #80]	; (800094c <HAL_SPI_MspInit+0xc4>)
 80008fc:	f043 0310 	orr.w	r3, r3, #16
 8000900:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000904:	4b11      	ldr	r3, [pc, #68]	; (800094c <HAL_SPI_MspInit+0xc4>)
 8000906:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800090a:	f003 0310 	and.w	r3, r3, #16
 800090e:	60bb      	str	r3, [r7, #8]
 8000910:	68bb      	ldr	r3, [r7, #8]
    PE11     ------> SPI4_NSS
    PE12     ------> SPI4_SCK
    PE13     ------> SPI4_MISO
    PE14     ------> SPI4_MOSI
    */
    GPIO_InitStruct.Pin = MPU_NSS_Pin|MPU_SCK_Pin|MPU_MISO_Pin|MPU_MOSI_Pin;
 8000912:	f44f 43f0 	mov.w	r3, #30720	; 0x7800
 8000916:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800091a:	2302      	movs	r3, #2
 800091c:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000920:	2300      	movs	r3, #0
 8000922:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000926:	2300      	movs	r3, #0
 8000928:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI4;
 800092c:	2305      	movs	r3, #5
 800092e:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8000932:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 8000936:	4619      	mov	r1, r3
 8000938:	4805      	ldr	r0, [pc, #20]	; (8000950 <HAL_SPI_MspInit+0xc8>)
 800093a:	f000 fb13 	bl	8000f64 <HAL_GPIO_Init>

  /* USER CODE BEGIN SPI4_MspInit 1 */

  /* USER CODE END SPI4_MspInit 1 */
  }
}
 800093e:	bf00      	nop
 8000940:	37e0      	adds	r7, #224	; 0xe0
 8000942:	46bd      	mov	sp, r7
 8000944:	bd80      	pop	{r7, pc}
 8000946:	bf00      	nop
 8000948:	40013400 	.word	0x40013400
 800094c:	58024400 	.word	0x58024400
 8000950:	58021000 	.word	0x58021000

08000954 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000954:	b480      	push	{r7}
 8000956:	b083      	sub	sp, #12
 8000958:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800095a:	4b0a      	ldr	r3, [pc, #40]	; (8000984 <HAL_MspInit+0x30>)
 800095c:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8000960:	4a08      	ldr	r2, [pc, #32]	; (8000984 <HAL_MspInit+0x30>)
 8000962:	f043 0302 	orr.w	r3, r3, #2
 8000966:	f8c2 30f4 	str.w	r3, [r2, #244]	; 0xf4
 800096a:	4b06      	ldr	r3, [pc, #24]	; (8000984 <HAL_MspInit+0x30>)
 800096c:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8000970:	f003 0302 	and.w	r3, r3, #2
 8000974:	607b      	str	r3, [r7, #4]
 8000976:	687b      	ldr	r3, [r7, #4]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000978:	bf00      	nop
 800097a:	370c      	adds	r7, #12
 800097c:	46bd      	mov	sp, r7
 800097e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000982:	4770      	bx	lr
 8000984:	58024400 	.word	0x58024400

08000988 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000988:	b480      	push	{r7}
 800098a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 800098c:	e7fe      	b.n	800098c <NMI_Handler+0x4>

0800098e <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800098e:	b480      	push	{r7}
 8000990:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000992:	e7fe      	b.n	8000992 <HardFault_Handler+0x4>

08000994 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000994:	b480      	push	{r7}
 8000996:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000998:	e7fe      	b.n	8000998 <MemManage_Handler+0x4>

0800099a <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800099a:	b480      	push	{r7}
 800099c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800099e:	e7fe      	b.n	800099e <BusFault_Handler+0x4>

080009a0 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80009a0:	b480      	push	{r7}
 80009a2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80009a4:	e7fe      	b.n	80009a4 <UsageFault_Handler+0x4>

080009a6 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80009a6:	b480      	push	{r7}
 80009a8:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80009aa:	bf00      	nop
 80009ac:	46bd      	mov	sp, r7
 80009ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009b2:	4770      	bx	lr

080009b4 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80009b4:	b480      	push	{r7}
 80009b6:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80009b8:	bf00      	nop
 80009ba:	46bd      	mov	sp, r7
 80009bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009c0:	4770      	bx	lr

080009c2 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80009c2:	b480      	push	{r7}
 80009c4:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80009c6:	bf00      	nop
 80009c8:	46bd      	mov	sp, r7
 80009ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009ce:	4770      	bx	lr

080009d0 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80009d0:	b580      	push	{r7, lr}
 80009d2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80009d4:	f000 f966 	bl	8000ca4 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80009d8:	bf00      	nop
 80009da:	bd80      	pop	{r7, pc}

080009dc <OTG_HS_IRQHandler>:

/**
  * @brief This function handles USB On The Go HS global interrupt.
  */
void OTG_HS_IRQHandler(void)
{
 80009dc:	b580      	push	{r7, lr}
 80009de:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN OTG_HS_IRQn 0 */

  /* USER CODE END OTG_HS_IRQn 0 */
  HAL_PCD_IRQHandler(&hpcd_USB_OTG_HS);
 80009e0:	4802      	ldr	r0, [pc, #8]	; (80009ec <OTG_HS_IRQHandler+0x10>)
 80009e2:	f000 fddf 	bl	80015a4 <HAL_PCD_IRQHandler>
  /* USER CODE BEGIN OTG_HS_IRQn 1 */

  /* USER CODE END OTG_HS_IRQn 1 */
}
 80009e6:	bf00      	nop
 80009e8:	bd80      	pop	{r7, pc}
 80009ea:	bf00      	nop
 80009ec:	240016f0 	.word	0x240016f0

080009f0 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80009f0:	b580      	push	{r7, lr}
 80009f2:	b086      	sub	sp, #24
 80009f4:	af00      	add	r7, sp, #0
 80009f6:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80009f8:	4a14      	ldr	r2, [pc, #80]	; (8000a4c <_sbrk+0x5c>)
 80009fa:	4b15      	ldr	r3, [pc, #84]	; (8000a50 <_sbrk+0x60>)
 80009fc:	1ad3      	subs	r3, r2, r3
 80009fe:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000a00:	697b      	ldr	r3, [r7, #20]
 8000a02:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000a04:	4b13      	ldr	r3, [pc, #76]	; (8000a54 <_sbrk+0x64>)
 8000a06:	681b      	ldr	r3, [r3, #0]
 8000a08:	2b00      	cmp	r3, #0
 8000a0a:	d102      	bne.n	8000a12 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000a0c:	4b11      	ldr	r3, [pc, #68]	; (8000a54 <_sbrk+0x64>)
 8000a0e:	4a12      	ldr	r2, [pc, #72]	; (8000a58 <_sbrk+0x68>)
 8000a10:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8000a12:	4b10      	ldr	r3, [pc, #64]	; (8000a54 <_sbrk+0x64>)
 8000a14:	681a      	ldr	r2, [r3, #0]
 8000a16:	687b      	ldr	r3, [r7, #4]
 8000a18:	4413      	add	r3, r2
 8000a1a:	693a      	ldr	r2, [r7, #16]
 8000a1c:	429a      	cmp	r2, r3
 8000a1e:	d207      	bcs.n	8000a30 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8000a20:	f008 fd9e 	bl	8009560 <__errno>
 8000a24:	4603      	mov	r3, r0
 8000a26:	220c      	movs	r2, #12
 8000a28:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8000a2a:	f04f 33ff 	mov.w	r3, #4294967295
 8000a2e:	e009      	b.n	8000a44 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8000a30:	4b08      	ldr	r3, [pc, #32]	; (8000a54 <_sbrk+0x64>)
 8000a32:	681b      	ldr	r3, [r3, #0]
 8000a34:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8000a36:	4b07      	ldr	r3, [pc, #28]	; (8000a54 <_sbrk+0x64>)
 8000a38:	681a      	ldr	r2, [r3, #0]
 8000a3a:	687b      	ldr	r3, [r7, #4]
 8000a3c:	4413      	add	r3, r2
 8000a3e:	4a05      	ldr	r2, [pc, #20]	; (8000a54 <_sbrk+0x64>)
 8000a40:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8000a42:	68fb      	ldr	r3, [r7, #12]
}
 8000a44:	4618      	mov	r0, r3
 8000a46:	3718      	adds	r7, #24
 8000a48:	46bd      	mov	sp, r7
 8000a4a:	bd80      	pop	{r7, pc}
 8000a4c:	24080000 	.word	0x24080000
 8000a50:	00000400 	.word	0x00000400
 8000a54:	24000208 	.word	0x24000208
 8000a58:	24001e30 	.word	0x24001e30

08000a5c <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8000a5c:	b480      	push	{r7}
 8000a5e:	af00      	add	r7, sp, #0
 __IO uint32_t tmpreg;
#endif /* DATA_IN_D2_SRAM */

  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 8000a60:	4b37      	ldr	r3, [pc, #220]	; (8000b40 <SystemInit+0xe4>)
 8000a62:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000a66:	4a36      	ldr	r2, [pc, #216]	; (8000b40 <SystemInit+0xe4>)
 8000a68:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000a6c:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  #endif
  /* Reset the RCC clock configuration to the default reset state ------------*/

   /* Increasing the CPU frequency */
  if(FLASH_LATENCY_DEFAULT  > (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 8000a70:	4b34      	ldr	r3, [pc, #208]	; (8000b44 <SystemInit+0xe8>)
 8000a72:	681b      	ldr	r3, [r3, #0]
 8000a74:	f003 030f 	and.w	r3, r3, #15
 8000a78:	2b06      	cmp	r3, #6
 8000a7a:	d807      	bhi.n	8000a8c <SystemInit+0x30>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 8000a7c:	4b31      	ldr	r3, [pc, #196]	; (8000b44 <SystemInit+0xe8>)
 8000a7e:	681b      	ldr	r3, [r3, #0]
 8000a80:	f023 030f 	bic.w	r3, r3, #15
 8000a84:	4a2f      	ldr	r2, [pc, #188]	; (8000b44 <SystemInit+0xe8>)
 8000a86:	f043 0307 	orr.w	r3, r3, #7
 8000a8a:	6013      	str	r3, [r2, #0]
  }

  /* Set HSION bit */
  RCC->CR |= RCC_CR_HSION;
 8000a8c:	4b2e      	ldr	r3, [pc, #184]	; (8000b48 <SystemInit+0xec>)
 8000a8e:	681b      	ldr	r3, [r3, #0]
 8000a90:	4a2d      	ldr	r2, [pc, #180]	; (8000b48 <SystemInit+0xec>)
 8000a92:	f043 0301 	orr.w	r3, r3, #1
 8000a96:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 8000a98:	4b2b      	ldr	r3, [pc, #172]	; (8000b48 <SystemInit+0xec>)
 8000a9a:	2200      	movs	r2, #0
 8000a9c:	611a      	str	r2, [r3, #16]

  /* Reset HSEON, HSECSSON, CSION, HSI48ON, CSIKERON, PLL1ON, PLL2ON and PLL3ON bits */
  RCC->CR &= 0xEAF6ED7FU;
 8000a9e:	4b2a      	ldr	r3, [pc, #168]	; (8000b48 <SystemInit+0xec>)
 8000aa0:	681a      	ldr	r2, [r3, #0]
 8000aa2:	4929      	ldr	r1, [pc, #164]	; (8000b48 <SystemInit+0xec>)
 8000aa4:	4b29      	ldr	r3, [pc, #164]	; (8000b4c <SystemInit+0xf0>)
 8000aa6:	4013      	ands	r3, r2
 8000aa8:	600b      	str	r3, [r1, #0]

   /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLASH_LATENCY_DEFAULT  < (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 8000aaa:	4b26      	ldr	r3, [pc, #152]	; (8000b44 <SystemInit+0xe8>)
 8000aac:	681b      	ldr	r3, [r3, #0]
 8000aae:	f003 0308 	and.w	r3, r3, #8
 8000ab2:	2b00      	cmp	r3, #0
 8000ab4:	d007      	beq.n	8000ac6 <SystemInit+0x6a>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 8000ab6:	4b23      	ldr	r3, [pc, #140]	; (8000b44 <SystemInit+0xe8>)
 8000ab8:	681b      	ldr	r3, [r3, #0]
 8000aba:	f023 030f 	bic.w	r3, r3, #15
 8000abe:	4a21      	ldr	r2, [pc, #132]	; (8000b44 <SystemInit+0xe8>)
 8000ac0:	f043 0307 	orr.w	r3, r3, #7
 8000ac4:	6013      	str	r3, [r2, #0]
  }

#if defined(D3_SRAM_BASE)
  /* Reset D1CFGR register */
  RCC->D1CFGR = 0x00000000;
 8000ac6:	4b20      	ldr	r3, [pc, #128]	; (8000b48 <SystemInit+0xec>)
 8000ac8:	2200      	movs	r2, #0
 8000aca:	619a      	str	r2, [r3, #24]

  /* Reset D2CFGR register */
  RCC->D2CFGR = 0x00000000;
 8000acc:	4b1e      	ldr	r3, [pc, #120]	; (8000b48 <SystemInit+0xec>)
 8000ace:	2200      	movs	r2, #0
 8000ad0:	61da      	str	r2, [r3, #28]

  /* Reset D3CFGR register */
  RCC->D3CFGR = 0x00000000;
 8000ad2:	4b1d      	ldr	r3, [pc, #116]	; (8000b48 <SystemInit+0xec>)
 8000ad4:	2200      	movs	r2, #0
 8000ad6:	621a      	str	r2, [r3, #32]

  /* Reset SRDCFGR register */
  RCC->SRDCFGR = 0x00000000;
#endif
  /* Reset PLLCKSELR register */
  RCC->PLLCKSELR = 0x02020200;
 8000ad8:	4b1b      	ldr	r3, [pc, #108]	; (8000b48 <SystemInit+0xec>)
 8000ada:	4a1d      	ldr	r2, [pc, #116]	; (8000b50 <SystemInit+0xf4>)
 8000adc:	629a      	str	r2, [r3, #40]	; 0x28

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x01FF0000;
 8000ade:	4b1a      	ldr	r3, [pc, #104]	; (8000b48 <SystemInit+0xec>)
 8000ae0:	4a1c      	ldr	r2, [pc, #112]	; (8000b54 <SystemInit+0xf8>)
 8000ae2:	62da      	str	r2, [r3, #44]	; 0x2c
  /* Reset PLL1DIVR register */
  RCC->PLL1DIVR = 0x01010280;
 8000ae4:	4b18      	ldr	r3, [pc, #96]	; (8000b48 <SystemInit+0xec>)
 8000ae6:	4a1c      	ldr	r2, [pc, #112]	; (8000b58 <SystemInit+0xfc>)
 8000ae8:	631a      	str	r2, [r3, #48]	; 0x30
  /* Reset PLL1FRACR register */
  RCC->PLL1FRACR = 0x00000000;
 8000aea:	4b17      	ldr	r3, [pc, #92]	; (8000b48 <SystemInit+0xec>)
 8000aec:	2200      	movs	r2, #0
 8000aee:	635a      	str	r2, [r3, #52]	; 0x34

  /* Reset PLL2DIVR register */
  RCC->PLL2DIVR = 0x01010280;
 8000af0:	4b15      	ldr	r3, [pc, #84]	; (8000b48 <SystemInit+0xec>)
 8000af2:	4a19      	ldr	r2, [pc, #100]	; (8000b58 <SystemInit+0xfc>)
 8000af4:	639a      	str	r2, [r3, #56]	; 0x38

  /* Reset PLL2FRACR register */

  RCC->PLL2FRACR = 0x00000000;
 8000af6:	4b14      	ldr	r3, [pc, #80]	; (8000b48 <SystemInit+0xec>)
 8000af8:	2200      	movs	r2, #0
 8000afa:	63da      	str	r2, [r3, #60]	; 0x3c
  /* Reset PLL3DIVR register */
  RCC->PLL3DIVR = 0x01010280;
 8000afc:	4b12      	ldr	r3, [pc, #72]	; (8000b48 <SystemInit+0xec>)
 8000afe:	4a16      	ldr	r2, [pc, #88]	; (8000b58 <SystemInit+0xfc>)
 8000b00:	641a      	str	r2, [r3, #64]	; 0x40

  /* Reset PLL3FRACR register */
  RCC->PLL3FRACR = 0x00000000;
 8000b02:	4b11      	ldr	r3, [pc, #68]	; (8000b48 <SystemInit+0xec>)
 8000b04:	2200      	movs	r2, #0
 8000b06:	645a      	str	r2, [r3, #68]	; 0x44

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 8000b08:	4b0f      	ldr	r3, [pc, #60]	; (8000b48 <SystemInit+0xec>)
 8000b0a:	681b      	ldr	r3, [r3, #0]
 8000b0c:	4a0e      	ldr	r2, [pc, #56]	; (8000b48 <SystemInit+0xec>)
 8000b0e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8000b12:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000;
 8000b14:	4b0c      	ldr	r3, [pc, #48]	; (8000b48 <SystemInit+0xec>)
 8000b16:	2200      	movs	r2, #0
 8000b18:	661a      	str	r2, [r3, #96]	; 0x60

#if (STM32H7_DEV_ID == 0x450UL)
  /* dual core CM7 or single core line */
  if((DBGMCU->IDCODE & 0xFFFF0000U) < 0x20000000U)
 8000b1a:	4b10      	ldr	r3, [pc, #64]	; (8000b5c <SystemInit+0x100>)
 8000b1c:	681a      	ldr	r2, [r3, #0]
 8000b1e:	4b10      	ldr	r3, [pc, #64]	; (8000b60 <SystemInit+0x104>)
 8000b20:	4013      	ands	r3, r2
 8000b22:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8000b26:	d202      	bcs.n	8000b2e <SystemInit+0xd2>
  {
    /* if stm32h7 revY*/
    /* Change  the switch matrix read issuing capability to 1 for the AXI SRAM target (Target 7) */
    *((__IO uint32_t*)0x51008108) = 0x000000001U;
 8000b28:	4b0e      	ldr	r3, [pc, #56]	; (8000b64 <SystemInit+0x108>)
 8000b2a:	2201      	movs	r2, #1
 8000b2c:	601a      	str	r2, [r3, #0]
  /*
   * Disable the FMC bank1 (enabled after reset).
   * This, prevents CPU speculation access on this bank which blocks the use of FMC during
   * 24us. During this time the others FMC master (such as LTDC) cannot use it!
   */
  FMC_Bank1_R->BTCR[0] = 0x000030D2;
 8000b2e:	4b0e      	ldr	r3, [pc, #56]	; (8000b68 <SystemInit+0x10c>)
 8000b30:	f243 02d2 	movw	r2, #12498	; 0x30d2
 8000b34:	601a      	str	r2, [r3, #0]
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal D1 AXI-RAM or in Internal FLASH */
#endif /* USER_VECT_TAB_ADDRESS */

#endif /*DUAL_CORE && CORE_CM4*/
}
 8000b36:	bf00      	nop
 8000b38:	46bd      	mov	sp, r7
 8000b3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b3e:	4770      	bx	lr
 8000b40:	e000ed00 	.word	0xe000ed00
 8000b44:	52002000 	.word	0x52002000
 8000b48:	58024400 	.word	0x58024400
 8000b4c:	eaf6ed7f 	.word	0xeaf6ed7f
 8000b50:	02020200 	.word	0x02020200
 8000b54:	01ff0000 	.word	0x01ff0000
 8000b58:	01010280 	.word	0x01010280
 8000b5c:	5c001000 	.word	0x5c001000
 8000b60:	ffff0000 	.word	0xffff0000
 8000b64:	51008108 	.word	0x51008108
 8000b68:	52004000 	.word	0x52004000

08000b6c <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack      /* set stack pointer */
 8000b6c:	f8df d034 	ldr.w	sp, [pc, #52]	; 8000ba4 <LoopFillZerobss+0xe>

/* Call the clock system initialization function.*/
  bl  SystemInit
 8000b70:	f7ff ff74 	bl	8000a5c <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000b74:	480c      	ldr	r0, [pc, #48]	; (8000ba8 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8000b76:	490d      	ldr	r1, [pc, #52]	; (8000bac <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8000b78:	4a0d      	ldr	r2, [pc, #52]	; (8000bb0 <LoopFillZerobss+0x1a>)
  movs r3, #0
 8000b7a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000b7c:	e002      	b.n	8000b84 <LoopCopyDataInit>

08000b7e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000b7e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000b80:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000b82:	3304      	adds	r3, #4

08000b84 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000b84:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000b86:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000b88:	d3f9      	bcc.n	8000b7e <CopyDataInit>
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000b8a:	4a0a      	ldr	r2, [pc, #40]	; (8000bb4 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8000b8c:	4c0a      	ldr	r4, [pc, #40]	; (8000bb8 <LoopFillZerobss+0x22>)
  movs r3, #0
 8000b8e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000b90:	e001      	b.n	8000b96 <LoopFillZerobss>

08000b92 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000b92:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000b94:	3204      	adds	r2, #4

08000b96 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000b96:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000b98:	d3fb      	bcc.n	8000b92 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8000b9a:	f008 fce7 	bl	800956c <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8000b9e:	f7ff fc7f 	bl	80004a0 <main>
  bx  lr
 8000ba2:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8000ba4:	24080000 	.word	0x24080000
  ldr r0, =_sdata
 8000ba8:	24000000 	.word	0x24000000
  ldr r1, =_edata
 8000bac:	24000164 	.word	0x24000164
  ldr r2, =_sidata
 8000bb0:	08009f70 	.word	0x08009f70
  ldr r2, =_sbss
 8000bb4:	24000164 	.word	0x24000164
  ldr r4, =_ebss
 8000bb8:	24001e2c 	.word	0x24001e2c

08000bbc <ADC3_IRQHandler>:
 * @retval None
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8000bbc:	e7fe      	b.n	8000bbc <ADC3_IRQHandler>
	...

08000bc0 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000bc0:	b580      	push	{r7, lr}
 8000bc2:	b082      	sub	sp, #8
 8000bc4:	af00      	add	r7, sp, #0
   __HAL_ART_CONFIG_BASE_ADDRESS(0x08100000UL);  /* Configure the Cortex-M4 ART Base address to the Flash Bank 2 : */
   __HAL_ART_ENABLE();                           /* Enable the Cortex-M4 ART */
#endif /* DUAL_CORE &&  CORE_CM4 */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000bc6:	2003      	movs	r0, #3
 8000bc8:	f000 f98c 	bl	8000ee4 <HAL_NVIC_SetPriorityGrouping>

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 8000bcc:	f002 fc96 	bl	80034fc <HAL_RCC_GetSysClockFreq>
 8000bd0:	4602      	mov	r2, r0
 8000bd2:	4b15      	ldr	r3, [pc, #84]	; (8000c28 <HAL_Init+0x68>)
 8000bd4:	699b      	ldr	r3, [r3, #24]
 8000bd6:	0a1b      	lsrs	r3, r3, #8
 8000bd8:	f003 030f 	and.w	r3, r3, #15
 8000bdc:	4913      	ldr	r1, [pc, #76]	; (8000c2c <HAL_Init+0x6c>)
 8000bde:	5ccb      	ldrb	r3, [r1, r3]
 8000be0:	f003 031f 	and.w	r3, r3, #31
 8000be4:	fa22 f303 	lsr.w	r3, r2, r3
 8000be8:	607b      	str	r3, [r7, #4]
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

  /* Update the SystemD2Clock global variable */
#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8000bea:	4b0f      	ldr	r3, [pc, #60]	; (8000c28 <HAL_Init+0x68>)
 8000bec:	699b      	ldr	r3, [r3, #24]
 8000bee:	f003 030f 	and.w	r3, r3, #15
 8000bf2:	4a0e      	ldr	r2, [pc, #56]	; (8000c2c <HAL_Init+0x6c>)
 8000bf4:	5cd3      	ldrb	r3, [r2, r3]
 8000bf6:	f003 031f 	and.w	r3, r3, #31
 8000bfa:	687a      	ldr	r2, [r7, #4]
 8000bfc:	fa22 f303 	lsr.w	r3, r2, r3
 8000c00:	4a0b      	ldr	r2, [pc, #44]	; (8000c30 <HAL_Init+0x70>)
 8000c02:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8000c04:	4a0b      	ldr	r2, [pc, #44]	; (8000c34 <HAL_Init+0x74>)
 8000c06:	687b      	ldr	r3, [r7, #4]
 8000c08:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if(HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8000c0a:	200f      	movs	r0, #15
 8000c0c:	f000 f814 	bl	8000c38 <HAL_InitTick>
 8000c10:	4603      	mov	r3, r0
 8000c12:	2b00      	cmp	r3, #0
 8000c14:	d001      	beq.n	8000c1a <HAL_Init+0x5a>
  {
    return HAL_ERROR;
 8000c16:	2301      	movs	r3, #1
 8000c18:	e002      	b.n	8000c20 <HAL_Init+0x60>
  }

  /* Init the low level hardware */
  HAL_MspInit();
 8000c1a:	f7ff fe9b 	bl	8000954 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000c1e:	2300      	movs	r3, #0
}
 8000c20:	4618      	mov	r0, r3
 8000c22:	3708      	adds	r7, #8
 8000c24:	46bd      	mov	sp, r7
 8000c26:	bd80      	pop	{r7, pc}
 8000c28:	58024400 	.word	0x58024400
 8000c2c:	08009f24 	.word	0x08009f24
 8000c30:	24000004 	.word	0x24000004
 8000c34:	24000000 	.word	0x24000000

08000c38 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000c38:	b580      	push	{r7, lr}
 8000c3a:	b082      	sub	sp, #8
 8000c3c:	af00      	add	r7, sp, #0
 8000c3e:	6078      	str	r0, [r7, #4]
  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that don't take the value zero)*/
  if((uint32_t)uwTickFreq == 0UL)
 8000c40:	4b15      	ldr	r3, [pc, #84]	; (8000c98 <HAL_InitTick+0x60>)
 8000c42:	781b      	ldrb	r3, [r3, #0]
 8000c44:	2b00      	cmp	r3, #0
 8000c46:	d101      	bne.n	8000c4c <HAL_InitTick+0x14>
  {
    return HAL_ERROR;
 8000c48:	2301      	movs	r3, #1
 8000c4a:	e021      	b.n	8000c90 <HAL_InitTick+0x58>
  }

    /* Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000UL / (uint32_t)uwTickFreq)) > 0U)
 8000c4c:	4b13      	ldr	r3, [pc, #76]	; (8000c9c <HAL_InitTick+0x64>)
 8000c4e:	681a      	ldr	r2, [r3, #0]
 8000c50:	4b11      	ldr	r3, [pc, #68]	; (8000c98 <HAL_InitTick+0x60>)
 8000c52:	781b      	ldrb	r3, [r3, #0]
 8000c54:	4619      	mov	r1, r3
 8000c56:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000c5a:	fbb3 f3f1 	udiv	r3, r3, r1
 8000c5e:	fbb2 f3f3 	udiv	r3, r2, r3
 8000c62:	4618      	mov	r0, r3
 8000c64:	f000 f971 	bl	8000f4a <HAL_SYSTICK_Config>
 8000c68:	4603      	mov	r3, r0
 8000c6a:	2b00      	cmp	r3, #0
 8000c6c:	d001      	beq.n	8000c72 <HAL_InitTick+0x3a>
    {
      return HAL_ERROR;
 8000c6e:	2301      	movs	r3, #1
 8000c70:	e00e      	b.n	8000c90 <HAL_InitTick+0x58>
    }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000c72:	687b      	ldr	r3, [r7, #4]
 8000c74:	2b0f      	cmp	r3, #15
 8000c76:	d80a      	bhi.n	8000c8e <HAL_InitTick+0x56>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000c78:	2200      	movs	r2, #0
 8000c7a:	6879      	ldr	r1, [r7, #4]
 8000c7c:	f04f 30ff 	mov.w	r0, #4294967295
 8000c80:	f000 f93b 	bl	8000efa <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000c84:	4a06      	ldr	r2, [pc, #24]	; (8000ca0 <HAL_InitTick+0x68>)
 8000c86:	687b      	ldr	r3, [r7, #4]
 8000c88:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8000c8a:	2300      	movs	r3, #0
 8000c8c:	e000      	b.n	8000c90 <HAL_InitTick+0x58>
    return HAL_ERROR;
 8000c8e:	2301      	movs	r3, #1
}
 8000c90:	4618      	mov	r0, r3
 8000c92:	3708      	adds	r7, #8
 8000c94:	46bd      	mov	sp, r7
 8000c96:	bd80      	pop	{r7, pc}
 8000c98:	2400000c 	.word	0x2400000c
 8000c9c:	24000000 	.word	0x24000000
 8000ca0:	24000008 	.word	0x24000008

08000ca4 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000ca4:	b480      	push	{r7}
 8000ca6:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8000ca8:	4b06      	ldr	r3, [pc, #24]	; (8000cc4 <HAL_IncTick+0x20>)
 8000caa:	781b      	ldrb	r3, [r3, #0]
 8000cac:	461a      	mov	r2, r3
 8000cae:	4b06      	ldr	r3, [pc, #24]	; (8000cc8 <HAL_IncTick+0x24>)
 8000cb0:	681b      	ldr	r3, [r3, #0]
 8000cb2:	4413      	add	r3, r2
 8000cb4:	4a04      	ldr	r2, [pc, #16]	; (8000cc8 <HAL_IncTick+0x24>)
 8000cb6:	6013      	str	r3, [r2, #0]
}
 8000cb8:	bf00      	nop
 8000cba:	46bd      	mov	sp, r7
 8000cbc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cc0:	4770      	bx	lr
 8000cc2:	bf00      	nop
 8000cc4:	2400000c 	.word	0x2400000c
 8000cc8:	2400020c 	.word	0x2400020c

08000ccc <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000ccc:	b480      	push	{r7}
 8000cce:	af00      	add	r7, sp, #0
  return uwTick;
 8000cd0:	4b03      	ldr	r3, [pc, #12]	; (8000ce0 <HAL_GetTick+0x14>)
 8000cd2:	681b      	ldr	r3, [r3, #0]
}
 8000cd4:	4618      	mov	r0, r3
 8000cd6:	46bd      	mov	sp, r7
 8000cd8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cdc:	4770      	bx	lr
 8000cde:	bf00      	nop
 8000ce0:	2400020c 	.word	0x2400020c

08000ce4 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000ce4:	b580      	push	{r7, lr}
 8000ce6:	b084      	sub	sp, #16
 8000ce8:	af00      	add	r7, sp, #0
 8000cea:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8000cec:	f7ff ffee 	bl	8000ccc <HAL_GetTick>
 8000cf0:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8000cf2:	687b      	ldr	r3, [r7, #4]
 8000cf4:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000cf6:	68fb      	ldr	r3, [r7, #12]
 8000cf8:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000cfc:	d005      	beq.n	8000d0a <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8000cfe:	4b0a      	ldr	r3, [pc, #40]	; (8000d28 <HAL_Delay+0x44>)
 8000d00:	781b      	ldrb	r3, [r3, #0]
 8000d02:	461a      	mov	r2, r3
 8000d04:	68fb      	ldr	r3, [r7, #12]
 8000d06:	4413      	add	r3, r2
 8000d08:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8000d0a:	bf00      	nop
 8000d0c:	f7ff ffde 	bl	8000ccc <HAL_GetTick>
 8000d10:	4602      	mov	r2, r0
 8000d12:	68bb      	ldr	r3, [r7, #8]
 8000d14:	1ad3      	subs	r3, r2, r3
 8000d16:	68fa      	ldr	r2, [r7, #12]
 8000d18:	429a      	cmp	r2, r3
 8000d1a:	d8f7      	bhi.n	8000d0c <HAL_Delay+0x28>
  {
  }
}
 8000d1c:	bf00      	nop
 8000d1e:	bf00      	nop
 8000d20:	3710      	adds	r7, #16
 8000d22:	46bd      	mov	sp, r7
 8000d24:	bd80      	pop	{r7, pc}
 8000d26:	bf00      	nop
 8000d28:	2400000c 	.word	0x2400000c

08000d2c <HAL_GetREVID>:
/**
  * @brief  Returns the device revision identifier.
  * @retval Device revision identifier
  */
uint32_t HAL_GetREVID(void)
{
 8000d2c:	b480      	push	{r7}
 8000d2e:	af00      	add	r7, sp, #0
   return((DBGMCU->IDCODE) >> 16);
 8000d30:	4b03      	ldr	r3, [pc, #12]	; (8000d40 <HAL_GetREVID+0x14>)
 8000d32:	681b      	ldr	r3, [r3, #0]
 8000d34:	0c1b      	lsrs	r3, r3, #16
}
 8000d36:	4618      	mov	r0, r3
 8000d38:	46bd      	mov	sp, r7
 8000d3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d3e:	4770      	bx	lr
 8000d40:	5c001000 	.word	0x5c001000

08000d44 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000d44:	b480      	push	{r7}
 8000d46:	b085      	sub	sp, #20
 8000d48:	af00      	add	r7, sp, #0
 8000d4a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000d4c:	687b      	ldr	r3, [r7, #4]
 8000d4e:	f003 0307 	and.w	r3, r3, #7
 8000d52:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000d54:	4b0b      	ldr	r3, [pc, #44]	; (8000d84 <__NVIC_SetPriorityGrouping+0x40>)
 8000d56:	68db      	ldr	r3, [r3, #12]
 8000d58:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000d5a:	68ba      	ldr	r2, [r7, #8]
 8000d5c:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8000d60:	4013      	ands	r3, r2
 8000d62:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000d64:	68fb      	ldr	r3, [r7, #12]
 8000d66:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000d68:	68bb      	ldr	r3, [r7, #8]
 8000d6a:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 8000d6c:	4b06      	ldr	r3, [pc, #24]	; (8000d88 <__NVIC_SetPriorityGrouping+0x44>)
 8000d6e:	4313      	orrs	r3, r2
 8000d70:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000d72:	4a04      	ldr	r2, [pc, #16]	; (8000d84 <__NVIC_SetPriorityGrouping+0x40>)
 8000d74:	68bb      	ldr	r3, [r7, #8]
 8000d76:	60d3      	str	r3, [r2, #12]
}
 8000d78:	bf00      	nop
 8000d7a:	3714      	adds	r7, #20
 8000d7c:	46bd      	mov	sp, r7
 8000d7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d82:	4770      	bx	lr
 8000d84:	e000ed00 	.word	0xe000ed00
 8000d88:	05fa0000 	.word	0x05fa0000

08000d8c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000d8c:	b480      	push	{r7}
 8000d8e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000d90:	4b04      	ldr	r3, [pc, #16]	; (8000da4 <__NVIC_GetPriorityGrouping+0x18>)
 8000d92:	68db      	ldr	r3, [r3, #12]
 8000d94:	0a1b      	lsrs	r3, r3, #8
 8000d96:	f003 0307 	and.w	r3, r3, #7
}
 8000d9a:	4618      	mov	r0, r3
 8000d9c:	46bd      	mov	sp, r7
 8000d9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000da2:	4770      	bx	lr
 8000da4:	e000ed00 	.word	0xe000ed00

08000da8 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000da8:	b480      	push	{r7}
 8000daa:	b083      	sub	sp, #12
 8000dac:	af00      	add	r7, sp, #0
 8000dae:	4603      	mov	r3, r0
 8000db0:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 8000db2:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8000db6:	2b00      	cmp	r3, #0
 8000db8:	db0b      	blt.n	8000dd2 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000dba:	88fb      	ldrh	r3, [r7, #6]
 8000dbc:	f003 021f 	and.w	r2, r3, #31
 8000dc0:	4907      	ldr	r1, [pc, #28]	; (8000de0 <__NVIC_EnableIRQ+0x38>)
 8000dc2:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8000dc6:	095b      	lsrs	r3, r3, #5
 8000dc8:	2001      	movs	r0, #1
 8000dca:	fa00 f202 	lsl.w	r2, r0, r2
 8000dce:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8000dd2:	bf00      	nop
 8000dd4:	370c      	adds	r7, #12
 8000dd6:	46bd      	mov	sp, r7
 8000dd8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ddc:	4770      	bx	lr
 8000dde:	bf00      	nop
 8000de0:	e000e100 	.word	0xe000e100

08000de4 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000de4:	b480      	push	{r7}
 8000de6:	b083      	sub	sp, #12
 8000de8:	af00      	add	r7, sp, #0
 8000dea:	4603      	mov	r3, r0
 8000dec:	6039      	str	r1, [r7, #0]
 8000dee:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 8000df0:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8000df4:	2b00      	cmp	r3, #0
 8000df6:	db0a      	blt.n	8000e0e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000df8:	683b      	ldr	r3, [r7, #0]
 8000dfa:	b2da      	uxtb	r2, r3
 8000dfc:	490c      	ldr	r1, [pc, #48]	; (8000e30 <__NVIC_SetPriority+0x4c>)
 8000dfe:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8000e02:	0112      	lsls	r2, r2, #4
 8000e04:	b2d2      	uxtb	r2, r2
 8000e06:	440b      	add	r3, r1
 8000e08:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000e0c:	e00a      	b.n	8000e24 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000e0e:	683b      	ldr	r3, [r7, #0]
 8000e10:	b2da      	uxtb	r2, r3
 8000e12:	4908      	ldr	r1, [pc, #32]	; (8000e34 <__NVIC_SetPriority+0x50>)
 8000e14:	88fb      	ldrh	r3, [r7, #6]
 8000e16:	f003 030f 	and.w	r3, r3, #15
 8000e1a:	3b04      	subs	r3, #4
 8000e1c:	0112      	lsls	r2, r2, #4
 8000e1e:	b2d2      	uxtb	r2, r2
 8000e20:	440b      	add	r3, r1
 8000e22:	761a      	strb	r2, [r3, #24]
}
 8000e24:	bf00      	nop
 8000e26:	370c      	adds	r7, #12
 8000e28:	46bd      	mov	sp, r7
 8000e2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e2e:	4770      	bx	lr
 8000e30:	e000e100 	.word	0xe000e100
 8000e34:	e000ed00 	.word	0xe000ed00

08000e38 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000e38:	b480      	push	{r7}
 8000e3a:	b089      	sub	sp, #36	; 0x24
 8000e3c:	af00      	add	r7, sp, #0
 8000e3e:	60f8      	str	r0, [r7, #12]
 8000e40:	60b9      	str	r1, [r7, #8]
 8000e42:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000e44:	68fb      	ldr	r3, [r7, #12]
 8000e46:	f003 0307 	and.w	r3, r3, #7
 8000e4a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000e4c:	69fb      	ldr	r3, [r7, #28]
 8000e4e:	f1c3 0307 	rsb	r3, r3, #7
 8000e52:	2b04      	cmp	r3, #4
 8000e54:	bf28      	it	cs
 8000e56:	2304      	movcs	r3, #4
 8000e58:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000e5a:	69fb      	ldr	r3, [r7, #28]
 8000e5c:	3304      	adds	r3, #4
 8000e5e:	2b06      	cmp	r3, #6
 8000e60:	d902      	bls.n	8000e68 <NVIC_EncodePriority+0x30>
 8000e62:	69fb      	ldr	r3, [r7, #28]
 8000e64:	3b03      	subs	r3, #3
 8000e66:	e000      	b.n	8000e6a <NVIC_EncodePriority+0x32>
 8000e68:	2300      	movs	r3, #0
 8000e6a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000e6c:	f04f 32ff 	mov.w	r2, #4294967295
 8000e70:	69bb      	ldr	r3, [r7, #24]
 8000e72:	fa02 f303 	lsl.w	r3, r2, r3
 8000e76:	43da      	mvns	r2, r3
 8000e78:	68bb      	ldr	r3, [r7, #8]
 8000e7a:	401a      	ands	r2, r3
 8000e7c:	697b      	ldr	r3, [r7, #20]
 8000e7e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000e80:	f04f 31ff 	mov.w	r1, #4294967295
 8000e84:	697b      	ldr	r3, [r7, #20]
 8000e86:	fa01 f303 	lsl.w	r3, r1, r3
 8000e8a:	43d9      	mvns	r1, r3
 8000e8c:	687b      	ldr	r3, [r7, #4]
 8000e8e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000e90:	4313      	orrs	r3, r2
         );
}
 8000e92:	4618      	mov	r0, r3
 8000e94:	3724      	adds	r7, #36	; 0x24
 8000e96:	46bd      	mov	sp, r7
 8000e98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e9c:	4770      	bx	lr
	...

08000ea0 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000ea0:	b580      	push	{r7, lr}
 8000ea2:	b082      	sub	sp, #8
 8000ea4:	af00      	add	r7, sp, #0
 8000ea6:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000ea8:	687b      	ldr	r3, [r7, #4]
 8000eaa:	3b01      	subs	r3, #1
 8000eac:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8000eb0:	d301      	bcc.n	8000eb6 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8000eb2:	2301      	movs	r3, #1
 8000eb4:	e00f      	b.n	8000ed6 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000eb6:	4a0a      	ldr	r2, [pc, #40]	; (8000ee0 <SysTick_Config+0x40>)
 8000eb8:	687b      	ldr	r3, [r7, #4]
 8000eba:	3b01      	subs	r3, #1
 8000ebc:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000ebe:	210f      	movs	r1, #15
 8000ec0:	f04f 30ff 	mov.w	r0, #4294967295
 8000ec4:	f7ff ff8e 	bl	8000de4 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000ec8:	4b05      	ldr	r3, [pc, #20]	; (8000ee0 <SysTick_Config+0x40>)
 8000eca:	2200      	movs	r2, #0
 8000ecc:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000ece:	4b04      	ldr	r3, [pc, #16]	; (8000ee0 <SysTick_Config+0x40>)
 8000ed0:	2207      	movs	r2, #7
 8000ed2:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000ed4:	2300      	movs	r3, #0
}
 8000ed6:	4618      	mov	r0, r3
 8000ed8:	3708      	adds	r7, #8
 8000eda:	46bd      	mov	sp, r7
 8000edc:	bd80      	pop	{r7, pc}
 8000ede:	bf00      	nop
 8000ee0:	e000e010 	.word	0xe000e010

08000ee4 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000ee4:	b580      	push	{r7, lr}
 8000ee6:	b082      	sub	sp, #8
 8000ee8:	af00      	add	r7, sp, #0
 8000eea:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000eec:	6878      	ldr	r0, [r7, #4]
 8000eee:	f7ff ff29 	bl	8000d44 <__NVIC_SetPriorityGrouping>
}
 8000ef2:	bf00      	nop
 8000ef4:	3708      	adds	r7, #8
 8000ef6:	46bd      	mov	sp, r7
 8000ef8:	bd80      	pop	{r7, pc}

08000efa <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000efa:	b580      	push	{r7, lr}
 8000efc:	b086      	sub	sp, #24
 8000efe:	af00      	add	r7, sp, #0
 8000f00:	4603      	mov	r3, r0
 8000f02:	60b9      	str	r1, [r7, #8]
 8000f04:	607a      	str	r2, [r7, #4]
 8000f06:	81fb      	strh	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8000f08:	f7ff ff40 	bl	8000d8c <__NVIC_GetPriorityGrouping>
 8000f0c:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000f0e:	687a      	ldr	r2, [r7, #4]
 8000f10:	68b9      	ldr	r1, [r7, #8]
 8000f12:	6978      	ldr	r0, [r7, #20]
 8000f14:	f7ff ff90 	bl	8000e38 <NVIC_EncodePriority>
 8000f18:	4602      	mov	r2, r0
 8000f1a:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8000f1e:	4611      	mov	r1, r2
 8000f20:	4618      	mov	r0, r3
 8000f22:	f7ff ff5f 	bl	8000de4 <__NVIC_SetPriority>
}
 8000f26:	bf00      	nop
 8000f28:	3718      	adds	r7, #24
 8000f2a:	46bd      	mov	sp, r7
 8000f2c:	bd80      	pop	{r7, pc}

08000f2e <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32h7xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000f2e:	b580      	push	{r7, lr}
 8000f30:	b082      	sub	sp, #8
 8000f32:	af00      	add	r7, sp, #0
 8000f34:	4603      	mov	r3, r0
 8000f36:	80fb      	strh	r3, [r7, #6]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8000f38:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8000f3c:	4618      	mov	r0, r3
 8000f3e:	f7ff ff33 	bl	8000da8 <__NVIC_EnableIRQ>
}
 8000f42:	bf00      	nop
 8000f44:	3708      	adds	r7, #8
 8000f46:	46bd      	mov	sp, r7
 8000f48:	bd80      	pop	{r7, pc}

08000f4a <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status   - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8000f4a:	b580      	push	{r7, lr}
 8000f4c:	b082      	sub	sp, #8
 8000f4e:	af00      	add	r7, sp, #0
 8000f50:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8000f52:	6878      	ldr	r0, [r7, #4]
 8000f54:	f7ff ffa4 	bl	8000ea0 <SysTick_Config>
 8000f58:	4603      	mov	r3, r0
}
 8000f5a:	4618      	mov	r0, r3
 8000f5c:	3708      	adds	r7, #8
 8000f5e:	46bd      	mov	sp, r7
 8000f60:	bd80      	pop	{r7, pc}
	...

08000f64 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000f64:	b480      	push	{r7}
 8000f66:	b089      	sub	sp, #36	; 0x24
 8000f68:	af00      	add	r7, sp, #0
 8000f6a:	6078      	str	r0, [r7, #4]
 8000f6c:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 8000f6e:	2300      	movs	r3, #0
 8000f70:	61fb      	str	r3, [r7, #28]
  EXTI_Core_TypeDef *EXTI_CurrentCPU;

#if defined(DUAL_CORE) && defined(CORE_CM4)
  EXTI_CurrentCPU = EXTI_D2; /* EXTI for CM4 CPU */
#else
  EXTI_CurrentCPU = EXTI_D1; /* EXTI for CM7 CPU */
 8000f72:	4b89      	ldr	r3, [pc, #548]	; (8001198 <HAL_GPIO_Init+0x234>)
 8000f74:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 8000f76:	e194      	b.n	80012a2 <HAL_GPIO_Init+0x33e>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 8000f78:	683b      	ldr	r3, [r7, #0]
 8000f7a:	681a      	ldr	r2, [r3, #0]
 8000f7c:	2101      	movs	r1, #1
 8000f7e:	69fb      	ldr	r3, [r7, #28]
 8000f80:	fa01 f303 	lsl.w	r3, r1, r3
 8000f84:	4013      	ands	r3, r2
 8000f86:	613b      	str	r3, [r7, #16]

    if (iocurrent != 0x00U)
 8000f88:	693b      	ldr	r3, [r7, #16]
 8000f8a:	2b00      	cmp	r3, #0
 8000f8c:	f000 8186 	beq.w	800129c <HAL_GPIO_Init+0x338>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8000f90:	683b      	ldr	r3, [r7, #0]
 8000f92:	685b      	ldr	r3, [r3, #4]
 8000f94:	f003 0303 	and.w	r3, r3, #3
 8000f98:	2b01      	cmp	r3, #1
 8000f9a:	d005      	beq.n	8000fa8 <HAL_GPIO_Init+0x44>
 8000f9c:	683b      	ldr	r3, [r7, #0]
 8000f9e:	685b      	ldr	r3, [r3, #4]
 8000fa0:	f003 0303 	and.w	r3, r3, #3
 8000fa4:	2b02      	cmp	r3, #2
 8000fa6:	d130      	bne.n	800100a <HAL_GPIO_Init+0xa6>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8000fa8:	687b      	ldr	r3, [r7, #4]
 8000faa:	689b      	ldr	r3, [r3, #8]
 8000fac:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 8000fae:	69fb      	ldr	r3, [r7, #28]
 8000fb0:	005b      	lsls	r3, r3, #1
 8000fb2:	2203      	movs	r2, #3
 8000fb4:	fa02 f303 	lsl.w	r3, r2, r3
 8000fb8:	43db      	mvns	r3, r3
 8000fba:	69ba      	ldr	r2, [r7, #24]
 8000fbc:	4013      	ands	r3, r2
 8000fbe:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8000fc0:	683b      	ldr	r3, [r7, #0]
 8000fc2:	68da      	ldr	r2, [r3, #12]
 8000fc4:	69fb      	ldr	r3, [r7, #28]
 8000fc6:	005b      	lsls	r3, r3, #1
 8000fc8:	fa02 f303 	lsl.w	r3, r2, r3
 8000fcc:	69ba      	ldr	r2, [r7, #24]
 8000fce:	4313      	orrs	r3, r2
 8000fd0:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8000fd2:	687b      	ldr	r3, [r7, #4]
 8000fd4:	69ba      	ldr	r2, [r7, #24]
 8000fd6:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8000fd8:	687b      	ldr	r3, [r7, #4]
 8000fda:	685b      	ldr	r3, [r3, #4]
 8000fdc:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8000fde:	2201      	movs	r2, #1
 8000fe0:	69fb      	ldr	r3, [r7, #28]
 8000fe2:	fa02 f303 	lsl.w	r3, r2, r3
 8000fe6:	43db      	mvns	r3, r3
 8000fe8:	69ba      	ldr	r2, [r7, #24]
 8000fea:	4013      	ands	r3, r2
 8000fec:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8000fee:	683b      	ldr	r3, [r7, #0]
 8000ff0:	685b      	ldr	r3, [r3, #4]
 8000ff2:	091b      	lsrs	r3, r3, #4
 8000ff4:	f003 0201 	and.w	r2, r3, #1
 8000ff8:	69fb      	ldr	r3, [r7, #28]
 8000ffa:	fa02 f303 	lsl.w	r3, r2, r3
 8000ffe:	69ba      	ldr	r2, [r7, #24]
 8001000:	4313      	orrs	r3, r2
 8001002:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8001004:	687b      	ldr	r3, [r7, #4]
 8001006:	69ba      	ldr	r2, [r7, #24]
 8001008:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 800100a:	683b      	ldr	r3, [r7, #0]
 800100c:	685b      	ldr	r3, [r3, #4]
 800100e:	f003 0303 	and.w	r3, r3, #3
 8001012:	2b03      	cmp	r3, #3
 8001014:	d017      	beq.n	8001046 <HAL_GPIO_Init+0xe2>
      {
       /* Check the Pull parameter */
       assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8001016:	687b      	ldr	r3, [r7, #4]
 8001018:	68db      	ldr	r3, [r3, #12]
 800101a:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 800101c:	69fb      	ldr	r3, [r7, #28]
 800101e:	005b      	lsls	r3, r3, #1
 8001020:	2203      	movs	r2, #3
 8001022:	fa02 f303 	lsl.w	r3, r2, r3
 8001026:	43db      	mvns	r3, r3
 8001028:	69ba      	ldr	r2, [r7, #24]
 800102a:	4013      	ands	r3, r2
 800102c:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 800102e:	683b      	ldr	r3, [r7, #0]
 8001030:	689a      	ldr	r2, [r3, #8]
 8001032:	69fb      	ldr	r3, [r7, #28]
 8001034:	005b      	lsls	r3, r3, #1
 8001036:	fa02 f303 	lsl.w	r3, r2, r3
 800103a:	69ba      	ldr	r2, [r7, #24]
 800103c:	4313      	orrs	r3, r2
 800103e:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 8001040:	687b      	ldr	r3, [r7, #4]
 8001042:	69ba      	ldr	r2, [r7, #24]
 8001044:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001046:	683b      	ldr	r3, [r7, #0]
 8001048:	685b      	ldr	r3, [r3, #4]
 800104a:	f003 0303 	and.w	r3, r3, #3
 800104e:	2b02      	cmp	r3, #2
 8001050:	d123      	bne.n	800109a <HAL_GPIO_Init+0x136>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8001052:	69fb      	ldr	r3, [r7, #28]
 8001054:	08da      	lsrs	r2, r3, #3
 8001056:	687b      	ldr	r3, [r7, #4]
 8001058:	3208      	adds	r2, #8
 800105a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800105e:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 8001060:	69fb      	ldr	r3, [r7, #28]
 8001062:	f003 0307 	and.w	r3, r3, #7
 8001066:	009b      	lsls	r3, r3, #2
 8001068:	220f      	movs	r2, #15
 800106a:	fa02 f303 	lsl.w	r3, r2, r3
 800106e:	43db      	mvns	r3, r3
 8001070:	69ba      	ldr	r2, [r7, #24]
 8001072:	4013      	ands	r3, r2
 8001074:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 8001076:	683b      	ldr	r3, [r7, #0]
 8001078:	691a      	ldr	r2, [r3, #16]
 800107a:	69fb      	ldr	r3, [r7, #28]
 800107c:	f003 0307 	and.w	r3, r3, #7
 8001080:	009b      	lsls	r3, r3, #2
 8001082:	fa02 f303 	lsl.w	r3, r2, r3
 8001086:	69ba      	ldr	r2, [r7, #24]
 8001088:	4313      	orrs	r3, r2
 800108a:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 800108c:	69fb      	ldr	r3, [r7, #28]
 800108e:	08da      	lsrs	r2, r3, #3
 8001090:	687b      	ldr	r3, [r7, #4]
 8001092:	3208      	adds	r2, #8
 8001094:	69b9      	ldr	r1, [r7, #24]
 8001096:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800109a:	687b      	ldr	r3, [r7, #4]
 800109c:	681b      	ldr	r3, [r3, #0]
 800109e:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 80010a0:	69fb      	ldr	r3, [r7, #28]
 80010a2:	005b      	lsls	r3, r3, #1
 80010a4:	2203      	movs	r2, #3
 80010a6:	fa02 f303 	lsl.w	r3, r2, r3
 80010aa:	43db      	mvns	r3, r3
 80010ac:	69ba      	ldr	r2, [r7, #24]
 80010ae:	4013      	ands	r3, r2
 80010b0:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80010b2:	683b      	ldr	r3, [r7, #0]
 80010b4:	685b      	ldr	r3, [r3, #4]
 80010b6:	f003 0203 	and.w	r2, r3, #3
 80010ba:	69fb      	ldr	r3, [r7, #28]
 80010bc:	005b      	lsls	r3, r3, #1
 80010be:	fa02 f303 	lsl.w	r3, r2, r3
 80010c2:	69ba      	ldr	r2, [r7, #24]
 80010c4:	4313      	orrs	r3, r2
 80010c6:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 80010c8:	687b      	ldr	r3, [r7, #4]
 80010ca:	69ba      	ldr	r2, [r7, #24]
 80010cc:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 80010ce:	683b      	ldr	r3, [r7, #0]
 80010d0:	685b      	ldr	r3, [r3, #4]
 80010d2:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 80010d6:	2b00      	cmp	r3, #0
 80010d8:	f000 80e0 	beq.w	800129c <HAL_GPIO_Init+0x338>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80010dc:	4b2f      	ldr	r3, [pc, #188]	; (800119c <HAL_GPIO_Init+0x238>)
 80010de:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 80010e2:	4a2e      	ldr	r2, [pc, #184]	; (800119c <HAL_GPIO_Init+0x238>)
 80010e4:	f043 0302 	orr.w	r3, r3, #2
 80010e8:	f8c2 30f4 	str.w	r3, [r2, #244]	; 0xf4
 80010ec:	4b2b      	ldr	r3, [pc, #172]	; (800119c <HAL_GPIO_Init+0x238>)
 80010ee:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 80010f2:	f003 0302 	and.w	r3, r3, #2
 80010f6:	60fb      	str	r3, [r7, #12]
 80010f8:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 80010fa:	4a29      	ldr	r2, [pc, #164]	; (80011a0 <HAL_GPIO_Init+0x23c>)
 80010fc:	69fb      	ldr	r3, [r7, #28]
 80010fe:	089b      	lsrs	r3, r3, #2
 8001100:	3302      	adds	r3, #2
 8001102:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001106:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 8001108:	69fb      	ldr	r3, [r7, #28]
 800110a:	f003 0303 	and.w	r3, r3, #3
 800110e:	009b      	lsls	r3, r3, #2
 8001110:	220f      	movs	r2, #15
 8001112:	fa02 f303 	lsl.w	r3, r2, r3
 8001116:	43db      	mvns	r3, r3
 8001118:	69ba      	ldr	r2, [r7, #24]
 800111a:	4013      	ands	r3, r2
 800111c:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 800111e:	687b      	ldr	r3, [r7, #4]
 8001120:	4a20      	ldr	r2, [pc, #128]	; (80011a4 <HAL_GPIO_Init+0x240>)
 8001122:	4293      	cmp	r3, r2
 8001124:	d052      	beq.n	80011cc <HAL_GPIO_Init+0x268>
 8001126:	687b      	ldr	r3, [r7, #4]
 8001128:	4a1f      	ldr	r2, [pc, #124]	; (80011a8 <HAL_GPIO_Init+0x244>)
 800112a:	4293      	cmp	r3, r2
 800112c:	d031      	beq.n	8001192 <HAL_GPIO_Init+0x22e>
 800112e:	687b      	ldr	r3, [r7, #4]
 8001130:	4a1e      	ldr	r2, [pc, #120]	; (80011ac <HAL_GPIO_Init+0x248>)
 8001132:	4293      	cmp	r3, r2
 8001134:	d02b      	beq.n	800118e <HAL_GPIO_Init+0x22a>
 8001136:	687b      	ldr	r3, [r7, #4]
 8001138:	4a1d      	ldr	r2, [pc, #116]	; (80011b0 <HAL_GPIO_Init+0x24c>)
 800113a:	4293      	cmp	r3, r2
 800113c:	d025      	beq.n	800118a <HAL_GPIO_Init+0x226>
 800113e:	687b      	ldr	r3, [r7, #4]
 8001140:	4a1c      	ldr	r2, [pc, #112]	; (80011b4 <HAL_GPIO_Init+0x250>)
 8001142:	4293      	cmp	r3, r2
 8001144:	d01f      	beq.n	8001186 <HAL_GPIO_Init+0x222>
 8001146:	687b      	ldr	r3, [r7, #4]
 8001148:	4a1b      	ldr	r2, [pc, #108]	; (80011b8 <HAL_GPIO_Init+0x254>)
 800114a:	4293      	cmp	r3, r2
 800114c:	d019      	beq.n	8001182 <HAL_GPIO_Init+0x21e>
 800114e:	687b      	ldr	r3, [r7, #4]
 8001150:	4a1a      	ldr	r2, [pc, #104]	; (80011bc <HAL_GPIO_Init+0x258>)
 8001152:	4293      	cmp	r3, r2
 8001154:	d013      	beq.n	800117e <HAL_GPIO_Init+0x21a>
 8001156:	687b      	ldr	r3, [r7, #4]
 8001158:	4a19      	ldr	r2, [pc, #100]	; (80011c0 <HAL_GPIO_Init+0x25c>)
 800115a:	4293      	cmp	r3, r2
 800115c:	d00d      	beq.n	800117a <HAL_GPIO_Init+0x216>
 800115e:	687b      	ldr	r3, [r7, #4]
 8001160:	4a18      	ldr	r2, [pc, #96]	; (80011c4 <HAL_GPIO_Init+0x260>)
 8001162:	4293      	cmp	r3, r2
 8001164:	d007      	beq.n	8001176 <HAL_GPIO_Init+0x212>
 8001166:	687b      	ldr	r3, [r7, #4]
 8001168:	4a17      	ldr	r2, [pc, #92]	; (80011c8 <HAL_GPIO_Init+0x264>)
 800116a:	4293      	cmp	r3, r2
 800116c:	d101      	bne.n	8001172 <HAL_GPIO_Init+0x20e>
 800116e:	2309      	movs	r3, #9
 8001170:	e02d      	b.n	80011ce <HAL_GPIO_Init+0x26a>
 8001172:	230a      	movs	r3, #10
 8001174:	e02b      	b.n	80011ce <HAL_GPIO_Init+0x26a>
 8001176:	2308      	movs	r3, #8
 8001178:	e029      	b.n	80011ce <HAL_GPIO_Init+0x26a>
 800117a:	2307      	movs	r3, #7
 800117c:	e027      	b.n	80011ce <HAL_GPIO_Init+0x26a>
 800117e:	2306      	movs	r3, #6
 8001180:	e025      	b.n	80011ce <HAL_GPIO_Init+0x26a>
 8001182:	2305      	movs	r3, #5
 8001184:	e023      	b.n	80011ce <HAL_GPIO_Init+0x26a>
 8001186:	2304      	movs	r3, #4
 8001188:	e021      	b.n	80011ce <HAL_GPIO_Init+0x26a>
 800118a:	2303      	movs	r3, #3
 800118c:	e01f      	b.n	80011ce <HAL_GPIO_Init+0x26a>
 800118e:	2302      	movs	r3, #2
 8001190:	e01d      	b.n	80011ce <HAL_GPIO_Init+0x26a>
 8001192:	2301      	movs	r3, #1
 8001194:	e01b      	b.n	80011ce <HAL_GPIO_Init+0x26a>
 8001196:	bf00      	nop
 8001198:	58000080 	.word	0x58000080
 800119c:	58024400 	.word	0x58024400
 80011a0:	58000400 	.word	0x58000400
 80011a4:	58020000 	.word	0x58020000
 80011a8:	58020400 	.word	0x58020400
 80011ac:	58020800 	.word	0x58020800
 80011b0:	58020c00 	.word	0x58020c00
 80011b4:	58021000 	.word	0x58021000
 80011b8:	58021400 	.word	0x58021400
 80011bc:	58021800 	.word	0x58021800
 80011c0:	58021c00 	.word	0x58021c00
 80011c4:	58022000 	.word	0x58022000
 80011c8:	58022400 	.word	0x58022400
 80011cc:	2300      	movs	r3, #0
 80011ce:	69fa      	ldr	r2, [r7, #28]
 80011d0:	f002 0203 	and.w	r2, r2, #3
 80011d4:	0092      	lsls	r2, r2, #2
 80011d6:	4093      	lsls	r3, r2
 80011d8:	69ba      	ldr	r2, [r7, #24]
 80011da:	4313      	orrs	r3, r2
 80011dc:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 80011de:	4938      	ldr	r1, [pc, #224]	; (80012c0 <HAL_GPIO_Init+0x35c>)
 80011e0:	69fb      	ldr	r3, [r7, #28]
 80011e2:	089b      	lsrs	r3, r3, #2
 80011e4:	3302      	adds	r3, #2
 80011e6:	69ba      	ldr	r2, [r7, #24]
 80011e8:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 80011ec:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80011f0:	681b      	ldr	r3, [r3, #0]
 80011f2:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 80011f4:	693b      	ldr	r3, [r7, #16]
 80011f6:	43db      	mvns	r3, r3
 80011f8:	69ba      	ldr	r2, [r7, #24]
 80011fa:	4013      	ands	r3, r2
 80011fc:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 80011fe:	683b      	ldr	r3, [r7, #0]
 8001200:	685b      	ldr	r3, [r3, #4]
 8001202:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001206:	2b00      	cmp	r3, #0
 8001208:	d003      	beq.n	8001212 <HAL_GPIO_Init+0x2ae>
        {
          temp |= iocurrent;
 800120a:	69ba      	ldr	r2, [r7, #24]
 800120c:	693b      	ldr	r3, [r7, #16]
 800120e:	4313      	orrs	r3, r2
 8001210:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR1 = temp;
 8001212:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8001216:	69bb      	ldr	r3, [r7, #24]
 8001218:	6013      	str	r3, [r2, #0]

        temp = EXTI->FTSR1;
 800121a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800121e:	685b      	ldr	r3, [r3, #4]
 8001220:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8001222:	693b      	ldr	r3, [r7, #16]
 8001224:	43db      	mvns	r3, r3
 8001226:	69ba      	ldr	r2, [r7, #24]
 8001228:	4013      	ands	r3, r2
 800122a:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 800122c:	683b      	ldr	r3, [r7, #0]
 800122e:	685b      	ldr	r3, [r3, #4]
 8001230:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001234:	2b00      	cmp	r3, #0
 8001236:	d003      	beq.n	8001240 <HAL_GPIO_Init+0x2dc>
        {
          temp |= iocurrent;
 8001238:	69ba      	ldr	r2, [r7, #24]
 800123a:	693b      	ldr	r3, [r7, #16]
 800123c:	4313      	orrs	r3, r2
 800123e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR1 = temp;
 8001240:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8001244:	69bb      	ldr	r3, [r7, #24]
 8001246:	6053      	str	r3, [r2, #4]

        temp = EXTI_CurrentCPU->EMR1;
 8001248:	697b      	ldr	r3, [r7, #20]
 800124a:	685b      	ldr	r3, [r3, #4]
 800124c:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 800124e:	693b      	ldr	r3, [r7, #16]
 8001250:	43db      	mvns	r3, r3
 8001252:	69ba      	ldr	r2, [r7, #24]
 8001254:	4013      	ands	r3, r2
 8001256:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8001258:	683b      	ldr	r3, [r7, #0]
 800125a:	685b      	ldr	r3, [r3, #4]
 800125c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001260:	2b00      	cmp	r3, #0
 8001262:	d003      	beq.n	800126c <HAL_GPIO_Init+0x308>
        {
          temp |= iocurrent;
 8001264:	69ba      	ldr	r2, [r7, #24]
 8001266:	693b      	ldr	r3, [r7, #16]
 8001268:	4313      	orrs	r3, r2
 800126a:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->EMR1 = temp;
 800126c:	697b      	ldr	r3, [r7, #20]
 800126e:	69ba      	ldr	r2, [r7, #24]
 8001270:	605a      	str	r2, [r3, #4]

        /* Clear EXTI line configuration */
        temp = EXTI_CurrentCPU->IMR1;
 8001272:	697b      	ldr	r3, [r7, #20]
 8001274:	681b      	ldr	r3, [r3, #0]
 8001276:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8001278:	693b      	ldr	r3, [r7, #16]
 800127a:	43db      	mvns	r3, r3
 800127c:	69ba      	ldr	r2, [r7, #24]
 800127e:	4013      	ands	r3, r2
 8001280:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8001282:	683b      	ldr	r3, [r7, #0]
 8001284:	685b      	ldr	r3, [r3, #4]
 8001286:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800128a:	2b00      	cmp	r3, #0
 800128c:	d003      	beq.n	8001296 <HAL_GPIO_Init+0x332>
        {
          temp |= iocurrent;
 800128e:	69ba      	ldr	r2, [r7, #24]
 8001290:	693b      	ldr	r3, [r7, #16]
 8001292:	4313      	orrs	r3, r2
 8001294:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->IMR1 = temp;
 8001296:	697b      	ldr	r3, [r7, #20]
 8001298:	69ba      	ldr	r2, [r7, #24]
 800129a:	601a      	str	r2, [r3, #0]
      }
    }

    position++;
 800129c:	69fb      	ldr	r3, [r7, #28]
 800129e:	3301      	adds	r3, #1
 80012a0:	61fb      	str	r3, [r7, #28]
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 80012a2:	683b      	ldr	r3, [r7, #0]
 80012a4:	681a      	ldr	r2, [r3, #0]
 80012a6:	69fb      	ldr	r3, [r7, #28]
 80012a8:	fa22 f303 	lsr.w	r3, r2, r3
 80012ac:	2b00      	cmp	r3, #0
 80012ae:	f47f ae63 	bne.w	8000f78 <HAL_GPIO_Init+0x14>
  }
}
 80012b2:	bf00      	nop
 80012b4:	bf00      	nop
 80012b6:	3724      	adds	r7, #36	; 0x24
 80012b8:	46bd      	mov	sp, r7
 80012ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012be:	4770      	bx	lr
 80012c0:	58000400 	.word	0x58000400

080012c4 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80012c4:	b480      	push	{r7}
 80012c6:	b083      	sub	sp, #12
 80012c8:	af00      	add	r7, sp, #0
 80012ca:	6078      	str	r0, [r7, #4]
 80012cc:	460b      	mov	r3, r1
 80012ce:	807b      	strh	r3, [r7, #2]
 80012d0:	4613      	mov	r3, r2
 80012d2:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 80012d4:	787b      	ldrb	r3, [r7, #1]
 80012d6:	2b00      	cmp	r3, #0
 80012d8:	d003      	beq.n	80012e2 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80012da:	887a      	ldrh	r2, [r7, #2]
 80012dc:	687b      	ldr	r3, [r7, #4]
 80012de:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
  }
}
 80012e0:	e003      	b.n	80012ea <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
 80012e2:	887b      	ldrh	r3, [r7, #2]
 80012e4:	041a      	lsls	r2, r3, #16
 80012e6:	687b      	ldr	r3, [r7, #4]
 80012e8:	619a      	str	r2, [r3, #24]
}
 80012ea:	bf00      	nop
 80012ec:	370c      	adds	r7, #12
 80012ee:	46bd      	mov	sp, r7
 80012f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012f4:	4770      	bx	lr

080012f6 <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 80012f6:	b5f0      	push	{r4, r5, r6, r7, lr}
 80012f8:	b08f      	sub	sp, #60	; 0x3c
 80012fa:	af0a      	add	r7, sp, #40	; 0x28
 80012fc:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx;
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 80012fe:	687b      	ldr	r3, [r7, #4]
 8001300:	2b00      	cmp	r3, #0
 8001302:	d101      	bne.n	8001308 <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 8001304:	2301      	movs	r3, #1
 8001306:	e116      	b.n	8001536 <HAL_PCD_Init+0x240>
  }

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

  USBx = hpcd->Instance;
 8001308:	687b      	ldr	r3, [r7, #4]
 800130a:	681b      	ldr	r3, [r3, #0]
 800130c:	60bb      	str	r3, [r7, #8]

  if (hpcd->State == HAL_PCD_STATE_RESET)
 800130e:	687b      	ldr	r3, [r7, #4]
 8001310:	f893 34bd 	ldrb.w	r3, [r3, #1213]	; 0x4bd
 8001314:	b2db      	uxtb	r3, r3
 8001316:	2b00      	cmp	r3, #0
 8001318:	d106      	bne.n	8001328 <HAL_PCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 800131a:	687b      	ldr	r3, [r7, #4]
 800131c:	2200      	movs	r2, #0
 800131e:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 8001322:	6878      	ldr	r0, [r7, #4]
 8001324:	f007 fd88 	bl	8008e38 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 8001328:	687b      	ldr	r3, [r7, #4]
 800132a:	2203      	movs	r2, #3
 800132c:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd

  /* Disable DMA mode for FS instance */
  if ((USBx->CID & (0x1U << 8)) == 0U)
 8001330:	68bb      	ldr	r3, [r7, #8]
 8001332:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001334:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001338:	2b00      	cmp	r3, #0
 800133a:	d102      	bne.n	8001342 <HAL_PCD_Init+0x4c>
  {
    hpcd->Init.dma_enable = 0U;
 800133c:	687b      	ldr	r3, [r7, #4]
 800133e:	2200      	movs	r2, #0
 8001340:	611a      	str	r2, [r3, #16]
  }

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 8001342:	687b      	ldr	r3, [r7, #4]
 8001344:	681b      	ldr	r3, [r3, #0]
 8001346:	4618      	mov	r0, r3
 8001348:	f004 f865 	bl	8005416 <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 800134c:	687b      	ldr	r3, [r7, #4]
 800134e:	681b      	ldr	r3, [r3, #0]
 8001350:	603b      	str	r3, [r7, #0]
 8001352:	687e      	ldr	r6, [r7, #4]
 8001354:	466d      	mov	r5, sp
 8001356:	f106 0410 	add.w	r4, r6, #16
 800135a:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800135c:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800135e:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001360:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8001362:	e894 0003 	ldmia.w	r4, {r0, r1}
 8001366:	e885 0003 	stmia.w	r5, {r0, r1}
 800136a:	1d33      	adds	r3, r6, #4
 800136c:	cb0e      	ldmia	r3, {r1, r2, r3}
 800136e:	6838      	ldr	r0, [r7, #0]
 8001370:	f003 ff30 	bl	80051d4 <USB_CoreInit>
 8001374:	4603      	mov	r3, r0
 8001376:	2b00      	cmp	r3, #0
 8001378:	d005      	beq.n	8001386 <HAL_PCD_Init+0x90>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 800137a:	687b      	ldr	r3, [r7, #4]
 800137c:	2202      	movs	r2, #2
 800137e:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd
    return HAL_ERROR;
 8001382:	2301      	movs	r3, #1
 8001384:	e0d7      	b.n	8001536 <HAL_PCD_Init+0x240>
  }

  /* Force Device Mode*/
  (void)USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE);
 8001386:	687b      	ldr	r3, [r7, #4]
 8001388:	681b      	ldr	r3, [r3, #0]
 800138a:	2100      	movs	r1, #0
 800138c:	4618      	mov	r0, r3
 800138e:	f004 f853 	bl	8005438 <USB_SetCurrentMode>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8001392:	2300      	movs	r3, #0
 8001394:	73fb      	strb	r3, [r7, #15]
 8001396:	e04a      	b.n	800142e <HAL_PCD_Init+0x138>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 8001398:	7bfa      	ldrb	r2, [r7, #15]
 800139a:	6879      	ldr	r1, [r7, #4]
 800139c:	4613      	mov	r3, r2
 800139e:	00db      	lsls	r3, r3, #3
 80013a0:	4413      	add	r3, r2
 80013a2:	009b      	lsls	r3, r3, #2
 80013a4:	440b      	add	r3, r1
 80013a6:	333d      	adds	r3, #61	; 0x3d
 80013a8:	2201      	movs	r2, #1
 80013aa:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 80013ac:	7bfa      	ldrb	r2, [r7, #15]
 80013ae:	6879      	ldr	r1, [r7, #4]
 80013b0:	4613      	mov	r3, r2
 80013b2:	00db      	lsls	r3, r3, #3
 80013b4:	4413      	add	r3, r2
 80013b6:	009b      	lsls	r3, r3, #2
 80013b8:	440b      	add	r3, r1
 80013ba:	333c      	adds	r3, #60	; 0x3c
 80013bc:	7bfa      	ldrb	r2, [r7, #15]
 80013be:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 80013c0:	7bfa      	ldrb	r2, [r7, #15]
 80013c2:	7bfb      	ldrb	r3, [r7, #15]
 80013c4:	b298      	uxth	r0, r3
 80013c6:	6879      	ldr	r1, [r7, #4]
 80013c8:	4613      	mov	r3, r2
 80013ca:	00db      	lsls	r3, r3, #3
 80013cc:	4413      	add	r3, r2
 80013ce:	009b      	lsls	r3, r3, #2
 80013d0:	440b      	add	r3, r1
 80013d2:	3344      	adds	r3, #68	; 0x44
 80013d4:	4602      	mov	r2, r0
 80013d6:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 80013d8:	7bfa      	ldrb	r2, [r7, #15]
 80013da:	6879      	ldr	r1, [r7, #4]
 80013dc:	4613      	mov	r3, r2
 80013de:	00db      	lsls	r3, r3, #3
 80013e0:	4413      	add	r3, r2
 80013e2:	009b      	lsls	r3, r3, #2
 80013e4:	440b      	add	r3, r1
 80013e6:	3340      	adds	r3, #64	; 0x40
 80013e8:	2200      	movs	r2, #0
 80013ea:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 80013ec:	7bfa      	ldrb	r2, [r7, #15]
 80013ee:	6879      	ldr	r1, [r7, #4]
 80013f0:	4613      	mov	r3, r2
 80013f2:	00db      	lsls	r3, r3, #3
 80013f4:	4413      	add	r3, r2
 80013f6:	009b      	lsls	r3, r3, #2
 80013f8:	440b      	add	r3, r1
 80013fa:	3348      	adds	r3, #72	; 0x48
 80013fc:	2200      	movs	r2, #0
 80013fe:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 8001400:	7bfa      	ldrb	r2, [r7, #15]
 8001402:	6879      	ldr	r1, [r7, #4]
 8001404:	4613      	mov	r3, r2
 8001406:	00db      	lsls	r3, r3, #3
 8001408:	4413      	add	r3, r2
 800140a:	009b      	lsls	r3, r3, #2
 800140c:	440b      	add	r3, r1
 800140e:	334c      	adds	r3, #76	; 0x4c
 8001410:	2200      	movs	r2, #0
 8001412:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 8001414:	7bfa      	ldrb	r2, [r7, #15]
 8001416:	6879      	ldr	r1, [r7, #4]
 8001418:	4613      	mov	r3, r2
 800141a:	00db      	lsls	r3, r3, #3
 800141c:	4413      	add	r3, r2
 800141e:	009b      	lsls	r3, r3, #2
 8001420:	440b      	add	r3, r1
 8001422:	3354      	adds	r3, #84	; 0x54
 8001424:	2200      	movs	r2, #0
 8001426:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8001428:	7bfb      	ldrb	r3, [r7, #15]
 800142a:	3301      	adds	r3, #1
 800142c:	73fb      	strb	r3, [r7, #15]
 800142e:	7bfa      	ldrb	r2, [r7, #15]
 8001430:	687b      	ldr	r3, [r7, #4]
 8001432:	685b      	ldr	r3, [r3, #4]
 8001434:	429a      	cmp	r2, r3
 8001436:	d3af      	bcc.n	8001398 <HAL_PCD_Init+0xa2>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8001438:	2300      	movs	r3, #0
 800143a:	73fb      	strb	r3, [r7, #15]
 800143c:	e044      	b.n	80014c8 <HAL_PCD_Init+0x1d2>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 800143e:	7bfa      	ldrb	r2, [r7, #15]
 8001440:	6879      	ldr	r1, [r7, #4]
 8001442:	4613      	mov	r3, r2
 8001444:	00db      	lsls	r3, r3, #3
 8001446:	4413      	add	r3, r2
 8001448:	009b      	lsls	r3, r3, #2
 800144a:	440b      	add	r3, r1
 800144c:	f203 237d 	addw	r3, r3, #637	; 0x27d
 8001450:	2200      	movs	r2, #0
 8001452:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 8001454:	7bfa      	ldrb	r2, [r7, #15]
 8001456:	6879      	ldr	r1, [r7, #4]
 8001458:	4613      	mov	r3, r2
 800145a:	00db      	lsls	r3, r3, #3
 800145c:	4413      	add	r3, r2
 800145e:	009b      	lsls	r3, r3, #2
 8001460:	440b      	add	r3, r1
 8001462:	f503 731f 	add.w	r3, r3, #636	; 0x27c
 8001466:	7bfa      	ldrb	r2, [r7, #15]
 8001468:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 800146a:	7bfa      	ldrb	r2, [r7, #15]
 800146c:	6879      	ldr	r1, [r7, #4]
 800146e:	4613      	mov	r3, r2
 8001470:	00db      	lsls	r3, r3, #3
 8001472:	4413      	add	r3, r2
 8001474:	009b      	lsls	r3, r3, #2
 8001476:	440b      	add	r3, r1
 8001478:	f503 7320 	add.w	r3, r3, #640	; 0x280
 800147c:	2200      	movs	r2, #0
 800147e:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 8001480:	7bfa      	ldrb	r2, [r7, #15]
 8001482:	6879      	ldr	r1, [r7, #4]
 8001484:	4613      	mov	r3, r2
 8001486:	00db      	lsls	r3, r3, #3
 8001488:	4413      	add	r3, r2
 800148a:	009b      	lsls	r3, r3, #2
 800148c:	440b      	add	r3, r1
 800148e:	f503 7322 	add.w	r3, r3, #648	; 0x288
 8001492:	2200      	movs	r2, #0
 8001494:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 8001496:	7bfa      	ldrb	r2, [r7, #15]
 8001498:	6879      	ldr	r1, [r7, #4]
 800149a:	4613      	mov	r3, r2
 800149c:	00db      	lsls	r3, r3, #3
 800149e:	4413      	add	r3, r2
 80014a0:	009b      	lsls	r3, r3, #2
 80014a2:	440b      	add	r3, r1
 80014a4:	f503 7323 	add.w	r3, r3, #652	; 0x28c
 80014a8:	2200      	movs	r2, #0
 80014aa:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 80014ac:	7bfa      	ldrb	r2, [r7, #15]
 80014ae:	6879      	ldr	r1, [r7, #4]
 80014b0:	4613      	mov	r3, r2
 80014b2:	00db      	lsls	r3, r3, #3
 80014b4:	4413      	add	r3, r2
 80014b6:	009b      	lsls	r3, r3, #2
 80014b8:	440b      	add	r3, r1
 80014ba:	f503 7325 	add.w	r3, r3, #660	; 0x294
 80014be:	2200      	movs	r2, #0
 80014c0:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80014c2:	7bfb      	ldrb	r3, [r7, #15]
 80014c4:	3301      	adds	r3, #1
 80014c6:	73fb      	strb	r3, [r7, #15]
 80014c8:	7bfa      	ldrb	r2, [r7, #15]
 80014ca:	687b      	ldr	r3, [r7, #4]
 80014cc:	685b      	ldr	r3, [r3, #4]
 80014ce:	429a      	cmp	r2, r3
 80014d0:	d3b5      	bcc.n	800143e <HAL_PCD_Init+0x148>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 80014d2:	687b      	ldr	r3, [r7, #4]
 80014d4:	681b      	ldr	r3, [r3, #0]
 80014d6:	603b      	str	r3, [r7, #0]
 80014d8:	687e      	ldr	r6, [r7, #4]
 80014da:	466d      	mov	r5, sp
 80014dc:	f106 0410 	add.w	r4, r6, #16
 80014e0:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80014e2:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80014e4:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80014e6:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80014e8:	e894 0003 	ldmia.w	r4, {r0, r1}
 80014ec:	e885 0003 	stmia.w	r5, {r0, r1}
 80014f0:	1d33      	adds	r3, r6, #4
 80014f2:	cb0e      	ldmia	r3, {r1, r2, r3}
 80014f4:	6838      	ldr	r0, [r7, #0]
 80014f6:	f003 ffeb 	bl	80054d0 <USB_DevInit>
 80014fa:	4603      	mov	r3, r0
 80014fc:	2b00      	cmp	r3, #0
 80014fe:	d005      	beq.n	800150c <HAL_PCD_Init+0x216>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8001500:	687b      	ldr	r3, [r7, #4]
 8001502:	2202      	movs	r2, #2
 8001504:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd
    return HAL_ERROR;
 8001508:	2301      	movs	r3, #1
 800150a:	e014      	b.n	8001536 <HAL_PCD_Init+0x240>
  }

  hpcd->USB_Address = 0U;
 800150c:	687b      	ldr	r3, [r7, #4]
 800150e:	2200      	movs	r2, #0
 8001510:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  hpcd->State = HAL_PCD_STATE_READY;
 8001514:	687b      	ldr	r3, [r7, #4]
 8001516:	2201      	movs	r2, #1
 8001518:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd

  /* Activate LPM */
  if (hpcd->Init.lpm_enable == 1U)
 800151c:	687b      	ldr	r3, [r7, #4]
 800151e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001520:	2b01      	cmp	r3, #1
 8001522:	d102      	bne.n	800152a <HAL_PCD_Init+0x234>
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
 8001524:	6878      	ldr	r0, [r7, #4]
 8001526:	f001 f98b 	bl	8002840 <HAL_PCDEx_ActivateLPM>
  }

  (void)USB_DevDisconnect(hpcd->Instance);
 800152a:	687b      	ldr	r3, [r7, #4]
 800152c:	681b      	ldr	r3, [r3, #0]
 800152e:	4618      	mov	r0, r3
 8001530:	f005 f939 	bl	80067a6 <USB_DevDisconnect>

  return HAL_OK;
 8001534:	2300      	movs	r3, #0
}
 8001536:	4618      	mov	r0, r3
 8001538:	3714      	adds	r7, #20
 800153a:	46bd      	mov	sp, r7
 800153c:	bdf0      	pop	{r4, r5, r6, r7, pc}

0800153e <HAL_PCD_Start>:
  * @brief  Start the USB device
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Start(PCD_HandleTypeDef *hpcd)
{
 800153e:	b580      	push	{r7, lr}
 8001540:	b084      	sub	sp, #16
 8001542:	af00      	add	r7, sp, #0
 8001544:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8001546:	687b      	ldr	r3, [r7, #4]
 8001548:	681b      	ldr	r3, [r3, #0]
 800154a:	60fb      	str	r3, [r7, #12]

  __HAL_LOCK(hpcd);
 800154c:	687b      	ldr	r3, [r7, #4]
 800154e:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 8001552:	2b01      	cmp	r3, #1
 8001554:	d101      	bne.n	800155a <HAL_PCD_Start+0x1c>
 8001556:	2302      	movs	r3, #2
 8001558:	e020      	b.n	800159c <HAL_PCD_Start+0x5e>
 800155a:	687b      	ldr	r3, [r7, #4]
 800155c:	2201      	movs	r2, #1
 800155e:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  if ((hpcd->Init.battery_charging_enable == 1U) &&
 8001562:	687b      	ldr	r3, [r7, #4]
 8001564:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001566:	2b01      	cmp	r3, #1
 8001568:	d109      	bne.n	800157e <HAL_PCD_Start+0x40>
      (hpcd->Init.phy_itface != USB_OTG_ULPI_PHY))
 800156a:	687b      	ldr	r3, [r7, #4]
 800156c:	699b      	ldr	r3, [r3, #24]
  if ((hpcd->Init.battery_charging_enable == 1U) &&
 800156e:	2b01      	cmp	r3, #1
 8001570:	d005      	beq.n	800157e <HAL_PCD_Start+0x40>
  {
    /* Enable USB Transceiver */
    USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 8001572:	68fb      	ldr	r3, [r7, #12]
 8001574:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001576:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 800157a:	68fb      	ldr	r3, [r7, #12]
 800157c:	639a      	str	r2, [r3, #56]	; 0x38
  }

  __HAL_PCD_ENABLE(hpcd);
 800157e:	687b      	ldr	r3, [r7, #4]
 8001580:	681b      	ldr	r3, [r3, #0]
 8001582:	4618      	mov	r0, r3
 8001584:	f003 ff36 	bl	80053f4 <USB_EnableGlobalInt>
  (void)USB_DevConnect(hpcd->Instance);
 8001588:	687b      	ldr	r3, [r7, #4]
 800158a:	681b      	ldr	r3, [r3, #0]
 800158c:	4618      	mov	r0, r3
 800158e:	f005 f8e9 	bl	8006764 <USB_DevConnect>
  __HAL_UNLOCK(hpcd);
 8001592:	687b      	ldr	r3, [r7, #4]
 8001594:	2200      	movs	r2, #0
 8001596:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  return HAL_OK;
 800159a:	2300      	movs	r3, #0
}
 800159c:	4618      	mov	r0, r3
 800159e:	3710      	adds	r7, #16
 80015a0:	46bd      	mov	sp, r7
 80015a2:	bd80      	pop	{r7, pc}

080015a4 <HAL_PCD_IRQHandler>:
  * @brief  Handles PCD interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
void HAL_PCD_IRQHandler(PCD_HandleTypeDef *hpcd)
{
 80015a4:	b590      	push	{r4, r7, lr}
 80015a6:	b08d      	sub	sp, #52	; 0x34
 80015a8:	af00      	add	r7, sp, #0
 80015aa:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 80015ac:	687b      	ldr	r3, [r7, #4]
 80015ae:	681b      	ldr	r3, [r3, #0]
 80015b0:	623b      	str	r3, [r7, #32]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80015b2:	6a3b      	ldr	r3, [r7, #32]
 80015b4:	61fb      	str	r3, [r7, #28]
  uint32_t epnum;
  uint32_t fifoemptymsk;
  uint32_t RegVal;

  /* ensure that we are in device mode */
  if (USB_GetMode(hpcd->Instance) == USB_OTG_MODE_DEVICE)
 80015b6:	687b      	ldr	r3, [r7, #4]
 80015b8:	681b      	ldr	r3, [r3, #0]
 80015ba:	4618      	mov	r0, r3
 80015bc:	f005 f9a7 	bl	800690e <USB_GetMode>
 80015c0:	4603      	mov	r3, r0
 80015c2:	2b00      	cmp	r3, #0
 80015c4:	f040 84b7 	bne.w	8001f36 <HAL_PCD_IRQHandler+0x992>
  {
    /* avoid spurious interrupt */
    if (__HAL_PCD_IS_INVALID_INTERRUPT(hpcd))
 80015c8:	687b      	ldr	r3, [r7, #4]
 80015ca:	681b      	ldr	r3, [r3, #0]
 80015cc:	4618      	mov	r0, r3
 80015ce:	f005 f90b 	bl	80067e8 <USB_ReadInterrupts>
 80015d2:	4603      	mov	r3, r0
 80015d4:	2b00      	cmp	r3, #0
 80015d6:	f000 84ad 	beq.w	8001f34 <HAL_PCD_IRQHandler+0x990>
    {
      return;
    }

    /* store current frame number */
    hpcd->FrameNumber = (USBx_DEVICE->DSTS & USB_OTG_DSTS_FNSOF_Msk) >> USB_OTG_DSTS_FNSOF_Pos;
 80015da:	69fb      	ldr	r3, [r7, #28]
 80015dc:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80015e0:	689b      	ldr	r3, [r3, #8]
 80015e2:	0a1b      	lsrs	r3, r3, #8
 80015e4:	f3c3 020d 	ubfx	r2, r3, #0, #14
 80015e8:	687b      	ldr	r3, [r7, #4]
 80015ea:	f8c3 24fc 	str.w	r2, [r3, #1276]	; 0x4fc

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_MMIS))
 80015ee:	687b      	ldr	r3, [r7, #4]
 80015f0:	681b      	ldr	r3, [r3, #0]
 80015f2:	4618      	mov	r0, r3
 80015f4:	f005 f8f8 	bl	80067e8 <USB_ReadInterrupts>
 80015f8:	4603      	mov	r3, r0
 80015fa:	f003 0302 	and.w	r3, r3, #2
 80015fe:	2b02      	cmp	r3, #2
 8001600:	d107      	bne.n	8001612 <HAL_PCD_IRQHandler+0x6e>
    {
      /* incorrect mode, acknowledge the interrupt */
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_MMIS);
 8001602:	687b      	ldr	r3, [r7, #4]
 8001604:	681b      	ldr	r3, [r3, #0]
 8001606:	695a      	ldr	r2, [r3, #20]
 8001608:	687b      	ldr	r3, [r7, #4]
 800160a:	681b      	ldr	r3, [r3, #0]
 800160c:	f002 0202 	and.w	r2, r2, #2
 8001610:	615a      	str	r2, [r3, #20]
    }

    /* Handle RxQLevel Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_RXFLVL))
 8001612:	687b      	ldr	r3, [r7, #4]
 8001614:	681b      	ldr	r3, [r3, #0]
 8001616:	4618      	mov	r0, r3
 8001618:	f005 f8e6 	bl	80067e8 <USB_ReadInterrupts>
 800161c:	4603      	mov	r3, r0
 800161e:	f003 0310 	and.w	r3, r3, #16
 8001622:	2b10      	cmp	r3, #16
 8001624:	d161      	bne.n	80016ea <HAL_PCD_IRQHandler+0x146>
    {
      USB_MASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8001626:	687b      	ldr	r3, [r7, #4]
 8001628:	681b      	ldr	r3, [r3, #0]
 800162a:	699a      	ldr	r2, [r3, #24]
 800162c:	687b      	ldr	r3, [r7, #4]
 800162e:	681b      	ldr	r3, [r3, #0]
 8001630:	f022 0210 	bic.w	r2, r2, #16
 8001634:	619a      	str	r2, [r3, #24]

      RegVal = USBx->GRXSTSP;
 8001636:	6a3b      	ldr	r3, [r7, #32]
 8001638:	6a1b      	ldr	r3, [r3, #32]
 800163a:	61bb      	str	r3, [r7, #24]

      ep = &hpcd->OUT_ep[RegVal & USB_OTG_GRXSTSP_EPNUM];
 800163c:	69bb      	ldr	r3, [r7, #24]
 800163e:	f003 020f 	and.w	r2, r3, #15
 8001642:	4613      	mov	r3, r2
 8001644:	00db      	lsls	r3, r3, #3
 8001646:	4413      	add	r3, r2
 8001648:	009b      	lsls	r3, r3, #2
 800164a:	f503 731e 	add.w	r3, r3, #632	; 0x278
 800164e:	687a      	ldr	r2, [r7, #4]
 8001650:	4413      	add	r3, r2
 8001652:	3304      	adds	r3, #4
 8001654:	617b      	str	r3, [r7, #20]

      if (((RegVal & USB_OTG_GRXSTSP_PKTSTS) >> 17) ==  STS_DATA_UPDT)
 8001656:	69bb      	ldr	r3, [r7, #24]
 8001658:	0c5b      	lsrs	r3, r3, #17
 800165a:	f003 030f 	and.w	r3, r3, #15
 800165e:	2b02      	cmp	r3, #2
 8001660:	d124      	bne.n	80016ac <HAL_PCD_IRQHandler+0x108>
      {
        if ((RegVal & USB_OTG_GRXSTSP_BCNT) != 0U)
 8001662:	69ba      	ldr	r2, [r7, #24]
 8001664:	f647 73f0 	movw	r3, #32752	; 0x7ff0
 8001668:	4013      	ands	r3, r2
 800166a:	2b00      	cmp	r3, #0
 800166c:	d035      	beq.n	80016da <HAL_PCD_IRQHandler+0x136>
        {
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 800166e:	697b      	ldr	r3, [r7, #20]
 8001670:	6919      	ldr	r1, [r3, #16]
                               (uint16_t)((RegVal & USB_OTG_GRXSTSP_BCNT) >> 4));
 8001672:	69bb      	ldr	r3, [r7, #24]
 8001674:	091b      	lsrs	r3, r3, #4
 8001676:	b29b      	uxth	r3, r3
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 8001678:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800167c:	b29b      	uxth	r3, r3
 800167e:	461a      	mov	r2, r3
 8001680:	6a38      	ldr	r0, [r7, #32]
 8001682:	f004 ff1d 	bl	80064c0 <USB_ReadPacket>

          ep->xfer_buff += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 8001686:	697b      	ldr	r3, [r7, #20]
 8001688:	691a      	ldr	r2, [r3, #16]
 800168a:	69bb      	ldr	r3, [r7, #24]
 800168c:	091b      	lsrs	r3, r3, #4
 800168e:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8001692:	441a      	add	r2, r3
 8001694:	697b      	ldr	r3, [r7, #20]
 8001696:	611a      	str	r2, [r3, #16]
          ep->xfer_count += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 8001698:	697b      	ldr	r3, [r7, #20]
 800169a:	6a1a      	ldr	r2, [r3, #32]
 800169c:	69bb      	ldr	r3, [r7, #24]
 800169e:	091b      	lsrs	r3, r3, #4
 80016a0:	f3c3 030a 	ubfx	r3, r3, #0, #11
 80016a4:	441a      	add	r2, r3
 80016a6:	697b      	ldr	r3, [r7, #20]
 80016a8:	621a      	str	r2, [r3, #32]
 80016aa:	e016      	b.n	80016da <HAL_PCD_IRQHandler+0x136>
        }
      }
      else if (((RegVal & USB_OTG_GRXSTSP_PKTSTS) >> 17) == STS_SETUP_UPDT)
 80016ac:	69bb      	ldr	r3, [r7, #24]
 80016ae:	0c5b      	lsrs	r3, r3, #17
 80016b0:	f003 030f 	and.w	r3, r3, #15
 80016b4:	2b06      	cmp	r3, #6
 80016b6:	d110      	bne.n	80016da <HAL_PCD_IRQHandler+0x136>
      {
        (void)USB_ReadPacket(USBx, (uint8_t *)hpcd->Setup, 8U);
 80016b8:	687b      	ldr	r3, [r7, #4]
 80016ba:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 80016be:	2208      	movs	r2, #8
 80016c0:	4619      	mov	r1, r3
 80016c2:	6a38      	ldr	r0, [r7, #32]
 80016c4:	f004 fefc 	bl	80064c0 <USB_ReadPacket>
        ep->xfer_count += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 80016c8:	697b      	ldr	r3, [r7, #20]
 80016ca:	6a1a      	ldr	r2, [r3, #32]
 80016cc:	69bb      	ldr	r3, [r7, #24]
 80016ce:	091b      	lsrs	r3, r3, #4
 80016d0:	f3c3 030a 	ubfx	r3, r3, #0, #11
 80016d4:	441a      	add	r2, r3
 80016d6:	697b      	ldr	r3, [r7, #20]
 80016d8:	621a      	str	r2, [r3, #32]
      else
      {
        /* ... */
      }

      USB_UNMASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 80016da:	687b      	ldr	r3, [r7, #4]
 80016dc:	681b      	ldr	r3, [r3, #0]
 80016de:	699a      	ldr	r2, [r3, #24]
 80016e0:	687b      	ldr	r3, [r7, #4]
 80016e2:	681b      	ldr	r3, [r3, #0]
 80016e4:	f042 0210 	orr.w	r2, r2, #16
 80016e8:	619a      	str	r2, [r3, #24]
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OEPINT))
 80016ea:	687b      	ldr	r3, [r7, #4]
 80016ec:	681b      	ldr	r3, [r3, #0]
 80016ee:	4618      	mov	r0, r3
 80016f0:	f005 f87a 	bl	80067e8 <USB_ReadInterrupts>
 80016f4:	4603      	mov	r3, r0
 80016f6:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80016fa:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 80016fe:	f040 80a7 	bne.w	8001850 <HAL_PCD_IRQHandler+0x2ac>
    {
      epnum = 0U;
 8001702:	2300      	movs	r3, #0
 8001704:	627b      	str	r3, [r7, #36]	; 0x24

      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllOutEpInterrupt(hpcd->Instance);
 8001706:	687b      	ldr	r3, [r7, #4]
 8001708:	681b      	ldr	r3, [r3, #0]
 800170a:	4618      	mov	r0, r3
 800170c:	f005 f87f 	bl	800680e <USB_ReadDevAllOutEpInterrupt>
 8001710:	62b8      	str	r0, [r7, #40]	; 0x28

      while (ep_intr != 0U)
 8001712:	e099      	b.n	8001848 <HAL_PCD_IRQHandler+0x2a4>
      {
        if ((ep_intr & 0x1U) != 0U)
 8001714:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001716:	f003 0301 	and.w	r3, r3, #1
 800171a:	2b00      	cmp	r3, #0
 800171c:	f000 808e 	beq.w	800183c <HAL_PCD_IRQHandler+0x298>
        {
          epint = USB_ReadDevOutEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 8001720:	687b      	ldr	r3, [r7, #4]
 8001722:	681b      	ldr	r3, [r3, #0]
 8001724:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001726:	b2d2      	uxtb	r2, r2
 8001728:	4611      	mov	r1, r2
 800172a:	4618      	mov	r0, r3
 800172c:	f005 f8a3 	bl	8006876 <USB_ReadDevOutEPInterrupt>
 8001730:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DOEPINT_XFRC) == USB_OTG_DOEPINT_XFRC)
 8001732:	693b      	ldr	r3, [r7, #16]
 8001734:	f003 0301 	and.w	r3, r3, #1
 8001738:	2b00      	cmp	r3, #0
 800173a:	d00c      	beq.n	8001756 <HAL_PCD_IRQHandler+0x1b2>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_XFRC);
 800173c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800173e:	015a      	lsls	r2, r3, #5
 8001740:	69fb      	ldr	r3, [r7, #28]
 8001742:	4413      	add	r3, r2
 8001744:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8001748:	461a      	mov	r2, r3
 800174a:	2301      	movs	r3, #1
 800174c:	6093      	str	r3, [r2, #8]
            (void)PCD_EP_OutXfrComplete_int(hpcd, epnum);
 800174e:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8001750:	6878      	ldr	r0, [r7, #4]
 8001752:	f000 feef 	bl	8002534 <PCD_EP_OutXfrComplete_int>
          }

          if ((epint & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP)
 8001756:	693b      	ldr	r3, [r7, #16]
 8001758:	f003 0308 	and.w	r3, r3, #8
 800175c:	2b00      	cmp	r3, #0
 800175e:	d00c      	beq.n	800177a <HAL_PCD_IRQHandler+0x1d6>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STUP);
 8001760:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001762:	015a      	lsls	r2, r3, #5
 8001764:	69fb      	ldr	r3, [r7, #28]
 8001766:	4413      	add	r3, r2
 8001768:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800176c:	461a      	mov	r2, r3
 800176e:	2308      	movs	r3, #8
 8001770:	6093      	str	r3, [r2, #8]
            /* Class B setup phase done for previous decoded setup */
            (void)PCD_EP_OutSetupPacket_int(hpcd, epnum);
 8001772:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8001774:	6878      	ldr	r0, [r7, #4]
 8001776:	f000 ffc5 	bl	8002704 <PCD_EP_OutSetupPacket_int>
          }

          if ((epint & USB_OTG_DOEPINT_OTEPDIS) == USB_OTG_DOEPINT_OTEPDIS)
 800177a:	693b      	ldr	r3, [r7, #16]
 800177c:	f003 0310 	and.w	r3, r3, #16
 8001780:	2b00      	cmp	r3, #0
 8001782:	d008      	beq.n	8001796 <HAL_PCD_IRQHandler+0x1f2>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPDIS);
 8001784:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001786:	015a      	lsls	r2, r3, #5
 8001788:	69fb      	ldr	r3, [r7, #28]
 800178a:	4413      	add	r3, r2
 800178c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8001790:	461a      	mov	r2, r3
 8001792:	2310      	movs	r3, #16
 8001794:	6093      	str	r3, [r2, #8]
          }

          /* Clear OUT Endpoint disable interrupt */
          if ((epint & USB_OTG_DOEPINT_EPDISD) == USB_OTG_DOEPINT_EPDISD)
 8001796:	693b      	ldr	r3, [r7, #16]
 8001798:	f003 0302 	and.w	r3, r3, #2
 800179c:	2b00      	cmp	r3, #0
 800179e:	d030      	beq.n	8001802 <HAL_PCD_IRQHandler+0x25e>
          {
            if ((USBx->GINTSTS & USB_OTG_GINTSTS_BOUTNAKEFF) == USB_OTG_GINTSTS_BOUTNAKEFF)
 80017a0:	6a3b      	ldr	r3, [r7, #32]
 80017a2:	695b      	ldr	r3, [r3, #20]
 80017a4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80017a8:	2b80      	cmp	r3, #128	; 0x80
 80017aa:	d109      	bne.n	80017c0 <HAL_PCD_IRQHandler+0x21c>
            {
              USBx_DEVICE->DCTL |= USB_OTG_DCTL_CGONAK;
 80017ac:	69fb      	ldr	r3, [r7, #28]
 80017ae:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80017b2:	685b      	ldr	r3, [r3, #4]
 80017b4:	69fa      	ldr	r2, [r7, #28]
 80017b6:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80017ba:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80017be:	6053      	str	r3, [r2, #4]
            }

            ep = &hpcd->OUT_ep[epnum];
 80017c0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80017c2:	4613      	mov	r3, r2
 80017c4:	00db      	lsls	r3, r3, #3
 80017c6:	4413      	add	r3, r2
 80017c8:	009b      	lsls	r3, r3, #2
 80017ca:	f503 731e 	add.w	r3, r3, #632	; 0x278
 80017ce:	687a      	ldr	r2, [r7, #4]
 80017d0:	4413      	add	r3, r2
 80017d2:	3304      	adds	r3, #4
 80017d4:	617b      	str	r3, [r7, #20]

            if (ep->is_iso_incomplete == 1U)
 80017d6:	697b      	ldr	r3, [r7, #20]
 80017d8:	78db      	ldrb	r3, [r3, #3]
 80017da:	2b01      	cmp	r3, #1
 80017dc:	d108      	bne.n	80017f0 <HAL_PCD_IRQHandler+0x24c>
            {
              ep->is_iso_incomplete = 0U;
 80017de:	697b      	ldr	r3, [r7, #20]
 80017e0:	2200      	movs	r2, #0
 80017e2:	70da      	strb	r2, [r3, #3]

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
              hpcd->ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
#else
              HAL_PCD_ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
 80017e4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80017e6:	b2db      	uxtb	r3, r3
 80017e8:	4619      	mov	r1, r3
 80017ea:	6878      	ldr	r0, [r7, #4]
 80017ec:	f007 fca4 	bl	8009138 <HAL_PCD_ISOOUTIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
            }

            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_EPDISD);
 80017f0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80017f2:	015a      	lsls	r2, r3, #5
 80017f4:	69fb      	ldr	r3, [r7, #28]
 80017f6:	4413      	add	r3, r2
 80017f8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80017fc:	461a      	mov	r2, r3
 80017fe:	2302      	movs	r3, #2
 8001800:	6093      	str	r3, [r2, #8]
          }

          /* Clear Status Phase Received interrupt */
          if ((epint & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 8001802:	693b      	ldr	r3, [r7, #16]
 8001804:	f003 0320 	and.w	r3, r3, #32
 8001808:	2b00      	cmp	r3, #0
 800180a:	d008      	beq.n	800181e <HAL_PCD_IRQHandler+0x27a>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 800180c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800180e:	015a      	lsls	r2, r3, #5
 8001810:	69fb      	ldr	r3, [r7, #28]
 8001812:	4413      	add	r3, r2
 8001814:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8001818:	461a      	mov	r2, r3
 800181a:	2320      	movs	r3, #32
 800181c:	6093      	str	r3, [r2, #8]
          }

          /* Clear OUT NAK interrupt */
          if ((epint & USB_OTG_DOEPINT_NAK) == USB_OTG_DOEPINT_NAK)
 800181e:	693b      	ldr	r3, [r7, #16]
 8001820:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8001824:	2b00      	cmp	r3, #0
 8001826:	d009      	beq.n	800183c <HAL_PCD_IRQHandler+0x298>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_NAK);
 8001828:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800182a:	015a      	lsls	r2, r3, #5
 800182c:	69fb      	ldr	r3, [r7, #28]
 800182e:	4413      	add	r3, r2
 8001830:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8001834:	461a      	mov	r2, r3
 8001836:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800183a:	6093      	str	r3, [r2, #8]
          }
        }
        epnum++;
 800183c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800183e:	3301      	adds	r3, #1
 8001840:	627b      	str	r3, [r7, #36]	; 0x24
        ep_intr >>= 1U;
 8001842:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001844:	085b      	lsrs	r3, r3, #1
 8001846:	62bb      	str	r3, [r7, #40]	; 0x28
      while (ep_intr != 0U)
 8001848:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800184a:	2b00      	cmp	r3, #0
 800184c:	f47f af62 	bne.w	8001714 <HAL_PCD_IRQHandler+0x170>
      }
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IEPINT))
 8001850:	687b      	ldr	r3, [r7, #4]
 8001852:	681b      	ldr	r3, [r3, #0]
 8001854:	4618      	mov	r0, r3
 8001856:	f004 ffc7 	bl	80067e8 <USB_ReadInterrupts>
 800185a:	4603      	mov	r3, r0
 800185c:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8001860:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8001864:	f040 80db 	bne.w	8001a1e <HAL_PCD_IRQHandler+0x47a>
    {
      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllInEpInterrupt(hpcd->Instance);
 8001868:	687b      	ldr	r3, [r7, #4]
 800186a:	681b      	ldr	r3, [r3, #0]
 800186c:	4618      	mov	r0, r3
 800186e:	f004 ffe8 	bl	8006842 <USB_ReadDevAllInEpInterrupt>
 8001872:	62b8      	str	r0, [r7, #40]	; 0x28

      epnum = 0U;
 8001874:	2300      	movs	r3, #0
 8001876:	627b      	str	r3, [r7, #36]	; 0x24

      while (ep_intr != 0U)
 8001878:	e0cd      	b.n	8001a16 <HAL_PCD_IRQHandler+0x472>
      {
        if ((ep_intr & 0x1U) != 0U) /* In ITR */
 800187a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800187c:	f003 0301 	and.w	r3, r3, #1
 8001880:	2b00      	cmp	r3, #0
 8001882:	f000 80c2 	beq.w	8001a0a <HAL_PCD_IRQHandler+0x466>
        {
          epint = USB_ReadDevInEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 8001886:	687b      	ldr	r3, [r7, #4]
 8001888:	681b      	ldr	r3, [r3, #0]
 800188a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800188c:	b2d2      	uxtb	r2, r2
 800188e:	4611      	mov	r1, r2
 8001890:	4618      	mov	r0, r3
 8001892:	f005 f80e 	bl	80068b2 <USB_ReadDevInEPInterrupt>
 8001896:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DIEPINT_XFRC) == USB_OTG_DIEPINT_XFRC)
 8001898:	693b      	ldr	r3, [r7, #16]
 800189a:	f003 0301 	and.w	r3, r3, #1
 800189e:	2b00      	cmp	r3, #0
 80018a0:	d057      	beq.n	8001952 <HAL_PCD_IRQHandler+0x3ae>
          {
            fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 80018a2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80018a4:	f003 030f 	and.w	r3, r3, #15
 80018a8:	2201      	movs	r2, #1
 80018aa:	fa02 f303 	lsl.w	r3, r2, r3
 80018ae:	60fb      	str	r3, [r7, #12]
            USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 80018b0:	69fb      	ldr	r3, [r7, #28]
 80018b2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80018b6:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80018b8:	68fb      	ldr	r3, [r7, #12]
 80018ba:	43db      	mvns	r3, r3
 80018bc:	69f9      	ldr	r1, [r7, #28]
 80018be:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 80018c2:	4013      	ands	r3, r2
 80018c4:	634b      	str	r3, [r1, #52]	; 0x34

            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_XFRC);
 80018c6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80018c8:	015a      	lsls	r2, r3, #5
 80018ca:	69fb      	ldr	r3, [r7, #28]
 80018cc:	4413      	add	r3, r2
 80018ce:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80018d2:	461a      	mov	r2, r3
 80018d4:	2301      	movs	r3, #1
 80018d6:	6093      	str	r3, [r2, #8]

            if (hpcd->Init.dma_enable == 1U)
 80018d8:	687b      	ldr	r3, [r7, #4]
 80018da:	691b      	ldr	r3, [r3, #16]
 80018dc:	2b01      	cmp	r3, #1
 80018de:	d132      	bne.n	8001946 <HAL_PCD_IRQHandler+0x3a2>
            {
              hpcd->IN_ep[epnum].xfer_buff += hpcd->IN_ep[epnum].maxpacket;
 80018e0:	6879      	ldr	r1, [r7, #4]
 80018e2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80018e4:	4613      	mov	r3, r2
 80018e6:	00db      	lsls	r3, r3, #3
 80018e8:	4413      	add	r3, r2
 80018ea:	009b      	lsls	r3, r3, #2
 80018ec:	440b      	add	r3, r1
 80018ee:	334c      	adds	r3, #76	; 0x4c
 80018f0:	6819      	ldr	r1, [r3, #0]
 80018f2:	6878      	ldr	r0, [r7, #4]
 80018f4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80018f6:	4613      	mov	r3, r2
 80018f8:	00db      	lsls	r3, r3, #3
 80018fa:	4413      	add	r3, r2
 80018fc:	009b      	lsls	r3, r3, #2
 80018fe:	4403      	add	r3, r0
 8001900:	3348      	adds	r3, #72	; 0x48
 8001902:	681b      	ldr	r3, [r3, #0]
 8001904:	4419      	add	r1, r3
 8001906:	6878      	ldr	r0, [r7, #4]
 8001908:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800190a:	4613      	mov	r3, r2
 800190c:	00db      	lsls	r3, r3, #3
 800190e:	4413      	add	r3, r2
 8001910:	009b      	lsls	r3, r3, #2
 8001912:	4403      	add	r3, r0
 8001914:	334c      	adds	r3, #76	; 0x4c
 8001916:	6019      	str	r1, [r3, #0]

              /* this is ZLP, so prepare EP0 for next setup */
              if ((epnum == 0U) && (hpcd->IN_ep[epnum].xfer_len == 0U))
 8001918:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800191a:	2b00      	cmp	r3, #0
 800191c:	d113      	bne.n	8001946 <HAL_PCD_IRQHandler+0x3a2>
 800191e:	6879      	ldr	r1, [r7, #4]
 8001920:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001922:	4613      	mov	r3, r2
 8001924:	00db      	lsls	r3, r3, #3
 8001926:	4413      	add	r3, r2
 8001928:	009b      	lsls	r3, r3, #2
 800192a:	440b      	add	r3, r1
 800192c:	3354      	adds	r3, #84	; 0x54
 800192e:	681b      	ldr	r3, [r3, #0]
 8001930:	2b00      	cmp	r3, #0
 8001932:	d108      	bne.n	8001946 <HAL_PCD_IRQHandler+0x3a2>
              {
                /* prepare to rx more setup packets */
                (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 8001934:	687b      	ldr	r3, [r7, #4]
 8001936:	6818      	ldr	r0, [r3, #0]
 8001938:	687b      	ldr	r3, [r7, #4]
 800193a:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 800193e:	461a      	mov	r2, r3
 8001940:	2101      	movs	r1, #1
 8001942:	f005 f817 	bl	8006974 <USB_EP0_OutStart>
            }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
            hpcd->DataInStageCallback(hpcd, (uint8_t)epnum);
#else
            HAL_PCD_DataInStageCallback(hpcd, (uint8_t)epnum);
 8001946:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001948:	b2db      	uxtb	r3, r3
 800194a:	4619      	mov	r1, r3
 800194c:	6878      	ldr	r0, [r7, #4]
 800194e:	f007 fb6e 	bl	800902e <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
          }
          if ((epint & USB_OTG_DIEPINT_TOC) == USB_OTG_DIEPINT_TOC)
 8001952:	693b      	ldr	r3, [r7, #16]
 8001954:	f003 0308 	and.w	r3, r3, #8
 8001958:	2b00      	cmp	r3, #0
 800195a:	d008      	beq.n	800196e <HAL_PCD_IRQHandler+0x3ca>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_TOC);
 800195c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800195e:	015a      	lsls	r2, r3, #5
 8001960:	69fb      	ldr	r3, [r7, #28]
 8001962:	4413      	add	r3, r2
 8001964:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8001968:	461a      	mov	r2, r3
 800196a:	2308      	movs	r3, #8
 800196c:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_ITTXFE) == USB_OTG_DIEPINT_ITTXFE)
 800196e:	693b      	ldr	r3, [r7, #16]
 8001970:	f003 0310 	and.w	r3, r3, #16
 8001974:	2b00      	cmp	r3, #0
 8001976:	d008      	beq.n	800198a <HAL_PCD_IRQHandler+0x3e6>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_ITTXFE);
 8001978:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800197a:	015a      	lsls	r2, r3, #5
 800197c:	69fb      	ldr	r3, [r7, #28]
 800197e:	4413      	add	r3, r2
 8001980:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8001984:	461a      	mov	r2, r3
 8001986:	2310      	movs	r3, #16
 8001988:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_INEPNE) == USB_OTG_DIEPINT_INEPNE)
 800198a:	693b      	ldr	r3, [r7, #16]
 800198c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001990:	2b00      	cmp	r3, #0
 8001992:	d008      	beq.n	80019a6 <HAL_PCD_IRQHandler+0x402>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_INEPNE);
 8001994:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001996:	015a      	lsls	r2, r3, #5
 8001998:	69fb      	ldr	r3, [r7, #28]
 800199a:	4413      	add	r3, r2
 800199c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80019a0:	461a      	mov	r2, r3
 80019a2:	2340      	movs	r3, #64	; 0x40
 80019a4:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_EPDISD) == USB_OTG_DIEPINT_EPDISD)
 80019a6:	693b      	ldr	r3, [r7, #16]
 80019a8:	f003 0302 	and.w	r3, r3, #2
 80019ac:	2b00      	cmp	r3, #0
 80019ae:	d023      	beq.n	80019f8 <HAL_PCD_IRQHandler+0x454>
          {
            (void)USB_FlushTxFifo(USBx, epnum);
 80019b0:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80019b2:	6a38      	ldr	r0, [r7, #32]
 80019b4:	f003 feea 	bl	800578c <USB_FlushTxFifo>

            ep = &hpcd->IN_ep[epnum];
 80019b8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80019ba:	4613      	mov	r3, r2
 80019bc:	00db      	lsls	r3, r3, #3
 80019be:	4413      	add	r3, r2
 80019c0:	009b      	lsls	r3, r3, #2
 80019c2:	3338      	adds	r3, #56	; 0x38
 80019c4:	687a      	ldr	r2, [r7, #4]
 80019c6:	4413      	add	r3, r2
 80019c8:	3304      	adds	r3, #4
 80019ca:	617b      	str	r3, [r7, #20]

            if (ep->is_iso_incomplete == 1U)
 80019cc:	697b      	ldr	r3, [r7, #20]
 80019ce:	78db      	ldrb	r3, [r3, #3]
 80019d0:	2b01      	cmp	r3, #1
 80019d2:	d108      	bne.n	80019e6 <HAL_PCD_IRQHandler+0x442>
            {
              ep->is_iso_incomplete = 0U;
 80019d4:	697b      	ldr	r3, [r7, #20]
 80019d6:	2200      	movs	r2, #0
 80019d8:	70da      	strb	r2, [r3, #3]

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
              hpcd->ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
#else
              HAL_PCD_ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
 80019da:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80019dc:	b2db      	uxtb	r3, r3
 80019de:	4619      	mov	r1, r3
 80019e0:	6878      	ldr	r0, [r7, #4]
 80019e2:	f007 fbbb 	bl	800915c <HAL_PCD_ISOINIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
            }

            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_EPDISD);
 80019e6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80019e8:	015a      	lsls	r2, r3, #5
 80019ea:	69fb      	ldr	r3, [r7, #28]
 80019ec:	4413      	add	r3, r2
 80019ee:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80019f2:	461a      	mov	r2, r3
 80019f4:	2302      	movs	r3, #2
 80019f6:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_TXFE) == USB_OTG_DIEPINT_TXFE)
 80019f8:	693b      	ldr	r3, [r7, #16]
 80019fa:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80019fe:	2b00      	cmp	r3, #0
 8001a00:	d003      	beq.n	8001a0a <HAL_PCD_IRQHandler+0x466>
          {
            (void)PCD_WriteEmptyTxFifo(hpcd, epnum);
 8001a02:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8001a04:	6878      	ldr	r0, [r7, #4]
 8001a06:	f000 fd08 	bl	800241a <PCD_WriteEmptyTxFifo>
          }
        }
        epnum++;
 8001a0a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001a0c:	3301      	adds	r3, #1
 8001a0e:	627b      	str	r3, [r7, #36]	; 0x24
        ep_intr >>= 1U;
 8001a10:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001a12:	085b      	lsrs	r3, r3, #1
 8001a14:	62bb      	str	r3, [r7, #40]	; 0x28
      while (ep_intr != 0U)
 8001a16:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001a18:	2b00      	cmp	r3, #0
 8001a1a:	f47f af2e 	bne.w	800187a <HAL_PCD_IRQHandler+0x2d6>
      }
    }

    /* Handle Resume Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT))
 8001a1e:	687b      	ldr	r3, [r7, #4]
 8001a20:	681b      	ldr	r3, [r3, #0]
 8001a22:	4618      	mov	r0, r3
 8001a24:	f004 fee0 	bl	80067e8 <USB_ReadInterrupts>
 8001a28:	4603      	mov	r3, r0
 8001a2a:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8001a2e:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8001a32:	d122      	bne.n	8001a7a <HAL_PCD_IRQHandler+0x4d6>
    {
      /* Clear the Remote Wake-up Signaling */
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 8001a34:	69fb      	ldr	r3, [r7, #28]
 8001a36:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8001a3a:	685b      	ldr	r3, [r3, #4]
 8001a3c:	69fa      	ldr	r2, [r7, #28]
 8001a3e:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8001a42:	f023 0301 	bic.w	r3, r3, #1
 8001a46:	6053      	str	r3, [r2, #4]

      if (hpcd->LPM_State == LPM_L1)
 8001a48:	687b      	ldr	r3, [r7, #4]
 8001a4a:	f893 34f4 	ldrb.w	r3, [r3, #1268]	; 0x4f4
 8001a4e:	2b01      	cmp	r3, #1
 8001a50:	d108      	bne.n	8001a64 <HAL_PCD_IRQHandler+0x4c0>
      {
        hpcd->LPM_State = LPM_L0;
 8001a52:	687b      	ldr	r3, [r7, #4]
 8001a54:	2200      	movs	r2, #0
 8001a56:	f883 24f4 	strb.w	r2, [r3, #1268]	; 0x4f4

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->LPMCallback(hpcd, PCD_LPM_L0_ACTIVE);
#else
        HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L0_ACTIVE);
 8001a5a:	2100      	movs	r1, #0
 8001a5c:	6878      	ldr	r0, [r7, #4]
 8001a5e:	f000 ff13 	bl	8002888 <HAL_PCDEx_LPM_Callback>
 8001a62:	e002      	b.n	8001a6a <HAL_PCD_IRQHandler+0x4c6>
      else
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->ResumeCallback(hpcd);
#else
        HAL_PCD_ResumeCallback(hpcd);
 8001a64:	6878      	ldr	r0, [r7, #4]
 8001a66:	f007 fb59 	bl	800911c <HAL_PCD_ResumeCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT);
 8001a6a:	687b      	ldr	r3, [r7, #4]
 8001a6c:	681b      	ldr	r3, [r3, #0]
 8001a6e:	695a      	ldr	r2, [r3, #20]
 8001a70:	687b      	ldr	r3, [r7, #4]
 8001a72:	681b      	ldr	r3, [r3, #0]
 8001a74:	f002 4200 	and.w	r2, r2, #2147483648	; 0x80000000
 8001a78:	615a      	str	r2, [r3, #20]
    }

    /* Handle Suspend Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP))
 8001a7a:	687b      	ldr	r3, [r7, #4]
 8001a7c:	681b      	ldr	r3, [r3, #0]
 8001a7e:	4618      	mov	r0, r3
 8001a80:	f004 feb2 	bl	80067e8 <USB_ReadInterrupts>
 8001a84:	4603      	mov	r3, r0
 8001a86:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8001a8a:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8001a8e:	d112      	bne.n	8001ab6 <HAL_PCD_IRQHandler+0x512>
    {
      if ((USBx_DEVICE->DSTS & USB_OTG_DSTS_SUSPSTS) == USB_OTG_DSTS_SUSPSTS)
 8001a90:	69fb      	ldr	r3, [r7, #28]
 8001a92:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8001a96:	689b      	ldr	r3, [r3, #8]
 8001a98:	f003 0301 	and.w	r3, r3, #1
 8001a9c:	2b01      	cmp	r3, #1
 8001a9e:	d102      	bne.n	8001aa6 <HAL_PCD_IRQHandler+0x502>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->SuspendCallback(hpcd);
#else
        HAL_PCD_SuspendCallback(hpcd);
 8001aa0:	6878      	ldr	r0, [r7, #4]
 8001aa2:	f007 fb15 	bl	80090d0 <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP);
 8001aa6:	687b      	ldr	r3, [r7, #4]
 8001aa8:	681b      	ldr	r3, [r3, #0]
 8001aaa:	695a      	ldr	r2, [r3, #20]
 8001aac:	687b      	ldr	r3, [r7, #4]
 8001aae:	681b      	ldr	r3, [r3, #0]
 8001ab0:	f402 6200 	and.w	r2, r2, #2048	; 0x800
 8001ab4:	615a      	str	r2, [r3, #20]
    }

    /* Handle LPM Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_LPMINT))
 8001ab6:	687b      	ldr	r3, [r7, #4]
 8001ab8:	681b      	ldr	r3, [r3, #0]
 8001aba:	4618      	mov	r0, r3
 8001abc:	f004 fe94 	bl	80067e8 <USB_ReadInterrupts>
 8001ac0:	4603      	mov	r3, r0
 8001ac2:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8001ac6:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8001aca:	d121      	bne.n	8001b10 <HAL_PCD_IRQHandler+0x56c>
    {
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_LPMINT);
 8001acc:	687b      	ldr	r3, [r7, #4]
 8001ace:	681b      	ldr	r3, [r3, #0]
 8001ad0:	695a      	ldr	r2, [r3, #20]
 8001ad2:	687b      	ldr	r3, [r7, #4]
 8001ad4:	681b      	ldr	r3, [r3, #0]
 8001ad6:	f002 6200 	and.w	r2, r2, #134217728	; 0x8000000
 8001ada:	615a      	str	r2, [r3, #20]

      if (hpcd->LPM_State == LPM_L0)
 8001adc:	687b      	ldr	r3, [r7, #4]
 8001ade:	f893 34f4 	ldrb.w	r3, [r3, #1268]	; 0x4f4
 8001ae2:	2b00      	cmp	r3, #0
 8001ae4:	d111      	bne.n	8001b0a <HAL_PCD_IRQHandler+0x566>
      {
        hpcd->LPM_State = LPM_L1;
 8001ae6:	687b      	ldr	r3, [r7, #4]
 8001ae8:	2201      	movs	r2, #1
 8001aea:	f883 24f4 	strb.w	r2, [r3, #1268]	; 0x4f4
        hpcd->BESL = (hpcd->Instance->GLPMCFG & USB_OTG_GLPMCFG_BESL) >> 2U;
 8001aee:	687b      	ldr	r3, [r7, #4]
 8001af0:	681b      	ldr	r3, [r3, #0]
 8001af2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001af4:	089b      	lsrs	r3, r3, #2
 8001af6:	f003 020f 	and.w	r2, r3, #15
 8001afa:	687b      	ldr	r3, [r7, #4]
 8001afc:	f8c3 24f8 	str.w	r2, [r3, #1272]	; 0x4f8

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->LPMCallback(hpcd, PCD_LPM_L1_ACTIVE);
#else
        HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L1_ACTIVE);
 8001b00:	2101      	movs	r1, #1
 8001b02:	6878      	ldr	r0, [r7, #4]
 8001b04:	f000 fec0 	bl	8002888 <HAL_PCDEx_LPM_Callback>
 8001b08:	e002      	b.n	8001b10 <HAL_PCD_IRQHandler+0x56c>
      else
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->SuspendCallback(hpcd);
#else
        HAL_PCD_SuspendCallback(hpcd);
 8001b0a:	6878      	ldr	r0, [r7, #4]
 8001b0c:	f007 fae0 	bl	80090d0 <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
    }

    /* Handle Reset Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBRST))
 8001b10:	687b      	ldr	r3, [r7, #4]
 8001b12:	681b      	ldr	r3, [r3, #0]
 8001b14:	4618      	mov	r0, r3
 8001b16:	f004 fe67 	bl	80067e8 <USB_ReadInterrupts>
 8001b1a:	4603      	mov	r3, r0
 8001b1c:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8001b20:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8001b24:	f040 80b7 	bne.w	8001c96 <HAL_PCD_IRQHandler+0x6f2>
    {
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 8001b28:	69fb      	ldr	r3, [r7, #28]
 8001b2a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8001b2e:	685b      	ldr	r3, [r3, #4]
 8001b30:	69fa      	ldr	r2, [r7, #28]
 8001b32:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8001b36:	f023 0301 	bic.w	r3, r3, #1
 8001b3a:	6053      	str	r3, [r2, #4]
      (void)USB_FlushTxFifo(hpcd->Instance, 0x10U);
 8001b3c:	687b      	ldr	r3, [r7, #4]
 8001b3e:	681b      	ldr	r3, [r3, #0]
 8001b40:	2110      	movs	r1, #16
 8001b42:	4618      	mov	r0, r3
 8001b44:	f003 fe22 	bl	800578c <USB_FlushTxFifo>

      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8001b48:	2300      	movs	r3, #0
 8001b4a:	62fb      	str	r3, [r7, #44]	; 0x2c
 8001b4c:	e046      	b.n	8001bdc <HAL_PCD_IRQHandler+0x638>
      {
        USBx_INEP(i)->DIEPINT = 0xFB7FU;
 8001b4e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001b50:	015a      	lsls	r2, r3, #5
 8001b52:	69fb      	ldr	r3, [r7, #28]
 8001b54:	4413      	add	r3, r2
 8001b56:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8001b5a:	461a      	mov	r2, r3
 8001b5c:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8001b60:	6093      	str	r3, [r2, #8]
        USBx_INEP(i)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 8001b62:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001b64:	015a      	lsls	r2, r3, #5
 8001b66:	69fb      	ldr	r3, [r7, #28]
 8001b68:	4413      	add	r3, r2
 8001b6a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8001b6e:	681b      	ldr	r3, [r3, #0]
 8001b70:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8001b72:	0151      	lsls	r1, r2, #5
 8001b74:	69fa      	ldr	r2, [r7, #28]
 8001b76:	440a      	add	r2, r1
 8001b78:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8001b7c:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8001b80:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPINT = 0xFB7FU;
 8001b82:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001b84:	015a      	lsls	r2, r3, #5
 8001b86:	69fb      	ldr	r3, [r7, #28]
 8001b88:	4413      	add	r3, r2
 8001b8a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8001b8e:	461a      	mov	r2, r3
 8001b90:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8001b94:	6093      	str	r3, [r2, #8]
        USBx_OUTEP(i)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 8001b96:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001b98:	015a      	lsls	r2, r3, #5
 8001b9a:	69fb      	ldr	r3, [r7, #28]
 8001b9c:	4413      	add	r3, r2
 8001b9e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8001ba2:	681b      	ldr	r3, [r3, #0]
 8001ba4:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8001ba6:	0151      	lsls	r1, r2, #5
 8001ba8:	69fa      	ldr	r2, [r7, #28]
 8001baa:	440a      	add	r2, r1
 8001bac:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8001bb0:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8001bb4:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 8001bb6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001bb8:	015a      	lsls	r2, r3, #5
 8001bba:	69fb      	ldr	r3, [r7, #28]
 8001bbc:	4413      	add	r3, r2
 8001bbe:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8001bc2:	681b      	ldr	r3, [r3, #0]
 8001bc4:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8001bc6:	0151      	lsls	r1, r2, #5
 8001bc8:	69fa      	ldr	r2, [r7, #28]
 8001bca:	440a      	add	r2, r1
 8001bcc:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8001bd0:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8001bd4:	6013      	str	r3, [r2, #0]
      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8001bd6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001bd8:	3301      	adds	r3, #1
 8001bda:	62fb      	str	r3, [r7, #44]	; 0x2c
 8001bdc:	687b      	ldr	r3, [r7, #4]
 8001bde:	685b      	ldr	r3, [r3, #4]
 8001be0:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8001be2:	429a      	cmp	r2, r3
 8001be4:	d3b3      	bcc.n	8001b4e <HAL_PCD_IRQHandler+0x5aa>
      }
      USBx_DEVICE->DAINTMSK |= 0x10001U;
 8001be6:	69fb      	ldr	r3, [r7, #28]
 8001be8:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8001bec:	69db      	ldr	r3, [r3, #28]
 8001bee:	69fa      	ldr	r2, [r7, #28]
 8001bf0:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8001bf4:	f043 1301 	orr.w	r3, r3, #65537	; 0x10001
 8001bf8:	61d3      	str	r3, [r2, #28]

      if (hpcd->Init.use_dedicated_ep1 != 0U)
 8001bfa:	687b      	ldr	r3, [r7, #4]
 8001bfc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001bfe:	2b00      	cmp	r3, #0
 8001c00:	d016      	beq.n	8001c30 <HAL_PCD_IRQHandler+0x68c>
      {
        USBx_DEVICE->DOUTEP1MSK |= USB_OTG_DOEPMSK_STUPM |
 8001c02:	69fb      	ldr	r3, [r7, #28]
 8001c04:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8001c08:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8001c0c:	69fa      	ldr	r2, [r7, #28]
 8001c0e:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8001c12:	f043 030b 	orr.w	r3, r3, #11
 8001c16:	f8c2 3084 	str.w	r3, [r2, #132]	; 0x84
                                   USB_OTG_DOEPMSK_XFRCM |
                                   USB_OTG_DOEPMSK_EPDM;

        USBx_DEVICE->DINEP1MSK |= USB_OTG_DIEPMSK_TOM |
 8001c1a:	69fb      	ldr	r3, [r7, #28]
 8001c1c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8001c20:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001c22:	69fa      	ldr	r2, [r7, #28]
 8001c24:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8001c28:	f043 030b 	orr.w	r3, r3, #11
 8001c2c:	6453      	str	r3, [r2, #68]	; 0x44
 8001c2e:	e015      	b.n	8001c5c <HAL_PCD_IRQHandler+0x6b8>
                                  USB_OTG_DIEPMSK_XFRCM |
                                  USB_OTG_DIEPMSK_EPDM;
      }
      else
      {
        USBx_DEVICE->DOEPMSK |= USB_OTG_DOEPMSK_STUPM |
 8001c30:	69fb      	ldr	r3, [r7, #28]
 8001c32:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8001c36:	695a      	ldr	r2, [r3, #20]
 8001c38:	69fb      	ldr	r3, [r7, #28]
 8001c3a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8001c3e:	4619      	mov	r1, r3
 8001c40:	f242 032b 	movw	r3, #8235	; 0x202b
 8001c44:	4313      	orrs	r3, r2
 8001c46:	614b      	str	r3, [r1, #20]
                                USB_OTG_DOEPMSK_XFRCM |
                                USB_OTG_DOEPMSK_EPDM |
                                USB_OTG_DOEPMSK_OTEPSPRM |
                                USB_OTG_DOEPMSK_NAKM;

        USBx_DEVICE->DIEPMSK |= USB_OTG_DIEPMSK_TOM |
 8001c48:	69fb      	ldr	r3, [r7, #28]
 8001c4a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8001c4e:	691b      	ldr	r3, [r3, #16]
 8001c50:	69fa      	ldr	r2, [r7, #28]
 8001c52:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8001c56:	f043 030b 	orr.w	r3, r3, #11
 8001c5a:	6113      	str	r3, [r2, #16]
                                USB_OTG_DIEPMSK_XFRCM |
                                USB_OTG_DIEPMSK_EPDM;
      }

      /* Set Default Address to 0 */
      USBx_DEVICE->DCFG &= ~USB_OTG_DCFG_DAD;
 8001c5c:	69fb      	ldr	r3, [r7, #28]
 8001c5e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8001c62:	681b      	ldr	r3, [r3, #0]
 8001c64:	69fa      	ldr	r2, [r7, #28]
 8001c66:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8001c6a:	f423 63fe 	bic.w	r3, r3, #2032	; 0x7f0
 8001c6e:	6013      	str	r3, [r2, #0]

      /* setup EP0 to receive SETUP packets */
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 8001c70:	687b      	ldr	r3, [r7, #4]
 8001c72:	6818      	ldr	r0, [r3, #0]
 8001c74:	687b      	ldr	r3, [r7, #4]
 8001c76:	691b      	ldr	r3, [r3, #16]
 8001c78:	b2d9      	uxtb	r1, r3
                             (uint8_t *)hpcd->Setup);
 8001c7a:	687b      	ldr	r3, [r7, #4]
 8001c7c:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 8001c80:	461a      	mov	r2, r3
 8001c82:	f004 fe77 	bl	8006974 <USB_EP0_OutStart>

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBRST);
 8001c86:	687b      	ldr	r3, [r7, #4]
 8001c88:	681b      	ldr	r3, [r3, #0]
 8001c8a:	695a      	ldr	r2, [r3, #20]
 8001c8c:	687b      	ldr	r3, [r7, #4]
 8001c8e:	681b      	ldr	r3, [r3, #0]
 8001c90:	f402 5280 	and.w	r2, r2, #4096	; 0x1000
 8001c94:	615a      	str	r2, [r3, #20]
    }

    /* Handle Enumeration done Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE))
 8001c96:	687b      	ldr	r3, [r7, #4]
 8001c98:	681b      	ldr	r3, [r3, #0]
 8001c9a:	4618      	mov	r0, r3
 8001c9c:	f004 fda4 	bl	80067e8 <USB_ReadInterrupts>
 8001ca0:	4603      	mov	r3, r0
 8001ca2:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8001ca6:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8001caa:	d124      	bne.n	8001cf6 <HAL_PCD_IRQHandler+0x752>
    {
      (void)USB_ActivateSetup(hpcd->Instance);
 8001cac:	687b      	ldr	r3, [r7, #4]
 8001cae:	681b      	ldr	r3, [r3, #0]
 8001cb0:	4618      	mov	r0, r3
 8001cb2:	f004 fe3b 	bl	800692c <USB_ActivateSetup>
      hpcd->Init.speed = USB_GetDevSpeed(hpcd->Instance);
 8001cb6:	687b      	ldr	r3, [r7, #4]
 8001cb8:	681b      	ldr	r3, [r3, #0]
 8001cba:	4618      	mov	r0, r3
 8001cbc:	f003 fde3 	bl	8005886 <USB_GetDevSpeed>
 8001cc0:	4603      	mov	r3, r0
 8001cc2:	461a      	mov	r2, r3
 8001cc4:	687b      	ldr	r3, [r7, #4]
 8001cc6:	60da      	str	r2, [r3, #12]

      /* Set USB Turnaround time */
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 8001cc8:	687b      	ldr	r3, [r7, #4]
 8001cca:	681c      	ldr	r4, [r3, #0]
 8001ccc:	f001 fd90 	bl	80037f0 <HAL_RCC_GetHCLKFreq>
 8001cd0:	4601      	mov	r1, r0
                                  HAL_RCC_GetHCLKFreq(),
                                  (uint8_t)hpcd->Init.speed);
 8001cd2:	687b      	ldr	r3, [r7, #4]
 8001cd4:	68db      	ldr	r3, [r3, #12]
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 8001cd6:	b2db      	uxtb	r3, r3
 8001cd8:	461a      	mov	r2, r3
 8001cda:	4620      	mov	r0, r4
 8001cdc:	f003 fae8 	bl	80052b0 <USB_SetTurnaroundTime>

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ResetCallback(hpcd);
#else
      HAL_PCD_ResetCallback(hpcd);
 8001ce0:	6878      	ldr	r0, [r7, #4]
 8001ce2:	f007 f9cc 	bl	800907e <HAL_PCD_ResetCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE);
 8001ce6:	687b      	ldr	r3, [r7, #4]
 8001ce8:	681b      	ldr	r3, [r3, #0]
 8001cea:	695a      	ldr	r2, [r3, #20]
 8001cec:	687b      	ldr	r3, [r7, #4]
 8001cee:	681b      	ldr	r3, [r3, #0]
 8001cf0:	f402 5200 	and.w	r2, r2, #8192	; 0x2000
 8001cf4:	615a      	str	r2, [r3, #20]
    }

    /* Handle SOF Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SOF))
 8001cf6:	687b      	ldr	r3, [r7, #4]
 8001cf8:	681b      	ldr	r3, [r3, #0]
 8001cfa:	4618      	mov	r0, r3
 8001cfc:	f004 fd74 	bl	80067e8 <USB_ReadInterrupts>
 8001d00:	4603      	mov	r3, r0
 8001d02:	f003 0308 	and.w	r3, r3, #8
 8001d06:	2b08      	cmp	r3, #8
 8001d08:	d10a      	bne.n	8001d20 <HAL_PCD_IRQHandler+0x77c>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->SOFCallback(hpcd);
#else
      HAL_PCD_SOFCallback(hpcd);
 8001d0a:	6878      	ldr	r0, [r7, #4]
 8001d0c:	f007 f9a9 	bl	8009062 <HAL_PCD_SOFCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SOF);
 8001d10:	687b      	ldr	r3, [r7, #4]
 8001d12:	681b      	ldr	r3, [r3, #0]
 8001d14:	695a      	ldr	r2, [r3, #20]
 8001d16:	687b      	ldr	r3, [r7, #4]
 8001d18:	681b      	ldr	r3, [r3, #0]
 8001d1a:	f002 0208 	and.w	r2, r2, #8
 8001d1e:	615a      	str	r2, [r3, #20]
    }

    /* Handle Global OUT NAK effective Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_BOUTNAKEFF))
 8001d20:	687b      	ldr	r3, [r7, #4]
 8001d22:	681b      	ldr	r3, [r3, #0]
 8001d24:	4618      	mov	r0, r3
 8001d26:	f004 fd5f 	bl	80067e8 <USB_ReadInterrupts>
 8001d2a:	4603      	mov	r3, r0
 8001d2c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001d30:	2b80      	cmp	r3, #128	; 0x80
 8001d32:	d122      	bne.n	8001d7a <HAL_PCD_IRQHandler+0x7d6>
    {
      USBx->GINTMSK &= ~USB_OTG_GINTMSK_GONAKEFFM;
 8001d34:	6a3b      	ldr	r3, [r7, #32]
 8001d36:	699b      	ldr	r3, [r3, #24]
 8001d38:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8001d3c:	6a3b      	ldr	r3, [r7, #32]
 8001d3e:	619a      	str	r2, [r3, #24]

      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8001d40:	2301      	movs	r3, #1
 8001d42:	627b      	str	r3, [r7, #36]	; 0x24
 8001d44:	e014      	b.n	8001d70 <HAL_PCD_IRQHandler+0x7cc>
      {
        if (hpcd->OUT_ep[epnum].is_iso_incomplete == 1U)
 8001d46:	6879      	ldr	r1, [r7, #4]
 8001d48:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001d4a:	4613      	mov	r3, r2
 8001d4c:	00db      	lsls	r3, r3, #3
 8001d4e:	4413      	add	r3, r2
 8001d50:	009b      	lsls	r3, r3, #2
 8001d52:	440b      	add	r3, r1
 8001d54:	f203 237f 	addw	r3, r3, #639	; 0x27f
 8001d58:	781b      	ldrb	r3, [r3, #0]
 8001d5a:	2b01      	cmp	r3, #1
 8001d5c:	d105      	bne.n	8001d6a <HAL_PCD_IRQHandler+0x7c6>
        {
          /* Abort current transaction and disable the EP */
          (void)HAL_PCD_EP_Abort(hpcd, (uint8_t)epnum);
 8001d5e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001d60:	b2db      	uxtb	r3, r3
 8001d62:	4619      	mov	r1, r3
 8001d64:	6878      	ldr	r0, [r7, #4]
 8001d66:	f000 fb27 	bl	80023b8 <HAL_PCD_EP_Abort>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8001d6a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001d6c:	3301      	adds	r3, #1
 8001d6e:	627b      	str	r3, [r7, #36]	; 0x24
 8001d70:	687b      	ldr	r3, [r7, #4]
 8001d72:	685b      	ldr	r3, [r3, #4]
 8001d74:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001d76:	429a      	cmp	r2, r3
 8001d78:	d3e5      	bcc.n	8001d46 <HAL_PCD_IRQHandler+0x7a2>
        }
      }
    }

    /* Handle Incomplete ISO IN Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR))
 8001d7a:	687b      	ldr	r3, [r7, #4]
 8001d7c:	681b      	ldr	r3, [r3, #0]
 8001d7e:	4618      	mov	r0, r3
 8001d80:	f004 fd32 	bl	80067e8 <USB_ReadInterrupts>
 8001d84:	4603      	mov	r3, r0
 8001d86:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001d8a:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8001d8e:	d13b      	bne.n	8001e08 <HAL_PCD_IRQHandler+0x864>
    {
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8001d90:	2301      	movs	r3, #1
 8001d92:	627b      	str	r3, [r7, #36]	; 0x24
 8001d94:	e02b      	b.n	8001dee <HAL_PCD_IRQHandler+0x84a>
      {
        RegVal = USBx_INEP(epnum)->DIEPCTL;
 8001d96:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001d98:	015a      	lsls	r2, r3, #5
 8001d9a:	69fb      	ldr	r3, [r7, #28]
 8001d9c:	4413      	add	r3, r2
 8001d9e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8001da2:	681b      	ldr	r3, [r3, #0]
 8001da4:	61bb      	str	r3, [r7, #24]

        if ((hpcd->IN_ep[epnum].type == EP_TYPE_ISOC) &&
 8001da6:	6879      	ldr	r1, [r7, #4]
 8001da8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001daa:	4613      	mov	r3, r2
 8001dac:	00db      	lsls	r3, r3, #3
 8001dae:	4413      	add	r3, r2
 8001db0:	009b      	lsls	r3, r3, #2
 8001db2:	440b      	add	r3, r1
 8001db4:	3340      	adds	r3, #64	; 0x40
 8001db6:	781b      	ldrb	r3, [r3, #0]
 8001db8:	2b01      	cmp	r3, #1
 8001dba:	d115      	bne.n	8001de8 <HAL_PCD_IRQHandler+0x844>
            ((RegVal & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA))
 8001dbc:	69bb      	ldr	r3, [r7, #24]
        if ((hpcd->IN_ep[epnum].type == EP_TYPE_ISOC) &&
 8001dbe:	2b00      	cmp	r3, #0
 8001dc0:	da12      	bge.n	8001de8 <HAL_PCD_IRQHandler+0x844>
        {
          hpcd->IN_ep[epnum].is_iso_incomplete = 1U;
 8001dc2:	6879      	ldr	r1, [r7, #4]
 8001dc4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001dc6:	4613      	mov	r3, r2
 8001dc8:	00db      	lsls	r3, r3, #3
 8001dca:	4413      	add	r3, r2
 8001dcc:	009b      	lsls	r3, r3, #2
 8001dce:	440b      	add	r3, r1
 8001dd0:	333f      	adds	r3, #63	; 0x3f
 8001dd2:	2201      	movs	r2, #1
 8001dd4:	701a      	strb	r2, [r3, #0]

          /* Abort current transaction and disable the EP */
          (void)HAL_PCD_EP_Abort(hpcd, (uint8_t)(epnum | 0x80U));
 8001dd6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001dd8:	b2db      	uxtb	r3, r3
 8001dda:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8001dde:	b2db      	uxtb	r3, r3
 8001de0:	4619      	mov	r1, r3
 8001de2:	6878      	ldr	r0, [r7, #4]
 8001de4:	f000 fae8 	bl	80023b8 <HAL_PCD_EP_Abort>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8001de8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001dea:	3301      	adds	r3, #1
 8001dec:	627b      	str	r3, [r7, #36]	; 0x24
 8001dee:	687b      	ldr	r3, [r7, #4]
 8001df0:	685b      	ldr	r3, [r3, #4]
 8001df2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001df4:	429a      	cmp	r2, r3
 8001df6:	d3ce      	bcc.n	8001d96 <HAL_PCD_IRQHandler+0x7f2>
        }
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR);
 8001df8:	687b      	ldr	r3, [r7, #4]
 8001dfa:	681b      	ldr	r3, [r3, #0]
 8001dfc:	695a      	ldr	r2, [r3, #20]
 8001dfe:	687b      	ldr	r3, [r7, #4]
 8001e00:	681b      	ldr	r3, [r3, #0]
 8001e02:	f402 1280 	and.w	r2, r2, #1048576	; 0x100000
 8001e06:	615a      	str	r2, [r3, #20]
    }

    /* Handle Incomplete ISO OUT Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT))
 8001e08:	687b      	ldr	r3, [r7, #4]
 8001e0a:	681b      	ldr	r3, [r3, #0]
 8001e0c:	4618      	mov	r0, r3
 8001e0e:	f004 fceb 	bl	80067e8 <USB_ReadInterrupts>
 8001e12:	4603      	mov	r3, r0
 8001e14:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001e18:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8001e1c:	d155      	bne.n	8001eca <HAL_PCD_IRQHandler+0x926>
    {
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8001e1e:	2301      	movs	r3, #1
 8001e20:	627b      	str	r3, [r7, #36]	; 0x24
 8001e22:	e045      	b.n	8001eb0 <HAL_PCD_IRQHandler+0x90c>
      {
        RegVal = USBx_OUTEP(epnum)->DOEPCTL;
 8001e24:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001e26:	015a      	lsls	r2, r3, #5
 8001e28:	69fb      	ldr	r3, [r7, #28]
 8001e2a:	4413      	add	r3, r2
 8001e2c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8001e30:	681b      	ldr	r3, [r3, #0]
 8001e32:	61bb      	str	r3, [r7, #24]

        if ((hpcd->OUT_ep[epnum].type == EP_TYPE_ISOC) &&
 8001e34:	6879      	ldr	r1, [r7, #4]
 8001e36:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001e38:	4613      	mov	r3, r2
 8001e3a:	00db      	lsls	r3, r3, #3
 8001e3c:	4413      	add	r3, r2
 8001e3e:	009b      	lsls	r3, r3, #2
 8001e40:	440b      	add	r3, r1
 8001e42:	f503 7320 	add.w	r3, r3, #640	; 0x280
 8001e46:	781b      	ldrb	r3, [r3, #0]
 8001e48:	2b01      	cmp	r3, #1
 8001e4a:	d12e      	bne.n	8001eaa <HAL_PCD_IRQHandler+0x906>
            ((RegVal & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA) &&
 8001e4c:	69bb      	ldr	r3, [r7, #24]
        if ((hpcd->OUT_ep[epnum].type == EP_TYPE_ISOC) &&
 8001e4e:	2b00      	cmp	r3, #0
 8001e50:	da2b      	bge.n	8001eaa <HAL_PCD_IRQHandler+0x906>
            ((RegVal & (0x1U << 16)) == (hpcd->FrameNumber & 0x1U)))
 8001e52:	69bb      	ldr	r3, [r7, #24]
 8001e54:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 8001e58:	687b      	ldr	r3, [r7, #4]
 8001e5a:	f8d3 34fc 	ldr.w	r3, [r3, #1276]	; 0x4fc
 8001e5e:	f003 0301 	and.w	r3, r3, #1
            ((RegVal & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA) &&
 8001e62:	429a      	cmp	r2, r3
 8001e64:	d121      	bne.n	8001eaa <HAL_PCD_IRQHandler+0x906>
        {
          hpcd->OUT_ep[epnum].is_iso_incomplete = 1U;
 8001e66:	6879      	ldr	r1, [r7, #4]
 8001e68:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001e6a:	4613      	mov	r3, r2
 8001e6c:	00db      	lsls	r3, r3, #3
 8001e6e:	4413      	add	r3, r2
 8001e70:	009b      	lsls	r3, r3, #2
 8001e72:	440b      	add	r3, r1
 8001e74:	f203 237f 	addw	r3, r3, #639	; 0x27f
 8001e78:	2201      	movs	r2, #1
 8001e7a:	701a      	strb	r2, [r3, #0]

          USBx->GINTMSK |= USB_OTG_GINTMSK_GONAKEFFM;
 8001e7c:	6a3b      	ldr	r3, [r7, #32]
 8001e7e:	699b      	ldr	r3, [r3, #24]
 8001e80:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 8001e84:	6a3b      	ldr	r3, [r7, #32]
 8001e86:	619a      	str	r2, [r3, #24]

          if ((USBx->GINTSTS & USB_OTG_GINTSTS_BOUTNAKEFF) == 0U)
 8001e88:	6a3b      	ldr	r3, [r7, #32]
 8001e8a:	695b      	ldr	r3, [r3, #20]
 8001e8c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001e90:	2b00      	cmp	r3, #0
 8001e92:	d10a      	bne.n	8001eaa <HAL_PCD_IRQHandler+0x906>
          {
            USBx_DEVICE->DCTL |= USB_OTG_DCTL_SGONAK;
 8001e94:	69fb      	ldr	r3, [r7, #28]
 8001e96:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8001e9a:	685b      	ldr	r3, [r3, #4]
 8001e9c:	69fa      	ldr	r2, [r7, #28]
 8001e9e:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8001ea2:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8001ea6:	6053      	str	r3, [r2, #4]
            break;
 8001ea8:	e007      	b.n	8001eba <HAL_PCD_IRQHandler+0x916>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8001eaa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001eac:	3301      	adds	r3, #1
 8001eae:	627b      	str	r3, [r7, #36]	; 0x24
 8001eb0:	687b      	ldr	r3, [r7, #4]
 8001eb2:	685b      	ldr	r3, [r3, #4]
 8001eb4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001eb6:	429a      	cmp	r2, r3
 8001eb8:	d3b4      	bcc.n	8001e24 <HAL_PCD_IRQHandler+0x880>
          }
        }
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT);
 8001eba:	687b      	ldr	r3, [r7, #4]
 8001ebc:	681b      	ldr	r3, [r3, #0]
 8001ebe:	695a      	ldr	r2, [r3, #20]
 8001ec0:	687b      	ldr	r3, [r7, #4]
 8001ec2:	681b      	ldr	r3, [r3, #0]
 8001ec4:	f402 1200 	and.w	r2, r2, #2097152	; 0x200000
 8001ec8:	615a      	str	r2, [r3, #20]
    }

    /* Handle Connection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT))
 8001eca:	687b      	ldr	r3, [r7, #4]
 8001ecc:	681b      	ldr	r3, [r3, #0]
 8001ece:	4618      	mov	r0, r3
 8001ed0:	f004 fc8a 	bl	80067e8 <USB_ReadInterrupts>
 8001ed4:	4603      	mov	r3, r0
 8001ed6:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 8001eda:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001ede:	d10a      	bne.n	8001ef6 <HAL_PCD_IRQHandler+0x952>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ConnectCallback(hpcd);
#else
      HAL_PCD_ConnectCallback(hpcd);
 8001ee0:	6878      	ldr	r0, [r7, #4]
 8001ee2:	f007 f94d 	bl	8009180 <HAL_PCD_ConnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT);
 8001ee6:	687b      	ldr	r3, [r7, #4]
 8001ee8:	681b      	ldr	r3, [r3, #0]
 8001eea:	695a      	ldr	r2, [r3, #20]
 8001eec:	687b      	ldr	r3, [r7, #4]
 8001eee:	681b      	ldr	r3, [r3, #0]
 8001ef0:	f002 4280 	and.w	r2, r2, #1073741824	; 0x40000000
 8001ef4:	615a      	str	r2, [r3, #20]
    }

    /* Handle Disconnection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OTGINT))
 8001ef6:	687b      	ldr	r3, [r7, #4]
 8001ef8:	681b      	ldr	r3, [r3, #0]
 8001efa:	4618      	mov	r0, r3
 8001efc:	f004 fc74 	bl	80067e8 <USB_ReadInterrupts>
 8001f00:	4603      	mov	r3, r0
 8001f02:	f003 0304 	and.w	r3, r3, #4
 8001f06:	2b04      	cmp	r3, #4
 8001f08:	d115      	bne.n	8001f36 <HAL_PCD_IRQHandler+0x992>
    {
      RegVal = hpcd->Instance->GOTGINT;
 8001f0a:	687b      	ldr	r3, [r7, #4]
 8001f0c:	681b      	ldr	r3, [r3, #0]
 8001f0e:	685b      	ldr	r3, [r3, #4]
 8001f10:	61bb      	str	r3, [r7, #24]

      if ((RegVal & USB_OTG_GOTGINT_SEDET) == USB_OTG_GOTGINT_SEDET)
 8001f12:	69bb      	ldr	r3, [r7, #24]
 8001f14:	f003 0304 	and.w	r3, r3, #4
 8001f18:	2b00      	cmp	r3, #0
 8001f1a:	d002      	beq.n	8001f22 <HAL_PCD_IRQHandler+0x97e>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DisconnectCallback(hpcd);
#else
        HAL_PCD_DisconnectCallback(hpcd);
 8001f1c:	6878      	ldr	r0, [r7, #4]
 8001f1e:	f007 f93d 	bl	800919c <HAL_PCD_DisconnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      hpcd->Instance->GOTGINT |= RegVal;
 8001f22:	687b      	ldr	r3, [r7, #4]
 8001f24:	681b      	ldr	r3, [r3, #0]
 8001f26:	6859      	ldr	r1, [r3, #4]
 8001f28:	687b      	ldr	r3, [r7, #4]
 8001f2a:	681b      	ldr	r3, [r3, #0]
 8001f2c:	69ba      	ldr	r2, [r7, #24]
 8001f2e:	430a      	orrs	r2, r1
 8001f30:	605a      	str	r2, [r3, #4]
 8001f32:	e000      	b.n	8001f36 <HAL_PCD_IRQHandler+0x992>
      return;
 8001f34:	bf00      	nop
    }
  }
}
 8001f36:	3734      	adds	r7, #52	; 0x34
 8001f38:	46bd      	mov	sp, r7
 8001f3a:	bd90      	pop	{r4, r7, pc}

08001f3c <HAL_PCD_SetAddress>:
  * @param  hpcd PCD handle
  * @param  address new device address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_SetAddress(PCD_HandleTypeDef *hpcd, uint8_t address)
{
 8001f3c:	b580      	push	{r7, lr}
 8001f3e:	b082      	sub	sp, #8
 8001f40:	af00      	add	r7, sp, #0
 8001f42:	6078      	str	r0, [r7, #4]
 8001f44:	460b      	mov	r3, r1
 8001f46:	70fb      	strb	r3, [r7, #3]
  __HAL_LOCK(hpcd);
 8001f48:	687b      	ldr	r3, [r7, #4]
 8001f4a:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 8001f4e:	2b01      	cmp	r3, #1
 8001f50:	d101      	bne.n	8001f56 <HAL_PCD_SetAddress+0x1a>
 8001f52:	2302      	movs	r3, #2
 8001f54:	e013      	b.n	8001f7e <HAL_PCD_SetAddress+0x42>
 8001f56:	687b      	ldr	r3, [r7, #4]
 8001f58:	2201      	movs	r2, #1
 8001f5a:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc
  hpcd->USB_Address = address;
 8001f5e:	687b      	ldr	r3, [r7, #4]
 8001f60:	78fa      	ldrb	r2, [r7, #3]
 8001f62:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  (void)USB_SetDevAddress(hpcd->Instance, address);
 8001f66:	687b      	ldr	r3, [r7, #4]
 8001f68:	681b      	ldr	r3, [r3, #0]
 8001f6a:	78fa      	ldrb	r2, [r7, #3]
 8001f6c:	4611      	mov	r1, r2
 8001f6e:	4618      	mov	r0, r3
 8001f70:	f004 fbd2 	bl	8006718 <USB_SetDevAddress>
  __HAL_UNLOCK(hpcd);
 8001f74:	687b      	ldr	r3, [r7, #4]
 8001f76:	2200      	movs	r2, #0
 8001f78:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  return HAL_OK;
 8001f7c:	2300      	movs	r3, #0
}
 8001f7e:	4618      	mov	r0, r3
 8001f80:	3708      	adds	r7, #8
 8001f82:	46bd      	mov	sp, r7
 8001f84:	bd80      	pop	{r7, pc}

08001f86 <HAL_PCD_EP_Open>:
  * @param  ep_type endpoint type
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Open(PCD_HandleTypeDef *hpcd, uint8_t ep_addr,
                                  uint16_t ep_mps, uint8_t ep_type)
{
 8001f86:	b580      	push	{r7, lr}
 8001f88:	b084      	sub	sp, #16
 8001f8a:	af00      	add	r7, sp, #0
 8001f8c:	6078      	str	r0, [r7, #4]
 8001f8e:	4608      	mov	r0, r1
 8001f90:	4611      	mov	r1, r2
 8001f92:	461a      	mov	r2, r3
 8001f94:	4603      	mov	r3, r0
 8001f96:	70fb      	strb	r3, [r7, #3]
 8001f98:	460b      	mov	r3, r1
 8001f9a:	803b      	strh	r3, [r7, #0]
 8001f9c:	4613      	mov	r3, r2
 8001f9e:	70bb      	strb	r3, [r7, #2]
  HAL_StatusTypeDef  ret = HAL_OK;
 8001fa0:	2300      	movs	r3, #0
 8001fa2:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8001fa4:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8001fa8:	2b00      	cmp	r3, #0
 8001faa:	da0f      	bge.n	8001fcc <HAL_PCD_EP_Open+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8001fac:	78fb      	ldrb	r3, [r7, #3]
 8001fae:	f003 020f 	and.w	r2, r3, #15
 8001fb2:	4613      	mov	r3, r2
 8001fb4:	00db      	lsls	r3, r3, #3
 8001fb6:	4413      	add	r3, r2
 8001fb8:	009b      	lsls	r3, r3, #2
 8001fba:	3338      	adds	r3, #56	; 0x38
 8001fbc:	687a      	ldr	r2, [r7, #4]
 8001fbe:	4413      	add	r3, r2
 8001fc0:	3304      	adds	r3, #4
 8001fc2:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8001fc4:	68fb      	ldr	r3, [r7, #12]
 8001fc6:	2201      	movs	r2, #1
 8001fc8:	705a      	strb	r2, [r3, #1]
 8001fca:	e00f      	b.n	8001fec <HAL_PCD_EP_Open+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8001fcc:	78fb      	ldrb	r3, [r7, #3]
 8001fce:	f003 020f 	and.w	r2, r3, #15
 8001fd2:	4613      	mov	r3, r2
 8001fd4:	00db      	lsls	r3, r3, #3
 8001fd6:	4413      	add	r3, r2
 8001fd8:	009b      	lsls	r3, r3, #2
 8001fda:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8001fde:	687a      	ldr	r2, [r7, #4]
 8001fe0:	4413      	add	r3, r2
 8001fe2:	3304      	adds	r3, #4
 8001fe4:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8001fe6:	68fb      	ldr	r3, [r7, #12]
 8001fe8:	2200      	movs	r2, #0
 8001fea:	705a      	strb	r2, [r3, #1]
  }

  ep->num = ep_addr & EP_ADDR_MSK;
 8001fec:	78fb      	ldrb	r3, [r7, #3]
 8001fee:	f003 030f 	and.w	r3, r3, #15
 8001ff2:	b2da      	uxtb	r2, r3
 8001ff4:	68fb      	ldr	r3, [r7, #12]
 8001ff6:	701a      	strb	r2, [r3, #0]
  ep->maxpacket = ep_mps;
 8001ff8:	883a      	ldrh	r2, [r7, #0]
 8001ffa:	68fb      	ldr	r3, [r7, #12]
 8001ffc:	60da      	str	r2, [r3, #12]
  ep->type = ep_type;
 8001ffe:	68fb      	ldr	r3, [r7, #12]
 8002000:	78ba      	ldrb	r2, [r7, #2]
 8002002:	711a      	strb	r2, [r3, #4]

  if (ep->is_in != 0U)
 8002004:	68fb      	ldr	r3, [r7, #12]
 8002006:	785b      	ldrb	r3, [r3, #1]
 8002008:	2b00      	cmp	r3, #0
 800200a:	d004      	beq.n	8002016 <HAL_PCD_EP_Open+0x90>
  {
    /* Assign a Tx FIFO */
    ep->tx_fifo_num = ep->num;
 800200c:	68fb      	ldr	r3, [r7, #12]
 800200e:	781b      	ldrb	r3, [r3, #0]
 8002010:	b29a      	uxth	r2, r3
 8002012:	68fb      	ldr	r3, [r7, #12]
 8002014:	811a      	strh	r2, [r3, #8]
  }
  /* Set initial data PID. */
  if (ep_type == EP_TYPE_BULK)
 8002016:	78bb      	ldrb	r3, [r7, #2]
 8002018:	2b02      	cmp	r3, #2
 800201a:	d102      	bne.n	8002022 <HAL_PCD_EP_Open+0x9c>
  {
    ep->data_pid_start = 0U;
 800201c:	68fb      	ldr	r3, [r7, #12]
 800201e:	2200      	movs	r2, #0
 8002020:	715a      	strb	r2, [r3, #5]
  }

  __HAL_LOCK(hpcd);
 8002022:	687b      	ldr	r3, [r7, #4]
 8002024:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 8002028:	2b01      	cmp	r3, #1
 800202a:	d101      	bne.n	8002030 <HAL_PCD_EP_Open+0xaa>
 800202c:	2302      	movs	r3, #2
 800202e:	e00e      	b.n	800204e <HAL_PCD_EP_Open+0xc8>
 8002030:	687b      	ldr	r3, [r7, #4]
 8002032:	2201      	movs	r2, #1
 8002034:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc
  (void)USB_ActivateEndpoint(hpcd->Instance, ep);
 8002038:	687b      	ldr	r3, [r7, #4]
 800203a:	681b      	ldr	r3, [r3, #0]
 800203c:	68f9      	ldr	r1, [r7, #12]
 800203e:	4618      	mov	r0, r3
 8002040:	f003 fc46 	bl	80058d0 <USB_ActivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8002044:	687b      	ldr	r3, [r7, #4]
 8002046:	2200      	movs	r2, #0
 8002048:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  return ret;
 800204c:	7afb      	ldrb	r3, [r7, #11]
}
 800204e:	4618      	mov	r0, r3
 8002050:	3710      	adds	r7, #16
 8002052:	46bd      	mov	sp, r7
 8002054:	bd80      	pop	{r7, pc}

08002056 <HAL_PCD_EP_Close>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Close(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8002056:	b580      	push	{r7, lr}
 8002058:	b084      	sub	sp, #16
 800205a:	af00      	add	r7, sp, #0
 800205c:	6078      	str	r0, [r7, #4]
 800205e:	460b      	mov	r3, r1
 8002060:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8002062:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8002066:	2b00      	cmp	r3, #0
 8002068:	da0f      	bge.n	800208a <HAL_PCD_EP_Close+0x34>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800206a:	78fb      	ldrb	r3, [r7, #3]
 800206c:	f003 020f 	and.w	r2, r3, #15
 8002070:	4613      	mov	r3, r2
 8002072:	00db      	lsls	r3, r3, #3
 8002074:	4413      	add	r3, r2
 8002076:	009b      	lsls	r3, r3, #2
 8002078:	3338      	adds	r3, #56	; 0x38
 800207a:	687a      	ldr	r2, [r7, #4]
 800207c:	4413      	add	r3, r2
 800207e:	3304      	adds	r3, #4
 8002080:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8002082:	68fb      	ldr	r3, [r7, #12]
 8002084:	2201      	movs	r2, #1
 8002086:	705a      	strb	r2, [r3, #1]
 8002088:	e00f      	b.n	80020aa <HAL_PCD_EP_Close+0x54>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 800208a:	78fb      	ldrb	r3, [r7, #3]
 800208c:	f003 020f 	and.w	r2, r3, #15
 8002090:	4613      	mov	r3, r2
 8002092:	00db      	lsls	r3, r3, #3
 8002094:	4413      	add	r3, r2
 8002096:	009b      	lsls	r3, r3, #2
 8002098:	f503 731e 	add.w	r3, r3, #632	; 0x278
 800209c:	687a      	ldr	r2, [r7, #4]
 800209e:	4413      	add	r3, r2
 80020a0:	3304      	adds	r3, #4
 80020a2:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 80020a4:	68fb      	ldr	r3, [r7, #12]
 80020a6:	2200      	movs	r2, #0
 80020a8:	705a      	strb	r2, [r3, #1]
  }
  ep->num   = ep_addr & EP_ADDR_MSK;
 80020aa:	78fb      	ldrb	r3, [r7, #3]
 80020ac:	f003 030f 	and.w	r3, r3, #15
 80020b0:	b2da      	uxtb	r2, r3
 80020b2:	68fb      	ldr	r3, [r7, #12]
 80020b4:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 80020b6:	687b      	ldr	r3, [r7, #4]
 80020b8:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 80020bc:	2b01      	cmp	r3, #1
 80020be:	d101      	bne.n	80020c4 <HAL_PCD_EP_Close+0x6e>
 80020c0:	2302      	movs	r3, #2
 80020c2:	e00e      	b.n	80020e2 <HAL_PCD_EP_Close+0x8c>
 80020c4:	687b      	ldr	r3, [r7, #4]
 80020c6:	2201      	movs	r2, #1
 80020c8:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc
  (void)USB_DeactivateEndpoint(hpcd->Instance, ep);
 80020cc:	687b      	ldr	r3, [r7, #4]
 80020ce:	681b      	ldr	r3, [r3, #0]
 80020d0:	68f9      	ldr	r1, [r7, #12]
 80020d2:	4618      	mov	r0, r3
 80020d4:	f003 fc84 	bl	80059e0 <USB_DeactivateEndpoint>
  __HAL_UNLOCK(hpcd);
 80020d8:	687b      	ldr	r3, [r7, #4]
 80020da:	2200      	movs	r2, #0
 80020dc:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc
  return HAL_OK;
 80020e0:	2300      	movs	r3, #0
}
 80020e2:	4618      	mov	r0, r3
 80020e4:	3710      	adds	r7, #16
 80020e6:	46bd      	mov	sp, r7
 80020e8:	bd80      	pop	{r7, pc}

080020ea <HAL_PCD_EP_Receive>:
  * @param  pBuf pointer to the reception buffer
  * @param  len amount of data to be received
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Receive(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 80020ea:	b580      	push	{r7, lr}
 80020ec:	b086      	sub	sp, #24
 80020ee:	af00      	add	r7, sp, #0
 80020f0:	60f8      	str	r0, [r7, #12]
 80020f2:	607a      	str	r2, [r7, #4]
 80020f4:	603b      	str	r3, [r7, #0]
 80020f6:	460b      	mov	r3, r1
 80020f8:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 80020fa:	7afb      	ldrb	r3, [r7, #11]
 80020fc:	f003 020f 	and.w	r2, r3, #15
 8002100:	4613      	mov	r3, r2
 8002102:	00db      	lsls	r3, r3, #3
 8002104:	4413      	add	r3, r2
 8002106:	009b      	lsls	r3, r3, #2
 8002108:	f503 731e 	add.w	r3, r3, #632	; 0x278
 800210c:	68fa      	ldr	r2, [r7, #12]
 800210e:	4413      	add	r3, r2
 8002110:	3304      	adds	r3, #4
 8002112:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8002114:	697b      	ldr	r3, [r7, #20]
 8002116:	687a      	ldr	r2, [r7, #4]
 8002118:	611a      	str	r2, [r3, #16]
  ep->xfer_len = len;
 800211a:	697b      	ldr	r3, [r7, #20]
 800211c:	683a      	ldr	r2, [r7, #0]
 800211e:	619a      	str	r2, [r3, #24]
  ep->xfer_count = 0U;
 8002120:	697b      	ldr	r3, [r7, #20]
 8002122:	2200      	movs	r2, #0
 8002124:	621a      	str	r2, [r3, #32]
  ep->is_in = 0U;
 8002126:	697b      	ldr	r3, [r7, #20]
 8002128:	2200      	movs	r2, #0
 800212a:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 800212c:	7afb      	ldrb	r3, [r7, #11]
 800212e:	f003 030f 	and.w	r3, r3, #15
 8002132:	b2da      	uxtb	r2, r3
 8002134:	697b      	ldr	r3, [r7, #20]
 8002136:	701a      	strb	r2, [r3, #0]

  if (hpcd->Init.dma_enable == 1U)
 8002138:	68fb      	ldr	r3, [r7, #12]
 800213a:	691b      	ldr	r3, [r3, #16]
 800213c:	2b01      	cmp	r3, #1
 800213e:	d102      	bne.n	8002146 <HAL_PCD_EP_Receive+0x5c>
  {
    ep->dma_addr = (uint32_t)pBuf;
 8002140:	687a      	ldr	r2, [r7, #4]
 8002142:	697b      	ldr	r3, [r7, #20]
 8002144:	615a      	str	r2, [r3, #20]
  }

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8002146:	7afb      	ldrb	r3, [r7, #11]
 8002148:	f003 030f 	and.w	r3, r3, #15
 800214c:	2b00      	cmp	r3, #0
 800214e:	d109      	bne.n	8002164 <HAL_PCD_EP_Receive+0x7a>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8002150:	68fb      	ldr	r3, [r7, #12]
 8002152:	6818      	ldr	r0, [r3, #0]
 8002154:	68fb      	ldr	r3, [r7, #12]
 8002156:	691b      	ldr	r3, [r3, #16]
 8002158:	b2db      	uxtb	r3, r3
 800215a:	461a      	mov	r2, r3
 800215c:	6979      	ldr	r1, [r7, #20]
 800215e:	f003 ff6b 	bl	8006038 <USB_EP0StartXfer>
 8002162:	e008      	b.n	8002176 <HAL_PCD_EP_Receive+0x8c>
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8002164:	68fb      	ldr	r3, [r7, #12]
 8002166:	6818      	ldr	r0, [r3, #0]
 8002168:	68fb      	ldr	r3, [r7, #12]
 800216a:	691b      	ldr	r3, [r3, #16]
 800216c:	b2db      	uxtb	r3, r3
 800216e:	461a      	mov	r2, r3
 8002170:	6979      	ldr	r1, [r7, #20]
 8002172:	f003 fd11 	bl	8005b98 <USB_EPStartXfer>
  }

  return HAL_OK;
 8002176:	2300      	movs	r3, #0
}
 8002178:	4618      	mov	r0, r3
 800217a:	3718      	adds	r7, #24
 800217c:	46bd      	mov	sp, r7
 800217e:	bd80      	pop	{r7, pc}

08002180 <HAL_PCD_EP_GetRxCount>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval Data Size
  */
uint32_t HAL_PCD_EP_GetRxCount(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8002180:	b480      	push	{r7}
 8002182:	b083      	sub	sp, #12
 8002184:	af00      	add	r7, sp, #0
 8002186:	6078      	str	r0, [r7, #4]
 8002188:	460b      	mov	r3, r1
 800218a:	70fb      	strb	r3, [r7, #3]
  return hpcd->OUT_ep[ep_addr & EP_ADDR_MSK].xfer_count;
 800218c:	78fb      	ldrb	r3, [r7, #3]
 800218e:	f003 020f 	and.w	r2, r3, #15
 8002192:	6879      	ldr	r1, [r7, #4]
 8002194:	4613      	mov	r3, r2
 8002196:	00db      	lsls	r3, r3, #3
 8002198:	4413      	add	r3, r2
 800219a:	009b      	lsls	r3, r3, #2
 800219c:	440b      	add	r3, r1
 800219e:	f503 7327 	add.w	r3, r3, #668	; 0x29c
 80021a2:	681b      	ldr	r3, [r3, #0]
}
 80021a4:	4618      	mov	r0, r3
 80021a6:	370c      	adds	r7, #12
 80021a8:	46bd      	mov	sp, r7
 80021aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021ae:	4770      	bx	lr

080021b0 <HAL_PCD_EP_Transmit>:
  * @param  pBuf pointer to the transmission buffer
  * @param  len amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Transmit(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 80021b0:	b580      	push	{r7, lr}
 80021b2:	b086      	sub	sp, #24
 80021b4:	af00      	add	r7, sp, #0
 80021b6:	60f8      	str	r0, [r7, #12]
 80021b8:	607a      	str	r2, [r7, #4]
 80021ba:	603b      	str	r3, [r7, #0]
 80021bc:	460b      	mov	r3, r1
 80021be:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80021c0:	7afb      	ldrb	r3, [r7, #11]
 80021c2:	f003 020f 	and.w	r2, r3, #15
 80021c6:	4613      	mov	r3, r2
 80021c8:	00db      	lsls	r3, r3, #3
 80021ca:	4413      	add	r3, r2
 80021cc:	009b      	lsls	r3, r3, #2
 80021ce:	3338      	adds	r3, #56	; 0x38
 80021d0:	68fa      	ldr	r2, [r7, #12]
 80021d2:	4413      	add	r3, r2
 80021d4:	3304      	adds	r3, #4
 80021d6:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 80021d8:	697b      	ldr	r3, [r7, #20]
 80021da:	687a      	ldr	r2, [r7, #4]
 80021dc:	611a      	str	r2, [r3, #16]
  ep->xfer_len = len;
 80021de:	697b      	ldr	r3, [r7, #20]
 80021e0:	683a      	ldr	r2, [r7, #0]
 80021e2:	619a      	str	r2, [r3, #24]
  ep->xfer_count = 0U;
 80021e4:	697b      	ldr	r3, [r7, #20]
 80021e6:	2200      	movs	r2, #0
 80021e8:	621a      	str	r2, [r3, #32]
  ep->is_in = 1U;
 80021ea:	697b      	ldr	r3, [r7, #20]
 80021ec:	2201      	movs	r2, #1
 80021ee:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 80021f0:	7afb      	ldrb	r3, [r7, #11]
 80021f2:	f003 030f 	and.w	r3, r3, #15
 80021f6:	b2da      	uxtb	r2, r3
 80021f8:	697b      	ldr	r3, [r7, #20]
 80021fa:	701a      	strb	r2, [r3, #0]

  if (hpcd->Init.dma_enable == 1U)
 80021fc:	68fb      	ldr	r3, [r7, #12]
 80021fe:	691b      	ldr	r3, [r3, #16]
 8002200:	2b01      	cmp	r3, #1
 8002202:	d102      	bne.n	800220a <HAL_PCD_EP_Transmit+0x5a>
  {
    ep->dma_addr = (uint32_t)pBuf;
 8002204:	687a      	ldr	r2, [r7, #4]
 8002206:	697b      	ldr	r3, [r7, #20]
 8002208:	615a      	str	r2, [r3, #20]
  }

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 800220a:	7afb      	ldrb	r3, [r7, #11]
 800220c:	f003 030f 	and.w	r3, r3, #15
 8002210:	2b00      	cmp	r3, #0
 8002212:	d109      	bne.n	8002228 <HAL_PCD_EP_Transmit+0x78>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8002214:	68fb      	ldr	r3, [r7, #12]
 8002216:	6818      	ldr	r0, [r3, #0]
 8002218:	68fb      	ldr	r3, [r7, #12]
 800221a:	691b      	ldr	r3, [r3, #16]
 800221c:	b2db      	uxtb	r3, r3
 800221e:	461a      	mov	r2, r3
 8002220:	6979      	ldr	r1, [r7, #20]
 8002222:	f003 ff09 	bl	8006038 <USB_EP0StartXfer>
 8002226:	e008      	b.n	800223a <HAL_PCD_EP_Transmit+0x8a>
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8002228:	68fb      	ldr	r3, [r7, #12]
 800222a:	6818      	ldr	r0, [r3, #0]
 800222c:	68fb      	ldr	r3, [r7, #12]
 800222e:	691b      	ldr	r3, [r3, #16]
 8002230:	b2db      	uxtb	r3, r3
 8002232:	461a      	mov	r2, r3
 8002234:	6979      	ldr	r1, [r7, #20]
 8002236:	f003 fcaf 	bl	8005b98 <USB_EPStartXfer>
  }

  return HAL_OK;
 800223a:	2300      	movs	r3, #0
}
 800223c:	4618      	mov	r0, r3
 800223e:	3718      	adds	r7, #24
 8002240:	46bd      	mov	sp, r7
 8002242:	bd80      	pop	{r7, pc}

08002244 <HAL_PCD_EP_SetStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_SetStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8002244:	b580      	push	{r7, lr}
 8002246:	b084      	sub	sp, #16
 8002248:	af00      	add	r7, sp, #0
 800224a:	6078      	str	r0, [r7, #4]
 800224c:	460b      	mov	r3, r1
 800224e:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & EP_ADDR_MSK) > hpcd->Init.dev_endpoints)
 8002250:	78fb      	ldrb	r3, [r7, #3]
 8002252:	f003 020f 	and.w	r2, r3, #15
 8002256:	687b      	ldr	r3, [r7, #4]
 8002258:	685b      	ldr	r3, [r3, #4]
 800225a:	429a      	cmp	r2, r3
 800225c:	d901      	bls.n	8002262 <HAL_PCD_EP_SetStall+0x1e>
  {
    return HAL_ERROR;
 800225e:	2301      	movs	r3, #1
 8002260:	e050      	b.n	8002304 <HAL_PCD_EP_SetStall+0xc0>
  }

  if ((0x80U & ep_addr) == 0x80U)
 8002262:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8002266:	2b00      	cmp	r3, #0
 8002268:	da0f      	bge.n	800228a <HAL_PCD_EP_SetStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800226a:	78fb      	ldrb	r3, [r7, #3]
 800226c:	f003 020f 	and.w	r2, r3, #15
 8002270:	4613      	mov	r3, r2
 8002272:	00db      	lsls	r3, r3, #3
 8002274:	4413      	add	r3, r2
 8002276:	009b      	lsls	r3, r3, #2
 8002278:	3338      	adds	r3, #56	; 0x38
 800227a:	687a      	ldr	r2, [r7, #4]
 800227c:	4413      	add	r3, r2
 800227e:	3304      	adds	r3, #4
 8002280:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8002282:	68fb      	ldr	r3, [r7, #12]
 8002284:	2201      	movs	r2, #1
 8002286:	705a      	strb	r2, [r3, #1]
 8002288:	e00d      	b.n	80022a6 <HAL_PCD_EP_SetStall+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 800228a:	78fa      	ldrb	r2, [r7, #3]
 800228c:	4613      	mov	r3, r2
 800228e:	00db      	lsls	r3, r3, #3
 8002290:	4413      	add	r3, r2
 8002292:	009b      	lsls	r3, r3, #2
 8002294:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8002298:	687a      	ldr	r2, [r7, #4]
 800229a:	4413      	add	r3, r2
 800229c:	3304      	adds	r3, #4
 800229e:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 80022a0:	68fb      	ldr	r3, [r7, #12]
 80022a2:	2200      	movs	r2, #0
 80022a4:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 1U;
 80022a6:	68fb      	ldr	r3, [r7, #12]
 80022a8:	2201      	movs	r2, #1
 80022aa:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 80022ac:	78fb      	ldrb	r3, [r7, #3]
 80022ae:	f003 030f 	and.w	r3, r3, #15
 80022b2:	b2da      	uxtb	r2, r3
 80022b4:	68fb      	ldr	r3, [r7, #12]
 80022b6:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 80022b8:	687b      	ldr	r3, [r7, #4]
 80022ba:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 80022be:	2b01      	cmp	r3, #1
 80022c0:	d101      	bne.n	80022c6 <HAL_PCD_EP_SetStall+0x82>
 80022c2:	2302      	movs	r3, #2
 80022c4:	e01e      	b.n	8002304 <HAL_PCD_EP_SetStall+0xc0>
 80022c6:	687b      	ldr	r3, [r7, #4]
 80022c8:	2201      	movs	r2, #1
 80022ca:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  (void)USB_EPSetStall(hpcd->Instance, ep);
 80022ce:	687b      	ldr	r3, [r7, #4]
 80022d0:	681b      	ldr	r3, [r3, #0]
 80022d2:	68f9      	ldr	r1, [r7, #12]
 80022d4:	4618      	mov	r0, r3
 80022d6:	f004 f94b 	bl	8006570 <USB_EPSetStall>

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 80022da:	78fb      	ldrb	r3, [r7, #3]
 80022dc:	f003 030f 	and.w	r3, r3, #15
 80022e0:	2b00      	cmp	r3, #0
 80022e2:	d10a      	bne.n	80022fa <HAL_PCD_EP_SetStall+0xb6>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable, (uint8_t *)hpcd->Setup);
 80022e4:	687b      	ldr	r3, [r7, #4]
 80022e6:	6818      	ldr	r0, [r3, #0]
 80022e8:	687b      	ldr	r3, [r7, #4]
 80022ea:	691b      	ldr	r3, [r3, #16]
 80022ec:	b2d9      	uxtb	r1, r3
 80022ee:	687b      	ldr	r3, [r7, #4]
 80022f0:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 80022f4:	461a      	mov	r2, r3
 80022f6:	f004 fb3d 	bl	8006974 <USB_EP0_OutStart>
  }

  __HAL_UNLOCK(hpcd);
 80022fa:	687b      	ldr	r3, [r7, #4]
 80022fc:	2200      	movs	r2, #0
 80022fe:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  return HAL_OK;
 8002302:	2300      	movs	r3, #0
}
 8002304:	4618      	mov	r0, r3
 8002306:	3710      	adds	r7, #16
 8002308:	46bd      	mov	sp, r7
 800230a:	bd80      	pop	{r7, pc}

0800230c <HAL_PCD_EP_ClrStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_ClrStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 800230c:	b580      	push	{r7, lr}
 800230e:	b084      	sub	sp, #16
 8002310:	af00      	add	r7, sp, #0
 8002312:	6078      	str	r0, [r7, #4]
 8002314:	460b      	mov	r3, r1
 8002316:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & 0x0FU) > hpcd->Init.dev_endpoints)
 8002318:	78fb      	ldrb	r3, [r7, #3]
 800231a:	f003 020f 	and.w	r2, r3, #15
 800231e:	687b      	ldr	r3, [r7, #4]
 8002320:	685b      	ldr	r3, [r3, #4]
 8002322:	429a      	cmp	r2, r3
 8002324:	d901      	bls.n	800232a <HAL_PCD_EP_ClrStall+0x1e>
  {
    return HAL_ERROR;
 8002326:	2301      	movs	r3, #1
 8002328:	e042      	b.n	80023b0 <HAL_PCD_EP_ClrStall+0xa4>
  }

  if ((0x80U & ep_addr) == 0x80U)
 800232a:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800232e:	2b00      	cmp	r3, #0
 8002330:	da0f      	bge.n	8002352 <HAL_PCD_EP_ClrStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8002332:	78fb      	ldrb	r3, [r7, #3]
 8002334:	f003 020f 	and.w	r2, r3, #15
 8002338:	4613      	mov	r3, r2
 800233a:	00db      	lsls	r3, r3, #3
 800233c:	4413      	add	r3, r2
 800233e:	009b      	lsls	r3, r3, #2
 8002340:	3338      	adds	r3, #56	; 0x38
 8002342:	687a      	ldr	r2, [r7, #4]
 8002344:	4413      	add	r3, r2
 8002346:	3304      	adds	r3, #4
 8002348:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 800234a:	68fb      	ldr	r3, [r7, #12]
 800234c:	2201      	movs	r2, #1
 800234e:	705a      	strb	r2, [r3, #1]
 8002350:	e00f      	b.n	8002372 <HAL_PCD_EP_ClrStall+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8002352:	78fb      	ldrb	r3, [r7, #3]
 8002354:	f003 020f 	and.w	r2, r3, #15
 8002358:	4613      	mov	r3, r2
 800235a:	00db      	lsls	r3, r3, #3
 800235c:	4413      	add	r3, r2
 800235e:	009b      	lsls	r3, r3, #2
 8002360:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8002364:	687a      	ldr	r2, [r7, #4]
 8002366:	4413      	add	r3, r2
 8002368:	3304      	adds	r3, #4
 800236a:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 800236c:	68fb      	ldr	r3, [r7, #12]
 800236e:	2200      	movs	r2, #0
 8002370:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 0U;
 8002372:	68fb      	ldr	r3, [r7, #12]
 8002374:	2200      	movs	r2, #0
 8002376:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8002378:	78fb      	ldrb	r3, [r7, #3]
 800237a:	f003 030f 	and.w	r3, r3, #15
 800237e:	b2da      	uxtb	r2, r3
 8002380:	68fb      	ldr	r3, [r7, #12]
 8002382:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8002384:	687b      	ldr	r3, [r7, #4]
 8002386:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 800238a:	2b01      	cmp	r3, #1
 800238c:	d101      	bne.n	8002392 <HAL_PCD_EP_ClrStall+0x86>
 800238e:	2302      	movs	r3, #2
 8002390:	e00e      	b.n	80023b0 <HAL_PCD_EP_ClrStall+0xa4>
 8002392:	687b      	ldr	r3, [r7, #4]
 8002394:	2201      	movs	r2, #1
 8002396:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc
  (void)USB_EPClearStall(hpcd->Instance, ep);
 800239a:	687b      	ldr	r3, [r7, #4]
 800239c:	681b      	ldr	r3, [r3, #0]
 800239e:	68f9      	ldr	r1, [r7, #12]
 80023a0:	4618      	mov	r0, r3
 80023a2:	f004 f953 	bl	800664c <USB_EPClearStall>
  __HAL_UNLOCK(hpcd);
 80023a6:	687b      	ldr	r3, [r7, #4]
 80023a8:	2200      	movs	r2, #0
 80023aa:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  return HAL_OK;
 80023ae:	2300      	movs	r3, #0
}
 80023b0:	4618      	mov	r0, r3
 80023b2:	3710      	adds	r7, #16
 80023b4:	46bd      	mov	sp, r7
 80023b6:	bd80      	pop	{r7, pc}

080023b8 <HAL_PCD_EP_Abort>:
   * @param  hpcd PCD handle
   * @param  ep_addr endpoint address
   * @retval HAL status
   */
HAL_StatusTypeDef HAL_PCD_EP_Abort(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 80023b8:	b580      	push	{r7, lr}
 80023ba:	b084      	sub	sp, #16
 80023bc:	af00      	add	r7, sp, #0
 80023be:	6078      	str	r0, [r7, #4]
 80023c0:	460b      	mov	r3, r1
 80023c2:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef ret;
  PCD_EPTypeDef *ep;

  if ((0x80U & ep_addr) == 0x80U)
 80023c4:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80023c8:	2b00      	cmp	r3, #0
 80023ca:	da0c      	bge.n	80023e6 <HAL_PCD_EP_Abort+0x2e>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80023cc:	78fb      	ldrb	r3, [r7, #3]
 80023ce:	f003 020f 	and.w	r2, r3, #15
 80023d2:	4613      	mov	r3, r2
 80023d4:	00db      	lsls	r3, r3, #3
 80023d6:	4413      	add	r3, r2
 80023d8:	009b      	lsls	r3, r3, #2
 80023da:	3338      	adds	r3, #56	; 0x38
 80023dc:	687a      	ldr	r2, [r7, #4]
 80023de:	4413      	add	r3, r2
 80023e0:	3304      	adds	r3, #4
 80023e2:	60fb      	str	r3, [r7, #12]
 80023e4:	e00c      	b.n	8002400 <HAL_PCD_EP_Abort+0x48>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 80023e6:	78fb      	ldrb	r3, [r7, #3]
 80023e8:	f003 020f 	and.w	r2, r3, #15
 80023ec:	4613      	mov	r3, r2
 80023ee:	00db      	lsls	r3, r3, #3
 80023f0:	4413      	add	r3, r2
 80023f2:	009b      	lsls	r3, r3, #2
 80023f4:	f503 731e 	add.w	r3, r3, #632	; 0x278
 80023f8:	687a      	ldr	r2, [r7, #4]
 80023fa:	4413      	add	r3, r2
 80023fc:	3304      	adds	r3, #4
 80023fe:	60fb      	str	r3, [r7, #12]
  }

  /* Stop Xfer */
  ret = USB_EPStopXfer(hpcd->Instance, ep);
 8002400:	687b      	ldr	r3, [r7, #4]
 8002402:	681b      	ldr	r3, [r3, #0]
 8002404:	68f9      	ldr	r1, [r7, #12]
 8002406:	4618      	mov	r0, r3
 8002408:	f003 ff72 	bl	80062f0 <USB_EPStopXfer>
 800240c:	4603      	mov	r3, r0
 800240e:	72fb      	strb	r3, [r7, #11]

  return ret;
 8002410:	7afb      	ldrb	r3, [r7, #11]
}
 8002412:	4618      	mov	r0, r3
 8002414:	3710      	adds	r7, #16
 8002416:	46bd      	mov	sp, r7
 8002418:	bd80      	pop	{r7, pc}

0800241a <PCD_WriteEmptyTxFifo>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_WriteEmptyTxFifo(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 800241a:	b580      	push	{r7, lr}
 800241c:	b08a      	sub	sp, #40	; 0x28
 800241e:	af02      	add	r7, sp, #8
 8002420:	6078      	str	r0, [r7, #4]
 8002422:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8002424:	687b      	ldr	r3, [r7, #4]
 8002426:	681b      	ldr	r3, [r3, #0]
 8002428:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800242a:	697b      	ldr	r3, [r7, #20]
 800242c:	613b      	str	r3, [r7, #16]
  USB_OTG_EPTypeDef *ep;
  uint32_t len;
  uint32_t len32b;
  uint32_t fifoemptymsk;

  ep = &hpcd->IN_ep[epnum];
 800242e:	683a      	ldr	r2, [r7, #0]
 8002430:	4613      	mov	r3, r2
 8002432:	00db      	lsls	r3, r3, #3
 8002434:	4413      	add	r3, r2
 8002436:	009b      	lsls	r3, r3, #2
 8002438:	3338      	adds	r3, #56	; 0x38
 800243a:	687a      	ldr	r2, [r7, #4]
 800243c:	4413      	add	r3, r2
 800243e:	3304      	adds	r3, #4
 8002440:	60fb      	str	r3, [r7, #12]

  if (ep->xfer_count > ep->xfer_len)
 8002442:	68fb      	ldr	r3, [r7, #12]
 8002444:	6a1a      	ldr	r2, [r3, #32]
 8002446:	68fb      	ldr	r3, [r7, #12]
 8002448:	699b      	ldr	r3, [r3, #24]
 800244a:	429a      	cmp	r2, r3
 800244c:	d901      	bls.n	8002452 <PCD_WriteEmptyTxFifo+0x38>
  {
    return HAL_ERROR;
 800244e:	2301      	movs	r3, #1
 8002450:	e06c      	b.n	800252c <PCD_WriteEmptyTxFifo+0x112>
  }

  len = ep->xfer_len - ep->xfer_count;
 8002452:	68fb      	ldr	r3, [r7, #12]
 8002454:	699a      	ldr	r2, [r3, #24]
 8002456:	68fb      	ldr	r3, [r7, #12]
 8002458:	6a1b      	ldr	r3, [r3, #32]
 800245a:	1ad3      	subs	r3, r2, r3
 800245c:	61fb      	str	r3, [r7, #28]

  if (len > ep->maxpacket)
 800245e:	68fb      	ldr	r3, [r7, #12]
 8002460:	68db      	ldr	r3, [r3, #12]
 8002462:	69fa      	ldr	r2, [r7, #28]
 8002464:	429a      	cmp	r2, r3
 8002466:	d902      	bls.n	800246e <PCD_WriteEmptyTxFifo+0x54>
  {
    len = ep->maxpacket;
 8002468:	68fb      	ldr	r3, [r7, #12]
 800246a:	68db      	ldr	r3, [r3, #12]
 800246c:	61fb      	str	r3, [r7, #28]
  }

  len32b = (len + 3U) / 4U;
 800246e:	69fb      	ldr	r3, [r7, #28]
 8002470:	3303      	adds	r3, #3
 8002472:	089b      	lsrs	r3, r3, #2
 8002474:	61bb      	str	r3, [r7, #24]

  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 8002476:	e02b      	b.n	80024d0 <PCD_WriteEmptyTxFifo+0xb6>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
  {
    /* Write the FIFO */
    len = ep->xfer_len - ep->xfer_count;
 8002478:	68fb      	ldr	r3, [r7, #12]
 800247a:	699a      	ldr	r2, [r3, #24]
 800247c:	68fb      	ldr	r3, [r7, #12]
 800247e:	6a1b      	ldr	r3, [r3, #32]
 8002480:	1ad3      	subs	r3, r2, r3
 8002482:	61fb      	str	r3, [r7, #28]

    if (len > ep->maxpacket)
 8002484:	68fb      	ldr	r3, [r7, #12]
 8002486:	68db      	ldr	r3, [r3, #12]
 8002488:	69fa      	ldr	r2, [r7, #28]
 800248a:	429a      	cmp	r2, r3
 800248c:	d902      	bls.n	8002494 <PCD_WriteEmptyTxFifo+0x7a>
    {
      len = ep->maxpacket;
 800248e:	68fb      	ldr	r3, [r7, #12]
 8002490:	68db      	ldr	r3, [r3, #12]
 8002492:	61fb      	str	r3, [r7, #28]
    }
    len32b = (len + 3U) / 4U;
 8002494:	69fb      	ldr	r3, [r7, #28]
 8002496:	3303      	adds	r3, #3
 8002498:	089b      	lsrs	r3, r3, #2
 800249a:	61bb      	str	r3, [r7, #24]

    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 800249c:	68fb      	ldr	r3, [r7, #12]
 800249e:	6919      	ldr	r1, [r3, #16]
 80024a0:	683b      	ldr	r3, [r7, #0]
 80024a2:	b2da      	uxtb	r2, r3
 80024a4:	69fb      	ldr	r3, [r7, #28]
 80024a6:	b298      	uxth	r0, r3
                          (uint8_t)hpcd->Init.dma_enable);
 80024a8:	687b      	ldr	r3, [r7, #4]
 80024aa:	691b      	ldr	r3, [r3, #16]
    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 80024ac:	b2db      	uxtb	r3, r3
 80024ae:	9300      	str	r3, [sp, #0]
 80024b0:	4603      	mov	r3, r0
 80024b2:	6978      	ldr	r0, [r7, #20]
 80024b4:	f003 ffc6 	bl	8006444 <USB_WritePacket>

    ep->xfer_buff  += len;
 80024b8:	68fb      	ldr	r3, [r7, #12]
 80024ba:	691a      	ldr	r2, [r3, #16]
 80024bc:	69fb      	ldr	r3, [r7, #28]
 80024be:	441a      	add	r2, r3
 80024c0:	68fb      	ldr	r3, [r7, #12]
 80024c2:	611a      	str	r2, [r3, #16]
    ep->xfer_count += len;
 80024c4:	68fb      	ldr	r3, [r7, #12]
 80024c6:	6a1a      	ldr	r2, [r3, #32]
 80024c8:	69fb      	ldr	r3, [r7, #28]
 80024ca:	441a      	add	r2, r3
 80024cc:	68fb      	ldr	r3, [r7, #12]
 80024ce:	621a      	str	r2, [r3, #32]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 80024d0:	683b      	ldr	r3, [r7, #0]
 80024d2:	015a      	lsls	r2, r3, #5
 80024d4:	693b      	ldr	r3, [r7, #16]
 80024d6:	4413      	add	r3, r2
 80024d8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80024dc:	699b      	ldr	r3, [r3, #24]
 80024de:	b29b      	uxth	r3, r3
 80024e0:	69ba      	ldr	r2, [r7, #24]
 80024e2:	429a      	cmp	r2, r3
 80024e4:	d809      	bhi.n	80024fa <PCD_WriteEmptyTxFifo+0xe0>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 80024e6:	68fb      	ldr	r3, [r7, #12]
 80024e8:	6a1a      	ldr	r2, [r3, #32]
 80024ea:	68fb      	ldr	r3, [r7, #12]
 80024ec:	699b      	ldr	r3, [r3, #24]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 80024ee:	429a      	cmp	r2, r3
 80024f0:	d203      	bcs.n	80024fa <PCD_WriteEmptyTxFifo+0xe0>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 80024f2:	68fb      	ldr	r3, [r7, #12]
 80024f4:	699b      	ldr	r3, [r3, #24]
 80024f6:	2b00      	cmp	r3, #0
 80024f8:	d1be      	bne.n	8002478 <PCD_WriteEmptyTxFifo+0x5e>
  }

  if (ep->xfer_len <= ep->xfer_count)
 80024fa:	68fb      	ldr	r3, [r7, #12]
 80024fc:	699a      	ldr	r2, [r3, #24]
 80024fe:	68fb      	ldr	r3, [r7, #12]
 8002500:	6a1b      	ldr	r3, [r3, #32]
 8002502:	429a      	cmp	r2, r3
 8002504:	d811      	bhi.n	800252a <PCD_WriteEmptyTxFifo+0x110>
  {
    fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 8002506:	683b      	ldr	r3, [r7, #0]
 8002508:	f003 030f 	and.w	r3, r3, #15
 800250c:	2201      	movs	r2, #1
 800250e:	fa02 f303 	lsl.w	r3, r2, r3
 8002512:	60bb      	str	r3, [r7, #8]
    USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 8002514:	693b      	ldr	r3, [r7, #16]
 8002516:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800251a:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800251c:	68bb      	ldr	r3, [r7, #8]
 800251e:	43db      	mvns	r3, r3
 8002520:	6939      	ldr	r1, [r7, #16]
 8002522:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8002526:	4013      	ands	r3, r2
 8002528:	634b      	str	r3, [r1, #52]	; 0x34
  }

  return HAL_OK;
 800252a:	2300      	movs	r3, #0
}
 800252c:	4618      	mov	r0, r3
 800252e:	3720      	adds	r7, #32
 8002530:	46bd      	mov	sp, r7
 8002532:	bd80      	pop	{r7, pc}

08002534 <PCD_EP_OutXfrComplete_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutXfrComplete_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 8002534:	b580      	push	{r7, lr}
 8002536:	b088      	sub	sp, #32
 8002538:	af00      	add	r7, sp, #0
 800253a:	6078      	str	r0, [r7, #4]
 800253c:	6039      	str	r1, [r7, #0]
  USB_OTG_EPTypeDef *ep;
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 800253e:	687b      	ldr	r3, [r7, #4]
 8002540:	681b      	ldr	r3, [r3, #0]
 8002542:	61fb      	str	r3, [r7, #28]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8002544:	69fb      	ldr	r3, [r7, #28]
 8002546:	61bb      	str	r3, [r7, #24]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 8002548:	69fb      	ldr	r3, [r7, #28]
 800254a:	333c      	adds	r3, #60	; 0x3c
 800254c:	3304      	adds	r3, #4
 800254e:	681b      	ldr	r3, [r3, #0]
 8002550:	617b      	str	r3, [r7, #20]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 8002552:	683b      	ldr	r3, [r7, #0]
 8002554:	015a      	lsls	r2, r3, #5
 8002556:	69bb      	ldr	r3, [r7, #24]
 8002558:	4413      	add	r3, r2
 800255a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800255e:	689b      	ldr	r3, [r3, #8]
 8002560:	613b      	str	r3, [r7, #16]

  if (hpcd->Init.dma_enable == 1U)
 8002562:	687b      	ldr	r3, [r7, #4]
 8002564:	691b      	ldr	r3, [r3, #16]
 8002566:	2b01      	cmp	r3, #1
 8002568:	d17b      	bne.n	8002662 <PCD_EP_OutXfrComplete_int+0x12e>
  {
    if ((DoepintReg & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP) /* Class C */
 800256a:	693b      	ldr	r3, [r7, #16]
 800256c:	f003 0308 	and.w	r3, r3, #8
 8002570:	2b00      	cmp	r3, #0
 8002572:	d015      	beq.n	80025a0 <PCD_EP_OutXfrComplete_int+0x6c>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8002574:	697b      	ldr	r3, [r7, #20]
 8002576:	4a61      	ldr	r2, [pc, #388]	; (80026fc <PCD_EP_OutXfrComplete_int+0x1c8>)
 8002578:	4293      	cmp	r3, r2
 800257a:	f240 80b9 	bls.w	80026f0 <PCD_EP_OutXfrComplete_int+0x1bc>
          ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 800257e:	693b      	ldr	r3, [r7, #16]
 8002580:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8002584:	2b00      	cmp	r3, #0
 8002586:	f000 80b3 	beq.w	80026f0 <PCD_EP_OutXfrComplete_int+0x1bc>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 800258a:	683b      	ldr	r3, [r7, #0]
 800258c:	015a      	lsls	r2, r3, #5
 800258e:	69bb      	ldr	r3, [r7, #24]
 8002590:	4413      	add	r3, r2
 8002592:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002596:	461a      	mov	r2, r3
 8002598:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800259c:	6093      	str	r3, [r2, #8]
 800259e:	e0a7      	b.n	80026f0 <PCD_EP_OutXfrComplete_int+0x1bc>
      }
    }
    else if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR) /* Class E */
 80025a0:	693b      	ldr	r3, [r7, #16]
 80025a2:	f003 0320 	and.w	r3, r3, #32
 80025a6:	2b00      	cmp	r3, #0
 80025a8:	d009      	beq.n	80025be <PCD_EP_OutXfrComplete_int+0x8a>
    {
      CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 80025aa:	683b      	ldr	r3, [r7, #0]
 80025ac:	015a      	lsls	r2, r3, #5
 80025ae:	69bb      	ldr	r3, [r7, #24]
 80025b0:	4413      	add	r3, r2
 80025b2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80025b6:	461a      	mov	r2, r3
 80025b8:	2320      	movs	r3, #32
 80025ba:	6093      	str	r3, [r2, #8]
 80025bc:	e098      	b.n	80026f0 <PCD_EP_OutXfrComplete_int+0x1bc>
    }
    else if ((DoepintReg & (USB_OTG_DOEPINT_STUP | USB_OTG_DOEPINT_OTEPSPR)) == 0U)
 80025be:	693b      	ldr	r3, [r7, #16]
 80025c0:	f003 0328 	and.w	r3, r3, #40	; 0x28
 80025c4:	2b00      	cmp	r3, #0
 80025c6:	f040 8093 	bne.w	80026f0 <PCD_EP_OutXfrComplete_int+0x1bc>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 80025ca:	697b      	ldr	r3, [r7, #20]
 80025cc:	4a4b      	ldr	r2, [pc, #300]	; (80026fc <PCD_EP_OutXfrComplete_int+0x1c8>)
 80025ce:	4293      	cmp	r3, r2
 80025d0:	d90f      	bls.n	80025f2 <PCD_EP_OutXfrComplete_int+0xbe>
          ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 80025d2:	693b      	ldr	r3, [r7, #16]
 80025d4:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 80025d8:	2b00      	cmp	r3, #0
 80025da:	d00a      	beq.n	80025f2 <PCD_EP_OutXfrComplete_int+0xbe>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 80025dc:	683b      	ldr	r3, [r7, #0]
 80025de:	015a      	lsls	r2, r3, #5
 80025e0:	69bb      	ldr	r3, [r7, #24]
 80025e2:	4413      	add	r3, r2
 80025e4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80025e8:	461a      	mov	r2, r3
 80025ea:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80025ee:	6093      	str	r3, [r2, #8]
 80025f0:	e07e      	b.n	80026f0 <PCD_EP_OutXfrComplete_int+0x1bc>
      }
      else
      {
        ep = &hpcd->OUT_ep[epnum];
 80025f2:	683a      	ldr	r2, [r7, #0]
 80025f4:	4613      	mov	r3, r2
 80025f6:	00db      	lsls	r3, r3, #3
 80025f8:	4413      	add	r3, r2
 80025fa:	009b      	lsls	r3, r3, #2
 80025fc:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8002600:	687a      	ldr	r2, [r7, #4]
 8002602:	4413      	add	r3, r2
 8002604:	3304      	adds	r3, #4
 8002606:	60fb      	str	r3, [r7, #12]

        /* out data packet received over EP */
        ep->xfer_count = ep->xfer_size - (USBx_OUTEP(epnum)->DOEPTSIZ & USB_OTG_DOEPTSIZ_XFRSIZ);
 8002608:	68fb      	ldr	r3, [r7, #12]
 800260a:	69da      	ldr	r2, [r3, #28]
 800260c:	683b      	ldr	r3, [r7, #0]
 800260e:	0159      	lsls	r1, r3, #5
 8002610:	69bb      	ldr	r3, [r7, #24]
 8002612:	440b      	add	r3, r1
 8002614:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002618:	691b      	ldr	r3, [r3, #16]
 800261a:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800261e:	1ad2      	subs	r2, r2, r3
 8002620:	68fb      	ldr	r3, [r7, #12]
 8002622:	621a      	str	r2, [r3, #32]

        if (epnum == 0U)
 8002624:	683b      	ldr	r3, [r7, #0]
 8002626:	2b00      	cmp	r3, #0
 8002628:	d114      	bne.n	8002654 <PCD_EP_OutXfrComplete_int+0x120>
        {
          if (ep->xfer_len == 0U)
 800262a:	68fb      	ldr	r3, [r7, #12]
 800262c:	699b      	ldr	r3, [r3, #24]
 800262e:	2b00      	cmp	r3, #0
 8002630:	d109      	bne.n	8002646 <PCD_EP_OutXfrComplete_int+0x112>
          {
            /* this is ZLP, so prepare EP0 for next setup */
            (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 8002632:	687b      	ldr	r3, [r7, #4]
 8002634:	6818      	ldr	r0, [r3, #0]
 8002636:	687b      	ldr	r3, [r7, #4]
 8002638:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 800263c:	461a      	mov	r2, r3
 800263e:	2101      	movs	r1, #1
 8002640:	f004 f998 	bl	8006974 <USB_EP0_OutStart>
 8002644:	e006      	b.n	8002654 <PCD_EP_OutXfrComplete_int+0x120>
          }
          else
          {
            ep->xfer_buff += ep->xfer_count;
 8002646:	68fb      	ldr	r3, [r7, #12]
 8002648:	691a      	ldr	r2, [r3, #16]
 800264a:	68fb      	ldr	r3, [r7, #12]
 800264c:	6a1b      	ldr	r3, [r3, #32]
 800264e:	441a      	add	r2, r3
 8002650:	68fb      	ldr	r3, [r7, #12]
 8002652:	611a      	str	r2, [r3, #16]
        }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 8002654:	683b      	ldr	r3, [r7, #0]
 8002656:	b2db      	uxtb	r3, r3
 8002658:	4619      	mov	r1, r3
 800265a:	6878      	ldr	r0, [r7, #4]
 800265c:	f006 fccc 	bl	8008ff8 <HAL_PCD_DataOutStageCallback>
 8002660:	e046      	b.n	80026f0 <PCD_EP_OutXfrComplete_int+0x1bc>
      /* ... */
    }
  }
  else
  {
    if (gSNPSiD == USB_OTG_CORE_ID_310A)
 8002662:	697b      	ldr	r3, [r7, #20]
 8002664:	4a26      	ldr	r2, [pc, #152]	; (8002700 <PCD_EP_OutXfrComplete_int+0x1cc>)
 8002666:	4293      	cmp	r3, r2
 8002668:	d124      	bne.n	80026b4 <PCD_EP_OutXfrComplete_int+0x180>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX)
 800266a:	693b      	ldr	r3, [r7, #16]
 800266c:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8002670:	2b00      	cmp	r3, #0
 8002672:	d00a      	beq.n	800268a <PCD_EP_OutXfrComplete_int+0x156>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8002674:	683b      	ldr	r3, [r7, #0]
 8002676:	015a      	lsls	r2, r3, #5
 8002678:	69bb      	ldr	r3, [r7, #24]
 800267a:	4413      	add	r3, r2
 800267c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002680:	461a      	mov	r2, r3
 8002682:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8002686:	6093      	str	r3, [r2, #8]
 8002688:	e032      	b.n	80026f0 <PCD_EP_OutXfrComplete_int+0x1bc>
      }
      else
      {
        if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 800268a:	693b      	ldr	r3, [r7, #16]
 800268c:	f003 0320 	and.w	r3, r3, #32
 8002690:	2b00      	cmp	r3, #0
 8002692:	d008      	beq.n	80026a6 <PCD_EP_OutXfrComplete_int+0x172>
        {
          CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 8002694:	683b      	ldr	r3, [r7, #0]
 8002696:	015a      	lsls	r2, r3, #5
 8002698:	69bb      	ldr	r3, [r7, #24]
 800269a:	4413      	add	r3, r2
 800269c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80026a0:	461a      	mov	r2, r3
 80026a2:	2320      	movs	r3, #32
 80026a4:	6093      	str	r3, [r2, #8]
        }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 80026a6:	683b      	ldr	r3, [r7, #0]
 80026a8:	b2db      	uxtb	r3, r3
 80026aa:	4619      	mov	r1, r3
 80026ac:	6878      	ldr	r0, [r7, #4]
 80026ae:	f006 fca3 	bl	8008ff8 <HAL_PCD_DataOutStageCallback>
 80026b2:	e01d      	b.n	80026f0 <PCD_EP_OutXfrComplete_int+0x1bc>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
    }
    else
    {
      if ((epnum == 0U) && (hpcd->OUT_ep[epnum].xfer_len == 0U))
 80026b4:	683b      	ldr	r3, [r7, #0]
 80026b6:	2b00      	cmp	r3, #0
 80026b8:	d114      	bne.n	80026e4 <PCD_EP_OutXfrComplete_int+0x1b0>
 80026ba:	6879      	ldr	r1, [r7, #4]
 80026bc:	683a      	ldr	r2, [r7, #0]
 80026be:	4613      	mov	r3, r2
 80026c0:	00db      	lsls	r3, r3, #3
 80026c2:	4413      	add	r3, r2
 80026c4:	009b      	lsls	r3, r3, #2
 80026c6:	440b      	add	r3, r1
 80026c8:	f503 7325 	add.w	r3, r3, #660	; 0x294
 80026cc:	681b      	ldr	r3, [r3, #0]
 80026ce:	2b00      	cmp	r3, #0
 80026d0:	d108      	bne.n	80026e4 <PCD_EP_OutXfrComplete_int+0x1b0>
      {
        /* this is ZLP, so prepare EP0 for next setup */
        (void)USB_EP0_OutStart(hpcd->Instance, 0U, (uint8_t *)hpcd->Setup);
 80026d2:	687b      	ldr	r3, [r7, #4]
 80026d4:	6818      	ldr	r0, [r3, #0]
 80026d6:	687b      	ldr	r3, [r7, #4]
 80026d8:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 80026dc:	461a      	mov	r2, r3
 80026de:	2100      	movs	r1, #0
 80026e0:	f004 f948 	bl	8006974 <USB_EP0_OutStart>
      }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
      HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 80026e4:	683b      	ldr	r3, [r7, #0]
 80026e6:	b2db      	uxtb	r3, r3
 80026e8:	4619      	mov	r1, r3
 80026ea:	6878      	ldr	r0, [r7, #4]
 80026ec:	f006 fc84 	bl	8008ff8 <HAL_PCD_DataOutStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
    }
  }

  return HAL_OK;
 80026f0:	2300      	movs	r3, #0
}
 80026f2:	4618      	mov	r0, r3
 80026f4:	3720      	adds	r7, #32
 80026f6:	46bd      	mov	sp, r7
 80026f8:	bd80      	pop	{r7, pc}
 80026fa:	bf00      	nop
 80026fc:	4f54300a 	.word	0x4f54300a
 8002700:	4f54310a 	.word	0x4f54310a

08002704 <PCD_EP_OutSetupPacket_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutSetupPacket_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 8002704:	b580      	push	{r7, lr}
 8002706:	b086      	sub	sp, #24
 8002708:	af00      	add	r7, sp, #0
 800270a:	6078      	str	r0, [r7, #4]
 800270c:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 800270e:	687b      	ldr	r3, [r7, #4]
 8002710:	681b      	ldr	r3, [r3, #0]
 8002712:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8002714:	697b      	ldr	r3, [r7, #20]
 8002716:	613b      	str	r3, [r7, #16]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 8002718:	697b      	ldr	r3, [r7, #20]
 800271a:	333c      	adds	r3, #60	; 0x3c
 800271c:	3304      	adds	r3, #4
 800271e:	681b      	ldr	r3, [r3, #0]
 8002720:	60fb      	str	r3, [r7, #12]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 8002722:	683b      	ldr	r3, [r7, #0]
 8002724:	015a      	lsls	r2, r3, #5
 8002726:	693b      	ldr	r3, [r7, #16]
 8002728:	4413      	add	r3, r2
 800272a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800272e:	689b      	ldr	r3, [r3, #8]
 8002730:	60bb      	str	r3, [r7, #8]

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8002732:	68fb      	ldr	r3, [r7, #12]
 8002734:	4a15      	ldr	r2, [pc, #84]	; (800278c <PCD_EP_OutSetupPacket_int+0x88>)
 8002736:	4293      	cmp	r3, r2
 8002738:	d90e      	bls.n	8002758 <PCD_EP_OutSetupPacket_int+0x54>
      ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 800273a:	68bb      	ldr	r3, [r7, #8]
 800273c:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8002740:	2b00      	cmp	r3, #0
 8002742:	d009      	beq.n	8002758 <PCD_EP_OutSetupPacket_int+0x54>
  {
    CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8002744:	683b      	ldr	r3, [r7, #0]
 8002746:	015a      	lsls	r2, r3, #5
 8002748:	693b      	ldr	r3, [r7, #16]
 800274a:	4413      	add	r3, r2
 800274c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002750:	461a      	mov	r2, r3
 8002752:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8002756:	6093      	str	r3, [r2, #8]

  /* Inform the upper layer that a setup packet is available */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
  hpcd->SetupStageCallback(hpcd);
#else
  HAL_PCD_SetupStageCallback(hpcd);
 8002758:	6878      	ldr	r0, [r7, #4]
 800275a:	f006 fc3b 	bl	8008fd4 <HAL_PCD_SetupStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) && (hpcd->Init.dma_enable == 1U))
 800275e:	68fb      	ldr	r3, [r7, #12]
 8002760:	4a0a      	ldr	r2, [pc, #40]	; (800278c <PCD_EP_OutSetupPacket_int+0x88>)
 8002762:	4293      	cmp	r3, r2
 8002764:	d90c      	bls.n	8002780 <PCD_EP_OutSetupPacket_int+0x7c>
 8002766:	687b      	ldr	r3, [r7, #4]
 8002768:	691b      	ldr	r3, [r3, #16]
 800276a:	2b01      	cmp	r3, #1
 800276c:	d108      	bne.n	8002780 <PCD_EP_OutSetupPacket_int+0x7c>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 800276e:	687b      	ldr	r3, [r7, #4]
 8002770:	6818      	ldr	r0, [r3, #0]
 8002772:	687b      	ldr	r3, [r7, #4]
 8002774:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 8002778:	461a      	mov	r2, r3
 800277a:	2101      	movs	r1, #1
 800277c:	f004 f8fa 	bl	8006974 <USB_EP0_OutStart>
  }

  return HAL_OK;
 8002780:	2300      	movs	r3, #0
}
 8002782:	4618      	mov	r0, r3
 8002784:	3718      	adds	r7, #24
 8002786:	46bd      	mov	sp, r7
 8002788:	bd80      	pop	{r7, pc}
 800278a:	bf00      	nop
 800278c:	4f54300a 	.word	0x4f54300a

08002790 <HAL_PCDEx_SetTxFiFo>:
  * @param  fifo The number of Tx fifo
  * @param  size Fifo size
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetTxFiFo(PCD_HandleTypeDef *hpcd, uint8_t fifo, uint16_t size)
{
 8002790:	b480      	push	{r7}
 8002792:	b085      	sub	sp, #20
 8002794:	af00      	add	r7, sp, #0
 8002796:	6078      	str	r0, [r7, #4]
 8002798:	460b      	mov	r3, r1
 800279a:	70fb      	strb	r3, [r7, #3]
 800279c:	4613      	mov	r3, r2
 800279e:	803b      	strh	r3, [r7, #0]
         --> Txn should be configured with the minimum space of 16 words
     The FIFO is used optimally when used TxFIFOs are allocated in the top
         of the FIFO.Ex: use EP1 and EP2 as IN instead of EP1 and EP3 as IN ones.
     When DMA is used 3n * FIFO locations should be reserved for internal DMA registers */

  Tx_Offset = hpcd->Instance->GRXFSIZ;
 80027a0:	687b      	ldr	r3, [r7, #4]
 80027a2:	681b      	ldr	r3, [r3, #0]
 80027a4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80027a6:	60bb      	str	r3, [r7, #8]

  if (fifo == 0U)
 80027a8:	78fb      	ldrb	r3, [r7, #3]
 80027aa:	2b00      	cmp	r3, #0
 80027ac:	d107      	bne.n	80027be <HAL_PCDEx_SetTxFiFo+0x2e>
  {
    hpcd->Instance->DIEPTXF0_HNPTXFSIZ = ((uint32_t)size << 16) | Tx_Offset;
 80027ae:	883b      	ldrh	r3, [r7, #0]
 80027b0:	0419      	lsls	r1, r3, #16
 80027b2:	687b      	ldr	r3, [r7, #4]
 80027b4:	681b      	ldr	r3, [r3, #0]
 80027b6:	68ba      	ldr	r2, [r7, #8]
 80027b8:	430a      	orrs	r2, r1
 80027ba:	629a      	str	r2, [r3, #40]	; 0x28
 80027bc:	e028      	b.n	8002810 <HAL_PCDEx_SetTxFiFo+0x80>
  }
  else
  {
    Tx_Offset += (hpcd->Instance->DIEPTXF0_HNPTXFSIZ) >> 16;
 80027be:	687b      	ldr	r3, [r7, #4]
 80027c0:	681b      	ldr	r3, [r3, #0]
 80027c2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80027c4:	0c1b      	lsrs	r3, r3, #16
 80027c6:	68ba      	ldr	r2, [r7, #8]
 80027c8:	4413      	add	r3, r2
 80027ca:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 80027cc:	2300      	movs	r3, #0
 80027ce:	73fb      	strb	r3, [r7, #15]
 80027d0:	e00d      	b.n	80027ee <HAL_PCDEx_SetTxFiFo+0x5e>
    {
      Tx_Offset += (hpcd->Instance->DIEPTXF[i] >> 16);
 80027d2:	687b      	ldr	r3, [r7, #4]
 80027d4:	681a      	ldr	r2, [r3, #0]
 80027d6:	7bfb      	ldrb	r3, [r7, #15]
 80027d8:	3340      	adds	r3, #64	; 0x40
 80027da:	009b      	lsls	r3, r3, #2
 80027dc:	4413      	add	r3, r2
 80027de:	685b      	ldr	r3, [r3, #4]
 80027e0:	0c1b      	lsrs	r3, r3, #16
 80027e2:	68ba      	ldr	r2, [r7, #8]
 80027e4:	4413      	add	r3, r2
 80027e6:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 80027e8:	7bfb      	ldrb	r3, [r7, #15]
 80027ea:	3301      	adds	r3, #1
 80027ec:	73fb      	strb	r3, [r7, #15]
 80027ee:	7bfa      	ldrb	r2, [r7, #15]
 80027f0:	78fb      	ldrb	r3, [r7, #3]
 80027f2:	3b01      	subs	r3, #1
 80027f4:	429a      	cmp	r2, r3
 80027f6:	d3ec      	bcc.n	80027d2 <HAL_PCDEx_SetTxFiFo+0x42>
    }

    /* Multiply Tx_Size by 2 to get higher performance */
    hpcd->Instance->DIEPTXF[fifo - 1U] = ((uint32_t)size << 16) | Tx_Offset;
 80027f8:	883b      	ldrh	r3, [r7, #0]
 80027fa:	0418      	lsls	r0, r3, #16
 80027fc:	687b      	ldr	r3, [r7, #4]
 80027fe:	6819      	ldr	r1, [r3, #0]
 8002800:	78fb      	ldrb	r3, [r7, #3]
 8002802:	3b01      	subs	r3, #1
 8002804:	68ba      	ldr	r2, [r7, #8]
 8002806:	4302      	orrs	r2, r0
 8002808:	3340      	adds	r3, #64	; 0x40
 800280a:	009b      	lsls	r3, r3, #2
 800280c:	440b      	add	r3, r1
 800280e:	605a      	str	r2, [r3, #4]
  }

  return HAL_OK;
 8002810:	2300      	movs	r3, #0
}
 8002812:	4618      	mov	r0, r3
 8002814:	3714      	adds	r7, #20
 8002816:	46bd      	mov	sp, r7
 8002818:	f85d 7b04 	ldr.w	r7, [sp], #4
 800281c:	4770      	bx	lr

0800281e <HAL_PCDEx_SetRxFiFo>:
  * @param  hpcd PCD handle
  * @param  size Size of Rx fifo
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetRxFiFo(PCD_HandleTypeDef *hpcd, uint16_t size)
{
 800281e:	b480      	push	{r7}
 8002820:	b083      	sub	sp, #12
 8002822:	af00      	add	r7, sp, #0
 8002824:	6078      	str	r0, [r7, #4]
 8002826:	460b      	mov	r3, r1
 8002828:	807b      	strh	r3, [r7, #2]
  hpcd->Instance->GRXFSIZ = size;
 800282a:	687b      	ldr	r3, [r7, #4]
 800282c:	681b      	ldr	r3, [r3, #0]
 800282e:	887a      	ldrh	r2, [r7, #2]
 8002830:	625a      	str	r2, [r3, #36]	; 0x24

  return HAL_OK;
 8002832:	2300      	movs	r3, #0
}
 8002834:	4618      	mov	r0, r3
 8002836:	370c      	adds	r7, #12
 8002838:	46bd      	mov	sp, r7
 800283a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800283e:	4770      	bx	lr

08002840 <HAL_PCDEx_ActivateLPM>:
  * @brief  Activate LPM feature.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_ActivateLPM(PCD_HandleTypeDef *hpcd)
{
 8002840:	b480      	push	{r7}
 8002842:	b085      	sub	sp, #20
 8002844:	af00      	add	r7, sp, #0
 8002846:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8002848:	687b      	ldr	r3, [r7, #4]
 800284a:	681b      	ldr	r3, [r3, #0]
 800284c:	60fb      	str	r3, [r7, #12]

  hpcd->lpm_active = 1U;
 800284e:	687b      	ldr	r3, [r7, #4]
 8002850:	2201      	movs	r2, #1
 8002852:	f8c3 2500 	str.w	r2, [r3, #1280]	; 0x500
  hpcd->LPM_State = LPM_L0;
 8002856:	687b      	ldr	r3, [r7, #4]
 8002858:	2200      	movs	r2, #0
 800285a:	f883 24f4 	strb.w	r2, [r3, #1268]	; 0x4f4
  USBx->GINTMSK |= USB_OTG_GINTMSK_LPMINTM;
 800285e:	68fb      	ldr	r3, [r7, #12]
 8002860:	699b      	ldr	r3, [r3, #24]
 8002862:	f043 6200 	orr.w	r2, r3, #134217728	; 0x8000000
 8002866:	68fb      	ldr	r3, [r7, #12]
 8002868:	619a      	str	r2, [r3, #24]
  USBx->GLPMCFG |= (USB_OTG_GLPMCFG_LPMEN | USB_OTG_GLPMCFG_LPMACK | USB_OTG_GLPMCFG_ENBESL);
 800286a:	68fb      	ldr	r3, [r7, #12]
 800286c:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800286e:	4b05      	ldr	r3, [pc, #20]	; (8002884 <HAL_PCDEx_ActivateLPM+0x44>)
 8002870:	4313      	orrs	r3, r2
 8002872:	68fa      	ldr	r2, [r7, #12]
 8002874:	6553      	str	r3, [r2, #84]	; 0x54

  return HAL_OK;
 8002876:	2300      	movs	r3, #0
}
 8002878:	4618      	mov	r0, r3
 800287a:	3714      	adds	r7, #20
 800287c:	46bd      	mov	sp, r7
 800287e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002882:	4770      	bx	lr
 8002884:	10000003 	.word	0x10000003

08002888 <HAL_PCDEx_LPM_Callback>:
  * @param  hpcd PCD handle
  * @param  msg LPM message
  * @retval HAL status
  */
__weak void HAL_PCDEx_LPM_Callback(PCD_HandleTypeDef *hpcd, PCD_LPM_MsgTypeDef msg)
{
 8002888:	b480      	push	{r7}
 800288a:	b083      	sub	sp, #12
 800288c:	af00      	add	r7, sp, #0
 800288e:	6078      	str	r0, [r7, #4]
 8002890:	460b      	mov	r3, r1
 8002892:	70fb      	strb	r3, [r7, #3]
  UNUSED(msg);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_PCDEx_LPM_Callback could be implemented in the user file
   */
}
 8002894:	bf00      	nop
 8002896:	370c      	adds	r7, #12
 8002898:	46bd      	mov	sp, r7
 800289a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800289e:	4770      	bx	lr

080028a0 <HAL_PWREx_ConfigSupply>:
  *         PWR_SMPS_2V5_SUPPLIES_EXT are used only for lines that supports SMPS
  *         regulator.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_PWREx_ConfigSupply (uint32_t SupplySource)
{
 80028a0:	b580      	push	{r7, lr}
 80028a2:	b084      	sub	sp, #16
 80028a4:	af00      	add	r7, sp, #0
 80028a6:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param (IS_PWR_SUPPLY (SupplySource));

  /* Check if supply source was configured */
#if defined (PWR_FLAG_SCUEN)
  if (__HAL_PWR_GET_FLAG (PWR_FLAG_SCUEN) == 0U)
 80028a8:	4b19      	ldr	r3, [pc, #100]	; (8002910 <HAL_PWREx_ConfigSupply+0x70>)
 80028aa:	68db      	ldr	r3, [r3, #12]
 80028ac:	f003 0304 	and.w	r3, r3, #4
 80028b0:	2b04      	cmp	r3, #4
 80028b2:	d00a      	beq.n	80028ca <HAL_PWREx_ConfigSupply+0x2a>
#else
  if ((PWR->CR3 & (PWR_CR3_SMPSEN | PWR_CR3_LDOEN | PWR_CR3_BYPASS)) != (PWR_CR3_SMPSEN | PWR_CR3_LDOEN))
#endif /* defined (PWR_FLAG_SCUEN) */
  {
    /* Check supply configuration */
    if ((PWR->CR3 & PWR_SUPPLY_CONFIG_MASK) != SupplySource)
 80028b4:	4b16      	ldr	r3, [pc, #88]	; (8002910 <HAL_PWREx_ConfigSupply+0x70>)
 80028b6:	68db      	ldr	r3, [r3, #12]
 80028b8:	f003 0307 	and.w	r3, r3, #7
 80028bc:	687a      	ldr	r2, [r7, #4]
 80028be:	429a      	cmp	r2, r3
 80028c0:	d001      	beq.n	80028c6 <HAL_PWREx_ConfigSupply+0x26>
    {
      /* Supply configuration update locked, can't apply a new supply config */
      return HAL_ERROR;
 80028c2:	2301      	movs	r3, #1
 80028c4:	e01f      	b.n	8002906 <HAL_PWREx_ConfigSupply+0x66>
    else
    {
      /* Supply configuration update locked, but new supply configuration
         matches with old supply configuration : nothing to do
      */
      return HAL_OK;
 80028c6:	2300      	movs	r3, #0
 80028c8:	e01d      	b.n	8002906 <HAL_PWREx_ConfigSupply+0x66>
    }
  }

  /* Set the power supply configuration */
  MODIFY_REG (PWR->CR3, PWR_SUPPLY_CONFIG_MASK, SupplySource);
 80028ca:	4b11      	ldr	r3, [pc, #68]	; (8002910 <HAL_PWREx_ConfigSupply+0x70>)
 80028cc:	68db      	ldr	r3, [r3, #12]
 80028ce:	f023 0207 	bic.w	r2, r3, #7
 80028d2:	490f      	ldr	r1, [pc, #60]	; (8002910 <HAL_PWREx_ConfigSupply+0x70>)
 80028d4:	687b      	ldr	r3, [r7, #4]
 80028d6:	4313      	orrs	r3, r2
 80028d8:	60cb      	str	r3, [r1, #12]

  /* Get tick */
  tickstart = HAL_GetTick ();
 80028da:	f7fe f9f7 	bl	8000ccc <HAL_GetTick>
 80028de:	60f8      	str	r0, [r7, #12]

  /* Wait till voltage level flag is set */
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 80028e0:	e009      	b.n	80028f6 <HAL_PWREx_ConfigSupply+0x56>
  {
    if ((HAL_GetTick () - tickstart) > PWR_FLAG_SETTING_DELAY)
 80028e2:	f7fe f9f3 	bl	8000ccc <HAL_GetTick>
 80028e6:	4602      	mov	r2, r0
 80028e8:	68fb      	ldr	r3, [r7, #12]
 80028ea:	1ad3      	subs	r3, r2, r3
 80028ec:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80028f0:	d901      	bls.n	80028f6 <HAL_PWREx_ConfigSupply+0x56>
    {
      return HAL_ERROR;
 80028f2:	2301      	movs	r3, #1
 80028f4:	e007      	b.n	8002906 <HAL_PWREx_ConfigSupply+0x66>
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 80028f6:	4b06      	ldr	r3, [pc, #24]	; (8002910 <HAL_PWREx_ConfigSupply+0x70>)
 80028f8:	685b      	ldr	r3, [r3, #4]
 80028fa:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80028fe:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8002902:	d1ee      	bne.n	80028e2 <HAL_PWREx_ConfigSupply+0x42>
      }
    }
  }
#endif /* defined (SMPS) */

  return HAL_OK;
 8002904:	2300      	movs	r3, #0
}
 8002906:	4618      	mov	r0, r3
 8002908:	3710      	adds	r7, #16
 800290a:	46bd      	mov	sp, r7
 800290c:	bd80      	pop	{r7, pc}
 800290e:	bf00      	nop
 8002910:	58024800 	.word	0x58024800

08002914 <HAL_PWREx_EnableUSBVoltageDetector>:
/**
  * @brief Enable the USB voltage level detector.
  * @retval None.
  */
void HAL_PWREx_EnableUSBVoltageDetector (void)
{
 8002914:	b480      	push	{r7}
 8002916:	af00      	add	r7, sp, #0
  /* Enable the USB voltage detector */
  SET_BIT (PWR->CR3, PWR_CR3_USB33DEN);
 8002918:	4b05      	ldr	r3, [pc, #20]	; (8002930 <HAL_PWREx_EnableUSBVoltageDetector+0x1c>)
 800291a:	68db      	ldr	r3, [r3, #12]
 800291c:	4a04      	ldr	r2, [pc, #16]	; (8002930 <HAL_PWREx_EnableUSBVoltageDetector+0x1c>)
 800291e:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8002922:	60d3      	str	r3, [r2, #12]
}
 8002924:	bf00      	nop
 8002926:	46bd      	mov	sp, r7
 8002928:	f85d 7b04 	ldr.w	r7, [sp], #4
 800292c:	4770      	bx	lr
 800292e:	bf00      	nop
 8002930:	58024800 	.word	0x58024800

08002934 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002934:	b580      	push	{r7, lr}
 8002936:	b08c      	sub	sp, #48	; 0x30
 8002938:	af00      	add	r7, sp, #0
 800293a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp1_pllckcfg, temp2_pllckcfg;

    /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 800293c:	687b      	ldr	r3, [r7, #4]
 800293e:	2b00      	cmp	r3, #0
 8002940:	d102      	bne.n	8002948 <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 8002942:	2301      	movs	r3, #1
 8002944:	f000 bc1d 	b.w	8003182 <HAL_RCC_OscConfig+0x84e>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002948:	687b      	ldr	r3, [r7, #4]
 800294a:	681b      	ldr	r3, [r3, #0]
 800294c:	f003 0301 	and.w	r3, r3, #1
 8002950:	2b00      	cmp	r3, #0
 8002952:	f000 8087 	beq.w	8002a64 <HAL_RCC_OscConfig+0x130>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8002956:	4b99      	ldr	r3, [pc, #612]	; (8002bbc <HAL_RCC_OscConfig+0x288>)
 8002958:	691b      	ldr	r3, [r3, #16]
 800295a:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800295e:	62fb      	str	r3, [r7, #44]	; 0x2c
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8002960:	4b96      	ldr	r3, [pc, #600]	; (8002bbc <HAL_RCC_OscConfig+0x288>)
 8002962:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002964:	62bb      	str	r3, [r7, #40]	; 0x28
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((temp_sysclksrc == RCC_CFGR_SWS_HSE) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSE)))
 8002966:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002968:	2b10      	cmp	r3, #16
 800296a:	d007      	beq.n	800297c <HAL_RCC_OscConfig+0x48>
 800296c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800296e:	2b18      	cmp	r3, #24
 8002970:	d110      	bne.n	8002994 <HAL_RCC_OscConfig+0x60>
 8002972:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002974:	f003 0303 	and.w	r3, r3, #3
 8002978:	2b02      	cmp	r3, #2
 800297a:	d10b      	bne.n	8002994 <HAL_RCC_OscConfig+0x60>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800297c:	4b8f      	ldr	r3, [pc, #572]	; (8002bbc <HAL_RCC_OscConfig+0x288>)
 800297e:	681b      	ldr	r3, [r3, #0]
 8002980:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002984:	2b00      	cmp	r3, #0
 8002986:	d06c      	beq.n	8002a62 <HAL_RCC_OscConfig+0x12e>
 8002988:	687b      	ldr	r3, [r7, #4]
 800298a:	685b      	ldr	r3, [r3, #4]
 800298c:	2b00      	cmp	r3, #0
 800298e:	d168      	bne.n	8002a62 <HAL_RCC_OscConfig+0x12e>
      {
        return HAL_ERROR;
 8002990:	2301      	movs	r3, #1
 8002992:	e3f6      	b.n	8003182 <HAL_RCC_OscConfig+0x84e>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002994:	687b      	ldr	r3, [r7, #4]
 8002996:	685b      	ldr	r3, [r3, #4]
 8002998:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800299c:	d106      	bne.n	80029ac <HAL_RCC_OscConfig+0x78>
 800299e:	4b87      	ldr	r3, [pc, #540]	; (8002bbc <HAL_RCC_OscConfig+0x288>)
 80029a0:	681b      	ldr	r3, [r3, #0]
 80029a2:	4a86      	ldr	r2, [pc, #536]	; (8002bbc <HAL_RCC_OscConfig+0x288>)
 80029a4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80029a8:	6013      	str	r3, [r2, #0]
 80029aa:	e02e      	b.n	8002a0a <HAL_RCC_OscConfig+0xd6>
 80029ac:	687b      	ldr	r3, [r7, #4]
 80029ae:	685b      	ldr	r3, [r3, #4]
 80029b0:	2b00      	cmp	r3, #0
 80029b2:	d10c      	bne.n	80029ce <HAL_RCC_OscConfig+0x9a>
 80029b4:	4b81      	ldr	r3, [pc, #516]	; (8002bbc <HAL_RCC_OscConfig+0x288>)
 80029b6:	681b      	ldr	r3, [r3, #0]
 80029b8:	4a80      	ldr	r2, [pc, #512]	; (8002bbc <HAL_RCC_OscConfig+0x288>)
 80029ba:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80029be:	6013      	str	r3, [r2, #0]
 80029c0:	4b7e      	ldr	r3, [pc, #504]	; (8002bbc <HAL_RCC_OscConfig+0x288>)
 80029c2:	681b      	ldr	r3, [r3, #0]
 80029c4:	4a7d      	ldr	r2, [pc, #500]	; (8002bbc <HAL_RCC_OscConfig+0x288>)
 80029c6:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80029ca:	6013      	str	r3, [r2, #0]
 80029cc:	e01d      	b.n	8002a0a <HAL_RCC_OscConfig+0xd6>
 80029ce:	687b      	ldr	r3, [r7, #4]
 80029d0:	685b      	ldr	r3, [r3, #4]
 80029d2:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80029d6:	d10c      	bne.n	80029f2 <HAL_RCC_OscConfig+0xbe>
 80029d8:	4b78      	ldr	r3, [pc, #480]	; (8002bbc <HAL_RCC_OscConfig+0x288>)
 80029da:	681b      	ldr	r3, [r3, #0]
 80029dc:	4a77      	ldr	r2, [pc, #476]	; (8002bbc <HAL_RCC_OscConfig+0x288>)
 80029de:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80029e2:	6013      	str	r3, [r2, #0]
 80029e4:	4b75      	ldr	r3, [pc, #468]	; (8002bbc <HAL_RCC_OscConfig+0x288>)
 80029e6:	681b      	ldr	r3, [r3, #0]
 80029e8:	4a74      	ldr	r2, [pc, #464]	; (8002bbc <HAL_RCC_OscConfig+0x288>)
 80029ea:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80029ee:	6013      	str	r3, [r2, #0]
 80029f0:	e00b      	b.n	8002a0a <HAL_RCC_OscConfig+0xd6>
 80029f2:	4b72      	ldr	r3, [pc, #456]	; (8002bbc <HAL_RCC_OscConfig+0x288>)
 80029f4:	681b      	ldr	r3, [r3, #0]
 80029f6:	4a71      	ldr	r2, [pc, #452]	; (8002bbc <HAL_RCC_OscConfig+0x288>)
 80029f8:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80029fc:	6013      	str	r3, [r2, #0]
 80029fe:	4b6f      	ldr	r3, [pc, #444]	; (8002bbc <HAL_RCC_OscConfig+0x288>)
 8002a00:	681b      	ldr	r3, [r3, #0]
 8002a02:	4a6e      	ldr	r2, [pc, #440]	; (8002bbc <HAL_RCC_OscConfig+0x288>)
 8002a04:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002a08:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8002a0a:	687b      	ldr	r3, [r7, #4]
 8002a0c:	685b      	ldr	r3, [r3, #4]
 8002a0e:	2b00      	cmp	r3, #0
 8002a10:	d013      	beq.n	8002a3a <HAL_RCC_OscConfig+0x106>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002a12:	f7fe f95b 	bl	8000ccc <HAL_GetTick>
 8002a16:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8002a18:	e008      	b.n	8002a2c <HAL_RCC_OscConfig+0xf8>
        {
          if((uint32_t) (HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8002a1a:	f7fe f957 	bl	8000ccc <HAL_GetTick>
 8002a1e:	4602      	mov	r2, r0
 8002a20:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002a22:	1ad3      	subs	r3, r2, r3
 8002a24:	2b64      	cmp	r3, #100	; 0x64
 8002a26:	d901      	bls.n	8002a2c <HAL_RCC_OscConfig+0xf8>
          {
            return HAL_TIMEOUT;
 8002a28:	2303      	movs	r3, #3
 8002a2a:	e3aa      	b.n	8003182 <HAL_RCC_OscConfig+0x84e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8002a2c:	4b63      	ldr	r3, [pc, #396]	; (8002bbc <HAL_RCC_OscConfig+0x288>)
 8002a2e:	681b      	ldr	r3, [r3, #0]
 8002a30:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002a34:	2b00      	cmp	r3, #0
 8002a36:	d0f0      	beq.n	8002a1a <HAL_RCC_OscConfig+0xe6>
 8002a38:	e014      	b.n	8002a64 <HAL_RCC_OscConfig+0x130>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002a3a:	f7fe f947 	bl	8000ccc <HAL_GetTick>
 8002a3e:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 8002a40:	e008      	b.n	8002a54 <HAL_RCC_OscConfig+0x120>
        {
          if((uint32_t) (HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8002a42:	f7fe f943 	bl	8000ccc <HAL_GetTick>
 8002a46:	4602      	mov	r2, r0
 8002a48:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002a4a:	1ad3      	subs	r3, r2, r3
 8002a4c:	2b64      	cmp	r3, #100	; 0x64
 8002a4e:	d901      	bls.n	8002a54 <HAL_RCC_OscConfig+0x120>
          {
            return HAL_TIMEOUT;
 8002a50:	2303      	movs	r3, #3
 8002a52:	e396      	b.n	8003182 <HAL_RCC_OscConfig+0x84e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 8002a54:	4b59      	ldr	r3, [pc, #356]	; (8002bbc <HAL_RCC_OscConfig+0x288>)
 8002a56:	681b      	ldr	r3, [r3, #0]
 8002a58:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002a5c:	2b00      	cmp	r3, #0
 8002a5e:	d1f0      	bne.n	8002a42 <HAL_RCC_OscConfig+0x10e>
 8002a60:	e000      	b.n	8002a64 <HAL_RCC_OscConfig+0x130>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002a62:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002a64:	687b      	ldr	r3, [r7, #4]
 8002a66:	681b      	ldr	r3, [r3, #0]
 8002a68:	f003 0302 	and.w	r3, r3, #2
 8002a6c:	2b00      	cmp	r3, #0
 8002a6e:	f000 80cb 	beq.w	8002c08 <HAL_RCC_OscConfig+0x2d4>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSICALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* When the HSI is used as system clock it will not be disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8002a72:	4b52      	ldr	r3, [pc, #328]	; (8002bbc <HAL_RCC_OscConfig+0x288>)
 8002a74:	691b      	ldr	r3, [r3, #16]
 8002a76:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8002a7a:	623b      	str	r3, [r7, #32]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8002a7c:	4b4f      	ldr	r3, [pc, #316]	; (8002bbc <HAL_RCC_OscConfig+0x288>)
 8002a7e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002a80:	61fb      	str	r3, [r7, #28]
    if((temp_sysclksrc == RCC_CFGR_SWS_HSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSI)))
 8002a82:	6a3b      	ldr	r3, [r7, #32]
 8002a84:	2b00      	cmp	r3, #0
 8002a86:	d007      	beq.n	8002a98 <HAL_RCC_OscConfig+0x164>
 8002a88:	6a3b      	ldr	r3, [r7, #32]
 8002a8a:	2b18      	cmp	r3, #24
 8002a8c:	d156      	bne.n	8002b3c <HAL_RCC_OscConfig+0x208>
 8002a8e:	69fb      	ldr	r3, [r7, #28]
 8002a90:	f003 0303 	and.w	r3, r3, #3
 8002a94:	2b00      	cmp	r3, #0
 8002a96:	d151      	bne.n	8002b3c <HAL_RCC_OscConfig+0x208>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8002a98:	4b48      	ldr	r3, [pc, #288]	; (8002bbc <HAL_RCC_OscConfig+0x288>)
 8002a9a:	681b      	ldr	r3, [r3, #0]
 8002a9c:	f003 0304 	and.w	r3, r3, #4
 8002aa0:	2b00      	cmp	r3, #0
 8002aa2:	d005      	beq.n	8002ab0 <HAL_RCC_OscConfig+0x17c>
 8002aa4:	687b      	ldr	r3, [r7, #4]
 8002aa6:	68db      	ldr	r3, [r3, #12]
 8002aa8:	2b00      	cmp	r3, #0
 8002aaa:	d101      	bne.n	8002ab0 <HAL_RCC_OscConfig+0x17c>
      {
        return HAL_ERROR;
 8002aac:	2301      	movs	r3, #1
 8002aae:	e368      	b.n	8003182 <HAL_RCC_OscConfig+0x84e>
      }
      /* Otherwise, only HSI division and calibration are allowed */
      else
      {
          /* Enable the Internal High Speed oscillator (HSI, HSIDIV2, HSIDIV4, or HSIDIV8) */
          __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 8002ab0:	4b42      	ldr	r3, [pc, #264]	; (8002bbc <HAL_RCC_OscConfig+0x288>)
 8002ab2:	681b      	ldr	r3, [r3, #0]
 8002ab4:	f023 0219 	bic.w	r2, r3, #25
 8002ab8:	687b      	ldr	r3, [r7, #4]
 8002aba:	68db      	ldr	r3, [r3, #12]
 8002abc:	493f      	ldr	r1, [pc, #252]	; (8002bbc <HAL_RCC_OscConfig+0x288>)
 8002abe:	4313      	orrs	r3, r2
 8002ac0:	600b      	str	r3, [r1, #0]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8002ac2:	f7fe f903 	bl	8000ccc <HAL_GetTick>
 8002ac6:	6278      	str	r0, [r7, #36]	; 0x24

          /* Wait till HSI is ready */
          while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8002ac8:	e008      	b.n	8002adc <HAL_RCC_OscConfig+0x1a8>
          {
            if((uint32_t) (HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8002aca:	f7fe f8ff 	bl	8000ccc <HAL_GetTick>
 8002ace:	4602      	mov	r2, r0
 8002ad0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002ad2:	1ad3      	subs	r3, r2, r3
 8002ad4:	2b02      	cmp	r3, #2
 8002ad6:	d901      	bls.n	8002adc <HAL_RCC_OscConfig+0x1a8>
            {
              return HAL_TIMEOUT;
 8002ad8:	2303      	movs	r3, #3
 8002ada:	e352      	b.n	8003182 <HAL_RCC_OscConfig+0x84e>
          while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8002adc:	4b37      	ldr	r3, [pc, #220]	; (8002bbc <HAL_RCC_OscConfig+0x288>)
 8002ade:	681b      	ldr	r3, [r3, #0]
 8002ae0:	f003 0304 	and.w	r3, r3, #4
 8002ae4:	2b00      	cmp	r3, #0
 8002ae6:	d0f0      	beq.n	8002aca <HAL_RCC_OscConfig+0x196>
            }
          }
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002ae8:	f7fe f920 	bl	8000d2c <HAL_GetREVID>
 8002aec:	4603      	mov	r3, r0
 8002aee:	f241 0203 	movw	r2, #4099	; 0x1003
 8002af2:	4293      	cmp	r3, r2
 8002af4:	d817      	bhi.n	8002b26 <HAL_RCC_OscConfig+0x1f2>
 8002af6:	687b      	ldr	r3, [r7, #4]
 8002af8:	691b      	ldr	r3, [r3, #16]
 8002afa:	2b40      	cmp	r3, #64	; 0x40
 8002afc:	d108      	bne.n	8002b10 <HAL_RCC_OscConfig+0x1dc>
 8002afe:	4b2f      	ldr	r3, [pc, #188]	; (8002bbc <HAL_RCC_OscConfig+0x288>)
 8002b00:	685b      	ldr	r3, [r3, #4]
 8002b02:	f423 337c 	bic.w	r3, r3, #258048	; 0x3f000
 8002b06:	4a2d      	ldr	r2, [pc, #180]	; (8002bbc <HAL_RCC_OscConfig+0x288>)
 8002b08:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002b0c:	6053      	str	r3, [r2, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8002b0e:	e07b      	b.n	8002c08 <HAL_RCC_OscConfig+0x2d4>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002b10:	4b2a      	ldr	r3, [pc, #168]	; (8002bbc <HAL_RCC_OscConfig+0x288>)
 8002b12:	685b      	ldr	r3, [r3, #4]
 8002b14:	f423 327c 	bic.w	r2, r3, #258048	; 0x3f000
 8002b18:	687b      	ldr	r3, [r7, #4]
 8002b1a:	691b      	ldr	r3, [r3, #16]
 8002b1c:	031b      	lsls	r3, r3, #12
 8002b1e:	4927      	ldr	r1, [pc, #156]	; (8002bbc <HAL_RCC_OscConfig+0x288>)
 8002b20:	4313      	orrs	r3, r2
 8002b22:	604b      	str	r3, [r1, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8002b24:	e070      	b.n	8002c08 <HAL_RCC_OscConfig+0x2d4>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002b26:	4b25      	ldr	r3, [pc, #148]	; (8002bbc <HAL_RCC_OscConfig+0x288>)
 8002b28:	685b      	ldr	r3, [r3, #4]
 8002b2a:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8002b2e:	687b      	ldr	r3, [r7, #4]
 8002b30:	691b      	ldr	r3, [r3, #16]
 8002b32:	061b      	lsls	r3, r3, #24
 8002b34:	4921      	ldr	r1, [pc, #132]	; (8002bbc <HAL_RCC_OscConfig+0x288>)
 8002b36:	4313      	orrs	r3, r2
 8002b38:	604b      	str	r3, [r1, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8002b3a:	e065      	b.n	8002c08 <HAL_RCC_OscConfig+0x2d4>
    }

    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8002b3c:	687b      	ldr	r3, [r7, #4]
 8002b3e:	68db      	ldr	r3, [r3, #12]
 8002b40:	2b00      	cmp	r3, #0
 8002b42:	d048      	beq.n	8002bd6 <HAL_RCC_OscConfig+0x2a2>
      {
     /* Enable the Internal High Speed oscillator (HSI, HSIDIV2,HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 8002b44:	4b1d      	ldr	r3, [pc, #116]	; (8002bbc <HAL_RCC_OscConfig+0x288>)
 8002b46:	681b      	ldr	r3, [r3, #0]
 8002b48:	f023 0219 	bic.w	r2, r3, #25
 8002b4c:	687b      	ldr	r3, [r7, #4]
 8002b4e:	68db      	ldr	r3, [r3, #12]
 8002b50:	491a      	ldr	r1, [pc, #104]	; (8002bbc <HAL_RCC_OscConfig+0x288>)
 8002b52:	4313      	orrs	r3, r2
 8002b54:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002b56:	f7fe f8b9 	bl	8000ccc <HAL_GetTick>
 8002b5a:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8002b5c:	e008      	b.n	8002b70 <HAL_RCC_OscConfig+0x23c>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8002b5e:	f7fe f8b5 	bl	8000ccc <HAL_GetTick>
 8002b62:	4602      	mov	r2, r0
 8002b64:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002b66:	1ad3      	subs	r3, r2, r3
 8002b68:	2b02      	cmp	r3, #2
 8002b6a:	d901      	bls.n	8002b70 <HAL_RCC_OscConfig+0x23c>
          {
            return HAL_TIMEOUT;
 8002b6c:	2303      	movs	r3, #3
 8002b6e:	e308      	b.n	8003182 <HAL_RCC_OscConfig+0x84e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8002b70:	4b12      	ldr	r3, [pc, #72]	; (8002bbc <HAL_RCC_OscConfig+0x288>)
 8002b72:	681b      	ldr	r3, [r3, #0]
 8002b74:	f003 0304 	and.w	r3, r3, #4
 8002b78:	2b00      	cmp	r3, #0
 8002b7a:	d0f0      	beq.n	8002b5e <HAL_RCC_OscConfig+0x22a>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002b7c:	f7fe f8d6 	bl	8000d2c <HAL_GetREVID>
 8002b80:	4603      	mov	r3, r0
 8002b82:	f241 0203 	movw	r2, #4099	; 0x1003
 8002b86:	4293      	cmp	r3, r2
 8002b88:	d81a      	bhi.n	8002bc0 <HAL_RCC_OscConfig+0x28c>
 8002b8a:	687b      	ldr	r3, [r7, #4]
 8002b8c:	691b      	ldr	r3, [r3, #16]
 8002b8e:	2b40      	cmp	r3, #64	; 0x40
 8002b90:	d108      	bne.n	8002ba4 <HAL_RCC_OscConfig+0x270>
 8002b92:	4b0a      	ldr	r3, [pc, #40]	; (8002bbc <HAL_RCC_OscConfig+0x288>)
 8002b94:	685b      	ldr	r3, [r3, #4]
 8002b96:	f423 337c 	bic.w	r3, r3, #258048	; 0x3f000
 8002b9a:	4a08      	ldr	r2, [pc, #32]	; (8002bbc <HAL_RCC_OscConfig+0x288>)
 8002b9c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002ba0:	6053      	str	r3, [r2, #4]
 8002ba2:	e031      	b.n	8002c08 <HAL_RCC_OscConfig+0x2d4>
 8002ba4:	4b05      	ldr	r3, [pc, #20]	; (8002bbc <HAL_RCC_OscConfig+0x288>)
 8002ba6:	685b      	ldr	r3, [r3, #4]
 8002ba8:	f423 327c 	bic.w	r2, r3, #258048	; 0x3f000
 8002bac:	687b      	ldr	r3, [r7, #4]
 8002bae:	691b      	ldr	r3, [r3, #16]
 8002bb0:	031b      	lsls	r3, r3, #12
 8002bb2:	4902      	ldr	r1, [pc, #8]	; (8002bbc <HAL_RCC_OscConfig+0x288>)
 8002bb4:	4313      	orrs	r3, r2
 8002bb6:	604b      	str	r3, [r1, #4]
 8002bb8:	e026      	b.n	8002c08 <HAL_RCC_OscConfig+0x2d4>
 8002bba:	bf00      	nop
 8002bbc:	58024400 	.word	0x58024400
 8002bc0:	4b9a      	ldr	r3, [pc, #616]	; (8002e2c <HAL_RCC_OscConfig+0x4f8>)
 8002bc2:	685b      	ldr	r3, [r3, #4]
 8002bc4:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8002bc8:	687b      	ldr	r3, [r7, #4]
 8002bca:	691b      	ldr	r3, [r3, #16]
 8002bcc:	061b      	lsls	r3, r3, #24
 8002bce:	4997      	ldr	r1, [pc, #604]	; (8002e2c <HAL_RCC_OscConfig+0x4f8>)
 8002bd0:	4313      	orrs	r3, r2
 8002bd2:	604b      	str	r3, [r1, #4]
 8002bd4:	e018      	b.n	8002c08 <HAL_RCC_OscConfig+0x2d4>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8002bd6:	4b95      	ldr	r3, [pc, #596]	; (8002e2c <HAL_RCC_OscConfig+0x4f8>)
 8002bd8:	681b      	ldr	r3, [r3, #0]
 8002bda:	4a94      	ldr	r2, [pc, #592]	; (8002e2c <HAL_RCC_OscConfig+0x4f8>)
 8002bdc:	f023 0301 	bic.w	r3, r3, #1
 8002be0:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002be2:	f7fe f873 	bl	8000ccc <HAL_GetTick>
 8002be6:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8002be8:	e008      	b.n	8002bfc <HAL_RCC_OscConfig+0x2c8>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8002bea:	f7fe f86f 	bl	8000ccc <HAL_GetTick>
 8002bee:	4602      	mov	r2, r0
 8002bf0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002bf2:	1ad3      	subs	r3, r2, r3
 8002bf4:	2b02      	cmp	r3, #2
 8002bf6:	d901      	bls.n	8002bfc <HAL_RCC_OscConfig+0x2c8>
          {
            return HAL_TIMEOUT;
 8002bf8:	2303      	movs	r3, #3
 8002bfa:	e2c2      	b.n	8003182 <HAL_RCC_OscConfig+0x84e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8002bfc:	4b8b      	ldr	r3, [pc, #556]	; (8002e2c <HAL_RCC_OscConfig+0x4f8>)
 8002bfe:	681b      	ldr	r3, [r3, #0]
 8002c00:	f003 0304 	and.w	r3, r3, #4
 8002c04:	2b00      	cmp	r3, #0
 8002c06:	d1f0      	bne.n	8002bea <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }
  }
  /*----------------------------- CSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_CSI) == RCC_OSCILLATORTYPE_CSI)
 8002c08:	687b      	ldr	r3, [r7, #4]
 8002c0a:	681b      	ldr	r3, [r3, #0]
 8002c0c:	f003 0310 	and.w	r3, r3, #16
 8002c10:	2b00      	cmp	r3, #0
 8002c12:	f000 80a9 	beq.w	8002d68 <HAL_RCC_OscConfig+0x434>
    /* Check the parameters */
    assert_param(IS_RCC_CSI(RCC_OscInitStruct->CSIState));
    assert_param(IS_RCC_CSICALIBRATION_VALUE(RCC_OscInitStruct->CSICalibrationValue));

    /* When the CSI is used as system clock it will not disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8002c16:	4b85      	ldr	r3, [pc, #532]	; (8002e2c <HAL_RCC_OscConfig+0x4f8>)
 8002c18:	691b      	ldr	r3, [r3, #16]
 8002c1a:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8002c1e:	61bb      	str	r3, [r7, #24]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8002c20:	4b82      	ldr	r3, [pc, #520]	; (8002e2c <HAL_RCC_OscConfig+0x4f8>)
 8002c22:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002c24:	617b      	str	r3, [r7, #20]
    if((temp_sysclksrc == RCC_CFGR_SWS_CSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_CSI)))
 8002c26:	69bb      	ldr	r3, [r7, #24]
 8002c28:	2b08      	cmp	r3, #8
 8002c2a:	d007      	beq.n	8002c3c <HAL_RCC_OscConfig+0x308>
 8002c2c:	69bb      	ldr	r3, [r7, #24]
 8002c2e:	2b18      	cmp	r3, #24
 8002c30:	d13a      	bne.n	8002ca8 <HAL_RCC_OscConfig+0x374>
 8002c32:	697b      	ldr	r3, [r7, #20]
 8002c34:	f003 0303 	and.w	r3, r3, #3
 8002c38:	2b01      	cmp	r3, #1
 8002c3a:	d135      	bne.n	8002ca8 <HAL_RCC_OscConfig+0x374>
    {
      /* When CSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8002c3c:	4b7b      	ldr	r3, [pc, #492]	; (8002e2c <HAL_RCC_OscConfig+0x4f8>)
 8002c3e:	681b      	ldr	r3, [r3, #0]
 8002c40:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002c44:	2b00      	cmp	r3, #0
 8002c46:	d005      	beq.n	8002c54 <HAL_RCC_OscConfig+0x320>
 8002c48:	687b      	ldr	r3, [r7, #4]
 8002c4a:	69db      	ldr	r3, [r3, #28]
 8002c4c:	2b80      	cmp	r3, #128	; 0x80
 8002c4e:	d001      	beq.n	8002c54 <HAL_RCC_OscConfig+0x320>
      {
        return HAL_ERROR;
 8002c50:	2301      	movs	r3, #1
 8002c52:	e296      	b.n	8003182 <HAL_RCC_OscConfig+0x84e>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8002c54:	f7fe f86a 	bl	8000d2c <HAL_GetREVID>
 8002c58:	4603      	mov	r3, r0
 8002c5a:	f241 0203 	movw	r2, #4099	; 0x1003
 8002c5e:	4293      	cmp	r3, r2
 8002c60:	d817      	bhi.n	8002c92 <HAL_RCC_OscConfig+0x35e>
 8002c62:	687b      	ldr	r3, [r7, #4]
 8002c64:	6a1b      	ldr	r3, [r3, #32]
 8002c66:	2b20      	cmp	r3, #32
 8002c68:	d108      	bne.n	8002c7c <HAL_RCC_OscConfig+0x348>
 8002c6a:	4b70      	ldr	r3, [pc, #448]	; (8002e2c <HAL_RCC_OscConfig+0x4f8>)
 8002c6c:	685b      	ldr	r3, [r3, #4]
 8002c6e:	f023 43f8 	bic.w	r3, r3, #2080374784	; 0x7c000000
 8002c72:	4a6e      	ldr	r2, [pc, #440]	; (8002e2c <HAL_RCC_OscConfig+0x4f8>)
 8002c74:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8002c78:	6053      	str	r3, [r2, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8002c7a:	e075      	b.n	8002d68 <HAL_RCC_OscConfig+0x434>
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8002c7c:	4b6b      	ldr	r3, [pc, #428]	; (8002e2c <HAL_RCC_OscConfig+0x4f8>)
 8002c7e:	685b      	ldr	r3, [r3, #4]
 8002c80:	f023 42f8 	bic.w	r2, r3, #2080374784	; 0x7c000000
 8002c84:	687b      	ldr	r3, [r7, #4]
 8002c86:	6a1b      	ldr	r3, [r3, #32]
 8002c88:	069b      	lsls	r3, r3, #26
 8002c8a:	4968      	ldr	r1, [pc, #416]	; (8002e2c <HAL_RCC_OscConfig+0x4f8>)
 8002c8c:	4313      	orrs	r3, r2
 8002c8e:	604b      	str	r3, [r1, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8002c90:	e06a      	b.n	8002d68 <HAL_RCC_OscConfig+0x434>
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8002c92:	4b66      	ldr	r3, [pc, #408]	; (8002e2c <HAL_RCC_OscConfig+0x4f8>)
 8002c94:	68db      	ldr	r3, [r3, #12]
 8002c96:	f023 527c 	bic.w	r2, r3, #1056964608	; 0x3f000000
 8002c9a:	687b      	ldr	r3, [r7, #4]
 8002c9c:	6a1b      	ldr	r3, [r3, #32]
 8002c9e:	061b      	lsls	r3, r3, #24
 8002ca0:	4962      	ldr	r1, [pc, #392]	; (8002e2c <HAL_RCC_OscConfig+0x4f8>)
 8002ca2:	4313      	orrs	r3, r2
 8002ca4:	60cb      	str	r3, [r1, #12]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8002ca6:	e05f      	b.n	8002d68 <HAL_RCC_OscConfig+0x434>
      }
    }
    else
    {
      /* Check the CSI State */
      if((RCC_OscInitStruct->CSIState)!= RCC_CSI_OFF)
 8002ca8:	687b      	ldr	r3, [r7, #4]
 8002caa:	69db      	ldr	r3, [r3, #28]
 8002cac:	2b00      	cmp	r3, #0
 8002cae:	d042      	beq.n	8002d36 <HAL_RCC_OscConfig+0x402>
      {
        /* Enable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_ENABLE();
 8002cb0:	4b5e      	ldr	r3, [pc, #376]	; (8002e2c <HAL_RCC_OscConfig+0x4f8>)
 8002cb2:	681b      	ldr	r3, [r3, #0]
 8002cb4:	4a5d      	ldr	r2, [pc, #372]	; (8002e2c <HAL_RCC_OscConfig+0x4f8>)
 8002cb6:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002cba:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002cbc:	f7fe f806 	bl	8000ccc <HAL_GetTick>
 8002cc0:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till CSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8002cc2:	e008      	b.n	8002cd6 <HAL_RCC_OscConfig+0x3a2>
        {
          if((HAL_GetTick() - tickstart ) > CSI_TIMEOUT_VALUE)
 8002cc4:	f7fe f802 	bl	8000ccc <HAL_GetTick>
 8002cc8:	4602      	mov	r2, r0
 8002cca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002ccc:	1ad3      	subs	r3, r2, r3
 8002cce:	2b02      	cmp	r3, #2
 8002cd0:	d901      	bls.n	8002cd6 <HAL_RCC_OscConfig+0x3a2>
          {
            return HAL_TIMEOUT;
 8002cd2:	2303      	movs	r3, #3
 8002cd4:	e255      	b.n	8003182 <HAL_RCC_OscConfig+0x84e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8002cd6:	4b55      	ldr	r3, [pc, #340]	; (8002e2c <HAL_RCC_OscConfig+0x4f8>)
 8002cd8:	681b      	ldr	r3, [r3, #0]
 8002cda:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002cde:	2b00      	cmp	r3, #0
 8002ce0:	d0f0      	beq.n	8002cc4 <HAL_RCC_OscConfig+0x390>
          }
        }

        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8002ce2:	f7fe f823 	bl	8000d2c <HAL_GetREVID>
 8002ce6:	4603      	mov	r3, r0
 8002ce8:	f241 0203 	movw	r2, #4099	; 0x1003
 8002cec:	4293      	cmp	r3, r2
 8002cee:	d817      	bhi.n	8002d20 <HAL_RCC_OscConfig+0x3ec>
 8002cf0:	687b      	ldr	r3, [r7, #4]
 8002cf2:	6a1b      	ldr	r3, [r3, #32]
 8002cf4:	2b20      	cmp	r3, #32
 8002cf6:	d108      	bne.n	8002d0a <HAL_RCC_OscConfig+0x3d6>
 8002cf8:	4b4c      	ldr	r3, [pc, #304]	; (8002e2c <HAL_RCC_OscConfig+0x4f8>)
 8002cfa:	685b      	ldr	r3, [r3, #4]
 8002cfc:	f023 43f8 	bic.w	r3, r3, #2080374784	; 0x7c000000
 8002d00:	4a4a      	ldr	r2, [pc, #296]	; (8002e2c <HAL_RCC_OscConfig+0x4f8>)
 8002d02:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8002d06:	6053      	str	r3, [r2, #4]
 8002d08:	e02e      	b.n	8002d68 <HAL_RCC_OscConfig+0x434>
 8002d0a:	4b48      	ldr	r3, [pc, #288]	; (8002e2c <HAL_RCC_OscConfig+0x4f8>)
 8002d0c:	685b      	ldr	r3, [r3, #4]
 8002d0e:	f023 42f8 	bic.w	r2, r3, #2080374784	; 0x7c000000
 8002d12:	687b      	ldr	r3, [r7, #4]
 8002d14:	6a1b      	ldr	r3, [r3, #32]
 8002d16:	069b      	lsls	r3, r3, #26
 8002d18:	4944      	ldr	r1, [pc, #272]	; (8002e2c <HAL_RCC_OscConfig+0x4f8>)
 8002d1a:	4313      	orrs	r3, r2
 8002d1c:	604b      	str	r3, [r1, #4]
 8002d1e:	e023      	b.n	8002d68 <HAL_RCC_OscConfig+0x434>
 8002d20:	4b42      	ldr	r3, [pc, #264]	; (8002e2c <HAL_RCC_OscConfig+0x4f8>)
 8002d22:	68db      	ldr	r3, [r3, #12]
 8002d24:	f023 527c 	bic.w	r2, r3, #1056964608	; 0x3f000000
 8002d28:	687b      	ldr	r3, [r7, #4]
 8002d2a:	6a1b      	ldr	r3, [r3, #32]
 8002d2c:	061b      	lsls	r3, r3, #24
 8002d2e:	493f      	ldr	r1, [pc, #252]	; (8002e2c <HAL_RCC_OscConfig+0x4f8>)
 8002d30:	4313      	orrs	r3, r2
 8002d32:	60cb      	str	r3, [r1, #12]
 8002d34:	e018      	b.n	8002d68 <HAL_RCC_OscConfig+0x434>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_DISABLE();
 8002d36:	4b3d      	ldr	r3, [pc, #244]	; (8002e2c <HAL_RCC_OscConfig+0x4f8>)
 8002d38:	681b      	ldr	r3, [r3, #0]
 8002d3a:	4a3c      	ldr	r2, [pc, #240]	; (8002e2c <HAL_RCC_OscConfig+0x4f8>)
 8002d3c:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8002d40:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002d42:	f7fd ffc3 	bl	8000ccc <HAL_GetTick>
 8002d46:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till CSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 8002d48:	e008      	b.n	8002d5c <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > CSI_TIMEOUT_VALUE)
 8002d4a:	f7fd ffbf 	bl	8000ccc <HAL_GetTick>
 8002d4e:	4602      	mov	r2, r0
 8002d50:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002d52:	1ad3      	subs	r3, r2, r3
 8002d54:	2b02      	cmp	r3, #2
 8002d56:	d901      	bls.n	8002d5c <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8002d58:	2303      	movs	r3, #3
 8002d5a:	e212      	b.n	8003182 <HAL_RCC_OscConfig+0x84e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 8002d5c:	4b33      	ldr	r3, [pc, #204]	; (8002e2c <HAL_RCC_OscConfig+0x4f8>)
 8002d5e:	681b      	ldr	r3, [r3, #0]
 8002d60:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002d64:	2b00      	cmp	r3, #0
 8002d66:	d1f0      	bne.n	8002d4a <HAL_RCC_OscConfig+0x416>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002d68:	687b      	ldr	r3, [r7, #4]
 8002d6a:	681b      	ldr	r3, [r3, #0]
 8002d6c:	f003 0308 	and.w	r3, r3, #8
 8002d70:	2b00      	cmp	r3, #0
 8002d72:	d036      	beq.n	8002de2 <HAL_RCC_OscConfig+0x4ae>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8002d74:	687b      	ldr	r3, [r7, #4]
 8002d76:	695b      	ldr	r3, [r3, #20]
 8002d78:	2b00      	cmp	r3, #0
 8002d7a:	d019      	beq.n	8002db0 <HAL_RCC_OscConfig+0x47c>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002d7c:	4b2b      	ldr	r3, [pc, #172]	; (8002e2c <HAL_RCC_OscConfig+0x4f8>)
 8002d7e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002d80:	4a2a      	ldr	r2, [pc, #168]	; (8002e2c <HAL_RCC_OscConfig+0x4f8>)
 8002d82:	f043 0301 	orr.w	r3, r3, #1
 8002d86:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002d88:	f7fd ffa0 	bl	8000ccc <HAL_GetTick>
 8002d8c:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 8002d8e:	e008      	b.n	8002da2 <HAL_RCC_OscConfig+0x46e>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8002d90:	f7fd ff9c 	bl	8000ccc <HAL_GetTick>
 8002d94:	4602      	mov	r2, r0
 8002d96:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002d98:	1ad3      	subs	r3, r2, r3
 8002d9a:	2b02      	cmp	r3, #2
 8002d9c:	d901      	bls.n	8002da2 <HAL_RCC_OscConfig+0x46e>
        {
          return HAL_TIMEOUT;
 8002d9e:	2303      	movs	r3, #3
 8002da0:	e1ef      	b.n	8003182 <HAL_RCC_OscConfig+0x84e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 8002da2:	4b22      	ldr	r3, [pc, #136]	; (8002e2c <HAL_RCC_OscConfig+0x4f8>)
 8002da4:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002da6:	f003 0302 	and.w	r3, r3, #2
 8002daa:	2b00      	cmp	r3, #0
 8002dac:	d0f0      	beq.n	8002d90 <HAL_RCC_OscConfig+0x45c>
 8002dae:	e018      	b.n	8002de2 <HAL_RCC_OscConfig+0x4ae>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002db0:	4b1e      	ldr	r3, [pc, #120]	; (8002e2c <HAL_RCC_OscConfig+0x4f8>)
 8002db2:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002db4:	4a1d      	ldr	r2, [pc, #116]	; (8002e2c <HAL_RCC_OscConfig+0x4f8>)
 8002db6:	f023 0301 	bic.w	r3, r3, #1
 8002dba:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002dbc:	f7fd ff86 	bl	8000ccc <HAL_GetTick>
 8002dc0:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8002dc2:	e008      	b.n	8002dd6 <HAL_RCC_OscConfig+0x4a2>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8002dc4:	f7fd ff82 	bl	8000ccc <HAL_GetTick>
 8002dc8:	4602      	mov	r2, r0
 8002dca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002dcc:	1ad3      	subs	r3, r2, r3
 8002dce:	2b02      	cmp	r3, #2
 8002dd0:	d901      	bls.n	8002dd6 <HAL_RCC_OscConfig+0x4a2>
        {
          return HAL_TIMEOUT;
 8002dd2:	2303      	movs	r3, #3
 8002dd4:	e1d5      	b.n	8003182 <HAL_RCC_OscConfig+0x84e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8002dd6:	4b15      	ldr	r3, [pc, #84]	; (8002e2c <HAL_RCC_OscConfig+0x4f8>)
 8002dd8:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002dda:	f003 0302 	and.w	r3, r3, #2
 8002dde:	2b00      	cmp	r3, #0
 8002de0:	d1f0      	bne.n	8002dc4 <HAL_RCC_OscConfig+0x490>
      }
    }
  }

  /*------------------------------ HSI48 Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8002de2:	687b      	ldr	r3, [r7, #4]
 8002de4:	681b      	ldr	r3, [r3, #0]
 8002de6:	f003 0320 	and.w	r3, r3, #32
 8002dea:	2b00      	cmp	r3, #0
 8002dec:	d039      	beq.n	8002e62 <HAL_RCC_OscConfig+0x52e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if((RCC_OscInitStruct->HSI48State)!= RCC_HSI48_OFF)
 8002dee:	687b      	ldr	r3, [r7, #4]
 8002df0:	699b      	ldr	r3, [r3, #24]
 8002df2:	2b00      	cmp	r3, #0
 8002df4:	d01c      	beq.n	8002e30 <HAL_RCC_OscConfig+0x4fc>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8002df6:	4b0d      	ldr	r3, [pc, #52]	; (8002e2c <HAL_RCC_OscConfig+0x4f8>)
 8002df8:	681b      	ldr	r3, [r3, #0]
 8002dfa:	4a0c      	ldr	r2, [pc, #48]	; (8002e2c <HAL_RCC_OscConfig+0x4f8>)
 8002dfc:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8002e00:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 8002e02:	f7fd ff63 	bl	8000ccc <HAL_GetTick>
 8002e06:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till HSI48 is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 8002e08:	e008      	b.n	8002e1c <HAL_RCC_OscConfig+0x4e8>
      {
        if((HAL_GetTick() - tickstart ) > HSI48_TIMEOUT_VALUE)
 8002e0a:	f7fd ff5f 	bl	8000ccc <HAL_GetTick>
 8002e0e:	4602      	mov	r2, r0
 8002e10:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002e12:	1ad3      	subs	r3, r2, r3
 8002e14:	2b02      	cmp	r3, #2
 8002e16:	d901      	bls.n	8002e1c <HAL_RCC_OscConfig+0x4e8>
        {
          return HAL_TIMEOUT;
 8002e18:	2303      	movs	r3, #3
 8002e1a:	e1b2      	b.n	8003182 <HAL_RCC_OscConfig+0x84e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 8002e1c:	4b03      	ldr	r3, [pc, #12]	; (8002e2c <HAL_RCC_OscConfig+0x4f8>)
 8002e1e:	681b      	ldr	r3, [r3, #0]
 8002e20:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8002e24:	2b00      	cmp	r3, #0
 8002e26:	d0f0      	beq.n	8002e0a <HAL_RCC_OscConfig+0x4d6>
 8002e28:	e01b      	b.n	8002e62 <HAL_RCC_OscConfig+0x52e>
 8002e2a:	bf00      	nop
 8002e2c:	58024400 	.word	0x58024400
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 8002e30:	4b9b      	ldr	r3, [pc, #620]	; (80030a0 <HAL_RCC_OscConfig+0x76c>)
 8002e32:	681b      	ldr	r3, [r3, #0]
 8002e34:	4a9a      	ldr	r2, [pc, #616]	; (80030a0 <HAL_RCC_OscConfig+0x76c>)
 8002e36:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8002e3a:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 8002e3c:	f7fd ff46 	bl	8000ccc <HAL_GetTick>
 8002e40:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till HSI48 is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 8002e42:	e008      	b.n	8002e56 <HAL_RCC_OscConfig+0x522>
      {
        if((HAL_GetTick() - tickstart ) > HSI48_TIMEOUT_VALUE)
 8002e44:	f7fd ff42 	bl	8000ccc <HAL_GetTick>
 8002e48:	4602      	mov	r2, r0
 8002e4a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002e4c:	1ad3      	subs	r3, r2, r3
 8002e4e:	2b02      	cmp	r3, #2
 8002e50:	d901      	bls.n	8002e56 <HAL_RCC_OscConfig+0x522>
        {
          return HAL_TIMEOUT;
 8002e52:	2303      	movs	r3, #3
 8002e54:	e195      	b.n	8003182 <HAL_RCC_OscConfig+0x84e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 8002e56:	4b92      	ldr	r3, [pc, #584]	; (80030a0 <HAL_RCC_OscConfig+0x76c>)
 8002e58:	681b      	ldr	r3, [r3, #0]
 8002e5a:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8002e5e:	2b00      	cmp	r3, #0
 8002e60:	d1f0      	bne.n	8002e44 <HAL_RCC_OscConfig+0x510>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002e62:	687b      	ldr	r3, [r7, #4]
 8002e64:	681b      	ldr	r3, [r3, #0]
 8002e66:	f003 0304 	and.w	r3, r3, #4
 8002e6a:	2b00      	cmp	r3, #0
 8002e6c:	f000 8081 	beq.w	8002f72 <HAL_RCC_OscConfig+0x63e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 8002e70:	4b8c      	ldr	r3, [pc, #560]	; (80030a4 <HAL_RCC_OscConfig+0x770>)
 8002e72:	681b      	ldr	r3, [r3, #0]
 8002e74:	4a8b      	ldr	r2, [pc, #556]	; (80030a4 <HAL_RCC_OscConfig+0x770>)
 8002e76:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002e7a:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8002e7c:	f7fd ff26 	bl	8000ccc <HAL_GetTick>
 8002e80:	6278      	str	r0, [r7, #36]	; 0x24

    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8002e82:	e008      	b.n	8002e96 <HAL_RCC_OscConfig+0x562>
    {
      if((HAL_GetTick() - tickstart ) > RCC_DBP_TIMEOUT_VALUE)
 8002e84:	f7fd ff22 	bl	8000ccc <HAL_GetTick>
 8002e88:	4602      	mov	r2, r0
 8002e8a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002e8c:	1ad3      	subs	r3, r2, r3
 8002e8e:	2b64      	cmp	r3, #100	; 0x64
 8002e90:	d901      	bls.n	8002e96 <HAL_RCC_OscConfig+0x562>
      {
        return HAL_TIMEOUT;
 8002e92:	2303      	movs	r3, #3
 8002e94:	e175      	b.n	8003182 <HAL_RCC_OscConfig+0x84e>
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8002e96:	4b83      	ldr	r3, [pc, #524]	; (80030a4 <HAL_RCC_OscConfig+0x770>)
 8002e98:	681b      	ldr	r3, [r3, #0]
 8002e9a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002e9e:	2b00      	cmp	r3, #0
 8002ea0:	d0f0      	beq.n	8002e84 <HAL_RCC_OscConfig+0x550>
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002ea2:	687b      	ldr	r3, [r7, #4]
 8002ea4:	689b      	ldr	r3, [r3, #8]
 8002ea6:	2b01      	cmp	r3, #1
 8002ea8:	d106      	bne.n	8002eb8 <HAL_RCC_OscConfig+0x584>
 8002eaa:	4b7d      	ldr	r3, [pc, #500]	; (80030a0 <HAL_RCC_OscConfig+0x76c>)
 8002eac:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002eae:	4a7c      	ldr	r2, [pc, #496]	; (80030a0 <HAL_RCC_OscConfig+0x76c>)
 8002eb0:	f043 0301 	orr.w	r3, r3, #1
 8002eb4:	6713      	str	r3, [r2, #112]	; 0x70
 8002eb6:	e02d      	b.n	8002f14 <HAL_RCC_OscConfig+0x5e0>
 8002eb8:	687b      	ldr	r3, [r7, #4]
 8002eba:	689b      	ldr	r3, [r3, #8]
 8002ebc:	2b00      	cmp	r3, #0
 8002ebe:	d10c      	bne.n	8002eda <HAL_RCC_OscConfig+0x5a6>
 8002ec0:	4b77      	ldr	r3, [pc, #476]	; (80030a0 <HAL_RCC_OscConfig+0x76c>)
 8002ec2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002ec4:	4a76      	ldr	r2, [pc, #472]	; (80030a0 <HAL_RCC_OscConfig+0x76c>)
 8002ec6:	f023 0301 	bic.w	r3, r3, #1
 8002eca:	6713      	str	r3, [r2, #112]	; 0x70
 8002ecc:	4b74      	ldr	r3, [pc, #464]	; (80030a0 <HAL_RCC_OscConfig+0x76c>)
 8002ece:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002ed0:	4a73      	ldr	r2, [pc, #460]	; (80030a0 <HAL_RCC_OscConfig+0x76c>)
 8002ed2:	f023 0304 	bic.w	r3, r3, #4
 8002ed6:	6713      	str	r3, [r2, #112]	; 0x70
 8002ed8:	e01c      	b.n	8002f14 <HAL_RCC_OscConfig+0x5e0>
 8002eda:	687b      	ldr	r3, [r7, #4]
 8002edc:	689b      	ldr	r3, [r3, #8]
 8002ede:	2b05      	cmp	r3, #5
 8002ee0:	d10c      	bne.n	8002efc <HAL_RCC_OscConfig+0x5c8>
 8002ee2:	4b6f      	ldr	r3, [pc, #444]	; (80030a0 <HAL_RCC_OscConfig+0x76c>)
 8002ee4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002ee6:	4a6e      	ldr	r2, [pc, #440]	; (80030a0 <HAL_RCC_OscConfig+0x76c>)
 8002ee8:	f043 0304 	orr.w	r3, r3, #4
 8002eec:	6713      	str	r3, [r2, #112]	; 0x70
 8002eee:	4b6c      	ldr	r3, [pc, #432]	; (80030a0 <HAL_RCC_OscConfig+0x76c>)
 8002ef0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002ef2:	4a6b      	ldr	r2, [pc, #428]	; (80030a0 <HAL_RCC_OscConfig+0x76c>)
 8002ef4:	f043 0301 	orr.w	r3, r3, #1
 8002ef8:	6713      	str	r3, [r2, #112]	; 0x70
 8002efa:	e00b      	b.n	8002f14 <HAL_RCC_OscConfig+0x5e0>
 8002efc:	4b68      	ldr	r3, [pc, #416]	; (80030a0 <HAL_RCC_OscConfig+0x76c>)
 8002efe:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002f00:	4a67      	ldr	r2, [pc, #412]	; (80030a0 <HAL_RCC_OscConfig+0x76c>)
 8002f02:	f023 0301 	bic.w	r3, r3, #1
 8002f06:	6713      	str	r3, [r2, #112]	; 0x70
 8002f08:	4b65      	ldr	r3, [pc, #404]	; (80030a0 <HAL_RCC_OscConfig+0x76c>)
 8002f0a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002f0c:	4a64      	ldr	r2, [pc, #400]	; (80030a0 <HAL_RCC_OscConfig+0x76c>)
 8002f0e:	f023 0304 	bic.w	r3, r3, #4
 8002f12:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8002f14:	687b      	ldr	r3, [r7, #4]
 8002f16:	689b      	ldr	r3, [r3, #8]
 8002f18:	2b00      	cmp	r3, #0
 8002f1a:	d015      	beq.n	8002f48 <HAL_RCC_OscConfig+0x614>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002f1c:	f7fd fed6 	bl	8000ccc <HAL_GetTick>
 8002f20:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8002f22:	e00a      	b.n	8002f3a <HAL_RCC_OscConfig+0x606>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002f24:	f7fd fed2 	bl	8000ccc <HAL_GetTick>
 8002f28:	4602      	mov	r2, r0
 8002f2a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002f2c:	1ad3      	subs	r3, r2, r3
 8002f2e:	f241 3288 	movw	r2, #5000	; 0x1388
 8002f32:	4293      	cmp	r3, r2
 8002f34:	d901      	bls.n	8002f3a <HAL_RCC_OscConfig+0x606>
        {
          return HAL_TIMEOUT;
 8002f36:	2303      	movs	r3, #3
 8002f38:	e123      	b.n	8003182 <HAL_RCC_OscConfig+0x84e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8002f3a:	4b59      	ldr	r3, [pc, #356]	; (80030a0 <HAL_RCC_OscConfig+0x76c>)
 8002f3c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002f3e:	f003 0302 	and.w	r3, r3, #2
 8002f42:	2b00      	cmp	r3, #0
 8002f44:	d0ee      	beq.n	8002f24 <HAL_RCC_OscConfig+0x5f0>
 8002f46:	e014      	b.n	8002f72 <HAL_RCC_OscConfig+0x63e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002f48:	f7fd fec0 	bl	8000ccc <HAL_GetTick>
 8002f4c:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSE is disabled */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8002f4e:	e00a      	b.n	8002f66 <HAL_RCC_OscConfig+0x632>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002f50:	f7fd febc 	bl	8000ccc <HAL_GetTick>
 8002f54:	4602      	mov	r2, r0
 8002f56:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002f58:	1ad3      	subs	r3, r2, r3
 8002f5a:	f241 3288 	movw	r2, #5000	; 0x1388
 8002f5e:	4293      	cmp	r3, r2
 8002f60:	d901      	bls.n	8002f66 <HAL_RCC_OscConfig+0x632>
        {
          return HAL_TIMEOUT;
 8002f62:	2303      	movs	r3, #3
 8002f64:	e10d      	b.n	8003182 <HAL_RCC_OscConfig+0x84e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8002f66:	4b4e      	ldr	r3, [pc, #312]	; (80030a0 <HAL_RCC_OscConfig+0x76c>)
 8002f68:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002f6a:	f003 0302 	and.w	r3, r3, #2
 8002f6e:	2b00      	cmp	r3, #0
 8002f70:	d1ee      	bne.n	8002f50 <HAL_RCC_OscConfig+0x61c>
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8002f72:	687b      	ldr	r3, [r7, #4]
 8002f74:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002f76:	2b00      	cmp	r3, #0
 8002f78:	f000 8102 	beq.w	8003180 <HAL_RCC_OscConfig+0x84c>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL1)
 8002f7c:	4b48      	ldr	r3, [pc, #288]	; (80030a0 <HAL_RCC_OscConfig+0x76c>)
 8002f7e:	691b      	ldr	r3, [r3, #16]
 8002f80:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8002f84:	2b18      	cmp	r3, #24
 8002f86:	f000 80bd 	beq.w	8003104 <HAL_RCC_OscConfig+0x7d0>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8002f8a:	687b      	ldr	r3, [r7, #4]
 8002f8c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002f8e:	2b02      	cmp	r3, #2
 8002f90:	f040 809e 	bne.w	80030d0 <HAL_RCC_OscConfig+0x79c>
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
        assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002f94:	4b42      	ldr	r3, [pc, #264]	; (80030a0 <HAL_RCC_OscConfig+0x76c>)
 8002f96:	681b      	ldr	r3, [r3, #0]
 8002f98:	4a41      	ldr	r2, [pc, #260]	; (80030a0 <HAL_RCC_OscConfig+0x76c>)
 8002f9a:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8002f9e:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002fa0:	f7fd fe94 	bl	8000ccc <HAL_GetTick>
 8002fa4:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8002fa6:	e008      	b.n	8002fba <HAL_RCC_OscConfig+0x686>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002fa8:	f7fd fe90 	bl	8000ccc <HAL_GetTick>
 8002fac:	4602      	mov	r2, r0
 8002fae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002fb0:	1ad3      	subs	r3, r2, r3
 8002fb2:	2b02      	cmp	r3, #2
 8002fb4:	d901      	bls.n	8002fba <HAL_RCC_OscConfig+0x686>
          {
            return HAL_TIMEOUT;
 8002fb6:	2303      	movs	r3, #3
 8002fb8:	e0e3      	b.n	8003182 <HAL_RCC_OscConfig+0x84e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8002fba:	4b39      	ldr	r3, [pc, #228]	; (80030a0 <HAL_RCC_OscConfig+0x76c>)
 8002fbc:	681b      	ldr	r3, [r3, #0]
 8002fbe:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002fc2:	2b00      	cmp	r3, #0
 8002fc4:	d1f0      	bne.n	8002fa8 <HAL_RCC_OscConfig+0x674>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8002fc6:	4b36      	ldr	r3, [pc, #216]	; (80030a0 <HAL_RCC_OscConfig+0x76c>)
 8002fc8:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8002fca:	4b37      	ldr	r3, [pc, #220]	; (80030a8 <HAL_RCC_OscConfig+0x774>)
 8002fcc:	4013      	ands	r3, r2
 8002fce:	687a      	ldr	r2, [r7, #4]
 8002fd0:	6a91      	ldr	r1, [r2, #40]	; 0x28
 8002fd2:	687a      	ldr	r2, [r7, #4]
 8002fd4:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 8002fd6:	0112      	lsls	r2, r2, #4
 8002fd8:	430a      	orrs	r2, r1
 8002fda:	4931      	ldr	r1, [pc, #196]	; (80030a0 <HAL_RCC_OscConfig+0x76c>)
 8002fdc:	4313      	orrs	r3, r2
 8002fde:	628b      	str	r3, [r1, #40]	; 0x28
 8002fe0:	687b      	ldr	r3, [r7, #4]
 8002fe2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002fe4:	3b01      	subs	r3, #1
 8002fe6:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8002fea:	687b      	ldr	r3, [r7, #4]
 8002fec:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002fee:	3b01      	subs	r3, #1
 8002ff0:	025b      	lsls	r3, r3, #9
 8002ff2:	b29b      	uxth	r3, r3
 8002ff4:	431a      	orrs	r2, r3
 8002ff6:	687b      	ldr	r3, [r7, #4]
 8002ff8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002ffa:	3b01      	subs	r3, #1
 8002ffc:	041b      	lsls	r3, r3, #16
 8002ffe:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 8003002:	431a      	orrs	r2, r3
 8003004:	687b      	ldr	r3, [r7, #4]
 8003006:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003008:	3b01      	subs	r3, #1
 800300a:	061b      	lsls	r3, r3, #24
 800300c:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 8003010:	4923      	ldr	r1, [pc, #140]	; (80030a0 <HAL_RCC_OscConfig+0x76c>)
 8003012:	4313      	orrs	r3, r2
 8003014:	630b      	str	r3, [r1, #48]	; 0x30
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

         /* Disable PLLFRACN . */
         __HAL_RCC_PLLFRACN_DISABLE();
 8003016:	4b22      	ldr	r3, [pc, #136]	; (80030a0 <HAL_RCC_OscConfig+0x76c>)
 8003018:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800301a:	4a21      	ldr	r2, [pc, #132]	; (80030a0 <HAL_RCC_OscConfig+0x76c>)
 800301c:	f023 0301 	bic.w	r3, r3, #1
 8003020:	62d3      	str	r3, [r2, #44]	; 0x2c

         /* Configure PLL PLL1FRACN */
         __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 8003022:	4b1f      	ldr	r3, [pc, #124]	; (80030a0 <HAL_RCC_OscConfig+0x76c>)
 8003024:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8003026:	4b21      	ldr	r3, [pc, #132]	; (80030ac <HAL_RCC_OscConfig+0x778>)
 8003028:	4013      	ands	r3, r2
 800302a:	687a      	ldr	r2, [r7, #4]
 800302c:	6c92      	ldr	r2, [r2, #72]	; 0x48
 800302e:	00d2      	lsls	r2, r2, #3
 8003030:	491b      	ldr	r1, [pc, #108]	; (80030a0 <HAL_RCC_OscConfig+0x76c>)
 8003032:	4313      	orrs	r3, r2
 8003034:	634b      	str	r3, [r1, #52]	; 0x34

        /* Select PLL1 input reference frequency range: VCI */
        __HAL_RCC_PLL_VCIRANGE(RCC_OscInitStruct->PLL.PLLRGE) ;
 8003036:	4b1a      	ldr	r3, [pc, #104]	; (80030a0 <HAL_RCC_OscConfig+0x76c>)
 8003038:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800303a:	f023 020c 	bic.w	r2, r3, #12
 800303e:	687b      	ldr	r3, [r7, #4]
 8003040:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003042:	4917      	ldr	r1, [pc, #92]	; (80030a0 <HAL_RCC_OscConfig+0x76c>)
 8003044:	4313      	orrs	r3, r2
 8003046:	62cb      	str	r3, [r1, #44]	; 0x2c

        /* Select PLL1 output frequency range : VCO */
        __HAL_RCC_PLL_VCORANGE(RCC_OscInitStruct->PLL.PLLVCOSEL) ;
 8003048:	4b15      	ldr	r3, [pc, #84]	; (80030a0 <HAL_RCC_OscConfig+0x76c>)
 800304a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800304c:	f023 0202 	bic.w	r2, r3, #2
 8003050:	687b      	ldr	r3, [r7, #4]
 8003052:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003054:	4912      	ldr	r1, [pc, #72]	; (80030a0 <HAL_RCC_OscConfig+0x76c>)
 8003056:	4313      	orrs	r3, r2
 8003058:	62cb      	str	r3, [r1, #44]	; 0x2c

        /* Enable PLL System Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVP);
 800305a:	4b11      	ldr	r3, [pc, #68]	; (80030a0 <HAL_RCC_OscConfig+0x76c>)
 800305c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800305e:	4a10      	ldr	r2, [pc, #64]	; (80030a0 <HAL_RCC_OscConfig+0x76c>)
 8003060:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003064:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1Q Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8003066:	4b0e      	ldr	r3, [pc, #56]	; (80030a0 <HAL_RCC_OscConfig+0x76c>)
 8003068:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800306a:	4a0d      	ldr	r2, [pc, #52]	; (80030a0 <HAL_RCC_OscConfig+0x76c>)
 800306c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8003070:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1R  Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVR);
 8003072:	4b0b      	ldr	r3, [pc, #44]	; (80030a0 <HAL_RCC_OscConfig+0x76c>)
 8003074:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003076:	4a0a      	ldr	r2, [pc, #40]	; (80030a0 <HAL_RCC_OscConfig+0x76c>)
 8003078:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800307c:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1FRACN . */
         __HAL_RCC_PLLFRACN_ENABLE();
 800307e:	4b08      	ldr	r3, [pc, #32]	; (80030a0 <HAL_RCC_OscConfig+0x76c>)
 8003080:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003082:	4a07      	ldr	r2, [pc, #28]	; (80030a0 <HAL_RCC_OscConfig+0x76c>)
 8003084:	f043 0301 	orr.w	r3, r3, #1
 8003088:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800308a:	4b05      	ldr	r3, [pc, #20]	; (80030a0 <HAL_RCC_OscConfig+0x76c>)
 800308c:	681b      	ldr	r3, [r3, #0]
 800308e:	4a04      	ldr	r2, [pc, #16]	; (80030a0 <HAL_RCC_OscConfig+0x76c>)
 8003090:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8003094:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003096:	f7fd fe19 	bl	8000ccc <HAL_GetTick>
 800309a:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 800309c:	e011      	b.n	80030c2 <HAL_RCC_OscConfig+0x78e>
 800309e:	bf00      	nop
 80030a0:	58024400 	.word	0x58024400
 80030a4:	58024800 	.word	0x58024800
 80030a8:	fffffc0c 	.word	0xfffffc0c
 80030ac:	ffff0007 	.word	0xffff0007
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80030b0:	f7fd fe0c 	bl	8000ccc <HAL_GetTick>
 80030b4:	4602      	mov	r2, r0
 80030b6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80030b8:	1ad3      	subs	r3, r2, r3
 80030ba:	2b02      	cmp	r3, #2
 80030bc:	d901      	bls.n	80030c2 <HAL_RCC_OscConfig+0x78e>
          {
            return HAL_TIMEOUT;
 80030be:	2303      	movs	r3, #3
 80030c0:	e05f      	b.n	8003182 <HAL_RCC_OscConfig+0x84e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 80030c2:	4b32      	ldr	r3, [pc, #200]	; (800318c <HAL_RCC_OscConfig+0x858>)
 80030c4:	681b      	ldr	r3, [r3, #0]
 80030c6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80030ca:	2b00      	cmp	r3, #0
 80030cc:	d0f0      	beq.n	80030b0 <HAL_RCC_OscConfig+0x77c>
 80030ce:	e057      	b.n	8003180 <HAL_RCC_OscConfig+0x84c>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80030d0:	4b2e      	ldr	r3, [pc, #184]	; (800318c <HAL_RCC_OscConfig+0x858>)
 80030d2:	681b      	ldr	r3, [r3, #0]
 80030d4:	4a2d      	ldr	r2, [pc, #180]	; (800318c <HAL_RCC_OscConfig+0x858>)
 80030d6:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80030da:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80030dc:	f7fd fdf6 	bl	8000ccc <HAL_GetTick>
 80030e0:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 80030e2:	e008      	b.n	80030f6 <HAL_RCC_OscConfig+0x7c2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80030e4:	f7fd fdf2 	bl	8000ccc <HAL_GetTick>
 80030e8:	4602      	mov	r2, r0
 80030ea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80030ec:	1ad3      	subs	r3, r2, r3
 80030ee:	2b02      	cmp	r3, #2
 80030f0:	d901      	bls.n	80030f6 <HAL_RCC_OscConfig+0x7c2>
          {
            return HAL_TIMEOUT;
 80030f2:	2303      	movs	r3, #3
 80030f4:	e045      	b.n	8003182 <HAL_RCC_OscConfig+0x84e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 80030f6:	4b25      	ldr	r3, [pc, #148]	; (800318c <HAL_RCC_OscConfig+0x858>)
 80030f8:	681b      	ldr	r3, [r3, #0]
 80030fa:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80030fe:	2b00      	cmp	r3, #0
 8003100:	d1f0      	bne.n	80030e4 <HAL_RCC_OscConfig+0x7b0>
 8003102:	e03d      	b.n	8003180 <HAL_RCC_OscConfig+0x84c>
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp1_pllckcfg = RCC->PLLCKSELR;
 8003104:	4b21      	ldr	r3, [pc, #132]	; (800318c <HAL_RCC_OscConfig+0x858>)
 8003106:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003108:	613b      	str	r3, [r7, #16]
      temp2_pllckcfg = RCC->PLL1DIVR;
 800310a:	4b20      	ldr	r3, [pc, #128]	; (800318c <HAL_RCC_OscConfig+0x858>)
 800310c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800310e:	60fb      	str	r3, [r7, #12]
      if(((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8003110:	687b      	ldr	r3, [r7, #4]
 8003112:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003114:	2b01      	cmp	r3, #1
 8003116:	d031      	beq.n	800317c <HAL_RCC_OscConfig+0x848>
	 (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003118:	693b      	ldr	r3, [r7, #16]
 800311a:	f003 0203 	and.w	r2, r3, #3
 800311e:	687b      	ldr	r3, [r7, #4]
 8003120:	6a9b      	ldr	r3, [r3, #40]	; 0x28
      if(((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8003122:	429a      	cmp	r2, r3
 8003124:	d12a      	bne.n	800317c <HAL_RCC_OscConfig+0x848>
         ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 8003126:	693b      	ldr	r3, [r7, #16]
 8003128:	091b      	lsrs	r3, r3, #4
 800312a:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 800312e:	687b      	ldr	r3, [r7, #4]
 8003130:	6adb      	ldr	r3, [r3, #44]	; 0x2c
	 (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003132:	429a      	cmp	r2, r3
 8003134:	d122      	bne.n	800317c <HAL_RCC_OscConfig+0x848>
         (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 8003136:	68fb      	ldr	r3, [r7, #12]
 8003138:	f3c3 0208 	ubfx	r2, r3, #0, #9
 800313c:	687b      	ldr	r3, [r7, #4]
 800313e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003140:	3b01      	subs	r3, #1
         ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 8003142:	429a      	cmp	r2, r3
 8003144:	d11a      	bne.n	800317c <HAL_RCC_OscConfig+0x848>
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 8003146:	68fb      	ldr	r3, [r7, #12]
 8003148:	0a5b      	lsrs	r3, r3, #9
 800314a:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800314e:	687b      	ldr	r3, [r7, #4]
 8003150:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003152:	3b01      	subs	r3, #1
         (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 8003154:	429a      	cmp	r2, r3
 8003156:	d111      	bne.n	800317c <HAL_RCC_OscConfig+0x848>
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 8003158:	68fb      	ldr	r3, [r7, #12]
 800315a:	0c1b      	lsrs	r3, r3, #16
 800315c:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8003160:	687b      	ldr	r3, [r7, #4]
 8003162:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003164:	3b01      	subs	r3, #1
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 8003166:	429a      	cmp	r2, r3
 8003168:	d108      	bne.n	800317c <HAL_RCC_OscConfig+0x848>
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_R1) >> RCC_PLL1DIVR_R1_Pos) != (RCC_OscInitStruct->PLL.PLLR - 1U)))
 800316a:	68fb      	ldr	r3, [r7, #12]
 800316c:	0e1b      	lsrs	r3, r3, #24
 800316e:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8003172:	687b      	ldr	r3, [r7, #4]
 8003174:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003176:	3b01      	subs	r3, #1
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 8003178:	429a      	cmp	r2, r3
 800317a:	d001      	beq.n	8003180 <HAL_RCC_OscConfig+0x84c>
      {
        return HAL_ERROR;
 800317c:	2301      	movs	r3, #1
 800317e:	e000      	b.n	8003182 <HAL_RCC_OscConfig+0x84e>
      }
    }
  }
  return HAL_OK;
 8003180:	2300      	movs	r3, #0
}
 8003182:	4618      	mov	r0, r3
 8003184:	3730      	adds	r7, #48	; 0x30
 8003186:	46bd      	mov	sp, r7
 8003188:	bd80      	pop	{r7, pc}
 800318a:	bf00      	nop
 800318c:	58024400 	.word	0x58024400

08003190 <HAL_RCC_ClockConfig>:
  *         D1CPRE[3:0] bits to ensure that  Domain1 core clock not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8003190:	b580      	push	{r7, lr}
 8003192:	b086      	sub	sp, #24
 8003194:	af00      	add	r7, sp, #0
 8003196:	6078      	str	r0, [r7, #4]
 8003198:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef halstatus;
  uint32_t tickstart;
  uint32_t common_system_clock;

   /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 800319a:	687b      	ldr	r3, [r7, #4]
 800319c:	2b00      	cmp	r3, #0
 800319e:	d101      	bne.n	80031a4 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80031a0:	2301      	movs	r3, #1
 80031a2:	e19c      	b.n	80034de <HAL_RCC_ClockConfig+0x34e>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80031a4:	4b8a      	ldr	r3, [pc, #552]	; (80033d0 <HAL_RCC_ClockConfig+0x240>)
 80031a6:	681b      	ldr	r3, [r3, #0]
 80031a8:	f003 030f 	and.w	r3, r3, #15
 80031ac:	683a      	ldr	r2, [r7, #0]
 80031ae:	429a      	cmp	r2, r3
 80031b0:	d910      	bls.n	80031d4 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80031b2:	4b87      	ldr	r3, [pc, #540]	; (80033d0 <HAL_RCC_ClockConfig+0x240>)
 80031b4:	681b      	ldr	r3, [r3, #0]
 80031b6:	f023 020f 	bic.w	r2, r3, #15
 80031ba:	4985      	ldr	r1, [pc, #532]	; (80033d0 <HAL_RCC_ClockConfig+0x240>)
 80031bc:	683b      	ldr	r3, [r7, #0]
 80031be:	4313      	orrs	r3, r2
 80031c0:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80031c2:	4b83      	ldr	r3, [pc, #524]	; (80033d0 <HAL_RCC_ClockConfig+0x240>)
 80031c4:	681b      	ldr	r3, [r3, #0]
 80031c6:	f003 030f 	and.w	r3, r3, #15
 80031ca:	683a      	ldr	r2, [r7, #0]
 80031cc:	429a      	cmp	r2, r3
 80031ce:	d001      	beq.n	80031d4 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 80031d0:	2301      	movs	r3, #1
 80031d2:	e184      	b.n	80034de <HAL_RCC_ClockConfig+0x34e>

  }

  /* Increasing the BUS frequency divider */
  /*-------------------------- D1PCLK1/CDPCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 80031d4:	687b      	ldr	r3, [r7, #4]
 80031d6:	681b      	ldr	r3, [r3, #0]
 80031d8:	f003 0304 	and.w	r3, r3, #4
 80031dc:	2b00      	cmp	r3, #0
 80031de:	d010      	beq.n	8003202 <HAL_RCC_ClockConfig+0x72>
  {
#if defined (RCC_D1CFGR_D1PPRE)
    if((RCC_ClkInitStruct->APB3CLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 80031e0:	687b      	ldr	r3, [r7, #4]
 80031e2:	691a      	ldr	r2, [r3, #16]
 80031e4:	4b7b      	ldr	r3, [pc, #492]	; (80033d4 <HAL_RCC_ClockConfig+0x244>)
 80031e6:	699b      	ldr	r3, [r3, #24]
 80031e8:	f003 0370 	and.w	r3, r3, #112	; 0x70
 80031ec:	429a      	cmp	r2, r3
 80031ee:	d908      	bls.n	8003202 <HAL_RCC_ClockConfig+0x72>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 80031f0:	4b78      	ldr	r3, [pc, #480]	; (80033d4 <HAL_RCC_ClockConfig+0x244>)
 80031f2:	699b      	ldr	r3, [r3, #24]
 80031f4:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 80031f8:	687b      	ldr	r3, [r7, #4]
 80031fa:	691b      	ldr	r3, [r3, #16]
 80031fc:	4975      	ldr	r1, [pc, #468]	; (80033d4 <HAL_RCC_ClockConfig+0x244>)
 80031fe:	4313      	orrs	r3, r2
 8003200:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003202:	687b      	ldr	r3, [r7, #4]
 8003204:	681b      	ldr	r3, [r3, #0]
 8003206:	f003 0308 	and.w	r3, r3, #8
 800320a:	2b00      	cmp	r3, #0
 800320c:	d010      	beq.n	8003230 <HAL_RCC_ClockConfig+0xa0>
  {
#if defined (RCC_D2CFGR_D2PPRE1)
    if((RCC_ClkInitStruct->APB1CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 800320e:	687b      	ldr	r3, [r7, #4]
 8003210:	695a      	ldr	r2, [r3, #20]
 8003212:	4b70      	ldr	r3, [pc, #448]	; (80033d4 <HAL_RCC_ClockConfig+0x244>)
 8003214:	69db      	ldr	r3, [r3, #28]
 8003216:	f003 0370 	and.w	r3, r3, #112	; 0x70
 800321a:	429a      	cmp	r2, r3
 800321c:	d908      	bls.n	8003230 <HAL_RCC_ClockConfig+0xa0>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 800321e:	4b6d      	ldr	r3, [pc, #436]	; (80033d4 <HAL_RCC_ClockConfig+0x244>)
 8003220:	69db      	ldr	r3, [r3, #28]
 8003222:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8003226:	687b      	ldr	r3, [r7, #4]
 8003228:	695b      	ldr	r3, [r3, #20]
 800322a:	496a      	ldr	r1, [pc, #424]	; (80033d4 <HAL_RCC_ClockConfig+0x244>)
 800322c:	4313      	orrs	r3, r2
 800322e:	61cb      	str	r3, [r1, #28]
      MODIFY_REG(RCC->CDCFGR2, RCC_CDCFGR2_CDPPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
  }
#endif
    }
  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003230:	687b      	ldr	r3, [r7, #4]
 8003232:	681b      	ldr	r3, [r3, #0]
 8003234:	f003 0310 	and.w	r3, r3, #16
 8003238:	2b00      	cmp	r3, #0
 800323a:	d010      	beq.n	800325e <HAL_RCC_ClockConfig+0xce>
  {
#if defined(RCC_D2CFGR_D2PPRE2)
    if((RCC_ClkInitStruct->APB2CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 800323c:	687b      	ldr	r3, [r7, #4]
 800323e:	699a      	ldr	r2, [r3, #24]
 8003240:	4b64      	ldr	r3, [pc, #400]	; (80033d4 <HAL_RCC_ClockConfig+0x244>)
 8003242:	69db      	ldr	r3, [r3, #28]
 8003244:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8003248:	429a      	cmp	r2, r3
 800324a:	d908      	bls.n	800325e <HAL_RCC_ClockConfig+0xce>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 800324c:	4b61      	ldr	r3, [pc, #388]	; (80033d4 <HAL_RCC_ClockConfig+0x244>)
 800324e:	69db      	ldr	r3, [r3, #28]
 8003250:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8003254:	687b      	ldr	r3, [r7, #4]
 8003256:	699b      	ldr	r3, [r3, #24]
 8003258:	495e      	ldr	r1, [pc, #376]	; (80033d4 <HAL_RCC_ClockConfig+0x244>)
 800325a:	4313      	orrs	r3, r2
 800325c:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- D3PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 800325e:	687b      	ldr	r3, [r7, #4]
 8003260:	681b      	ldr	r3, [r3, #0]
 8003262:	f003 0320 	and.w	r3, r3, #32
 8003266:	2b00      	cmp	r3, #0
 8003268:	d010      	beq.n	800328c <HAL_RCC_ClockConfig+0xfc>
  {
#if defined(RCC_D3CFGR_D3PPRE)
    if((RCC_ClkInitStruct->APB4CLKDivider) > (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 800326a:	687b      	ldr	r3, [r7, #4]
 800326c:	69da      	ldr	r2, [r3, #28]
 800326e:	4b59      	ldr	r3, [pc, #356]	; (80033d4 <HAL_RCC_ClockConfig+0x244>)
 8003270:	6a1b      	ldr	r3, [r3, #32]
 8003272:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8003276:	429a      	cmp	r2, r3
 8003278:	d908      	bls.n	800328c <HAL_RCC_ClockConfig+0xfc>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider) );
 800327a:	4b56      	ldr	r3, [pc, #344]	; (80033d4 <HAL_RCC_ClockConfig+0x244>)
 800327c:	6a1b      	ldr	r3, [r3, #32]
 800327e:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8003282:	687b      	ldr	r3, [r7, #4]
 8003284:	69db      	ldr	r3, [r3, #28]
 8003286:	4953      	ldr	r1, [pc, #332]	; (80033d4 <HAL_RCC_ClockConfig+0x244>)
 8003288:	4313      	orrs	r3, r2
 800328a:	620b      	str	r3, [r1, #32]
    }
#endif
  }

   /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800328c:	687b      	ldr	r3, [r7, #4]
 800328e:	681b      	ldr	r3, [r3, #0]
 8003290:	f003 0302 	and.w	r3, r3, #2
 8003294:	2b00      	cmp	r3, #0
 8003296:	d010      	beq.n	80032ba <HAL_RCC_ClockConfig+0x12a>
  {
#if defined (RCC_D1CFGR_HPRE)
    if((RCC_ClkInitStruct->AHBCLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 8003298:	687b      	ldr	r3, [r7, #4]
 800329a:	68da      	ldr	r2, [r3, #12]
 800329c:	4b4d      	ldr	r3, [pc, #308]	; (80033d4 <HAL_RCC_ClockConfig+0x244>)
 800329e:	699b      	ldr	r3, [r3, #24]
 80032a0:	f003 030f 	and.w	r3, r3, #15
 80032a4:	429a      	cmp	r2, r3
 80032a6:	d908      	bls.n	80032ba <HAL_RCC_ClockConfig+0x12a>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80032a8:	4b4a      	ldr	r3, [pc, #296]	; (80033d4 <HAL_RCC_ClockConfig+0x244>)
 80032aa:	699b      	ldr	r3, [r3, #24]
 80032ac:	f023 020f 	bic.w	r2, r3, #15
 80032b0:	687b      	ldr	r3, [r7, #4]
 80032b2:	68db      	ldr	r3, [r3, #12]
 80032b4:	4947      	ldr	r1, [pc, #284]	; (80033d4 <HAL_RCC_ClockConfig+0x244>)
 80032b6:	4313      	orrs	r3, r2
 80032b8:	618b      	str	r3, [r1, #24]
    }
#endif
  }

    /*------------------------- SYSCLK Configuration -------------------------*/
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80032ba:	687b      	ldr	r3, [r7, #4]
 80032bc:	681b      	ldr	r3, [r3, #0]
 80032be:	f003 0301 	and.w	r3, r3, #1
 80032c2:	2b00      	cmp	r3, #0
 80032c4:	d055      	beq.n	8003372 <HAL_RCC_ClockConfig+0x1e2>
    {
      assert_param(IS_RCC_SYSCLK(RCC_ClkInitStruct->SYSCLKDivider));
      assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
#if defined(RCC_D1CFGR_D1CPRE)
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1CPRE, RCC_ClkInitStruct->SYSCLKDivider);
 80032c6:	4b43      	ldr	r3, [pc, #268]	; (80033d4 <HAL_RCC_ClockConfig+0x244>)
 80032c8:	699b      	ldr	r3, [r3, #24]
 80032ca:	f423 6270 	bic.w	r2, r3, #3840	; 0xf00
 80032ce:	687b      	ldr	r3, [r7, #4]
 80032d0:	689b      	ldr	r3, [r3, #8]
 80032d2:	4940      	ldr	r1, [pc, #256]	; (80033d4 <HAL_RCC_ClockConfig+0x244>)
 80032d4:	4313      	orrs	r3, r2
 80032d6:	618b      	str	r3, [r1, #24]
#else
      MODIFY_REG(RCC->CDCFGR1, RCC_CDCFGR1_CDCPRE, RCC_ClkInitStruct->SYSCLKDivider);
#endif
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80032d8:	687b      	ldr	r3, [r7, #4]
 80032da:	685b      	ldr	r3, [r3, #4]
 80032dc:	2b02      	cmp	r3, #2
 80032de:	d107      	bne.n	80032f0 <HAL_RCC_ClockConfig+0x160>
      {
        /* Check the HSE ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 80032e0:	4b3c      	ldr	r3, [pc, #240]	; (80033d4 <HAL_RCC_ClockConfig+0x244>)
 80032e2:	681b      	ldr	r3, [r3, #0]
 80032e4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80032e8:	2b00      	cmp	r3, #0
 80032ea:	d121      	bne.n	8003330 <HAL_RCC_ClockConfig+0x1a0>
        {
          return HAL_ERROR;
 80032ec:	2301      	movs	r3, #1
 80032ee:	e0f6      	b.n	80034de <HAL_RCC_ClockConfig+0x34e>
        }
      }
      /* PLL is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80032f0:	687b      	ldr	r3, [r7, #4]
 80032f2:	685b      	ldr	r3, [r3, #4]
 80032f4:	2b03      	cmp	r3, #3
 80032f6:	d107      	bne.n	8003308 <HAL_RCC_ClockConfig+0x178>
      {
        /* Check the PLL ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 80032f8:	4b36      	ldr	r3, [pc, #216]	; (80033d4 <HAL_RCC_ClockConfig+0x244>)
 80032fa:	681b      	ldr	r3, [r3, #0]
 80032fc:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003300:	2b00      	cmp	r3, #0
 8003302:	d115      	bne.n	8003330 <HAL_RCC_ClockConfig+0x1a0>
        {
          return HAL_ERROR;
 8003304:	2301      	movs	r3, #1
 8003306:	e0ea      	b.n	80034de <HAL_RCC_ClockConfig+0x34e>
        }
      }
      /* CSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_CSI)
 8003308:	687b      	ldr	r3, [r7, #4]
 800330a:	685b      	ldr	r3, [r3, #4]
 800330c:	2b01      	cmp	r3, #1
 800330e:	d107      	bne.n	8003320 <HAL_RCC_ClockConfig+0x190>
      {
        /* Check the PLL ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8003310:	4b30      	ldr	r3, [pc, #192]	; (80033d4 <HAL_RCC_ClockConfig+0x244>)
 8003312:	681b      	ldr	r3, [r3, #0]
 8003314:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003318:	2b00      	cmp	r3, #0
 800331a:	d109      	bne.n	8003330 <HAL_RCC_ClockConfig+0x1a0>
        {
          return HAL_ERROR;
 800331c:	2301      	movs	r3, #1
 800331e:	e0de      	b.n	80034de <HAL_RCC_ClockConfig+0x34e>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8003320:	4b2c      	ldr	r3, [pc, #176]	; (80033d4 <HAL_RCC_ClockConfig+0x244>)
 8003322:	681b      	ldr	r3, [r3, #0]
 8003324:	f003 0304 	and.w	r3, r3, #4
 8003328:	2b00      	cmp	r3, #0
 800332a:	d101      	bne.n	8003330 <HAL_RCC_ClockConfig+0x1a0>
        {
          return HAL_ERROR;
 800332c:	2301      	movs	r3, #1
 800332e:	e0d6      	b.n	80034de <HAL_RCC_ClockConfig+0x34e>
        }
      }
      MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8003330:	4b28      	ldr	r3, [pc, #160]	; (80033d4 <HAL_RCC_ClockConfig+0x244>)
 8003332:	691b      	ldr	r3, [r3, #16]
 8003334:	f023 0207 	bic.w	r2, r3, #7
 8003338:	687b      	ldr	r3, [r7, #4]
 800333a:	685b      	ldr	r3, [r3, #4]
 800333c:	4925      	ldr	r1, [pc, #148]	; (80033d4 <HAL_RCC_ClockConfig+0x244>)
 800333e:	4313      	orrs	r3, r2
 8003340:	610b      	str	r3, [r1, #16]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003342:	f7fd fcc3 	bl	8000ccc <HAL_GetTick>
 8003346:	6178      	str	r0, [r7, #20]

        while (__HAL_RCC_GET_SYSCLK_SOURCE() !=  (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003348:	e00a      	b.n	8003360 <HAL_RCC_ClockConfig+0x1d0>
        {
          if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 800334a:	f7fd fcbf 	bl	8000ccc <HAL_GetTick>
 800334e:	4602      	mov	r2, r0
 8003350:	697b      	ldr	r3, [r7, #20]
 8003352:	1ad3      	subs	r3, r2, r3
 8003354:	f241 3288 	movw	r2, #5000	; 0x1388
 8003358:	4293      	cmp	r3, r2
 800335a:	d901      	bls.n	8003360 <HAL_RCC_ClockConfig+0x1d0>
          {
            return HAL_TIMEOUT;
 800335c:	2303      	movs	r3, #3
 800335e:	e0be      	b.n	80034de <HAL_RCC_ClockConfig+0x34e>
        while (__HAL_RCC_GET_SYSCLK_SOURCE() !=  (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003360:	4b1c      	ldr	r3, [pc, #112]	; (80033d4 <HAL_RCC_ClockConfig+0x244>)
 8003362:	691b      	ldr	r3, [r3, #16]
 8003364:	f003 0238 	and.w	r2, r3, #56	; 0x38
 8003368:	687b      	ldr	r3, [r7, #4]
 800336a:	685b      	ldr	r3, [r3, #4]
 800336c:	00db      	lsls	r3, r3, #3
 800336e:	429a      	cmp	r2, r3
 8003370:	d1eb      	bne.n	800334a <HAL_RCC_ClockConfig+0x1ba>

    }

    /* Decreasing the BUS frequency divider */
   /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003372:	687b      	ldr	r3, [r7, #4]
 8003374:	681b      	ldr	r3, [r3, #0]
 8003376:	f003 0302 	and.w	r3, r3, #2
 800337a:	2b00      	cmp	r3, #0
 800337c:	d010      	beq.n	80033a0 <HAL_RCC_ClockConfig+0x210>
  {
#if defined(RCC_D1CFGR_HPRE)
    if((RCC_ClkInitStruct->AHBCLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 800337e:	687b      	ldr	r3, [r7, #4]
 8003380:	68da      	ldr	r2, [r3, #12]
 8003382:	4b14      	ldr	r3, [pc, #80]	; (80033d4 <HAL_RCC_ClockConfig+0x244>)
 8003384:	699b      	ldr	r3, [r3, #24]
 8003386:	f003 030f 	and.w	r3, r3, #15
 800338a:	429a      	cmp	r2, r3
 800338c:	d208      	bcs.n	80033a0 <HAL_RCC_ClockConfig+0x210>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800338e:	4b11      	ldr	r3, [pc, #68]	; (80033d4 <HAL_RCC_ClockConfig+0x244>)
 8003390:	699b      	ldr	r3, [r3, #24]
 8003392:	f023 020f 	bic.w	r2, r3, #15
 8003396:	687b      	ldr	r3, [r7, #4]
 8003398:	68db      	ldr	r3, [r3, #12]
 800339a:	490e      	ldr	r1, [pc, #56]	; (80033d4 <HAL_RCC_ClockConfig+0x244>)
 800339c:	4313      	orrs	r3, r2
 800339e:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80033a0:	4b0b      	ldr	r3, [pc, #44]	; (80033d0 <HAL_RCC_ClockConfig+0x240>)
 80033a2:	681b      	ldr	r3, [r3, #0]
 80033a4:	f003 030f 	and.w	r3, r3, #15
 80033a8:	683a      	ldr	r2, [r7, #0]
 80033aa:	429a      	cmp	r2, r3
 80033ac:	d214      	bcs.n	80033d8 <HAL_RCC_ClockConfig+0x248>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80033ae:	4b08      	ldr	r3, [pc, #32]	; (80033d0 <HAL_RCC_ClockConfig+0x240>)
 80033b0:	681b      	ldr	r3, [r3, #0]
 80033b2:	f023 020f 	bic.w	r2, r3, #15
 80033b6:	4906      	ldr	r1, [pc, #24]	; (80033d0 <HAL_RCC_ClockConfig+0x240>)
 80033b8:	683b      	ldr	r3, [r7, #0]
 80033ba:	4313      	orrs	r3, r2
 80033bc:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80033be:	4b04      	ldr	r3, [pc, #16]	; (80033d0 <HAL_RCC_ClockConfig+0x240>)
 80033c0:	681b      	ldr	r3, [r3, #0]
 80033c2:	f003 030f 	and.w	r3, r3, #15
 80033c6:	683a      	ldr	r2, [r7, #0]
 80033c8:	429a      	cmp	r2, r3
 80033ca:	d005      	beq.n	80033d8 <HAL_RCC_ClockConfig+0x248>
    {
      return HAL_ERROR;
 80033cc:	2301      	movs	r3, #1
 80033ce:	e086      	b.n	80034de <HAL_RCC_ClockConfig+0x34e>
 80033d0:	52002000 	.word	0x52002000
 80033d4:	58024400 	.word	0x58024400
    }
 }

  /*-------------------------- D1PCLK1/CDPCLK Configuration ---------------------------*/
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 80033d8:	687b      	ldr	r3, [r7, #4]
 80033da:	681b      	ldr	r3, [r3, #0]
 80033dc:	f003 0304 	and.w	r3, r3, #4
 80033e0:	2b00      	cmp	r3, #0
 80033e2:	d010      	beq.n	8003406 <HAL_RCC_ClockConfig+0x276>
 {
#if defined(RCC_D1CFGR_D1PPRE)
   if((RCC_ClkInitStruct->APB3CLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 80033e4:	687b      	ldr	r3, [r7, #4]
 80033e6:	691a      	ldr	r2, [r3, #16]
 80033e8:	4b3f      	ldr	r3, [pc, #252]	; (80034e8 <HAL_RCC_ClockConfig+0x358>)
 80033ea:	699b      	ldr	r3, [r3, #24]
 80033ec:	f003 0370 	and.w	r3, r3, #112	; 0x70
 80033f0:	429a      	cmp	r2, r3
 80033f2:	d208      	bcs.n	8003406 <HAL_RCC_ClockConfig+0x276>
   {
     assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
     MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 80033f4:	4b3c      	ldr	r3, [pc, #240]	; (80034e8 <HAL_RCC_ClockConfig+0x358>)
 80033f6:	699b      	ldr	r3, [r3, #24]
 80033f8:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 80033fc:	687b      	ldr	r3, [r7, #4]
 80033fe:	691b      	ldr	r3, [r3, #16]
 8003400:	4939      	ldr	r1, [pc, #228]	; (80034e8 <HAL_RCC_ClockConfig+0x358>)
 8003402:	4313      	orrs	r3, r2
 8003404:	618b      	str	r3, [r1, #24]
   }
#endif
 }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003406:	687b      	ldr	r3, [r7, #4]
 8003408:	681b      	ldr	r3, [r3, #0]
 800340a:	f003 0308 	and.w	r3, r3, #8
 800340e:	2b00      	cmp	r3, #0
 8003410:	d010      	beq.n	8003434 <HAL_RCC_ClockConfig+0x2a4>
 {
#if defined(RCC_D2CFGR_D2PPRE1)
   if((RCC_ClkInitStruct->APB1CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 8003412:	687b      	ldr	r3, [r7, #4]
 8003414:	695a      	ldr	r2, [r3, #20]
 8003416:	4b34      	ldr	r3, [pc, #208]	; (80034e8 <HAL_RCC_ClockConfig+0x358>)
 8003418:	69db      	ldr	r3, [r3, #28]
 800341a:	f003 0370 	and.w	r3, r3, #112	; 0x70
 800341e:	429a      	cmp	r2, r3
 8003420:	d208      	bcs.n	8003434 <HAL_RCC_ClockConfig+0x2a4>
   {
     assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
     MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 8003422:	4b31      	ldr	r3, [pc, #196]	; (80034e8 <HAL_RCC_ClockConfig+0x358>)
 8003424:	69db      	ldr	r3, [r3, #28]
 8003426:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 800342a:	687b      	ldr	r3, [r7, #4]
 800342c:	695b      	ldr	r3, [r3, #20]
 800342e:	492e      	ldr	r1, [pc, #184]	; (80034e8 <HAL_RCC_ClockConfig+0x358>)
 8003430:	4313      	orrs	r3, r2
 8003432:	61cb      	str	r3, [r1, #28]
   }
#endif
 }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003434:	687b      	ldr	r3, [r7, #4]
 8003436:	681b      	ldr	r3, [r3, #0]
 8003438:	f003 0310 	and.w	r3, r3, #16
 800343c:	2b00      	cmp	r3, #0
 800343e:	d010      	beq.n	8003462 <HAL_RCC_ClockConfig+0x2d2>
 {
#if defined (RCC_D2CFGR_D2PPRE2)
   if((RCC_ClkInitStruct->APB2CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 8003440:	687b      	ldr	r3, [r7, #4]
 8003442:	699a      	ldr	r2, [r3, #24]
 8003444:	4b28      	ldr	r3, [pc, #160]	; (80034e8 <HAL_RCC_ClockConfig+0x358>)
 8003446:	69db      	ldr	r3, [r3, #28]
 8003448:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 800344c:	429a      	cmp	r2, r3
 800344e:	d208      	bcs.n	8003462 <HAL_RCC_ClockConfig+0x2d2>
   {
     assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
     MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 8003450:	4b25      	ldr	r3, [pc, #148]	; (80034e8 <HAL_RCC_ClockConfig+0x358>)
 8003452:	69db      	ldr	r3, [r3, #28]
 8003454:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8003458:	687b      	ldr	r3, [r7, #4]
 800345a:	699b      	ldr	r3, [r3, #24]
 800345c:	4922      	ldr	r1, [pc, #136]	; (80034e8 <HAL_RCC_ClockConfig+0x358>)
 800345e:	4313      	orrs	r3, r2
 8003460:	61cb      	str	r3, [r1, #28]
   }
#endif
 }

  /*-------------------------- D3PCLK1/SRDPCLK1 Configuration ---------------------------*/
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 8003462:	687b      	ldr	r3, [r7, #4]
 8003464:	681b      	ldr	r3, [r3, #0]
 8003466:	f003 0320 	and.w	r3, r3, #32
 800346a:	2b00      	cmp	r3, #0
 800346c:	d010      	beq.n	8003490 <HAL_RCC_ClockConfig+0x300>
 {
#if defined(RCC_D3CFGR_D3PPRE)
   if((RCC_ClkInitStruct->APB4CLKDivider) < (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 800346e:	687b      	ldr	r3, [r7, #4]
 8003470:	69da      	ldr	r2, [r3, #28]
 8003472:	4b1d      	ldr	r3, [pc, #116]	; (80034e8 <HAL_RCC_ClockConfig+0x358>)
 8003474:	6a1b      	ldr	r3, [r3, #32]
 8003476:	f003 0370 	and.w	r3, r3, #112	; 0x70
 800347a:	429a      	cmp	r2, r3
 800347c:	d208      	bcs.n	8003490 <HAL_RCC_ClockConfig+0x300>
   {
     assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
     MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider) );
 800347e:	4b1a      	ldr	r3, [pc, #104]	; (80034e8 <HAL_RCC_ClockConfig+0x358>)
 8003480:	6a1b      	ldr	r3, [r3, #32]
 8003482:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8003486:	687b      	ldr	r3, [r7, #4]
 8003488:	69db      	ldr	r3, [r3, #28]
 800348a:	4917      	ldr	r1, [pc, #92]	; (80034e8 <HAL_RCC_ClockConfig+0x358>)
 800348c:	4313      	orrs	r3, r2
 800348e:	620b      	str	r3, [r1, #32]
#endif
 }

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 8003490:	f000 f834 	bl	80034fc <HAL_RCC_GetSysClockFreq>
 8003494:	4602      	mov	r2, r0
 8003496:	4b14      	ldr	r3, [pc, #80]	; (80034e8 <HAL_RCC_ClockConfig+0x358>)
 8003498:	699b      	ldr	r3, [r3, #24]
 800349a:	0a1b      	lsrs	r3, r3, #8
 800349c:	f003 030f 	and.w	r3, r3, #15
 80034a0:	4912      	ldr	r1, [pc, #72]	; (80034ec <HAL_RCC_ClockConfig+0x35c>)
 80034a2:	5ccb      	ldrb	r3, [r1, r3]
 80034a4:	f003 031f 	and.w	r3, r3, #31
 80034a8:	fa22 f303 	lsr.w	r3, r2, r3
 80034ac:	613b      	str	r3, [r7, #16]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 80034ae:	4b0e      	ldr	r3, [pc, #56]	; (80034e8 <HAL_RCC_ClockConfig+0x358>)
 80034b0:	699b      	ldr	r3, [r3, #24]
 80034b2:	f003 030f 	and.w	r3, r3, #15
 80034b6:	4a0d      	ldr	r2, [pc, #52]	; (80034ec <HAL_RCC_ClockConfig+0x35c>)
 80034b8:	5cd3      	ldrb	r3, [r2, r3]
 80034ba:	f003 031f 	and.w	r3, r3, #31
 80034be:	693a      	ldr	r2, [r7, #16]
 80034c0:	fa22 f303 	lsr.w	r3, r2, r3
 80034c4:	4a0a      	ldr	r2, [pc, #40]	; (80034f0 <HAL_RCC_ClockConfig+0x360>)
 80034c6:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 80034c8:	4a0a      	ldr	r2, [pc, #40]	; (80034f4 <HAL_RCC_ClockConfig+0x364>)
 80034ca:	693b      	ldr	r3, [r7, #16]
 80034cc:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Configure the source of time base considering new system clocks settings*/
  halstatus = HAL_InitTick (uwTickPrio);
 80034ce:	4b0a      	ldr	r3, [pc, #40]	; (80034f8 <HAL_RCC_ClockConfig+0x368>)
 80034d0:	681b      	ldr	r3, [r3, #0]
 80034d2:	4618      	mov	r0, r3
 80034d4:	f7fd fbb0 	bl	8000c38 <HAL_InitTick>
 80034d8:	4603      	mov	r3, r0
 80034da:	73fb      	strb	r3, [r7, #15]

  return halstatus;
 80034dc:	7bfb      	ldrb	r3, [r7, #15]
}
 80034de:	4618      	mov	r0, r3
 80034e0:	3718      	adds	r7, #24
 80034e2:	46bd      	mov	sp, r7
 80034e4:	bd80      	pop	{r7, pc}
 80034e6:	bf00      	nop
 80034e8:	58024400 	.word	0x58024400
 80034ec:	08009f24 	.word	0x08009f24
 80034f0:	24000004 	.word	0x24000004
 80034f4:	24000000 	.word	0x24000000
 80034f8:	24000008 	.word	0x24000008

080034fc <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80034fc:	b480      	push	{r7}
 80034fe:	b089      	sub	sp, #36	; 0x24
 8003500:	af00      	add	r7, sp, #0
  float_t fracn1, pllvco;
  uint32_t sysclockfreq;

  /* Get SYSCLK source -------------------------------------------------------*/

  switch (RCC->CFGR & RCC_CFGR_SWS)
 8003502:	4bb3      	ldr	r3, [pc, #716]	; (80037d0 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8003504:	691b      	ldr	r3, [r3, #16]
 8003506:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800350a:	2b18      	cmp	r3, #24
 800350c:	f200 8155 	bhi.w	80037ba <HAL_RCC_GetSysClockFreq+0x2be>
 8003510:	a201      	add	r2, pc, #4	; (adr r2, 8003518 <HAL_RCC_GetSysClockFreq+0x1c>)
 8003512:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003516:	bf00      	nop
 8003518:	0800357d 	.word	0x0800357d
 800351c:	080037bb 	.word	0x080037bb
 8003520:	080037bb 	.word	0x080037bb
 8003524:	080037bb 	.word	0x080037bb
 8003528:	080037bb 	.word	0x080037bb
 800352c:	080037bb 	.word	0x080037bb
 8003530:	080037bb 	.word	0x080037bb
 8003534:	080037bb 	.word	0x080037bb
 8003538:	080035a3 	.word	0x080035a3
 800353c:	080037bb 	.word	0x080037bb
 8003540:	080037bb 	.word	0x080037bb
 8003544:	080037bb 	.word	0x080037bb
 8003548:	080037bb 	.word	0x080037bb
 800354c:	080037bb 	.word	0x080037bb
 8003550:	080037bb 	.word	0x080037bb
 8003554:	080037bb 	.word	0x080037bb
 8003558:	080035a9 	.word	0x080035a9
 800355c:	080037bb 	.word	0x080037bb
 8003560:	080037bb 	.word	0x080037bb
 8003564:	080037bb 	.word	0x080037bb
 8003568:	080037bb 	.word	0x080037bb
 800356c:	080037bb 	.word	0x080037bb
 8003570:	080037bb 	.word	0x080037bb
 8003574:	080037bb 	.word	0x080037bb
 8003578:	080035af 	.word	0x080035af
  {
  case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */

   if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800357c:	4b94      	ldr	r3, [pc, #592]	; (80037d0 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800357e:	681b      	ldr	r3, [r3, #0]
 8003580:	f003 0320 	and.w	r3, r3, #32
 8003584:	2b00      	cmp	r3, #0
 8003586:	d009      	beq.n	800359c <HAL_RCC_GetSysClockFreq+0xa0>
      {
        sysclockfreq = (uint32_t) (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 8003588:	4b91      	ldr	r3, [pc, #580]	; (80037d0 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800358a:	681b      	ldr	r3, [r3, #0]
 800358c:	08db      	lsrs	r3, r3, #3
 800358e:	f003 0303 	and.w	r3, r3, #3
 8003592:	4a90      	ldr	r2, [pc, #576]	; (80037d4 <HAL_RCC_GetSysClockFreq+0x2d8>)
 8003594:	fa22 f303 	lsr.w	r3, r2, r3
 8003598:	61bb      	str	r3, [r7, #24]
      else
      {
        sysclockfreq = (uint32_t) HSI_VALUE;
      }

    break;
 800359a:	e111      	b.n	80037c0 <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = (uint32_t) HSI_VALUE;
 800359c:	4b8d      	ldr	r3, [pc, #564]	; (80037d4 <HAL_RCC_GetSysClockFreq+0x2d8>)
 800359e:	61bb      	str	r3, [r7, #24]
    break;
 80035a0:	e10e      	b.n	80037c0 <HAL_RCC_GetSysClockFreq+0x2c4>

  case RCC_CFGR_SWS_CSI:  /* CSI used as system clock  source */
    sysclockfreq = CSI_VALUE;
 80035a2:	4b8d      	ldr	r3, [pc, #564]	; (80037d8 <HAL_RCC_GetSysClockFreq+0x2dc>)
 80035a4:	61bb      	str	r3, [r7, #24]
    break;
 80035a6:	e10b      	b.n	80037c0 <HAL_RCC_GetSysClockFreq+0x2c4>

  case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    sysclockfreq = HSE_VALUE;
 80035a8:	4b8c      	ldr	r3, [pc, #560]	; (80037dc <HAL_RCC_GetSysClockFreq+0x2e0>)
 80035aa:	61bb      	str	r3, [r7, #24]
    break;
 80035ac:	e108      	b.n	80037c0 <HAL_RCC_GetSysClockFreq+0x2c4>
  case RCC_CFGR_SWS_PLL1:  /* PLL1 used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 80035ae:	4b88      	ldr	r3, [pc, #544]	; (80037d0 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80035b0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80035b2:	f003 0303 	and.w	r3, r3, #3
 80035b6:	617b      	str	r3, [r7, #20]
    pllm = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1)>> 4)  ;
 80035b8:	4b85      	ldr	r3, [pc, #532]	; (80037d0 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80035ba:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80035bc:	091b      	lsrs	r3, r3, #4
 80035be:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80035c2:	613b      	str	r3, [r7, #16]
    pllfracen = ((RCC-> PLLCFGR & RCC_PLLCFGR_PLL1FRACEN)>>RCC_PLLCFGR_PLL1FRACEN_Pos);
 80035c4:	4b82      	ldr	r3, [pc, #520]	; (80037d0 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80035c6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80035c8:	f003 0301 	and.w	r3, r3, #1
 80035cc:	60fb      	str	r3, [r7, #12]
    fracn1 = (float_t)(uint32_t)(pllfracen* ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1)>> 3));
 80035ce:	4b80      	ldr	r3, [pc, #512]	; (80037d0 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80035d0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80035d2:	08db      	lsrs	r3, r3, #3
 80035d4:	f3c3 030c 	ubfx	r3, r3, #0, #13
 80035d8:	68fa      	ldr	r2, [r7, #12]
 80035da:	fb02 f303 	mul.w	r3, r2, r3
 80035de:	ee07 3a90 	vmov	s15, r3
 80035e2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80035e6:	edc7 7a02 	vstr	s15, [r7, #8]

    if (pllm != 0U)
 80035ea:	693b      	ldr	r3, [r7, #16]
 80035ec:	2b00      	cmp	r3, #0
 80035ee:	f000 80e1 	beq.w	80037b4 <HAL_RCC_GetSysClockFreq+0x2b8>
 80035f2:	697b      	ldr	r3, [r7, #20]
 80035f4:	2b02      	cmp	r3, #2
 80035f6:	f000 8083 	beq.w	8003700 <HAL_RCC_GetSysClockFreq+0x204>
 80035fa:	697b      	ldr	r3, [r7, #20]
 80035fc:	2b02      	cmp	r3, #2
 80035fe:	f200 80a1 	bhi.w	8003744 <HAL_RCC_GetSysClockFreq+0x248>
 8003602:	697b      	ldr	r3, [r7, #20]
 8003604:	2b00      	cmp	r3, #0
 8003606:	d003      	beq.n	8003610 <HAL_RCC_GetSysClockFreq+0x114>
 8003608:	697b      	ldr	r3, [r7, #20]
 800360a:	2b01      	cmp	r3, #1
 800360c:	d056      	beq.n	80036bc <HAL_RCC_GetSysClockFreq+0x1c0>
 800360e:	e099      	b.n	8003744 <HAL_RCC_GetSysClockFreq+0x248>
    {
      switch (pllsource)
      {
      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

       if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8003610:	4b6f      	ldr	r3, [pc, #444]	; (80037d0 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8003612:	681b      	ldr	r3, [r3, #0]
 8003614:	f003 0320 	and.w	r3, r3, #32
 8003618:	2b00      	cmp	r3, #0
 800361a:	d02d      	beq.n	8003678 <HAL_RCC_GetSysClockFreq+0x17c>
        {
          hsivalue= (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 800361c:	4b6c      	ldr	r3, [pc, #432]	; (80037d0 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800361e:	681b      	ldr	r3, [r3, #0]
 8003620:	08db      	lsrs	r3, r3, #3
 8003622:	f003 0303 	and.w	r3, r3, #3
 8003626:	4a6b      	ldr	r2, [pc, #428]	; (80037d4 <HAL_RCC_GetSysClockFreq+0x2d8>)
 8003628:	fa22 f303 	lsr.w	r3, r2, r3
 800362c:	607b      	str	r3, [r7, #4]
          pllvco = ( (float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 800362e:	687b      	ldr	r3, [r7, #4]
 8003630:	ee07 3a90 	vmov	s15, r3
 8003634:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8003638:	693b      	ldr	r3, [r7, #16]
 800363a:	ee07 3a90 	vmov	s15, r3
 800363e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003642:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8003646:	4b62      	ldr	r3, [pc, #392]	; (80037d0 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8003648:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800364a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800364e:	ee07 3a90 	vmov	s15, r3
 8003652:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8003656:	ed97 6a02 	vldr	s12, [r7, #8]
 800365a:	eddf 5a61 	vldr	s11, [pc, #388]	; 80037e0 <HAL_RCC_GetSysClockFreq+0x2e4>
 800365e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8003662:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8003666:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800366a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800366e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003672:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
        }
        break;
 8003676:	e087      	b.n	8003788 <HAL_RCC_GetSysClockFreq+0x28c>
          pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8003678:	693b      	ldr	r3, [r7, #16]
 800367a:	ee07 3a90 	vmov	s15, r3
 800367e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003682:	eddf 6a58 	vldr	s13, [pc, #352]	; 80037e4 <HAL_RCC_GetSysClockFreq+0x2e8>
 8003686:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800368a:	4b51      	ldr	r3, [pc, #324]	; (80037d0 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800368c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800368e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003692:	ee07 3a90 	vmov	s15, r3
 8003696:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800369a:	ed97 6a02 	vldr	s12, [r7, #8]
 800369e:	eddf 5a50 	vldr	s11, [pc, #320]	; 80037e0 <HAL_RCC_GetSysClockFreq+0x2e4>
 80036a2:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80036a6:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80036aa:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80036ae:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80036b2:	ee67 7a27 	vmul.f32	s15, s14, s15
 80036b6:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 80036ba:	e065      	b.n	8003788 <HAL_RCC_GetSysClockFreq+0x28c>

      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 80036bc:	693b      	ldr	r3, [r7, #16]
 80036be:	ee07 3a90 	vmov	s15, r3
 80036c2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80036c6:	eddf 6a48 	vldr	s13, [pc, #288]	; 80037e8 <HAL_RCC_GetSysClockFreq+0x2ec>
 80036ca:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80036ce:	4b40      	ldr	r3, [pc, #256]	; (80037d0 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80036d0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80036d2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80036d6:	ee07 3a90 	vmov	s15, r3
 80036da:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80036de:	ed97 6a02 	vldr	s12, [r7, #8]
 80036e2:	eddf 5a3f 	vldr	s11, [pc, #252]	; 80037e0 <HAL_RCC_GetSysClockFreq+0x2e4>
 80036e6:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80036ea:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80036ee:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80036f2:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80036f6:	ee67 7a27 	vmul.f32	s15, s14, s15
 80036fa:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 80036fe:	e043      	b.n	8003788 <HAL_RCC_GetSysClockFreq+0x28c>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8003700:	693b      	ldr	r3, [r7, #16]
 8003702:	ee07 3a90 	vmov	s15, r3
 8003706:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800370a:	eddf 6a38 	vldr	s13, [pc, #224]	; 80037ec <HAL_RCC_GetSysClockFreq+0x2f0>
 800370e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8003712:	4b2f      	ldr	r3, [pc, #188]	; (80037d0 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8003714:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003716:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800371a:	ee07 3a90 	vmov	s15, r3
 800371e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8003722:	ed97 6a02 	vldr	s12, [r7, #8]
 8003726:	eddf 5a2e 	vldr	s11, [pc, #184]	; 80037e0 <HAL_RCC_GetSysClockFreq+0x2e4>
 800372a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800372e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8003732:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8003736:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800373a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800373e:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8003742:	e021      	b.n	8003788 <HAL_RCC_GetSysClockFreq+0x28c>

      default:
        pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8003744:	693b      	ldr	r3, [r7, #16]
 8003746:	ee07 3a90 	vmov	s15, r3
 800374a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800374e:	eddf 6a26 	vldr	s13, [pc, #152]	; 80037e8 <HAL_RCC_GetSysClockFreq+0x2ec>
 8003752:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8003756:	4b1e      	ldr	r3, [pc, #120]	; (80037d0 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8003758:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800375a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800375e:	ee07 3a90 	vmov	s15, r3
 8003762:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8003766:	ed97 6a02 	vldr	s12, [r7, #8]
 800376a:	eddf 5a1d 	vldr	s11, [pc, #116]	; 80037e0 <HAL_RCC_GetSysClockFreq+0x2e4>
 800376e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8003772:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8003776:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800377a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800377e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003782:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8003786:	bf00      	nop
      }
      pllp = (((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >>9) + 1U ) ;
 8003788:	4b11      	ldr	r3, [pc, #68]	; (80037d0 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800378a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800378c:	0a5b      	lsrs	r3, r3, #9
 800378e:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8003792:	3301      	adds	r3, #1
 8003794:	603b      	str	r3, [r7, #0]
      sysclockfreq =  (uint32_t)(float_t)(pllvco/(float_t)pllp);
 8003796:	683b      	ldr	r3, [r7, #0]
 8003798:	ee07 3a90 	vmov	s15, r3
 800379c:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 80037a0:	edd7 6a07 	vldr	s13, [r7, #28]
 80037a4:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80037a8:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80037ac:	ee17 3a90 	vmov	r3, s15
 80037b0:	61bb      	str	r3, [r7, #24]
    }
    else
    {
      sysclockfreq = 0U;
    }
    break;
 80037b2:	e005      	b.n	80037c0 <HAL_RCC_GetSysClockFreq+0x2c4>
      sysclockfreq = 0U;
 80037b4:	2300      	movs	r3, #0
 80037b6:	61bb      	str	r3, [r7, #24]
    break;
 80037b8:	e002      	b.n	80037c0 <HAL_RCC_GetSysClockFreq+0x2c4>

  default:
    sysclockfreq = CSI_VALUE;
 80037ba:	4b07      	ldr	r3, [pc, #28]	; (80037d8 <HAL_RCC_GetSysClockFreq+0x2dc>)
 80037bc:	61bb      	str	r3, [r7, #24]
    break;
 80037be:	bf00      	nop
  }

  return sysclockfreq;
 80037c0:	69bb      	ldr	r3, [r7, #24]
}
 80037c2:	4618      	mov	r0, r3
 80037c4:	3724      	adds	r7, #36	; 0x24
 80037c6:	46bd      	mov	sp, r7
 80037c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037cc:	4770      	bx	lr
 80037ce:	bf00      	nop
 80037d0:	58024400 	.word	0x58024400
 80037d4:	03d09000 	.word	0x03d09000
 80037d8:	003d0900 	.word	0x003d0900
 80037dc:	017d7840 	.word	0x017d7840
 80037e0:	46000000 	.word	0x46000000
 80037e4:	4c742400 	.word	0x4c742400
 80037e8:	4a742400 	.word	0x4a742400
 80037ec:	4bbebc20 	.word	0x4bbebc20

080037f0 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemD2Clock CMSIS variable is used to store System domain2 Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80037f0:	b580      	push	{r7, lr}
 80037f2:	b082      	sub	sp, #8
 80037f4:	af00      	add	r7, sp, #0
uint32_t common_system_clock;

#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos] & 0x1FU);
 80037f6:	f7ff fe81 	bl	80034fc <HAL_RCC_GetSysClockFreq>
 80037fa:	4602      	mov	r2, r0
 80037fc:	4b10      	ldr	r3, [pc, #64]	; (8003840 <HAL_RCC_GetHCLKFreq+0x50>)
 80037fe:	699b      	ldr	r3, [r3, #24]
 8003800:	0a1b      	lsrs	r3, r3, #8
 8003802:	f003 030f 	and.w	r3, r3, #15
 8003806:	490f      	ldr	r1, [pc, #60]	; (8003844 <HAL_RCC_GetHCLKFreq+0x54>)
 8003808:	5ccb      	ldrb	r3, [r1, r3]
 800380a:	f003 031f 	and.w	r3, r3, #31
 800380e:	fa22 f303 	lsr.w	r3, r2, r3
 8003812:	607b      	str	r3, [r7, #4]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos] & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8003814:	4b0a      	ldr	r3, [pc, #40]	; (8003840 <HAL_RCC_GetHCLKFreq+0x50>)
 8003816:	699b      	ldr	r3, [r3, #24]
 8003818:	f003 030f 	and.w	r3, r3, #15
 800381c:	4a09      	ldr	r2, [pc, #36]	; (8003844 <HAL_RCC_GetHCLKFreq+0x54>)
 800381e:	5cd3      	ldrb	r3, [r2, r3]
 8003820:	f003 031f 	and.w	r3, r3, #31
 8003824:	687a      	ldr	r2, [r7, #4]
 8003826:	fa22 f303 	lsr.w	r3, r2, r3
 800382a:	4a07      	ldr	r2, [pc, #28]	; (8003848 <HAL_RCC_GetHCLKFreq+0x58>)
 800382c:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 800382e:	4a07      	ldr	r2, [pc, #28]	; (800384c <HAL_RCC_GetHCLKFreq+0x5c>)
 8003830:	687b      	ldr	r3, [r7, #4]
 8003832:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  return SystemD2Clock;
 8003834:	4b04      	ldr	r3, [pc, #16]	; (8003848 <HAL_RCC_GetHCLKFreq+0x58>)
 8003836:	681b      	ldr	r3, [r3, #0]
}
 8003838:	4618      	mov	r0, r3
 800383a:	3708      	adds	r7, #8
 800383c:	46bd      	mov	sp, r7
 800383e:	bd80      	pop	{r7, pc}
 8003840:	58024400 	.word	0x58024400
 8003844:	08009f24 	.word	0x08009f24
 8003848:	24000004 	.word	0x24000004
 800384c:	24000000 	.word	0x24000000

08003850 <HAL_RCCEx_PeriphCLKConfig>:
  * (*) : Available on some STM32H7 lines only.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8003850:	b580      	push	{r7, lr}
 8003852:	b086      	sub	sp, #24
 8003854:	af00      	add	r7, sp, #0
 8003856:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8003858:	2300      	movs	r3, #0
 800385a:	75fb      	strb	r3, [r7, #23]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 800385c:	2300      	movs	r3, #0
 800385e:	75bb      	strb	r3, [r7, #22]

  /*---------------------------- SPDIFRX configuration -------------------------------*/

  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8003860:	687b      	ldr	r3, [r7, #4]
 8003862:	681b      	ldr	r3, [r3, #0]
 8003864:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8003868:	2b00      	cmp	r3, #0
 800386a:	d03f      	beq.n	80038ec <HAL_RCCEx_PeriphCLKConfig+0x9c>
  {

    switch(PeriphClkInit->SpdifrxClockSelection)
 800386c:	687b      	ldr	r3, [r7, #4]
 800386e:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8003870:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8003874:	d02a      	beq.n	80038cc <HAL_RCCEx_PeriphCLKConfig+0x7c>
 8003876:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 800387a:	d824      	bhi.n	80038c6 <HAL_RCCEx_PeriphCLKConfig+0x76>
 800387c:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8003880:	d018      	beq.n	80038b4 <HAL_RCCEx_PeriphCLKConfig+0x64>
 8003882:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8003886:	d81e      	bhi.n	80038c6 <HAL_RCCEx_PeriphCLKConfig+0x76>
 8003888:	2b00      	cmp	r3, #0
 800388a:	d003      	beq.n	8003894 <HAL_RCCEx_PeriphCLKConfig+0x44>
 800388c:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8003890:	d007      	beq.n	80038a2 <HAL_RCCEx_PeriphCLKConfig+0x52>
 8003892:	e018      	b.n	80038c6 <HAL_RCCEx_PeriphCLKConfig+0x76>
    {
    case RCC_SPDIFRXCLKSOURCE_PLL:      /* PLL is used as clock source for SPDIFRX*/
      /* Enable PLL1Q Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8003894:	4ba3      	ldr	r3, [pc, #652]	; (8003b24 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 8003896:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003898:	4aa2      	ldr	r2, [pc, #648]	; (8003b24 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 800389a:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800389e:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SPDIFRX clock source configuration done later after clock selection check */
      break;
 80038a0:	e015      	b.n	80038ce <HAL_RCCEx_PeriphCLKConfig+0x7e>

    case RCC_SPDIFRXCLKSOURCE_PLL2: /* PLL2 is used as clock source for SPDIFRX*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 80038a2:	687b      	ldr	r3, [r7, #4]
 80038a4:	3304      	adds	r3, #4
 80038a6:	2102      	movs	r1, #2
 80038a8:	4618      	mov	r0, r3
 80038aa:	f000 ff17 	bl	80046dc <RCCEx_PLL2_Config>
 80038ae:	4603      	mov	r3, r0
 80038b0:	75fb      	strb	r3, [r7, #23]

      /* SPDIFRX clock source configuration done later after clock selection check */
      break;
 80038b2:	e00c      	b.n	80038ce <HAL_RCCEx_PeriphCLKConfig+0x7e>

    case RCC_SPDIFRXCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPDIFRX*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 80038b4:	687b      	ldr	r3, [r7, #4]
 80038b6:	3324      	adds	r3, #36	; 0x24
 80038b8:	2102      	movs	r1, #2
 80038ba:	4618      	mov	r0, r3
 80038bc:	f000 ffc0 	bl	8004840 <RCCEx_PLL3_Config>
 80038c0:	4603      	mov	r3, r0
 80038c2:	75fb      	strb	r3, [r7, #23]

      /* SPDIFRX clock source configuration done later after clock selection check */
      break;
 80038c4:	e003      	b.n	80038ce <HAL_RCCEx_PeriphCLKConfig+0x7e>
      /* Internal OSC clock is used as source of SPDIFRX clock*/
      /* SPDIFRX clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80038c6:	2301      	movs	r3, #1
 80038c8:	75fb      	strb	r3, [r7, #23]
      break;
 80038ca:	e000      	b.n	80038ce <HAL_RCCEx_PeriphCLKConfig+0x7e>
      break;
 80038cc:	bf00      	nop
    }

    if(ret == HAL_OK)
 80038ce:	7dfb      	ldrb	r3, [r7, #23]
 80038d0:	2b00      	cmp	r3, #0
 80038d2:	d109      	bne.n	80038e8 <HAL_RCCEx_PeriphCLKConfig+0x98>
    {
      /* Set the source of SPDIFRX clock*/
      __HAL_RCC_SPDIFRX_CONFIG(PeriphClkInit->SpdifrxClockSelection);
 80038d4:	4b93      	ldr	r3, [pc, #588]	; (8003b24 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 80038d6:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80038d8:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 80038dc:	687b      	ldr	r3, [r7, #4]
 80038de:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80038e0:	4990      	ldr	r1, [pc, #576]	; (8003b24 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 80038e2:	4313      	orrs	r3, r2
 80038e4:	650b      	str	r3, [r1, #80]	; 0x50
 80038e6:	e001      	b.n	80038ec <HAL_RCCEx_PeriphCLKConfig+0x9c>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80038e8:	7dfb      	ldrb	r3, [r7, #23]
 80038ea:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- SAI1 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 80038ec:	687b      	ldr	r3, [r7, #4]
 80038ee:	681b      	ldr	r3, [r3, #0]
 80038f0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80038f4:	2b00      	cmp	r3, #0
 80038f6:	d03d      	beq.n	8003974 <HAL_RCCEx_PeriphCLKConfig+0x124>
  {
    switch(PeriphClkInit->Sai1ClockSelection)
 80038f8:	687b      	ldr	r3, [r7, #4]
 80038fa:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80038fc:	2b04      	cmp	r3, #4
 80038fe:	d826      	bhi.n	800394e <HAL_RCCEx_PeriphCLKConfig+0xfe>
 8003900:	a201      	add	r2, pc, #4	; (adr r2, 8003908 <HAL_RCCEx_PeriphCLKConfig+0xb8>)
 8003902:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003906:	bf00      	nop
 8003908:	0800391d 	.word	0x0800391d
 800390c:	0800392b 	.word	0x0800392b
 8003910:	0800393d 	.word	0x0800393d
 8003914:	08003955 	.word	0x08003955
 8003918:	08003955 	.word	0x08003955
    {
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800391c:	4b81      	ldr	r3, [pc, #516]	; (8003b24 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 800391e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003920:	4a80      	ldr	r2, [pc, #512]	; (8003b24 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 8003922:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8003926:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 8003928:	e015      	b.n	8003956 <HAL_RCCEx_PeriphCLKConfig+0x106>

    case RCC_SAI1CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI1*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 800392a:	687b      	ldr	r3, [r7, #4]
 800392c:	3304      	adds	r3, #4
 800392e:	2100      	movs	r1, #0
 8003930:	4618      	mov	r0, r3
 8003932:	f000 fed3 	bl	80046dc <RCCEx_PLL2_Config>
 8003936:	4603      	mov	r3, r0
 8003938:	75fb      	strb	r3, [r7, #23]

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 800393a:	e00c      	b.n	8003956 <HAL_RCCEx_PeriphCLKConfig+0x106>

    case RCC_SAI1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI1*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 800393c:	687b      	ldr	r3, [r7, #4]
 800393e:	3324      	adds	r3, #36	; 0x24
 8003940:	2100      	movs	r1, #0
 8003942:	4618      	mov	r0, r3
 8003944:	f000 ff7c 	bl	8004840 <RCCEx_PLL3_Config>
 8003948:	4603      	mov	r3, r0
 800394a:	75fb      	strb	r3, [r7, #23]

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 800394c:	e003      	b.n	8003956 <HAL_RCCEx_PeriphCLKConfig+0x106>
      /* HSI, HSE, or CSI oscillator is used as source of SAI1 clock */
      /* SAI1 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800394e:	2301      	movs	r3, #1
 8003950:	75fb      	strb	r3, [r7, #23]
      break;
 8003952:	e000      	b.n	8003956 <HAL_RCCEx_PeriphCLKConfig+0x106>
      break;
 8003954:	bf00      	nop
    }

    if(ret == HAL_OK)
 8003956:	7dfb      	ldrb	r3, [r7, #23]
 8003958:	2b00      	cmp	r3, #0
 800395a:	d109      	bne.n	8003970 <HAL_RCCEx_PeriphCLKConfig+0x120>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 800395c:	4b71      	ldr	r3, [pc, #452]	; (8003b24 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 800395e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003960:	f023 0207 	bic.w	r2, r3, #7
 8003964:	687b      	ldr	r3, [r7, #4]
 8003966:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003968:	496e      	ldr	r1, [pc, #440]	; (8003b24 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 800396a:	4313      	orrs	r3, r2
 800396c:	650b      	str	r3, [r1, #80]	; 0x50
 800396e:	e001      	b.n	8003974 <HAL_RCCEx_PeriphCLKConfig+0x124>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003970:	7dfb      	ldrb	r3, [r7, #23]
 8003972:	75bb      	strb	r3, [r7, #22]
    }
  }

#if defined(SAI3)
  /*---------------------------- SAI2/3 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI23) == RCC_PERIPHCLK_SAI23)
 8003974:	687b      	ldr	r3, [r7, #4]
 8003976:	681b      	ldr	r3, [r3, #0]
 8003978:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800397c:	2b00      	cmp	r3, #0
 800397e:	d042      	beq.n	8003a06 <HAL_RCCEx_PeriphCLKConfig+0x1b6>
  {
    switch(PeriphClkInit->Sai23ClockSelection)
 8003980:	687b      	ldr	r3, [r7, #4]
 8003982:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003984:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8003988:	d02b      	beq.n	80039e2 <HAL_RCCEx_PeriphCLKConfig+0x192>
 800398a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800398e:	d825      	bhi.n	80039dc <HAL_RCCEx_PeriphCLKConfig+0x18c>
 8003990:	2bc0      	cmp	r3, #192	; 0xc0
 8003992:	d028      	beq.n	80039e6 <HAL_RCCEx_PeriphCLKConfig+0x196>
 8003994:	2bc0      	cmp	r3, #192	; 0xc0
 8003996:	d821      	bhi.n	80039dc <HAL_RCCEx_PeriphCLKConfig+0x18c>
 8003998:	2b80      	cmp	r3, #128	; 0x80
 800399a:	d016      	beq.n	80039ca <HAL_RCCEx_PeriphCLKConfig+0x17a>
 800399c:	2b80      	cmp	r3, #128	; 0x80
 800399e:	d81d      	bhi.n	80039dc <HAL_RCCEx_PeriphCLKConfig+0x18c>
 80039a0:	2b00      	cmp	r3, #0
 80039a2:	d002      	beq.n	80039aa <HAL_RCCEx_PeriphCLKConfig+0x15a>
 80039a4:	2b40      	cmp	r3, #64	; 0x40
 80039a6:	d007      	beq.n	80039b8 <HAL_RCCEx_PeriphCLKConfig+0x168>
 80039a8:	e018      	b.n	80039dc <HAL_RCCEx_PeriphCLKConfig+0x18c>
    {
    case RCC_SAI23CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2/3 */
      /* Enable SAI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80039aa:	4b5e      	ldr	r3, [pc, #376]	; (8003b24 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 80039ac:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80039ae:	4a5d      	ldr	r2, [pc, #372]	; (8003b24 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 80039b0:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80039b4:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SAI2/3 clock source configuration done later after clock selection check */
      break;
 80039b6:	e017      	b.n	80039e8 <HAL_RCCEx_PeriphCLKConfig+0x198>

    case RCC_SAI23CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2/3 */

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 80039b8:	687b      	ldr	r3, [r7, #4]
 80039ba:	3304      	adds	r3, #4
 80039bc:	2100      	movs	r1, #0
 80039be:	4618      	mov	r0, r3
 80039c0:	f000 fe8c 	bl	80046dc <RCCEx_PLL2_Config>
 80039c4:	4603      	mov	r3, r0
 80039c6:	75fb      	strb	r3, [r7, #23]

      /* SAI2/3 clock source configuration done later after clock selection check */
      break;
 80039c8:	e00e      	b.n	80039e8 <HAL_RCCEx_PeriphCLKConfig+0x198>

    case RCC_SAI23CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2/3 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 80039ca:	687b      	ldr	r3, [r7, #4]
 80039cc:	3324      	adds	r3, #36	; 0x24
 80039ce:	2100      	movs	r1, #0
 80039d0:	4618      	mov	r0, r3
 80039d2:	f000 ff35 	bl	8004840 <RCCEx_PLL3_Config>
 80039d6:	4603      	mov	r3, r0
 80039d8:	75fb      	strb	r3, [r7, #23]

      /* SAI2/3 clock source configuration done later after clock selection check */
      break;
 80039da:	e005      	b.n	80039e8 <HAL_RCCEx_PeriphCLKConfig+0x198>
      /* HSI, HSE, or CSI oscillator is used as source of SAI2/3 clock */
      /* SAI2/3 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80039dc:	2301      	movs	r3, #1
 80039de:	75fb      	strb	r3, [r7, #23]
      break;
 80039e0:	e002      	b.n	80039e8 <HAL_RCCEx_PeriphCLKConfig+0x198>
      break;
 80039e2:	bf00      	nop
 80039e4:	e000      	b.n	80039e8 <HAL_RCCEx_PeriphCLKConfig+0x198>
      break;
 80039e6:	bf00      	nop
    }

    if(ret == HAL_OK)
 80039e8:	7dfb      	ldrb	r3, [r7, #23]
 80039ea:	2b00      	cmp	r3, #0
 80039ec:	d109      	bne.n	8003a02 <HAL_RCCEx_PeriphCLKConfig+0x1b2>
    {
      /* Set the source of SAI2/3 clock*/
      __HAL_RCC_SAI23_CONFIG(PeriphClkInit->Sai23ClockSelection);
 80039ee:	4b4d      	ldr	r3, [pc, #308]	; (8003b24 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 80039f0:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80039f2:	f423 72e0 	bic.w	r2, r3, #448	; 0x1c0
 80039f6:	687b      	ldr	r3, [r7, #4]
 80039f8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80039fa:	494a      	ldr	r1, [pc, #296]	; (8003b24 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 80039fc:	4313      	orrs	r3, r2
 80039fe:	650b      	str	r3, [r1, #80]	; 0x50
 8003a00:	e001      	b.n	8003a06 <HAL_RCCEx_PeriphCLKConfig+0x1b6>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003a02:	7dfb      	ldrb	r3, [r7, #23]
 8003a04:	75bb      	strb	r3, [r7, #22]
  }
#endif  /*SAI2B*/

#if defined(SAI4)
  /*---------------------------- SAI4A configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4A) == RCC_PERIPHCLK_SAI4A)
 8003a06:	687b      	ldr	r3, [r7, #4]
 8003a08:	681b      	ldr	r3, [r3, #0]
 8003a0a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003a0e:	2b00      	cmp	r3, #0
 8003a10:	d049      	beq.n	8003aa6 <HAL_RCCEx_PeriphCLKConfig+0x256>
  {
    switch(PeriphClkInit->Sai4AClockSelection)
 8003a12:	687b      	ldr	r3, [r7, #4]
 8003a14:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 8003a18:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8003a1c:	d030      	beq.n	8003a80 <HAL_RCCEx_PeriphCLKConfig+0x230>
 8003a1e:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8003a22:	d82a      	bhi.n	8003a7a <HAL_RCCEx_PeriphCLKConfig+0x22a>
 8003a24:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 8003a28:	d02c      	beq.n	8003a84 <HAL_RCCEx_PeriphCLKConfig+0x234>
 8003a2a:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 8003a2e:	d824      	bhi.n	8003a7a <HAL_RCCEx_PeriphCLKConfig+0x22a>
 8003a30:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8003a34:	d018      	beq.n	8003a68 <HAL_RCCEx_PeriphCLKConfig+0x218>
 8003a36:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8003a3a:	d81e      	bhi.n	8003a7a <HAL_RCCEx_PeriphCLKConfig+0x22a>
 8003a3c:	2b00      	cmp	r3, #0
 8003a3e:	d003      	beq.n	8003a48 <HAL_RCCEx_PeriphCLKConfig+0x1f8>
 8003a40:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8003a44:	d007      	beq.n	8003a56 <HAL_RCCEx_PeriphCLKConfig+0x206>
 8003a46:	e018      	b.n	8003a7a <HAL_RCCEx_PeriphCLKConfig+0x22a>
    {
    case RCC_SAI4ACLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8003a48:	4b36      	ldr	r3, [pc, #216]	; (8003b24 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 8003a4a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003a4c:	4a35      	ldr	r2, [pc, #212]	; (8003b24 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 8003a4e:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8003a52:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 8003a54:	e017      	b.n	8003a86 <HAL_RCCEx_PeriphCLKConfig+0x236>

    case RCC_SAI4ACLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8003a56:	687b      	ldr	r3, [r7, #4]
 8003a58:	3304      	adds	r3, #4
 8003a5a:	2100      	movs	r1, #0
 8003a5c:	4618      	mov	r0, r3
 8003a5e:	f000 fe3d 	bl	80046dc <RCCEx_PLL2_Config>
 8003a62:	4603      	mov	r3, r0
 8003a64:	75fb      	strb	r3, [r7, #23]

      /* SAI2 clock source configuration done later after clock selection check */
      break;
 8003a66:	e00e      	b.n	8003a86 <HAL_RCCEx_PeriphCLKConfig+0x236>

    case RCC_SAI4ACLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 8003a68:	687b      	ldr	r3, [r7, #4]
 8003a6a:	3324      	adds	r3, #36	; 0x24
 8003a6c:	2100      	movs	r1, #0
 8003a6e:	4618      	mov	r0, r3
 8003a70:	f000 fee6 	bl	8004840 <RCCEx_PLL3_Config>
 8003a74:	4603      	mov	r3, r0
 8003a76:	75fb      	strb	r3, [r7, #23]

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 8003a78:	e005      	b.n	8003a86 <HAL_RCCEx_PeriphCLKConfig+0x236>
      /* SAI4A clock source configuration done later after clock selection check */
      break;
#endif /* RCC_VER_3_0 */

    default:
      ret = HAL_ERROR;
 8003a7a:	2301      	movs	r3, #1
 8003a7c:	75fb      	strb	r3, [r7, #23]
      break;
 8003a7e:	e002      	b.n	8003a86 <HAL_RCCEx_PeriphCLKConfig+0x236>
      break;
 8003a80:	bf00      	nop
 8003a82:	e000      	b.n	8003a86 <HAL_RCCEx_PeriphCLKConfig+0x236>
      break;
 8003a84:	bf00      	nop
    }

    if(ret == HAL_OK)
 8003a86:	7dfb      	ldrb	r3, [r7, #23]
 8003a88:	2b00      	cmp	r3, #0
 8003a8a:	d10a      	bne.n	8003aa2 <HAL_RCCEx_PeriphCLKConfig+0x252>
    {
      /* Set the source of SAI4A clock*/
      __HAL_RCC_SAI4A_CONFIG(PeriphClkInit->Sai4AClockSelection);
 8003a8c:	4b25      	ldr	r3, [pc, #148]	; (8003b24 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 8003a8e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003a90:	f423 0260 	bic.w	r2, r3, #14680064	; 0xe00000
 8003a94:	687b      	ldr	r3, [r7, #4]
 8003a96:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 8003a9a:	4922      	ldr	r1, [pc, #136]	; (8003b24 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 8003a9c:	4313      	orrs	r3, r2
 8003a9e:	658b      	str	r3, [r1, #88]	; 0x58
 8003aa0:	e001      	b.n	8003aa6 <HAL_RCCEx_PeriphCLKConfig+0x256>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003aa2:	7dfb      	ldrb	r3, [r7, #23]
 8003aa4:	75bb      	strb	r3, [r7, #22]
    }
  }
  /*---------------------------- SAI4B configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4B) == RCC_PERIPHCLK_SAI4B)
 8003aa6:	687b      	ldr	r3, [r7, #4]
 8003aa8:	681b      	ldr	r3, [r3, #0]
 8003aaa:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8003aae:	2b00      	cmp	r3, #0
 8003ab0:	d04b      	beq.n	8003b4a <HAL_RCCEx_PeriphCLKConfig+0x2fa>
  {
    switch(PeriphClkInit->Sai4BClockSelection)
 8003ab2:	687b      	ldr	r3, [r7, #4]
 8003ab4:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 8003ab8:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8003abc:	d030      	beq.n	8003b20 <HAL_RCCEx_PeriphCLKConfig+0x2d0>
 8003abe:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8003ac2:	d82a      	bhi.n	8003b1a <HAL_RCCEx_PeriphCLKConfig+0x2ca>
 8003ac4:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 8003ac8:	d02e      	beq.n	8003b28 <HAL_RCCEx_PeriphCLKConfig+0x2d8>
 8003aca:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 8003ace:	d824      	bhi.n	8003b1a <HAL_RCCEx_PeriphCLKConfig+0x2ca>
 8003ad0:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8003ad4:	d018      	beq.n	8003b08 <HAL_RCCEx_PeriphCLKConfig+0x2b8>
 8003ad6:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8003ada:	d81e      	bhi.n	8003b1a <HAL_RCCEx_PeriphCLKConfig+0x2ca>
 8003adc:	2b00      	cmp	r3, #0
 8003ade:	d003      	beq.n	8003ae8 <HAL_RCCEx_PeriphCLKConfig+0x298>
 8003ae0:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8003ae4:	d007      	beq.n	8003af6 <HAL_RCCEx_PeriphCLKConfig+0x2a6>
 8003ae6:	e018      	b.n	8003b1a <HAL_RCCEx_PeriphCLKConfig+0x2ca>
    {
    case RCC_SAI4BCLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8003ae8:	4b0e      	ldr	r3, [pc, #56]	; (8003b24 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 8003aea:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003aec:	4a0d      	ldr	r2, [pc, #52]	; (8003b24 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 8003aee:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8003af2:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 8003af4:	e019      	b.n	8003b2a <HAL_RCCEx_PeriphCLKConfig+0x2da>

    case RCC_SAI4BCLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8003af6:	687b      	ldr	r3, [r7, #4]
 8003af8:	3304      	adds	r3, #4
 8003afa:	2100      	movs	r1, #0
 8003afc:	4618      	mov	r0, r3
 8003afe:	f000 fded 	bl	80046dc <RCCEx_PLL2_Config>
 8003b02:	4603      	mov	r3, r0
 8003b04:	75fb      	strb	r3, [r7, #23]

      /* SAI2 clock source configuration done later after clock selection check */
      break;
 8003b06:	e010      	b.n	8003b2a <HAL_RCCEx_PeriphCLKConfig+0x2da>

    case RCC_SAI4BCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8003b08:	687b      	ldr	r3, [r7, #4]
 8003b0a:	3324      	adds	r3, #36	; 0x24
 8003b0c:	2100      	movs	r1, #0
 8003b0e:	4618      	mov	r0, r3
 8003b10:	f000 fe96 	bl	8004840 <RCCEx_PLL3_Config>
 8003b14:	4603      	mov	r3, r0
 8003b16:	75fb      	strb	r3, [r7, #23]

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 8003b18:	e007      	b.n	8003b2a <HAL_RCCEx_PeriphCLKConfig+0x2da>
      /* SAI4B clock source configuration done later after clock selection check */
      break;
#endif /* RCC_VER_3_0 */

    default:
      ret = HAL_ERROR;
 8003b1a:	2301      	movs	r3, #1
 8003b1c:	75fb      	strb	r3, [r7, #23]
      break;
 8003b1e:	e004      	b.n	8003b2a <HAL_RCCEx_PeriphCLKConfig+0x2da>
      break;
 8003b20:	bf00      	nop
 8003b22:	e002      	b.n	8003b2a <HAL_RCCEx_PeriphCLKConfig+0x2da>
 8003b24:	58024400 	.word	0x58024400
      break;
 8003b28:	bf00      	nop
    }

    if(ret == HAL_OK)
 8003b2a:	7dfb      	ldrb	r3, [r7, #23]
 8003b2c:	2b00      	cmp	r3, #0
 8003b2e:	d10a      	bne.n	8003b46 <HAL_RCCEx_PeriphCLKConfig+0x2f6>
    {
      /* Set the source of SAI4B clock*/
      __HAL_RCC_SAI4B_CONFIG(PeriphClkInit->Sai4BClockSelection);
 8003b30:	4b99      	ldr	r3, [pc, #612]	; (8003d98 <HAL_RCCEx_PeriphCLKConfig+0x548>)
 8003b32:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003b34:	f023 62e0 	bic.w	r2, r3, #117440512	; 0x7000000
 8003b38:	687b      	ldr	r3, [r7, #4]
 8003b3a:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 8003b3e:	4996      	ldr	r1, [pc, #600]	; (8003d98 <HAL_RCCEx_PeriphCLKConfig+0x548>)
 8003b40:	4313      	orrs	r3, r2
 8003b42:	658b      	str	r3, [r1, #88]	; 0x58
 8003b44:	e001      	b.n	8003b4a <HAL_RCCEx_PeriphCLKConfig+0x2fa>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003b46:	7dfb      	ldrb	r3, [r7, #23]
 8003b48:	75bb      	strb	r3, [r7, #22]
  }
#endif  /*SAI4*/

#if defined(QUADSPI)
  /*---------------------------- QSPI configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_QSPI) == RCC_PERIPHCLK_QSPI)
 8003b4a:	687b      	ldr	r3, [r7, #4]
 8003b4c:	681b      	ldr	r3, [r3, #0]
 8003b4e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003b52:	2b00      	cmp	r3, #0
 8003b54:	d032      	beq.n	8003bbc <HAL_RCCEx_PeriphCLKConfig+0x36c>
  {
    switch(PeriphClkInit->QspiClockSelection)
 8003b56:	687b      	ldr	r3, [r7, #4]
 8003b58:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003b5a:	2b30      	cmp	r3, #48	; 0x30
 8003b5c:	d01c      	beq.n	8003b98 <HAL_RCCEx_PeriphCLKConfig+0x348>
 8003b5e:	2b30      	cmp	r3, #48	; 0x30
 8003b60:	d817      	bhi.n	8003b92 <HAL_RCCEx_PeriphCLKConfig+0x342>
 8003b62:	2b20      	cmp	r3, #32
 8003b64:	d00c      	beq.n	8003b80 <HAL_RCCEx_PeriphCLKConfig+0x330>
 8003b66:	2b20      	cmp	r3, #32
 8003b68:	d813      	bhi.n	8003b92 <HAL_RCCEx_PeriphCLKConfig+0x342>
 8003b6a:	2b00      	cmp	r3, #0
 8003b6c:	d016      	beq.n	8003b9c <HAL_RCCEx_PeriphCLKConfig+0x34c>
 8003b6e:	2b10      	cmp	r3, #16
 8003b70:	d10f      	bne.n	8003b92 <HAL_RCCEx_PeriphCLKConfig+0x342>
    {
    case RCC_QSPICLKSOURCE_PLL:      /* PLL is used as clock source for QSPI*/
      /* Enable QSPI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8003b72:	4b89      	ldr	r3, [pc, #548]	; (8003d98 <HAL_RCCEx_PeriphCLKConfig+0x548>)
 8003b74:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003b76:	4a88      	ldr	r2, [pc, #544]	; (8003d98 <HAL_RCCEx_PeriphCLKConfig+0x548>)
 8003b78:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8003b7c:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* QSPI clock source configuration done later after clock selection check */
      break;
 8003b7e:	e00e      	b.n	8003b9e <HAL_RCCEx_PeriphCLKConfig+0x34e>

    case RCC_QSPICLKSOURCE_PLL2: /* PLL2 is used as clock source for QSPI*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 8003b80:	687b      	ldr	r3, [r7, #4]
 8003b82:	3304      	adds	r3, #4
 8003b84:	2102      	movs	r1, #2
 8003b86:	4618      	mov	r0, r3
 8003b88:	f000 fda8 	bl	80046dc <RCCEx_PLL2_Config>
 8003b8c:	4603      	mov	r3, r0
 8003b8e:	75fb      	strb	r3, [r7, #23]

      /* QSPI clock source configuration done later after clock selection check */
      break;
 8003b90:	e005      	b.n	8003b9e <HAL_RCCEx_PeriphCLKConfig+0x34e>
    case RCC_QSPICLKSOURCE_D1HCLK:
      /* Domain1 HCLK  clock selected as QSPI kernel peripheral clock */
      break;

    default:
      ret = HAL_ERROR;
 8003b92:	2301      	movs	r3, #1
 8003b94:	75fb      	strb	r3, [r7, #23]
      break;
 8003b96:	e002      	b.n	8003b9e <HAL_RCCEx_PeriphCLKConfig+0x34e>
      break;
 8003b98:	bf00      	nop
 8003b9a:	e000      	b.n	8003b9e <HAL_RCCEx_PeriphCLKConfig+0x34e>
      break;
 8003b9c:	bf00      	nop
    }

    if(ret == HAL_OK)
 8003b9e:	7dfb      	ldrb	r3, [r7, #23]
 8003ba0:	2b00      	cmp	r3, #0
 8003ba2:	d109      	bne.n	8003bb8 <HAL_RCCEx_PeriphCLKConfig+0x368>
    {
      /* Set the source of QSPI clock*/
      __HAL_RCC_QSPI_CONFIG(PeriphClkInit->QspiClockSelection);
 8003ba4:	4b7c      	ldr	r3, [pc, #496]	; (8003d98 <HAL_RCCEx_PeriphCLKConfig+0x548>)
 8003ba6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003ba8:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 8003bac:	687b      	ldr	r3, [r7, #4]
 8003bae:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003bb0:	4979      	ldr	r1, [pc, #484]	; (8003d98 <HAL_RCCEx_PeriphCLKConfig+0x548>)
 8003bb2:	4313      	orrs	r3, r2
 8003bb4:	64cb      	str	r3, [r1, #76]	; 0x4c
 8003bb6:	e001      	b.n	8003bbc <HAL_RCCEx_PeriphCLKConfig+0x36c>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003bb8:	7dfb      	ldrb	r3, [r7, #23]
 8003bba:	75bb      	strb	r3, [r7, #22]
    }
  }
#endif  /*OCTOSPI*/

  /*---------------------------- SPI1/2/3 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI123) == RCC_PERIPHCLK_SPI123)
 8003bbc:	687b      	ldr	r3, [r7, #4]
 8003bbe:	681b      	ldr	r3, [r3, #0]
 8003bc0:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8003bc4:	2b00      	cmp	r3, #0
 8003bc6:	d047      	beq.n	8003c58 <HAL_RCCEx_PeriphCLKConfig+0x408>
  {
    switch(PeriphClkInit->Spi123ClockSelection)
 8003bc8:	687b      	ldr	r3, [r7, #4]
 8003bca:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003bcc:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8003bd0:	d030      	beq.n	8003c34 <HAL_RCCEx_PeriphCLKConfig+0x3e4>
 8003bd2:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8003bd6:	d82a      	bhi.n	8003c2e <HAL_RCCEx_PeriphCLKConfig+0x3de>
 8003bd8:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8003bdc:	d02c      	beq.n	8003c38 <HAL_RCCEx_PeriphCLKConfig+0x3e8>
 8003bde:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8003be2:	d824      	bhi.n	8003c2e <HAL_RCCEx_PeriphCLKConfig+0x3de>
 8003be4:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003be8:	d018      	beq.n	8003c1c <HAL_RCCEx_PeriphCLKConfig+0x3cc>
 8003bea:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003bee:	d81e      	bhi.n	8003c2e <HAL_RCCEx_PeriphCLKConfig+0x3de>
 8003bf0:	2b00      	cmp	r3, #0
 8003bf2:	d003      	beq.n	8003bfc <HAL_RCCEx_PeriphCLKConfig+0x3ac>
 8003bf4:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003bf8:	d007      	beq.n	8003c0a <HAL_RCCEx_PeriphCLKConfig+0x3ba>
 8003bfa:	e018      	b.n	8003c2e <HAL_RCCEx_PeriphCLKConfig+0x3de>
    {
    case RCC_SPI123CLKSOURCE_PLL:      /* PLL is used as clock source for SPI1/2/3 */
      /* Enable SPI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8003bfc:	4b66      	ldr	r3, [pc, #408]	; (8003d98 <HAL_RCCEx_PeriphCLKConfig+0x548>)
 8003bfe:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003c00:	4a65      	ldr	r2, [pc, #404]	; (8003d98 <HAL_RCCEx_PeriphCLKConfig+0x548>)
 8003c02:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8003c06:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SPI1/2/3 clock source configuration done later after clock selection check */
      break;
 8003c08:	e017      	b.n	8003c3a <HAL_RCCEx_PeriphCLKConfig+0x3ea>

    case RCC_SPI123CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI1/2/3 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8003c0a:	687b      	ldr	r3, [r7, #4]
 8003c0c:	3304      	adds	r3, #4
 8003c0e:	2100      	movs	r1, #0
 8003c10:	4618      	mov	r0, r3
 8003c12:	f000 fd63 	bl	80046dc <RCCEx_PLL2_Config>
 8003c16:	4603      	mov	r3, r0
 8003c18:	75fb      	strb	r3, [r7, #23]

      /* SPI1/2/3 clock source configuration done later after clock selection check */
      break;
 8003c1a:	e00e      	b.n	8003c3a <HAL_RCCEx_PeriphCLKConfig+0x3ea>

    case RCC_SPI123CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI1/2/3 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 8003c1c:	687b      	ldr	r3, [r7, #4]
 8003c1e:	3324      	adds	r3, #36	; 0x24
 8003c20:	2100      	movs	r1, #0
 8003c22:	4618      	mov	r0, r3
 8003c24:	f000 fe0c 	bl	8004840 <RCCEx_PLL3_Config>
 8003c28:	4603      	mov	r3, r0
 8003c2a:	75fb      	strb	r3, [r7, #23]

      /* SPI1/2/3 clock source configuration done later after clock selection check */
      break;
 8003c2c:	e005      	b.n	8003c3a <HAL_RCCEx_PeriphCLKConfig+0x3ea>
      /* HSI, HSE, or CSI oscillator is used as source of SPI1/2/3 clock */
      /* SPI1/2/3 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8003c2e:	2301      	movs	r3, #1
 8003c30:	75fb      	strb	r3, [r7, #23]
      break;
 8003c32:	e002      	b.n	8003c3a <HAL_RCCEx_PeriphCLKConfig+0x3ea>
      break;
 8003c34:	bf00      	nop
 8003c36:	e000      	b.n	8003c3a <HAL_RCCEx_PeriphCLKConfig+0x3ea>
      break;
 8003c38:	bf00      	nop
    }

    if(ret == HAL_OK)
 8003c3a:	7dfb      	ldrb	r3, [r7, #23]
 8003c3c:	2b00      	cmp	r3, #0
 8003c3e:	d109      	bne.n	8003c54 <HAL_RCCEx_PeriphCLKConfig+0x404>
    {
      /* Set the source of SPI1/2/3 clock*/
      __HAL_RCC_SPI123_CONFIG(PeriphClkInit->Spi123ClockSelection);
 8003c40:	4b55      	ldr	r3, [pc, #340]	; (8003d98 <HAL_RCCEx_PeriphCLKConfig+0x548>)
 8003c42:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003c44:	f423 42e0 	bic.w	r2, r3, #28672	; 0x7000
 8003c48:	687b      	ldr	r3, [r7, #4]
 8003c4a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003c4c:	4952      	ldr	r1, [pc, #328]	; (8003d98 <HAL_RCCEx_PeriphCLKConfig+0x548>)
 8003c4e:	4313      	orrs	r3, r2
 8003c50:	650b      	str	r3, [r1, #80]	; 0x50
 8003c52:	e001      	b.n	8003c58 <HAL_RCCEx_PeriphCLKConfig+0x408>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003c54:	7dfb      	ldrb	r3, [r7, #23]
 8003c56:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- SPI4/5 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI45) == RCC_PERIPHCLK_SPI45)
 8003c58:	687b      	ldr	r3, [r7, #4]
 8003c5a:	681b      	ldr	r3, [r3, #0]
 8003c5c:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8003c60:	2b00      	cmp	r3, #0
 8003c62:	d049      	beq.n	8003cf8 <HAL_RCCEx_PeriphCLKConfig+0x4a8>
  {
    switch(PeriphClkInit->Spi45ClockSelection)
 8003c64:	687b      	ldr	r3, [r7, #4]
 8003c66:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003c68:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8003c6c:	d02e      	beq.n	8003ccc <HAL_RCCEx_PeriphCLKConfig+0x47c>
 8003c6e:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8003c72:	d828      	bhi.n	8003cc6 <HAL_RCCEx_PeriphCLKConfig+0x476>
 8003c74:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8003c78:	d02a      	beq.n	8003cd0 <HAL_RCCEx_PeriphCLKConfig+0x480>
 8003c7a:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8003c7e:	d822      	bhi.n	8003cc6 <HAL_RCCEx_PeriphCLKConfig+0x476>
 8003c80:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 8003c84:	d026      	beq.n	8003cd4 <HAL_RCCEx_PeriphCLKConfig+0x484>
 8003c86:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 8003c8a:	d81c      	bhi.n	8003cc6 <HAL_RCCEx_PeriphCLKConfig+0x476>
 8003c8c:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8003c90:	d010      	beq.n	8003cb4 <HAL_RCCEx_PeriphCLKConfig+0x464>
 8003c92:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8003c96:	d816      	bhi.n	8003cc6 <HAL_RCCEx_PeriphCLKConfig+0x476>
 8003c98:	2b00      	cmp	r3, #0
 8003c9a:	d01d      	beq.n	8003cd8 <HAL_RCCEx_PeriphCLKConfig+0x488>
 8003c9c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003ca0:	d111      	bne.n	8003cc6 <HAL_RCCEx_PeriphCLKConfig+0x476>
      /* SPI4/5 clock source configuration done later after clock selection check */
      break;

    case RCC_SPI45CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI4/5 */

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 8003ca2:	687b      	ldr	r3, [r7, #4]
 8003ca4:	3304      	adds	r3, #4
 8003ca6:	2101      	movs	r1, #1
 8003ca8:	4618      	mov	r0, r3
 8003caa:	f000 fd17 	bl	80046dc <RCCEx_PLL2_Config>
 8003cae:	4603      	mov	r3, r0
 8003cb0:	75fb      	strb	r3, [r7, #23]

      /* SPI4/5 clock source configuration done later after clock selection check */
      break;
 8003cb2:	e012      	b.n	8003cda <HAL_RCCEx_PeriphCLKConfig+0x48a>
    case RCC_SPI45CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI4/5 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 8003cb4:	687b      	ldr	r3, [r7, #4]
 8003cb6:	3324      	adds	r3, #36	; 0x24
 8003cb8:	2101      	movs	r1, #1
 8003cba:	4618      	mov	r0, r3
 8003cbc:	f000 fdc0 	bl	8004840 <RCCEx_PLL3_Config>
 8003cc0:	4603      	mov	r3, r0
 8003cc2:	75fb      	strb	r3, [r7, #23]
      /* SPI4/5 clock source configuration done later after clock selection check */
      break;
 8003cc4:	e009      	b.n	8003cda <HAL_RCCEx_PeriphCLKConfig+0x48a>
      /* HSE,  oscillator is used as source of SPI4/5 clock */
      /* SPI4/5 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8003cc6:	2301      	movs	r3, #1
 8003cc8:	75fb      	strb	r3, [r7, #23]
      break;
 8003cca:	e006      	b.n	8003cda <HAL_RCCEx_PeriphCLKConfig+0x48a>
      break;
 8003ccc:	bf00      	nop
 8003cce:	e004      	b.n	8003cda <HAL_RCCEx_PeriphCLKConfig+0x48a>
      break;
 8003cd0:	bf00      	nop
 8003cd2:	e002      	b.n	8003cda <HAL_RCCEx_PeriphCLKConfig+0x48a>
      break;
 8003cd4:	bf00      	nop
 8003cd6:	e000      	b.n	8003cda <HAL_RCCEx_PeriphCLKConfig+0x48a>
      break;
 8003cd8:	bf00      	nop
    }

    if(ret == HAL_OK)
 8003cda:	7dfb      	ldrb	r3, [r7, #23]
 8003cdc:	2b00      	cmp	r3, #0
 8003cde:	d109      	bne.n	8003cf4 <HAL_RCCEx_PeriphCLKConfig+0x4a4>
    {
      /* Set the source of SPI4/5 clock*/
      __HAL_RCC_SPI45_CONFIG(PeriphClkInit->Spi45ClockSelection);
 8003ce0:	4b2d      	ldr	r3, [pc, #180]	; (8003d98 <HAL_RCCEx_PeriphCLKConfig+0x548>)
 8003ce2:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003ce4:	f423 22e0 	bic.w	r2, r3, #458752	; 0x70000
 8003ce8:	687b      	ldr	r3, [r7, #4]
 8003cea:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003cec:	492a      	ldr	r1, [pc, #168]	; (8003d98 <HAL_RCCEx_PeriphCLKConfig+0x548>)
 8003cee:	4313      	orrs	r3, r2
 8003cf0:	650b      	str	r3, [r1, #80]	; 0x50
 8003cf2:	e001      	b.n	8003cf8 <HAL_RCCEx_PeriphCLKConfig+0x4a8>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003cf4:	7dfb      	ldrb	r3, [r7, #23]
 8003cf6:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- SPI6 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI6) == RCC_PERIPHCLK_SPI6)
 8003cf8:	687b      	ldr	r3, [r7, #4]
 8003cfa:	681b      	ldr	r3, [r3, #0]
 8003cfc:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8003d00:	2b00      	cmp	r3, #0
 8003d02:	d04d      	beq.n	8003da0 <HAL_RCCEx_PeriphCLKConfig+0x550>
  {
    switch(PeriphClkInit->Spi6ClockSelection)
 8003d04:	687b      	ldr	r3, [r7, #4]
 8003d06:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 8003d0a:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8003d0e:	d02e      	beq.n	8003d6e <HAL_RCCEx_PeriphCLKConfig+0x51e>
 8003d10:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8003d14:	d828      	bhi.n	8003d68 <HAL_RCCEx_PeriphCLKConfig+0x518>
 8003d16:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003d1a:	d02a      	beq.n	8003d72 <HAL_RCCEx_PeriphCLKConfig+0x522>
 8003d1c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003d20:	d822      	bhi.n	8003d68 <HAL_RCCEx_PeriphCLKConfig+0x518>
 8003d22:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 8003d26:	d026      	beq.n	8003d76 <HAL_RCCEx_PeriphCLKConfig+0x526>
 8003d28:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 8003d2c:	d81c      	bhi.n	8003d68 <HAL_RCCEx_PeriphCLKConfig+0x518>
 8003d2e:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8003d32:	d010      	beq.n	8003d56 <HAL_RCCEx_PeriphCLKConfig+0x506>
 8003d34:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8003d38:	d816      	bhi.n	8003d68 <HAL_RCCEx_PeriphCLKConfig+0x518>
 8003d3a:	2b00      	cmp	r3, #0
 8003d3c:	d01d      	beq.n	8003d7a <HAL_RCCEx_PeriphCLKConfig+0x52a>
 8003d3e:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8003d42:	d111      	bne.n	8003d68 <HAL_RCCEx_PeriphCLKConfig+0x518>
      /* SPI6 clock source configuration done later after clock selection check */
      break;

    case RCC_SPI6CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI6*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 8003d44:	687b      	ldr	r3, [r7, #4]
 8003d46:	3304      	adds	r3, #4
 8003d48:	2101      	movs	r1, #1
 8003d4a:	4618      	mov	r0, r3
 8003d4c:	f000 fcc6 	bl	80046dc <RCCEx_PLL2_Config>
 8003d50:	4603      	mov	r3, r0
 8003d52:	75fb      	strb	r3, [r7, #23]

      /* SPI6 clock source configuration done later after clock selection check */
      break;
 8003d54:	e012      	b.n	8003d7c <HAL_RCCEx_PeriphCLKConfig+0x52c>
    case RCC_SPI6CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI6*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 8003d56:	687b      	ldr	r3, [r7, #4]
 8003d58:	3324      	adds	r3, #36	; 0x24
 8003d5a:	2101      	movs	r1, #1
 8003d5c:	4618      	mov	r0, r3
 8003d5e:	f000 fd6f 	bl	8004840 <RCCEx_PLL3_Config>
 8003d62:	4603      	mov	r3, r0
 8003d64:	75fb      	strb	r3, [r7, #23]
      /* SPI6 clock source configuration done later after clock selection check */
      break;
 8003d66:	e009      	b.n	8003d7c <HAL_RCCEx_PeriphCLKConfig+0x52c>
      /* SPI6 clock source configuration done later after clock selection check */
      break;
#endif

    default:
      ret = HAL_ERROR;
 8003d68:	2301      	movs	r3, #1
 8003d6a:	75fb      	strb	r3, [r7, #23]
      break;
 8003d6c:	e006      	b.n	8003d7c <HAL_RCCEx_PeriphCLKConfig+0x52c>
      break;
 8003d6e:	bf00      	nop
 8003d70:	e004      	b.n	8003d7c <HAL_RCCEx_PeriphCLKConfig+0x52c>
      break;
 8003d72:	bf00      	nop
 8003d74:	e002      	b.n	8003d7c <HAL_RCCEx_PeriphCLKConfig+0x52c>
      break;
 8003d76:	bf00      	nop
 8003d78:	e000      	b.n	8003d7c <HAL_RCCEx_PeriphCLKConfig+0x52c>
      break;
 8003d7a:	bf00      	nop
    }

    if(ret == HAL_OK)
 8003d7c:	7dfb      	ldrb	r3, [r7, #23]
 8003d7e:	2b00      	cmp	r3, #0
 8003d80:	d10c      	bne.n	8003d9c <HAL_RCCEx_PeriphCLKConfig+0x54c>
    {
      /* Set the source of SPI6 clock*/
      __HAL_RCC_SPI6_CONFIG(PeriphClkInit->Spi6ClockSelection);
 8003d82:	4b05      	ldr	r3, [pc, #20]	; (8003d98 <HAL_RCCEx_PeriphCLKConfig+0x548>)
 8003d84:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003d86:	f023 42e0 	bic.w	r2, r3, #1879048192	; 0x70000000
 8003d8a:	687b      	ldr	r3, [r7, #4]
 8003d8c:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 8003d90:	4901      	ldr	r1, [pc, #4]	; (8003d98 <HAL_RCCEx_PeriphCLKConfig+0x548>)
 8003d92:	4313      	orrs	r3, r2
 8003d94:	658b      	str	r3, [r1, #88]	; 0x58
 8003d96:	e003      	b.n	8003da0 <HAL_RCCEx_PeriphCLKConfig+0x550>
 8003d98:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003d9c:	7dfb      	ldrb	r3, [r7, #23]
 8003d9e:	75bb      	strb	r3, [r7, #22]
  }
#endif /*DSI*/

#if defined(FDCAN1) || defined(FDCAN2)
  /*---------------------------- FDCAN configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 8003da0:	687b      	ldr	r3, [r7, #4]
 8003da2:	681b      	ldr	r3, [r3, #0]
 8003da4:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8003da8:	2b00      	cmp	r3, #0
 8003daa:	d02f      	beq.n	8003e0c <HAL_RCCEx_PeriphCLKConfig+0x5bc>
  {
    switch(PeriphClkInit->FdcanClockSelection)
 8003dac:	687b      	ldr	r3, [r7, #4]
 8003dae:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8003db0:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8003db4:	d00e      	beq.n	8003dd4 <HAL_RCCEx_PeriphCLKConfig+0x584>
 8003db6:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8003dba:	d814      	bhi.n	8003de6 <HAL_RCCEx_PeriphCLKConfig+0x596>
 8003dbc:	2b00      	cmp	r3, #0
 8003dbe:	d015      	beq.n	8003dec <HAL_RCCEx_PeriphCLKConfig+0x59c>
 8003dc0:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8003dc4:	d10f      	bne.n	8003de6 <HAL_RCCEx_PeriphCLKConfig+0x596>
    {
    case RCC_FDCANCLKSOURCE_PLL:      /* PLL is used as clock source for FDCAN*/
      /* Enable FDCAN Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8003dc6:	4baf      	ldr	r3, [pc, #700]	; (8004084 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 8003dc8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003dca:	4aae      	ldr	r2, [pc, #696]	; (8004084 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 8003dcc:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8003dd0:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* FDCAN clock source configuration done later after clock selection check */
      break;
 8003dd2:	e00c      	b.n	8003dee <HAL_RCCEx_PeriphCLKConfig+0x59e>

    case RCC_FDCANCLKSOURCE_PLL2: /* PLL2 is used as clock source for FDCAN*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 8003dd4:	687b      	ldr	r3, [r7, #4]
 8003dd6:	3304      	adds	r3, #4
 8003dd8:	2101      	movs	r1, #1
 8003dda:	4618      	mov	r0, r3
 8003ddc:	f000 fc7e 	bl	80046dc <RCCEx_PLL2_Config>
 8003de0:	4603      	mov	r3, r0
 8003de2:	75fb      	strb	r3, [r7, #23]

      /* FDCAN clock source configuration done later after clock selection check */
      break;
 8003de4:	e003      	b.n	8003dee <HAL_RCCEx_PeriphCLKConfig+0x59e>
      /* HSE is used as clock source for FDCAN*/
      /* FDCAN clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8003de6:	2301      	movs	r3, #1
 8003de8:	75fb      	strb	r3, [r7, #23]
      break;
 8003dea:	e000      	b.n	8003dee <HAL_RCCEx_PeriphCLKConfig+0x59e>
      break;
 8003dec:	bf00      	nop
    }

    if(ret == HAL_OK)
 8003dee:	7dfb      	ldrb	r3, [r7, #23]
 8003df0:	2b00      	cmp	r3, #0
 8003df2:	d109      	bne.n	8003e08 <HAL_RCCEx_PeriphCLKConfig+0x5b8>
    {
      /* Set the source of FDCAN clock*/
      __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 8003df4:	4ba3      	ldr	r3, [pc, #652]	; (8004084 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 8003df6:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003df8:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 8003dfc:	687b      	ldr	r3, [r7, #4]
 8003dfe:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8003e00:	49a0      	ldr	r1, [pc, #640]	; (8004084 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 8003e02:	4313      	orrs	r3, r2
 8003e04:	650b      	str	r3, [r1, #80]	; 0x50
 8003e06:	e001      	b.n	8003e0c <HAL_RCCEx_PeriphCLKConfig+0x5bc>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003e08:	7dfb      	ldrb	r3, [r7, #23]
 8003e0a:	75bb      	strb	r3, [r7, #22]
    }
  }
#endif /*FDCAN1 || FDCAN2*/

  /*---------------------------- FMC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FMC) == RCC_PERIPHCLK_FMC)
 8003e0c:	687b      	ldr	r3, [r7, #4]
 8003e0e:	681b      	ldr	r3, [r3, #0]
 8003e10:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8003e14:	2b00      	cmp	r3, #0
 8003e16:	d032      	beq.n	8003e7e <HAL_RCCEx_PeriphCLKConfig+0x62e>
  {
    switch(PeriphClkInit->FmcClockSelection)
 8003e18:	687b      	ldr	r3, [r7, #4]
 8003e1a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003e1c:	2b03      	cmp	r3, #3
 8003e1e:	d81b      	bhi.n	8003e58 <HAL_RCCEx_PeriphCLKConfig+0x608>
 8003e20:	a201      	add	r2, pc, #4	; (adr r2, 8003e28 <HAL_RCCEx_PeriphCLKConfig+0x5d8>)
 8003e22:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003e26:	bf00      	nop
 8003e28:	08003e5f 	.word	0x08003e5f
 8003e2c:	08003e39 	.word	0x08003e39
 8003e30:	08003e47 	.word	0x08003e47
 8003e34:	08003e5f 	.word	0x08003e5f
    {
    case RCC_FMCCLKSOURCE_PLL:      /* PLL is used as clock source for FMC*/
      /* Enable FMC Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8003e38:	4b92      	ldr	r3, [pc, #584]	; (8004084 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 8003e3a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003e3c:	4a91      	ldr	r2, [pc, #580]	; (8004084 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 8003e3e:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8003e42:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* FMC clock source configuration done later after clock selection check */
      break;
 8003e44:	e00c      	b.n	8003e60 <HAL_RCCEx_PeriphCLKConfig+0x610>

    case RCC_FMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for FMC*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 8003e46:	687b      	ldr	r3, [r7, #4]
 8003e48:	3304      	adds	r3, #4
 8003e4a:	2102      	movs	r1, #2
 8003e4c:	4618      	mov	r0, r3
 8003e4e:	f000 fc45 	bl	80046dc <RCCEx_PLL2_Config>
 8003e52:	4603      	mov	r3, r0
 8003e54:	75fb      	strb	r3, [r7, #23]

      /* FMC clock source configuration done later after clock selection check */
      break;
 8003e56:	e003      	b.n	8003e60 <HAL_RCCEx_PeriphCLKConfig+0x610>
    case RCC_FMCCLKSOURCE_HCLK:
      /* D1/CD HCLK  clock selected as FMC kernel peripheral clock */
      break;

    default:
      ret = HAL_ERROR;
 8003e58:	2301      	movs	r3, #1
 8003e5a:	75fb      	strb	r3, [r7, #23]
      break;
 8003e5c:	e000      	b.n	8003e60 <HAL_RCCEx_PeriphCLKConfig+0x610>
      break;
 8003e5e:	bf00      	nop
    }

    if(ret == HAL_OK)
 8003e60:	7dfb      	ldrb	r3, [r7, #23]
 8003e62:	2b00      	cmp	r3, #0
 8003e64:	d109      	bne.n	8003e7a <HAL_RCCEx_PeriphCLKConfig+0x62a>
    {
      /* Set the source of FMC clock*/
      __HAL_RCC_FMC_CONFIG(PeriphClkInit->FmcClockSelection);
 8003e66:	4b87      	ldr	r3, [pc, #540]	; (8004084 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 8003e68:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003e6a:	f023 0203 	bic.w	r2, r3, #3
 8003e6e:	687b      	ldr	r3, [r7, #4]
 8003e70:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003e72:	4984      	ldr	r1, [pc, #528]	; (8004084 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 8003e74:	4313      	orrs	r3, r2
 8003e76:	64cb      	str	r3, [r1, #76]	; 0x4c
 8003e78:	e001      	b.n	8003e7e <HAL_RCCEx_PeriphCLKConfig+0x62e>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003e7a:	7dfb      	ldrb	r3, [r7, #23]
 8003e7c:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- RTC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8003e7e:	687b      	ldr	r3, [r7, #4]
 8003e80:	681b      	ldr	r3, [r3, #0]
 8003e82:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003e86:	2b00      	cmp	r3, #0
 8003e88:	f000 8086 	beq.w	8003f98 <HAL_RCCEx_PeriphCLKConfig+0x748>
  {
    /* check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8003e8c:	4b7e      	ldr	r3, [pc, #504]	; (8004088 <HAL_RCCEx_PeriphCLKConfig+0x838>)
 8003e8e:	681b      	ldr	r3, [r3, #0]
 8003e90:	4a7d      	ldr	r2, [pc, #500]	; (8004088 <HAL_RCCEx_PeriphCLKConfig+0x838>)
 8003e92:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003e96:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8003e98:	f7fc ff18 	bl	8000ccc <HAL_GetTick>
 8003e9c:	6138      	str	r0, [r7, #16]

    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8003e9e:	e009      	b.n	8003eb4 <HAL_RCCEx_PeriphCLKConfig+0x664>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003ea0:	f7fc ff14 	bl	8000ccc <HAL_GetTick>
 8003ea4:	4602      	mov	r2, r0
 8003ea6:	693b      	ldr	r3, [r7, #16]
 8003ea8:	1ad3      	subs	r3, r2, r3
 8003eaa:	2b64      	cmp	r3, #100	; 0x64
 8003eac:	d902      	bls.n	8003eb4 <HAL_RCCEx_PeriphCLKConfig+0x664>
      {
        ret = HAL_TIMEOUT;
 8003eae:	2303      	movs	r3, #3
 8003eb0:	75fb      	strb	r3, [r7, #23]
        break;
 8003eb2:	e005      	b.n	8003ec0 <HAL_RCCEx_PeriphCLKConfig+0x670>
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8003eb4:	4b74      	ldr	r3, [pc, #464]	; (8004088 <HAL_RCCEx_PeriphCLKConfig+0x838>)
 8003eb6:	681b      	ldr	r3, [r3, #0]
 8003eb8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003ebc:	2b00      	cmp	r3, #0
 8003ebe:	d0ef      	beq.n	8003ea0 <HAL_RCCEx_PeriphCLKConfig+0x650>
      }
    }

    if(ret == HAL_OK)
 8003ec0:	7dfb      	ldrb	r3, [r7, #23]
 8003ec2:	2b00      	cmp	r3, #0
 8003ec4:	d166      	bne.n	8003f94 <HAL_RCCEx_PeriphCLKConfig+0x744>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified */
      if((RCC->BDCR & RCC_BDCR_RTCSEL) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL))
 8003ec6:	4b6f      	ldr	r3, [pc, #444]	; (8004084 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 8003ec8:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8003eca:	687b      	ldr	r3, [r7, #4]
 8003ecc:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8003ed0:	4053      	eors	r3, r2
 8003ed2:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003ed6:	2b00      	cmp	r3, #0
 8003ed8:	d013      	beq.n	8003f02 <HAL_RCCEx_PeriphCLKConfig+0x6b2>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpreg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8003eda:	4b6a      	ldr	r3, [pc, #424]	; (8004084 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 8003edc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003ede:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003ee2:	60fb      	str	r3, [r7, #12]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8003ee4:	4b67      	ldr	r3, [pc, #412]	; (8004084 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 8003ee6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003ee8:	4a66      	ldr	r2, [pc, #408]	; (8004084 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 8003eea:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003eee:	6713      	str	r3, [r2, #112]	; 0x70
        __HAL_RCC_BACKUPRESET_RELEASE();
 8003ef0:	4b64      	ldr	r3, [pc, #400]	; (8004084 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 8003ef2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003ef4:	4a63      	ldr	r2, [pc, #396]	; (8004084 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 8003ef6:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003efa:	6713      	str	r3, [r2, #112]	; 0x70
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpreg;
 8003efc:	4a61      	ldr	r2, [pc, #388]	; (8004084 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 8003efe:	68fb      	ldr	r3, [r7, #12]
 8003f00:	6713      	str	r3, [r2, #112]	; 0x70
      }

      /* If LSE is selected as RTC clock source (and enabled prior to Backup Domain reset), wait for LSE reactivation */
      if(PeriphClkInit->RTCClockSelection == RCC_RTCCLKSOURCE_LSE)
 8003f02:	687b      	ldr	r3, [r7, #4]
 8003f04:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8003f08:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8003f0c:	d115      	bne.n	8003f3a <HAL_RCCEx_PeriphCLKConfig+0x6ea>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003f0e:	f7fc fedd 	bl	8000ccc <HAL_GetTick>
 8003f12:	6138      	str	r0, [r7, #16]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8003f14:	e00b      	b.n	8003f2e <HAL_RCCEx_PeriphCLKConfig+0x6de>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003f16:	f7fc fed9 	bl	8000ccc <HAL_GetTick>
 8003f1a:	4602      	mov	r2, r0
 8003f1c:	693b      	ldr	r3, [r7, #16]
 8003f1e:	1ad3      	subs	r3, r2, r3
 8003f20:	f241 3288 	movw	r2, #5000	; 0x1388
 8003f24:	4293      	cmp	r3, r2
 8003f26:	d902      	bls.n	8003f2e <HAL_RCCEx_PeriphCLKConfig+0x6de>
          {
            ret = HAL_TIMEOUT;
 8003f28:	2303      	movs	r3, #3
 8003f2a:	75fb      	strb	r3, [r7, #23]
            break;
 8003f2c:	e005      	b.n	8003f3a <HAL_RCCEx_PeriphCLKConfig+0x6ea>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8003f2e:	4b55      	ldr	r3, [pc, #340]	; (8004084 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 8003f30:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003f32:	f003 0302 	and.w	r3, r3, #2
 8003f36:	2b00      	cmp	r3, #0
 8003f38:	d0ed      	beq.n	8003f16 <HAL_RCCEx_PeriphCLKConfig+0x6c6>
          }
        }
      }

      if(ret == HAL_OK)
 8003f3a:	7dfb      	ldrb	r3, [r7, #23]
 8003f3c:	2b00      	cmp	r3, #0
 8003f3e:	d126      	bne.n	8003f8e <HAL_RCCEx_PeriphCLKConfig+0x73e>
      {
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8003f40:	687b      	ldr	r3, [r7, #4]
 8003f42:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8003f46:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003f4a:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8003f4e:	d10d      	bne.n	8003f6c <HAL_RCCEx_PeriphCLKConfig+0x71c>
 8003f50:	4b4c      	ldr	r3, [pc, #304]	; (8004084 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 8003f52:	691b      	ldr	r3, [r3, #16]
 8003f54:	f423 527c 	bic.w	r2, r3, #16128	; 0x3f00
 8003f58:	687b      	ldr	r3, [r7, #4]
 8003f5a:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8003f5e:	0919      	lsrs	r1, r3, #4
 8003f60:	4b4a      	ldr	r3, [pc, #296]	; (800408c <HAL_RCCEx_PeriphCLKConfig+0x83c>)
 8003f62:	400b      	ands	r3, r1
 8003f64:	4947      	ldr	r1, [pc, #284]	; (8004084 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 8003f66:	4313      	orrs	r3, r2
 8003f68:	610b      	str	r3, [r1, #16]
 8003f6a:	e005      	b.n	8003f78 <HAL_RCCEx_PeriphCLKConfig+0x728>
 8003f6c:	4b45      	ldr	r3, [pc, #276]	; (8004084 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 8003f6e:	691b      	ldr	r3, [r3, #16]
 8003f70:	4a44      	ldr	r2, [pc, #272]	; (8004084 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 8003f72:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 8003f76:	6113      	str	r3, [r2, #16]
 8003f78:	4b42      	ldr	r3, [pc, #264]	; (8004084 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 8003f7a:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8003f7c:	687b      	ldr	r3, [r7, #4]
 8003f7e:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8003f82:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003f86:	493f      	ldr	r1, [pc, #252]	; (8004084 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 8003f88:	4313      	orrs	r3, r2
 8003f8a:	670b      	str	r3, [r1, #112]	; 0x70
 8003f8c:	e004      	b.n	8003f98 <HAL_RCCEx_PeriphCLKConfig+0x748>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8003f8e:	7dfb      	ldrb	r3, [r7, #23]
 8003f90:	75bb      	strb	r3, [r7, #22]
 8003f92:	e001      	b.n	8003f98 <HAL_RCCEx_PeriphCLKConfig+0x748>
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003f94:	7dfb      	ldrb	r3, [r7, #23]
 8003f96:	75bb      	strb	r3, [r7, #22]
    }
  }


  /*-------------------------- USART1/6 configuration --------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART16) == RCC_PERIPHCLK_USART16)
 8003f98:	687b      	ldr	r3, [r7, #4]
 8003f9a:	681b      	ldr	r3, [r3, #0]
 8003f9c:	f003 0301 	and.w	r3, r3, #1
 8003fa0:	2b00      	cmp	r3, #0
 8003fa2:	f000 8085 	beq.w	80040b0 <HAL_RCCEx_PeriphCLKConfig+0x860>
  {
    switch(PeriphClkInit->Usart16ClockSelection)
 8003fa6:	687b      	ldr	r3, [r7, #4]
 8003fa8:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8003faa:	2b28      	cmp	r3, #40	; 0x28
 8003fac:	d866      	bhi.n	800407c <HAL_RCCEx_PeriphCLKConfig+0x82c>
 8003fae:	a201      	add	r2, pc, #4	; (adr r2, 8003fb4 <HAL_RCCEx_PeriphCLKConfig+0x764>)
 8003fb0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003fb4:	08004091 	.word	0x08004091
 8003fb8:	0800407d 	.word	0x0800407d
 8003fbc:	0800407d 	.word	0x0800407d
 8003fc0:	0800407d 	.word	0x0800407d
 8003fc4:	0800407d 	.word	0x0800407d
 8003fc8:	0800407d 	.word	0x0800407d
 8003fcc:	0800407d 	.word	0x0800407d
 8003fd0:	0800407d 	.word	0x0800407d
 8003fd4:	08004059 	.word	0x08004059
 8003fd8:	0800407d 	.word	0x0800407d
 8003fdc:	0800407d 	.word	0x0800407d
 8003fe0:	0800407d 	.word	0x0800407d
 8003fe4:	0800407d 	.word	0x0800407d
 8003fe8:	0800407d 	.word	0x0800407d
 8003fec:	0800407d 	.word	0x0800407d
 8003ff0:	0800407d 	.word	0x0800407d
 8003ff4:	0800406b 	.word	0x0800406b
 8003ff8:	0800407d 	.word	0x0800407d
 8003ffc:	0800407d 	.word	0x0800407d
 8004000:	0800407d 	.word	0x0800407d
 8004004:	0800407d 	.word	0x0800407d
 8004008:	0800407d 	.word	0x0800407d
 800400c:	0800407d 	.word	0x0800407d
 8004010:	0800407d 	.word	0x0800407d
 8004014:	08004091 	.word	0x08004091
 8004018:	0800407d 	.word	0x0800407d
 800401c:	0800407d 	.word	0x0800407d
 8004020:	0800407d 	.word	0x0800407d
 8004024:	0800407d 	.word	0x0800407d
 8004028:	0800407d 	.word	0x0800407d
 800402c:	0800407d 	.word	0x0800407d
 8004030:	0800407d 	.word	0x0800407d
 8004034:	08004091 	.word	0x08004091
 8004038:	0800407d 	.word	0x0800407d
 800403c:	0800407d 	.word	0x0800407d
 8004040:	0800407d 	.word	0x0800407d
 8004044:	0800407d 	.word	0x0800407d
 8004048:	0800407d 	.word	0x0800407d
 800404c:	0800407d 	.word	0x0800407d
 8004050:	0800407d 	.word	0x0800407d
 8004054:	08004091 	.word	0x08004091
    case RCC_USART16CLKSOURCE_PCLK2: /* CD/D2 PCLK2 as clock source for USART1/6 */
      /* USART1/6 clock source configuration done later after clock selection check */
      break;

    case RCC_USART16CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART1/6 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 8004058:	687b      	ldr	r3, [r7, #4]
 800405a:	3304      	adds	r3, #4
 800405c:	2101      	movs	r1, #1
 800405e:	4618      	mov	r0, r3
 8004060:	f000 fb3c 	bl	80046dc <RCCEx_PLL2_Config>
 8004064:	4603      	mov	r3, r0
 8004066:	75fb      	strb	r3, [r7, #23]
      /* USART1/6 clock source configuration done later after clock selection check */
      break;
 8004068:	e013      	b.n	8004092 <HAL_RCCEx_PeriphCLKConfig+0x842>

    case RCC_USART16CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART1/6 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 800406a:	687b      	ldr	r3, [r7, #4]
 800406c:	3324      	adds	r3, #36	; 0x24
 800406e:	2101      	movs	r1, #1
 8004070:	4618      	mov	r0, r3
 8004072:	f000 fbe5 	bl	8004840 <RCCEx_PLL3_Config>
 8004076:	4603      	mov	r3, r0
 8004078:	75fb      	strb	r3, [r7, #23]
      /* USART1/6 clock source configuration done later after clock selection check */
      break;
 800407a:	e00a      	b.n	8004092 <HAL_RCCEx_PeriphCLKConfig+0x842>
      /* LSE,  oscillator is used as source of USART1/6 clock */
      /* USART1/6 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800407c:	2301      	movs	r3, #1
 800407e:	75fb      	strb	r3, [r7, #23]
      break;
 8004080:	e007      	b.n	8004092 <HAL_RCCEx_PeriphCLKConfig+0x842>
 8004082:	bf00      	nop
 8004084:	58024400 	.word	0x58024400
 8004088:	58024800 	.word	0x58024800
 800408c:	00ffffcf 	.word	0x00ffffcf
      break;
 8004090:	bf00      	nop
    }

    if(ret == HAL_OK)
 8004092:	7dfb      	ldrb	r3, [r7, #23]
 8004094:	2b00      	cmp	r3, #0
 8004096:	d109      	bne.n	80040ac <HAL_RCCEx_PeriphCLKConfig+0x85c>
    {
      /* Set the source of USART1/6 clock */
      __HAL_RCC_USART16_CONFIG(PeriphClkInit->Usart16ClockSelection);
 8004098:	4b96      	ldr	r3, [pc, #600]	; (80042f4 <HAL_RCCEx_PeriphCLKConfig+0xaa4>)
 800409a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800409c:	f023 0238 	bic.w	r2, r3, #56	; 0x38
 80040a0:	687b      	ldr	r3, [r7, #4]
 80040a2:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80040a4:	4993      	ldr	r1, [pc, #588]	; (80042f4 <HAL_RCCEx_PeriphCLKConfig+0xaa4>)
 80040a6:	4313      	orrs	r3, r2
 80040a8:	654b      	str	r3, [r1, #84]	; 0x54
 80040aa:	e001      	b.n	80040b0 <HAL_RCCEx_PeriphCLKConfig+0x860>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80040ac:	7dfb      	ldrb	r3, [r7, #23]
 80040ae:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*-------------------------- USART2/3/4/5/7/8 Configuration --------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART234578) == RCC_PERIPHCLK_USART234578)
 80040b0:	687b      	ldr	r3, [r7, #4]
 80040b2:	681b      	ldr	r3, [r3, #0]
 80040b4:	f003 0302 	and.w	r3, r3, #2
 80040b8:	2b00      	cmp	r3, #0
 80040ba:	d038      	beq.n	800412e <HAL_RCCEx_PeriphCLKConfig+0x8de>
  {
    switch(PeriphClkInit->Usart234578ClockSelection)
 80040bc:	687b      	ldr	r3, [r7, #4]
 80040be:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80040c0:	2b05      	cmp	r3, #5
 80040c2:	d821      	bhi.n	8004108 <HAL_RCCEx_PeriphCLKConfig+0x8b8>
 80040c4:	a201      	add	r2, pc, #4	; (adr r2, 80040cc <HAL_RCCEx_PeriphCLKConfig+0x87c>)
 80040c6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80040ca:	bf00      	nop
 80040cc:	0800410f 	.word	0x0800410f
 80040d0:	080040e5 	.word	0x080040e5
 80040d4:	080040f7 	.word	0x080040f7
 80040d8:	0800410f 	.word	0x0800410f
 80040dc:	0800410f 	.word	0x0800410f
 80040e0:	0800410f 	.word	0x0800410f
    case RCC_USART234578CLKSOURCE_PCLK1: /* CD/D2 PCLK1 as clock source for USART2/3/4/5/7/8 */
      /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
      break;

    case RCC_USART234578CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART2/3/4/5/7/8 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 80040e4:	687b      	ldr	r3, [r7, #4]
 80040e6:	3304      	adds	r3, #4
 80040e8:	2101      	movs	r1, #1
 80040ea:	4618      	mov	r0, r3
 80040ec:	f000 faf6 	bl	80046dc <RCCEx_PLL2_Config>
 80040f0:	4603      	mov	r3, r0
 80040f2:	75fb      	strb	r3, [r7, #23]
      /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
      break;
 80040f4:	e00c      	b.n	8004110 <HAL_RCCEx_PeriphCLKConfig+0x8c0>

    case RCC_USART234578CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART2/3/4/5/7/8 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 80040f6:	687b      	ldr	r3, [r7, #4]
 80040f8:	3324      	adds	r3, #36	; 0x24
 80040fa:	2101      	movs	r1, #1
 80040fc:	4618      	mov	r0, r3
 80040fe:	f000 fb9f 	bl	8004840 <RCCEx_PLL3_Config>
 8004102:	4603      	mov	r3, r0
 8004104:	75fb      	strb	r3, [r7, #23]
      /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
      break;
 8004106:	e003      	b.n	8004110 <HAL_RCCEx_PeriphCLKConfig+0x8c0>
      /* LSE,  oscillator is used as source of USART2/3/4/5/7/8 clock */
      /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8004108:	2301      	movs	r3, #1
 800410a:	75fb      	strb	r3, [r7, #23]
      break;
 800410c:	e000      	b.n	8004110 <HAL_RCCEx_PeriphCLKConfig+0x8c0>
      break;
 800410e:	bf00      	nop
    }

    if(ret == HAL_OK)
 8004110:	7dfb      	ldrb	r3, [r7, #23]
 8004112:	2b00      	cmp	r3, #0
 8004114:	d109      	bne.n	800412a <HAL_RCCEx_PeriphCLKConfig+0x8da>
    {
      /* Set the source of USART2/3/4/5/7/8 clock */
      __HAL_RCC_USART234578_CONFIG(PeriphClkInit->Usart234578ClockSelection);
 8004116:	4b77      	ldr	r3, [pc, #476]	; (80042f4 <HAL_RCCEx_PeriphCLKConfig+0xaa4>)
 8004118:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800411a:	f023 0207 	bic.w	r2, r3, #7
 800411e:	687b      	ldr	r3, [r7, #4]
 8004120:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004122:	4974      	ldr	r1, [pc, #464]	; (80042f4 <HAL_RCCEx_PeriphCLKConfig+0xaa4>)
 8004124:	4313      	orrs	r3, r2
 8004126:	654b      	str	r3, [r1, #84]	; 0x54
 8004128:	e001      	b.n	800412e <HAL_RCCEx_PeriphCLKConfig+0x8de>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800412a:	7dfb      	ldrb	r3, [r7, #23]
 800412c:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*-------------------------- LPUART1 Configuration -------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 800412e:	687b      	ldr	r3, [r7, #4]
 8004130:	681b      	ldr	r3, [r3, #0]
 8004132:	f003 0304 	and.w	r3, r3, #4
 8004136:	2b00      	cmp	r3, #0
 8004138:	d03a      	beq.n	80041b0 <HAL_RCCEx_PeriphCLKConfig+0x960>
  {
    switch(PeriphClkInit->Lpuart1ClockSelection)
 800413a:	687b      	ldr	r3, [r7, #4]
 800413c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004140:	2b05      	cmp	r3, #5
 8004142:	d821      	bhi.n	8004188 <HAL_RCCEx_PeriphCLKConfig+0x938>
 8004144:	a201      	add	r2, pc, #4	; (adr r2, 800414c <HAL_RCCEx_PeriphCLKConfig+0x8fc>)
 8004146:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800414a:	bf00      	nop
 800414c:	0800418f 	.word	0x0800418f
 8004150:	08004165 	.word	0x08004165
 8004154:	08004177 	.word	0x08004177
 8004158:	0800418f 	.word	0x0800418f
 800415c:	0800418f 	.word	0x0800418f
 8004160:	0800418f 	.word	0x0800418f
    case RCC_LPUART1CLKSOURCE_PCLK4: /* SRD/D3 PCLK1 (PCLK4) as clock source for LPUART1 */
      /* LPUART1 clock source configuration done later after clock selection check */
      break;

    case RCC_LPUART1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPUART1 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 8004164:	687b      	ldr	r3, [r7, #4]
 8004166:	3304      	adds	r3, #4
 8004168:	2101      	movs	r1, #1
 800416a:	4618      	mov	r0, r3
 800416c:	f000 fab6 	bl	80046dc <RCCEx_PLL2_Config>
 8004170:	4603      	mov	r3, r0
 8004172:	75fb      	strb	r3, [r7, #23]
      /* LPUART1 clock source configuration done later after clock selection check */
      break;
 8004174:	e00c      	b.n	8004190 <HAL_RCCEx_PeriphCLKConfig+0x940>

    case RCC_LPUART1CLKSOURCE_PLL3: /* PLL3 is used as clock source for LPUART1 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 8004176:	687b      	ldr	r3, [r7, #4]
 8004178:	3324      	adds	r3, #36	; 0x24
 800417a:	2101      	movs	r1, #1
 800417c:	4618      	mov	r0, r3
 800417e:	f000 fb5f 	bl	8004840 <RCCEx_PLL3_Config>
 8004182:	4603      	mov	r3, r0
 8004184:	75fb      	strb	r3, [r7, #23]
      /* LPUART1 clock source configuration done later after clock selection check */
      break;
 8004186:	e003      	b.n	8004190 <HAL_RCCEx_PeriphCLKConfig+0x940>
      /* LSE,  oscillator is used as source of LPUART1 clock */
      /* LPUART1 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8004188:	2301      	movs	r3, #1
 800418a:	75fb      	strb	r3, [r7, #23]
      break;
 800418c:	e000      	b.n	8004190 <HAL_RCCEx_PeriphCLKConfig+0x940>
      break;
 800418e:	bf00      	nop
    }

    if(ret == HAL_OK)
 8004190:	7dfb      	ldrb	r3, [r7, #23]
 8004192:	2b00      	cmp	r3, #0
 8004194:	d10a      	bne.n	80041ac <HAL_RCCEx_PeriphCLKConfig+0x95c>
    {
      /* Set the source of LPUART1 clock */
      __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8004196:	4b57      	ldr	r3, [pc, #348]	; (80042f4 <HAL_RCCEx_PeriphCLKConfig+0xaa4>)
 8004198:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800419a:	f023 0207 	bic.w	r2, r3, #7
 800419e:	687b      	ldr	r3, [r7, #4]
 80041a0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80041a4:	4953      	ldr	r1, [pc, #332]	; (80042f4 <HAL_RCCEx_PeriphCLKConfig+0xaa4>)
 80041a6:	4313      	orrs	r3, r2
 80041a8:	658b      	str	r3, [r1, #88]	; 0x58
 80041aa:	e001      	b.n	80041b0 <HAL_RCCEx_PeriphCLKConfig+0x960>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80041ac:	7dfb      	ldrb	r3, [r7, #23]
 80041ae:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- LPTIM1 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 80041b0:	687b      	ldr	r3, [r7, #4]
 80041b2:	681b      	ldr	r3, [r3, #0]
 80041b4:	f003 0320 	and.w	r3, r3, #32
 80041b8:	2b00      	cmp	r3, #0
 80041ba:	d04b      	beq.n	8004254 <HAL_RCCEx_PeriphCLKConfig+0xa04>
  {
    switch(PeriphClkInit->Lptim1ClockSelection)
 80041bc:	687b      	ldr	r3, [r7, #4]
 80041be:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80041c2:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80041c6:	d02e      	beq.n	8004226 <HAL_RCCEx_PeriphCLKConfig+0x9d6>
 80041c8:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80041cc:	d828      	bhi.n	8004220 <HAL_RCCEx_PeriphCLKConfig+0x9d0>
 80041ce:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80041d2:	d02a      	beq.n	800422a <HAL_RCCEx_PeriphCLKConfig+0x9da>
 80041d4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80041d8:	d822      	bhi.n	8004220 <HAL_RCCEx_PeriphCLKConfig+0x9d0>
 80041da:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 80041de:	d026      	beq.n	800422e <HAL_RCCEx_PeriphCLKConfig+0x9de>
 80041e0:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 80041e4:	d81c      	bhi.n	8004220 <HAL_RCCEx_PeriphCLKConfig+0x9d0>
 80041e6:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80041ea:	d010      	beq.n	800420e <HAL_RCCEx_PeriphCLKConfig+0x9be>
 80041ec:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80041f0:	d816      	bhi.n	8004220 <HAL_RCCEx_PeriphCLKConfig+0x9d0>
 80041f2:	2b00      	cmp	r3, #0
 80041f4:	d01d      	beq.n	8004232 <HAL_RCCEx_PeriphCLKConfig+0x9e2>
 80041f6:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 80041fa:	d111      	bne.n	8004220 <HAL_RCCEx_PeriphCLKConfig+0x9d0>
      /* LPTIM1 clock source configuration done later after clock selection check */
      break;

    case RCC_LPTIM1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM1*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 80041fc:	687b      	ldr	r3, [r7, #4]
 80041fe:	3304      	adds	r3, #4
 8004200:	2100      	movs	r1, #0
 8004202:	4618      	mov	r0, r3
 8004204:	f000 fa6a 	bl	80046dc <RCCEx_PLL2_Config>
 8004208:	4603      	mov	r3, r0
 800420a:	75fb      	strb	r3, [r7, #23]

      /* LPTIM1 clock source configuration done later after clock selection check */
      break;
 800420c:	e012      	b.n	8004234 <HAL_RCCEx_PeriphCLKConfig+0x9e4>

    case RCC_LPTIM1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM1*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 800420e:	687b      	ldr	r3, [r7, #4]
 8004210:	3324      	adds	r3, #36	; 0x24
 8004212:	2102      	movs	r1, #2
 8004214:	4618      	mov	r0, r3
 8004216:	f000 fb13 	bl	8004840 <RCCEx_PLL3_Config>
 800421a:	4603      	mov	r3, r0
 800421c:	75fb      	strb	r3, [r7, #23]

      /* LPTIM1 clock source configuration done later after clock selection check */
      break;
 800421e:	e009      	b.n	8004234 <HAL_RCCEx_PeriphCLKConfig+0x9e4>
      /* HSI, HSE, or CSI oscillator is used as source of LPTIM1 clock */
      /* LPTIM1 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8004220:	2301      	movs	r3, #1
 8004222:	75fb      	strb	r3, [r7, #23]
      break;
 8004224:	e006      	b.n	8004234 <HAL_RCCEx_PeriphCLKConfig+0x9e4>
      break;
 8004226:	bf00      	nop
 8004228:	e004      	b.n	8004234 <HAL_RCCEx_PeriphCLKConfig+0x9e4>
      break;
 800422a:	bf00      	nop
 800422c:	e002      	b.n	8004234 <HAL_RCCEx_PeriphCLKConfig+0x9e4>
      break;
 800422e:	bf00      	nop
 8004230:	e000      	b.n	8004234 <HAL_RCCEx_PeriphCLKConfig+0x9e4>
      break;
 8004232:	bf00      	nop
    }

    if(ret == HAL_OK)
 8004234:	7dfb      	ldrb	r3, [r7, #23]
 8004236:	2b00      	cmp	r3, #0
 8004238:	d10a      	bne.n	8004250 <HAL_RCCEx_PeriphCLKConfig+0xa00>
    {
      /* Set the source of LPTIM1 clock*/
      __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 800423a:	4b2e      	ldr	r3, [pc, #184]	; (80042f4 <HAL_RCCEx_PeriphCLKConfig+0xaa4>)
 800423c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800423e:	f023 42e0 	bic.w	r2, r3, #1879048192	; 0x70000000
 8004242:	687b      	ldr	r3, [r7, #4]
 8004244:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8004248:	492a      	ldr	r1, [pc, #168]	; (80042f4 <HAL_RCCEx_PeriphCLKConfig+0xaa4>)
 800424a:	4313      	orrs	r3, r2
 800424c:	654b      	str	r3, [r1, #84]	; 0x54
 800424e:	e001      	b.n	8004254 <HAL_RCCEx_PeriphCLKConfig+0xa04>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004250:	7dfb      	ldrb	r3, [r7, #23]
 8004252:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- LPTIM2 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == RCC_PERIPHCLK_LPTIM2)
 8004254:	687b      	ldr	r3, [r7, #4]
 8004256:	681b      	ldr	r3, [r3, #0]
 8004258:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800425c:	2b00      	cmp	r3, #0
 800425e:	d04d      	beq.n	80042fc <HAL_RCCEx_PeriphCLKConfig+0xaac>
  {
    switch(PeriphClkInit->Lptim2ClockSelection)
 8004260:	687b      	ldr	r3, [r7, #4]
 8004262:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8004266:	f5b3 5fa0 	cmp.w	r3, #5120	; 0x1400
 800426a:	d02e      	beq.n	80042ca <HAL_RCCEx_PeriphCLKConfig+0xa7a>
 800426c:	f5b3 5fa0 	cmp.w	r3, #5120	; 0x1400
 8004270:	d828      	bhi.n	80042c4 <HAL_RCCEx_PeriphCLKConfig+0xa74>
 8004272:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004276:	d02a      	beq.n	80042ce <HAL_RCCEx_PeriphCLKConfig+0xa7e>
 8004278:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800427c:	d822      	bhi.n	80042c4 <HAL_RCCEx_PeriphCLKConfig+0xa74>
 800427e:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8004282:	d026      	beq.n	80042d2 <HAL_RCCEx_PeriphCLKConfig+0xa82>
 8004284:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8004288:	d81c      	bhi.n	80042c4 <HAL_RCCEx_PeriphCLKConfig+0xa74>
 800428a:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800428e:	d010      	beq.n	80042b2 <HAL_RCCEx_PeriphCLKConfig+0xa62>
 8004290:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8004294:	d816      	bhi.n	80042c4 <HAL_RCCEx_PeriphCLKConfig+0xa74>
 8004296:	2b00      	cmp	r3, #0
 8004298:	d01d      	beq.n	80042d6 <HAL_RCCEx_PeriphCLKConfig+0xa86>
 800429a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800429e:	d111      	bne.n	80042c4 <HAL_RCCEx_PeriphCLKConfig+0xa74>
      /* LPTIM2 clock source configuration done later after clock selection check */
      break;

    case RCC_LPTIM2CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM2*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 80042a0:	687b      	ldr	r3, [r7, #4]
 80042a2:	3304      	adds	r3, #4
 80042a4:	2100      	movs	r1, #0
 80042a6:	4618      	mov	r0, r3
 80042a8:	f000 fa18 	bl	80046dc <RCCEx_PLL2_Config>
 80042ac:	4603      	mov	r3, r0
 80042ae:	75fb      	strb	r3, [r7, #23]

      /* LPTIM2 clock source configuration done later after clock selection check */
      break;
 80042b0:	e012      	b.n	80042d8 <HAL_RCCEx_PeriphCLKConfig+0xa88>

    case RCC_LPTIM2CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM2*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 80042b2:	687b      	ldr	r3, [r7, #4]
 80042b4:	3324      	adds	r3, #36	; 0x24
 80042b6:	2102      	movs	r1, #2
 80042b8:	4618      	mov	r0, r3
 80042ba:	f000 fac1 	bl	8004840 <RCCEx_PLL3_Config>
 80042be:	4603      	mov	r3, r0
 80042c0:	75fb      	strb	r3, [r7, #23]

      /* LPTIM2 clock source configuration done later after clock selection check */
      break;
 80042c2:	e009      	b.n	80042d8 <HAL_RCCEx_PeriphCLKConfig+0xa88>
      /* HSI, HSE, or CSI oscillator is used as source of LPTIM2 clock */
      /* LPTIM2 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80042c4:	2301      	movs	r3, #1
 80042c6:	75fb      	strb	r3, [r7, #23]
      break;
 80042c8:	e006      	b.n	80042d8 <HAL_RCCEx_PeriphCLKConfig+0xa88>
      break;
 80042ca:	bf00      	nop
 80042cc:	e004      	b.n	80042d8 <HAL_RCCEx_PeriphCLKConfig+0xa88>
      break;
 80042ce:	bf00      	nop
 80042d0:	e002      	b.n	80042d8 <HAL_RCCEx_PeriphCLKConfig+0xa88>
      break;
 80042d2:	bf00      	nop
 80042d4:	e000      	b.n	80042d8 <HAL_RCCEx_PeriphCLKConfig+0xa88>
      break;
 80042d6:	bf00      	nop
    }

    if(ret == HAL_OK)
 80042d8:	7dfb      	ldrb	r3, [r7, #23]
 80042da:	2b00      	cmp	r3, #0
 80042dc:	d10c      	bne.n	80042f8 <HAL_RCCEx_PeriphCLKConfig+0xaa8>
    {
      /* Set the source of LPTIM2 clock*/
      __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 80042de:	4b05      	ldr	r3, [pc, #20]	; (80042f4 <HAL_RCCEx_PeriphCLKConfig+0xaa4>)
 80042e0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80042e2:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 80042e6:	687b      	ldr	r3, [r7, #4]
 80042e8:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 80042ec:	4901      	ldr	r1, [pc, #4]	; (80042f4 <HAL_RCCEx_PeriphCLKConfig+0xaa4>)
 80042ee:	4313      	orrs	r3, r2
 80042f0:	658b      	str	r3, [r1, #88]	; 0x58
 80042f2:	e003      	b.n	80042fc <HAL_RCCEx_PeriphCLKConfig+0xaac>
 80042f4:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 80042f8:	7dfb      	ldrb	r3, [r7, #23]
 80042fa:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- LPTIM345 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM345) == RCC_PERIPHCLK_LPTIM345)
 80042fc:	687b      	ldr	r3, [r7, #4]
 80042fe:	681b      	ldr	r3, [r3, #0]
 8004300:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004304:	2b00      	cmp	r3, #0
 8004306:	d04b      	beq.n	80043a0 <HAL_RCCEx_PeriphCLKConfig+0xb50>
  {
    switch(PeriphClkInit->Lptim345ClockSelection)
 8004308:	687b      	ldr	r3, [r7, #4]
 800430a:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 800430e:	f5b3 4f20 	cmp.w	r3, #40960	; 0xa000
 8004312:	d02e      	beq.n	8004372 <HAL_RCCEx_PeriphCLKConfig+0xb22>
 8004314:	f5b3 4f20 	cmp.w	r3, #40960	; 0xa000
 8004318:	d828      	bhi.n	800436c <HAL_RCCEx_PeriphCLKConfig+0xb1c>
 800431a:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800431e:	d02a      	beq.n	8004376 <HAL_RCCEx_PeriphCLKConfig+0xb26>
 8004320:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8004324:	d822      	bhi.n	800436c <HAL_RCCEx_PeriphCLKConfig+0xb1c>
 8004326:	f5b3 4fc0 	cmp.w	r3, #24576	; 0x6000
 800432a:	d026      	beq.n	800437a <HAL_RCCEx_PeriphCLKConfig+0xb2a>
 800432c:	f5b3 4fc0 	cmp.w	r3, #24576	; 0x6000
 8004330:	d81c      	bhi.n	800436c <HAL_RCCEx_PeriphCLKConfig+0xb1c>
 8004332:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8004336:	d010      	beq.n	800435a <HAL_RCCEx_PeriphCLKConfig+0xb0a>
 8004338:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800433c:	d816      	bhi.n	800436c <HAL_RCCEx_PeriphCLKConfig+0xb1c>
 800433e:	2b00      	cmp	r3, #0
 8004340:	d01d      	beq.n	800437e <HAL_RCCEx_PeriphCLKConfig+0xb2e>
 8004342:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8004346:	d111      	bne.n	800436c <HAL_RCCEx_PeriphCLKConfig+0xb1c>
    case RCC_LPTIM345CLKSOURCE_PCLK4:      /* SRD/D3 PCLK1 (PCLK4) as clock source for LPTIM3/4/5 */
      /* LPTIM3/4/5 clock source configuration done later after clock selection check */
      break;

    case RCC_LPTIM345CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM3/4/5 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8004348:	687b      	ldr	r3, [r7, #4]
 800434a:	3304      	adds	r3, #4
 800434c:	2100      	movs	r1, #0
 800434e:	4618      	mov	r0, r3
 8004350:	f000 f9c4 	bl	80046dc <RCCEx_PLL2_Config>
 8004354:	4603      	mov	r3, r0
 8004356:	75fb      	strb	r3, [r7, #23]

      /* LPTIM3/4/5 clock source configuration done later after clock selection check */
      break;
 8004358:	e012      	b.n	8004380 <HAL_RCCEx_PeriphCLKConfig+0xb30>

    case RCC_LPTIM345CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM3/4/5 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 800435a:	687b      	ldr	r3, [r7, #4]
 800435c:	3324      	adds	r3, #36	; 0x24
 800435e:	2102      	movs	r1, #2
 8004360:	4618      	mov	r0, r3
 8004362:	f000 fa6d 	bl	8004840 <RCCEx_PLL3_Config>
 8004366:	4603      	mov	r3, r0
 8004368:	75fb      	strb	r3, [r7, #23]

      /* LPTIM3/4/5 clock source configuration done later after clock selection check */
      break;
 800436a:	e009      	b.n	8004380 <HAL_RCCEx_PeriphCLKConfig+0xb30>
      /* HSI, HSE, or CSI oscillator is used as source of LPTIM3/4/5 clock */
      /* LPTIM3/4/5 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800436c:	2301      	movs	r3, #1
 800436e:	75fb      	strb	r3, [r7, #23]
      break;
 8004370:	e006      	b.n	8004380 <HAL_RCCEx_PeriphCLKConfig+0xb30>
      break;
 8004372:	bf00      	nop
 8004374:	e004      	b.n	8004380 <HAL_RCCEx_PeriphCLKConfig+0xb30>
      break;
 8004376:	bf00      	nop
 8004378:	e002      	b.n	8004380 <HAL_RCCEx_PeriphCLKConfig+0xb30>
      break;
 800437a:	bf00      	nop
 800437c:	e000      	b.n	8004380 <HAL_RCCEx_PeriphCLKConfig+0xb30>
      break;
 800437e:	bf00      	nop
    }

    if(ret == HAL_OK)
 8004380:	7dfb      	ldrb	r3, [r7, #23]
 8004382:	2b00      	cmp	r3, #0
 8004384:	d10a      	bne.n	800439c <HAL_RCCEx_PeriphCLKConfig+0xb4c>
    {
      /* Set the source of LPTIM3/4/5 clock */
      __HAL_RCC_LPTIM345_CONFIG(PeriphClkInit->Lptim345ClockSelection);
 8004386:	4b9d      	ldr	r3, [pc, #628]	; (80045fc <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 8004388:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800438a:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 800438e:	687b      	ldr	r3, [r7, #4]
 8004390:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8004394:	4999      	ldr	r1, [pc, #612]	; (80045fc <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 8004396:	4313      	orrs	r3, r2
 8004398:	658b      	str	r3, [r1, #88]	; 0x58
 800439a:	e001      	b.n	80043a0 <HAL_RCCEx_PeriphCLKConfig+0xb50>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800439c:	7dfb      	ldrb	r3, [r7, #23]
 800439e:	75bb      	strb	r3, [r7, #22]

      __HAL_RCC_I2C1235_CONFIG(PeriphClkInit->I2c1235ClockSelection);

  }
#else
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C123) == RCC_PERIPHCLK_I2C123)
 80043a0:	687b      	ldr	r3, [r7, #4]
 80043a2:	681b      	ldr	r3, [r3, #0]
 80043a4:	f003 0308 	and.w	r3, r3, #8
 80043a8:	2b00      	cmp	r3, #0
 80043aa:	d01a      	beq.n	80043e2 <HAL_RCCEx_PeriphCLKConfig+0xb92>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C123CLKSOURCE(PeriphClkInit->I2c123ClockSelection));

    if ((PeriphClkInit->I2c123ClockSelection )== RCC_I2C123CLKSOURCE_PLL3 )
 80043ac:	687b      	ldr	r3, [r7, #4]
 80043ae:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80043b2:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80043b6:	d10a      	bne.n	80043ce <HAL_RCCEx_PeriphCLKConfig+0xb7e>
    {
        if(RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE)!= HAL_OK)
 80043b8:	687b      	ldr	r3, [r7, #4]
 80043ba:	3324      	adds	r3, #36	; 0x24
 80043bc:	2102      	movs	r1, #2
 80043be:	4618      	mov	r0, r3
 80043c0:	f000 fa3e 	bl	8004840 <RCCEx_PLL3_Config>
 80043c4:	4603      	mov	r3, r0
 80043c6:	2b00      	cmp	r3, #0
 80043c8:	d001      	beq.n	80043ce <HAL_RCCEx_PeriphCLKConfig+0xb7e>
        {
          status = HAL_ERROR;
 80043ca:	2301      	movs	r3, #1
 80043cc:	75bb      	strb	r3, [r7, #22]
        }
    }

      __HAL_RCC_I2C123_CONFIG(PeriphClkInit->I2c123ClockSelection);
 80043ce:	4b8b      	ldr	r3, [pc, #556]	; (80045fc <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 80043d0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80043d2:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 80043d6:	687b      	ldr	r3, [r7, #4]
 80043d8:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80043dc:	4987      	ldr	r1, [pc, #540]	; (80045fc <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 80043de:	4313      	orrs	r3, r2
 80043e0:	654b      	str	r3, [r1, #84]	; 0x54

  }
#endif /* I2C5 */

  /*------------------------------ I2C4 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 80043e2:	687b      	ldr	r3, [r7, #4]
 80043e4:	681b      	ldr	r3, [r3, #0]
 80043e6:	f003 0310 	and.w	r3, r3, #16
 80043ea:	2b00      	cmp	r3, #0
 80043ec:	d01a      	beq.n	8004424 <HAL_RCCEx_PeriphCLKConfig+0xbd4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    if ((PeriphClkInit->I2c4ClockSelection) == RCC_I2C4CLKSOURCE_PLL3 )
 80043ee:	687b      	ldr	r3, [r7, #4]
 80043f0:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80043f4:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80043f8:	d10a      	bne.n	8004410 <HAL_RCCEx_PeriphCLKConfig+0xbc0>
    {
      if(RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE)!= HAL_OK)
 80043fa:	687b      	ldr	r3, [r7, #4]
 80043fc:	3324      	adds	r3, #36	; 0x24
 80043fe:	2102      	movs	r1, #2
 8004400:	4618      	mov	r0, r3
 8004402:	f000 fa1d 	bl	8004840 <RCCEx_PLL3_Config>
 8004406:	4603      	mov	r3, r0
 8004408:	2b00      	cmp	r3, #0
 800440a:	d001      	beq.n	8004410 <HAL_RCCEx_PeriphCLKConfig+0xbc0>
      {
        status = HAL_ERROR;
 800440c:	2301      	movs	r3, #1
 800440e:	75bb      	strb	r3, [r7, #22]
      }
    }

      __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 8004410:	4b7a      	ldr	r3, [pc, #488]	; (80045fc <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 8004412:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004414:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8004418:	687b      	ldr	r3, [r7, #4]
 800441a:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800441e:	4977      	ldr	r1, [pc, #476]	; (80045fc <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 8004420:	4313      	orrs	r3, r2
 8004422:	658b      	str	r3, [r1, #88]	; 0x58

  }

  /*---------------------------- ADC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8004424:	687b      	ldr	r3, [r7, #4]
 8004426:	681b      	ldr	r3, [r3, #0]
 8004428:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800442c:	2b00      	cmp	r3, #0
 800442e:	d034      	beq.n	800449a <HAL_RCCEx_PeriphCLKConfig+0xc4a>
  {
    switch(PeriphClkInit->AdcClockSelection)
 8004430:	687b      	ldr	r3, [r7, #4]
 8004432:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 8004436:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800443a:	d01d      	beq.n	8004478 <HAL_RCCEx_PeriphCLKConfig+0xc28>
 800443c:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8004440:	d817      	bhi.n	8004472 <HAL_RCCEx_PeriphCLKConfig+0xc22>
 8004442:	2b00      	cmp	r3, #0
 8004444:	d003      	beq.n	800444e <HAL_RCCEx_PeriphCLKConfig+0xbfe>
 8004446:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800444a:	d009      	beq.n	8004460 <HAL_RCCEx_PeriphCLKConfig+0xc10>
 800444c:	e011      	b.n	8004472 <HAL_RCCEx_PeriphCLKConfig+0xc22>
    {

    case RCC_ADCCLKSOURCE_PLL2: /* PLL2 is used as clock source for ADC*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 800444e:	687b      	ldr	r3, [r7, #4]
 8004450:	3304      	adds	r3, #4
 8004452:	2100      	movs	r1, #0
 8004454:	4618      	mov	r0, r3
 8004456:	f000 f941 	bl	80046dc <RCCEx_PLL2_Config>
 800445a:	4603      	mov	r3, r0
 800445c:	75fb      	strb	r3, [r7, #23]

      /* ADC clock source configuration done later after clock selection check */
      break;
 800445e:	e00c      	b.n	800447a <HAL_RCCEx_PeriphCLKConfig+0xc2a>

    case RCC_ADCCLKSOURCE_PLL3:  /* PLL3 is used as clock source for ADC*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 8004460:	687b      	ldr	r3, [r7, #4]
 8004462:	3324      	adds	r3, #36	; 0x24
 8004464:	2102      	movs	r1, #2
 8004466:	4618      	mov	r0, r3
 8004468:	f000 f9ea 	bl	8004840 <RCCEx_PLL3_Config>
 800446c:	4603      	mov	r3, r0
 800446e:	75fb      	strb	r3, [r7, #23]

      /* ADC clock source configuration done later after clock selection check */
      break;
 8004470:	e003      	b.n	800447a <HAL_RCCEx_PeriphCLKConfig+0xc2a>
      /* HSI, HSE, or CSI oscillator is used as source of ADC clock */
      /* ADC clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8004472:	2301      	movs	r3, #1
 8004474:	75fb      	strb	r3, [r7, #23]
      break;
 8004476:	e000      	b.n	800447a <HAL_RCCEx_PeriphCLKConfig+0xc2a>
      break;
 8004478:	bf00      	nop
    }

    if(ret == HAL_OK)
 800447a:	7dfb      	ldrb	r3, [r7, #23]
 800447c:	2b00      	cmp	r3, #0
 800447e:	d10a      	bne.n	8004496 <HAL_RCCEx_PeriphCLKConfig+0xc46>
    {
      /* Set the source of ADC clock*/
      __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8004480:	4b5e      	ldr	r3, [pc, #376]	; (80045fc <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 8004482:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004484:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8004488:	687b      	ldr	r3, [r7, #4]
 800448a:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 800448e:	495b      	ldr	r1, [pc, #364]	; (80045fc <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 8004490:	4313      	orrs	r3, r2
 8004492:	658b      	str	r3, [r1, #88]	; 0x58
 8004494:	e001      	b.n	800449a <HAL_RCCEx_PeriphCLKConfig+0xc4a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004496:	7dfb      	ldrb	r3, [r7, #23]
 8004498:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*------------------------------ USB Configuration -------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 800449a:	687b      	ldr	r3, [r7, #4]
 800449c:	681b      	ldr	r3, [r3, #0]
 800449e:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80044a2:	2b00      	cmp	r3, #0
 80044a4:	d033      	beq.n	800450e <HAL_RCCEx_PeriphCLKConfig+0xcbe>
  {

    switch(PeriphClkInit->UsbClockSelection)
 80044a6:	687b      	ldr	r3, [r7, #4]
 80044a8:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80044ac:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 80044b0:	d01c      	beq.n	80044ec <HAL_RCCEx_PeriphCLKConfig+0xc9c>
 80044b2:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 80044b6:	d816      	bhi.n	80044e6 <HAL_RCCEx_PeriphCLKConfig+0xc96>
 80044b8:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80044bc:	d003      	beq.n	80044c6 <HAL_RCCEx_PeriphCLKConfig+0xc76>
 80044be:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 80044c2:	d007      	beq.n	80044d4 <HAL_RCCEx_PeriphCLKConfig+0xc84>
 80044c4:	e00f      	b.n	80044e6 <HAL_RCCEx_PeriphCLKConfig+0xc96>
    {
    case RCC_USBCLKSOURCE_PLL:      /* PLL is used as clock source for USB*/
      /* Enable USB Clock output generated form System USB . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80044c6:	4b4d      	ldr	r3, [pc, #308]	; (80045fc <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 80044c8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80044ca:	4a4c      	ldr	r2, [pc, #304]	; (80045fc <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 80044cc:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80044d0:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* USB clock source configuration done later after clock selection check */
      break;
 80044d2:	e00c      	b.n	80044ee <HAL_RCCEx_PeriphCLKConfig+0xc9e>

    case RCC_USBCLKSOURCE_PLL3: /* PLL3 is used as clock source for USB*/

      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 80044d4:	687b      	ldr	r3, [r7, #4]
 80044d6:	3324      	adds	r3, #36	; 0x24
 80044d8:	2101      	movs	r1, #1
 80044da:	4618      	mov	r0, r3
 80044dc:	f000 f9b0 	bl	8004840 <RCCEx_PLL3_Config>
 80044e0:	4603      	mov	r3, r0
 80044e2:	75fb      	strb	r3, [r7, #23]

      /* USB clock source configuration done later after clock selection check */
      break;
 80044e4:	e003      	b.n	80044ee <HAL_RCCEx_PeriphCLKConfig+0xc9e>
      /* HSI48 oscillator is used as source of USB clock */
      /* USB clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80044e6:	2301      	movs	r3, #1
 80044e8:	75fb      	strb	r3, [r7, #23]
      break;
 80044ea:	e000      	b.n	80044ee <HAL_RCCEx_PeriphCLKConfig+0xc9e>
      break;
 80044ec:	bf00      	nop
    }

    if(ret == HAL_OK)
 80044ee:	7dfb      	ldrb	r3, [r7, #23]
 80044f0:	2b00      	cmp	r3, #0
 80044f2:	d10a      	bne.n	800450a <HAL_RCCEx_PeriphCLKConfig+0xcba>
    {
      /* Set the source of USB clock*/
      __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 80044f4:	4b41      	ldr	r3, [pc, #260]	; (80045fc <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 80044f6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80044f8:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 80044fc:	687b      	ldr	r3, [r7, #4]
 80044fe:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8004502:	493e      	ldr	r1, [pc, #248]	; (80045fc <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 8004504:	4313      	orrs	r3, r2
 8004506:	654b      	str	r3, [r1, #84]	; 0x54
 8004508:	e001      	b.n	800450e <HAL_RCCEx_PeriphCLKConfig+0xcbe>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800450a:	7dfb      	ldrb	r3, [r7, #23]
 800450c:	75bb      	strb	r3, [r7, #22]
    }

  }

  /*------------------------------------- SDMMC Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC) == RCC_PERIPHCLK_SDMMC)
 800450e:	687b      	ldr	r3, [r7, #4]
 8004510:	681b      	ldr	r3, [r3, #0]
 8004512:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8004516:	2b00      	cmp	r3, #0
 8004518:	d029      	beq.n	800456e <HAL_RCCEx_PeriphCLKConfig+0xd1e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC(PeriphClkInit->SdmmcClockSelection));

    switch(PeriphClkInit->SdmmcClockSelection)
 800451a:	687b      	ldr	r3, [r7, #4]
 800451c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800451e:	2b00      	cmp	r3, #0
 8004520:	d003      	beq.n	800452a <HAL_RCCEx_PeriphCLKConfig+0xcda>
 8004522:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004526:	d007      	beq.n	8004538 <HAL_RCCEx_PeriphCLKConfig+0xce8>
 8004528:	e00f      	b.n	800454a <HAL_RCCEx_PeriphCLKConfig+0xcfa>
    {
    case RCC_SDMMCCLKSOURCE_PLL:      /* PLL is used as clock source for SDMMC*/
      /* Enable SDMMC Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800452a:	4b34      	ldr	r3, [pc, #208]	; (80045fc <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 800452c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800452e:	4a33      	ldr	r2, [pc, #204]	; (80045fc <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 8004530:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8004534:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SDMMC clock source configuration done later after clock selection check */
      break;
 8004536:	e00b      	b.n	8004550 <HAL_RCCEx_PeriphCLKConfig+0xd00>

    case RCC_SDMMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for SDMMC*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 8004538:	687b      	ldr	r3, [r7, #4]
 800453a:	3304      	adds	r3, #4
 800453c:	2102      	movs	r1, #2
 800453e:	4618      	mov	r0, r3
 8004540:	f000 f8cc 	bl	80046dc <RCCEx_PLL2_Config>
 8004544:	4603      	mov	r3, r0
 8004546:	75fb      	strb	r3, [r7, #23]

      /* SDMMC clock source configuration done later after clock selection check */
      break;
 8004548:	e002      	b.n	8004550 <HAL_RCCEx_PeriphCLKConfig+0xd00>

    default:
      ret = HAL_ERROR;
 800454a:	2301      	movs	r3, #1
 800454c:	75fb      	strb	r3, [r7, #23]
      break;
 800454e:	bf00      	nop
    }

    if(ret == HAL_OK)
 8004550:	7dfb      	ldrb	r3, [r7, #23]
 8004552:	2b00      	cmp	r3, #0
 8004554:	d109      	bne.n	800456a <HAL_RCCEx_PeriphCLKConfig+0xd1a>
    {
      /* Set the source of SDMMC clock*/
      __HAL_RCC_SDMMC_CONFIG(PeriphClkInit->SdmmcClockSelection);
 8004556:	4b29      	ldr	r3, [pc, #164]	; (80045fc <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 8004558:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800455a:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 800455e:	687b      	ldr	r3, [r7, #4]
 8004560:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004562:	4926      	ldr	r1, [pc, #152]	; (80045fc <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 8004564:	4313      	orrs	r3, r2
 8004566:	64cb      	str	r3, [r1, #76]	; 0x4c
 8004568:	e001      	b.n	800456e <HAL_RCCEx_PeriphCLKConfig+0xd1e>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800456a:	7dfb      	ldrb	r3, [r7, #23]
 800456c:	75bb      	strb	r3, [r7, #22]
    }
  }

#if defined(LTDC)
  /*-------------------------------------- LTDC Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 800456e:	687b      	ldr	r3, [r7, #4]
 8004570:	681b      	ldr	r3, [r3, #0]
 8004572:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8004576:	2b00      	cmp	r3, #0
 8004578:	d00a      	beq.n	8004590 <HAL_RCCEx_PeriphCLKConfig+0xd40>
  {
    if(RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE)!=HAL_OK)
 800457a:	687b      	ldr	r3, [r7, #4]
 800457c:	3324      	adds	r3, #36	; 0x24
 800457e:	2102      	movs	r1, #2
 8004580:	4618      	mov	r0, r3
 8004582:	f000 f95d 	bl	8004840 <RCCEx_PLL3_Config>
 8004586:	4603      	mov	r3, r0
 8004588:	2b00      	cmp	r3, #0
 800458a:	d001      	beq.n	8004590 <HAL_RCCEx_PeriphCLKConfig+0xd40>
    {
      status=HAL_ERROR;
 800458c:	2301      	movs	r3, #1
 800458e:	75bb      	strb	r3, [r7, #22]
    }
  }
#endif /* LTDC */

  /*------------------------------ RNG Configuration -------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == RCC_PERIPHCLK_RNG)
 8004590:	687b      	ldr	r3, [r7, #4]
 8004592:	681b      	ldr	r3, [r3, #0]
 8004594:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004598:	2b00      	cmp	r3, #0
 800459a:	d033      	beq.n	8004604 <HAL_RCCEx_PeriphCLKConfig+0xdb4>
  {

    switch(PeriphClkInit->RngClockSelection)
 800459c:	687b      	ldr	r3, [r7, #4]
 800459e:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80045a0:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80045a4:	d017      	beq.n	80045d6 <HAL_RCCEx_PeriphCLKConfig+0xd86>
 80045a6:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80045aa:	d811      	bhi.n	80045d0 <HAL_RCCEx_PeriphCLKConfig+0xd80>
 80045ac:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80045b0:	d013      	beq.n	80045da <HAL_RCCEx_PeriphCLKConfig+0xd8a>
 80045b2:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80045b6:	d80b      	bhi.n	80045d0 <HAL_RCCEx_PeriphCLKConfig+0xd80>
 80045b8:	2b00      	cmp	r3, #0
 80045ba:	d010      	beq.n	80045de <HAL_RCCEx_PeriphCLKConfig+0xd8e>
 80045bc:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80045c0:	d106      	bne.n	80045d0 <HAL_RCCEx_PeriphCLKConfig+0xd80>
    {
    case RCC_RNGCLKSOURCE_PLL:     /* PLL is used as clock source for RNG*/
      /* Enable RNG Clock output generated form System RNG . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80045c2:	4b0e      	ldr	r3, [pc, #56]	; (80045fc <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 80045c4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80045c6:	4a0d      	ldr	r2, [pc, #52]	; (80045fc <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 80045c8:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80045cc:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* RNG clock source configuration done later after clock selection check */
      break;
 80045ce:	e007      	b.n	80045e0 <HAL_RCCEx_PeriphCLKConfig+0xd90>
      /* HSI48 oscillator is used as source of RNG clock */
      /* RNG clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80045d0:	2301      	movs	r3, #1
 80045d2:	75fb      	strb	r3, [r7, #23]
      break;
 80045d4:	e004      	b.n	80045e0 <HAL_RCCEx_PeriphCLKConfig+0xd90>
      break;
 80045d6:	bf00      	nop
 80045d8:	e002      	b.n	80045e0 <HAL_RCCEx_PeriphCLKConfig+0xd90>
      break;
 80045da:	bf00      	nop
 80045dc:	e000      	b.n	80045e0 <HAL_RCCEx_PeriphCLKConfig+0xd90>
      break;
 80045de:	bf00      	nop
    }

    if(ret == HAL_OK)
 80045e0:	7dfb      	ldrb	r3, [r7, #23]
 80045e2:	2b00      	cmp	r3, #0
 80045e4:	d10c      	bne.n	8004600 <HAL_RCCEx_PeriphCLKConfig+0xdb0>
    {
      /* Set the source of RNG clock*/
      __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 80045e6:	4b05      	ldr	r3, [pc, #20]	; (80045fc <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 80045e8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80045ea:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 80045ee:	687b      	ldr	r3, [r7, #4]
 80045f0:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80045f2:	4902      	ldr	r1, [pc, #8]	; (80045fc <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 80045f4:	4313      	orrs	r3, r2
 80045f6:	654b      	str	r3, [r1, #84]	; 0x54
 80045f8:	e004      	b.n	8004604 <HAL_RCCEx_PeriphCLKConfig+0xdb4>
 80045fa:	bf00      	nop
 80045fc:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004600:	7dfb      	ldrb	r3, [r7, #23]
 8004602:	75bb      	strb	r3, [r7, #22]
    }

  }

  /*------------------------------ SWPMI1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 8004604:	687b      	ldr	r3, [r7, #4]
 8004606:	681b      	ldr	r3, [r3, #0]
 8004608:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800460c:	2b00      	cmp	r3, #0
 800460e:	d008      	beq.n	8004622 <HAL_RCCEx_PeriphCLKConfig+0xdd2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 interface clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 8004610:	4b31      	ldr	r3, [pc, #196]	; (80046d8 <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 8004612:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004614:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8004618:	687b      	ldr	r3, [r7, #4]
 800461a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800461c:	492e      	ldr	r1, [pc, #184]	; (80046d8 <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 800461e:	4313      	orrs	r3, r2
 8004620:	650b      	str	r3, [r1, #80]	; 0x50
  }
#if defined(HRTIM1)
  /*------------------------------ HRTIM1 clock Configuration ----------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_HRTIM1) == RCC_PERIPHCLK_HRTIM1)
 8004622:	687b      	ldr	r3, [r7, #4]
 8004624:	681b      	ldr	r3, [r3, #0]
 8004626:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800462a:	2b00      	cmp	r3, #0
 800462c:	d009      	beq.n	8004642 <HAL_RCCEx_PeriphCLKConfig+0xdf2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HRTIM1CLKSOURCE(PeriphClkInit->Hrtim1ClockSelection));

    /* Configure the HRTIM1 clock source */
    __HAL_RCC_HRTIM1_CONFIG(PeriphClkInit->Hrtim1ClockSelection);
 800462e:	4b2a      	ldr	r3, [pc, #168]	; (80046d8 <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 8004630:	691b      	ldr	r3, [r3, #16]
 8004632:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 8004636:	687b      	ldr	r3, [r7, #4]
 8004638:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 800463c:	4926      	ldr	r1, [pc, #152]	; (80046d8 <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 800463e:	4313      	orrs	r3, r2
 8004640:	610b      	str	r3, [r1, #16]
  }
#endif  /*HRTIM1*/
  /*------------------------------ DFSDM1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 8004642:	687b      	ldr	r3, [r7, #4]
 8004644:	681b      	ldr	r3, [r3, #0]
 8004646:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800464a:	2b00      	cmp	r3, #0
 800464c:	d008      	beq.n	8004660 <HAL_RCCEx_PeriphCLKConfig+0xe10>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 800464e:	4b22      	ldr	r3, [pc, #136]	; (80046d8 <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 8004650:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004652:	f023 7280 	bic.w	r2, r3, #16777216	; 0x1000000
 8004656:	687b      	ldr	r3, [r7, #4]
 8004658:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800465a:	491f      	ldr	r1, [pc, #124]	; (80046d8 <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 800465c:	4313      	orrs	r3, r2
 800465e:	650b      	str	r3, [r1, #80]	; 0x50
    __HAL_RCC_DFSDM2_CONFIG(PeriphClkInit->Dfsdm2ClockSelection);
  }
#endif  /* DFSDM2 */

  /*------------------------------------ TIM configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == RCC_PERIPHCLK_TIM)
 8004660:	687b      	ldr	r3, [r7, #4]
 8004662:	681b      	ldr	r3, [r3, #0]
 8004664:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 8004668:	2b00      	cmp	r3, #0
 800466a:	d00d      	beq.n	8004688 <HAL_RCCEx_PeriphCLKConfig+0xe38>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 800466c:	4b1a      	ldr	r3, [pc, #104]	; (80046d8 <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 800466e:	691b      	ldr	r3, [r3, #16]
 8004670:	4a19      	ldr	r2, [pc, #100]	; (80046d8 <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 8004672:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8004676:	6113      	str	r3, [r2, #16]
 8004678:	4b17      	ldr	r3, [pc, #92]	; (80046d8 <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 800467a:	691a      	ldr	r2, [r3, #16]
 800467c:	687b      	ldr	r3, [r7, #4]
 800467e:	f8d3 30b8 	ldr.w	r3, [r3, #184]	; 0xb8
 8004682:	4915      	ldr	r1, [pc, #84]	; (80046d8 <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 8004684:	4313      	orrs	r3, r2
 8004686:	610b      	str	r3, [r1, #16]
  }

  /*------------------------------------ CKPER configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CKPER) == RCC_PERIPHCLK_CKPER)
 8004688:	687b      	ldr	r3, [r7, #4]
 800468a:	681b      	ldr	r3, [r3, #0]
 800468c:	2b00      	cmp	r3, #0
 800468e:	da08      	bge.n	80046a2 <HAL_RCCEx_PeriphCLKConfig+0xe52>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLKPSOURCE(PeriphClkInit->CkperClockSelection));

    /* Configure the CKPER clock source */
    __HAL_RCC_CLKP_CONFIG(PeriphClkInit->CkperClockSelection);
 8004690:	4b11      	ldr	r3, [pc, #68]	; (80046d8 <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 8004692:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004694:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 8004698:	687b      	ldr	r3, [r7, #4]
 800469a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800469c:	490e      	ldr	r1, [pc, #56]	; (80046d8 <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 800469e:	4313      	orrs	r3, r2
 80046a0:	64cb      	str	r3, [r1, #76]	; 0x4c
  }

  /*------------------------------ CEC Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 80046a2:	687b      	ldr	r3, [r7, #4]
 80046a4:	681b      	ldr	r3, [r3, #0]
 80046a6:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 80046aa:	2b00      	cmp	r3, #0
 80046ac:	d009      	beq.n	80046c2 <HAL_RCCEx_PeriphCLKConfig+0xe72>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC interface clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 80046ae:	4b0a      	ldr	r3, [pc, #40]	; (80046d8 <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 80046b0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80046b2:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 80046b6:	687b      	ldr	r3, [r7, #4]
 80046b8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80046bc:	4906      	ldr	r1, [pc, #24]	; (80046d8 <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 80046be:	4313      	orrs	r3, r2
 80046c0:	654b      	str	r3, [r1, #84]	; 0x54
  }

  if (status == HAL_OK)
 80046c2:	7dbb      	ldrb	r3, [r7, #22]
 80046c4:	2b00      	cmp	r3, #0
 80046c6:	d101      	bne.n	80046cc <HAL_RCCEx_PeriphCLKConfig+0xe7c>
  {
    return HAL_OK;
 80046c8:	2300      	movs	r3, #0
 80046ca:	e000      	b.n	80046ce <HAL_RCCEx_PeriphCLKConfig+0xe7e>
  }
  return HAL_ERROR;
 80046cc:	2301      	movs	r3, #1
}
 80046ce:	4618      	mov	r0, r3
 80046d0:	3718      	adds	r7, #24
 80046d2:	46bd      	mov	sp, r7
 80046d4:	bd80      	pop	{r7, pc}
 80046d6:	bf00      	nop
 80046d8:	58024400 	.word	0x58024400

080046dc <RCCEx_PLL2_Config>:
  * @note   PLL2 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL2_Config(RCC_PLL2InitTypeDef *pll2, uint32_t Divider)
{
 80046dc:	b580      	push	{r7, lr}
 80046de:	b084      	sub	sp, #16
 80046e0:	af00      	add	r7, sp, #0
 80046e2:	6078      	str	r0, [r7, #4]
 80046e4:	6039      	str	r1, [r7, #0]

  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 80046e6:	2300      	movs	r3, #0
 80046e8:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL2RGE_VALUE(pll2->PLL2RGE));
  assert_param(IS_RCC_PLL2VCO_VALUE(pll2->PLL2VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll2->PLL2FRACN));

  /* Check that PLL2 OSC clock source is already set */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 80046ea:	4b53      	ldr	r3, [pc, #332]	; (8004838 <RCCEx_PLL2_Config+0x15c>)
 80046ec:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80046ee:	f003 0303 	and.w	r3, r3, #3
 80046f2:	2b03      	cmp	r3, #3
 80046f4:	d101      	bne.n	80046fa <RCCEx_PLL2_Config+0x1e>
  {
    return HAL_ERROR;
 80046f6:	2301      	movs	r3, #1
 80046f8:	e099      	b.n	800482e <RCCEx_PLL2_Config+0x152>


  else
  {
    /* Disable  PLL2. */
    __HAL_RCC_PLL2_DISABLE();
 80046fa:	4b4f      	ldr	r3, [pc, #316]	; (8004838 <RCCEx_PLL2_Config+0x15c>)
 80046fc:	681b      	ldr	r3, [r3, #0]
 80046fe:	4a4e      	ldr	r2, [pc, #312]	; (8004838 <RCCEx_PLL2_Config+0x15c>)
 8004700:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8004704:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004706:	f7fc fae1 	bl	8000ccc <HAL_GetTick>
 800470a:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 800470c:	e008      	b.n	8004720 <RCCEx_PLL2_Config+0x44>
    {
      if( (HAL_GetTick() - tickstart ) > PLL2_TIMEOUT_VALUE)
 800470e:	f7fc fadd 	bl	8000ccc <HAL_GetTick>
 8004712:	4602      	mov	r2, r0
 8004714:	68bb      	ldr	r3, [r7, #8]
 8004716:	1ad3      	subs	r3, r2, r3
 8004718:	2b02      	cmp	r3, #2
 800471a:	d901      	bls.n	8004720 <RCCEx_PLL2_Config+0x44>
      {
        return HAL_TIMEOUT;
 800471c:	2303      	movs	r3, #3
 800471e:	e086      	b.n	800482e <RCCEx_PLL2_Config+0x152>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 8004720:	4b45      	ldr	r3, [pc, #276]	; (8004838 <RCCEx_PLL2_Config+0x15c>)
 8004722:	681b      	ldr	r3, [r3, #0]
 8004724:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8004728:	2b00      	cmp	r3, #0
 800472a:	d1f0      	bne.n	800470e <RCCEx_PLL2_Config+0x32>
      }
    }

    /* Configure PLL2 multiplication and division factors. */
    __HAL_RCC_PLL2_CONFIG(pll2->PLL2M,
 800472c:	4b42      	ldr	r3, [pc, #264]	; (8004838 <RCCEx_PLL2_Config+0x15c>)
 800472e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004730:	f423 327c 	bic.w	r2, r3, #258048	; 0x3f000
 8004734:	687b      	ldr	r3, [r7, #4]
 8004736:	681b      	ldr	r3, [r3, #0]
 8004738:	031b      	lsls	r3, r3, #12
 800473a:	493f      	ldr	r1, [pc, #252]	; (8004838 <RCCEx_PLL2_Config+0x15c>)
 800473c:	4313      	orrs	r3, r2
 800473e:	628b      	str	r3, [r1, #40]	; 0x28
 8004740:	687b      	ldr	r3, [r7, #4]
 8004742:	685b      	ldr	r3, [r3, #4]
 8004744:	3b01      	subs	r3, #1
 8004746:	f3c3 0208 	ubfx	r2, r3, #0, #9
 800474a:	687b      	ldr	r3, [r7, #4]
 800474c:	689b      	ldr	r3, [r3, #8]
 800474e:	3b01      	subs	r3, #1
 8004750:	025b      	lsls	r3, r3, #9
 8004752:	b29b      	uxth	r3, r3
 8004754:	431a      	orrs	r2, r3
 8004756:	687b      	ldr	r3, [r7, #4]
 8004758:	68db      	ldr	r3, [r3, #12]
 800475a:	3b01      	subs	r3, #1
 800475c:	041b      	lsls	r3, r3, #16
 800475e:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 8004762:	431a      	orrs	r2, r3
 8004764:	687b      	ldr	r3, [r7, #4]
 8004766:	691b      	ldr	r3, [r3, #16]
 8004768:	3b01      	subs	r3, #1
 800476a:	061b      	lsls	r3, r3, #24
 800476c:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 8004770:	4931      	ldr	r1, [pc, #196]	; (8004838 <RCCEx_PLL2_Config+0x15c>)
 8004772:	4313      	orrs	r3, r2
 8004774:	638b      	str	r3, [r1, #56]	; 0x38
                          pll2->PLL2P,
                          pll2->PLL2Q,
                          pll2->PLL2R);

    /* Select PLL2 input reference frequency range: VCI */
    __HAL_RCC_PLL2_VCIRANGE(pll2->PLL2RGE) ;
 8004776:	4b30      	ldr	r3, [pc, #192]	; (8004838 <RCCEx_PLL2_Config+0x15c>)
 8004778:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800477a:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 800477e:	687b      	ldr	r3, [r7, #4]
 8004780:	695b      	ldr	r3, [r3, #20]
 8004782:	492d      	ldr	r1, [pc, #180]	; (8004838 <RCCEx_PLL2_Config+0x15c>)
 8004784:	4313      	orrs	r3, r2
 8004786:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Select PLL2 output frequency range : VCO */
    __HAL_RCC_PLL2_VCORANGE(pll2->PLL2VCOSEL) ;
 8004788:	4b2b      	ldr	r3, [pc, #172]	; (8004838 <RCCEx_PLL2_Config+0x15c>)
 800478a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800478c:	f023 0220 	bic.w	r2, r3, #32
 8004790:	687b      	ldr	r3, [r7, #4]
 8004792:	699b      	ldr	r3, [r3, #24]
 8004794:	4928      	ldr	r1, [pc, #160]	; (8004838 <RCCEx_PLL2_Config+0x15c>)
 8004796:	4313      	orrs	r3, r2
 8004798:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Disable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_DISABLE();
 800479a:	4b27      	ldr	r3, [pc, #156]	; (8004838 <RCCEx_PLL2_Config+0x15c>)
 800479c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800479e:	4a26      	ldr	r2, [pc, #152]	; (8004838 <RCCEx_PLL2_Config+0x15c>)
 80047a0:	f023 0310 	bic.w	r3, r3, #16
 80047a4:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Configures PLL2 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL2FRACN_CONFIG(pll2->PLL2FRACN);
 80047a6:	4b24      	ldr	r3, [pc, #144]	; (8004838 <RCCEx_PLL2_Config+0x15c>)
 80047a8:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80047aa:	4b24      	ldr	r3, [pc, #144]	; (800483c <RCCEx_PLL2_Config+0x160>)
 80047ac:	4013      	ands	r3, r2
 80047ae:	687a      	ldr	r2, [r7, #4]
 80047b0:	69d2      	ldr	r2, [r2, #28]
 80047b2:	00d2      	lsls	r2, r2, #3
 80047b4:	4920      	ldr	r1, [pc, #128]	; (8004838 <RCCEx_PLL2_Config+0x15c>)
 80047b6:	4313      	orrs	r3, r2
 80047b8:	63cb      	str	r3, [r1, #60]	; 0x3c

    /* Enable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_ENABLE();
 80047ba:	4b1f      	ldr	r3, [pc, #124]	; (8004838 <RCCEx_PLL2_Config+0x15c>)
 80047bc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80047be:	4a1e      	ldr	r2, [pc, #120]	; (8004838 <RCCEx_PLL2_Config+0x15c>)
 80047c0:	f043 0310 	orr.w	r3, r3, #16
 80047c4:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Enable the PLL2 clock output */
    if(Divider == DIVIDER_P_UPDATE)
 80047c6:	683b      	ldr	r3, [r7, #0]
 80047c8:	2b00      	cmp	r3, #0
 80047ca:	d106      	bne.n	80047da <RCCEx_PLL2_Config+0xfe>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVP);
 80047cc:	4b1a      	ldr	r3, [pc, #104]	; (8004838 <RCCEx_PLL2_Config+0x15c>)
 80047ce:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80047d0:	4a19      	ldr	r2, [pc, #100]	; (8004838 <RCCEx_PLL2_Config+0x15c>)
 80047d2:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 80047d6:	62d3      	str	r3, [r2, #44]	; 0x2c
 80047d8:	e00f      	b.n	80047fa <RCCEx_PLL2_Config+0x11e>
    }
    else if(Divider == DIVIDER_Q_UPDATE)
 80047da:	683b      	ldr	r3, [r7, #0]
 80047dc:	2b01      	cmp	r3, #1
 80047de:	d106      	bne.n	80047ee <RCCEx_PLL2_Config+0x112>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVQ);
 80047e0:	4b15      	ldr	r3, [pc, #84]	; (8004838 <RCCEx_PLL2_Config+0x15c>)
 80047e2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80047e4:	4a14      	ldr	r2, [pc, #80]	; (8004838 <RCCEx_PLL2_Config+0x15c>)
 80047e6:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80047ea:	62d3      	str	r3, [r2, #44]	; 0x2c
 80047ec:	e005      	b.n	80047fa <RCCEx_PLL2_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVR);
 80047ee:	4b12      	ldr	r3, [pc, #72]	; (8004838 <RCCEx_PLL2_Config+0x15c>)
 80047f0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80047f2:	4a11      	ldr	r2, [pc, #68]	; (8004838 <RCCEx_PLL2_Config+0x15c>)
 80047f4:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 80047f8:	62d3      	str	r3, [r2, #44]	; 0x2c
    }

    /* Enable  PLL2. */
    __HAL_RCC_PLL2_ENABLE();
 80047fa:	4b0f      	ldr	r3, [pc, #60]	; (8004838 <RCCEx_PLL2_Config+0x15c>)
 80047fc:	681b      	ldr	r3, [r3, #0]
 80047fe:	4a0e      	ldr	r2, [pc, #56]	; (8004838 <RCCEx_PLL2_Config+0x15c>)
 8004800:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8004804:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004806:	f7fc fa61 	bl	8000ccc <HAL_GetTick>
 800480a:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL2 is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 800480c:	e008      	b.n	8004820 <RCCEx_PLL2_Config+0x144>
    {
      if( (HAL_GetTick() - tickstart ) > PLL2_TIMEOUT_VALUE)
 800480e:	f7fc fa5d 	bl	8000ccc <HAL_GetTick>
 8004812:	4602      	mov	r2, r0
 8004814:	68bb      	ldr	r3, [r7, #8]
 8004816:	1ad3      	subs	r3, r2, r3
 8004818:	2b02      	cmp	r3, #2
 800481a:	d901      	bls.n	8004820 <RCCEx_PLL2_Config+0x144>
      {
        return HAL_TIMEOUT;
 800481c:	2303      	movs	r3, #3
 800481e:	e006      	b.n	800482e <RCCEx_PLL2_Config+0x152>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 8004820:	4b05      	ldr	r3, [pc, #20]	; (8004838 <RCCEx_PLL2_Config+0x15c>)
 8004822:	681b      	ldr	r3, [r3, #0]
 8004824:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8004828:	2b00      	cmp	r3, #0
 800482a:	d0f0      	beq.n	800480e <RCCEx_PLL2_Config+0x132>
    }

  }


  return status;
 800482c:	7bfb      	ldrb	r3, [r7, #15]
}
 800482e:	4618      	mov	r0, r3
 8004830:	3710      	adds	r7, #16
 8004832:	46bd      	mov	sp, r7
 8004834:	bd80      	pop	{r7, pc}
 8004836:	bf00      	nop
 8004838:	58024400 	.word	0x58024400
 800483c:	ffff0007 	.word	0xffff0007

08004840 <RCCEx_PLL3_Config>:
  * @note   PLL3 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL3_Config(RCC_PLL3InitTypeDef *pll3, uint32_t Divider)
{
 8004840:	b580      	push	{r7, lr}
 8004842:	b084      	sub	sp, #16
 8004844:	af00      	add	r7, sp, #0
 8004846:	6078      	str	r0, [r7, #4]
 8004848:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 800484a:	2300      	movs	r3, #0
 800484c:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL3RGE_VALUE(pll3->PLL3RGE));
  assert_param(IS_RCC_PLL3VCO_VALUE(pll3->PLL3VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll3->PLL3FRACN));

  /* Check that PLL3 OSC clock source is already set */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 800484e:	4b53      	ldr	r3, [pc, #332]	; (800499c <RCCEx_PLL3_Config+0x15c>)
 8004850:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004852:	f003 0303 	and.w	r3, r3, #3
 8004856:	2b03      	cmp	r3, #3
 8004858:	d101      	bne.n	800485e <RCCEx_PLL3_Config+0x1e>
  {
    return HAL_ERROR;
 800485a:	2301      	movs	r3, #1
 800485c:	e099      	b.n	8004992 <RCCEx_PLL3_Config+0x152>


  else
  {
    /* Disable  PLL3. */
    __HAL_RCC_PLL3_DISABLE();
 800485e:	4b4f      	ldr	r3, [pc, #316]	; (800499c <RCCEx_PLL3_Config+0x15c>)
 8004860:	681b      	ldr	r3, [r3, #0]
 8004862:	4a4e      	ldr	r2, [pc, #312]	; (800499c <RCCEx_PLL3_Config+0x15c>)
 8004864:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8004868:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800486a:	f7fc fa2f 	bl	8000ccc <HAL_GetTick>
 800486e:	60b8      	str	r0, [r7, #8]
    /* Wait till PLL3 is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 8004870:	e008      	b.n	8004884 <RCCEx_PLL3_Config+0x44>
    {
      if( (HAL_GetTick() - tickstart ) > PLL3_TIMEOUT_VALUE)
 8004872:	f7fc fa2b 	bl	8000ccc <HAL_GetTick>
 8004876:	4602      	mov	r2, r0
 8004878:	68bb      	ldr	r3, [r7, #8]
 800487a:	1ad3      	subs	r3, r2, r3
 800487c:	2b02      	cmp	r3, #2
 800487e:	d901      	bls.n	8004884 <RCCEx_PLL3_Config+0x44>
      {
        return HAL_TIMEOUT;
 8004880:	2303      	movs	r3, #3
 8004882:	e086      	b.n	8004992 <RCCEx_PLL3_Config+0x152>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 8004884:	4b45      	ldr	r3, [pc, #276]	; (800499c <RCCEx_PLL3_Config+0x15c>)
 8004886:	681b      	ldr	r3, [r3, #0]
 8004888:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800488c:	2b00      	cmp	r3, #0
 800488e:	d1f0      	bne.n	8004872 <RCCEx_PLL3_Config+0x32>
      }
    }

    /* Configure the PLL3  multiplication and division factors. */
    __HAL_RCC_PLL3_CONFIG(pll3->PLL3M,
 8004890:	4b42      	ldr	r3, [pc, #264]	; (800499c <RCCEx_PLL3_Config+0x15c>)
 8004892:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004894:	f023 727c 	bic.w	r2, r3, #66060288	; 0x3f00000
 8004898:	687b      	ldr	r3, [r7, #4]
 800489a:	681b      	ldr	r3, [r3, #0]
 800489c:	051b      	lsls	r3, r3, #20
 800489e:	493f      	ldr	r1, [pc, #252]	; (800499c <RCCEx_PLL3_Config+0x15c>)
 80048a0:	4313      	orrs	r3, r2
 80048a2:	628b      	str	r3, [r1, #40]	; 0x28
 80048a4:	687b      	ldr	r3, [r7, #4]
 80048a6:	685b      	ldr	r3, [r3, #4]
 80048a8:	3b01      	subs	r3, #1
 80048aa:	f3c3 0208 	ubfx	r2, r3, #0, #9
 80048ae:	687b      	ldr	r3, [r7, #4]
 80048b0:	689b      	ldr	r3, [r3, #8]
 80048b2:	3b01      	subs	r3, #1
 80048b4:	025b      	lsls	r3, r3, #9
 80048b6:	b29b      	uxth	r3, r3
 80048b8:	431a      	orrs	r2, r3
 80048ba:	687b      	ldr	r3, [r7, #4]
 80048bc:	68db      	ldr	r3, [r3, #12]
 80048be:	3b01      	subs	r3, #1
 80048c0:	041b      	lsls	r3, r3, #16
 80048c2:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 80048c6:	431a      	orrs	r2, r3
 80048c8:	687b      	ldr	r3, [r7, #4]
 80048ca:	691b      	ldr	r3, [r3, #16]
 80048cc:	3b01      	subs	r3, #1
 80048ce:	061b      	lsls	r3, r3, #24
 80048d0:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 80048d4:	4931      	ldr	r1, [pc, #196]	; (800499c <RCCEx_PLL3_Config+0x15c>)
 80048d6:	4313      	orrs	r3, r2
 80048d8:	640b      	str	r3, [r1, #64]	; 0x40
                          pll3->PLL3P,
                          pll3->PLL3Q,
                          pll3->PLL3R);

    /* Select PLL3 input reference frequency range: VCI */
    __HAL_RCC_PLL3_VCIRANGE(pll3->PLL3RGE) ;
 80048da:	4b30      	ldr	r3, [pc, #192]	; (800499c <RCCEx_PLL3_Config+0x15c>)
 80048dc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80048de:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 80048e2:	687b      	ldr	r3, [r7, #4]
 80048e4:	695b      	ldr	r3, [r3, #20]
 80048e6:	492d      	ldr	r1, [pc, #180]	; (800499c <RCCEx_PLL3_Config+0x15c>)
 80048e8:	4313      	orrs	r3, r2
 80048ea:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Select PLL3 output frequency range : VCO */
    __HAL_RCC_PLL3_VCORANGE(pll3->PLL3VCOSEL) ;
 80048ec:	4b2b      	ldr	r3, [pc, #172]	; (800499c <RCCEx_PLL3_Config+0x15c>)
 80048ee:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80048f0:	f423 7200 	bic.w	r2, r3, #512	; 0x200
 80048f4:	687b      	ldr	r3, [r7, #4]
 80048f6:	699b      	ldr	r3, [r3, #24]
 80048f8:	4928      	ldr	r1, [pc, #160]	; (800499c <RCCEx_PLL3_Config+0x15c>)
 80048fa:	4313      	orrs	r3, r2
 80048fc:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Disable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_DISABLE();
 80048fe:	4b27      	ldr	r3, [pc, #156]	; (800499c <RCCEx_PLL3_Config+0x15c>)
 8004900:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004902:	4a26      	ldr	r2, [pc, #152]	; (800499c <RCCEx_PLL3_Config+0x15c>)
 8004904:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8004908:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Configures PLL3 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL3FRACN_CONFIG(pll3->PLL3FRACN);
 800490a:	4b24      	ldr	r3, [pc, #144]	; (800499c <RCCEx_PLL3_Config+0x15c>)
 800490c:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800490e:	4b24      	ldr	r3, [pc, #144]	; (80049a0 <RCCEx_PLL3_Config+0x160>)
 8004910:	4013      	ands	r3, r2
 8004912:	687a      	ldr	r2, [r7, #4]
 8004914:	69d2      	ldr	r2, [r2, #28]
 8004916:	00d2      	lsls	r2, r2, #3
 8004918:	4920      	ldr	r1, [pc, #128]	; (800499c <RCCEx_PLL3_Config+0x15c>)
 800491a:	4313      	orrs	r3, r2
 800491c:	644b      	str	r3, [r1, #68]	; 0x44

    /* Enable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_ENABLE();
 800491e:	4b1f      	ldr	r3, [pc, #124]	; (800499c <RCCEx_PLL3_Config+0x15c>)
 8004920:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004922:	4a1e      	ldr	r2, [pc, #120]	; (800499c <RCCEx_PLL3_Config+0x15c>)
 8004924:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004928:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Enable the PLL3 clock output */
    if(Divider == DIVIDER_P_UPDATE)
 800492a:	683b      	ldr	r3, [r7, #0]
 800492c:	2b00      	cmp	r3, #0
 800492e:	d106      	bne.n	800493e <RCCEx_PLL3_Config+0xfe>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVP);
 8004930:	4b1a      	ldr	r3, [pc, #104]	; (800499c <RCCEx_PLL3_Config+0x15c>)
 8004932:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004934:	4a19      	ldr	r2, [pc, #100]	; (800499c <RCCEx_PLL3_Config+0x15c>)
 8004936:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 800493a:	62d3      	str	r3, [r2, #44]	; 0x2c
 800493c:	e00f      	b.n	800495e <RCCEx_PLL3_Config+0x11e>
    }
    else if(Divider == DIVIDER_Q_UPDATE)
 800493e:	683b      	ldr	r3, [r7, #0]
 8004940:	2b01      	cmp	r3, #1
 8004942:	d106      	bne.n	8004952 <RCCEx_PLL3_Config+0x112>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVQ);
 8004944:	4b15      	ldr	r3, [pc, #84]	; (800499c <RCCEx_PLL3_Config+0x15c>)
 8004946:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004948:	4a14      	ldr	r2, [pc, #80]	; (800499c <RCCEx_PLL3_Config+0x15c>)
 800494a:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 800494e:	62d3      	str	r3, [r2, #44]	; 0x2c
 8004950:	e005      	b.n	800495e <RCCEx_PLL3_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVR);
 8004952:	4b12      	ldr	r3, [pc, #72]	; (800499c <RCCEx_PLL3_Config+0x15c>)
 8004954:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004956:	4a11      	ldr	r2, [pc, #68]	; (800499c <RCCEx_PLL3_Config+0x15c>)
 8004958:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800495c:	62d3      	str	r3, [r2, #44]	; 0x2c
    }

    /* Enable  PLL3. */
    __HAL_RCC_PLL3_ENABLE();
 800495e:	4b0f      	ldr	r3, [pc, #60]	; (800499c <RCCEx_PLL3_Config+0x15c>)
 8004960:	681b      	ldr	r3, [r3, #0]
 8004962:	4a0e      	ldr	r2, [pc, #56]	; (800499c <RCCEx_PLL3_Config+0x15c>)
 8004964:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004968:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800496a:	f7fc f9af 	bl	8000ccc <HAL_GetTick>
 800496e:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL3 is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 8004970:	e008      	b.n	8004984 <RCCEx_PLL3_Config+0x144>
    {
      if( (HAL_GetTick() - tickstart ) > PLL3_TIMEOUT_VALUE)
 8004972:	f7fc f9ab 	bl	8000ccc <HAL_GetTick>
 8004976:	4602      	mov	r2, r0
 8004978:	68bb      	ldr	r3, [r7, #8]
 800497a:	1ad3      	subs	r3, r2, r3
 800497c:	2b02      	cmp	r3, #2
 800497e:	d901      	bls.n	8004984 <RCCEx_PLL3_Config+0x144>
      {
        return HAL_TIMEOUT;
 8004980:	2303      	movs	r3, #3
 8004982:	e006      	b.n	8004992 <RCCEx_PLL3_Config+0x152>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 8004984:	4b05      	ldr	r3, [pc, #20]	; (800499c <RCCEx_PLL3_Config+0x15c>)
 8004986:	681b      	ldr	r3, [r3, #0]
 8004988:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800498c:	2b00      	cmp	r3, #0
 800498e:	d0f0      	beq.n	8004972 <RCCEx_PLL3_Config+0x132>
    }

  }


  return status;
 8004990:	7bfb      	ldrb	r3, [r7, #15]
}
 8004992:	4618      	mov	r0, r3
 8004994:	3710      	adds	r7, #16
 8004996:	46bd      	mov	sp, r7
 8004998:	bd80      	pop	{r7, pc}
 800499a:	bf00      	nop
 800499c:	58024400 	.word	0x58024400
 80049a0:	ffff0007 	.word	0xffff0007

080049a4 <HAL_SPI_Init>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 80049a4:	b580      	push	{r7, lr}
 80049a6:	b084      	sub	sp, #16
 80049a8:	af00      	add	r7, sp, #0
 80049aa:	6078      	str	r0, [r7, #4]
  uint32_t crc_length;
  uint32_t packet_length;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 80049ac:	687b      	ldr	r3, [r7, #4]
 80049ae:	2b00      	cmp	r3, #0
 80049b0:	d101      	bne.n	80049b6 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 80049b2:	2301      	movs	r3, #1
 80049b4:	e0f1      	b.n	8004b9a <HAL_SPI_Init+0x1f6>
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_INITIALIZATION_PATTERN(hspi->Init.TxCRCInitializationPattern));
    assert_param(IS_SPI_CRC_INITIALIZATION_PATTERN(hspi->Init.RxCRCInitializationPattern));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80049b6:	687b      	ldr	r3, [r7, #4]
 80049b8:	2200      	movs	r2, #0
 80049ba:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  /* Verify that the SPI instance supports Data Size higher than 16bits */
  if ((!IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (hspi->Init.DataSize > SPI_DATASIZE_16BIT))
 80049bc:	687b      	ldr	r3, [r7, #4]
 80049be:	681b      	ldr	r3, [r3, #0]
 80049c0:	4a78      	ldr	r2, [pc, #480]	; (8004ba4 <HAL_SPI_Init+0x200>)
 80049c2:	4293      	cmp	r3, r2
 80049c4:	d00f      	beq.n	80049e6 <HAL_SPI_Init+0x42>
 80049c6:	687b      	ldr	r3, [r7, #4]
 80049c8:	681b      	ldr	r3, [r3, #0]
 80049ca:	4a77      	ldr	r2, [pc, #476]	; (8004ba8 <HAL_SPI_Init+0x204>)
 80049cc:	4293      	cmp	r3, r2
 80049ce:	d00a      	beq.n	80049e6 <HAL_SPI_Init+0x42>
 80049d0:	687b      	ldr	r3, [r7, #4]
 80049d2:	681b      	ldr	r3, [r3, #0]
 80049d4:	4a75      	ldr	r2, [pc, #468]	; (8004bac <HAL_SPI_Init+0x208>)
 80049d6:	4293      	cmp	r3, r2
 80049d8:	d005      	beq.n	80049e6 <HAL_SPI_Init+0x42>
 80049da:	687b      	ldr	r3, [r7, #4]
 80049dc:	68db      	ldr	r3, [r3, #12]
 80049de:	2b0f      	cmp	r3, #15
 80049e0:	d901      	bls.n	80049e6 <HAL_SPI_Init+0x42>
  {
    return HAL_ERROR;
 80049e2:	2301      	movs	r3, #1
 80049e4:	e0d9      	b.n	8004b9a <HAL_SPI_Init+0x1f6>
  }

  /* Verify that the SPI instance supports requested data packing */
  packet_length = SPI_GetPacketSize(hspi);
 80049e6:	6878      	ldr	r0, [r7, #4]
 80049e8:	f000 fbd8 	bl	800519c <SPI_GetPacketSize>
 80049ec:	60f8      	str	r0, [r7, #12]
  if (((!IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_LOWEND_FIFO_SIZE)) ||
 80049ee:	687b      	ldr	r3, [r7, #4]
 80049f0:	681b      	ldr	r3, [r3, #0]
 80049f2:	4a6c      	ldr	r2, [pc, #432]	; (8004ba4 <HAL_SPI_Init+0x200>)
 80049f4:	4293      	cmp	r3, r2
 80049f6:	d00c      	beq.n	8004a12 <HAL_SPI_Init+0x6e>
 80049f8:	687b      	ldr	r3, [r7, #4]
 80049fa:	681b      	ldr	r3, [r3, #0]
 80049fc:	4a6a      	ldr	r2, [pc, #424]	; (8004ba8 <HAL_SPI_Init+0x204>)
 80049fe:	4293      	cmp	r3, r2
 8004a00:	d007      	beq.n	8004a12 <HAL_SPI_Init+0x6e>
 8004a02:	687b      	ldr	r3, [r7, #4]
 8004a04:	681b      	ldr	r3, [r3, #0]
 8004a06:	4a69      	ldr	r2, [pc, #420]	; (8004bac <HAL_SPI_Init+0x208>)
 8004a08:	4293      	cmp	r3, r2
 8004a0a:	d002      	beq.n	8004a12 <HAL_SPI_Init+0x6e>
 8004a0c:	68fb      	ldr	r3, [r7, #12]
 8004a0e:	2b08      	cmp	r3, #8
 8004a10:	d811      	bhi.n	8004a36 <HAL_SPI_Init+0x92>
      ((IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_HIGHEND_FIFO_SIZE)))
 8004a12:	687b      	ldr	r3, [r7, #4]
 8004a14:	681b      	ldr	r3, [r3, #0]
  if (((!IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_LOWEND_FIFO_SIZE)) ||
 8004a16:	4a63      	ldr	r2, [pc, #396]	; (8004ba4 <HAL_SPI_Init+0x200>)
 8004a18:	4293      	cmp	r3, r2
 8004a1a:	d009      	beq.n	8004a30 <HAL_SPI_Init+0x8c>
      ((IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_HIGHEND_FIFO_SIZE)))
 8004a1c:	687b      	ldr	r3, [r7, #4]
 8004a1e:	681b      	ldr	r3, [r3, #0]
 8004a20:	4a61      	ldr	r2, [pc, #388]	; (8004ba8 <HAL_SPI_Init+0x204>)
 8004a22:	4293      	cmp	r3, r2
 8004a24:	d004      	beq.n	8004a30 <HAL_SPI_Init+0x8c>
 8004a26:	687b      	ldr	r3, [r7, #4]
 8004a28:	681b      	ldr	r3, [r3, #0]
 8004a2a:	4a60      	ldr	r2, [pc, #384]	; (8004bac <HAL_SPI_Init+0x208>)
 8004a2c:	4293      	cmp	r3, r2
 8004a2e:	d104      	bne.n	8004a3a <HAL_SPI_Init+0x96>
 8004a30:	68fb      	ldr	r3, [r7, #12]
 8004a32:	2b10      	cmp	r3, #16
 8004a34:	d901      	bls.n	8004a3a <HAL_SPI_Init+0x96>
  {
    return HAL_ERROR;
 8004a36:	2301      	movs	r3, #1
 8004a38:	e0af      	b.n	8004b9a <HAL_SPI_Init+0x1f6>
  {
    crc_length = hspi->Init.DataSize << SPI_CFG1_CRCSIZE_Pos;
  }
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8004a3a:	687b      	ldr	r3, [r7, #4]
 8004a3c:	f893 3081 	ldrb.w	r3, [r3, #129]	; 0x81
 8004a40:	b2db      	uxtb	r3, r3
 8004a42:	2b00      	cmp	r3, #0
 8004a44:	d106      	bne.n	8004a54 <HAL_SPI_Init+0xb0>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8004a46:	687b      	ldr	r3, [r7, #4]
 8004a48:	2200      	movs	r2, #0
 8004a4a:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8004a4e:	6878      	ldr	r0, [r7, #4]
 8004a50:	f7fb ff1a 	bl	8000888 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8004a54:	687b      	ldr	r3, [r7, #4]
 8004a56:	2202      	movs	r2, #2
 8004a58:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8004a5c:	687b      	ldr	r3, [r7, #4]
 8004a5e:	681b      	ldr	r3, [r3, #0]
 8004a60:	681a      	ldr	r2, [r3, #0]
 8004a62:	687b      	ldr	r3, [r7, #4]
 8004a64:	681b      	ldr	r3, [r3, #0]
 8004a66:	f022 0201 	bic.w	r2, r2, #1
 8004a6a:	601a      	str	r2, [r3, #0]

#if (USE_SPI_CRC == 0)
  /* Keep the default value of CRCSIZE in case of CRC is not used */
  crc_length = hspi->Instance->CFG1 & SPI_CFG1_CRCSIZE;
 8004a6c:	687b      	ldr	r3, [r7, #4]
 8004a6e:	681b      	ldr	r3, [r3, #0]
 8004a70:	689b      	ldr	r3, [r3, #8]
 8004a72:	f403 13f8 	and.w	r3, r3, #2031616	; 0x1f0000
 8004a76:	60bb      	str	r3, [r7, #8]
  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit, CRC calculation state, CRC Length */

  /* SPIx NSS Software Management Configuration */
  if ((hspi->Init.NSS == SPI_NSS_SOFT) && (((hspi->Init.Mode == SPI_MODE_MASTER) &&  \
 8004a78:	687b      	ldr	r3, [r7, #4]
 8004a7a:	699b      	ldr	r3, [r3, #24]
 8004a7c:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8004a80:	d119      	bne.n	8004ab6 <HAL_SPI_Init+0x112>
 8004a82:	687b      	ldr	r3, [r7, #4]
 8004a84:	685b      	ldr	r3, [r3, #4]
 8004a86:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8004a8a:	d103      	bne.n	8004a94 <HAL_SPI_Init+0xf0>
                                            (hspi->Init.NSSPolarity == SPI_NSS_POLARITY_LOW)) || \
 8004a8c:	687b      	ldr	r3, [r7, #4]
 8004a8e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
  if ((hspi->Init.NSS == SPI_NSS_SOFT) && (((hspi->Init.Mode == SPI_MODE_MASTER) &&  \
 8004a90:	2b00      	cmp	r3, #0
 8004a92:	d008      	beq.n	8004aa6 <HAL_SPI_Init+0x102>
                                           ((hspi->Init.Mode == SPI_MODE_SLAVE) && \
 8004a94:	687b      	ldr	r3, [r7, #4]
 8004a96:	685b      	ldr	r3, [r3, #4]
                                            (hspi->Init.NSSPolarity == SPI_NSS_POLARITY_LOW)) || \
 8004a98:	2b00      	cmp	r3, #0
 8004a9a:	d10c      	bne.n	8004ab6 <HAL_SPI_Init+0x112>
                                            (hspi->Init.NSSPolarity == SPI_NSS_POLARITY_HIGH))))
 8004a9c:	687b      	ldr	r3, [r7, #4]
 8004a9e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
                                           ((hspi->Init.Mode == SPI_MODE_SLAVE) && \
 8004aa0:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8004aa4:	d107      	bne.n	8004ab6 <HAL_SPI_Init+0x112>
  {
    SET_BIT(hspi->Instance->CR1, SPI_CR1_SSI);
 8004aa6:	687b      	ldr	r3, [r7, #4]
 8004aa8:	681b      	ldr	r3, [r3, #0]
 8004aaa:	681a      	ldr	r2, [r3, #0]
 8004aac:	687b      	ldr	r3, [r7, #4]
 8004aae:	681b      	ldr	r3, [r3, #0]
 8004ab0:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8004ab4:	601a      	str	r2, [r3, #0]
  }

  /* SPIx CFG1 Configuration */
  WRITE_REG(hspi->Instance->CFG1, (hspi->Init.BaudRatePrescaler | hspi->Init.CRCCalculation | crc_length |
 8004ab6:	687b      	ldr	r3, [r7, #4]
 8004ab8:	69da      	ldr	r2, [r3, #28]
 8004aba:	687b      	ldr	r3, [r7, #4]
 8004abc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004abe:	431a      	orrs	r2, r3
 8004ac0:	68bb      	ldr	r3, [r7, #8]
 8004ac2:	431a      	orrs	r2, r3
 8004ac4:	687b      	ldr	r3, [r7, #4]
 8004ac6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004ac8:	ea42 0103 	orr.w	r1, r2, r3
 8004acc:	687b      	ldr	r3, [r7, #4]
 8004ace:	68da      	ldr	r2, [r3, #12]
 8004ad0:	687b      	ldr	r3, [r7, #4]
 8004ad2:	681b      	ldr	r3, [r3, #0]
 8004ad4:	430a      	orrs	r2, r1
 8004ad6:	609a      	str	r2, [r3, #8]
                                   hspi->Init.FifoThreshold     | hspi->Init.DataSize));

  /* SPIx CFG2 Configuration */
  WRITE_REG(hspi->Instance->CFG2, (hspi->Init.NSSPMode                | hspi->Init.TIMode    |
 8004ad8:	687b      	ldr	r3, [r7, #4]
 8004ada:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8004adc:	687b      	ldr	r3, [r7, #4]
 8004ade:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004ae0:	431a      	orrs	r2, r3
 8004ae2:	687b      	ldr	r3, [r7, #4]
 8004ae4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004ae6:	431a      	orrs	r2, r3
 8004ae8:	687b      	ldr	r3, [r7, #4]
 8004aea:	699b      	ldr	r3, [r3, #24]
 8004aec:	431a      	orrs	r2, r3
 8004aee:	687b      	ldr	r3, [r7, #4]
 8004af0:	691b      	ldr	r3, [r3, #16]
 8004af2:	431a      	orrs	r2, r3
 8004af4:	687b      	ldr	r3, [r7, #4]
 8004af6:	695b      	ldr	r3, [r3, #20]
 8004af8:	431a      	orrs	r2, r3
 8004afa:	687b      	ldr	r3, [r7, #4]
 8004afc:	6a1b      	ldr	r3, [r3, #32]
 8004afe:	431a      	orrs	r2, r3
 8004b00:	687b      	ldr	r3, [r7, #4]
 8004b02:	685b      	ldr	r3, [r3, #4]
 8004b04:	431a      	orrs	r2, r3
 8004b06:	687b      	ldr	r3, [r7, #4]
 8004b08:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004b0a:	431a      	orrs	r2, r3
 8004b0c:	687b      	ldr	r3, [r7, #4]
 8004b0e:	689b      	ldr	r3, [r3, #8]
 8004b10:	431a      	orrs	r2, r3
 8004b12:	687b      	ldr	r3, [r7, #4]
 8004b14:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004b16:	ea42 0103 	orr.w	r1, r2, r3
 8004b1a:	687b      	ldr	r3, [r7, #4]
 8004b1c:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 8004b1e:	687b      	ldr	r3, [r7, #4]
 8004b20:	681b      	ldr	r3, [r3, #0]
 8004b22:	430a      	orrs	r2, r1
 8004b24:	60da      	str	r2, [r3, #12]
    WRITE_REG(hspi->Instance->CRCPOLY, hspi->Init.CRCPolynomial);
  }
#endif /* USE_SPI_CRC */

  /* Insure that Underrun configuration is managed only by Salve */
  if (hspi->Init.Mode == SPI_MODE_SLAVE)
 8004b26:	687b      	ldr	r3, [r7, #4]
 8004b28:	685b      	ldr	r3, [r3, #4]
 8004b2a:	2b00      	cmp	r3, #0
 8004b2c:	d113      	bne.n	8004b56 <HAL_SPI_Init+0x1b2>
    /* Set Default Underrun configuration */
#if (USE_SPI_CRC != 0UL)
    if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_DISABLE)
#endif /* USE_SPI_CRC */
    {
      MODIFY_REG(hspi->Instance->CFG1, SPI_CFG1_UDRDET, SPI_CFG1_UDRDET_0);
 8004b2e:	687b      	ldr	r3, [r7, #4]
 8004b30:	681b      	ldr	r3, [r3, #0]
 8004b32:	689b      	ldr	r3, [r3, #8]
 8004b34:	f423 52c0 	bic.w	r2, r3, #6144	; 0x1800
 8004b38:	687b      	ldr	r3, [r7, #4]
 8004b3a:	681b      	ldr	r3, [r3, #0]
 8004b3c:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8004b40:	609a      	str	r2, [r3, #8]
    }
    MODIFY_REG(hspi->Instance->CFG1, SPI_CFG1_UDRCFG, SPI_CFG1_UDRCFG_1);
 8004b42:	687b      	ldr	r3, [r7, #4]
 8004b44:	681b      	ldr	r3, [r3, #0]
 8004b46:	689b      	ldr	r3, [r3, #8]
 8004b48:	f423 62c0 	bic.w	r2, r3, #1536	; 0x600
 8004b4c:	687b      	ldr	r3, [r7, #4]
 8004b4e:	681b      	ldr	r3, [r3, #0]
 8004b50:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8004b54:	609a      	str	r2, [r3, #8]
  }

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8004b56:	687b      	ldr	r3, [r7, #4]
 8004b58:	681b      	ldr	r3, [r3, #0]
 8004b5a:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8004b5c:	687b      	ldr	r3, [r7, #4]
 8004b5e:	681b      	ldr	r3, [r3, #0]
 8004b60:	f022 0201 	bic.w	r2, r2, #1
 8004b64:	651a      	str	r2, [r3, #80]	; 0x50
#endif /* SPI_I2SCFGR_I2SMOD */

  /* Insure that AFCNTR is managed only by Master */
  if ((hspi->Init.Mode & SPI_MODE_MASTER) == SPI_MODE_MASTER)
 8004b66:	687b      	ldr	r3, [r7, #4]
 8004b68:	685b      	ldr	r3, [r3, #4]
 8004b6a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8004b6e:	2b00      	cmp	r3, #0
 8004b70:	d00a      	beq.n	8004b88 <HAL_SPI_Init+0x1e4>
  {
    /* Alternate function GPIOs control */
    MODIFY_REG(hspi->Instance->CFG2, SPI_CFG2_AFCNTR, (hspi->Init.MasterKeepIOState));
 8004b72:	687b      	ldr	r3, [r7, #4]
 8004b74:	681b      	ldr	r3, [r3, #0]
 8004b76:	68db      	ldr	r3, [r3, #12]
 8004b78:	f023 4100 	bic.w	r1, r3, #2147483648	; 0x80000000
 8004b7c:	687b      	ldr	r3, [r7, #4]
 8004b7e:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8004b80:	687b      	ldr	r3, [r7, #4]
 8004b82:	681b      	ldr	r3, [r3, #0]
 8004b84:	430a      	orrs	r2, r1
 8004b86:	60da      	str	r2, [r3, #12]
  }

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8004b88:	687b      	ldr	r3, [r7, #4]
 8004b8a:	2200      	movs	r2, #0
 8004b8c:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  hspi->State     = HAL_SPI_STATE_READY;
 8004b90:	687b      	ldr	r3, [r7, #4]
 8004b92:	2201      	movs	r2, #1
 8004b94:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81

  return HAL_OK;
 8004b98:	2300      	movs	r3, #0
}
 8004b9a:	4618      	mov	r0, r3
 8004b9c:	3710      	adds	r7, #16
 8004b9e:	46bd      	mov	sp, r7
 8004ba0:	bd80      	pop	{r7, pc}
 8004ba2:	bf00      	nop
 8004ba4:	40013000 	.word	0x40013000
 8004ba8:	40003800 	.word	0x40003800
 8004bac:	40003c00 	.word	0x40003c00

08004bb0 <HAL_SPI_TransmitReceive>:
  * @param  Timeout: Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size,
                                          uint32_t Timeout)
{
 8004bb0:	b580      	push	{r7, lr}
 8004bb2:	b08e      	sub	sp, #56	; 0x38
 8004bb4:	af02      	add	r7, sp, #8
 8004bb6:	60f8      	str	r0, [r7, #12]
 8004bb8:	60b9      	str	r1, [r7, #8]
 8004bba:	607a      	str	r2, [r7, #4]
 8004bbc:	807b      	strh	r3, [r7, #2]
  HAL_SPI_StateTypeDef tmp_state;
  HAL_StatusTypeDef errorcode = HAL_OK;
 8004bbe:	2300      	movs	r3, #0
 8004bc0:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
#if defined (__GNUC__)
  __IO uint16_t *ptxdr_16bits = (__IO uint16_t *)(&(hspi->Instance->TXDR));
 8004bc4:	68fb      	ldr	r3, [r7, #12]
 8004bc6:	681b      	ldr	r3, [r3, #0]
 8004bc8:	3320      	adds	r3, #32
 8004bca:	627b      	str	r3, [r7, #36]	; 0x24
  __IO uint16_t *prxdr_16bits = (__IO uint16_t *)(&(hspi->Instance->RXDR));
 8004bcc:	68fb      	ldr	r3, [r7, #12]
 8004bce:	681b      	ldr	r3, [r3, #0]
 8004bd0:	3330      	adds	r3, #48	; 0x30
 8004bd2:	623b      	str	r3, [r7, #32]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Lock the process */
  __HAL_LOCK(hspi);
 8004bd4:	68fb      	ldr	r3, [r7, #12]
 8004bd6:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 8004bda:	2b01      	cmp	r3, #1
 8004bdc:	d101      	bne.n	8004be2 <HAL_SPI_TransmitReceive+0x32>
 8004bde:	2302      	movs	r3, #2
 8004be0:	e209      	b.n	8004ff6 <HAL_SPI_TransmitReceive+0x446>
 8004be2:	68fb      	ldr	r3, [r7, #12]
 8004be4:	2201      	movs	r2, #1
 8004be6:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8004bea:	f7fc f86f 	bl	8000ccc <HAL_GetTick>
 8004bee:	61f8      	str	r0, [r7, #28]

  initial_TxXferCount = Size;
 8004bf0:	887b      	ldrh	r3, [r7, #2]
 8004bf2:	85fb      	strh	r3, [r7, #46]	; 0x2e
  initial_RxXferCount = Size;
 8004bf4:	887b      	ldrh	r3, [r7, #2]
 8004bf6:	85bb      	strh	r3, [r7, #44]	; 0x2c
  tmp_state           = hspi->State;
 8004bf8:	68fb      	ldr	r3, [r7, #12]
 8004bfa:	f893 3081 	ldrb.w	r3, [r3, #129]	; 0x81
 8004bfe:	76fb      	strb	r3, [r7, #27]
  tmp_mode            = hspi->Init.Mode;
 8004c00:	68fb      	ldr	r3, [r7, #12]
 8004c02:	685b      	ldr	r3, [r3, #4]
 8004c04:	617b      	str	r3, [r7, #20]

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 8004c06:	7efb      	ldrb	r3, [r7, #27]
 8004c08:	2b01      	cmp	r3, #1
 8004c0a:	d014      	beq.n	8004c36 <HAL_SPI_TransmitReceive+0x86>
 8004c0c:	697b      	ldr	r3, [r7, #20]
 8004c0e:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8004c12:	d106      	bne.n	8004c22 <HAL_SPI_TransmitReceive+0x72>
        ((tmp_mode == SPI_MODE_MASTER) && \
         (hspi->Init.Direction == SPI_DIRECTION_2LINES) && \
 8004c14:	68fb      	ldr	r3, [r7, #12]
 8004c16:	689b      	ldr	r3, [r3, #8]
        ((tmp_mode == SPI_MODE_MASTER) && \
 8004c18:	2b00      	cmp	r3, #0
 8004c1a:	d102      	bne.n	8004c22 <HAL_SPI_TransmitReceive+0x72>
         (hspi->Init.Direction == SPI_DIRECTION_2LINES) && \
 8004c1c:	7efb      	ldrb	r3, [r7, #27]
 8004c1e:	2b04      	cmp	r3, #4
 8004c20:	d009      	beq.n	8004c36 <HAL_SPI_TransmitReceive+0x86>
         (tmp_state == HAL_SPI_STATE_BUSY_RX))))
  {
    errorcode = HAL_BUSY;
 8004c22:	2302      	movs	r3, #2
 8004c24:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    __HAL_UNLOCK(hspi);
 8004c28:	68fb      	ldr	r3, [r7, #12]
 8004c2a:	2200      	movs	r2, #0
 8004c2c:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80
    return errorcode;
 8004c30:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 8004c34:	e1df      	b.n	8004ff6 <HAL_SPI_TransmitReceive+0x446>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0UL))
 8004c36:	68bb      	ldr	r3, [r7, #8]
 8004c38:	2b00      	cmp	r3, #0
 8004c3a:	d005      	beq.n	8004c48 <HAL_SPI_TransmitReceive+0x98>
 8004c3c:	687b      	ldr	r3, [r7, #4]
 8004c3e:	2b00      	cmp	r3, #0
 8004c40:	d002      	beq.n	8004c48 <HAL_SPI_TransmitReceive+0x98>
 8004c42:	887b      	ldrh	r3, [r7, #2]
 8004c44:	2b00      	cmp	r3, #0
 8004c46:	d109      	bne.n	8004c5c <HAL_SPI_TransmitReceive+0xac>
  {
    errorcode = HAL_ERROR;
 8004c48:	2301      	movs	r3, #1
 8004c4a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    __HAL_UNLOCK(hspi);
 8004c4e:	68fb      	ldr	r3, [r7, #12]
 8004c50:	2200      	movs	r2, #0
 8004c52:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80
    return errorcode;
 8004c56:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 8004c5a:	e1cc      	b.n	8004ff6 <HAL_SPI_TransmitReceive+0x446>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 8004c5c:	68fb      	ldr	r3, [r7, #12]
 8004c5e:	f893 3081 	ldrb.w	r3, [r3, #129]	; 0x81
 8004c62:	b2db      	uxtb	r3, r3
 8004c64:	2b04      	cmp	r3, #4
 8004c66:	d003      	beq.n	8004c70 <HAL_SPI_TransmitReceive+0xc0>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 8004c68:	68fb      	ldr	r3, [r7, #12]
 8004c6a:	2205      	movs	r2, #5
 8004c6c:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8004c70:	68fb      	ldr	r3, [r7, #12]
 8004c72:	2200      	movs	r2, #0
 8004c74:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 8004c78:	68fb      	ldr	r3, [r7, #12]
 8004c7a:	687a      	ldr	r2, [r7, #4]
 8004c7c:	665a      	str	r2, [r3, #100]	; 0x64
  hspi->RxXferCount = Size;
 8004c7e:	68fb      	ldr	r3, [r7, #12]
 8004c80:	887a      	ldrh	r2, [r7, #2]
 8004c82:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
  hspi->RxXferSize  = Size;
 8004c86:	68fb      	ldr	r3, [r7, #12]
 8004c88:	887a      	ldrh	r2, [r7, #2]
 8004c8a:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 8004c8e:	68fb      	ldr	r3, [r7, #12]
 8004c90:	68ba      	ldr	r2, [r7, #8]
 8004c92:	65da      	str	r2, [r3, #92]	; 0x5c
  hspi->TxXferCount = Size;
 8004c94:	68fb      	ldr	r3, [r7, #12]
 8004c96:	887a      	ldrh	r2, [r7, #2]
 8004c98:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
  hspi->TxXferSize  = Size;
 8004c9c:	68fb      	ldr	r3, [r7, #12]
 8004c9e:	887a      	ldrh	r2, [r7, #2]
 8004ca0:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 8004ca4:	68fb      	ldr	r3, [r7, #12]
 8004ca6:	2200      	movs	r2, #0
 8004ca8:	671a      	str	r2, [r3, #112]	; 0x70
  hspi->TxISR       = NULL;
 8004caa:	68fb      	ldr	r3, [r7, #12]
 8004cac:	2200      	movs	r2, #0
 8004cae:	675a      	str	r2, [r3, #116]	; 0x74

  /* Set the number of data at current transfer */
  MODIFY_REG(hspi->Instance->CR2, SPI_CR2_TSIZE, Size);
 8004cb0:	68fb      	ldr	r3, [r7, #12]
 8004cb2:	681b      	ldr	r3, [r3, #0]
 8004cb4:	685a      	ldr	r2, [r3, #4]
 8004cb6:	4b82      	ldr	r3, [pc, #520]	; (8004ec0 <HAL_SPI_TransmitReceive+0x310>)
 8004cb8:	4013      	ands	r3, r2
 8004cba:	8879      	ldrh	r1, [r7, #2]
 8004cbc:	68fa      	ldr	r2, [r7, #12]
 8004cbe:	6812      	ldr	r2, [r2, #0]
 8004cc0:	430b      	orrs	r3, r1
 8004cc2:	6053      	str	r3, [r2, #4]

  __HAL_SPI_ENABLE(hspi);
 8004cc4:	68fb      	ldr	r3, [r7, #12]
 8004cc6:	681b      	ldr	r3, [r3, #0]
 8004cc8:	681a      	ldr	r2, [r3, #0]
 8004cca:	68fb      	ldr	r3, [r7, #12]
 8004ccc:	681b      	ldr	r3, [r3, #0]
 8004cce:	f042 0201 	orr.w	r2, r2, #1
 8004cd2:	601a      	str	r2, [r3, #0]

  if (hspi->Init.Mode == SPI_MODE_MASTER)
 8004cd4:	68fb      	ldr	r3, [r7, #12]
 8004cd6:	685b      	ldr	r3, [r3, #4]
 8004cd8:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8004cdc:	d107      	bne.n	8004cee <HAL_SPI_TransmitReceive+0x13e>
  {
    /* Master transfer start */
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CSTART);
 8004cde:	68fb      	ldr	r3, [r7, #12]
 8004ce0:	681b      	ldr	r3, [r3, #0]
 8004ce2:	681a      	ldr	r2, [r3, #0]
 8004ce4:	68fb      	ldr	r3, [r7, #12]
 8004ce6:	681b      	ldr	r3, [r3, #0]
 8004ce8:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004cec:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 32 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_16BIT)
 8004cee:	68fb      	ldr	r3, [r7, #12]
 8004cf0:	68db      	ldr	r3, [r3, #12]
 8004cf2:	2b0f      	cmp	r3, #15
 8004cf4:	d970      	bls.n	8004dd8 <HAL_SPI_TransmitReceive+0x228>
  {
    while ((initial_TxXferCount > 0UL) || (initial_RxXferCount > 0UL))
 8004cf6:	e068      	b.n	8004dca <HAL_SPI_TransmitReceive+0x21a>
    {
      /* Check TXP flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXP)) && (initial_TxXferCount > 0UL))
 8004cf8:	68fb      	ldr	r3, [r7, #12]
 8004cfa:	681b      	ldr	r3, [r3, #0]
 8004cfc:	695b      	ldr	r3, [r3, #20]
 8004cfe:	f003 0302 	and.w	r3, r3, #2
 8004d02:	2b02      	cmp	r3, #2
 8004d04:	d11a      	bne.n	8004d3c <HAL_SPI_TransmitReceive+0x18c>
 8004d06:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 8004d08:	2b00      	cmp	r3, #0
 8004d0a:	d017      	beq.n	8004d3c <HAL_SPI_TransmitReceive+0x18c>
      {
        *((__IO uint32_t *)&hspi->Instance->TXDR) = *((uint32_t *)hspi->pTxBuffPtr);
 8004d0c:	68fb      	ldr	r3, [r7, #12]
 8004d0e:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8004d10:	68fb      	ldr	r3, [r7, #12]
 8004d12:	681b      	ldr	r3, [r3, #0]
 8004d14:	6812      	ldr	r2, [r2, #0]
 8004d16:	621a      	str	r2, [r3, #32]
        hspi->pTxBuffPtr += sizeof(uint32_t);
 8004d18:	68fb      	ldr	r3, [r7, #12]
 8004d1a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004d1c:	1d1a      	adds	r2, r3, #4
 8004d1e:	68fb      	ldr	r3, [r7, #12]
 8004d20:	65da      	str	r2, [r3, #92]	; 0x5c
        hspi->TxXferCount --;
 8004d22:	68fb      	ldr	r3, [r7, #12]
 8004d24:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 8004d28:	b29b      	uxth	r3, r3
 8004d2a:	3b01      	subs	r3, #1
 8004d2c:	b29a      	uxth	r2, r3
 8004d2e:	68fb      	ldr	r3, [r7, #12]
 8004d30:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
        initial_TxXferCount = hspi->TxXferCount;
 8004d34:	68fb      	ldr	r3, [r7, #12]
 8004d36:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 8004d3a:	85fb      	strh	r3, [r7, #46]	; 0x2e
      }

      /* Check RXWNE/EOT flag */
      if (((hspi->Instance->SR & (SPI_FLAG_RXWNE | SPI_FLAG_EOT)) != 0UL) && (initial_RxXferCount > 0UL))
 8004d3c:	68fb      	ldr	r3, [r7, #12]
 8004d3e:	681b      	ldr	r3, [r3, #0]
 8004d40:	695a      	ldr	r2, [r3, #20]
 8004d42:	f248 0308 	movw	r3, #32776	; 0x8008
 8004d46:	4013      	ands	r3, r2
 8004d48:	2b00      	cmp	r3, #0
 8004d4a:	d01a      	beq.n	8004d82 <HAL_SPI_TransmitReceive+0x1d2>
 8004d4c:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 8004d4e:	2b00      	cmp	r3, #0
 8004d50:	d017      	beq.n	8004d82 <HAL_SPI_TransmitReceive+0x1d2>
      {
        *((uint32_t *)hspi->pRxBuffPtr) = *((__IO uint32_t *)&hspi->Instance->RXDR);
 8004d52:	68fb      	ldr	r3, [r7, #12]
 8004d54:	681a      	ldr	r2, [r3, #0]
 8004d56:	68fb      	ldr	r3, [r7, #12]
 8004d58:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8004d5a:	6b12      	ldr	r2, [r2, #48]	; 0x30
 8004d5c:	601a      	str	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint32_t);
 8004d5e:	68fb      	ldr	r3, [r7, #12]
 8004d60:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8004d62:	1d1a      	adds	r2, r3, #4
 8004d64:	68fb      	ldr	r3, [r7, #12]
 8004d66:	665a      	str	r2, [r3, #100]	; 0x64
        hspi->RxXferCount --;
 8004d68:	68fb      	ldr	r3, [r7, #12]
 8004d6a:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 8004d6e:	b29b      	uxth	r3, r3
 8004d70:	3b01      	subs	r3, #1
 8004d72:	b29a      	uxth	r2, r3
 8004d74:	68fb      	ldr	r3, [r7, #12]
 8004d76:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
        initial_RxXferCount = hspi->RxXferCount;
 8004d7a:	68fb      	ldr	r3, [r7, #12]
 8004d7c:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 8004d80:	85bb      	strh	r3, [r7, #44]	; 0x2c
      }

      /* Timeout management */
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8004d82:	f7fb ffa3 	bl	8000ccc <HAL_GetTick>
 8004d86:	4602      	mov	r2, r0
 8004d88:	69fb      	ldr	r3, [r7, #28]
 8004d8a:	1ad3      	subs	r3, r2, r3
 8004d8c:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8004d8e:	429a      	cmp	r2, r3
 8004d90:	d803      	bhi.n	8004d9a <HAL_SPI_TransmitReceive+0x1ea>
 8004d92:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004d94:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004d98:	d102      	bne.n	8004da0 <HAL_SPI_TransmitReceive+0x1f0>
 8004d9a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004d9c:	2b00      	cmp	r3, #0
 8004d9e:	d114      	bne.n	8004dca <HAL_SPI_TransmitReceive+0x21a>
      {
        /* Call standard close procedure with error check */
        SPI_CloseTransfer(hspi);
 8004da0:	68f8      	ldr	r0, [r7, #12]
 8004da2:	f000 f92d 	bl	8005000 <SPI_CloseTransfer>

        /* Unlock the process */
        __HAL_UNLOCK(hspi);
 8004da6:	68fb      	ldr	r3, [r7, #12]
 8004da8:	2200      	movs	r2, #0
 8004daa:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_TIMEOUT);
 8004dae:	68fb      	ldr	r3, [r7, #12]
 8004db0:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8004db4:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8004db8:	68fb      	ldr	r3, [r7, #12]
 8004dba:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
        hspi->State = HAL_SPI_STATE_READY;
 8004dbe:	68fb      	ldr	r3, [r7, #12]
 8004dc0:	2201      	movs	r2, #1
 8004dc2:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81
        return HAL_TIMEOUT;
 8004dc6:	2303      	movs	r3, #3
 8004dc8:	e115      	b.n	8004ff6 <HAL_SPI_TransmitReceive+0x446>
    while ((initial_TxXferCount > 0UL) || (initial_RxXferCount > 0UL))
 8004dca:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 8004dcc:	2b00      	cmp	r3, #0
 8004dce:	d193      	bne.n	8004cf8 <HAL_SPI_TransmitReceive+0x148>
 8004dd0:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 8004dd2:	2b00      	cmp	r3, #0
 8004dd4:	d190      	bne.n	8004cf8 <HAL_SPI_TransmitReceive+0x148>
 8004dd6:	e0e7      	b.n	8004fa8 <HAL_SPI_TransmitReceive+0x3f8>
      }
    }
  }
  /* Transmit and Receive data in 16 Bit mode */
  else if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8004dd8:	68fb      	ldr	r3, [r7, #12]
 8004dda:	68db      	ldr	r3, [r3, #12]
 8004ddc:	2b07      	cmp	r3, #7
 8004dde:	f240 80dd 	bls.w	8004f9c <HAL_SPI_TransmitReceive+0x3ec>
  {
    while ((initial_TxXferCount > 0UL) || (initial_RxXferCount > 0UL))
 8004de2:	e066      	b.n	8004eb2 <HAL_SPI_TransmitReceive+0x302>
    {
      /* Check the TXP flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXP) && (initial_TxXferCount > 0UL))
 8004de4:	68fb      	ldr	r3, [r7, #12]
 8004de6:	681b      	ldr	r3, [r3, #0]
 8004de8:	695b      	ldr	r3, [r3, #20]
 8004dea:	f003 0302 	and.w	r3, r3, #2
 8004dee:	2b02      	cmp	r3, #2
 8004df0:	d119      	bne.n	8004e26 <HAL_SPI_TransmitReceive+0x276>
 8004df2:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 8004df4:	2b00      	cmp	r3, #0
 8004df6:	d016      	beq.n	8004e26 <HAL_SPI_TransmitReceive+0x276>
      {
#if defined (__GNUC__)
        *ptxdr_16bits = *((uint16_t *)hspi->pTxBuffPtr);
 8004df8:	68fb      	ldr	r3, [r7, #12]
 8004dfa:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004dfc:	881a      	ldrh	r2, [r3, #0]
 8004dfe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004e00:	801a      	strh	r2, [r3, #0]
#else
        *((__IO uint16_t *)&hspi->Instance->TXDR) = *((uint16_t *)hspi->pTxBuffPtr);
#endif /* __GNUC__ */
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8004e02:	68fb      	ldr	r3, [r7, #12]
 8004e04:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004e06:	1c9a      	adds	r2, r3, #2
 8004e08:	68fb      	ldr	r3, [r7, #12]
 8004e0a:	65da      	str	r2, [r3, #92]	; 0x5c
        hspi->TxXferCount--;
 8004e0c:	68fb      	ldr	r3, [r7, #12]
 8004e0e:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 8004e12:	b29b      	uxth	r3, r3
 8004e14:	3b01      	subs	r3, #1
 8004e16:	b29a      	uxth	r2, r3
 8004e18:	68fb      	ldr	r3, [r7, #12]
 8004e1a:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
        initial_TxXferCount = hspi->TxXferCount;
 8004e1e:	68fb      	ldr	r3, [r7, #12]
 8004e20:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 8004e24:	85fb      	strh	r3, [r7, #46]	; 0x2e
      }

      /* Check the RXP flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXP)) && (initial_RxXferCount > 0UL))
 8004e26:	68fb      	ldr	r3, [r7, #12]
 8004e28:	681b      	ldr	r3, [r3, #0]
 8004e2a:	695b      	ldr	r3, [r3, #20]
 8004e2c:	f003 0301 	and.w	r3, r3, #1
 8004e30:	2b01      	cmp	r3, #1
 8004e32:	d11a      	bne.n	8004e6a <HAL_SPI_TransmitReceive+0x2ba>
 8004e34:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 8004e36:	2b00      	cmp	r3, #0
 8004e38:	d017      	beq.n	8004e6a <HAL_SPI_TransmitReceive+0x2ba>
      {
#if defined (__GNUC__)
        *((uint16_t *)hspi->pRxBuffPtr) = *prxdr_16bits;
 8004e3a:	68fb      	ldr	r3, [r7, #12]
 8004e3c:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8004e3e:	6a3a      	ldr	r2, [r7, #32]
 8004e40:	8812      	ldrh	r2, [r2, #0]
 8004e42:	b292      	uxth	r2, r2
 8004e44:	801a      	strh	r2, [r3, #0]
#else
        *((uint16_t *)hspi->pRxBuffPtr) = *((__IO uint16_t *)&hspi->Instance->RXDR);
#endif /* __GNUC__ */
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8004e46:	68fb      	ldr	r3, [r7, #12]
 8004e48:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8004e4a:	1c9a      	adds	r2, r3, #2
 8004e4c:	68fb      	ldr	r3, [r7, #12]
 8004e4e:	665a      	str	r2, [r3, #100]	; 0x64
        hspi->RxXferCount--;
 8004e50:	68fb      	ldr	r3, [r7, #12]
 8004e52:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 8004e56:	b29b      	uxth	r3, r3
 8004e58:	3b01      	subs	r3, #1
 8004e5a:	b29a      	uxth	r2, r3
 8004e5c:	68fb      	ldr	r3, [r7, #12]
 8004e5e:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
        initial_RxXferCount = hspi->RxXferCount;
 8004e62:	68fb      	ldr	r3, [r7, #12]
 8004e64:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 8004e68:	85bb      	strh	r3, [r7, #44]	; 0x2c
      }

      /* Timeout management */
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8004e6a:	f7fb ff2f 	bl	8000ccc <HAL_GetTick>
 8004e6e:	4602      	mov	r2, r0
 8004e70:	69fb      	ldr	r3, [r7, #28]
 8004e72:	1ad3      	subs	r3, r2, r3
 8004e74:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8004e76:	429a      	cmp	r2, r3
 8004e78:	d803      	bhi.n	8004e82 <HAL_SPI_TransmitReceive+0x2d2>
 8004e7a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004e7c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004e80:	d102      	bne.n	8004e88 <HAL_SPI_TransmitReceive+0x2d8>
 8004e82:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004e84:	2b00      	cmp	r3, #0
 8004e86:	d114      	bne.n	8004eb2 <HAL_SPI_TransmitReceive+0x302>
      {
        /* Call standard close procedure with error check */
        SPI_CloseTransfer(hspi);
 8004e88:	68f8      	ldr	r0, [r7, #12]
 8004e8a:	f000 f8b9 	bl	8005000 <SPI_CloseTransfer>

        /* Unlock the process */
        __HAL_UNLOCK(hspi);
 8004e8e:	68fb      	ldr	r3, [r7, #12]
 8004e90:	2200      	movs	r2, #0
 8004e92:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_TIMEOUT);
 8004e96:	68fb      	ldr	r3, [r7, #12]
 8004e98:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8004e9c:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8004ea0:	68fb      	ldr	r3, [r7, #12]
 8004ea2:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
        hspi->State = HAL_SPI_STATE_READY;
 8004ea6:	68fb      	ldr	r3, [r7, #12]
 8004ea8:	2201      	movs	r2, #1
 8004eaa:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81
        return HAL_TIMEOUT;
 8004eae:	2303      	movs	r3, #3
 8004eb0:	e0a1      	b.n	8004ff6 <HAL_SPI_TransmitReceive+0x446>
    while ((initial_TxXferCount > 0UL) || (initial_RxXferCount > 0UL))
 8004eb2:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 8004eb4:	2b00      	cmp	r3, #0
 8004eb6:	d195      	bne.n	8004de4 <HAL_SPI_TransmitReceive+0x234>
 8004eb8:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 8004eba:	2b00      	cmp	r3, #0
 8004ebc:	d192      	bne.n	8004de4 <HAL_SPI_TransmitReceive+0x234>
 8004ebe:	e073      	b.n	8004fa8 <HAL_SPI_TransmitReceive+0x3f8>
 8004ec0:	ffff0000 	.word	0xffff0000
  else
  {
    while ((initial_TxXferCount > 0UL) || (initial_RxXferCount > 0UL))
    {
      /* Check the TXP flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXP)) && (initial_TxXferCount > 0UL))
 8004ec4:	68fb      	ldr	r3, [r7, #12]
 8004ec6:	681b      	ldr	r3, [r3, #0]
 8004ec8:	695b      	ldr	r3, [r3, #20]
 8004eca:	f003 0302 	and.w	r3, r3, #2
 8004ece:	2b02      	cmp	r3, #2
 8004ed0:	d11b      	bne.n	8004f0a <HAL_SPI_TransmitReceive+0x35a>
 8004ed2:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 8004ed4:	2b00      	cmp	r3, #0
 8004ed6:	d018      	beq.n	8004f0a <HAL_SPI_TransmitReceive+0x35a>
      {
        *((__IO uint8_t *)&hspi->Instance->TXDR) = *((uint8_t *)hspi->pTxBuffPtr);
 8004ed8:	68fb      	ldr	r3, [r7, #12]
 8004eda:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8004edc:	68fb      	ldr	r3, [r7, #12]
 8004ede:	681b      	ldr	r3, [r3, #0]
 8004ee0:	3320      	adds	r3, #32
 8004ee2:	7812      	ldrb	r2, [r2, #0]
 8004ee4:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr += sizeof(uint8_t);
 8004ee6:	68fb      	ldr	r3, [r7, #12]
 8004ee8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004eea:	1c5a      	adds	r2, r3, #1
 8004eec:	68fb      	ldr	r3, [r7, #12]
 8004eee:	65da      	str	r2, [r3, #92]	; 0x5c
        hspi->TxXferCount--;
 8004ef0:	68fb      	ldr	r3, [r7, #12]
 8004ef2:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 8004ef6:	b29b      	uxth	r3, r3
 8004ef8:	3b01      	subs	r3, #1
 8004efa:	b29a      	uxth	r2, r3
 8004efc:	68fb      	ldr	r3, [r7, #12]
 8004efe:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
        initial_TxXferCount = hspi->TxXferCount;
 8004f02:	68fb      	ldr	r3, [r7, #12]
 8004f04:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 8004f08:	85fb      	strh	r3, [r7, #46]	; 0x2e
      }

      /* Check the RXP flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXP)) && (initial_RxXferCount > 0UL))
 8004f0a:	68fb      	ldr	r3, [r7, #12]
 8004f0c:	681b      	ldr	r3, [r3, #0]
 8004f0e:	695b      	ldr	r3, [r3, #20]
 8004f10:	f003 0301 	and.w	r3, r3, #1
 8004f14:	2b01      	cmp	r3, #1
 8004f16:	d11d      	bne.n	8004f54 <HAL_SPI_TransmitReceive+0x3a4>
 8004f18:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 8004f1a:	2b00      	cmp	r3, #0
 8004f1c:	d01a      	beq.n	8004f54 <HAL_SPI_TransmitReceive+0x3a4>
      {
        *((uint8_t *)hspi->pRxBuffPtr) = *((__IO uint8_t *)&hspi->Instance->RXDR);
 8004f1e:	68fb      	ldr	r3, [r7, #12]
 8004f20:	681b      	ldr	r3, [r3, #0]
 8004f22:	f103 0230 	add.w	r2, r3, #48	; 0x30
 8004f26:	68fb      	ldr	r3, [r7, #12]
 8004f28:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8004f2a:	7812      	ldrb	r2, [r2, #0]
 8004f2c:	b2d2      	uxtb	r2, r2
 8004f2e:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint8_t);
 8004f30:	68fb      	ldr	r3, [r7, #12]
 8004f32:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8004f34:	1c5a      	adds	r2, r3, #1
 8004f36:	68fb      	ldr	r3, [r7, #12]
 8004f38:	665a      	str	r2, [r3, #100]	; 0x64
        hspi->RxXferCount--;
 8004f3a:	68fb      	ldr	r3, [r7, #12]
 8004f3c:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 8004f40:	b29b      	uxth	r3, r3
 8004f42:	3b01      	subs	r3, #1
 8004f44:	b29a      	uxth	r2, r3
 8004f46:	68fb      	ldr	r3, [r7, #12]
 8004f48:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
        initial_RxXferCount = hspi->RxXferCount;
 8004f4c:	68fb      	ldr	r3, [r7, #12]
 8004f4e:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 8004f52:	85bb      	strh	r3, [r7, #44]	; 0x2c
      }

      /* Timeout management */
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8004f54:	f7fb feba 	bl	8000ccc <HAL_GetTick>
 8004f58:	4602      	mov	r2, r0
 8004f5a:	69fb      	ldr	r3, [r7, #28]
 8004f5c:	1ad3      	subs	r3, r2, r3
 8004f5e:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8004f60:	429a      	cmp	r2, r3
 8004f62:	d803      	bhi.n	8004f6c <HAL_SPI_TransmitReceive+0x3bc>
 8004f64:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004f66:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004f6a:	d102      	bne.n	8004f72 <HAL_SPI_TransmitReceive+0x3c2>
 8004f6c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004f6e:	2b00      	cmp	r3, #0
 8004f70:	d114      	bne.n	8004f9c <HAL_SPI_TransmitReceive+0x3ec>
      {
        /* Call standard close procedure with error check */
        SPI_CloseTransfer(hspi);
 8004f72:	68f8      	ldr	r0, [r7, #12]
 8004f74:	f000 f844 	bl	8005000 <SPI_CloseTransfer>

        /* Unlock the process */
        __HAL_UNLOCK(hspi);
 8004f78:	68fb      	ldr	r3, [r7, #12]
 8004f7a:	2200      	movs	r2, #0
 8004f7c:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_TIMEOUT);
 8004f80:	68fb      	ldr	r3, [r7, #12]
 8004f82:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8004f86:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8004f8a:	68fb      	ldr	r3, [r7, #12]
 8004f8c:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
        hspi->State = HAL_SPI_STATE_READY;
 8004f90:	68fb      	ldr	r3, [r7, #12]
 8004f92:	2201      	movs	r2, #1
 8004f94:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81
        return HAL_TIMEOUT;
 8004f98:	2303      	movs	r3, #3
 8004f9a:	e02c      	b.n	8004ff6 <HAL_SPI_TransmitReceive+0x446>
    while ((initial_TxXferCount > 0UL) || (initial_RxXferCount > 0UL))
 8004f9c:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 8004f9e:	2b00      	cmp	r3, #0
 8004fa0:	d190      	bne.n	8004ec4 <HAL_SPI_TransmitReceive+0x314>
 8004fa2:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 8004fa4:	2b00      	cmp	r3, #0
 8004fa6:	d18d      	bne.n	8004ec4 <HAL_SPI_TransmitReceive+0x314>
      }
    }
  }

  /* Wait for Tx/Rx (and CRC) data to be sent/received */
  if (SPI_WaitOnFlagUntilTimeout(hspi, SPI_FLAG_EOT, RESET, tickstart, Timeout) != HAL_OK)
 8004fa8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004faa:	9300      	str	r3, [sp, #0]
 8004fac:	69fb      	ldr	r3, [r7, #28]
 8004fae:	2200      	movs	r2, #0
 8004fb0:	2108      	movs	r1, #8
 8004fb2:	68f8      	ldr	r0, [r7, #12]
 8004fb4:	f000 f8c4 	bl	8005140 <SPI_WaitOnFlagUntilTimeout>
 8004fb8:	4603      	mov	r3, r0
 8004fba:	2b00      	cmp	r3, #0
 8004fbc:	d007      	beq.n	8004fce <HAL_SPI_TransmitReceive+0x41e>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8004fbe:	68fb      	ldr	r3, [r7, #12]
 8004fc0:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8004fc4:	f043 0220 	orr.w	r2, r3, #32
 8004fc8:	68fb      	ldr	r3, [r7, #12]
 8004fca:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  }

  /* Call standard close procedure with error check */
  SPI_CloseTransfer(hspi);
 8004fce:	68f8      	ldr	r0, [r7, #12]
 8004fd0:	f000 f816 	bl	8005000 <SPI_CloseTransfer>

  /* Unlock the process */
  __HAL_UNLOCK(hspi);
 8004fd4:	68fb      	ldr	r3, [r7, #12]
 8004fd6:	2200      	movs	r2, #0
 8004fd8:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  hspi->State = HAL_SPI_STATE_READY;
 8004fdc:	68fb      	ldr	r3, [r7, #12]
 8004fde:	2201      	movs	r2, #1
 8004fe0:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8004fe4:	68fb      	ldr	r3, [r7, #12]
 8004fe6:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8004fea:	2b00      	cmp	r3, #0
 8004fec:	d001      	beq.n	8004ff2 <HAL_SPI_TransmitReceive+0x442>
  {
    return HAL_ERROR;
 8004fee:	2301      	movs	r3, #1
 8004ff0:	e001      	b.n	8004ff6 <HAL_SPI_TransmitReceive+0x446>
  }
  return errorcode;
 8004ff2:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
}
 8004ff6:	4618      	mov	r0, r3
 8004ff8:	3730      	adds	r7, #48	; 0x30
 8004ffa:	46bd      	mov	sp, r7
 8004ffc:	bd80      	pop	{r7, pc}
 8004ffe:	bf00      	nop

08005000 <SPI_CloseTransfer>:
  *               the configuration information for SPI module.
  * @retval HAL_ERROR: if any error detected
  *         HAL_OK: if nothing detected
  */
static void SPI_CloseTransfer(SPI_HandleTypeDef *hspi)
{
 8005000:	b480      	push	{r7}
 8005002:	b085      	sub	sp, #20
 8005004:	af00      	add	r7, sp, #0
 8005006:	6078      	str	r0, [r7, #4]
  uint32_t itflag = hspi->Instance->SR;
 8005008:	687b      	ldr	r3, [r7, #4]
 800500a:	681b      	ldr	r3, [r3, #0]
 800500c:	695b      	ldr	r3, [r3, #20]
 800500e:	60fb      	str	r3, [r7, #12]

  __HAL_SPI_CLEAR_EOTFLAG(hspi);
 8005010:	687b      	ldr	r3, [r7, #4]
 8005012:	681b      	ldr	r3, [r3, #0]
 8005014:	699a      	ldr	r2, [r3, #24]
 8005016:	687b      	ldr	r3, [r7, #4]
 8005018:	681b      	ldr	r3, [r3, #0]
 800501a:	f042 0208 	orr.w	r2, r2, #8
 800501e:	619a      	str	r2, [r3, #24]
  __HAL_SPI_CLEAR_TXTFFLAG(hspi);
 8005020:	687b      	ldr	r3, [r7, #4]
 8005022:	681b      	ldr	r3, [r3, #0]
 8005024:	699a      	ldr	r2, [r3, #24]
 8005026:	687b      	ldr	r3, [r7, #4]
 8005028:	681b      	ldr	r3, [r3, #0]
 800502a:	f042 0210 	orr.w	r2, r2, #16
 800502e:	619a      	str	r2, [r3, #24]

  /* Disable SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8005030:	687b      	ldr	r3, [r7, #4]
 8005032:	681b      	ldr	r3, [r3, #0]
 8005034:	681a      	ldr	r2, [r3, #0]
 8005036:	687b      	ldr	r3, [r7, #4]
 8005038:	681b      	ldr	r3, [r3, #0]
 800503a:	f022 0201 	bic.w	r2, r2, #1
 800503e:	601a      	str	r2, [r3, #0]

  /* Disable ITs */
  __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_EOT | SPI_IT_TXP | SPI_IT_RXP | SPI_IT_DXP | SPI_IT_UDR | SPI_IT_OVR | \
 8005040:	687b      	ldr	r3, [r7, #4]
 8005042:	681b      	ldr	r3, [r3, #0]
 8005044:	6919      	ldr	r1, [r3, #16]
 8005046:	687b      	ldr	r3, [r7, #4]
 8005048:	681a      	ldr	r2, [r3, #0]
 800504a:	4b3c      	ldr	r3, [pc, #240]	; (800513c <SPI_CloseTransfer+0x13c>)
 800504c:	400b      	ands	r3, r1
 800504e:	6113      	str	r3, [r2, #16]
                              SPI_IT_FRE | SPI_IT_MODF));

  /* Disable Tx DMA Request */
  CLEAR_BIT(hspi->Instance->CFG1, SPI_CFG1_TXDMAEN | SPI_CFG1_RXDMAEN);
 8005050:	687b      	ldr	r3, [r7, #4]
 8005052:	681b      	ldr	r3, [r3, #0]
 8005054:	689a      	ldr	r2, [r3, #8]
 8005056:	687b      	ldr	r3, [r7, #4]
 8005058:	681b      	ldr	r3, [r3, #0]
 800505a:	f422 4240 	bic.w	r2, r2, #49152	; 0xc000
 800505e:	609a      	str	r2, [r3, #8]

  /* Report UnderRun error for non RX Only communication */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 8005060:	687b      	ldr	r3, [r7, #4]
 8005062:	f893 3081 	ldrb.w	r3, [r3, #129]	; 0x81
 8005066:	b2db      	uxtb	r3, r3
 8005068:	2b04      	cmp	r3, #4
 800506a:	d014      	beq.n	8005096 <SPI_CloseTransfer+0x96>
  {
    if ((itflag & SPI_FLAG_UDR) != 0UL)
 800506c:	68fb      	ldr	r3, [r7, #12]
 800506e:	f003 0320 	and.w	r3, r3, #32
 8005072:	2b00      	cmp	r3, #0
 8005074:	d00f      	beq.n	8005096 <SPI_CloseTransfer+0x96>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_UDR);
 8005076:	687b      	ldr	r3, [r7, #4]
 8005078:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800507c:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 8005080:	687b      	ldr	r3, [r7, #4]
 8005082:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
      __HAL_SPI_CLEAR_UDRFLAG(hspi);
 8005086:	687b      	ldr	r3, [r7, #4]
 8005088:	681b      	ldr	r3, [r3, #0]
 800508a:	699a      	ldr	r2, [r3, #24]
 800508c:	687b      	ldr	r3, [r7, #4]
 800508e:	681b      	ldr	r3, [r3, #0]
 8005090:	f042 0220 	orr.w	r2, r2, #32
 8005094:	619a      	str	r2, [r3, #24]
    }
  }

  /* Report OverRun error for non TX Only communication */
  if (hspi->State != HAL_SPI_STATE_BUSY_TX)
 8005096:	687b      	ldr	r3, [r7, #4]
 8005098:	f893 3081 	ldrb.w	r3, [r3, #129]	; 0x81
 800509c:	b2db      	uxtb	r3, r3
 800509e:	2b03      	cmp	r3, #3
 80050a0:	d014      	beq.n	80050cc <SPI_CloseTransfer+0xcc>
  {
    if ((itflag & SPI_FLAG_OVR) != 0UL)
 80050a2:	68fb      	ldr	r3, [r7, #12]
 80050a4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80050a8:	2b00      	cmp	r3, #0
 80050aa:	d00f      	beq.n	80050cc <SPI_CloseTransfer+0xcc>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_OVR);
 80050ac:	687b      	ldr	r3, [r7, #4]
 80050ae:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80050b2:	f043 0204 	orr.w	r2, r3, #4
 80050b6:	687b      	ldr	r3, [r7, #4]
 80050b8:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
      __HAL_SPI_CLEAR_OVRFLAG(hspi);
 80050bc:	687b      	ldr	r3, [r7, #4]
 80050be:	681b      	ldr	r3, [r3, #0]
 80050c0:	699a      	ldr	r2, [r3, #24]
 80050c2:	687b      	ldr	r3, [r7, #4]
 80050c4:	681b      	ldr	r3, [r3, #0]
 80050c6:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80050ca:	619a      	str	r2, [r3, #24]
    }
#endif /* USE_SPI_CRC */
  }

  /* SPI Mode Fault error interrupt occurred -------------------------------*/
  if ((itflag & SPI_FLAG_MODF) != 0UL)
 80050cc:	68fb      	ldr	r3, [r7, #12]
 80050ce:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80050d2:	2b00      	cmp	r3, #0
 80050d4:	d00f      	beq.n	80050f6 <SPI_CloseTransfer+0xf6>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_MODF);
 80050d6:	687b      	ldr	r3, [r7, #4]
 80050d8:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80050dc:	f043 0201 	orr.w	r2, r3, #1
 80050e0:	687b      	ldr	r3, [r7, #4]
 80050e2:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    __HAL_SPI_CLEAR_MODFFLAG(hspi);
 80050e6:	687b      	ldr	r3, [r7, #4]
 80050e8:	681b      	ldr	r3, [r3, #0]
 80050ea:	699a      	ldr	r2, [r3, #24]
 80050ec:	687b      	ldr	r3, [r7, #4]
 80050ee:	681b      	ldr	r3, [r3, #0]
 80050f0:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80050f4:	619a      	str	r2, [r3, #24]
  }

  /* SPI Frame error interrupt occurred ------------------------------------*/
  if ((itflag & SPI_FLAG_FRE) != 0UL)
 80050f6:	68fb      	ldr	r3, [r7, #12]
 80050f8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80050fc:	2b00      	cmp	r3, #0
 80050fe:	d00f      	beq.n	8005120 <SPI_CloseTransfer+0x120>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FRE);
 8005100:	687b      	ldr	r3, [r7, #4]
 8005102:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8005106:	f043 0208 	orr.w	r2, r3, #8
 800510a:	687b      	ldr	r3, [r7, #4]
 800510c:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    __HAL_SPI_CLEAR_FREFLAG(hspi);
 8005110:	687b      	ldr	r3, [r7, #4]
 8005112:	681b      	ldr	r3, [r3, #0]
 8005114:	699a      	ldr	r2, [r3, #24]
 8005116:	687b      	ldr	r3, [r7, #4]
 8005118:	681b      	ldr	r3, [r3, #0]
 800511a:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800511e:	619a      	str	r2, [r3, #24]
  }

  hspi->TxXferCount = (uint16_t)0UL;
 8005120:	687b      	ldr	r3, [r7, #4]
 8005122:	2200      	movs	r2, #0
 8005124:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
  hspi->RxXferCount = (uint16_t)0UL;
 8005128:	687b      	ldr	r3, [r7, #4]
 800512a:	2200      	movs	r2, #0
 800512c:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
}
 8005130:	bf00      	nop
 8005132:	3714      	adds	r7, #20
 8005134:	46bd      	mov	sp, r7
 8005136:	f85d 7b04 	ldr.w	r7, [sp], #4
 800513a:	4770      	bx	lr
 800513c:	fffffc90 	.word	0xfffffc90

08005140 <SPI_WaitOnFlagUntilTimeout>:
  * @param Tickstart: Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitOnFlagUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus Status,
                                                    uint32_t Tickstart, uint32_t Timeout)
{
 8005140:	b580      	push	{r7, lr}
 8005142:	b084      	sub	sp, #16
 8005144:	af00      	add	r7, sp, #0
 8005146:	60f8      	str	r0, [r7, #12]
 8005148:	60b9      	str	r1, [r7, #8]
 800514a:	603b      	str	r3, [r7, #0]
 800514c:	4613      	mov	r3, r2
 800514e:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) == Status)
 8005150:	e010      	b.n	8005174 <SPI_WaitOnFlagUntilTimeout+0x34>
  {
    /* Check for the Timeout */
    if ((((HAL_GetTick() - Tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8005152:	f7fb fdbb 	bl	8000ccc <HAL_GetTick>
 8005156:	4602      	mov	r2, r0
 8005158:	683b      	ldr	r3, [r7, #0]
 800515a:	1ad3      	subs	r3, r2, r3
 800515c:	69ba      	ldr	r2, [r7, #24]
 800515e:	429a      	cmp	r2, r3
 8005160:	d803      	bhi.n	800516a <SPI_WaitOnFlagUntilTimeout+0x2a>
 8005162:	69bb      	ldr	r3, [r7, #24]
 8005164:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005168:	d102      	bne.n	8005170 <SPI_WaitOnFlagUntilTimeout+0x30>
 800516a:	69bb      	ldr	r3, [r7, #24]
 800516c:	2b00      	cmp	r3, #0
 800516e:	d101      	bne.n	8005174 <SPI_WaitOnFlagUntilTimeout+0x34>
    {
      return HAL_TIMEOUT;
 8005170:	2303      	movs	r3, #3
 8005172:	e00f      	b.n	8005194 <SPI_WaitOnFlagUntilTimeout+0x54>
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) == Status)
 8005174:	68fb      	ldr	r3, [r7, #12]
 8005176:	681b      	ldr	r3, [r3, #0]
 8005178:	695a      	ldr	r2, [r3, #20]
 800517a:	68bb      	ldr	r3, [r7, #8]
 800517c:	4013      	ands	r3, r2
 800517e:	68ba      	ldr	r2, [r7, #8]
 8005180:	429a      	cmp	r2, r3
 8005182:	bf0c      	ite	eq
 8005184:	2301      	moveq	r3, #1
 8005186:	2300      	movne	r3, #0
 8005188:	b2db      	uxtb	r3, r3
 800518a:	461a      	mov	r2, r3
 800518c:	79fb      	ldrb	r3, [r7, #7]
 800518e:	429a      	cmp	r2, r3
 8005190:	d0df      	beq.n	8005152 <SPI_WaitOnFlagUntilTimeout+0x12>
    }
  }
  return HAL_OK;
 8005192:	2300      	movs	r3, #0
}
 8005194:	4618      	mov	r0, r3
 8005196:	3710      	adds	r7, #16
 8005198:	46bd      	mov	sp, r7
 800519a:	bd80      	pop	{r7, pc}

0800519c <SPI_GetPacketSize>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval Packet size occupied in the fifo
  */
static uint32_t SPI_GetPacketSize(SPI_HandleTypeDef *hspi)
{
 800519c:	b480      	push	{r7}
 800519e:	b085      	sub	sp, #20
 80051a0:	af00      	add	r7, sp, #0
 80051a2:	6078      	str	r0, [r7, #4]
  uint32_t fifo_threashold = (hspi->Init.FifoThreshold >> SPI_CFG1_FTHLV_Pos) + 1UL;
 80051a4:	687b      	ldr	r3, [r7, #4]
 80051a6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80051a8:	095b      	lsrs	r3, r3, #5
 80051aa:	3301      	adds	r3, #1
 80051ac:	60fb      	str	r3, [r7, #12]
  uint32_t data_size       = (hspi->Init.DataSize      >> SPI_CFG1_DSIZE_Pos) + 1UL;
 80051ae:	687b      	ldr	r3, [r7, #4]
 80051b0:	68db      	ldr	r3, [r3, #12]
 80051b2:	3301      	adds	r3, #1
 80051b4:	60bb      	str	r3, [r7, #8]

  /* Convert data size to Byte */
  data_size = (data_size + 7UL) / 8UL;
 80051b6:	68bb      	ldr	r3, [r7, #8]
 80051b8:	3307      	adds	r3, #7
 80051ba:	08db      	lsrs	r3, r3, #3
 80051bc:	60bb      	str	r3, [r7, #8]

  return data_size * fifo_threashold;
 80051be:	68bb      	ldr	r3, [r7, #8]
 80051c0:	68fa      	ldr	r2, [r7, #12]
 80051c2:	fb02 f303 	mul.w	r3, r2, r3
}
 80051c6:	4618      	mov	r0, r3
 80051c8:	3714      	adds	r7, #20
 80051ca:	46bd      	mov	sp, r7
 80051cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80051d0:	4770      	bx	lr
	...

080051d4 <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 80051d4:	b084      	sub	sp, #16
 80051d6:	b580      	push	{r7, lr}
 80051d8:	b084      	sub	sp, #16
 80051da:	af00      	add	r7, sp, #0
 80051dc:	6078      	str	r0, [r7, #4]
 80051de:	f107 001c 	add.w	r0, r7, #28
 80051e2:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;
  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 80051e6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80051e8:	2b01      	cmp	r3, #1
 80051ea:	d120      	bne.n	800522e <USB_CoreInit+0x5a>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 80051ec:	687b      	ldr	r3, [r7, #4]
 80051ee:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80051f0:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 80051f4:	687b      	ldr	r3, [r7, #4]
 80051f6:	639a      	str	r2, [r3, #56]	; 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 80051f8:	687b      	ldr	r3, [r7, #4]
 80051fa:	68da      	ldr	r2, [r3, #12]
 80051fc:	4b2a      	ldr	r3, [pc, #168]	; (80052a8 <USB_CoreInit+0xd4>)
 80051fe:	4013      	ands	r3, r2
 8005200:	687a      	ldr	r2, [r7, #4]
 8005202:	60d3      	str	r3, [r2, #12]

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 8005204:	687b      	ldr	r3, [r7, #4]
 8005206:	68db      	ldr	r3, [r3, #12]
 8005208:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 800520c:	687b      	ldr	r3, [r7, #4]
 800520e:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 8005210:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8005212:	2b01      	cmp	r3, #1
 8005214:	d105      	bne.n	8005222 <USB_CoreInit+0x4e>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 8005216:	687b      	ldr	r3, [r7, #4]
 8005218:	68db      	ldr	r3, [r3, #12]
 800521a:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 800521e:	687b      	ldr	r3, [r7, #4]
 8005220:	60da      	str	r2, [r3, #12]
    }

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 8005222:	6878      	ldr	r0, [r7, #4]
 8005224:	f001 fc04 	bl	8006a30 <USB_CoreReset>
 8005228:	4603      	mov	r3, r0
 800522a:	73fb      	strb	r3, [r7, #15]
 800522c:	e01a      	b.n	8005264 <USB_CoreInit+0x90>
  }
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 800522e:	687b      	ldr	r3, [r7, #4]
 8005230:	68db      	ldr	r3, [r3, #12]
 8005232:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8005236:	687b      	ldr	r3, [r7, #4]
 8005238:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 800523a:	6878      	ldr	r0, [r7, #4]
 800523c:	f001 fbf8 	bl	8006a30 <USB_CoreReset>
 8005240:	4603      	mov	r3, r0
 8005242:	73fb      	strb	r3, [r7, #15]

    if (cfg.battery_charging_enable == 0U)
 8005244:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8005246:	2b00      	cmp	r3, #0
 8005248:	d106      	bne.n	8005258 <USB_CoreInit+0x84>
    {
      /* Activate the USB Transceiver */
      USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 800524a:	687b      	ldr	r3, [r7, #4]
 800524c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800524e:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 8005252:	687b      	ldr	r3, [r7, #4]
 8005254:	639a      	str	r2, [r3, #56]	; 0x38
 8005256:	e005      	b.n	8005264 <USB_CoreInit+0x90>
    }
    else
    {
      /* Deactivate the USB Transceiver */
      USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8005258:	687b      	ldr	r3, [r7, #4]
 800525a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800525c:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8005260:	687b      	ldr	r3, [r7, #4]
 8005262:	639a      	str	r2, [r3, #56]	; 0x38
    }
  }

  if (cfg.dma_enable == 1U)
 8005264:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005266:	2b01      	cmp	r3, #1
 8005268:	d116      	bne.n	8005298 <USB_CoreInit+0xc4>
  {
    /* make sure to reserve 18 fifo Locations for DMA buffers */
    USBx->GDFIFOCFG &= ~(0xFFFFU << 16);
 800526a:	687b      	ldr	r3, [r7, #4]
 800526c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800526e:	b29a      	uxth	r2, r3
 8005270:	687b      	ldr	r3, [r7, #4]
 8005272:	65da      	str	r2, [r3, #92]	; 0x5c
    USBx->GDFIFOCFG |= 0x3EEU << 16;
 8005274:	687b      	ldr	r3, [r7, #4]
 8005276:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8005278:	4b0c      	ldr	r3, [pc, #48]	; (80052ac <USB_CoreInit+0xd8>)
 800527a:	4313      	orrs	r3, r2
 800527c:	687a      	ldr	r2, [r7, #4]
 800527e:	65d3      	str	r3, [r2, #92]	; 0x5c

    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 8005280:	687b      	ldr	r3, [r7, #4]
 8005282:	689b      	ldr	r3, [r3, #8]
 8005284:	f043 0206 	orr.w	r2, r3, #6
 8005288:	687b      	ldr	r3, [r7, #4]
 800528a:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 800528c:	687b      	ldr	r3, [r7, #4]
 800528e:	689b      	ldr	r3, [r3, #8]
 8005290:	f043 0220 	orr.w	r2, r3, #32
 8005294:	687b      	ldr	r3, [r7, #4]
 8005296:	609a      	str	r2, [r3, #8]
  }

  return ret;
 8005298:	7bfb      	ldrb	r3, [r7, #15]
}
 800529a:	4618      	mov	r0, r3
 800529c:	3710      	adds	r7, #16
 800529e:	46bd      	mov	sp, r7
 80052a0:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 80052a4:	b004      	add	sp, #16
 80052a6:	4770      	bx	lr
 80052a8:	ffbdffbf 	.word	0xffbdffbf
 80052ac:	03ee0000 	.word	0x03ee0000

080052b0 <USB_SetTurnaroundTime>:
  * @param  hclk: AHB clock frequency
  * @retval USB turnaround time In PHY Clocks number
  */
HAL_StatusTypeDef USB_SetTurnaroundTime(USB_OTG_GlobalTypeDef *USBx,
                                        uint32_t hclk, uint8_t speed)
{
 80052b0:	b480      	push	{r7}
 80052b2:	b087      	sub	sp, #28
 80052b4:	af00      	add	r7, sp, #0
 80052b6:	60f8      	str	r0, [r7, #12]
 80052b8:	60b9      	str	r1, [r7, #8]
 80052ba:	4613      	mov	r3, r2
 80052bc:	71fb      	strb	r3, [r7, #7]

  /* The USBTRD is configured according to the tables below, depending on AHB frequency
  used by application. In the low AHB frequency range it is used to stretch enough the USB response
  time to IN tokens, the USB turnaround time, so to compensate for the longer AHB read access
  latency to the Data FIFO */
  if (speed == USBD_FS_SPEED)
 80052be:	79fb      	ldrb	r3, [r7, #7]
 80052c0:	2b02      	cmp	r3, #2
 80052c2:	d165      	bne.n	8005390 <USB_SetTurnaroundTime+0xe0>
  {
    if ((hclk >= 14200000U) && (hclk < 15000000U))
 80052c4:	68bb      	ldr	r3, [r7, #8]
 80052c6:	4a41      	ldr	r2, [pc, #260]	; (80053cc <USB_SetTurnaroundTime+0x11c>)
 80052c8:	4293      	cmp	r3, r2
 80052ca:	d906      	bls.n	80052da <USB_SetTurnaroundTime+0x2a>
 80052cc:	68bb      	ldr	r3, [r7, #8]
 80052ce:	4a40      	ldr	r2, [pc, #256]	; (80053d0 <USB_SetTurnaroundTime+0x120>)
 80052d0:	4293      	cmp	r3, r2
 80052d2:	d202      	bcs.n	80052da <USB_SetTurnaroundTime+0x2a>
    {
      /* hclk Clock Range between 14.2-15 MHz */
      UsbTrd = 0xFU;
 80052d4:	230f      	movs	r3, #15
 80052d6:	617b      	str	r3, [r7, #20]
 80052d8:	e062      	b.n	80053a0 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 15000000U) && (hclk < 16000000U))
 80052da:	68bb      	ldr	r3, [r7, #8]
 80052dc:	4a3c      	ldr	r2, [pc, #240]	; (80053d0 <USB_SetTurnaroundTime+0x120>)
 80052de:	4293      	cmp	r3, r2
 80052e0:	d306      	bcc.n	80052f0 <USB_SetTurnaroundTime+0x40>
 80052e2:	68bb      	ldr	r3, [r7, #8]
 80052e4:	4a3b      	ldr	r2, [pc, #236]	; (80053d4 <USB_SetTurnaroundTime+0x124>)
 80052e6:	4293      	cmp	r3, r2
 80052e8:	d202      	bcs.n	80052f0 <USB_SetTurnaroundTime+0x40>
    {
      /* hclk Clock Range between 15-16 MHz */
      UsbTrd = 0xEU;
 80052ea:	230e      	movs	r3, #14
 80052ec:	617b      	str	r3, [r7, #20]
 80052ee:	e057      	b.n	80053a0 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 16000000U) && (hclk < 17200000U))
 80052f0:	68bb      	ldr	r3, [r7, #8]
 80052f2:	4a38      	ldr	r2, [pc, #224]	; (80053d4 <USB_SetTurnaroundTime+0x124>)
 80052f4:	4293      	cmp	r3, r2
 80052f6:	d306      	bcc.n	8005306 <USB_SetTurnaroundTime+0x56>
 80052f8:	68bb      	ldr	r3, [r7, #8]
 80052fa:	4a37      	ldr	r2, [pc, #220]	; (80053d8 <USB_SetTurnaroundTime+0x128>)
 80052fc:	4293      	cmp	r3, r2
 80052fe:	d202      	bcs.n	8005306 <USB_SetTurnaroundTime+0x56>
    {
      /* hclk Clock Range between 16-17.2 MHz */
      UsbTrd = 0xDU;
 8005300:	230d      	movs	r3, #13
 8005302:	617b      	str	r3, [r7, #20]
 8005304:	e04c      	b.n	80053a0 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 17200000U) && (hclk < 18500000U))
 8005306:	68bb      	ldr	r3, [r7, #8]
 8005308:	4a33      	ldr	r2, [pc, #204]	; (80053d8 <USB_SetTurnaroundTime+0x128>)
 800530a:	4293      	cmp	r3, r2
 800530c:	d306      	bcc.n	800531c <USB_SetTurnaroundTime+0x6c>
 800530e:	68bb      	ldr	r3, [r7, #8]
 8005310:	4a32      	ldr	r2, [pc, #200]	; (80053dc <USB_SetTurnaroundTime+0x12c>)
 8005312:	4293      	cmp	r3, r2
 8005314:	d802      	bhi.n	800531c <USB_SetTurnaroundTime+0x6c>
    {
      /* hclk Clock Range between 17.2-18.5 MHz */
      UsbTrd = 0xCU;
 8005316:	230c      	movs	r3, #12
 8005318:	617b      	str	r3, [r7, #20]
 800531a:	e041      	b.n	80053a0 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 18500000U) && (hclk < 20000000U))
 800531c:	68bb      	ldr	r3, [r7, #8]
 800531e:	4a2f      	ldr	r2, [pc, #188]	; (80053dc <USB_SetTurnaroundTime+0x12c>)
 8005320:	4293      	cmp	r3, r2
 8005322:	d906      	bls.n	8005332 <USB_SetTurnaroundTime+0x82>
 8005324:	68bb      	ldr	r3, [r7, #8]
 8005326:	4a2e      	ldr	r2, [pc, #184]	; (80053e0 <USB_SetTurnaroundTime+0x130>)
 8005328:	4293      	cmp	r3, r2
 800532a:	d802      	bhi.n	8005332 <USB_SetTurnaroundTime+0x82>
    {
      /* hclk Clock Range between 18.5-20 MHz */
      UsbTrd = 0xBU;
 800532c:	230b      	movs	r3, #11
 800532e:	617b      	str	r3, [r7, #20]
 8005330:	e036      	b.n	80053a0 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 20000000U) && (hclk < 21800000U))
 8005332:	68bb      	ldr	r3, [r7, #8]
 8005334:	4a2a      	ldr	r2, [pc, #168]	; (80053e0 <USB_SetTurnaroundTime+0x130>)
 8005336:	4293      	cmp	r3, r2
 8005338:	d906      	bls.n	8005348 <USB_SetTurnaroundTime+0x98>
 800533a:	68bb      	ldr	r3, [r7, #8]
 800533c:	4a29      	ldr	r2, [pc, #164]	; (80053e4 <USB_SetTurnaroundTime+0x134>)
 800533e:	4293      	cmp	r3, r2
 8005340:	d802      	bhi.n	8005348 <USB_SetTurnaroundTime+0x98>
    {
      /* hclk Clock Range between 20-21.8 MHz */
      UsbTrd = 0xAU;
 8005342:	230a      	movs	r3, #10
 8005344:	617b      	str	r3, [r7, #20]
 8005346:	e02b      	b.n	80053a0 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 21800000U) && (hclk < 24000000U))
 8005348:	68bb      	ldr	r3, [r7, #8]
 800534a:	4a26      	ldr	r2, [pc, #152]	; (80053e4 <USB_SetTurnaroundTime+0x134>)
 800534c:	4293      	cmp	r3, r2
 800534e:	d906      	bls.n	800535e <USB_SetTurnaroundTime+0xae>
 8005350:	68bb      	ldr	r3, [r7, #8]
 8005352:	4a25      	ldr	r2, [pc, #148]	; (80053e8 <USB_SetTurnaroundTime+0x138>)
 8005354:	4293      	cmp	r3, r2
 8005356:	d202      	bcs.n	800535e <USB_SetTurnaroundTime+0xae>
    {
      /* hclk Clock Range between 21.8-24 MHz */
      UsbTrd = 0x9U;
 8005358:	2309      	movs	r3, #9
 800535a:	617b      	str	r3, [r7, #20]
 800535c:	e020      	b.n	80053a0 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 24000000U) && (hclk < 27700000U))
 800535e:	68bb      	ldr	r3, [r7, #8]
 8005360:	4a21      	ldr	r2, [pc, #132]	; (80053e8 <USB_SetTurnaroundTime+0x138>)
 8005362:	4293      	cmp	r3, r2
 8005364:	d306      	bcc.n	8005374 <USB_SetTurnaroundTime+0xc4>
 8005366:	68bb      	ldr	r3, [r7, #8]
 8005368:	4a20      	ldr	r2, [pc, #128]	; (80053ec <USB_SetTurnaroundTime+0x13c>)
 800536a:	4293      	cmp	r3, r2
 800536c:	d802      	bhi.n	8005374 <USB_SetTurnaroundTime+0xc4>
    {
      /* hclk Clock Range between 24-27.7 MHz */
      UsbTrd = 0x8U;
 800536e:	2308      	movs	r3, #8
 8005370:	617b      	str	r3, [r7, #20]
 8005372:	e015      	b.n	80053a0 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 27700000U) && (hclk < 32000000U))
 8005374:	68bb      	ldr	r3, [r7, #8]
 8005376:	4a1d      	ldr	r2, [pc, #116]	; (80053ec <USB_SetTurnaroundTime+0x13c>)
 8005378:	4293      	cmp	r3, r2
 800537a:	d906      	bls.n	800538a <USB_SetTurnaroundTime+0xda>
 800537c:	68bb      	ldr	r3, [r7, #8]
 800537e:	4a1c      	ldr	r2, [pc, #112]	; (80053f0 <USB_SetTurnaroundTime+0x140>)
 8005380:	4293      	cmp	r3, r2
 8005382:	d202      	bcs.n	800538a <USB_SetTurnaroundTime+0xda>
    {
      /* hclk Clock Range between 27.7-32 MHz */
      UsbTrd = 0x7U;
 8005384:	2307      	movs	r3, #7
 8005386:	617b      	str	r3, [r7, #20]
 8005388:	e00a      	b.n	80053a0 <USB_SetTurnaroundTime+0xf0>
    }
    else /* if(hclk >= 32000000) */
    {
      /* hclk Clock Range between 32-200 MHz */
      UsbTrd = 0x6U;
 800538a:	2306      	movs	r3, #6
 800538c:	617b      	str	r3, [r7, #20]
 800538e:	e007      	b.n	80053a0 <USB_SetTurnaroundTime+0xf0>
    }
  }
  else if (speed == USBD_HS_SPEED)
 8005390:	79fb      	ldrb	r3, [r7, #7]
 8005392:	2b00      	cmp	r3, #0
 8005394:	d102      	bne.n	800539c <USB_SetTurnaroundTime+0xec>
  {
    UsbTrd = USBD_HS_TRDT_VALUE;
 8005396:	2309      	movs	r3, #9
 8005398:	617b      	str	r3, [r7, #20]
 800539a:	e001      	b.n	80053a0 <USB_SetTurnaroundTime+0xf0>
  }
  else
  {
    UsbTrd = USBD_DEFAULT_TRDT_VALUE;
 800539c:	2309      	movs	r3, #9
 800539e:	617b      	str	r3, [r7, #20]
  }

  USBx->GUSBCFG &= ~USB_OTG_GUSBCFG_TRDT;
 80053a0:	68fb      	ldr	r3, [r7, #12]
 80053a2:	68db      	ldr	r3, [r3, #12]
 80053a4:	f423 5270 	bic.w	r2, r3, #15360	; 0x3c00
 80053a8:	68fb      	ldr	r3, [r7, #12]
 80053aa:	60da      	str	r2, [r3, #12]
  USBx->GUSBCFG |= (uint32_t)((UsbTrd << 10) & USB_OTG_GUSBCFG_TRDT);
 80053ac:	68fb      	ldr	r3, [r7, #12]
 80053ae:	68da      	ldr	r2, [r3, #12]
 80053b0:	697b      	ldr	r3, [r7, #20]
 80053b2:	029b      	lsls	r3, r3, #10
 80053b4:	f403 5370 	and.w	r3, r3, #15360	; 0x3c00
 80053b8:	431a      	orrs	r2, r3
 80053ba:	68fb      	ldr	r3, [r7, #12]
 80053bc:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 80053be:	2300      	movs	r3, #0
}
 80053c0:	4618      	mov	r0, r3
 80053c2:	371c      	adds	r7, #28
 80053c4:	46bd      	mov	sp, r7
 80053c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80053ca:	4770      	bx	lr
 80053cc:	00d8acbf 	.word	0x00d8acbf
 80053d0:	00e4e1c0 	.word	0x00e4e1c0
 80053d4:	00f42400 	.word	0x00f42400
 80053d8:	01067380 	.word	0x01067380
 80053dc:	011a499f 	.word	0x011a499f
 80053e0:	01312cff 	.word	0x01312cff
 80053e4:	014ca43f 	.word	0x014ca43f
 80053e8:	016e3600 	.word	0x016e3600
 80053ec:	01a6ab1f 	.word	0x01a6ab1f
 80053f0:	01e84800 	.word	0x01e84800

080053f4 <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 80053f4:	b480      	push	{r7}
 80053f6:	b083      	sub	sp, #12
 80053f8:	af00      	add	r7, sp, #0
 80053fa:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG |= USB_OTG_GAHBCFG_GINT;
 80053fc:	687b      	ldr	r3, [r7, #4]
 80053fe:	689b      	ldr	r3, [r3, #8]
 8005400:	f043 0201 	orr.w	r2, r3, #1
 8005404:	687b      	ldr	r3, [r7, #4]
 8005406:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8005408:	2300      	movs	r3, #0
}
 800540a:	4618      	mov	r0, r3
 800540c:	370c      	adds	r7, #12
 800540e:	46bd      	mov	sp, r7
 8005410:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005414:	4770      	bx	lr

08005416 <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8005416:	b480      	push	{r7}
 8005418:	b083      	sub	sp, #12
 800541a:	af00      	add	r7, sp, #0
 800541c:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 800541e:	687b      	ldr	r3, [r7, #4]
 8005420:	689b      	ldr	r3, [r3, #8]
 8005422:	f023 0201 	bic.w	r2, r3, #1
 8005426:	687b      	ldr	r3, [r7, #4]
 8005428:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 800542a:	2300      	movs	r3, #0
}
 800542c:	4618      	mov	r0, r3
 800542e:	370c      	adds	r7, #12
 8005430:	46bd      	mov	sp, r7
 8005432:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005436:	4770      	bx	lr

08005438 <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 8005438:	b580      	push	{r7, lr}
 800543a:	b084      	sub	sp, #16
 800543c:	af00      	add	r7, sp, #0
 800543e:	6078      	str	r0, [r7, #4]
 8005440:	460b      	mov	r3, r1
 8005442:	70fb      	strb	r3, [r7, #3]
  uint32_t ms = 0U;
 8005444:	2300      	movs	r3, #0
 8005446:	60fb      	str	r3, [r7, #12]

  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 8005448:	687b      	ldr	r3, [r7, #4]
 800544a:	68db      	ldr	r3, [r3, #12]
 800544c:	f023 42c0 	bic.w	r2, r3, #1610612736	; 0x60000000
 8005450:	687b      	ldr	r3, [r7, #4]
 8005452:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 8005454:	78fb      	ldrb	r3, [r7, #3]
 8005456:	2b01      	cmp	r3, #1
 8005458:	d115      	bne.n	8005486 <USB_SetCurrentMode+0x4e>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 800545a:	687b      	ldr	r3, [r7, #4]
 800545c:	68db      	ldr	r3, [r3, #12]
 800545e:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 8005462:	687b      	ldr	r3, [r7, #4]
 8005464:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 8005466:	2001      	movs	r0, #1
 8005468:	f7fb fc3c 	bl	8000ce4 <HAL_Delay>
      ms++;
 800546c:	68fb      	ldr	r3, [r7, #12]
 800546e:	3301      	adds	r3, #1
 8005470:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_HOST_MODE) && (ms < 50U));
 8005472:	6878      	ldr	r0, [r7, #4]
 8005474:	f001 fa4b 	bl	800690e <USB_GetMode>
 8005478:	4603      	mov	r3, r0
 800547a:	2b01      	cmp	r3, #1
 800547c:	d01e      	beq.n	80054bc <USB_SetCurrentMode+0x84>
 800547e:	68fb      	ldr	r3, [r7, #12]
 8005480:	2b31      	cmp	r3, #49	; 0x31
 8005482:	d9f0      	bls.n	8005466 <USB_SetCurrentMode+0x2e>
 8005484:	e01a      	b.n	80054bc <USB_SetCurrentMode+0x84>
  }
  else if (mode == USB_DEVICE_MODE)
 8005486:	78fb      	ldrb	r3, [r7, #3]
 8005488:	2b00      	cmp	r3, #0
 800548a:	d115      	bne.n	80054b8 <USB_SetCurrentMode+0x80>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 800548c:	687b      	ldr	r3, [r7, #4]
 800548e:	68db      	ldr	r3, [r3, #12]
 8005490:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 8005494:	687b      	ldr	r3, [r7, #4]
 8005496:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 8005498:	2001      	movs	r0, #1
 800549a:	f7fb fc23 	bl	8000ce4 <HAL_Delay>
      ms++;
 800549e:	68fb      	ldr	r3, [r7, #12]
 80054a0:	3301      	adds	r3, #1
 80054a2:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_DEVICE_MODE) && (ms < 50U));
 80054a4:	6878      	ldr	r0, [r7, #4]
 80054a6:	f001 fa32 	bl	800690e <USB_GetMode>
 80054aa:	4603      	mov	r3, r0
 80054ac:	2b00      	cmp	r3, #0
 80054ae:	d005      	beq.n	80054bc <USB_SetCurrentMode+0x84>
 80054b0:	68fb      	ldr	r3, [r7, #12]
 80054b2:	2b31      	cmp	r3, #49	; 0x31
 80054b4:	d9f0      	bls.n	8005498 <USB_SetCurrentMode+0x60>
 80054b6:	e001      	b.n	80054bc <USB_SetCurrentMode+0x84>
  }
  else
  {
    return HAL_ERROR;
 80054b8:	2301      	movs	r3, #1
 80054ba:	e005      	b.n	80054c8 <USB_SetCurrentMode+0x90>
  }

  if (ms == 50U)
 80054bc:	68fb      	ldr	r3, [r7, #12]
 80054be:	2b32      	cmp	r3, #50	; 0x32
 80054c0:	d101      	bne.n	80054c6 <USB_SetCurrentMode+0x8e>
  {
    return HAL_ERROR;
 80054c2:	2301      	movs	r3, #1
 80054c4:	e000      	b.n	80054c8 <USB_SetCurrentMode+0x90>
  }

  return HAL_OK;
 80054c6:	2300      	movs	r3, #0
}
 80054c8:	4618      	mov	r0, r3
 80054ca:	3710      	adds	r7, #16
 80054cc:	46bd      	mov	sp, r7
 80054ce:	bd80      	pop	{r7, pc}

080054d0 <USB_DevInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 80054d0:	b084      	sub	sp, #16
 80054d2:	b580      	push	{r7, lr}
 80054d4:	b086      	sub	sp, #24
 80054d6:	af00      	add	r7, sp, #0
 80054d8:	6078      	str	r0, [r7, #4]
 80054da:	f107 0024 	add.w	r0, r7, #36	; 0x24
 80054de:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 80054e2:	2300      	movs	r3, #0
 80054e4:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80054e6:	687b      	ldr	r3, [r7, #4]
 80054e8:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  for (i = 0U; i < 15U; i++)
 80054ea:	2300      	movs	r3, #0
 80054ec:	613b      	str	r3, [r7, #16]
 80054ee:	e009      	b.n	8005504 <USB_DevInit+0x34>
  {
    USBx->DIEPTXF[i] = 0U;
 80054f0:	687a      	ldr	r2, [r7, #4]
 80054f2:	693b      	ldr	r3, [r7, #16]
 80054f4:	3340      	adds	r3, #64	; 0x40
 80054f6:	009b      	lsls	r3, r3, #2
 80054f8:	4413      	add	r3, r2
 80054fa:	2200      	movs	r2, #0
 80054fc:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < 15U; i++)
 80054fe:	693b      	ldr	r3, [r7, #16]
 8005500:	3301      	adds	r3, #1
 8005502:	613b      	str	r3, [r7, #16]
 8005504:	693b      	ldr	r3, [r7, #16]
 8005506:	2b0e      	cmp	r3, #14
 8005508:	d9f2      	bls.n	80054f0 <USB_DevInit+0x20>
  }

  /* VBUS Sensing setup */
  if (cfg.vbus_sensing_enable == 0U)
 800550a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800550c:	2b00      	cmp	r3, #0
 800550e:	d11c      	bne.n	800554a <USB_DevInit+0x7a>
  {
    USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 8005510:	68fb      	ldr	r3, [r7, #12]
 8005512:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005516:	685b      	ldr	r3, [r3, #4]
 8005518:	68fa      	ldr	r2, [r7, #12]
 800551a:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800551e:	f043 0302 	orr.w	r3, r3, #2
 8005522:	6053      	str	r3, [r2, #4]

    /* Deactivate VBUS Sensing B */
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBDEN;
 8005524:	687b      	ldr	r3, [r7, #4]
 8005526:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005528:	f423 1200 	bic.w	r2, r3, #2097152	; 0x200000
 800552c:	687b      	ldr	r3, [r7, #4]
 800552e:	639a      	str	r2, [r3, #56]	; 0x38

    /* B-peripheral session valid override enable */
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOEN;
 8005530:	687b      	ldr	r3, [r7, #4]
 8005532:	681b      	ldr	r3, [r3, #0]
 8005534:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8005538:	687b      	ldr	r3, [r7, #4]
 800553a:	601a      	str	r2, [r3, #0]
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOVAL;
 800553c:	687b      	ldr	r3, [r7, #4]
 800553e:	681b      	ldr	r3, [r3, #0]
 8005540:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 8005544:	687b      	ldr	r3, [r7, #4]
 8005546:	601a      	str	r2, [r3, #0]
 8005548:	e005      	b.n	8005556 <USB_DevInit+0x86>
  }
  else
  {
    /* Enable HW VBUS sensing */
    USBx->GCCFG |= USB_OTG_GCCFG_VBDEN;
 800554a:	687b      	ldr	r3, [r7, #4]
 800554c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800554e:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 8005552:	687b      	ldr	r3, [r7, #4]
 8005554:	639a      	str	r2, [r3, #56]	; 0x38
  }

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 8005556:	68fb      	ldr	r3, [r7, #12]
 8005558:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 800555c:	461a      	mov	r2, r3
 800555e:	2300      	movs	r3, #0
 8005560:	6013      	str	r3, [r2, #0]

  /* Device mode configuration */
  USBx_DEVICE->DCFG |= DCFG_FRAME_INTERVAL_80;
 8005562:	68fb      	ldr	r3, [r7, #12]
 8005564:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005568:	4619      	mov	r1, r3
 800556a:	68fb      	ldr	r3, [r7, #12]
 800556c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005570:	461a      	mov	r2, r3
 8005572:	680b      	ldr	r3, [r1, #0]
 8005574:	6013      	str	r3, [r2, #0]

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 8005576:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005578:	2b01      	cmp	r3, #1
 800557a:	d10c      	bne.n	8005596 <USB_DevInit+0xc6>
  {
    if (cfg.speed == USBD_HS_SPEED)
 800557c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800557e:	2b00      	cmp	r3, #0
 8005580:	d104      	bne.n	800558c <USB_DevInit+0xbc>
    {
      /* Set Core speed to High speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH);
 8005582:	2100      	movs	r1, #0
 8005584:	6878      	ldr	r0, [r7, #4]
 8005586:	f000 f965 	bl	8005854 <USB_SetDevSpeed>
 800558a:	e008      	b.n	800559e <USB_DevInit+0xce>
    }
    else
    {
      /* Set Core speed to Full speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH_IN_FULL);
 800558c:	2101      	movs	r1, #1
 800558e:	6878      	ldr	r0, [r7, #4]
 8005590:	f000 f960 	bl	8005854 <USB_SetDevSpeed>
 8005594:	e003      	b.n	800559e <USB_DevInit+0xce>
    }
  }
  else
  {
    /* Set Core speed to Full speed mode */
    (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_FULL);
 8005596:	2103      	movs	r1, #3
 8005598:	6878      	ldr	r0, [r7, #4]
 800559a:	f000 f95b 	bl	8005854 <USB_SetDevSpeed>
  }

  /* Flush the FIFOs */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 800559e:	2110      	movs	r1, #16
 80055a0:	6878      	ldr	r0, [r7, #4]
 80055a2:	f000 f8f3 	bl	800578c <USB_FlushTxFifo>
 80055a6:	4603      	mov	r3, r0
 80055a8:	2b00      	cmp	r3, #0
 80055aa:	d001      	beq.n	80055b0 <USB_DevInit+0xe0>
  {
    ret = HAL_ERROR;
 80055ac:	2301      	movs	r3, #1
 80055ae:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 80055b0:	6878      	ldr	r0, [r7, #4]
 80055b2:	f000 f91f 	bl	80057f4 <USB_FlushRxFifo>
 80055b6:	4603      	mov	r3, r0
 80055b8:	2b00      	cmp	r3, #0
 80055ba:	d001      	beq.n	80055c0 <USB_DevInit+0xf0>
  {
    ret = HAL_ERROR;
 80055bc:	2301      	movs	r3, #1
 80055be:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending Device Interrupts */
  USBx_DEVICE->DIEPMSK = 0U;
 80055c0:	68fb      	ldr	r3, [r7, #12]
 80055c2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80055c6:	461a      	mov	r2, r3
 80055c8:	2300      	movs	r3, #0
 80055ca:	6113      	str	r3, [r2, #16]
  USBx_DEVICE->DOEPMSK = 0U;
 80055cc:	68fb      	ldr	r3, [r7, #12]
 80055ce:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80055d2:	461a      	mov	r2, r3
 80055d4:	2300      	movs	r3, #0
 80055d6:	6153      	str	r3, [r2, #20]
  USBx_DEVICE->DAINTMSK = 0U;
 80055d8:	68fb      	ldr	r3, [r7, #12]
 80055da:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80055de:	461a      	mov	r2, r3
 80055e0:	2300      	movs	r3, #0
 80055e2:	61d3      	str	r3, [r2, #28]

  for (i = 0U; i < cfg.dev_endpoints; i++)
 80055e4:	2300      	movs	r3, #0
 80055e6:	613b      	str	r3, [r7, #16]
 80055e8:	e043      	b.n	8005672 <USB_DevInit+0x1a2>
  {
    if ((USBx_INEP(i)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 80055ea:	693b      	ldr	r3, [r7, #16]
 80055ec:	015a      	lsls	r2, r3, #5
 80055ee:	68fb      	ldr	r3, [r7, #12]
 80055f0:	4413      	add	r3, r2
 80055f2:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80055f6:	681b      	ldr	r3, [r3, #0]
 80055f8:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 80055fc:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8005600:	d118      	bne.n	8005634 <USB_DevInit+0x164>
    {
      if (i == 0U)
 8005602:	693b      	ldr	r3, [r7, #16]
 8005604:	2b00      	cmp	r3, #0
 8005606:	d10a      	bne.n	800561e <USB_DevInit+0x14e>
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_SNAK;
 8005608:	693b      	ldr	r3, [r7, #16]
 800560a:	015a      	lsls	r2, r3, #5
 800560c:	68fb      	ldr	r3, [r7, #12]
 800560e:	4413      	add	r3, r2
 8005610:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005614:	461a      	mov	r2, r3
 8005616:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 800561a:	6013      	str	r3, [r2, #0]
 800561c:	e013      	b.n	8005646 <USB_DevInit+0x176>
      }
      else
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK;
 800561e:	693b      	ldr	r3, [r7, #16]
 8005620:	015a      	lsls	r2, r3, #5
 8005622:	68fb      	ldr	r3, [r7, #12]
 8005624:	4413      	add	r3, r2
 8005626:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800562a:	461a      	mov	r2, r3
 800562c:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8005630:	6013      	str	r3, [r2, #0]
 8005632:	e008      	b.n	8005646 <USB_DevInit+0x176>
      }
    }
    else
    {
      USBx_INEP(i)->DIEPCTL = 0U;
 8005634:	693b      	ldr	r3, [r7, #16]
 8005636:	015a      	lsls	r2, r3, #5
 8005638:	68fb      	ldr	r3, [r7, #12]
 800563a:	4413      	add	r3, r2
 800563c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005640:	461a      	mov	r2, r3
 8005642:	2300      	movs	r3, #0
 8005644:	6013      	str	r3, [r2, #0]
    }

    USBx_INEP(i)->DIEPTSIZ = 0U;
 8005646:	693b      	ldr	r3, [r7, #16]
 8005648:	015a      	lsls	r2, r3, #5
 800564a:	68fb      	ldr	r3, [r7, #12]
 800564c:	4413      	add	r3, r2
 800564e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005652:	461a      	mov	r2, r3
 8005654:	2300      	movs	r3, #0
 8005656:	6113      	str	r3, [r2, #16]
    USBx_INEP(i)->DIEPINT  = 0xFB7FU;
 8005658:	693b      	ldr	r3, [r7, #16]
 800565a:	015a      	lsls	r2, r3, #5
 800565c:	68fb      	ldr	r3, [r7, #12]
 800565e:	4413      	add	r3, r2
 8005660:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005664:	461a      	mov	r2, r3
 8005666:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 800566a:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 800566c:	693b      	ldr	r3, [r7, #16]
 800566e:	3301      	adds	r3, #1
 8005670:	613b      	str	r3, [r7, #16]
 8005672:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005674:	693a      	ldr	r2, [r7, #16]
 8005676:	429a      	cmp	r2, r3
 8005678:	d3b7      	bcc.n	80055ea <USB_DevInit+0x11a>
  }

  for (i = 0U; i < cfg.dev_endpoints; i++)
 800567a:	2300      	movs	r3, #0
 800567c:	613b      	str	r3, [r7, #16]
 800567e:	e043      	b.n	8005708 <USB_DevInit+0x238>
  {
    if ((USBx_OUTEP(i)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8005680:	693b      	ldr	r3, [r7, #16]
 8005682:	015a      	lsls	r2, r3, #5
 8005684:	68fb      	ldr	r3, [r7, #12]
 8005686:	4413      	add	r3, r2
 8005688:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800568c:	681b      	ldr	r3, [r3, #0]
 800568e:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8005692:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8005696:	d118      	bne.n	80056ca <USB_DevInit+0x1fa>
    {
      if (i == 0U)
 8005698:	693b      	ldr	r3, [r7, #16]
 800569a:	2b00      	cmp	r3, #0
 800569c:	d10a      	bne.n	80056b4 <USB_DevInit+0x1e4>
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_SNAK;
 800569e:	693b      	ldr	r3, [r7, #16]
 80056a0:	015a      	lsls	r2, r3, #5
 80056a2:	68fb      	ldr	r3, [r7, #12]
 80056a4:	4413      	add	r3, r2
 80056a6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80056aa:	461a      	mov	r2, r3
 80056ac:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 80056b0:	6013      	str	r3, [r2, #0]
 80056b2:	e013      	b.n	80056dc <USB_DevInit+0x20c>
      }
      else
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK;
 80056b4:	693b      	ldr	r3, [r7, #16]
 80056b6:	015a      	lsls	r2, r3, #5
 80056b8:	68fb      	ldr	r3, [r7, #12]
 80056ba:	4413      	add	r3, r2
 80056bc:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80056c0:	461a      	mov	r2, r3
 80056c2:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 80056c6:	6013      	str	r3, [r2, #0]
 80056c8:	e008      	b.n	80056dc <USB_DevInit+0x20c>
      }
    }
    else
    {
      USBx_OUTEP(i)->DOEPCTL = 0U;
 80056ca:	693b      	ldr	r3, [r7, #16]
 80056cc:	015a      	lsls	r2, r3, #5
 80056ce:	68fb      	ldr	r3, [r7, #12]
 80056d0:	4413      	add	r3, r2
 80056d2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80056d6:	461a      	mov	r2, r3
 80056d8:	2300      	movs	r3, #0
 80056da:	6013      	str	r3, [r2, #0]
    }

    USBx_OUTEP(i)->DOEPTSIZ = 0U;
 80056dc:	693b      	ldr	r3, [r7, #16]
 80056de:	015a      	lsls	r2, r3, #5
 80056e0:	68fb      	ldr	r3, [r7, #12]
 80056e2:	4413      	add	r3, r2
 80056e4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80056e8:	461a      	mov	r2, r3
 80056ea:	2300      	movs	r3, #0
 80056ec:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(i)->DOEPINT  = 0xFB7FU;
 80056ee:	693b      	ldr	r3, [r7, #16]
 80056f0:	015a      	lsls	r2, r3, #5
 80056f2:	68fb      	ldr	r3, [r7, #12]
 80056f4:	4413      	add	r3, r2
 80056f6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80056fa:	461a      	mov	r2, r3
 80056fc:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8005700:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8005702:	693b      	ldr	r3, [r7, #16]
 8005704:	3301      	adds	r3, #1
 8005706:	613b      	str	r3, [r7, #16]
 8005708:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800570a:	693a      	ldr	r2, [r7, #16]
 800570c:	429a      	cmp	r2, r3
 800570e:	d3b7      	bcc.n	8005680 <USB_DevInit+0x1b0>
  }

  USBx_DEVICE->DIEPMSK &= ~(USB_OTG_DIEPMSK_TXFURM);
 8005710:	68fb      	ldr	r3, [r7, #12]
 8005712:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005716:	691b      	ldr	r3, [r3, #16]
 8005718:	68fa      	ldr	r2, [r7, #12]
 800571a:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800571e:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8005722:	6113      	str	r3, [r2, #16]

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 8005724:	687b      	ldr	r3, [r7, #4]
 8005726:	2200      	movs	r2, #0
 8005728:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xBFFFFFFFU;
 800572a:	687b      	ldr	r3, [r7, #4]
 800572c:	f06f 4280 	mvn.w	r2, #1073741824	; 0x40000000
 8005730:	615a      	str	r2, [r3, #20]

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 8005732:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005734:	2b00      	cmp	r3, #0
 8005736:	d105      	bne.n	8005744 <USB_DevInit+0x274>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 8005738:	687b      	ldr	r3, [r7, #4]
 800573a:	699b      	ldr	r3, [r3, #24]
 800573c:	f043 0210 	orr.w	r2, r3, #16
 8005740:	687b      	ldr	r3, [r7, #4]
 8005742:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Device mode ONLY */
  USBx->GINTMSK |= USB_OTG_GINTMSK_USBSUSPM | USB_OTG_GINTMSK_USBRST |
 8005744:	687b      	ldr	r3, [r7, #4]
 8005746:	699a      	ldr	r2, [r3, #24]
 8005748:	4b0e      	ldr	r3, [pc, #56]	; (8005784 <USB_DevInit+0x2b4>)
 800574a:	4313      	orrs	r3, r2
 800574c:	687a      	ldr	r2, [r7, #4]
 800574e:	6193      	str	r3, [r2, #24]
                   USB_OTG_GINTMSK_ENUMDNEM | USB_OTG_GINTMSK_IEPINT |
                   USB_OTG_GINTMSK_OEPINT   | USB_OTG_GINTMSK_IISOIXFRM |
                   USB_OTG_GINTMSK_PXFRM_IISOOXFRM | USB_OTG_GINTMSK_WUIM;

  if (cfg.Sof_enable != 0U)
 8005750:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005752:	2b00      	cmp	r3, #0
 8005754:	d005      	beq.n	8005762 <USB_DevInit+0x292>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_SOFM;
 8005756:	687b      	ldr	r3, [r7, #4]
 8005758:	699b      	ldr	r3, [r3, #24]
 800575a:	f043 0208 	orr.w	r2, r3, #8
 800575e:	687b      	ldr	r3, [r7, #4]
 8005760:	619a      	str	r2, [r3, #24]
  }

  if (cfg.vbus_sensing_enable == 1U)
 8005762:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8005764:	2b01      	cmp	r3, #1
 8005766:	d105      	bne.n	8005774 <USB_DevInit+0x2a4>
  {
    USBx->GINTMSK |= (USB_OTG_GINTMSK_SRQIM | USB_OTG_GINTMSK_OTGINT);
 8005768:	687b      	ldr	r3, [r7, #4]
 800576a:	699a      	ldr	r2, [r3, #24]
 800576c:	4b06      	ldr	r3, [pc, #24]	; (8005788 <USB_DevInit+0x2b8>)
 800576e:	4313      	orrs	r3, r2
 8005770:	687a      	ldr	r2, [r7, #4]
 8005772:	6193      	str	r3, [r2, #24]
  }

  return ret;
 8005774:	7dfb      	ldrb	r3, [r7, #23]
}
 8005776:	4618      	mov	r0, r3
 8005778:	3718      	adds	r7, #24
 800577a:	46bd      	mov	sp, r7
 800577c:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8005780:	b004      	add	sp, #16
 8005782:	4770      	bx	lr
 8005784:	803c3800 	.word	0x803c3800
 8005788:	40000004 	.word	0x40000004

0800578c <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 800578c:	b480      	push	{r7}
 800578e:	b085      	sub	sp, #20
 8005790:	af00      	add	r7, sp, #0
 8005792:	6078      	str	r0, [r7, #4]
 8005794:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 8005796:	2300      	movs	r3, #0
 8005798:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 800579a:	68fb      	ldr	r3, [r7, #12]
 800579c:	3301      	adds	r3, #1
 800579e:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 80057a0:	68fb      	ldr	r3, [r7, #12]
 80057a2:	4a13      	ldr	r2, [pc, #76]	; (80057f0 <USB_FlushTxFifo+0x64>)
 80057a4:	4293      	cmp	r3, r2
 80057a6:	d901      	bls.n	80057ac <USB_FlushTxFifo+0x20>
    {
      return HAL_TIMEOUT;
 80057a8:	2303      	movs	r3, #3
 80057aa:	e01b      	b.n	80057e4 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 80057ac:	687b      	ldr	r3, [r7, #4]
 80057ae:	691b      	ldr	r3, [r3, #16]
 80057b0:	2b00      	cmp	r3, #0
 80057b2:	daf2      	bge.n	800579a <USB_FlushTxFifo+0xe>

  /* Flush TX Fifo */
  count = 0U;
 80057b4:	2300      	movs	r3, #0
 80057b6:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 80057b8:	683b      	ldr	r3, [r7, #0]
 80057ba:	019b      	lsls	r3, r3, #6
 80057bc:	f043 0220 	orr.w	r2, r3, #32
 80057c0:	687b      	ldr	r3, [r7, #4]
 80057c2:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 80057c4:	68fb      	ldr	r3, [r7, #12]
 80057c6:	3301      	adds	r3, #1
 80057c8:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 80057ca:	68fb      	ldr	r3, [r7, #12]
 80057cc:	4a08      	ldr	r2, [pc, #32]	; (80057f0 <USB_FlushTxFifo+0x64>)
 80057ce:	4293      	cmp	r3, r2
 80057d0:	d901      	bls.n	80057d6 <USB_FlushTxFifo+0x4a>
    {
      return HAL_TIMEOUT;
 80057d2:	2303      	movs	r3, #3
 80057d4:	e006      	b.n	80057e4 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 80057d6:	687b      	ldr	r3, [r7, #4]
 80057d8:	691b      	ldr	r3, [r3, #16]
 80057da:	f003 0320 	and.w	r3, r3, #32
 80057de:	2b20      	cmp	r3, #32
 80057e0:	d0f0      	beq.n	80057c4 <USB_FlushTxFifo+0x38>

  return HAL_OK;
 80057e2:	2300      	movs	r3, #0
}
 80057e4:	4618      	mov	r0, r3
 80057e6:	3714      	adds	r7, #20
 80057e8:	46bd      	mov	sp, r7
 80057ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80057ee:	4770      	bx	lr
 80057f0:	00030d40 	.word	0x00030d40

080057f4 <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo  Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 80057f4:	b480      	push	{r7}
 80057f6:	b085      	sub	sp, #20
 80057f8:	af00      	add	r7, sp, #0
 80057fa:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 80057fc:	2300      	movs	r3, #0
 80057fe:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8005800:	68fb      	ldr	r3, [r7, #12]
 8005802:	3301      	adds	r3, #1
 8005804:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8005806:	68fb      	ldr	r3, [r7, #12]
 8005808:	4a11      	ldr	r2, [pc, #68]	; (8005850 <USB_FlushRxFifo+0x5c>)
 800580a:	4293      	cmp	r3, r2
 800580c:	d901      	bls.n	8005812 <USB_FlushRxFifo+0x1e>
    {
      return HAL_TIMEOUT;
 800580e:	2303      	movs	r3, #3
 8005810:	e018      	b.n	8005844 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8005812:	687b      	ldr	r3, [r7, #4]
 8005814:	691b      	ldr	r3, [r3, #16]
 8005816:	2b00      	cmp	r3, #0
 8005818:	daf2      	bge.n	8005800 <USB_FlushRxFifo+0xc>

  /* Flush RX Fifo */
  count = 0U;
 800581a:	2300      	movs	r3, #0
 800581c:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 800581e:	687b      	ldr	r3, [r7, #4]
 8005820:	2210      	movs	r2, #16
 8005822:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8005824:	68fb      	ldr	r3, [r7, #12]
 8005826:	3301      	adds	r3, #1
 8005828:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 800582a:	68fb      	ldr	r3, [r7, #12]
 800582c:	4a08      	ldr	r2, [pc, #32]	; (8005850 <USB_FlushRxFifo+0x5c>)
 800582e:	4293      	cmp	r3, r2
 8005830:	d901      	bls.n	8005836 <USB_FlushRxFifo+0x42>
    {
      return HAL_TIMEOUT;
 8005832:	2303      	movs	r3, #3
 8005834:	e006      	b.n	8005844 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 8005836:	687b      	ldr	r3, [r7, #4]
 8005838:	691b      	ldr	r3, [r3, #16]
 800583a:	f003 0310 	and.w	r3, r3, #16
 800583e:	2b10      	cmp	r3, #16
 8005840:	d0f0      	beq.n	8005824 <USB_FlushRxFifo+0x30>

  return HAL_OK;
 8005842:	2300      	movs	r3, #0
}
 8005844:	4618      	mov	r0, r3
 8005846:	3714      	adds	r7, #20
 8005848:	46bd      	mov	sp, r7
 800584a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800584e:	4770      	bx	lr
 8005850:	00030d40 	.word	0x00030d40

08005854 <USB_SetDevSpeed>:
  *            @arg USB_OTG_SPEED_HIGH_IN_FULL: High speed core in Full Speed mode
  *            @arg USB_OTG_SPEED_FULL: Full speed mode
  * @retval  Hal status
  */
HAL_StatusTypeDef USB_SetDevSpeed(USB_OTG_GlobalTypeDef *USBx, uint8_t speed)
{
 8005854:	b480      	push	{r7}
 8005856:	b085      	sub	sp, #20
 8005858:	af00      	add	r7, sp, #0
 800585a:	6078      	str	r0, [r7, #4]
 800585c:	460b      	mov	r3, r1
 800585e:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005860:	687b      	ldr	r3, [r7, #4]
 8005862:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG |= speed;
 8005864:	68fb      	ldr	r3, [r7, #12]
 8005866:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800586a:	681a      	ldr	r2, [r3, #0]
 800586c:	78fb      	ldrb	r3, [r7, #3]
 800586e:	68f9      	ldr	r1, [r7, #12]
 8005870:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8005874:	4313      	orrs	r3, r2
 8005876:	600b      	str	r3, [r1, #0]
  return HAL_OK;
 8005878:	2300      	movs	r3, #0
}
 800587a:	4618      	mov	r0, r3
 800587c:	3714      	adds	r7, #20
 800587e:	46bd      	mov	sp, r7
 8005880:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005884:	4770      	bx	lr

08005886 <USB_GetDevSpeed>:
  *          This parameter can be one of these values:
  *            @arg USBD_HS_SPEED: High speed mode
  *            @arg USBD_FS_SPEED: Full speed mode
  */
uint8_t USB_GetDevSpeed(USB_OTG_GlobalTypeDef *USBx)
{
 8005886:	b480      	push	{r7}
 8005888:	b087      	sub	sp, #28
 800588a:	af00      	add	r7, sp, #0
 800588c:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800588e:	687b      	ldr	r3, [r7, #4]
 8005890:	613b      	str	r3, [r7, #16]
  uint8_t speed;
  uint32_t DevEnumSpeed = USBx_DEVICE->DSTS & USB_OTG_DSTS_ENUMSPD;
 8005892:	693b      	ldr	r3, [r7, #16]
 8005894:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005898:	689b      	ldr	r3, [r3, #8]
 800589a:	f003 0306 	and.w	r3, r3, #6
 800589e:	60fb      	str	r3, [r7, #12]

  if (DevEnumSpeed == DSTS_ENUMSPD_HS_PHY_30MHZ_OR_60MHZ)
 80058a0:	68fb      	ldr	r3, [r7, #12]
 80058a2:	2b00      	cmp	r3, #0
 80058a4:	d102      	bne.n	80058ac <USB_GetDevSpeed+0x26>
  {
    speed = USBD_HS_SPEED;
 80058a6:	2300      	movs	r3, #0
 80058a8:	75fb      	strb	r3, [r7, #23]
 80058aa:	e00a      	b.n	80058c2 <USB_GetDevSpeed+0x3c>
  }
  else if ((DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_30MHZ_OR_60MHZ) ||
 80058ac:	68fb      	ldr	r3, [r7, #12]
 80058ae:	2b02      	cmp	r3, #2
 80058b0:	d002      	beq.n	80058b8 <USB_GetDevSpeed+0x32>
 80058b2:	68fb      	ldr	r3, [r7, #12]
 80058b4:	2b06      	cmp	r3, #6
 80058b6:	d102      	bne.n	80058be <USB_GetDevSpeed+0x38>
           (DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_48MHZ))
  {
    speed = USBD_FS_SPEED;
 80058b8:	2302      	movs	r3, #2
 80058ba:	75fb      	strb	r3, [r7, #23]
 80058bc:	e001      	b.n	80058c2 <USB_GetDevSpeed+0x3c>
  }
  else
  {
    speed = 0xFU;
 80058be:	230f      	movs	r3, #15
 80058c0:	75fb      	strb	r3, [r7, #23]
  }

  return speed;
 80058c2:	7dfb      	ldrb	r3, [r7, #23]
}
 80058c4:	4618      	mov	r0, r3
 80058c6:	371c      	adds	r7, #28
 80058c8:	46bd      	mov	sp, r7
 80058ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80058ce:	4770      	bx	lr

080058d0 <USB_ActivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateEndpoint(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 80058d0:	b480      	push	{r7}
 80058d2:	b085      	sub	sp, #20
 80058d4:	af00      	add	r7, sp, #0
 80058d6:	6078      	str	r0, [r7, #4]
 80058d8:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80058da:	687b      	ldr	r3, [r7, #4]
 80058dc:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 80058de:	683b      	ldr	r3, [r7, #0]
 80058e0:	781b      	ldrb	r3, [r3, #0]
 80058e2:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 80058e4:	683b      	ldr	r3, [r7, #0]
 80058e6:	785b      	ldrb	r3, [r3, #1]
 80058e8:	2b01      	cmp	r3, #1
 80058ea:	d139      	bne.n	8005960 <USB_ActivateEndpoint+0x90>
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK));
 80058ec:	68fb      	ldr	r3, [r7, #12]
 80058ee:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80058f2:	69da      	ldr	r2, [r3, #28]
 80058f4:	683b      	ldr	r3, [r7, #0]
 80058f6:	781b      	ldrb	r3, [r3, #0]
 80058f8:	f003 030f 	and.w	r3, r3, #15
 80058fc:	2101      	movs	r1, #1
 80058fe:	fa01 f303 	lsl.w	r3, r1, r3
 8005902:	b29b      	uxth	r3, r3
 8005904:	68f9      	ldr	r1, [r7, #12]
 8005906:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800590a:	4313      	orrs	r3, r2
 800590c:	61cb      	str	r3, [r1, #28]

    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_USBAEP) == 0U)
 800590e:	68bb      	ldr	r3, [r7, #8]
 8005910:	015a      	lsls	r2, r3, #5
 8005912:	68fb      	ldr	r3, [r7, #12]
 8005914:	4413      	add	r3, r2
 8005916:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800591a:	681b      	ldr	r3, [r3, #0]
 800591c:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8005920:	2b00      	cmp	r3, #0
 8005922:	d153      	bne.n	80059cc <USB_ActivateEndpoint+0xfc>
    {
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 8005924:	68bb      	ldr	r3, [r7, #8]
 8005926:	015a      	lsls	r2, r3, #5
 8005928:	68fb      	ldr	r3, [r7, #12]
 800592a:	4413      	add	r3, r2
 800592c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005930:	681a      	ldr	r2, [r3, #0]
 8005932:	683b      	ldr	r3, [r7, #0]
 8005934:	68db      	ldr	r3, [r3, #12]
 8005936:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 800593a:	683b      	ldr	r3, [r7, #0]
 800593c:	791b      	ldrb	r3, [r3, #4]
 800593e:	049b      	lsls	r3, r3, #18
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 8005940:	4319      	orrs	r1, r3
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 8005942:	68bb      	ldr	r3, [r7, #8]
 8005944:	059b      	lsls	r3, r3, #22
 8005946:	430b      	orrs	r3, r1
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 8005948:	431a      	orrs	r2, r3
 800594a:	68bb      	ldr	r3, [r7, #8]
 800594c:	0159      	lsls	r1, r3, #5
 800594e:	68fb      	ldr	r3, [r7, #12]
 8005950:	440b      	add	r3, r1
 8005952:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005956:	4619      	mov	r1, r3
 8005958:	4b20      	ldr	r3, [pc, #128]	; (80059dc <USB_ActivateEndpoint+0x10c>)
 800595a:	4313      	orrs	r3, r2
 800595c:	600b      	str	r3, [r1, #0]
 800595e:	e035      	b.n	80059cc <USB_ActivateEndpoint+0xfc>
                                   USB_OTG_DIEPCTL_USBAEP;
    }
  }
  else
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16);
 8005960:	68fb      	ldr	r3, [r7, #12]
 8005962:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005966:	69da      	ldr	r2, [r3, #28]
 8005968:	683b      	ldr	r3, [r7, #0]
 800596a:	781b      	ldrb	r3, [r3, #0]
 800596c:	f003 030f 	and.w	r3, r3, #15
 8005970:	2101      	movs	r1, #1
 8005972:	fa01 f303 	lsl.w	r3, r1, r3
 8005976:	041b      	lsls	r3, r3, #16
 8005978:	68f9      	ldr	r1, [r7, #12]
 800597a:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800597e:	4313      	orrs	r3, r2
 8005980:	61cb      	str	r3, [r1, #28]

    if (((USBx_OUTEP(epnum)->DOEPCTL) & USB_OTG_DOEPCTL_USBAEP) == 0U)
 8005982:	68bb      	ldr	r3, [r7, #8]
 8005984:	015a      	lsls	r2, r3, #5
 8005986:	68fb      	ldr	r3, [r7, #12]
 8005988:	4413      	add	r3, r2
 800598a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800598e:	681b      	ldr	r3, [r3, #0]
 8005990:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8005994:	2b00      	cmp	r3, #0
 8005996:	d119      	bne.n	80059cc <USB_ActivateEndpoint+0xfc>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 8005998:	68bb      	ldr	r3, [r7, #8]
 800599a:	015a      	lsls	r2, r3, #5
 800599c:	68fb      	ldr	r3, [r7, #12]
 800599e:	4413      	add	r3, r2
 80059a0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80059a4:	681a      	ldr	r2, [r3, #0]
 80059a6:	683b      	ldr	r3, [r7, #0]
 80059a8:	68db      	ldr	r3, [r3, #12]
 80059aa:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                    ((uint32_t)ep->type << 18) |
 80059ae:	683b      	ldr	r3, [r7, #0]
 80059b0:	791b      	ldrb	r3, [r3, #4]
 80059b2:	049b      	lsls	r3, r3, #18
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 80059b4:	430b      	orrs	r3, r1
 80059b6:	431a      	orrs	r2, r3
 80059b8:	68bb      	ldr	r3, [r7, #8]
 80059ba:	0159      	lsls	r1, r3, #5
 80059bc:	68fb      	ldr	r3, [r7, #12]
 80059be:	440b      	add	r3, r1
 80059c0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80059c4:	4619      	mov	r1, r3
 80059c6:	4b05      	ldr	r3, [pc, #20]	; (80059dc <USB_ActivateEndpoint+0x10c>)
 80059c8:	4313      	orrs	r3, r2
 80059ca:	600b      	str	r3, [r1, #0]
                                    USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_USBAEP;
    }
  }
  return HAL_OK;
 80059cc:	2300      	movs	r3, #0
}
 80059ce:	4618      	mov	r0, r3
 80059d0:	3714      	adds	r7, #20
 80059d2:	46bd      	mov	sp, r7
 80059d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80059d8:	4770      	bx	lr
 80059da:	bf00      	nop
 80059dc:	10008000 	.word	0x10008000

080059e0 <USB_DeactivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DeactivateEndpoint(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 80059e0:	b480      	push	{r7}
 80059e2:	b085      	sub	sp, #20
 80059e4:	af00      	add	r7, sp, #0
 80059e6:	6078      	str	r0, [r7, #4]
 80059e8:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80059ea:	687b      	ldr	r3, [r7, #4]
 80059ec:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 80059ee:	683b      	ldr	r3, [r7, #0]
 80059f0:	781b      	ldrb	r3, [r3, #0]
 80059f2:	60bb      	str	r3, [r7, #8]

  /* Read DEPCTLn register */
  if (ep->is_in == 1U)
 80059f4:	683b      	ldr	r3, [r7, #0]
 80059f6:	785b      	ldrb	r3, [r3, #1]
 80059f8:	2b01      	cmp	r3, #1
 80059fa:	d161      	bne.n	8005ac0 <USB_DeactivateEndpoint+0xe0>
  {
    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 80059fc:	68bb      	ldr	r3, [r7, #8]
 80059fe:	015a      	lsls	r2, r3, #5
 8005a00:	68fb      	ldr	r3, [r7, #12]
 8005a02:	4413      	add	r3, r2
 8005a04:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005a08:	681b      	ldr	r3, [r3, #0]
 8005a0a:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8005a0e:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8005a12:	d11f      	bne.n	8005a54 <USB_DeactivateEndpoint+0x74>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SNAK;
 8005a14:	68bb      	ldr	r3, [r7, #8]
 8005a16:	015a      	lsls	r2, r3, #5
 8005a18:	68fb      	ldr	r3, [r7, #12]
 8005a1a:	4413      	add	r3, r2
 8005a1c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005a20:	681b      	ldr	r3, [r3, #0]
 8005a22:	68ba      	ldr	r2, [r7, #8]
 8005a24:	0151      	lsls	r1, r2, #5
 8005a26:	68fa      	ldr	r2, [r7, #12]
 8005a28:	440a      	add	r2, r1
 8005a2a:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005a2e:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8005a32:	6013      	str	r3, [r2, #0]
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_EPDIS;
 8005a34:	68bb      	ldr	r3, [r7, #8]
 8005a36:	015a      	lsls	r2, r3, #5
 8005a38:	68fb      	ldr	r3, [r7, #12]
 8005a3a:	4413      	add	r3, r2
 8005a3c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005a40:	681b      	ldr	r3, [r3, #0]
 8005a42:	68ba      	ldr	r2, [r7, #8]
 8005a44:	0151      	lsls	r1, r2, #5
 8005a46:	68fa      	ldr	r2, [r7, #12]
 8005a48:	440a      	add	r2, r1
 8005a4a:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005a4e:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8005a52:	6013      	str	r3, [r2, #0]
    }

    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 8005a54:	68fb      	ldr	r3, [r7, #12]
 8005a56:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005a5a:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8005a5c:	683b      	ldr	r3, [r7, #0]
 8005a5e:	781b      	ldrb	r3, [r3, #0]
 8005a60:	f003 030f 	and.w	r3, r3, #15
 8005a64:	2101      	movs	r1, #1
 8005a66:	fa01 f303 	lsl.w	r3, r1, r3
 8005a6a:	b29b      	uxth	r3, r3
 8005a6c:	43db      	mvns	r3, r3
 8005a6e:	68f9      	ldr	r1, [r7, #12]
 8005a70:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8005a74:	4013      	ands	r3, r2
 8005a76:	63cb      	str	r3, [r1, #60]	; 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 8005a78:	68fb      	ldr	r3, [r7, #12]
 8005a7a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005a7e:	69da      	ldr	r2, [r3, #28]
 8005a80:	683b      	ldr	r3, [r7, #0]
 8005a82:	781b      	ldrb	r3, [r3, #0]
 8005a84:	f003 030f 	and.w	r3, r3, #15
 8005a88:	2101      	movs	r1, #1
 8005a8a:	fa01 f303 	lsl.w	r3, r1, r3
 8005a8e:	b29b      	uxth	r3, r3
 8005a90:	43db      	mvns	r3, r3
 8005a92:	68f9      	ldr	r1, [r7, #12]
 8005a94:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8005a98:	4013      	ands	r3, r2
 8005a9a:	61cb      	str	r3, [r1, #28]
    USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_USBAEP |
 8005a9c:	68bb      	ldr	r3, [r7, #8]
 8005a9e:	015a      	lsls	r2, r3, #5
 8005aa0:	68fb      	ldr	r3, [r7, #12]
 8005aa2:	4413      	add	r3, r2
 8005aa4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005aa8:	681a      	ldr	r2, [r3, #0]
 8005aaa:	68bb      	ldr	r3, [r7, #8]
 8005aac:	0159      	lsls	r1, r3, #5
 8005aae:	68fb      	ldr	r3, [r7, #12]
 8005ab0:	440b      	add	r3, r1
 8005ab2:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005ab6:	4619      	mov	r1, r3
 8005ab8:	4b35      	ldr	r3, [pc, #212]	; (8005b90 <USB_DeactivateEndpoint+0x1b0>)
 8005aba:	4013      	ands	r3, r2
 8005abc:	600b      	str	r3, [r1, #0]
 8005abe:	e060      	b.n	8005b82 <USB_DeactivateEndpoint+0x1a2>
                                   USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                   USB_OTG_DIEPCTL_EPTYP);
  }
  else
  {
    if ((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8005ac0:	68bb      	ldr	r3, [r7, #8]
 8005ac2:	015a      	lsls	r2, r3, #5
 8005ac4:	68fb      	ldr	r3, [r7, #12]
 8005ac6:	4413      	add	r3, r2
 8005ac8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005acc:	681b      	ldr	r3, [r3, #0]
 8005ace:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8005ad2:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8005ad6:	d11f      	bne.n	8005b18 <USB_DeactivateEndpoint+0x138>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 8005ad8:	68bb      	ldr	r3, [r7, #8]
 8005ada:	015a      	lsls	r2, r3, #5
 8005adc:	68fb      	ldr	r3, [r7, #12]
 8005ade:	4413      	add	r3, r2
 8005ae0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005ae4:	681b      	ldr	r3, [r3, #0]
 8005ae6:	68ba      	ldr	r2, [r7, #8]
 8005ae8:	0151      	lsls	r1, r2, #5
 8005aea:	68fa      	ldr	r2, [r7, #12]
 8005aec:	440a      	add	r2, r1
 8005aee:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8005af2:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8005af6:	6013      	str	r3, [r2, #0]
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_EPDIS;
 8005af8:	68bb      	ldr	r3, [r7, #8]
 8005afa:	015a      	lsls	r2, r3, #5
 8005afc:	68fb      	ldr	r3, [r7, #12]
 8005afe:	4413      	add	r3, r2
 8005b00:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005b04:	681b      	ldr	r3, [r3, #0]
 8005b06:	68ba      	ldr	r2, [r7, #8]
 8005b08:	0151      	lsls	r1, r2, #5
 8005b0a:	68fa      	ldr	r2, [r7, #12]
 8005b0c:	440a      	add	r2, r1
 8005b0e:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8005b12:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8005b16:	6013      	str	r3, [r2, #0]
    }

    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 8005b18:	68fb      	ldr	r3, [r7, #12]
 8005b1a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005b1e:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8005b20:	683b      	ldr	r3, [r7, #0]
 8005b22:	781b      	ldrb	r3, [r3, #0]
 8005b24:	f003 030f 	and.w	r3, r3, #15
 8005b28:	2101      	movs	r1, #1
 8005b2a:	fa01 f303 	lsl.w	r3, r1, r3
 8005b2e:	041b      	lsls	r3, r3, #16
 8005b30:	43db      	mvns	r3, r3
 8005b32:	68f9      	ldr	r1, [r7, #12]
 8005b34:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8005b38:	4013      	ands	r3, r2
 8005b3a:	63cb      	str	r3, [r1, #60]	; 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 8005b3c:	68fb      	ldr	r3, [r7, #12]
 8005b3e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005b42:	69da      	ldr	r2, [r3, #28]
 8005b44:	683b      	ldr	r3, [r7, #0]
 8005b46:	781b      	ldrb	r3, [r3, #0]
 8005b48:	f003 030f 	and.w	r3, r3, #15
 8005b4c:	2101      	movs	r1, #1
 8005b4e:	fa01 f303 	lsl.w	r3, r1, r3
 8005b52:	041b      	lsls	r3, r3, #16
 8005b54:	43db      	mvns	r3, r3
 8005b56:	68f9      	ldr	r1, [r7, #12]
 8005b58:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8005b5c:	4013      	ands	r3, r2
 8005b5e:	61cb      	str	r3, [r1, #28]
    USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_USBAEP |
 8005b60:	68bb      	ldr	r3, [r7, #8]
 8005b62:	015a      	lsls	r2, r3, #5
 8005b64:	68fb      	ldr	r3, [r7, #12]
 8005b66:	4413      	add	r3, r2
 8005b68:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005b6c:	681a      	ldr	r2, [r3, #0]
 8005b6e:	68bb      	ldr	r3, [r7, #8]
 8005b70:	0159      	lsls	r1, r3, #5
 8005b72:	68fb      	ldr	r3, [r7, #12]
 8005b74:	440b      	add	r3, r1
 8005b76:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005b7a:	4619      	mov	r1, r3
 8005b7c:	4b05      	ldr	r3, [pc, #20]	; (8005b94 <USB_DeactivateEndpoint+0x1b4>)
 8005b7e:	4013      	ands	r3, r2
 8005b80:	600b      	str	r3, [r1, #0]
                                    USB_OTG_DOEPCTL_MPSIZ |
                                    USB_OTG_DOEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_EPTYP);
  }

  return HAL_OK;
 8005b82:	2300      	movs	r3, #0
}
 8005b84:	4618      	mov	r0, r3
 8005b86:	3714      	adds	r7, #20
 8005b88:	46bd      	mov	sp, r7
 8005b8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b8e:	4770      	bx	lr
 8005b90:	ec337800 	.word	0xec337800
 8005b94:	eff37800 	.word	0xeff37800

08005b98 <USB_EPStartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPStartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep, uint8_t dma)
{
 8005b98:	b580      	push	{r7, lr}
 8005b9a:	b08a      	sub	sp, #40	; 0x28
 8005b9c:	af02      	add	r7, sp, #8
 8005b9e:	60f8      	str	r0, [r7, #12]
 8005ba0:	60b9      	str	r1, [r7, #8]
 8005ba2:	4613      	mov	r3, r2
 8005ba4:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005ba6:	68fb      	ldr	r3, [r7, #12]
 8005ba8:	61fb      	str	r3, [r7, #28]
  uint32_t epnum = (uint32_t)ep->num;
 8005baa:	68bb      	ldr	r3, [r7, #8]
 8005bac:	781b      	ldrb	r3, [r3, #0]
 8005bae:	61bb      	str	r3, [r7, #24]
  uint16_t pktcnt;

  /* IN endpoint */
  if (ep->is_in == 1U)
 8005bb0:	68bb      	ldr	r3, [r7, #8]
 8005bb2:	785b      	ldrb	r3, [r3, #1]
 8005bb4:	2b01      	cmp	r3, #1
 8005bb6:	f040 8163 	bne.w	8005e80 <USB_EPStartXfer+0x2e8>
  {
    /* Zero Length Packet? */
    if (ep->xfer_len == 0U)
 8005bba:	68bb      	ldr	r3, [r7, #8]
 8005bbc:	699b      	ldr	r3, [r3, #24]
 8005bbe:	2b00      	cmp	r3, #0
 8005bc0:	d132      	bne.n	8005c28 <USB_EPStartXfer+0x90>
    {
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 8005bc2:	69bb      	ldr	r3, [r7, #24]
 8005bc4:	015a      	lsls	r2, r3, #5
 8005bc6:	69fb      	ldr	r3, [r7, #28]
 8005bc8:	4413      	add	r3, r2
 8005bca:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005bce:	691a      	ldr	r2, [r3, #16]
 8005bd0:	69bb      	ldr	r3, [r7, #24]
 8005bd2:	0159      	lsls	r1, r3, #5
 8005bd4:	69fb      	ldr	r3, [r7, #28]
 8005bd6:	440b      	add	r3, r1
 8005bd8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005bdc:	4619      	mov	r1, r3
 8005bde:	4ba5      	ldr	r3, [pc, #660]	; (8005e74 <USB_EPStartXfer+0x2dc>)
 8005be0:	4013      	ands	r3, r2
 8005be2:	610b      	str	r3, [r1, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 8005be4:	69bb      	ldr	r3, [r7, #24]
 8005be6:	015a      	lsls	r2, r3, #5
 8005be8:	69fb      	ldr	r3, [r7, #28]
 8005bea:	4413      	add	r3, r2
 8005bec:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005bf0:	691b      	ldr	r3, [r3, #16]
 8005bf2:	69ba      	ldr	r2, [r7, #24]
 8005bf4:	0151      	lsls	r1, r2, #5
 8005bf6:	69fa      	ldr	r2, [r7, #28]
 8005bf8:	440a      	add	r2, r1
 8005bfa:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005bfe:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8005c02:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 8005c04:	69bb      	ldr	r3, [r7, #24]
 8005c06:	015a      	lsls	r2, r3, #5
 8005c08:	69fb      	ldr	r3, [r7, #28]
 8005c0a:	4413      	add	r3, r2
 8005c0c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005c10:	691a      	ldr	r2, [r3, #16]
 8005c12:	69bb      	ldr	r3, [r7, #24]
 8005c14:	0159      	lsls	r1, r3, #5
 8005c16:	69fb      	ldr	r3, [r7, #28]
 8005c18:	440b      	add	r3, r1
 8005c1a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005c1e:	4619      	mov	r1, r3
 8005c20:	4b95      	ldr	r3, [pc, #596]	; (8005e78 <USB_EPStartXfer+0x2e0>)
 8005c22:	4013      	ands	r3, r2
 8005c24:	610b      	str	r3, [r1, #16]
 8005c26:	e074      	b.n	8005d12 <USB_EPStartXfer+0x17a>
      /* Program the transfer size and packet count
      * as follows: xfersize = N * maxpacket +
      * short_packet pktcnt = N + (short_packet
      * exist ? 1 : 0)
      */
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 8005c28:	69bb      	ldr	r3, [r7, #24]
 8005c2a:	015a      	lsls	r2, r3, #5
 8005c2c:	69fb      	ldr	r3, [r7, #28]
 8005c2e:	4413      	add	r3, r2
 8005c30:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005c34:	691a      	ldr	r2, [r3, #16]
 8005c36:	69bb      	ldr	r3, [r7, #24]
 8005c38:	0159      	lsls	r1, r3, #5
 8005c3a:	69fb      	ldr	r3, [r7, #28]
 8005c3c:	440b      	add	r3, r1
 8005c3e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005c42:	4619      	mov	r1, r3
 8005c44:	4b8c      	ldr	r3, [pc, #560]	; (8005e78 <USB_EPStartXfer+0x2e0>)
 8005c46:	4013      	ands	r3, r2
 8005c48:	610b      	str	r3, [r1, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 8005c4a:	69bb      	ldr	r3, [r7, #24]
 8005c4c:	015a      	lsls	r2, r3, #5
 8005c4e:	69fb      	ldr	r3, [r7, #28]
 8005c50:	4413      	add	r3, r2
 8005c52:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005c56:	691a      	ldr	r2, [r3, #16]
 8005c58:	69bb      	ldr	r3, [r7, #24]
 8005c5a:	0159      	lsls	r1, r3, #5
 8005c5c:	69fb      	ldr	r3, [r7, #28]
 8005c5e:	440b      	add	r3, r1
 8005c60:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005c64:	4619      	mov	r1, r3
 8005c66:	4b83      	ldr	r3, [pc, #524]	; (8005e74 <USB_EPStartXfer+0x2dc>)
 8005c68:	4013      	ands	r3, r2
 8005c6a:	610b      	str	r3, [r1, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT &
 8005c6c:	69bb      	ldr	r3, [r7, #24]
 8005c6e:	015a      	lsls	r2, r3, #5
 8005c70:	69fb      	ldr	r3, [r7, #28]
 8005c72:	4413      	add	r3, r2
 8005c74:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005c78:	691a      	ldr	r2, [r3, #16]
                                     (((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket) << 19));
 8005c7a:	68bb      	ldr	r3, [r7, #8]
 8005c7c:	6999      	ldr	r1, [r3, #24]
 8005c7e:	68bb      	ldr	r3, [r7, #8]
 8005c80:	68db      	ldr	r3, [r3, #12]
 8005c82:	440b      	add	r3, r1
 8005c84:	1e59      	subs	r1, r3, #1
 8005c86:	68bb      	ldr	r3, [r7, #8]
 8005c88:	68db      	ldr	r3, [r3, #12]
 8005c8a:	fbb1 f3f3 	udiv	r3, r1, r3
 8005c8e:	04d9      	lsls	r1, r3, #19
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT &
 8005c90:	4b7a      	ldr	r3, [pc, #488]	; (8005e7c <USB_EPStartXfer+0x2e4>)
 8005c92:	400b      	ands	r3, r1
 8005c94:	69b9      	ldr	r1, [r7, #24]
 8005c96:	0148      	lsls	r0, r1, #5
 8005c98:	69f9      	ldr	r1, [r7, #28]
 8005c9a:	4401      	add	r1, r0
 8005c9c:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 8005ca0:	4313      	orrs	r3, r2
 8005ca2:	610b      	str	r3, [r1, #16]

      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_XFRSIZ & ep->xfer_len);
 8005ca4:	69bb      	ldr	r3, [r7, #24]
 8005ca6:	015a      	lsls	r2, r3, #5
 8005ca8:	69fb      	ldr	r3, [r7, #28]
 8005caa:	4413      	add	r3, r2
 8005cac:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005cb0:	691a      	ldr	r2, [r3, #16]
 8005cb2:	68bb      	ldr	r3, [r7, #8]
 8005cb4:	699b      	ldr	r3, [r3, #24]
 8005cb6:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8005cba:	69b9      	ldr	r1, [r7, #24]
 8005cbc:	0148      	lsls	r0, r1, #5
 8005cbe:	69f9      	ldr	r1, [r7, #28]
 8005cc0:	4401      	add	r1, r0
 8005cc2:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 8005cc6:	4313      	orrs	r3, r2
 8005cc8:	610b      	str	r3, [r1, #16]

      if (ep->type == EP_TYPE_ISOC)
 8005cca:	68bb      	ldr	r3, [r7, #8]
 8005ccc:	791b      	ldrb	r3, [r3, #4]
 8005cce:	2b01      	cmp	r3, #1
 8005cd0:	d11f      	bne.n	8005d12 <USB_EPStartXfer+0x17a>
      {
        USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_MULCNT);
 8005cd2:	69bb      	ldr	r3, [r7, #24]
 8005cd4:	015a      	lsls	r2, r3, #5
 8005cd6:	69fb      	ldr	r3, [r7, #28]
 8005cd8:	4413      	add	r3, r2
 8005cda:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005cde:	691b      	ldr	r3, [r3, #16]
 8005ce0:	69ba      	ldr	r2, [r7, #24]
 8005ce2:	0151      	lsls	r1, r2, #5
 8005ce4:	69fa      	ldr	r2, [r7, #28]
 8005ce6:	440a      	add	r2, r1
 8005ce8:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005cec:	f023 43c0 	bic.w	r3, r3, #1610612736	; 0x60000000
 8005cf0:	6113      	str	r3, [r2, #16]
        USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_MULCNT & (1U << 29));
 8005cf2:	69bb      	ldr	r3, [r7, #24]
 8005cf4:	015a      	lsls	r2, r3, #5
 8005cf6:	69fb      	ldr	r3, [r7, #28]
 8005cf8:	4413      	add	r3, r2
 8005cfa:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005cfe:	691b      	ldr	r3, [r3, #16]
 8005d00:	69ba      	ldr	r2, [r7, #24]
 8005d02:	0151      	lsls	r1, r2, #5
 8005d04:	69fa      	ldr	r2, [r7, #28]
 8005d06:	440a      	add	r2, r1
 8005d08:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005d0c:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8005d10:	6113      	str	r3, [r2, #16]
      }
    }

    if (dma == 1U)
 8005d12:	79fb      	ldrb	r3, [r7, #7]
 8005d14:	2b01      	cmp	r3, #1
 8005d16:	d14b      	bne.n	8005db0 <USB_EPStartXfer+0x218>
    {
      if ((uint32_t)ep->dma_addr != 0U)
 8005d18:	68bb      	ldr	r3, [r7, #8]
 8005d1a:	695b      	ldr	r3, [r3, #20]
 8005d1c:	2b00      	cmp	r3, #0
 8005d1e:	d009      	beq.n	8005d34 <USB_EPStartXfer+0x19c>
      {
        USBx_INEP(epnum)->DIEPDMA = (uint32_t)(ep->dma_addr);
 8005d20:	69bb      	ldr	r3, [r7, #24]
 8005d22:	015a      	lsls	r2, r3, #5
 8005d24:	69fb      	ldr	r3, [r7, #28]
 8005d26:	4413      	add	r3, r2
 8005d28:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005d2c:	461a      	mov	r2, r3
 8005d2e:	68bb      	ldr	r3, [r7, #8]
 8005d30:	695b      	ldr	r3, [r3, #20]
 8005d32:	6153      	str	r3, [r2, #20]
      }

      if (ep->type == EP_TYPE_ISOC)
 8005d34:	68bb      	ldr	r3, [r7, #8]
 8005d36:	791b      	ldrb	r3, [r3, #4]
 8005d38:	2b01      	cmp	r3, #1
 8005d3a:	d128      	bne.n	8005d8e <USB_EPStartXfer+0x1f6>
      {
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 8005d3c:	69fb      	ldr	r3, [r7, #28]
 8005d3e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005d42:	689b      	ldr	r3, [r3, #8]
 8005d44:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005d48:	2b00      	cmp	r3, #0
 8005d4a:	d110      	bne.n	8005d6e <USB_EPStartXfer+0x1d6>
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 8005d4c:	69bb      	ldr	r3, [r7, #24]
 8005d4e:	015a      	lsls	r2, r3, #5
 8005d50:	69fb      	ldr	r3, [r7, #28]
 8005d52:	4413      	add	r3, r2
 8005d54:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005d58:	681b      	ldr	r3, [r3, #0]
 8005d5a:	69ba      	ldr	r2, [r7, #24]
 8005d5c:	0151      	lsls	r1, r2, #5
 8005d5e:	69fa      	ldr	r2, [r7, #28]
 8005d60:	440a      	add	r2, r1
 8005d62:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005d66:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8005d6a:	6013      	str	r3, [r2, #0]
 8005d6c:	e00f      	b.n	8005d8e <USB_EPStartXfer+0x1f6>
        }
        else
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 8005d6e:	69bb      	ldr	r3, [r7, #24]
 8005d70:	015a      	lsls	r2, r3, #5
 8005d72:	69fb      	ldr	r3, [r7, #28]
 8005d74:	4413      	add	r3, r2
 8005d76:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005d7a:	681b      	ldr	r3, [r3, #0]
 8005d7c:	69ba      	ldr	r2, [r7, #24]
 8005d7e:	0151      	lsls	r1, r2, #5
 8005d80:	69fa      	ldr	r2, [r7, #28]
 8005d82:	440a      	add	r2, r1
 8005d84:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005d88:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8005d8c:	6013      	str	r3, [r2, #0]
        }
      }

      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 8005d8e:	69bb      	ldr	r3, [r7, #24]
 8005d90:	015a      	lsls	r2, r3, #5
 8005d92:	69fb      	ldr	r3, [r7, #28]
 8005d94:	4413      	add	r3, r2
 8005d96:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005d9a:	681b      	ldr	r3, [r3, #0]
 8005d9c:	69ba      	ldr	r2, [r7, #24]
 8005d9e:	0151      	lsls	r1, r2, #5
 8005da0:	69fa      	ldr	r2, [r7, #28]
 8005da2:	440a      	add	r2, r1
 8005da4:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005da8:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8005dac:	6013      	str	r3, [r2, #0]
 8005dae:	e137      	b.n	8006020 <USB_EPStartXfer+0x488>
    }
    else
    {
      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 8005db0:	69bb      	ldr	r3, [r7, #24]
 8005db2:	015a      	lsls	r2, r3, #5
 8005db4:	69fb      	ldr	r3, [r7, #28]
 8005db6:	4413      	add	r3, r2
 8005db8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005dbc:	681b      	ldr	r3, [r3, #0]
 8005dbe:	69ba      	ldr	r2, [r7, #24]
 8005dc0:	0151      	lsls	r1, r2, #5
 8005dc2:	69fa      	ldr	r2, [r7, #28]
 8005dc4:	440a      	add	r2, r1
 8005dc6:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005dca:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8005dce:	6013      	str	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 8005dd0:	68bb      	ldr	r3, [r7, #8]
 8005dd2:	791b      	ldrb	r3, [r3, #4]
 8005dd4:	2b01      	cmp	r3, #1
 8005dd6:	d015      	beq.n	8005e04 <USB_EPStartXfer+0x26c>
      {
        /* Enable the Tx FIFO Empty Interrupt for this EP */
        if (ep->xfer_len > 0U)
 8005dd8:	68bb      	ldr	r3, [r7, #8]
 8005dda:	699b      	ldr	r3, [r3, #24]
 8005ddc:	2b00      	cmp	r3, #0
 8005dde:	f000 811f 	beq.w	8006020 <USB_EPStartXfer+0x488>
        {
          USBx_DEVICE->DIEPEMPMSK |= 1UL << (ep->num & EP_ADDR_MSK);
 8005de2:	69fb      	ldr	r3, [r7, #28]
 8005de4:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005de8:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8005dea:	68bb      	ldr	r3, [r7, #8]
 8005dec:	781b      	ldrb	r3, [r3, #0]
 8005dee:	f003 030f 	and.w	r3, r3, #15
 8005df2:	2101      	movs	r1, #1
 8005df4:	fa01 f303 	lsl.w	r3, r1, r3
 8005df8:	69f9      	ldr	r1, [r7, #28]
 8005dfa:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8005dfe:	4313      	orrs	r3, r2
 8005e00:	634b      	str	r3, [r1, #52]	; 0x34
 8005e02:	e10d      	b.n	8006020 <USB_EPStartXfer+0x488>
        }
      }
      else
      {
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 8005e04:	69fb      	ldr	r3, [r7, #28]
 8005e06:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005e0a:	689b      	ldr	r3, [r3, #8]
 8005e0c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005e10:	2b00      	cmp	r3, #0
 8005e12:	d110      	bne.n	8005e36 <USB_EPStartXfer+0x29e>
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 8005e14:	69bb      	ldr	r3, [r7, #24]
 8005e16:	015a      	lsls	r2, r3, #5
 8005e18:	69fb      	ldr	r3, [r7, #28]
 8005e1a:	4413      	add	r3, r2
 8005e1c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005e20:	681b      	ldr	r3, [r3, #0]
 8005e22:	69ba      	ldr	r2, [r7, #24]
 8005e24:	0151      	lsls	r1, r2, #5
 8005e26:	69fa      	ldr	r2, [r7, #28]
 8005e28:	440a      	add	r2, r1
 8005e2a:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005e2e:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8005e32:	6013      	str	r3, [r2, #0]
 8005e34:	e00f      	b.n	8005e56 <USB_EPStartXfer+0x2be>
        }
        else
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 8005e36:	69bb      	ldr	r3, [r7, #24]
 8005e38:	015a      	lsls	r2, r3, #5
 8005e3a:	69fb      	ldr	r3, [r7, #28]
 8005e3c:	4413      	add	r3, r2
 8005e3e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005e42:	681b      	ldr	r3, [r3, #0]
 8005e44:	69ba      	ldr	r2, [r7, #24]
 8005e46:	0151      	lsls	r1, r2, #5
 8005e48:	69fa      	ldr	r2, [r7, #28]
 8005e4a:	440a      	add	r2, r1
 8005e4c:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005e50:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8005e54:	6013      	str	r3, [r2, #0]
        }

        (void)USB_WritePacket(USBx, ep->xfer_buff, ep->num, (uint16_t)ep->xfer_len, dma);
 8005e56:	68bb      	ldr	r3, [r7, #8]
 8005e58:	6919      	ldr	r1, [r3, #16]
 8005e5a:	68bb      	ldr	r3, [r7, #8]
 8005e5c:	781a      	ldrb	r2, [r3, #0]
 8005e5e:	68bb      	ldr	r3, [r7, #8]
 8005e60:	699b      	ldr	r3, [r3, #24]
 8005e62:	b298      	uxth	r0, r3
 8005e64:	79fb      	ldrb	r3, [r7, #7]
 8005e66:	9300      	str	r3, [sp, #0]
 8005e68:	4603      	mov	r3, r0
 8005e6a:	68f8      	ldr	r0, [r7, #12]
 8005e6c:	f000 faea 	bl	8006444 <USB_WritePacket>
 8005e70:	e0d6      	b.n	8006020 <USB_EPStartXfer+0x488>
 8005e72:	bf00      	nop
 8005e74:	e007ffff 	.word	0xe007ffff
 8005e78:	fff80000 	.word	0xfff80000
 8005e7c:	1ff80000 	.word	0x1ff80000
  {
    /* Program the transfer size and packet count as follows:
    * pktcnt = N
    * xfersize = N * maxpacket
    */
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_XFRSIZ);
 8005e80:	69bb      	ldr	r3, [r7, #24]
 8005e82:	015a      	lsls	r2, r3, #5
 8005e84:	69fb      	ldr	r3, [r7, #28]
 8005e86:	4413      	add	r3, r2
 8005e88:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005e8c:	691a      	ldr	r2, [r3, #16]
 8005e8e:	69bb      	ldr	r3, [r7, #24]
 8005e90:	0159      	lsls	r1, r3, #5
 8005e92:	69fb      	ldr	r3, [r7, #28]
 8005e94:	440b      	add	r3, r1
 8005e96:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005e9a:	4619      	mov	r1, r3
 8005e9c:	4b63      	ldr	r3, [pc, #396]	; (800602c <USB_EPStartXfer+0x494>)
 8005e9e:	4013      	ands	r3, r2
 8005ea0:	610b      	str	r3, [r1, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_PKTCNT);
 8005ea2:	69bb      	ldr	r3, [r7, #24]
 8005ea4:	015a      	lsls	r2, r3, #5
 8005ea6:	69fb      	ldr	r3, [r7, #28]
 8005ea8:	4413      	add	r3, r2
 8005eaa:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005eae:	691a      	ldr	r2, [r3, #16]
 8005eb0:	69bb      	ldr	r3, [r7, #24]
 8005eb2:	0159      	lsls	r1, r3, #5
 8005eb4:	69fb      	ldr	r3, [r7, #28]
 8005eb6:	440b      	add	r3, r1
 8005eb8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005ebc:	4619      	mov	r1, r3
 8005ebe:	4b5c      	ldr	r3, [pc, #368]	; (8006030 <USB_EPStartXfer+0x498>)
 8005ec0:	4013      	ands	r3, r2
 8005ec2:	610b      	str	r3, [r1, #16]

    if (ep->xfer_len == 0U)
 8005ec4:	68bb      	ldr	r3, [r7, #8]
 8005ec6:	699b      	ldr	r3, [r3, #24]
 8005ec8:	2b00      	cmp	r3, #0
 8005eca:	d123      	bne.n	8005f14 <USB_EPStartXfer+0x37c>
    {
      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & ep->maxpacket);
 8005ecc:	69bb      	ldr	r3, [r7, #24]
 8005ece:	015a      	lsls	r2, r3, #5
 8005ed0:	69fb      	ldr	r3, [r7, #28]
 8005ed2:	4413      	add	r3, r2
 8005ed4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005ed8:	691a      	ldr	r2, [r3, #16]
 8005eda:	68bb      	ldr	r3, [r7, #8]
 8005edc:	68db      	ldr	r3, [r3, #12]
 8005ede:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8005ee2:	69b9      	ldr	r1, [r7, #24]
 8005ee4:	0148      	lsls	r0, r1, #5
 8005ee6:	69f9      	ldr	r1, [r7, #28]
 8005ee8:	4401      	add	r1, r0
 8005eea:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 8005eee:	4313      	orrs	r3, r2
 8005ef0:	610b      	str	r3, [r1, #16]
      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 8005ef2:	69bb      	ldr	r3, [r7, #24]
 8005ef4:	015a      	lsls	r2, r3, #5
 8005ef6:	69fb      	ldr	r3, [r7, #28]
 8005ef8:	4413      	add	r3, r2
 8005efa:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005efe:	691b      	ldr	r3, [r3, #16]
 8005f00:	69ba      	ldr	r2, [r7, #24]
 8005f02:	0151      	lsls	r1, r2, #5
 8005f04:	69fa      	ldr	r2, [r7, #28]
 8005f06:	440a      	add	r2, r1
 8005f08:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8005f0c:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8005f10:	6113      	str	r3, [r2, #16]
 8005f12:	e037      	b.n	8005f84 <USB_EPStartXfer+0x3ec>
    }
    else
    {
      pktcnt = (uint16_t)((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket);
 8005f14:	68bb      	ldr	r3, [r7, #8]
 8005f16:	699a      	ldr	r2, [r3, #24]
 8005f18:	68bb      	ldr	r3, [r7, #8]
 8005f1a:	68db      	ldr	r3, [r3, #12]
 8005f1c:	4413      	add	r3, r2
 8005f1e:	1e5a      	subs	r2, r3, #1
 8005f20:	68bb      	ldr	r3, [r7, #8]
 8005f22:	68db      	ldr	r3, [r3, #12]
 8005f24:	fbb2 f3f3 	udiv	r3, r2, r3
 8005f28:	82fb      	strh	r3, [r7, #22]
      ep->xfer_size = ep->maxpacket * pktcnt;
 8005f2a:	68bb      	ldr	r3, [r7, #8]
 8005f2c:	68db      	ldr	r3, [r3, #12]
 8005f2e:	8afa      	ldrh	r2, [r7, #22]
 8005f30:	fb03 f202 	mul.w	r2, r3, r2
 8005f34:	68bb      	ldr	r3, [r7, #8]
 8005f36:	61da      	str	r2, [r3, #28]

      USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_PKTCNT & ((uint32_t)pktcnt << 19);
 8005f38:	69bb      	ldr	r3, [r7, #24]
 8005f3a:	015a      	lsls	r2, r3, #5
 8005f3c:	69fb      	ldr	r3, [r7, #28]
 8005f3e:	4413      	add	r3, r2
 8005f40:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005f44:	691a      	ldr	r2, [r3, #16]
 8005f46:	8afb      	ldrh	r3, [r7, #22]
 8005f48:	04d9      	lsls	r1, r3, #19
 8005f4a:	4b3a      	ldr	r3, [pc, #232]	; (8006034 <USB_EPStartXfer+0x49c>)
 8005f4c:	400b      	ands	r3, r1
 8005f4e:	69b9      	ldr	r1, [r7, #24]
 8005f50:	0148      	lsls	r0, r1, #5
 8005f52:	69f9      	ldr	r1, [r7, #28]
 8005f54:	4401      	add	r1, r0
 8005f56:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 8005f5a:	4313      	orrs	r3, r2
 8005f5c:	610b      	str	r3, [r1, #16]
      USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_XFRSIZ & ep->xfer_size;
 8005f5e:	69bb      	ldr	r3, [r7, #24]
 8005f60:	015a      	lsls	r2, r3, #5
 8005f62:	69fb      	ldr	r3, [r7, #28]
 8005f64:	4413      	add	r3, r2
 8005f66:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005f6a:	691a      	ldr	r2, [r3, #16]
 8005f6c:	68bb      	ldr	r3, [r7, #8]
 8005f6e:	69db      	ldr	r3, [r3, #28]
 8005f70:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8005f74:	69b9      	ldr	r1, [r7, #24]
 8005f76:	0148      	lsls	r0, r1, #5
 8005f78:	69f9      	ldr	r1, [r7, #28]
 8005f7a:	4401      	add	r1, r0
 8005f7c:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 8005f80:	4313      	orrs	r3, r2
 8005f82:	610b      	str	r3, [r1, #16]
    }

    if (dma == 1U)
 8005f84:	79fb      	ldrb	r3, [r7, #7]
 8005f86:	2b01      	cmp	r3, #1
 8005f88:	d10d      	bne.n	8005fa6 <USB_EPStartXfer+0x40e>
    {
      if ((uint32_t)ep->xfer_buff != 0U)
 8005f8a:	68bb      	ldr	r3, [r7, #8]
 8005f8c:	691b      	ldr	r3, [r3, #16]
 8005f8e:	2b00      	cmp	r3, #0
 8005f90:	d009      	beq.n	8005fa6 <USB_EPStartXfer+0x40e>
      {
        USBx_OUTEP(epnum)->DOEPDMA = (uint32_t)(ep->xfer_buff);
 8005f92:	68bb      	ldr	r3, [r7, #8]
 8005f94:	6919      	ldr	r1, [r3, #16]
 8005f96:	69bb      	ldr	r3, [r7, #24]
 8005f98:	015a      	lsls	r2, r3, #5
 8005f9a:	69fb      	ldr	r3, [r7, #28]
 8005f9c:	4413      	add	r3, r2
 8005f9e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005fa2:	460a      	mov	r2, r1
 8005fa4:	615a      	str	r2, [r3, #20]
      }
    }

    if (ep->type == EP_TYPE_ISOC)
 8005fa6:	68bb      	ldr	r3, [r7, #8]
 8005fa8:	791b      	ldrb	r3, [r3, #4]
 8005faa:	2b01      	cmp	r3, #1
 8005fac:	d128      	bne.n	8006000 <USB_EPStartXfer+0x468>
    {
      if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 8005fae:	69fb      	ldr	r3, [r7, #28]
 8005fb0:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005fb4:	689b      	ldr	r3, [r3, #8]
 8005fb6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005fba:	2b00      	cmp	r3, #0
 8005fbc:	d110      	bne.n	8005fe0 <USB_EPStartXfer+0x448>
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SODDFRM;
 8005fbe:	69bb      	ldr	r3, [r7, #24]
 8005fc0:	015a      	lsls	r2, r3, #5
 8005fc2:	69fb      	ldr	r3, [r7, #28]
 8005fc4:	4413      	add	r3, r2
 8005fc6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005fca:	681b      	ldr	r3, [r3, #0]
 8005fcc:	69ba      	ldr	r2, [r7, #24]
 8005fce:	0151      	lsls	r1, r2, #5
 8005fd0:	69fa      	ldr	r2, [r7, #28]
 8005fd2:	440a      	add	r2, r1
 8005fd4:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8005fd8:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8005fdc:	6013      	str	r3, [r2, #0]
 8005fde:	e00f      	b.n	8006000 <USB_EPStartXfer+0x468>
      }
      else
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM;
 8005fe0:	69bb      	ldr	r3, [r7, #24]
 8005fe2:	015a      	lsls	r2, r3, #5
 8005fe4:	69fb      	ldr	r3, [r7, #28]
 8005fe6:	4413      	add	r3, r2
 8005fe8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005fec:	681b      	ldr	r3, [r3, #0]
 8005fee:	69ba      	ldr	r2, [r7, #24]
 8005ff0:	0151      	lsls	r1, r2, #5
 8005ff2:	69fa      	ldr	r2, [r7, #28]
 8005ff4:	440a      	add	r2, r1
 8005ff6:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8005ffa:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8005ffe:	6013      	str	r3, [r2, #0]
      }
    }
    /* EP enable */
    USBx_OUTEP(epnum)->DOEPCTL |= (USB_OTG_DOEPCTL_CNAK | USB_OTG_DOEPCTL_EPENA);
 8006000:	69bb      	ldr	r3, [r7, #24]
 8006002:	015a      	lsls	r2, r3, #5
 8006004:	69fb      	ldr	r3, [r7, #28]
 8006006:	4413      	add	r3, r2
 8006008:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800600c:	681b      	ldr	r3, [r3, #0]
 800600e:	69ba      	ldr	r2, [r7, #24]
 8006010:	0151      	lsls	r1, r2, #5
 8006012:	69fa      	ldr	r2, [r7, #28]
 8006014:	440a      	add	r2, r1
 8006016:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800601a:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 800601e:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 8006020:	2300      	movs	r3, #0
}
 8006022:	4618      	mov	r0, r3
 8006024:	3720      	adds	r7, #32
 8006026:	46bd      	mov	sp, r7
 8006028:	bd80      	pop	{r7, pc}
 800602a:	bf00      	nop
 800602c:	fff80000 	.word	0xfff80000
 8006030:	e007ffff 	.word	0xe007ffff
 8006034:	1ff80000 	.word	0x1ff80000

08006038 <USB_EP0StartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0StartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep, uint8_t dma)
{
 8006038:	b480      	push	{r7}
 800603a:	b087      	sub	sp, #28
 800603c:	af00      	add	r7, sp, #0
 800603e:	60f8      	str	r0, [r7, #12]
 8006040:	60b9      	str	r1, [r7, #8]
 8006042:	4613      	mov	r3, r2
 8006044:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006046:	68fb      	ldr	r3, [r7, #12]
 8006048:	617b      	str	r3, [r7, #20]
  uint32_t epnum = (uint32_t)ep->num;
 800604a:	68bb      	ldr	r3, [r7, #8]
 800604c:	781b      	ldrb	r3, [r3, #0]
 800604e:	613b      	str	r3, [r7, #16]

  /* IN endpoint */
  if (ep->is_in == 1U)
 8006050:	68bb      	ldr	r3, [r7, #8]
 8006052:	785b      	ldrb	r3, [r3, #1]
 8006054:	2b01      	cmp	r3, #1
 8006056:	f040 80ce 	bne.w	80061f6 <USB_EP0StartXfer+0x1be>
  {
    /* Zero Length Packet? */
    if (ep->xfer_len == 0U)
 800605a:	68bb      	ldr	r3, [r7, #8]
 800605c:	699b      	ldr	r3, [r3, #24]
 800605e:	2b00      	cmp	r3, #0
 8006060:	d132      	bne.n	80060c8 <USB_EP0StartXfer+0x90>
    {
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 8006062:	693b      	ldr	r3, [r7, #16]
 8006064:	015a      	lsls	r2, r3, #5
 8006066:	697b      	ldr	r3, [r7, #20]
 8006068:	4413      	add	r3, r2
 800606a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800606e:	691a      	ldr	r2, [r3, #16]
 8006070:	693b      	ldr	r3, [r7, #16]
 8006072:	0159      	lsls	r1, r3, #5
 8006074:	697b      	ldr	r3, [r7, #20]
 8006076:	440b      	add	r3, r1
 8006078:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800607c:	4619      	mov	r1, r3
 800607e:	4b9a      	ldr	r3, [pc, #616]	; (80062e8 <USB_EP0StartXfer+0x2b0>)
 8006080:	4013      	ands	r3, r2
 8006082:	610b      	str	r3, [r1, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 8006084:	693b      	ldr	r3, [r7, #16]
 8006086:	015a      	lsls	r2, r3, #5
 8006088:	697b      	ldr	r3, [r7, #20]
 800608a:	4413      	add	r3, r2
 800608c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006090:	691b      	ldr	r3, [r3, #16]
 8006092:	693a      	ldr	r2, [r7, #16]
 8006094:	0151      	lsls	r1, r2, #5
 8006096:	697a      	ldr	r2, [r7, #20]
 8006098:	440a      	add	r2, r1
 800609a:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800609e:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 80060a2:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 80060a4:	693b      	ldr	r3, [r7, #16]
 80060a6:	015a      	lsls	r2, r3, #5
 80060a8:	697b      	ldr	r3, [r7, #20]
 80060aa:	4413      	add	r3, r2
 80060ac:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80060b0:	691a      	ldr	r2, [r3, #16]
 80060b2:	693b      	ldr	r3, [r7, #16]
 80060b4:	0159      	lsls	r1, r3, #5
 80060b6:	697b      	ldr	r3, [r7, #20]
 80060b8:	440b      	add	r3, r1
 80060ba:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80060be:	4619      	mov	r1, r3
 80060c0:	4b8a      	ldr	r3, [pc, #552]	; (80062ec <USB_EP0StartXfer+0x2b4>)
 80060c2:	4013      	ands	r3, r2
 80060c4:	610b      	str	r3, [r1, #16]
 80060c6:	e04e      	b.n	8006166 <USB_EP0StartXfer+0x12e>
      /* Program the transfer size and packet count
      * as follows: xfersize = N * maxpacket +
      * short_packet pktcnt = N + (short_packet
      * exist ? 1 : 0)
      */
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 80060c8:	693b      	ldr	r3, [r7, #16]
 80060ca:	015a      	lsls	r2, r3, #5
 80060cc:	697b      	ldr	r3, [r7, #20]
 80060ce:	4413      	add	r3, r2
 80060d0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80060d4:	691a      	ldr	r2, [r3, #16]
 80060d6:	693b      	ldr	r3, [r7, #16]
 80060d8:	0159      	lsls	r1, r3, #5
 80060da:	697b      	ldr	r3, [r7, #20]
 80060dc:	440b      	add	r3, r1
 80060de:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80060e2:	4619      	mov	r1, r3
 80060e4:	4b81      	ldr	r3, [pc, #516]	; (80062ec <USB_EP0StartXfer+0x2b4>)
 80060e6:	4013      	ands	r3, r2
 80060e8:	610b      	str	r3, [r1, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 80060ea:	693b      	ldr	r3, [r7, #16]
 80060ec:	015a      	lsls	r2, r3, #5
 80060ee:	697b      	ldr	r3, [r7, #20]
 80060f0:	4413      	add	r3, r2
 80060f2:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80060f6:	691a      	ldr	r2, [r3, #16]
 80060f8:	693b      	ldr	r3, [r7, #16]
 80060fa:	0159      	lsls	r1, r3, #5
 80060fc:	697b      	ldr	r3, [r7, #20]
 80060fe:	440b      	add	r3, r1
 8006100:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006104:	4619      	mov	r1, r3
 8006106:	4b78      	ldr	r3, [pc, #480]	; (80062e8 <USB_EP0StartXfer+0x2b0>)
 8006108:	4013      	ands	r3, r2
 800610a:	610b      	str	r3, [r1, #16]

      if (ep->xfer_len > ep->maxpacket)
 800610c:	68bb      	ldr	r3, [r7, #8]
 800610e:	699a      	ldr	r2, [r3, #24]
 8006110:	68bb      	ldr	r3, [r7, #8]
 8006112:	68db      	ldr	r3, [r3, #12]
 8006114:	429a      	cmp	r2, r3
 8006116:	d903      	bls.n	8006120 <USB_EP0StartXfer+0xe8>
      {
        ep->xfer_len = ep->maxpacket;
 8006118:	68bb      	ldr	r3, [r7, #8]
 800611a:	68da      	ldr	r2, [r3, #12]
 800611c:	68bb      	ldr	r3, [r7, #8]
 800611e:	619a      	str	r2, [r3, #24]
      }
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 8006120:	693b      	ldr	r3, [r7, #16]
 8006122:	015a      	lsls	r2, r3, #5
 8006124:	697b      	ldr	r3, [r7, #20]
 8006126:	4413      	add	r3, r2
 8006128:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800612c:	691b      	ldr	r3, [r3, #16]
 800612e:	693a      	ldr	r2, [r7, #16]
 8006130:	0151      	lsls	r1, r2, #5
 8006132:	697a      	ldr	r2, [r7, #20]
 8006134:	440a      	add	r2, r1
 8006136:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800613a:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 800613e:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_XFRSIZ & ep->xfer_len);
 8006140:	693b      	ldr	r3, [r7, #16]
 8006142:	015a      	lsls	r2, r3, #5
 8006144:	697b      	ldr	r3, [r7, #20]
 8006146:	4413      	add	r3, r2
 8006148:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800614c:	691a      	ldr	r2, [r3, #16]
 800614e:	68bb      	ldr	r3, [r7, #8]
 8006150:	699b      	ldr	r3, [r3, #24]
 8006152:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8006156:	6939      	ldr	r1, [r7, #16]
 8006158:	0148      	lsls	r0, r1, #5
 800615a:	6979      	ldr	r1, [r7, #20]
 800615c:	4401      	add	r1, r0
 800615e:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 8006162:	4313      	orrs	r3, r2
 8006164:	610b      	str	r3, [r1, #16]
    }

    if (dma == 1U)
 8006166:	79fb      	ldrb	r3, [r7, #7]
 8006168:	2b01      	cmp	r3, #1
 800616a:	d11e      	bne.n	80061aa <USB_EP0StartXfer+0x172>
    {
      if ((uint32_t)ep->dma_addr != 0U)
 800616c:	68bb      	ldr	r3, [r7, #8]
 800616e:	695b      	ldr	r3, [r3, #20]
 8006170:	2b00      	cmp	r3, #0
 8006172:	d009      	beq.n	8006188 <USB_EP0StartXfer+0x150>
      {
        USBx_INEP(epnum)->DIEPDMA = (uint32_t)(ep->dma_addr);
 8006174:	693b      	ldr	r3, [r7, #16]
 8006176:	015a      	lsls	r2, r3, #5
 8006178:	697b      	ldr	r3, [r7, #20]
 800617a:	4413      	add	r3, r2
 800617c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006180:	461a      	mov	r2, r3
 8006182:	68bb      	ldr	r3, [r7, #8]
 8006184:	695b      	ldr	r3, [r3, #20]
 8006186:	6153      	str	r3, [r2, #20]
      }

      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 8006188:	693b      	ldr	r3, [r7, #16]
 800618a:	015a      	lsls	r2, r3, #5
 800618c:	697b      	ldr	r3, [r7, #20]
 800618e:	4413      	add	r3, r2
 8006190:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006194:	681b      	ldr	r3, [r3, #0]
 8006196:	693a      	ldr	r2, [r7, #16]
 8006198:	0151      	lsls	r1, r2, #5
 800619a:	697a      	ldr	r2, [r7, #20]
 800619c:	440a      	add	r2, r1
 800619e:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80061a2:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 80061a6:	6013      	str	r3, [r2, #0]
 80061a8:	e097      	b.n	80062da <USB_EP0StartXfer+0x2a2>
    }
    else
    {
      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 80061aa:	693b      	ldr	r3, [r7, #16]
 80061ac:	015a      	lsls	r2, r3, #5
 80061ae:	697b      	ldr	r3, [r7, #20]
 80061b0:	4413      	add	r3, r2
 80061b2:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80061b6:	681b      	ldr	r3, [r3, #0]
 80061b8:	693a      	ldr	r2, [r7, #16]
 80061ba:	0151      	lsls	r1, r2, #5
 80061bc:	697a      	ldr	r2, [r7, #20]
 80061be:	440a      	add	r2, r1
 80061c0:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80061c4:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 80061c8:	6013      	str	r3, [r2, #0]

      /* Enable the Tx FIFO Empty Interrupt for this EP */
      if (ep->xfer_len > 0U)
 80061ca:	68bb      	ldr	r3, [r7, #8]
 80061cc:	699b      	ldr	r3, [r3, #24]
 80061ce:	2b00      	cmp	r3, #0
 80061d0:	f000 8083 	beq.w	80062da <USB_EP0StartXfer+0x2a2>
      {
        USBx_DEVICE->DIEPEMPMSK |= 1UL << (ep->num & EP_ADDR_MSK);
 80061d4:	697b      	ldr	r3, [r7, #20]
 80061d6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80061da:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80061dc:	68bb      	ldr	r3, [r7, #8]
 80061de:	781b      	ldrb	r3, [r3, #0]
 80061e0:	f003 030f 	and.w	r3, r3, #15
 80061e4:	2101      	movs	r1, #1
 80061e6:	fa01 f303 	lsl.w	r3, r1, r3
 80061ea:	6979      	ldr	r1, [r7, #20]
 80061ec:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 80061f0:	4313      	orrs	r3, r2
 80061f2:	634b      	str	r3, [r1, #52]	; 0x34
 80061f4:	e071      	b.n	80062da <USB_EP0StartXfer+0x2a2>
  {
    /* Program the transfer size and packet count as follows:
    * pktcnt = N
    * xfersize = N * maxpacket
    */
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_XFRSIZ);
 80061f6:	693b      	ldr	r3, [r7, #16]
 80061f8:	015a      	lsls	r2, r3, #5
 80061fa:	697b      	ldr	r3, [r7, #20]
 80061fc:	4413      	add	r3, r2
 80061fe:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006202:	691a      	ldr	r2, [r3, #16]
 8006204:	693b      	ldr	r3, [r7, #16]
 8006206:	0159      	lsls	r1, r3, #5
 8006208:	697b      	ldr	r3, [r7, #20]
 800620a:	440b      	add	r3, r1
 800620c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006210:	4619      	mov	r1, r3
 8006212:	4b36      	ldr	r3, [pc, #216]	; (80062ec <USB_EP0StartXfer+0x2b4>)
 8006214:	4013      	ands	r3, r2
 8006216:	610b      	str	r3, [r1, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_PKTCNT);
 8006218:	693b      	ldr	r3, [r7, #16]
 800621a:	015a      	lsls	r2, r3, #5
 800621c:	697b      	ldr	r3, [r7, #20]
 800621e:	4413      	add	r3, r2
 8006220:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006224:	691a      	ldr	r2, [r3, #16]
 8006226:	693b      	ldr	r3, [r7, #16]
 8006228:	0159      	lsls	r1, r3, #5
 800622a:	697b      	ldr	r3, [r7, #20]
 800622c:	440b      	add	r3, r1
 800622e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006232:	4619      	mov	r1, r3
 8006234:	4b2c      	ldr	r3, [pc, #176]	; (80062e8 <USB_EP0StartXfer+0x2b0>)
 8006236:	4013      	ands	r3, r2
 8006238:	610b      	str	r3, [r1, #16]

    if (ep->xfer_len > 0U)
 800623a:	68bb      	ldr	r3, [r7, #8]
 800623c:	699b      	ldr	r3, [r3, #24]
 800623e:	2b00      	cmp	r3, #0
 8006240:	d003      	beq.n	800624a <USB_EP0StartXfer+0x212>
    {
      ep->xfer_len = ep->maxpacket;
 8006242:	68bb      	ldr	r3, [r7, #8]
 8006244:	68da      	ldr	r2, [r3, #12]
 8006246:	68bb      	ldr	r3, [r7, #8]
 8006248:	619a      	str	r2, [r3, #24]
    }

    /* Store transfer size, for EP0 this is equal to endpoint max packet size */
    ep->xfer_size = ep->maxpacket;
 800624a:	68bb      	ldr	r3, [r7, #8]
 800624c:	68da      	ldr	r2, [r3, #12]
 800624e:	68bb      	ldr	r3, [r7, #8]
 8006250:	61da      	str	r2, [r3, #28]

    USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 8006252:	693b      	ldr	r3, [r7, #16]
 8006254:	015a      	lsls	r2, r3, #5
 8006256:	697b      	ldr	r3, [r7, #20]
 8006258:	4413      	add	r3, r2
 800625a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800625e:	691b      	ldr	r3, [r3, #16]
 8006260:	693a      	ldr	r2, [r7, #16]
 8006262:	0151      	lsls	r1, r2, #5
 8006264:	697a      	ldr	r2, [r7, #20]
 8006266:	440a      	add	r2, r1
 8006268:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800626c:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8006270:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & ep->xfer_size);
 8006272:	693b      	ldr	r3, [r7, #16]
 8006274:	015a      	lsls	r2, r3, #5
 8006276:	697b      	ldr	r3, [r7, #20]
 8006278:	4413      	add	r3, r2
 800627a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800627e:	691a      	ldr	r2, [r3, #16]
 8006280:	68bb      	ldr	r3, [r7, #8]
 8006282:	69db      	ldr	r3, [r3, #28]
 8006284:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8006288:	6939      	ldr	r1, [r7, #16]
 800628a:	0148      	lsls	r0, r1, #5
 800628c:	6979      	ldr	r1, [r7, #20]
 800628e:	4401      	add	r1, r0
 8006290:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 8006294:	4313      	orrs	r3, r2
 8006296:	610b      	str	r3, [r1, #16]

    if (dma == 1U)
 8006298:	79fb      	ldrb	r3, [r7, #7]
 800629a:	2b01      	cmp	r3, #1
 800629c:	d10d      	bne.n	80062ba <USB_EP0StartXfer+0x282>
    {
      if ((uint32_t)ep->xfer_buff != 0U)
 800629e:	68bb      	ldr	r3, [r7, #8]
 80062a0:	691b      	ldr	r3, [r3, #16]
 80062a2:	2b00      	cmp	r3, #0
 80062a4:	d009      	beq.n	80062ba <USB_EP0StartXfer+0x282>
      {
        USBx_OUTEP(epnum)->DOEPDMA = (uint32_t)(ep->xfer_buff);
 80062a6:	68bb      	ldr	r3, [r7, #8]
 80062a8:	6919      	ldr	r1, [r3, #16]
 80062aa:	693b      	ldr	r3, [r7, #16]
 80062ac:	015a      	lsls	r2, r3, #5
 80062ae:	697b      	ldr	r3, [r7, #20]
 80062b0:	4413      	add	r3, r2
 80062b2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80062b6:	460a      	mov	r2, r1
 80062b8:	615a      	str	r2, [r3, #20]
      }
    }

    /* EP enable */
    USBx_OUTEP(epnum)->DOEPCTL |= (USB_OTG_DOEPCTL_CNAK | USB_OTG_DOEPCTL_EPENA);
 80062ba:	693b      	ldr	r3, [r7, #16]
 80062bc:	015a      	lsls	r2, r3, #5
 80062be:	697b      	ldr	r3, [r7, #20]
 80062c0:	4413      	add	r3, r2
 80062c2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80062c6:	681b      	ldr	r3, [r3, #0]
 80062c8:	693a      	ldr	r2, [r7, #16]
 80062ca:	0151      	lsls	r1, r2, #5
 80062cc:	697a      	ldr	r2, [r7, #20]
 80062ce:	440a      	add	r2, r1
 80062d0:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80062d4:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 80062d8:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 80062da:	2300      	movs	r3, #0
}
 80062dc:	4618      	mov	r0, r3
 80062de:	371c      	adds	r7, #28
 80062e0:	46bd      	mov	sp, r7
 80062e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80062e6:	4770      	bx	lr
 80062e8:	e007ffff 	.word	0xe007ffff
 80062ec:	fff80000 	.word	0xfff80000

080062f0 <USB_EPStopXfer>:
   * @param  USBx  usb device instance
   * @param  ep pointer to endpoint structure
   * @retval HAL status
   */
HAL_StatusTypeDef USB_EPStopXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 80062f0:	b480      	push	{r7}
 80062f2:	b087      	sub	sp, #28
 80062f4:	af00      	add	r7, sp, #0
 80062f6:	6078      	str	r0, [r7, #4]
 80062f8:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 80062fa:	2300      	movs	r3, #0
 80062fc:	60fb      	str	r3, [r7, #12]
  HAL_StatusTypeDef ret = HAL_OK;
 80062fe:	2300      	movs	r3, #0
 8006300:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006302:	687b      	ldr	r3, [r7, #4]
 8006304:	613b      	str	r3, [r7, #16]

  /* IN endpoint */
  if (ep->is_in == 1U)
 8006306:	683b      	ldr	r3, [r7, #0]
 8006308:	785b      	ldrb	r3, [r3, #1]
 800630a:	2b01      	cmp	r3, #1
 800630c:	d14a      	bne.n	80063a4 <USB_EPStopXfer+0xb4>
  {
    /* EP enable, IN data in FIFO */
    if (((USBx_INEP(ep->num)->DIEPCTL) & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 800630e:	683b      	ldr	r3, [r7, #0]
 8006310:	781b      	ldrb	r3, [r3, #0]
 8006312:	015a      	lsls	r2, r3, #5
 8006314:	693b      	ldr	r3, [r7, #16]
 8006316:	4413      	add	r3, r2
 8006318:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800631c:	681b      	ldr	r3, [r3, #0]
 800631e:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8006322:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8006326:	f040 8086 	bne.w	8006436 <USB_EPStopXfer+0x146>
    {
      USBx_INEP(ep->num)->DIEPCTL |= (USB_OTG_DIEPCTL_SNAK);
 800632a:	683b      	ldr	r3, [r7, #0]
 800632c:	781b      	ldrb	r3, [r3, #0]
 800632e:	015a      	lsls	r2, r3, #5
 8006330:	693b      	ldr	r3, [r7, #16]
 8006332:	4413      	add	r3, r2
 8006334:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006338:	681b      	ldr	r3, [r3, #0]
 800633a:	683a      	ldr	r2, [r7, #0]
 800633c:	7812      	ldrb	r2, [r2, #0]
 800633e:	0151      	lsls	r1, r2, #5
 8006340:	693a      	ldr	r2, [r7, #16]
 8006342:	440a      	add	r2, r1
 8006344:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8006348:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 800634c:	6013      	str	r3, [r2, #0]
      USBx_INEP(ep->num)->DIEPCTL |= (USB_OTG_DIEPCTL_EPDIS);
 800634e:	683b      	ldr	r3, [r7, #0]
 8006350:	781b      	ldrb	r3, [r3, #0]
 8006352:	015a      	lsls	r2, r3, #5
 8006354:	693b      	ldr	r3, [r7, #16]
 8006356:	4413      	add	r3, r2
 8006358:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800635c:	681b      	ldr	r3, [r3, #0]
 800635e:	683a      	ldr	r2, [r7, #0]
 8006360:	7812      	ldrb	r2, [r2, #0]
 8006362:	0151      	lsls	r1, r2, #5
 8006364:	693a      	ldr	r2, [r7, #16]
 8006366:	440a      	add	r2, r1
 8006368:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800636c:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8006370:	6013      	str	r3, [r2, #0]

      do
      {
        count++;
 8006372:	68fb      	ldr	r3, [r7, #12]
 8006374:	3301      	adds	r3, #1
 8006376:	60fb      	str	r3, [r7, #12]

        if (count > 10000U)
 8006378:	68fb      	ldr	r3, [r7, #12]
 800637a:	f242 7210 	movw	r2, #10000	; 0x2710
 800637e:	4293      	cmp	r3, r2
 8006380:	d902      	bls.n	8006388 <USB_EPStopXfer+0x98>
        {
          ret = HAL_ERROR;
 8006382:	2301      	movs	r3, #1
 8006384:	75fb      	strb	r3, [r7, #23]
          break;
 8006386:	e056      	b.n	8006436 <USB_EPStopXfer+0x146>
        }
      } while (((USBx_INEP(ep->num)->DIEPCTL) & USB_OTG_DIEPCTL_EPENA) ==  USB_OTG_DIEPCTL_EPENA);
 8006388:	683b      	ldr	r3, [r7, #0]
 800638a:	781b      	ldrb	r3, [r3, #0]
 800638c:	015a      	lsls	r2, r3, #5
 800638e:	693b      	ldr	r3, [r7, #16]
 8006390:	4413      	add	r3, r2
 8006392:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006396:	681b      	ldr	r3, [r3, #0]
 8006398:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800639c:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80063a0:	d0e7      	beq.n	8006372 <USB_EPStopXfer+0x82>
 80063a2:	e048      	b.n	8006436 <USB_EPStopXfer+0x146>
    }
  }
  else /* OUT endpoint */
  {
    if (((USBx_OUTEP(ep->num)->DOEPCTL) & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 80063a4:	683b      	ldr	r3, [r7, #0]
 80063a6:	781b      	ldrb	r3, [r3, #0]
 80063a8:	015a      	lsls	r2, r3, #5
 80063aa:	693b      	ldr	r3, [r7, #16]
 80063ac:	4413      	add	r3, r2
 80063ae:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80063b2:	681b      	ldr	r3, [r3, #0]
 80063b4:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 80063b8:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80063bc:	d13b      	bne.n	8006436 <USB_EPStopXfer+0x146>
    {
      USBx_OUTEP(ep->num)->DOEPCTL |= (USB_OTG_DOEPCTL_SNAK);
 80063be:	683b      	ldr	r3, [r7, #0]
 80063c0:	781b      	ldrb	r3, [r3, #0]
 80063c2:	015a      	lsls	r2, r3, #5
 80063c4:	693b      	ldr	r3, [r7, #16]
 80063c6:	4413      	add	r3, r2
 80063c8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80063cc:	681b      	ldr	r3, [r3, #0]
 80063ce:	683a      	ldr	r2, [r7, #0]
 80063d0:	7812      	ldrb	r2, [r2, #0]
 80063d2:	0151      	lsls	r1, r2, #5
 80063d4:	693a      	ldr	r2, [r7, #16]
 80063d6:	440a      	add	r2, r1
 80063d8:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80063dc:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 80063e0:	6013      	str	r3, [r2, #0]
      USBx_OUTEP(ep->num)->DOEPCTL |= (USB_OTG_DOEPCTL_EPDIS);
 80063e2:	683b      	ldr	r3, [r7, #0]
 80063e4:	781b      	ldrb	r3, [r3, #0]
 80063e6:	015a      	lsls	r2, r3, #5
 80063e8:	693b      	ldr	r3, [r7, #16]
 80063ea:	4413      	add	r3, r2
 80063ec:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80063f0:	681b      	ldr	r3, [r3, #0]
 80063f2:	683a      	ldr	r2, [r7, #0]
 80063f4:	7812      	ldrb	r2, [r2, #0]
 80063f6:	0151      	lsls	r1, r2, #5
 80063f8:	693a      	ldr	r2, [r7, #16]
 80063fa:	440a      	add	r2, r1
 80063fc:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8006400:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8006404:	6013      	str	r3, [r2, #0]

      do
      {
        count++;
 8006406:	68fb      	ldr	r3, [r7, #12]
 8006408:	3301      	adds	r3, #1
 800640a:	60fb      	str	r3, [r7, #12]

        if (count > 10000U)
 800640c:	68fb      	ldr	r3, [r7, #12]
 800640e:	f242 7210 	movw	r2, #10000	; 0x2710
 8006412:	4293      	cmp	r3, r2
 8006414:	d902      	bls.n	800641c <USB_EPStopXfer+0x12c>
        {
          ret = HAL_ERROR;
 8006416:	2301      	movs	r3, #1
 8006418:	75fb      	strb	r3, [r7, #23]
          break;
 800641a:	e00c      	b.n	8006436 <USB_EPStopXfer+0x146>
        }
      } while (((USBx_OUTEP(ep->num)->DOEPCTL) & USB_OTG_DOEPCTL_EPENA) ==  USB_OTG_DOEPCTL_EPENA);
 800641c:	683b      	ldr	r3, [r7, #0]
 800641e:	781b      	ldrb	r3, [r3, #0]
 8006420:	015a      	lsls	r2, r3, #5
 8006422:	693b      	ldr	r3, [r7, #16]
 8006424:	4413      	add	r3, r2
 8006426:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800642a:	681b      	ldr	r3, [r3, #0]
 800642c:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8006430:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8006434:	d0e7      	beq.n	8006406 <USB_EPStopXfer+0x116>
    }
  }

  return ret;
 8006436:	7dfb      	ldrb	r3, [r7, #23]
}
 8006438:	4618      	mov	r0, r3
 800643a:	371c      	adds	r7, #28
 800643c:	46bd      	mov	sp, r7
 800643e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006442:	4770      	bx	lr

08006444 <USB_WritePacket>:
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_WritePacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *src,
                                  uint8_t ch_ep_num, uint16_t len, uint8_t dma)
{
 8006444:	b480      	push	{r7}
 8006446:	b089      	sub	sp, #36	; 0x24
 8006448:	af00      	add	r7, sp, #0
 800644a:	60f8      	str	r0, [r7, #12]
 800644c:	60b9      	str	r1, [r7, #8]
 800644e:	4611      	mov	r1, r2
 8006450:	461a      	mov	r2, r3
 8006452:	460b      	mov	r3, r1
 8006454:	71fb      	strb	r3, [r7, #7]
 8006456:	4613      	mov	r3, r2
 8006458:	80bb      	strh	r3, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800645a:	68fb      	ldr	r3, [r7, #12]
 800645c:	617b      	str	r3, [r7, #20]
  uint8_t *pSrc = src;
 800645e:	68bb      	ldr	r3, [r7, #8]
 8006460:	61fb      	str	r3, [r7, #28]
  uint32_t count32b;
  uint32_t i;

  if (dma == 0U)
 8006462:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 8006466:	2b00      	cmp	r3, #0
 8006468:	d123      	bne.n	80064b2 <USB_WritePacket+0x6e>
  {
    count32b = ((uint32_t)len + 3U) / 4U;
 800646a:	88bb      	ldrh	r3, [r7, #4]
 800646c:	3303      	adds	r3, #3
 800646e:	089b      	lsrs	r3, r3, #2
 8006470:	613b      	str	r3, [r7, #16]
    for (i = 0U; i < count32b; i++)
 8006472:	2300      	movs	r3, #0
 8006474:	61bb      	str	r3, [r7, #24]
 8006476:	e018      	b.n	80064aa <USB_WritePacket+0x66>
    {
      USBx_DFIFO((uint32_t)ch_ep_num) = __UNALIGNED_UINT32_READ(pSrc);
 8006478:	79fb      	ldrb	r3, [r7, #7]
 800647a:	031a      	lsls	r2, r3, #12
 800647c:	697b      	ldr	r3, [r7, #20]
 800647e:	4413      	add	r3, r2
 8006480:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8006484:	461a      	mov	r2, r3
 8006486:	69fb      	ldr	r3, [r7, #28]
 8006488:	681b      	ldr	r3, [r3, #0]
 800648a:	6013      	str	r3, [r2, #0]
      pSrc++;
 800648c:	69fb      	ldr	r3, [r7, #28]
 800648e:	3301      	adds	r3, #1
 8006490:	61fb      	str	r3, [r7, #28]
      pSrc++;
 8006492:	69fb      	ldr	r3, [r7, #28]
 8006494:	3301      	adds	r3, #1
 8006496:	61fb      	str	r3, [r7, #28]
      pSrc++;
 8006498:	69fb      	ldr	r3, [r7, #28]
 800649a:	3301      	adds	r3, #1
 800649c:	61fb      	str	r3, [r7, #28]
      pSrc++;
 800649e:	69fb      	ldr	r3, [r7, #28]
 80064a0:	3301      	adds	r3, #1
 80064a2:	61fb      	str	r3, [r7, #28]
    for (i = 0U; i < count32b; i++)
 80064a4:	69bb      	ldr	r3, [r7, #24]
 80064a6:	3301      	adds	r3, #1
 80064a8:	61bb      	str	r3, [r7, #24]
 80064aa:	69ba      	ldr	r2, [r7, #24]
 80064ac:	693b      	ldr	r3, [r7, #16]
 80064ae:	429a      	cmp	r2, r3
 80064b0:	d3e2      	bcc.n	8006478 <USB_WritePacket+0x34>
    }
  }

  return HAL_OK;
 80064b2:	2300      	movs	r3, #0
}
 80064b4:	4618      	mov	r0, r3
 80064b6:	3724      	adds	r7, #36	; 0x24
 80064b8:	46bd      	mov	sp, r7
 80064ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80064be:	4770      	bx	lr

080064c0 <USB_ReadPacket>:
  * @param  dest  source pointer
  * @param  len  Number of bytes to read
  * @retval pointer to destination buffer
  */
void *USB_ReadPacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *dest, uint16_t len)
{
 80064c0:	b480      	push	{r7}
 80064c2:	b08b      	sub	sp, #44	; 0x2c
 80064c4:	af00      	add	r7, sp, #0
 80064c6:	60f8      	str	r0, [r7, #12]
 80064c8:	60b9      	str	r1, [r7, #8]
 80064ca:	4613      	mov	r3, r2
 80064cc:	80fb      	strh	r3, [r7, #6]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80064ce:	68fb      	ldr	r3, [r7, #12]
 80064d0:	61bb      	str	r3, [r7, #24]
  uint8_t *pDest = dest;
 80064d2:	68bb      	ldr	r3, [r7, #8]
 80064d4:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t pData;
  uint32_t i;
  uint32_t count32b = (uint32_t)len >> 2U;
 80064d6:	88fb      	ldrh	r3, [r7, #6]
 80064d8:	089b      	lsrs	r3, r3, #2
 80064da:	b29b      	uxth	r3, r3
 80064dc:	617b      	str	r3, [r7, #20]
  uint16_t remaining_bytes = len % 4U;
 80064de:	88fb      	ldrh	r3, [r7, #6]
 80064e0:	f003 0303 	and.w	r3, r3, #3
 80064e4:	83fb      	strh	r3, [r7, #30]

  for (i = 0U; i < count32b; i++)
 80064e6:	2300      	movs	r3, #0
 80064e8:	623b      	str	r3, [r7, #32]
 80064ea:	e014      	b.n	8006516 <USB_ReadPacket+0x56>
  {
    __UNALIGNED_UINT32_WRITE(pDest, USBx_DFIFO(0U));
 80064ec:	69bb      	ldr	r3, [r7, #24]
 80064ee:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80064f2:	681a      	ldr	r2, [r3, #0]
 80064f4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80064f6:	601a      	str	r2, [r3, #0]
    pDest++;
 80064f8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80064fa:	3301      	adds	r3, #1
 80064fc:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 80064fe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006500:	3301      	adds	r3, #1
 8006502:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 8006504:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006506:	3301      	adds	r3, #1
 8006508:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 800650a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800650c:	3301      	adds	r3, #1
 800650e:	627b      	str	r3, [r7, #36]	; 0x24
  for (i = 0U; i < count32b; i++)
 8006510:	6a3b      	ldr	r3, [r7, #32]
 8006512:	3301      	adds	r3, #1
 8006514:	623b      	str	r3, [r7, #32]
 8006516:	6a3a      	ldr	r2, [r7, #32]
 8006518:	697b      	ldr	r3, [r7, #20]
 800651a:	429a      	cmp	r2, r3
 800651c:	d3e6      	bcc.n	80064ec <USB_ReadPacket+0x2c>
  }

  /* When Number of data is not word aligned, read the remaining byte */
  if (remaining_bytes != 0U)
 800651e:	8bfb      	ldrh	r3, [r7, #30]
 8006520:	2b00      	cmp	r3, #0
 8006522:	d01e      	beq.n	8006562 <USB_ReadPacket+0xa2>
  {
    i = 0U;
 8006524:	2300      	movs	r3, #0
 8006526:	623b      	str	r3, [r7, #32]
    __UNALIGNED_UINT32_WRITE(&pData, USBx_DFIFO(0U));
 8006528:	69bb      	ldr	r3, [r7, #24]
 800652a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800652e:	461a      	mov	r2, r3
 8006530:	f107 0310 	add.w	r3, r7, #16
 8006534:	6812      	ldr	r2, [r2, #0]
 8006536:	601a      	str	r2, [r3, #0]

    do
    {
      *(uint8_t *)pDest = (uint8_t)(pData >> (8U * (uint8_t)(i)));
 8006538:	693a      	ldr	r2, [r7, #16]
 800653a:	6a3b      	ldr	r3, [r7, #32]
 800653c:	b2db      	uxtb	r3, r3
 800653e:	00db      	lsls	r3, r3, #3
 8006540:	fa22 f303 	lsr.w	r3, r2, r3
 8006544:	b2da      	uxtb	r2, r3
 8006546:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006548:	701a      	strb	r2, [r3, #0]
      i++;
 800654a:	6a3b      	ldr	r3, [r7, #32]
 800654c:	3301      	adds	r3, #1
 800654e:	623b      	str	r3, [r7, #32]
      pDest++;
 8006550:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006552:	3301      	adds	r3, #1
 8006554:	627b      	str	r3, [r7, #36]	; 0x24
      remaining_bytes--;
 8006556:	8bfb      	ldrh	r3, [r7, #30]
 8006558:	3b01      	subs	r3, #1
 800655a:	83fb      	strh	r3, [r7, #30]
    } while (remaining_bytes != 0U);
 800655c:	8bfb      	ldrh	r3, [r7, #30]
 800655e:	2b00      	cmp	r3, #0
 8006560:	d1ea      	bne.n	8006538 <USB_ReadPacket+0x78>
  }

  return ((void *)pDest);
 8006562:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 8006564:	4618      	mov	r0, r3
 8006566:	372c      	adds	r7, #44	; 0x2c
 8006568:	46bd      	mov	sp, r7
 800656a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800656e:	4770      	bx	lr

08006570 <USB_EPSetStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPSetStall(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8006570:	b480      	push	{r7}
 8006572:	b085      	sub	sp, #20
 8006574:	af00      	add	r7, sp, #0
 8006576:	6078      	str	r0, [r7, #4]
 8006578:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800657a:	687b      	ldr	r3, [r7, #4]
 800657c:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 800657e:	683b      	ldr	r3, [r7, #0]
 8006580:	781b      	ldrb	r3, [r3, #0]
 8006582:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 8006584:	683b      	ldr	r3, [r7, #0]
 8006586:	785b      	ldrb	r3, [r3, #1]
 8006588:	2b01      	cmp	r3, #1
 800658a:	d12c      	bne.n	80065e6 <USB_EPSetStall+0x76>
  {
    if (((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == 0U) && (epnum != 0U))
 800658c:	68bb      	ldr	r3, [r7, #8]
 800658e:	015a      	lsls	r2, r3, #5
 8006590:	68fb      	ldr	r3, [r7, #12]
 8006592:	4413      	add	r3, r2
 8006594:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006598:	681b      	ldr	r3, [r3, #0]
 800659a:	2b00      	cmp	r3, #0
 800659c:	db12      	blt.n	80065c4 <USB_EPSetStall+0x54>
 800659e:	68bb      	ldr	r3, [r7, #8]
 80065a0:	2b00      	cmp	r3, #0
 80065a2:	d00f      	beq.n	80065c4 <USB_EPSetStall+0x54>
    {
      USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_EPDIS);
 80065a4:	68bb      	ldr	r3, [r7, #8]
 80065a6:	015a      	lsls	r2, r3, #5
 80065a8:	68fb      	ldr	r3, [r7, #12]
 80065aa:	4413      	add	r3, r2
 80065ac:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80065b0:	681b      	ldr	r3, [r3, #0]
 80065b2:	68ba      	ldr	r2, [r7, #8]
 80065b4:	0151      	lsls	r1, r2, #5
 80065b6:	68fa      	ldr	r2, [r7, #12]
 80065b8:	440a      	add	r2, r1
 80065ba:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80065be:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 80065c2:	6013      	str	r3, [r2, #0]
    }
    USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_STALL;
 80065c4:	68bb      	ldr	r3, [r7, #8]
 80065c6:	015a      	lsls	r2, r3, #5
 80065c8:	68fb      	ldr	r3, [r7, #12]
 80065ca:	4413      	add	r3, r2
 80065cc:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80065d0:	681b      	ldr	r3, [r3, #0]
 80065d2:	68ba      	ldr	r2, [r7, #8]
 80065d4:	0151      	lsls	r1, r2, #5
 80065d6:	68fa      	ldr	r2, [r7, #12]
 80065d8:	440a      	add	r2, r1
 80065da:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80065de:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 80065e2:	6013      	str	r3, [r2, #0]
 80065e4:	e02b      	b.n	800663e <USB_EPSetStall+0xce>
  }
  else
  {
    if (((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == 0U) && (epnum != 0U))
 80065e6:	68bb      	ldr	r3, [r7, #8]
 80065e8:	015a      	lsls	r2, r3, #5
 80065ea:	68fb      	ldr	r3, [r7, #12]
 80065ec:	4413      	add	r3, r2
 80065ee:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80065f2:	681b      	ldr	r3, [r3, #0]
 80065f4:	2b00      	cmp	r3, #0
 80065f6:	db12      	blt.n	800661e <USB_EPSetStall+0xae>
 80065f8:	68bb      	ldr	r3, [r7, #8]
 80065fa:	2b00      	cmp	r3, #0
 80065fc:	d00f      	beq.n	800661e <USB_EPSetStall+0xae>
    {
      USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_EPDIS);
 80065fe:	68bb      	ldr	r3, [r7, #8]
 8006600:	015a      	lsls	r2, r3, #5
 8006602:	68fb      	ldr	r3, [r7, #12]
 8006604:	4413      	add	r3, r2
 8006606:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800660a:	681b      	ldr	r3, [r3, #0]
 800660c:	68ba      	ldr	r2, [r7, #8]
 800660e:	0151      	lsls	r1, r2, #5
 8006610:	68fa      	ldr	r2, [r7, #12]
 8006612:	440a      	add	r2, r1
 8006614:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8006618:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 800661c:	6013      	str	r3, [r2, #0]
    }
    USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_STALL;
 800661e:	68bb      	ldr	r3, [r7, #8]
 8006620:	015a      	lsls	r2, r3, #5
 8006622:	68fb      	ldr	r3, [r7, #12]
 8006624:	4413      	add	r3, r2
 8006626:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800662a:	681b      	ldr	r3, [r3, #0]
 800662c:	68ba      	ldr	r2, [r7, #8]
 800662e:	0151      	lsls	r1, r2, #5
 8006630:	68fa      	ldr	r2, [r7, #12]
 8006632:	440a      	add	r2, r1
 8006634:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8006638:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 800663c:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 800663e:	2300      	movs	r3, #0
}
 8006640:	4618      	mov	r0, r3
 8006642:	3714      	adds	r7, #20
 8006644:	46bd      	mov	sp, r7
 8006646:	f85d 7b04 	ldr.w	r7, [sp], #4
 800664a:	4770      	bx	lr

0800664c <USB_EPClearStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPClearStall(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 800664c:	b480      	push	{r7}
 800664e:	b085      	sub	sp, #20
 8006650:	af00      	add	r7, sp, #0
 8006652:	6078      	str	r0, [r7, #4]
 8006654:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006656:	687b      	ldr	r3, [r7, #4]
 8006658:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 800665a:	683b      	ldr	r3, [r7, #0]
 800665c:	781b      	ldrb	r3, [r3, #0]
 800665e:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 8006660:	683b      	ldr	r3, [r7, #0]
 8006662:	785b      	ldrb	r3, [r3, #1]
 8006664:	2b01      	cmp	r3, #1
 8006666:	d128      	bne.n	80066ba <USB_EPClearStall+0x6e>
  {
    USBx_INEP(epnum)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 8006668:	68bb      	ldr	r3, [r7, #8]
 800666a:	015a      	lsls	r2, r3, #5
 800666c:	68fb      	ldr	r3, [r7, #12]
 800666e:	4413      	add	r3, r2
 8006670:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006674:	681b      	ldr	r3, [r3, #0]
 8006676:	68ba      	ldr	r2, [r7, #8]
 8006678:	0151      	lsls	r1, r2, #5
 800667a:	68fa      	ldr	r2, [r7, #12]
 800667c:	440a      	add	r2, r1
 800667e:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8006682:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8006686:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 8006688:	683b      	ldr	r3, [r7, #0]
 800668a:	791b      	ldrb	r3, [r3, #4]
 800668c:	2b03      	cmp	r3, #3
 800668e:	d003      	beq.n	8006698 <USB_EPClearStall+0x4c>
 8006690:	683b      	ldr	r3, [r7, #0]
 8006692:	791b      	ldrb	r3, [r3, #4]
 8006694:	2b02      	cmp	r3, #2
 8006696:	d138      	bne.n	800670a <USB_EPClearStall+0xbe>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 8006698:	68bb      	ldr	r3, [r7, #8]
 800669a:	015a      	lsls	r2, r3, #5
 800669c:	68fb      	ldr	r3, [r7, #12]
 800669e:	4413      	add	r3, r2
 80066a0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80066a4:	681b      	ldr	r3, [r3, #0]
 80066a6:	68ba      	ldr	r2, [r7, #8]
 80066a8:	0151      	lsls	r1, r2, #5
 80066aa:	68fa      	ldr	r2, [r7, #12]
 80066ac:	440a      	add	r2, r1
 80066ae:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80066b2:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80066b6:	6013      	str	r3, [r2, #0]
 80066b8:	e027      	b.n	800670a <USB_EPClearStall+0xbe>
    }
  }
  else
  {
    USBx_OUTEP(epnum)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 80066ba:	68bb      	ldr	r3, [r7, #8]
 80066bc:	015a      	lsls	r2, r3, #5
 80066be:	68fb      	ldr	r3, [r7, #12]
 80066c0:	4413      	add	r3, r2
 80066c2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80066c6:	681b      	ldr	r3, [r3, #0]
 80066c8:	68ba      	ldr	r2, [r7, #8]
 80066ca:	0151      	lsls	r1, r2, #5
 80066cc:	68fa      	ldr	r2, [r7, #12]
 80066ce:	440a      	add	r2, r1
 80066d0:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80066d4:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 80066d8:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 80066da:	683b      	ldr	r3, [r7, #0]
 80066dc:	791b      	ldrb	r3, [r3, #4]
 80066de:	2b03      	cmp	r3, #3
 80066e0:	d003      	beq.n	80066ea <USB_EPClearStall+0x9e>
 80066e2:	683b      	ldr	r3, [r7, #0]
 80066e4:	791b      	ldrb	r3, [r3, #4]
 80066e6:	2b02      	cmp	r3, #2
 80066e8:	d10f      	bne.n	800670a <USB_EPClearStall+0xbe>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 80066ea:	68bb      	ldr	r3, [r7, #8]
 80066ec:	015a      	lsls	r2, r3, #5
 80066ee:	68fb      	ldr	r3, [r7, #12]
 80066f0:	4413      	add	r3, r2
 80066f2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80066f6:	681b      	ldr	r3, [r3, #0]
 80066f8:	68ba      	ldr	r2, [r7, #8]
 80066fa:	0151      	lsls	r1, r2, #5
 80066fc:	68fa      	ldr	r2, [r7, #12]
 80066fe:	440a      	add	r2, r1
 8006700:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8006704:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8006708:	6013      	str	r3, [r2, #0]
    }
  }
  return HAL_OK;
 800670a:	2300      	movs	r3, #0
}
 800670c:	4618      	mov	r0, r3
 800670e:	3714      	adds	r7, #20
 8006710:	46bd      	mov	sp, r7
 8006712:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006716:	4770      	bx	lr

08006718 <USB_SetDevAddress>:
  * @param  address  new device address to be assigned
  *          This parameter can be a value from 0 to 255
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_SetDevAddress(USB_OTG_GlobalTypeDef *USBx, uint8_t address)
{
 8006718:	b480      	push	{r7}
 800671a:	b085      	sub	sp, #20
 800671c:	af00      	add	r7, sp, #0
 800671e:	6078      	str	r0, [r7, #4]
 8006720:	460b      	mov	r3, r1
 8006722:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006724:	687b      	ldr	r3, [r7, #4]
 8006726:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG &= ~(USB_OTG_DCFG_DAD);
 8006728:	68fb      	ldr	r3, [r7, #12]
 800672a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800672e:	681b      	ldr	r3, [r3, #0]
 8006730:	68fa      	ldr	r2, [r7, #12]
 8006732:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8006736:	f423 63fe 	bic.w	r3, r3, #2032	; 0x7f0
 800673a:	6013      	str	r3, [r2, #0]
  USBx_DEVICE->DCFG |= ((uint32_t)address << 4) & USB_OTG_DCFG_DAD;
 800673c:	68fb      	ldr	r3, [r7, #12]
 800673e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006742:	681a      	ldr	r2, [r3, #0]
 8006744:	78fb      	ldrb	r3, [r7, #3]
 8006746:	011b      	lsls	r3, r3, #4
 8006748:	f403 63fe 	and.w	r3, r3, #2032	; 0x7f0
 800674c:	68f9      	ldr	r1, [r7, #12]
 800674e:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8006752:	4313      	orrs	r3, r2
 8006754:	600b      	str	r3, [r1, #0]

  return HAL_OK;
 8006756:	2300      	movs	r3, #0
}
 8006758:	4618      	mov	r0, r3
 800675a:	3714      	adds	r7, #20
 800675c:	46bd      	mov	sp, r7
 800675e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006762:	4770      	bx	lr

08006764 <USB_DevConnect>:
  * @brief  USB_DevConnect : Connect the USB device by enabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevConnect(USB_OTG_GlobalTypeDef *USBx)
{
 8006764:	b480      	push	{r7}
 8006766:	b085      	sub	sp, #20
 8006768:	af00      	add	r7, sp, #0
 800676a:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800676c:	687b      	ldr	r3, [r7, #4]
 800676e:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 8006770:	68fb      	ldr	r3, [r7, #12]
 8006772:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8006776:	681b      	ldr	r3, [r3, #0]
 8006778:	68fa      	ldr	r2, [r7, #12]
 800677a:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 800677e:	f023 0303 	bic.w	r3, r3, #3
 8006782:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_SDIS;
 8006784:	68fb      	ldr	r3, [r7, #12]
 8006786:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800678a:	685b      	ldr	r3, [r3, #4]
 800678c:	68fa      	ldr	r2, [r7, #12]
 800678e:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8006792:	f023 0302 	bic.w	r3, r3, #2
 8006796:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 8006798:	2300      	movs	r3, #0
}
 800679a:	4618      	mov	r0, r3
 800679c:	3714      	adds	r7, #20
 800679e:	46bd      	mov	sp, r7
 80067a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80067a4:	4770      	bx	lr

080067a6 <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect : Disconnect the USB device by disabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevDisconnect(USB_OTG_GlobalTypeDef *USBx)
{
 80067a6:	b480      	push	{r7}
 80067a8:	b085      	sub	sp, #20
 80067aa:	af00      	add	r7, sp, #0
 80067ac:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80067ae:	687b      	ldr	r3, [r7, #4]
 80067b0:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 80067b2:	68fb      	ldr	r3, [r7, #12]
 80067b4:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 80067b8:	681b      	ldr	r3, [r3, #0]
 80067ba:	68fa      	ldr	r2, [r7, #12]
 80067bc:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 80067c0:	f023 0303 	bic.w	r3, r3, #3
 80067c4:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 80067c6:	68fb      	ldr	r3, [r7, #12]
 80067c8:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80067cc:	685b      	ldr	r3, [r3, #4]
 80067ce:	68fa      	ldr	r2, [r7, #12]
 80067d0:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80067d4:	f043 0302 	orr.w	r3, r3, #2
 80067d8:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 80067da:	2300      	movs	r3, #0
}
 80067dc:	4618      	mov	r0, r3
 80067de:	3714      	adds	r7, #20
 80067e0:	46bd      	mov	sp, r7
 80067e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80067e6:	4770      	bx	lr

080067e8 <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts: return the global USB interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t  USB_ReadInterrupts(USB_OTG_GlobalTypeDef *USBx)
{
 80067e8:	b480      	push	{r7}
 80067ea:	b085      	sub	sp, #20
 80067ec:	af00      	add	r7, sp, #0
 80067ee:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->GINTSTS;
 80067f0:	687b      	ldr	r3, [r7, #4]
 80067f2:	695b      	ldr	r3, [r3, #20]
 80067f4:	60fb      	str	r3, [r7, #12]
  tmpreg &= USBx->GINTMSK;
 80067f6:	687b      	ldr	r3, [r7, #4]
 80067f8:	699b      	ldr	r3, [r3, #24]
 80067fa:	68fa      	ldr	r2, [r7, #12]
 80067fc:	4013      	ands	r3, r2
 80067fe:	60fb      	str	r3, [r7, #12]

  return tmpreg;
 8006800:	68fb      	ldr	r3, [r7, #12]
}
 8006802:	4618      	mov	r0, r3
 8006804:	3714      	adds	r7, #20
 8006806:	46bd      	mov	sp, r7
 8006808:	f85d 7b04 	ldr.w	r7, [sp], #4
 800680c:	4770      	bx	lr

0800680e <USB_ReadDevAllOutEpInterrupt>:
  * @brief  USB_ReadDevAllOutEpInterrupt: return the USB device OUT endpoints interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t USB_ReadDevAllOutEpInterrupt(USB_OTG_GlobalTypeDef *USBx)
{
 800680e:	b480      	push	{r7}
 8006810:	b085      	sub	sp, #20
 8006812:	af00      	add	r7, sp, #0
 8006814:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006816:	687b      	ldr	r3, [r7, #4]
 8006818:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 800681a:	68fb      	ldr	r3, [r7, #12]
 800681c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006820:	699b      	ldr	r3, [r3, #24]
 8006822:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 8006824:	68fb      	ldr	r3, [r7, #12]
 8006826:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800682a:	69db      	ldr	r3, [r3, #28]
 800682c:	68ba      	ldr	r2, [r7, #8]
 800682e:	4013      	ands	r3, r2
 8006830:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xffff0000U) >> 16);
 8006832:	68bb      	ldr	r3, [r7, #8]
 8006834:	0c1b      	lsrs	r3, r3, #16
}
 8006836:	4618      	mov	r0, r3
 8006838:	3714      	adds	r7, #20
 800683a:	46bd      	mov	sp, r7
 800683c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006840:	4770      	bx	lr

08006842 <USB_ReadDevAllInEpInterrupt>:
  * @brief  USB_ReadDevAllInEpInterrupt: return the USB device IN endpoints interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t USB_ReadDevAllInEpInterrupt(USB_OTG_GlobalTypeDef *USBx)
{
 8006842:	b480      	push	{r7}
 8006844:	b085      	sub	sp, #20
 8006846:	af00      	add	r7, sp, #0
 8006848:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800684a:	687b      	ldr	r3, [r7, #4]
 800684c:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 800684e:	68fb      	ldr	r3, [r7, #12]
 8006850:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006854:	699b      	ldr	r3, [r3, #24]
 8006856:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 8006858:	68fb      	ldr	r3, [r7, #12]
 800685a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800685e:	69db      	ldr	r3, [r3, #28]
 8006860:	68ba      	ldr	r2, [r7, #8]
 8006862:	4013      	ands	r3, r2
 8006864:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xFFFFU));
 8006866:	68bb      	ldr	r3, [r7, #8]
 8006868:	b29b      	uxth	r3, r3
}
 800686a:	4618      	mov	r0, r3
 800686c:	3714      	adds	r7, #20
 800686e:	46bd      	mov	sp, r7
 8006870:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006874:	4770      	bx	lr

08006876 <USB_ReadDevOutEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device OUT EP Interrupt register
  */
uint32_t USB_ReadDevOutEPInterrupt(USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 8006876:	b480      	push	{r7}
 8006878:	b085      	sub	sp, #20
 800687a:	af00      	add	r7, sp, #0
 800687c:	6078      	str	r0, [r7, #4]
 800687e:	460b      	mov	r3, r1
 8006880:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006882:	687b      	ldr	r3, [r7, #4]
 8006884:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_OUTEP((uint32_t)epnum)->DOEPINT;
 8006886:	78fb      	ldrb	r3, [r7, #3]
 8006888:	015a      	lsls	r2, r3, #5
 800688a:	68fb      	ldr	r3, [r7, #12]
 800688c:	4413      	add	r3, r2
 800688e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006892:	689b      	ldr	r3, [r3, #8]
 8006894:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DOEPMSK;
 8006896:	68fb      	ldr	r3, [r7, #12]
 8006898:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800689c:	695b      	ldr	r3, [r3, #20]
 800689e:	68ba      	ldr	r2, [r7, #8]
 80068a0:	4013      	ands	r3, r2
 80068a2:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 80068a4:	68bb      	ldr	r3, [r7, #8]
}
 80068a6:	4618      	mov	r0, r3
 80068a8:	3714      	adds	r7, #20
 80068aa:	46bd      	mov	sp, r7
 80068ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80068b0:	4770      	bx	lr

080068b2 <USB_ReadDevInEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device IN EP Interrupt register
  */
uint32_t USB_ReadDevInEPInterrupt(USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 80068b2:	b480      	push	{r7}
 80068b4:	b087      	sub	sp, #28
 80068b6:	af00      	add	r7, sp, #0
 80068b8:	6078      	str	r0, [r7, #4]
 80068ba:	460b      	mov	r3, r1
 80068bc:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80068be:	687b      	ldr	r3, [r7, #4]
 80068c0:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg;
  uint32_t msk;
  uint32_t emp;

  msk = USBx_DEVICE->DIEPMSK;
 80068c2:	697b      	ldr	r3, [r7, #20]
 80068c4:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80068c8:	691b      	ldr	r3, [r3, #16]
 80068ca:	613b      	str	r3, [r7, #16]
  emp = USBx_DEVICE->DIEPEMPMSK;
 80068cc:	697b      	ldr	r3, [r7, #20]
 80068ce:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80068d2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80068d4:	60fb      	str	r3, [r7, #12]
  msk |= ((emp >> (epnum & EP_ADDR_MSK)) & 0x1U) << 7;
 80068d6:	78fb      	ldrb	r3, [r7, #3]
 80068d8:	f003 030f 	and.w	r3, r3, #15
 80068dc:	68fa      	ldr	r2, [r7, #12]
 80068de:	fa22 f303 	lsr.w	r3, r2, r3
 80068e2:	01db      	lsls	r3, r3, #7
 80068e4:	b2db      	uxtb	r3, r3
 80068e6:	693a      	ldr	r2, [r7, #16]
 80068e8:	4313      	orrs	r3, r2
 80068ea:	613b      	str	r3, [r7, #16]
  tmpreg = USBx_INEP((uint32_t)epnum)->DIEPINT & msk;
 80068ec:	78fb      	ldrb	r3, [r7, #3]
 80068ee:	015a      	lsls	r2, r3, #5
 80068f0:	697b      	ldr	r3, [r7, #20]
 80068f2:	4413      	add	r3, r2
 80068f4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80068f8:	689b      	ldr	r3, [r3, #8]
 80068fa:	693a      	ldr	r2, [r7, #16]
 80068fc:	4013      	ands	r3, r2
 80068fe:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 8006900:	68bb      	ldr	r3, [r7, #8]
}
 8006902:	4618      	mov	r0, r3
 8006904:	371c      	adds	r7, #28
 8006906:	46bd      	mov	sp, r7
 8006908:	f85d 7b04 	ldr.w	r7, [sp], #4
 800690c:	4770      	bx	lr

0800690e <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(USB_OTG_GlobalTypeDef *USBx)
{
 800690e:	b480      	push	{r7}
 8006910:	b083      	sub	sp, #12
 8006912:	af00      	add	r7, sp, #0
 8006914:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 8006916:	687b      	ldr	r3, [r7, #4]
 8006918:	695b      	ldr	r3, [r3, #20]
 800691a:	f003 0301 	and.w	r3, r3, #1
}
 800691e:	4618      	mov	r0, r3
 8006920:	370c      	adds	r7, #12
 8006922:	46bd      	mov	sp, r7
 8006924:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006928:	4770      	bx	lr
	...

0800692c <USB_ActivateSetup>:
  * @brief  Activate EP0 for Setup transactions
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_ActivateSetup(USB_OTG_GlobalTypeDef *USBx)
{
 800692c:	b480      	push	{r7}
 800692e:	b085      	sub	sp, #20
 8006930:	af00      	add	r7, sp, #0
 8006932:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006934:	687b      	ldr	r3, [r7, #4]
 8006936:	60fb      	str	r3, [r7, #12]

  /* Set the MPS of the IN EP0 to 64 bytes */
  USBx_INEP(0U)->DIEPCTL &= ~USB_OTG_DIEPCTL_MPSIZ;
 8006938:	68fb      	ldr	r3, [r7, #12]
 800693a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800693e:	681a      	ldr	r2, [r3, #0]
 8006940:	68fb      	ldr	r3, [r7, #12]
 8006942:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006946:	4619      	mov	r1, r3
 8006948:	4b09      	ldr	r3, [pc, #36]	; (8006970 <USB_ActivateSetup+0x44>)
 800694a:	4013      	ands	r3, r2
 800694c:	600b      	str	r3, [r1, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_CGINAK;
 800694e:	68fb      	ldr	r3, [r7, #12]
 8006950:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006954:	685b      	ldr	r3, [r3, #4]
 8006956:	68fa      	ldr	r2, [r7, #12]
 8006958:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800695c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8006960:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 8006962:	2300      	movs	r3, #0
}
 8006964:	4618      	mov	r0, r3
 8006966:	3714      	adds	r7, #20
 8006968:	46bd      	mov	sp, r7
 800696a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800696e:	4770      	bx	lr
 8006970:	fffff800 	.word	0xfffff800

08006974 <USB_EP0_OutStart>:
  *           1 : DMA feature used
  * @param  psetup  pointer to setup packet
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0_OutStart(USB_OTG_GlobalTypeDef *USBx, uint8_t dma, uint8_t *psetup)
{
 8006974:	b480      	push	{r7}
 8006976:	b087      	sub	sp, #28
 8006978:	af00      	add	r7, sp, #0
 800697a:	60f8      	str	r0, [r7, #12]
 800697c:	460b      	mov	r3, r1
 800697e:	607a      	str	r2, [r7, #4]
 8006980:	72fb      	strb	r3, [r7, #11]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006982:	68fb      	ldr	r3, [r7, #12]
 8006984:	617b      	str	r3, [r7, #20]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 8006986:	68fb      	ldr	r3, [r7, #12]
 8006988:	333c      	adds	r3, #60	; 0x3c
 800698a:	3304      	adds	r3, #4
 800698c:	681b      	ldr	r3, [r3, #0]
 800698e:	613b      	str	r3, [r7, #16]

  if (gSNPSiD > USB_OTG_CORE_ID_300A)
 8006990:	693b      	ldr	r3, [r7, #16]
 8006992:	4a26      	ldr	r2, [pc, #152]	; (8006a2c <USB_EP0_OutStart+0xb8>)
 8006994:	4293      	cmp	r3, r2
 8006996:	d90a      	bls.n	80069ae <USB_EP0_OutStart+0x3a>
  {
    if ((USBx_OUTEP(0U)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8006998:	697b      	ldr	r3, [r7, #20]
 800699a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800699e:	681b      	ldr	r3, [r3, #0]
 80069a0:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 80069a4:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80069a8:	d101      	bne.n	80069ae <USB_EP0_OutStart+0x3a>
    {
      return HAL_OK;
 80069aa:	2300      	movs	r3, #0
 80069ac:	e037      	b.n	8006a1e <USB_EP0_OutStart+0xaa>
    }
  }

  USBx_OUTEP(0U)->DOEPTSIZ = 0U;
 80069ae:	697b      	ldr	r3, [r7, #20]
 80069b0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80069b4:	461a      	mov	r2, r3
 80069b6:	2300      	movs	r3, #0
 80069b8:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 80069ba:	697b      	ldr	r3, [r7, #20]
 80069bc:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80069c0:	691b      	ldr	r3, [r3, #16]
 80069c2:	697a      	ldr	r2, [r7, #20]
 80069c4:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80069c8:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 80069cc:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (3U * 8U);
 80069ce:	697b      	ldr	r3, [r7, #20]
 80069d0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80069d4:	691b      	ldr	r3, [r3, #16]
 80069d6:	697a      	ldr	r2, [r7, #20]
 80069d8:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80069dc:	f043 0318 	orr.w	r3, r3, #24
 80069e0:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |=  USB_OTG_DOEPTSIZ_STUPCNT;
 80069e2:	697b      	ldr	r3, [r7, #20]
 80069e4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80069e8:	691b      	ldr	r3, [r3, #16]
 80069ea:	697a      	ldr	r2, [r7, #20]
 80069ec:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80069f0:	f043 43c0 	orr.w	r3, r3, #1610612736	; 0x60000000
 80069f4:	6113      	str	r3, [r2, #16]

  if (dma == 1U)
 80069f6:	7afb      	ldrb	r3, [r7, #11]
 80069f8:	2b01      	cmp	r3, #1
 80069fa:	d10f      	bne.n	8006a1c <USB_EP0_OutStart+0xa8>
  {
    USBx_OUTEP(0U)->DOEPDMA = (uint32_t)psetup;
 80069fc:	697b      	ldr	r3, [r7, #20]
 80069fe:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006a02:	461a      	mov	r2, r3
 8006a04:	687b      	ldr	r3, [r7, #4]
 8006a06:	6153      	str	r3, [r2, #20]
    /* EP enable */
    USBx_OUTEP(0U)->DOEPCTL |= USB_OTG_DOEPCTL_EPENA | USB_OTG_DOEPCTL_USBAEP;
 8006a08:	697b      	ldr	r3, [r7, #20]
 8006a0a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006a0e:	681b      	ldr	r3, [r3, #0]
 8006a10:	697a      	ldr	r2, [r7, #20]
 8006a12:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8006a16:	f043 2380 	orr.w	r3, r3, #2147516416	; 0x80008000
 8006a1a:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 8006a1c:	2300      	movs	r3, #0
}
 8006a1e:	4618      	mov	r0, r3
 8006a20:	371c      	adds	r7, #28
 8006a22:	46bd      	mov	sp, r7
 8006a24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a28:	4770      	bx	lr
 8006a2a:	bf00      	nop
 8006a2c:	4f54300a 	.word	0x4f54300a

08006a30 <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 8006a30:	b480      	push	{r7}
 8006a32:	b085      	sub	sp, #20
 8006a34:	af00      	add	r7, sp, #0
 8006a36:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8006a38:	2300      	movs	r3, #0
 8006a3a:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8006a3c:	68fb      	ldr	r3, [r7, #12]
 8006a3e:	3301      	adds	r3, #1
 8006a40:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8006a42:	68fb      	ldr	r3, [r7, #12]
 8006a44:	4a13      	ldr	r2, [pc, #76]	; (8006a94 <USB_CoreReset+0x64>)
 8006a46:	4293      	cmp	r3, r2
 8006a48:	d901      	bls.n	8006a4e <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 8006a4a:	2303      	movs	r3, #3
 8006a4c:	e01b      	b.n	8006a86 <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8006a4e:	687b      	ldr	r3, [r7, #4]
 8006a50:	691b      	ldr	r3, [r3, #16]
 8006a52:	2b00      	cmp	r3, #0
 8006a54:	daf2      	bge.n	8006a3c <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 8006a56:	2300      	movs	r3, #0
 8006a58:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 8006a5a:	687b      	ldr	r3, [r7, #4]
 8006a5c:	691b      	ldr	r3, [r3, #16]
 8006a5e:	f043 0201 	orr.w	r2, r3, #1
 8006a62:	687b      	ldr	r3, [r7, #4]
 8006a64:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8006a66:	68fb      	ldr	r3, [r7, #12]
 8006a68:	3301      	adds	r3, #1
 8006a6a:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8006a6c:	68fb      	ldr	r3, [r7, #12]
 8006a6e:	4a09      	ldr	r2, [pc, #36]	; (8006a94 <USB_CoreReset+0x64>)
 8006a70:	4293      	cmp	r3, r2
 8006a72:	d901      	bls.n	8006a78 <USB_CoreReset+0x48>
    {
      return HAL_TIMEOUT;
 8006a74:	2303      	movs	r3, #3
 8006a76:	e006      	b.n	8006a86 <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 8006a78:	687b      	ldr	r3, [r7, #4]
 8006a7a:	691b      	ldr	r3, [r3, #16]
 8006a7c:	f003 0301 	and.w	r3, r3, #1
 8006a80:	2b01      	cmp	r3, #1
 8006a82:	d0f0      	beq.n	8006a66 <USB_CoreReset+0x36>

  return HAL_OK;
 8006a84:	2300      	movs	r3, #0
}
 8006a86:	4618      	mov	r0, r3
 8006a88:	3714      	adds	r7, #20
 8006a8a:	46bd      	mov	sp, r7
 8006a8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a90:	4770      	bx	lr
 8006a92:	bf00      	nop
 8006a94:	00030d40 	.word	0x00030d40

08006a98 <USBD_CDC_Init>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CDC_Init(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8006a98:	b580      	push	{r7, lr}
 8006a9a:	b084      	sub	sp, #16
 8006a9c:	af00      	add	r7, sp, #0
 8006a9e:	6078      	str	r0, [r7, #4]
 8006aa0:	460b      	mov	r3, r1
 8006aa2:	70fb      	strb	r3, [r7, #3]
  UNUSED(cfgidx);
  USBD_CDC_HandleTypeDef *hcdc;

  hcdc = (USBD_CDC_HandleTypeDef *)USBD_malloc(sizeof(USBD_CDC_HandleTypeDef));
 8006aa4:	f44f 7007 	mov.w	r0, #540	; 0x21c
 8006aa8:	f002 fd16 	bl	80094d8 <USBD_static_malloc>
 8006aac:	60f8      	str	r0, [r7, #12]

  if (hcdc == NULL)
 8006aae:	68fb      	ldr	r3, [r7, #12]
 8006ab0:	2b00      	cmp	r3, #0
 8006ab2:	d109      	bne.n	8006ac8 <USBD_CDC_Init+0x30>
  {
    pdev->pClassDataCmsit[pdev->classId] = NULL;
 8006ab4:	687b      	ldr	r3, [r7, #4]
 8006ab6:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8006aba:	687b      	ldr	r3, [r7, #4]
 8006abc:	32b0      	adds	r2, #176	; 0xb0
 8006abe:	2100      	movs	r1, #0
 8006ac0:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    return (uint8_t)USBD_EMEM;
 8006ac4:	2302      	movs	r3, #2
 8006ac6:	e0d4      	b.n	8006c72 <USBD_CDC_Init+0x1da>
  }

  (void)USBD_memset(hcdc, 0, sizeof(USBD_CDC_HandleTypeDef));
 8006ac8:	f44f 7207 	mov.w	r2, #540	; 0x21c
 8006acc:	2100      	movs	r1, #0
 8006ace:	68f8      	ldr	r0, [r7, #12]
 8006ad0:	f002 fd70 	bl	80095b4 <memset>

  pdev->pClassDataCmsit[pdev->classId] = (void *)hcdc;
 8006ad4:	687b      	ldr	r3, [r7, #4]
 8006ad6:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8006ada:	687b      	ldr	r3, [r7, #4]
 8006adc:	32b0      	adds	r2, #176	; 0xb0
 8006ade:	68f9      	ldr	r1, [r7, #12]
 8006ae0:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  pdev->pClassData = pdev->pClassDataCmsit[pdev->classId];
 8006ae4:	687b      	ldr	r3, [r7, #4]
 8006ae6:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8006aea:	687b      	ldr	r3, [r7, #4]
 8006aec:	32b0      	adds	r2, #176	; 0xb0
 8006aee:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 8006af2:	687b      	ldr	r3, [r7, #4]
 8006af4:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc
  CDCInEpAdd  = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_BULK);
  CDCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK);
  CDCCmdEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_INTR);
#endif /* USE_USBD_COMPOSITE */

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 8006af8:	687b      	ldr	r3, [r7, #4]
 8006afa:	7c1b      	ldrb	r3, [r3, #16]
 8006afc:	2b00      	cmp	r3, #0
 8006afe:	d138      	bne.n	8006b72 <USBD_CDC_Init+0xda>
  {
    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, CDCInEpAdd, USBD_EP_TYPE_BULK,
 8006b00:	4b5e      	ldr	r3, [pc, #376]	; (8006c7c <USBD_CDC_Init+0x1e4>)
 8006b02:	7819      	ldrb	r1, [r3, #0]
 8006b04:	f44f 7300 	mov.w	r3, #512	; 0x200
 8006b08:	2202      	movs	r2, #2
 8006b0a:	6878      	ldr	r0, [r7, #4]
 8006b0c:	f002 fbc1 	bl	8009292 <USBD_LL_OpenEP>
                         CDC_DATA_HS_IN_PACKET_SIZE);

    pdev->ep_in[CDCInEpAdd & 0xFU].is_used = 1U;
 8006b10:	4b5a      	ldr	r3, [pc, #360]	; (8006c7c <USBD_CDC_Init+0x1e4>)
 8006b12:	781b      	ldrb	r3, [r3, #0]
 8006b14:	f003 020f 	and.w	r2, r3, #15
 8006b18:	6879      	ldr	r1, [r7, #4]
 8006b1a:	4613      	mov	r3, r2
 8006b1c:	009b      	lsls	r3, r3, #2
 8006b1e:	4413      	add	r3, r2
 8006b20:	009b      	lsls	r3, r3, #2
 8006b22:	440b      	add	r3, r1
 8006b24:	3324      	adds	r3, #36	; 0x24
 8006b26:	2201      	movs	r2, #1
 8006b28:	801a      	strh	r2, [r3, #0]

    /* Open EP OUT */
    (void)USBD_LL_OpenEP(pdev, CDCOutEpAdd, USBD_EP_TYPE_BULK,
 8006b2a:	4b55      	ldr	r3, [pc, #340]	; (8006c80 <USBD_CDC_Init+0x1e8>)
 8006b2c:	7819      	ldrb	r1, [r3, #0]
 8006b2e:	f44f 7300 	mov.w	r3, #512	; 0x200
 8006b32:	2202      	movs	r2, #2
 8006b34:	6878      	ldr	r0, [r7, #4]
 8006b36:	f002 fbac 	bl	8009292 <USBD_LL_OpenEP>
                         CDC_DATA_HS_OUT_PACKET_SIZE);

    pdev->ep_out[CDCOutEpAdd & 0xFU].is_used = 1U;
 8006b3a:	4b51      	ldr	r3, [pc, #324]	; (8006c80 <USBD_CDC_Init+0x1e8>)
 8006b3c:	781b      	ldrb	r3, [r3, #0]
 8006b3e:	f003 020f 	and.w	r2, r3, #15
 8006b42:	6879      	ldr	r1, [r7, #4]
 8006b44:	4613      	mov	r3, r2
 8006b46:	009b      	lsls	r3, r3, #2
 8006b48:	4413      	add	r3, r2
 8006b4a:	009b      	lsls	r3, r3, #2
 8006b4c:	440b      	add	r3, r1
 8006b4e:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 8006b52:	2201      	movs	r2, #1
 8006b54:	801a      	strh	r2, [r3, #0]

    /* Set bInterval for CDC CMD Endpoint */
    pdev->ep_in[CDCCmdEpAdd & 0xFU].bInterval = CDC_HS_BINTERVAL;
 8006b56:	4b4b      	ldr	r3, [pc, #300]	; (8006c84 <USBD_CDC_Init+0x1ec>)
 8006b58:	781b      	ldrb	r3, [r3, #0]
 8006b5a:	f003 020f 	and.w	r2, r3, #15
 8006b5e:	6879      	ldr	r1, [r7, #4]
 8006b60:	4613      	mov	r3, r2
 8006b62:	009b      	lsls	r3, r3, #2
 8006b64:	4413      	add	r3, r2
 8006b66:	009b      	lsls	r3, r3, #2
 8006b68:	440b      	add	r3, r1
 8006b6a:	3326      	adds	r3, #38	; 0x26
 8006b6c:	2210      	movs	r2, #16
 8006b6e:	801a      	strh	r2, [r3, #0]
 8006b70:	e035      	b.n	8006bde <USBD_CDC_Init+0x146>
  }
  else
  {
    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, CDCInEpAdd, USBD_EP_TYPE_BULK,
 8006b72:	4b42      	ldr	r3, [pc, #264]	; (8006c7c <USBD_CDC_Init+0x1e4>)
 8006b74:	7819      	ldrb	r1, [r3, #0]
 8006b76:	2340      	movs	r3, #64	; 0x40
 8006b78:	2202      	movs	r2, #2
 8006b7a:	6878      	ldr	r0, [r7, #4]
 8006b7c:	f002 fb89 	bl	8009292 <USBD_LL_OpenEP>
                         CDC_DATA_FS_IN_PACKET_SIZE);

    pdev->ep_in[CDCInEpAdd & 0xFU].is_used = 1U;
 8006b80:	4b3e      	ldr	r3, [pc, #248]	; (8006c7c <USBD_CDC_Init+0x1e4>)
 8006b82:	781b      	ldrb	r3, [r3, #0]
 8006b84:	f003 020f 	and.w	r2, r3, #15
 8006b88:	6879      	ldr	r1, [r7, #4]
 8006b8a:	4613      	mov	r3, r2
 8006b8c:	009b      	lsls	r3, r3, #2
 8006b8e:	4413      	add	r3, r2
 8006b90:	009b      	lsls	r3, r3, #2
 8006b92:	440b      	add	r3, r1
 8006b94:	3324      	adds	r3, #36	; 0x24
 8006b96:	2201      	movs	r2, #1
 8006b98:	801a      	strh	r2, [r3, #0]

    /* Open EP OUT */
    (void)USBD_LL_OpenEP(pdev, CDCOutEpAdd, USBD_EP_TYPE_BULK,
 8006b9a:	4b39      	ldr	r3, [pc, #228]	; (8006c80 <USBD_CDC_Init+0x1e8>)
 8006b9c:	7819      	ldrb	r1, [r3, #0]
 8006b9e:	2340      	movs	r3, #64	; 0x40
 8006ba0:	2202      	movs	r2, #2
 8006ba2:	6878      	ldr	r0, [r7, #4]
 8006ba4:	f002 fb75 	bl	8009292 <USBD_LL_OpenEP>
                         CDC_DATA_FS_OUT_PACKET_SIZE);

    pdev->ep_out[CDCOutEpAdd & 0xFU].is_used = 1U;
 8006ba8:	4b35      	ldr	r3, [pc, #212]	; (8006c80 <USBD_CDC_Init+0x1e8>)
 8006baa:	781b      	ldrb	r3, [r3, #0]
 8006bac:	f003 020f 	and.w	r2, r3, #15
 8006bb0:	6879      	ldr	r1, [r7, #4]
 8006bb2:	4613      	mov	r3, r2
 8006bb4:	009b      	lsls	r3, r3, #2
 8006bb6:	4413      	add	r3, r2
 8006bb8:	009b      	lsls	r3, r3, #2
 8006bba:	440b      	add	r3, r1
 8006bbc:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 8006bc0:	2201      	movs	r2, #1
 8006bc2:	801a      	strh	r2, [r3, #0]

    /* Set bInterval for CMD Endpoint */
    pdev->ep_in[CDCCmdEpAdd & 0xFU].bInterval = CDC_FS_BINTERVAL;
 8006bc4:	4b2f      	ldr	r3, [pc, #188]	; (8006c84 <USBD_CDC_Init+0x1ec>)
 8006bc6:	781b      	ldrb	r3, [r3, #0]
 8006bc8:	f003 020f 	and.w	r2, r3, #15
 8006bcc:	6879      	ldr	r1, [r7, #4]
 8006bce:	4613      	mov	r3, r2
 8006bd0:	009b      	lsls	r3, r3, #2
 8006bd2:	4413      	add	r3, r2
 8006bd4:	009b      	lsls	r3, r3, #2
 8006bd6:	440b      	add	r3, r1
 8006bd8:	3326      	adds	r3, #38	; 0x26
 8006bda:	2210      	movs	r2, #16
 8006bdc:	801a      	strh	r2, [r3, #0]
  }

  /* Open Command IN EP */
  (void)USBD_LL_OpenEP(pdev, CDCCmdEpAdd, USBD_EP_TYPE_INTR, CDC_CMD_PACKET_SIZE);
 8006bde:	4b29      	ldr	r3, [pc, #164]	; (8006c84 <USBD_CDC_Init+0x1ec>)
 8006be0:	7819      	ldrb	r1, [r3, #0]
 8006be2:	2308      	movs	r3, #8
 8006be4:	2203      	movs	r2, #3
 8006be6:	6878      	ldr	r0, [r7, #4]
 8006be8:	f002 fb53 	bl	8009292 <USBD_LL_OpenEP>
  pdev->ep_in[CDCCmdEpAdd & 0xFU].is_used = 1U;
 8006bec:	4b25      	ldr	r3, [pc, #148]	; (8006c84 <USBD_CDC_Init+0x1ec>)
 8006bee:	781b      	ldrb	r3, [r3, #0]
 8006bf0:	f003 020f 	and.w	r2, r3, #15
 8006bf4:	6879      	ldr	r1, [r7, #4]
 8006bf6:	4613      	mov	r3, r2
 8006bf8:	009b      	lsls	r3, r3, #2
 8006bfa:	4413      	add	r3, r2
 8006bfc:	009b      	lsls	r3, r3, #2
 8006bfe:	440b      	add	r3, r1
 8006c00:	3324      	adds	r3, #36	; 0x24
 8006c02:	2201      	movs	r2, #1
 8006c04:	801a      	strh	r2, [r3, #0]

  hcdc->RxBuffer = NULL;
 8006c06:	68fb      	ldr	r3, [r7, #12]
 8006c08:	2200      	movs	r2, #0
 8006c0a:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204

  /* Init  physical Interface components */
  ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Init();
 8006c0e:	687b      	ldr	r3, [r7, #4]
 8006c10:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 8006c14:	687a      	ldr	r2, [r7, #4]
 8006c16:	33b0      	adds	r3, #176	; 0xb0
 8006c18:	009b      	lsls	r3, r3, #2
 8006c1a:	4413      	add	r3, r2
 8006c1c:	685b      	ldr	r3, [r3, #4]
 8006c1e:	681b      	ldr	r3, [r3, #0]
 8006c20:	4798      	blx	r3

  /* Init Xfer states */
  hcdc->TxState = 0U;
 8006c22:	68fb      	ldr	r3, [r7, #12]
 8006c24:	2200      	movs	r2, #0
 8006c26:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
  hcdc->RxState = 0U;
 8006c2a:	68fb      	ldr	r3, [r7, #12]
 8006c2c:	2200      	movs	r2, #0
 8006c2e:	f8c3 2218 	str.w	r2, [r3, #536]	; 0x218

  if (hcdc->RxBuffer == NULL)
 8006c32:	68fb      	ldr	r3, [r7, #12]
 8006c34:	f8d3 3204 	ldr.w	r3, [r3, #516]	; 0x204
 8006c38:	2b00      	cmp	r3, #0
 8006c3a:	d101      	bne.n	8006c40 <USBD_CDC_Init+0x1a8>
  {
    return (uint8_t)USBD_EMEM;
 8006c3c:	2302      	movs	r3, #2
 8006c3e:	e018      	b.n	8006c72 <USBD_CDC_Init+0x1da>
  }

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 8006c40:	687b      	ldr	r3, [r7, #4]
 8006c42:	7c1b      	ldrb	r3, [r3, #16]
 8006c44:	2b00      	cmp	r3, #0
 8006c46:	d10a      	bne.n	8006c5e <USBD_CDC_Init+0x1c6>
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 8006c48:	4b0d      	ldr	r3, [pc, #52]	; (8006c80 <USBD_CDC_Init+0x1e8>)
 8006c4a:	7819      	ldrb	r1, [r3, #0]
 8006c4c:	68fb      	ldr	r3, [r7, #12]
 8006c4e:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8006c52:	f44f 7300 	mov.w	r3, #512	; 0x200
 8006c56:	6878      	ldr	r0, [r7, #4]
 8006c58:	f002 fc0a 	bl	8009470 <USBD_LL_PrepareReceive>
 8006c5c:	e008      	b.n	8006c70 <USBD_CDC_Init+0x1d8>
                                 CDC_DATA_HS_OUT_PACKET_SIZE);
  }
  else
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 8006c5e:	4b08      	ldr	r3, [pc, #32]	; (8006c80 <USBD_CDC_Init+0x1e8>)
 8006c60:	7819      	ldrb	r1, [r3, #0]
 8006c62:	68fb      	ldr	r3, [r7, #12]
 8006c64:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8006c68:	2340      	movs	r3, #64	; 0x40
 8006c6a:	6878      	ldr	r0, [r7, #4]
 8006c6c:	f002 fc00 	bl	8009470 <USBD_LL_PrepareReceive>
                                 CDC_DATA_FS_OUT_PACKET_SIZE);
  }

  return (uint8_t)USBD_OK;
 8006c70:	2300      	movs	r3, #0
}
 8006c72:	4618      	mov	r0, r3
 8006c74:	3710      	adds	r7, #16
 8006c76:	46bd      	mov	sp, r7
 8006c78:	bd80      	pop	{r7, pc}
 8006c7a:	bf00      	nop
 8006c7c:	24000097 	.word	0x24000097
 8006c80:	24000098 	.word	0x24000098
 8006c84:	24000099 	.word	0x24000099

08006c88 <USBD_CDC_DeInit>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CDC_DeInit(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8006c88:	b580      	push	{r7, lr}
 8006c8a:	b082      	sub	sp, #8
 8006c8c:	af00      	add	r7, sp, #0
 8006c8e:	6078      	str	r0, [r7, #4]
 8006c90:	460b      	mov	r3, r1
 8006c92:	70fb      	strb	r3, [r7, #3]
  CDCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK);
  CDCCmdEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_INTR);
#endif /* USE_USBD_COMPOSITE */

  /* Close EP IN */
  (void)USBD_LL_CloseEP(pdev, CDCInEpAdd);
 8006c94:	4b3a      	ldr	r3, [pc, #232]	; (8006d80 <USBD_CDC_DeInit+0xf8>)
 8006c96:	781b      	ldrb	r3, [r3, #0]
 8006c98:	4619      	mov	r1, r3
 8006c9a:	6878      	ldr	r0, [r7, #4]
 8006c9c:	f002 fb1f 	bl	80092de <USBD_LL_CloseEP>
  pdev->ep_in[CDCInEpAdd & 0xFU].is_used = 0U;
 8006ca0:	4b37      	ldr	r3, [pc, #220]	; (8006d80 <USBD_CDC_DeInit+0xf8>)
 8006ca2:	781b      	ldrb	r3, [r3, #0]
 8006ca4:	f003 020f 	and.w	r2, r3, #15
 8006ca8:	6879      	ldr	r1, [r7, #4]
 8006caa:	4613      	mov	r3, r2
 8006cac:	009b      	lsls	r3, r3, #2
 8006cae:	4413      	add	r3, r2
 8006cb0:	009b      	lsls	r3, r3, #2
 8006cb2:	440b      	add	r3, r1
 8006cb4:	3324      	adds	r3, #36	; 0x24
 8006cb6:	2200      	movs	r2, #0
 8006cb8:	801a      	strh	r2, [r3, #0]

  /* Close EP OUT */
  (void)USBD_LL_CloseEP(pdev, CDCOutEpAdd);
 8006cba:	4b32      	ldr	r3, [pc, #200]	; (8006d84 <USBD_CDC_DeInit+0xfc>)
 8006cbc:	781b      	ldrb	r3, [r3, #0]
 8006cbe:	4619      	mov	r1, r3
 8006cc0:	6878      	ldr	r0, [r7, #4]
 8006cc2:	f002 fb0c 	bl	80092de <USBD_LL_CloseEP>
  pdev->ep_out[CDCOutEpAdd & 0xFU].is_used = 0U;
 8006cc6:	4b2f      	ldr	r3, [pc, #188]	; (8006d84 <USBD_CDC_DeInit+0xfc>)
 8006cc8:	781b      	ldrb	r3, [r3, #0]
 8006cca:	f003 020f 	and.w	r2, r3, #15
 8006cce:	6879      	ldr	r1, [r7, #4]
 8006cd0:	4613      	mov	r3, r2
 8006cd2:	009b      	lsls	r3, r3, #2
 8006cd4:	4413      	add	r3, r2
 8006cd6:	009b      	lsls	r3, r3, #2
 8006cd8:	440b      	add	r3, r1
 8006cda:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 8006cde:	2200      	movs	r2, #0
 8006ce0:	801a      	strh	r2, [r3, #0]

  /* Close Command IN EP */
  (void)USBD_LL_CloseEP(pdev, CDCCmdEpAdd);
 8006ce2:	4b29      	ldr	r3, [pc, #164]	; (8006d88 <USBD_CDC_DeInit+0x100>)
 8006ce4:	781b      	ldrb	r3, [r3, #0]
 8006ce6:	4619      	mov	r1, r3
 8006ce8:	6878      	ldr	r0, [r7, #4]
 8006cea:	f002 faf8 	bl	80092de <USBD_LL_CloseEP>
  pdev->ep_in[CDCCmdEpAdd & 0xFU].is_used = 0U;
 8006cee:	4b26      	ldr	r3, [pc, #152]	; (8006d88 <USBD_CDC_DeInit+0x100>)
 8006cf0:	781b      	ldrb	r3, [r3, #0]
 8006cf2:	f003 020f 	and.w	r2, r3, #15
 8006cf6:	6879      	ldr	r1, [r7, #4]
 8006cf8:	4613      	mov	r3, r2
 8006cfa:	009b      	lsls	r3, r3, #2
 8006cfc:	4413      	add	r3, r2
 8006cfe:	009b      	lsls	r3, r3, #2
 8006d00:	440b      	add	r3, r1
 8006d02:	3324      	adds	r3, #36	; 0x24
 8006d04:	2200      	movs	r2, #0
 8006d06:	801a      	strh	r2, [r3, #0]
  pdev->ep_in[CDCCmdEpAdd & 0xFU].bInterval = 0U;
 8006d08:	4b1f      	ldr	r3, [pc, #124]	; (8006d88 <USBD_CDC_DeInit+0x100>)
 8006d0a:	781b      	ldrb	r3, [r3, #0]
 8006d0c:	f003 020f 	and.w	r2, r3, #15
 8006d10:	6879      	ldr	r1, [r7, #4]
 8006d12:	4613      	mov	r3, r2
 8006d14:	009b      	lsls	r3, r3, #2
 8006d16:	4413      	add	r3, r2
 8006d18:	009b      	lsls	r3, r3, #2
 8006d1a:	440b      	add	r3, r1
 8006d1c:	3326      	adds	r3, #38	; 0x26
 8006d1e:	2200      	movs	r2, #0
 8006d20:	801a      	strh	r2, [r3, #0]

  /* DeInit  physical Interface components */
  if (pdev->pClassDataCmsit[pdev->classId] != NULL)
 8006d22:	687b      	ldr	r3, [r7, #4]
 8006d24:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8006d28:	687b      	ldr	r3, [r7, #4]
 8006d2a:	32b0      	adds	r2, #176	; 0xb0
 8006d2c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006d30:	2b00      	cmp	r3, #0
 8006d32:	d01f      	beq.n	8006d74 <USBD_CDC_DeInit+0xec>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->DeInit();
 8006d34:	687b      	ldr	r3, [r7, #4]
 8006d36:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 8006d3a:	687a      	ldr	r2, [r7, #4]
 8006d3c:	33b0      	adds	r3, #176	; 0xb0
 8006d3e:	009b      	lsls	r3, r3, #2
 8006d40:	4413      	add	r3, r2
 8006d42:	685b      	ldr	r3, [r3, #4]
 8006d44:	685b      	ldr	r3, [r3, #4]
 8006d46:	4798      	blx	r3
    (void)USBD_free(pdev->pClassDataCmsit[pdev->classId]);
 8006d48:	687b      	ldr	r3, [r7, #4]
 8006d4a:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8006d4e:	687b      	ldr	r3, [r7, #4]
 8006d50:	32b0      	adds	r2, #176	; 0xb0
 8006d52:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006d56:	4618      	mov	r0, r3
 8006d58:	f002 fbcc 	bl	80094f4 <USBD_static_free>
    pdev->pClassDataCmsit[pdev->classId] = NULL;
 8006d5c:	687b      	ldr	r3, [r7, #4]
 8006d5e:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8006d62:	687b      	ldr	r3, [r7, #4]
 8006d64:	32b0      	adds	r2, #176	; 0xb0
 8006d66:	2100      	movs	r1, #0
 8006d68:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    pdev->pClassData = NULL;
 8006d6c:	687b      	ldr	r3, [r7, #4]
 8006d6e:	2200      	movs	r2, #0
 8006d70:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc
  }

  return (uint8_t)USBD_OK;
 8006d74:	2300      	movs	r3, #0
}
 8006d76:	4618      	mov	r0, r3
 8006d78:	3708      	adds	r7, #8
 8006d7a:	46bd      	mov	sp, r7
 8006d7c:	bd80      	pop	{r7, pc}
 8006d7e:	bf00      	nop
 8006d80:	24000097 	.word	0x24000097
 8006d84:	24000098 	.word	0x24000098
 8006d88:	24000099 	.word	0x24000099

08006d8c <USBD_CDC_Setup>:
  * @param  req: usb requests
  * @retval status
  */
static uint8_t USBD_CDC_Setup(USBD_HandleTypeDef *pdev,
                              USBD_SetupReqTypedef *req)
{
 8006d8c:	b580      	push	{r7, lr}
 8006d8e:	b086      	sub	sp, #24
 8006d90:	af00      	add	r7, sp, #0
 8006d92:	6078      	str	r0, [r7, #4]
 8006d94:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8006d96:	687b      	ldr	r3, [r7, #4]
 8006d98:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8006d9c:	687b      	ldr	r3, [r7, #4]
 8006d9e:	32b0      	adds	r2, #176	; 0xb0
 8006da0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006da4:	613b      	str	r3, [r7, #16]
  uint16_t len;
  uint8_t ifalt = 0U;
 8006da6:	2300      	movs	r3, #0
 8006da8:	737b      	strb	r3, [r7, #13]
  uint16_t status_info = 0U;
 8006daa:	2300      	movs	r3, #0
 8006dac:	817b      	strh	r3, [r7, #10]
  USBD_StatusTypeDef ret = USBD_OK;
 8006dae:	2300      	movs	r3, #0
 8006db0:	75fb      	strb	r3, [r7, #23]

  if (hcdc == NULL)
 8006db2:	693b      	ldr	r3, [r7, #16]
 8006db4:	2b00      	cmp	r3, #0
 8006db6:	d101      	bne.n	8006dbc <USBD_CDC_Setup+0x30>
  {
    return (uint8_t)USBD_FAIL;
 8006db8:	2303      	movs	r3, #3
 8006dba:	e0bf      	b.n	8006f3c <USBD_CDC_Setup+0x1b0>
  }

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8006dbc:	683b      	ldr	r3, [r7, #0]
 8006dbe:	781b      	ldrb	r3, [r3, #0]
 8006dc0:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8006dc4:	2b00      	cmp	r3, #0
 8006dc6:	d050      	beq.n	8006e6a <USBD_CDC_Setup+0xde>
 8006dc8:	2b20      	cmp	r3, #32
 8006dca:	f040 80af 	bne.w	8006f2c <USBD_CDC_Setup+0x1a0>
  {
    case USB_REQ_TYPE_CLASS:
      if (req->wLength != 0U)
 8006dce:	683b      	ldr	r3, [r7, #0]
 8006dd0:	88db      	ldrh	r3, [r3, #6]
 8006dd2:	2b00      	cmp	r3, #0
 8006dd4:	d03a      	beq.n	8006e4c <USBD_CDC_Setup+0xc0>
      {
        if ((req->bmRequest & 0x80U) != 0U)
 8006dd6:	683b      	ldr	r3, [r7, #0]
 8006dd8:	781b      	ldrb	r3, [r3, #0]
 8006dda:	b25b      	sxtb	r3, r3
 8006ddc:	2b00      	cmp	r3, #0
 8006dde:	da1b      	bge.n	8006e18 <USBD_CDC_Setup+0x8c>
        {
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
 8006de0:	687b      	ldr	r3, [r7, #4]
 8006de2:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 8006de6:	687a      	ldr	r2, [r7, #4]
 8006de8:	33b0      	adds	r3, #176	; 0xb0
 8006dea:	009b      	lsls	r3, r3, #2
 8006dec:	4413      	add	r3, r2
 8006dee:	685b      	ldr	r3, [r3, #4]
 8006df0:	689b      	ldr	r3, [r3, #8]
 8006df2:	683a      	ldr	r2, [r7, #0]
 8006df4:	7850      	ldrb	r0, [r2, #1]
                                                                           (uint8_t *)hcdc->data,
 8006df6:	6939      	ldr	r1, [r7, #16]
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
 8006df8:	683a      	ldr	r2, [r7, #0]
 8006dfa:	88d2      	ldrh	r2, [r2, #6]
 8006dfc:	4798      	blx	r3
                                                                           req->wLength);

          len = MIN(CDC_REQ_MAX_DATA_SIZE, req->wLength);
 8006dfe:	683b      	ldr	r3, [r7, #0]
 8006e00:	88db      	ldrh	r3, [r3, #6]
 8006e02:	2b07      	cmp	r3, #7
 8006e04:	bf28      	it	cs
 8006e06:	2307      	movcs	r3, #7
 8006e08:	81fb      	strh	r3, [r7, #14]
          (void)USBD_CtlSendData(pdev, (uint8_t *)hcdc->data, len);
 8006e0a:	693b      	ldr	r3, [r7, #16]
 8006e0c:	89fa      	ldrh	r2, [r7, #14]
 8006e0e:	4619      	mov	r1, r3
 8006e10:	6878      	ldr	r0, [r7, #4]
 8006e12:	f001 fd89 	bl	8008928 <USBD_CtlSendData>
      else
      {
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
                                                                         (uint8_t *)req, 0U);
      }
      break;
 8006e16:	e090      	b.n	8006f3a <USBD_CDC_Setup+0x1ae>
          hcdc->CmdOpCode = req->bRequest;
 8006e18:	683b      	ldr	r3, [r7, #0]
 8006e1a:	785a      	ldrb	r2, [r3, #1]
 8006e1c:	693b      	ldr	r3, [r7, #16]
 8006e1e:	f883 2200 	strb.w	r2, [r3, #512]	; 0x200
          hcdc->CmdLength = (uint8_t)MIN(req->wLength, USB_MAX_EP0_SIZE);
 8006e22:	683b      	ldr	r3, [r7, #0]
 8006e24:	88db      	ldrh	r3, [r3, #6]
 8006e26:	2b3f      	cmp	r3, #63	; 0x3f
 8006e28:	d803      	bhi.n	8006e32 <USBD_CDC_Setup+0xa6>
 8006e2a:	683b      	ldr	r3, [r7, #0]
 8006e2c:	88db      	ldrh	r3, [r3, #6]
 8006e2e:	b2da      	uxtb	r2, r3
 8006e30:	e000      	b.n	8006e34 <USBD_CDC_Setup+0xa8>
 8006e32:	2240      	movs	r2, #64	; 0x40
 8006e34:	693b      	ldr	r3, [r7, #16]
 8006e36:	f883 2201 	strb.w	r2, [r3, #513]	; 0x201
          (void)USBD_CtlPrepareRx(pdev, (uint8_t *)hcdc->data, hcdc->CmdLength);
 8006e3a:	6939      	ldr	r1, [r7, #16]
 8006e3c:	693b      	ldr	r3, [r7, #16]
 8006e3e:	f893 3201 	ldrb.w	r3, [r3, #513]	; 0x201
 8006e42:	461a      	mov	r2, r3
 8006e44:	6878      	ldr	r0, [r7, #4]
 8006e46:	f001 fd9b 	bl	8008980 <USBD_CtlPrepareRx>
      break;
 8006e4a:	e076      	b.n	8006f3a <USBD_CDC_Setup+0x1ae>
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
 8006e4c:	687b      	ldr	r3, [r7, #4]
 8006e4e:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 8006e52:	687a      	ldr	r2, [r7, #4]
 8006e54:	33b0      	adds	r3, #176	; 0xb0
 8006e56:	009b      	lsls	r3, r3, #2
 8006e58:	4413      	add	r3, r2
 8006e5a:	685b      	ldr	r3, [r3, #4]
 8006e5c:	689b      	ldr	r3, [r3, #8]
 8006e5e:	683a      	ldr	r2, [r7, #0]
 8006e60:	7850      	ldrb	r0, [r2, #1]
 8006e62:	2200      	movs	r2, #0
 8006e64:	6839      	ldr	r1, [r7, #0]
 8006e66:	4798      	blx	r3
      break;
 8006e68:	e067      	b.n	8006f3a <USBD_CDC_Setup+0x1ae>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 8006e6a:	683b      	ldr	r3, [r7, #0]
 8006e6c:	785b      	ldrb	r3, [r3, #1]
 8006e6e:	2b0b      	cmp	r3, #11
 8006e70:	d851      	bhi.n	8006f16 <USBD_CDC_Setup+0x18a>
 8006e72:	a201      	add	r2, pc, #4	; (adr r2, 8006e78 <USBD_CDC_Setup+0xec>)
 8006e74:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006e78:	08006ea9 	.word	0x08006ea9
 8006e7c:	08006f25 	.word	0x08006f25
 8006e80:	08006f17 	.word	0x08006f17
 8006e84:	08006f17 	.word	0x08006f17
 8006e88:	08006f17 	.word	0x08006f17
 8006e8c:	08006f17 	.word	0x08006f17
 8006e90:	08006f17 	.word	0x08006f17
 8006e94:	08006f17 	.word	0x08006f17
 8006e98:	08006f17 	.word	0x08006f17
 8006e9c:	08006f17 	.word	0x08006f17
 8006ea0:	08006ed3 	.word	0x08006ed3
 8006ea4:	08006efd 	.word	0x08006efd
      {
        case USB_REQ_GET_STATUS:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8006ea8:	687b      	ldr	r3, [r7, #4]
 8006eaa:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8006eae:	b2db      	uxtb	r3, r3
 8006eb0:	2b03      	cmp	r3, #3
 8006eb2:	d107      	bne.n	8006ec4 <USBD_CDC_Setup+0x138>
          {
            (void)USBD_CtlSendData(pdev, (uint8_t *)&status_info, 2U);
 8006eb4:	f107 030a 	add.w	r3, r7, #10
 8006eb8:	2202      	movs	r2, #2
 8006eba:	4619      	mov	r1, r3
 8006ebc:	6878      	ldr	r0, [r7, #4]
 8006ebe:	f001 fd33 	bl	8008928 <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 8006ec2:	e032      	b.n	8006f2a <USBD_CDC_Setup+0x19e>
            USBD_CtlError(pdev, req);
 8006ec4:	6839      	ldr	r1, [r7, #0]
 8006ec6:	6878      	ldr	r0, [r7, #4]
 8006ec8:	f001 fcbd 	bl	8008846 <USBD_CtlError>
            ret = USBD_FAIL;
 8006ecc:	2303      	movs	r3, #3
 8006ece:	75fb      	strb	r3, [r7, #23]
          break;
 8006ed0:	e02b      	b.n	8006f2a <USBD_CDC_Setup+0x19e>

        case USB_REQ_GET_INTERFACE:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8006ed2:	687b      	ldr	r3, [r7, #4]
 8006ed4:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8006ed8:	b2db      	uxtb	r3, r3
 8006eda:	2b03      	cmp	r3, #3
 8006edc:	d107      	bne.n	8006eee <USBD_CDC_Setup+0x162>
          {
            (void)USBD_CtlSendData(pdev, &ifalt, 1U);
 8006ede:	f107 030d 	add.w	r3, r7, #13
 8006ee2:	2201      	movs	r2, #1
 8006ee4:	4619      	mov	r1, r3
 8006ee6:	6878      	ldr	r0, [r7, #4]
 8006ee8:	f001 fd1e 	bl	8008928 <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 8006eec:	e01d      	b.n	8006f2a <USBD_CDC_Setup+0x19e>
            USBD_CtlError(pdev, req);
 8006eee:	6839      	ldr	r1, [r7, #0]
 8006ef0:	6878      	ldr	r0, [r7, #4]
 8006ef2:	f001 fca8 	bl	8008846 <USBD_CtlError>
            ret = USBD_FAIL;
 8006ef6:	2303      	movs	r3, #3
 8006ef8:	75fb      	strb	r3, [r7, #23]
          break;
 8006efa:	e016      	b.n	8006f2a <USBD_CDC_Setup+0x19e>

        case USB_REQ_SET_INTERFACE:
          if (pdev->dev_state != USBD_STATE_CONFIGURED)
 8006efc:	687b      	ldr	r3, [r7, #4]
 8006efe:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8006f02:	b2db      	uxtb	r3, r3
 8006f04:	2b03      	cmp	r3, #3
 8006f06:	d00f      	beq.n	8006f28 <USBD_CDC_Setup+0x19c>
          {
            USBD_CtlError(pdev, req);
 8006f08:	6839      	ldr	r1, [r7, #0]
 8006f0a:	6878      	ldr	r0, [r7, #4]
 8006f0c:	f001 fc9b 	bl	8008846 <USBD_CtlError>
            ret = USBD_FAIL;
 8006f10:	2303      	movs	r3, #3
 8006f12:	75fb      	strb	r3, [r7, #23]
          }
          break;
 8006f14:	e008      	b.n	8006f28 <USBD_CDC_Setup+0x19c>

        case USB_REQ_CLEAR_FEATURE:
          break;

        default:
          USBD_CtlError(pdev, req);
 8006f16:	6839      	ldr	r1, [r7, #0]
 8006f18:	6878      	ldr	r0, [r7, #4]
 8006f1a:	f001 fc94 	bl	8008846 <USBD_CtlError>
          ret = USBD_FAIL;
 8006f1e:	2303      	movs	r3, #3
 8006f20:	75fb      	strb	r3, [r7, #23]
          break;
 8006f22:	e002      	b.n	8006f2a <USBD_CDC_Setup+0x19e>
          break;
 8006f24:	bf00      	nop
 8006f26:	e008      	b.n	8006f3a <USBD_CDC_Setup+0x1ae>
          break;
 8006f28:	bf00      	nop
      }
      break;
 8006f2a:	e006      	b.n	8006f3a <USBD_CDC_Setup+0x1ae>

    default:
      USBD_CtlError(pdev, req);
 8006f2c:	6839      	ldr	r1, [r7, #0]
 8006f2e:	6878      	ldr	r0, [r7, #4]
 8006f30:	f001 fc89 	bl	8008846 <USBD_CtlError>
      ret = USBD_FAIL;
 8006f34:	2303      	movs	r3, #3
 8006f36:	75fb      	strb	r3, [r7, #23]
      break;
 8006f38:	bf00      	nop
  }

  return (uint8_t)ret;
 8006f3a:	7dfb      	ldrb	r3, [r7, #23]
}
 8006f3c:	4618      	mov	r0, r3
 8006f3e:	3718      	adds	r7, #24
 8006f40:	46bd      	mov	sp, r7
 8006f42:	bd80      	pop	{r7, pc}

08006f44 <USBD_CDC_DataIn>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t USBD_CDC_DataIn(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 8006f44:	b580      	push	{r7, lr}
 8006f46:	b084      	sub	sp, #16
 8006f48:	af00      	add	r7, sp, #0
 8006f4a:	6078      	str	r0, [r7, #4]
 8006f4c:	460b      	mov	r3, r1
 8006f4e:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc;
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef *)pdev->pData;
 8006f50:	687b      	ldr	r3, [r7, #4]
 8006f52:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 8006f56:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 8006f58:	687b      	ldr	r3, [r7, #4]
 8006f5a:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8006f5e:	687b      	ldr	r3, [r7, #4]
 8006f60:	32b0      	adds	r2, #176	; 0xb0
 8006f62:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006f66:	2b00      	cmp	r3, #0
 8006f68:	d101      	bne.n	8006f6e <USBD_CDC_DataIn+0x2a>
  {
    return (uint8_t)USBD_FAIL;
 8006f6a:	2303      	movs	r3, #3
 8006f6c:	e065      	b.n	800703a <USBD_CDC_DataIn+0xf6>
  }

  hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8006f6e:	687b      	ldr	r3, [r7, #4]
 8006f70:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8006f74:	687b      	ldr	r3, [r7, #4]
 8006f76:	32b0      	adds	r2, #176	; 0xb0
 8006f78:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006f7c:	60bb      	str	r3, [r7, #8]

  if ((pdev->ep_in[epnum & 0xFU].total_length > 0U) &&
 8006f7e:	78fb      	ldrb	r3, [r7, #3]
 8006f80:	f003 020f 	and.w	r2, r3, #15
 8006f84:	6879      	ldr	r1, [r7, #4]
 8006f86:	4613      	mov	r3, r2
 8006f88:	009b      	lsls	r3, r3, #2
 8006f8a:	4413      	add	r3, r2
 8006f8c:	009b      	lsls	r3, r3, #2
 8006f8e:	440b      	add	r3, r1
 8006f90:	3318      	adds	r3, #24
 8006f92:	681b      	ldr	r3, [r3, #0]
 8006f94:	2b00      	cmp	r3, #0
 8006f96:	d02f      	beq.n	8006ff8 <USBD_CDC_DataIn+0xb4>
      ((pdev->ep_in[epnum & 0xFU].total_length % hpcd->IN_ep[epnum & 0xFU].maxpacket) == 0U))
 8006f98:	78fb      	ldrb	r3, [r7, #3]
 8006f9a:	f003 020f 	and.w	r2, r3, #15
 8006f9e:	6879      	ldr	r1, [r7, #4]
 8006fa0:	4613      	mov	r3, r2
 8006fa2:	009b      	lsls	r3, r3, #2
 8006fa4:	4413      	add	r3, r2
 8006fa6:	009b      	lsls	r3, r3, #2
 8006fa8:	440b      	add	r3, r1
 8006faa:	3318      	adds	r3, #24
 8006fac:	681a      	ldr	r2, [r3, #0]
 8006fae:	78fb      	ldrb	r3, [r7, #3]
 8006fb0:	f003 010f 	and.w	r1, r3, #15
 8006fb4:	68f8      	ldr	r0, [r7, #12]
 8006fb6:	460b      	mov	r3, r1
 8006fb8:	00db      	lsls	r3, r3, #3
 8006fba:	440b      	add	r3, r1
 8006fbc:	009b      	lsls	r3, r3, #2
 8006fbe:	4403      	add	r3, r0
 8006fc0:	3348      	adds	r3, #72	; 0x48
 8006fc2:	681b      	ldr	r3, [r3, #0]
 8006fc4:	fbb2 f1f3 	udiv	r1, r2, r3
 8006fc8:	fb01 f303 	mul.w	r3, r1, r3
 8006fcc:	1ad3      	subs	r3, r2, r3
  if ((pdev->ep_in[epnum & 0xFU].total_length > 0U) &&
 8006fce:	2b00      	cmp	r3, #0
 8006fd0:	d112      	bne.n	8006ff8 <USBD_CDC_DataIn+0xb4>
  {
    /* Update the packet total length */
    pdev->ep_in[epnum & 0xFU].total_length = 0U;
 8006fd2:	78fb      	ldrb	r3, [r7, #3]
 8006fd4:	f003 020f 	and.w	r2, r3, #15
 8006fd8:	6879      	ldr	r1, [r7, #4]
 8006fda:	4613      	mov	r3, r2
 8006fdc:	009b      	lsls	r3, r3, #2
 8006fde:	4413      	add	r3, r2
 8006fe0:	009b      	lsls	r3, r3, #2
 8006fe2:	440b      	add	r3, r1
 8006fe4:	3318      	adds	r3, #24
 8006fe6:	2200      	movs	r2, #0
 8006fe8:	601a      	str	r2, [r3, #0]

    /* Send ZLP */
    (void)USBD_LL_Transmit(pdev, epnum, NULL, 0U);
 8006fea:	78f9      	ldrb	r1, [r7, #3]
 8006fec:	2300      	movs	r3, #0
 8006fee:	2200      	movs	r2, #0
 8006ff0:	6878      	ldr	r0, [r7, #4]
 8006ff2:	f002 fa1c 	bl	800942e <USBD_LL_Transmit>
 8006ff6:	e01f      	b.n	8007038 <USBD_CDC_DataIn+0xf4>
  }
  else
  {
    hcdc->TxState = 0U;
 8006ff8:	68bb      	ldr	r3, [r7, #8]
 8006ffa:	2200      	movs	r2, #0
 8006ffc:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214

    if (((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->TransmitCplt != NULL)
 8007000:	687b      	ldr	r3, [r7, #4]
 8007002:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 8007006:	687a      	ldr	r2, [r7, #4]
 8007008:	33b0      	adds	r3, #176	; 0xb0
 800700a:	009b      	lsls	r3, r3, #2
 800700c:	4413      	add	r3, r2
 800700e:	685b      	ldr	r3, [r3, #4]
 8007010:	691b      	ldr	r3, [r3, #16]
 8007012:	2b00      	cmp	r3, #0
 8007014:	d010      	beq.n	8007038 <USBD_CDC_DataIn+0xf4>
    {
      ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->TransmitCplt(hcdc->TxBuffer, &hcdc->TxLength, epnum);
 8007016:	687b      	ldr	r3, [r7, #4]
 8007018:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 800701c:	687a      	ldr	r2, [r7, #4]
 800701e:	33b0      	adds	r3, #176	; 0xb0
 8007020:	009b      	lsls	r3, r3, #2
 8007022:	4413      	add	r3, r2
 8007024:	685b      	ldr	r3, [r3, #4]
 8007026:	691b      	ldr	r3, [r3, #16]
 8007028:	68ba      	ldr	r2, [r7, #8]
 800702a:	f8d2 0208 	ldr.w	r0, [r2, #520]	; 0x208
 800702e:	68ba      	ldr	r2, [r7, #8]
 8007030:	f502 7104 	add.w	r1, r2, #528	; 0x210
 8007034:	78fa      	ldrb	r2, [r7, #3]
 8007036:	4798      	blx	r3
    }
  }

  return (uint8_t)USBD_OK;
 8007038:	2300      	movs	r3, #0
}
 800703a:	4618      	mov	r0, r3
 800703c:	3710      	adds	r7, #16
 800703e:	46bd      	mov	sp, r7
 8007040:	bd80      	pop	{r7, pc}

08007042 <USBD_CDC_DataOut>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t USBD_CDC_DataOut(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 8007042:	b580      	push	{r7, lr}
 8007044:	b084      	sub	sp, #16
 8007046:	af00      	add	r7, sp, #0
 8007048:	6078      	str	r0, [r7, #4]
 800704a:	460b      	mov	r3, r1
 800704c:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800704e:	687b      	ldr	r3, [r7, #4]
 8007050:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8007054:	687b      	ldr	r3, [r7, #4]
 8007056:	32b0      	adds	r2, #176	; 0xb0
 8007058:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800705c:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 800705e:	687b      	ldr	r3, [r7, #4]
 8007060:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8007064:	687b      	ldr	r3, [r7, #4]
 8007066:	32b0      	adds	r2, #176	; 0xb0
 8007068:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800706c:	2b00      	cmp	r3, #0
 800706e:	d101      	bne.n	8007074 <USBD_CDC_DataOut+0x32>
  {
    return (uint8_t)USBD_FAIL;
 8007070:	2303      	movs	r3, #3
 8007072:	e01a      	b.n	80070aa <USBD_CDC_DataOut+0x68>
  }

  /* Get the received data length */
  hcdc->RxLength = USBD_LL_GetRxDataSize(pdev, epnum);
 8007074:	78fb      	ldrb	r3, [r7, #3]
 8007076:	4619      	mov	r1, r3
 8007078:	6878      	ldr	r0, [r7, #4]
 800707a:	f002 fa1a 	bl	80094b2 <USBD_LL_GetRxDataSize>
 800707e:	4602      	mov	r2, r0
 8007080:	68fb      	ldr	r3, [r7, #12]
 8007082:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c

  /* USB data will be immediately processed, this allow next USB traffic being
  NAKed till the end of the application Xfer */

  ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Receive(hcdc->RxBuffer, &hcdc->RxLength);
 8007086:	687b      	ldr	r3, [r7, #4]
 8007088:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 800708c:	687a      	ldr	r2, [r7, #4]
 800708e:	33b0      	adds	r3, #176	; 0xb0
 8007090:	009b      	lsls	r3, r3, #2
 8007092:	4413      	add	r3, r2
 8007094:	685b      	ldr	r3, [r3, #4]
 8007096:	68db      	ldr	r3, [r3, #12]
 8007098:	68fa      	ldr	r2, [r7, #12]
 800709a:	f8d2 0204 	ldr.w	r0, [r2, #516]	; 0x204
 800709e:	68fa      	ldr	r2, [r7, #12]
 80070a0:	f502 7203 	add.w	r2, r2, #524	; 0x20c
 80070a4:	4611      	mov	r1, r2
 80070a6:	4798      	blx	r3

  return (uint8_t)USBD_OK;
 80070a8:	2300      	movs	r3, #0
}
 80070aa:	4618      	mov	r0, r3
 80070ac:	3710      	adds	r7, #16
 80070ae:	46bd      	mov	sp, r7
 80070b0:	bd80      	pop	{r7, pc}

080070b2 <USBD_CDC_EP0_RxReady>:
  *         Handle EP0 Rx Ready event
  * @param  pdev: device instance
  * @retval status
  */
static uint8_t USBD_CDC_EP0_RxReady(USBD_HandleTypeDef *pdev)
{
 80070b2:	b580      	push	{r7, lr}
 80070b4:	b084      	sub	sp, #16
 80070b6:	af00      	add	r7, sp, #0
 80070b8:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 80070ba:	687b      	ldr	r3, [r7, #4]
 80070bc:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 80070c0:	687b      	ldr	r3, [r7, #4]
 80070c2:	32b0      	adds	r2, #176	; 0xb0
 80070c4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80070c8:	60fb      	str	r3, [r7, #12]

  if (hcdc == NULL)
 80070ca:	68fb      	ldr	r3, [r7, #12]
 80070cc:	2b00      	cmp	r3, #0
 80070ce:	d101      	bne.n	80070d4 <USBD_CDC_EP0_RxReady+0x22>
  {
    return (uint8_t)USBD_FAIL;
 80070d0:	2303      	movs	r3, #3
 80070d2:	e025      	b.n	8007120 <USBD_CDC_EP0_RxReady+0x6e>
  }

  if ((pdev->pUserData[pdev->classId] != NULL) && (hcdc->CmdOpCode != 0xFFU))
 80070d4:	687b      	ldr	r3, [r7, #4]
 80070d6:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 80070da:	687a      	ldr	r2, [r7, #4]
 80070dc:	33b0      	adds	r3, #176	; 0xb0
 80070de:	009b      	lsls	r3, r3, #2
 80070e0:	4413      	add	r3, r2
 80070e2:	685b      	ldr	r3, [r3, #4]
 80070e4:	2b00      	cmp	r3, #0
 80070e6:	d01a      	beq.n	800711e <USBD_CDC_EP0_RxReady+0x6c>
 80070e8:	68fb      	ldr	r3, [r7, #12]
 80070ea:	f893 3200 	ldrb.w	r3, [r3, #512]	; 0x200
 80070ee:	2bff      	cmp	r3, #255	; 0xff
 80070f0:	d015      	beq.n	800711e <USBD_CDC_EP0_RxReady+0x6c>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(hcdc->CmdOpCode,
 80070f2:	687b      	ldr	r3, [r7, #4]
 80070f4:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 80070f8:	687a      	ldr	r2, [r7, #4]
 80070fa:	33b0      	adds	r3, #176	; 0xb0
 80070fc:	009b      	lsls	r3, r3, #2
 80070fe:	4413      	add	r3, r2
 8007100:	685b      	ldr	r3, [r3, #4]
 8007102:	689b      	ldr	r3, [r3, #8]
 8007104:	68fa      	ldr	r2, [r7, #12]
 8007106:	f892 0200 	ldrb.w	r0, [r2, #512]	; 0x200
                                                                     (uint8_t *)hcdc->data,
 800710a:	68f9      	ldr	r1, [r7, #12]
                                                                     (uint16_t)hcdc->CmdLength);
 800710c:	68fa      	ldr	r2, [r7, #12]
 800710e:	f892 2201 	ldrb.w	r2, [r2, #513]	; 0x201
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(hcdc->CmdOpCode,
 8007112:	b292      	uxth	r2, r2
 8007114:	4798      	blx	r3
    hcdc->CmdOpCode = 0xFFU;
 8007116:	68fb      	ldr	r3, [r7, #12]
 8007118:	22ff      	movs	r2, #255	; 0xff
 800711a:	f883 2200 	strb.w	r2, [r3, #512]	; 0x200
  }

  return (uint8_t)USBD_OK;
 800711e:	2300      	movs	r3, #0
}
 8007120:	4618      	mov	r0, r3
 8007122:	3710      	adds	r7, #16
 8007124:	46bd      	mov	sp, r7
 8007126:	bd80      	pop	{r7, pc}

08007128 <USBD_CDC_GetFSCfgDesc>:
  *         Return configuration descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetFSCfgDesc(uint16_t *length)
{
 8007128:	b580      	push	{r7, lr}
 800712a:	b086      	sub	sp, #24
 800712c:	af00      	add	r7, sp, #0
 800712e:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpCmdDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_CMD_EP);
 8007130:	2182      	movs	r1, #130	; 0x82
 8007132:	4818      	ldr	r0, [pc, #96]	; (8007194 <USBD_CDC_GetFSCfgDesc+0x6c>)
 8007134:	f000 fd4f 	bl	8007bd6 <USBD_GetEpDesc>
 8007138:	6178      	str	r0, [r7, #20]
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_OUT_EP);
 800713a:	2101      	movs	r1, #1
 800713c:	4815      	ldr	r0, [pc, #84]	; (8007194 <USBD_CDC_GetFSCfgDesc+0x6c>)
 800713e:	f000 fd4a 	bl	8007bd6 <USBD_GetEpDesc>
 8007142:	6138      	str	r0, [r7, #16]
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_IN_EP);
 8007144:	2181      	movs	r1, #129	; 0x81
 8007146:	4813      	ldr	r0, [pc, #76]	; (8007194 <USBD_CDC_GetFSCfgDesc+0x6c>)
 8007148:	f000 fd45 	bl	8007bd6 <USBD_GetEpDesc>
 800714c:	60f8      	str	r0, [r7, #12]

  if (pEpCmdDesc != NULL)
 800714e:	697b      	ldr	r3, [r7, #20]
 8007150:	2b00      	cmp	r3, #0
 8007152:	d002      	beq.n	800715a <USBD_CDC_GetFSCfgDesc+0x32>
  {
    pEpCmdDesc->bInterval = CDC_FS_BINTERVAL;
 8007154:	697b      	ldr	r3, [r7, #20]
 8007156:	2210      	movs	r2, #16
 8007158:	719a      	strb	r2, [r3, #6]
  }

  if (pEpOutDesc != NULL)
 800715a:	693b      	ldr	r3, [r7, #16]
 800715c:	2b00      	cmp	r3, #0
 800715e:	d006      	beq.n	800716e <USBD_CDC_GetFSCfgDesc+0x46>
  {
    pEpOutDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 8007160:	693b      	ldr	r3, [r7, #16]
 8007162:	2200      	movs	r2, #0
 8007164:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8007168:	711a      	strb	r2, [r3, #4]
 800716a:	2200      	movs	r2, #0
 800716c:	715a      	strb	r2, [r3, #5]
  }

  if (pEpInDesc != NULL)
 800716e:	68fb      	ldr	r3, [r7, #12]
 8007170:	2b00      	cmp	r3, #0
 8007172:	d006      	beq.n	8007182 <USBD_CDC_GetFSCfgDesc+0x5a>
  {
    pEpInDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 8007174:	68fb      	ldr	r3, [r7, #12]
 8007176:	2200      	movs	r2, #0
 8007178:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800717c:	711a      	strb	r2, [r3, #4]
 800717e:	2200      	movs	r2, #0
 8007180:	715a      	strb	r2, [r3, #5]
  }

  *length = (uint16_t)sizeof(USBD_CDC_CfgDesc);
 8007182:	687b      	ldr	r3, [r7, #4]
 8007184:	2243      	movs	r2, #67	; 0x43
 8007186:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgDesc;
 8007188:	4b02      	ldr	r3, [pc, #8]	; (8007194 <USBD_CDC_GetFSCfgDesc+0x6c>)
}
 800718a:	4618      	mov	r0, r3
 800718c:	3718      	adds	r7, #24
 800718e:	46bd      	mov	sp, r7
 8007190:	bd80      	pop	{r7, pc}
 8007192:	bf00      	nop
 8007194:	24000054 	.word	0x24000054

08007198 <USBD_CDC_GetHSCfgDesc>:
  *         Return configuration descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetHSCfgDesc(uint16_t *length)
{
 8007198:	b580      	push	{r7, lr}
 800719a:	b086      	sub	sp, #24
 800719c:	af00      	add	r7, sp, #0
 800719e:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpCmdDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_CMD_EP);
 80071a0:	2182      	movs	r1, #130	; 0x82
 80071a2:	4818      	ldr	r0, [pc, #96]	; (8007204 <USBD_CDC_GetHSCfgDesc+0x6c>)
 80071a4:	f000 fd17 	bl	8007bd6 <USBD_GetEpDesc>
 80071a8:	6178      	str	r0, [r7, #20]
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_OUT_EP);
 80071aa:	2101      	movs	r1, #1
 80071ac:	4815      	ldr	r0, [pc, #84]	; (8007204 <USBD_CDC_GetHSCfgDesc+0x6c>)
 80071ae:	f000 fd12 	bl	8007bd6 <USBD_GetEpDesc>
 80071b2:	6138      	str	r0, [r7, #16]
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_IN_EP);
 80071b4:	2181      	movs	r1, #129	; 0x81
 80071b6:	4813      	ldr	r0, [pc, #76]	; (8007204 <USBD_CDC_GetHSCfgDesc+0x6c>)
 80071b8:	f000 fd0d 	bl	8007bd6 <USBD_GetEpDesc>
 80071bc:	60f8      	str	r0, [r7, #12]

  if (pEpCmdDesc != NULL)
 80071be:	697b      	ldr	r3, [r7, #20]
 80071c0:	2b00      	cmp	r3, #0
 80071c2:	d002      	beq.n	80071ca <USBD_CDC_GetHSCfgDesc+0x32>
  {
    pEpCmdDesc->bInterval = CDC_HS_BINTERVAL;
 80071c4:	697b      	ldr	r3, [r7, #20]
 80071c6:	2210      	movs	r2, #16
 80071c8:	719a      	strb	r2, [r3, #6]
  }

  if (pEpOutDesc != NULL)
 80071ca:	693b      	ldr	r3, [r7, #16]
 80071cc:	2b00      	cmp	r3, #0
 80071ce:	d006      	beq.n	80071de <USBD_CDC_GetHSCfgDesc+0x46>
  {
    pEpOutDesc->wMaxPacketSize = CDC_DATA_HS_MAX_PACKET_SIZE;
 80071d0:	693b      	ldr	r3, [r7, #16]
 80071d2:	2200      	movs	r2, #0
 80071d4:	711a      	strb	r2, [r3, #4]
 80071d6:	2200      	movs	r2, #0
 80071d8:	f042 0202 	orr.w	r2, r2, #2
 80071dc:	715a      	strb	r2, [r3, #5]
  }

  if (pEpInDesc != NULL)
 80071de:	68fb      	ldr	r3, [r7, #12]
 80071e0:	2b00      	cmp	r3, #0
 80071e2:	d006      	beq.n	80071f2 <USBD_CDC_GetHSCfgDesc+0x5a>
  {
    pEpInDesc->wMaxPacketSize = CDC_DATA_HS_MAX_PACKET_SIZE;
 80071e4:	68fb      	ldr	r3, [r7, #12]
 80071e6:	2200      	movs	r2, #0
 80071e8:	711a      	strb	r2, [r3, #4]
 80071ea:	2200      	movs	r2, #0
 80071ec:	f042 0202 	orr.w	r2, r2, #2
 80071f0:	715a      	strb	r2, [r3, #5]
  }

  *length = (uint16_t)sizeof(USBD_CDC_CfgDesc);
 80071f2:	687b      	ldr	r3, [r7, #4]
 80071f4:	2243      	movs	r2, #67	; 0x43
 80071f6:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgDesc;
 80071f8:	4b02      	ldr	r3, [pc, #8]	; (8007204 <USBD_CDC_GetHSCfgDesc+0x6c>)
}
 80071fa:	4618      	mov	r0, r3
 80071fc:	3718      	adds	r7, #24
 80071fe:	46bd      	mov	sp, r7
 8007200:	bd80      	pop	{r7, pc}
 8007202:	bf00      	nop
 8007204:	24000054 	.word	0x24000054

08007208 <USBD_CDC_GetOtherSpeedCfgDesc>:
  *         Return configuration descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetOtherSpeedCfgDesc(uint16_t *length)
{
 8007208:	b580      	push	{r7, lr}
 800720a:	b086      	sub	sp, #24
 800720c:	af00      	add	r7, sp, #0
 800720e:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpCmdDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_CMD_EP);
 8007210:	2182      	movs	r1, #130	; 0x82
 8007212:	4818      	ldr	r0, [pc, #96]	; (8007274 <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
 8007214:	f000 fcdf 	bl	8007bd6 <USBD_GetEpDesc>
 8007218:	6178      	str	r0, [r7, #20]
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_OUT_EP);
 800721a:	2101      	movs	r1, #1
 800721c:	4815      	ldr	r0, [pc, #84]	; (8007274 <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
 800721e:	f000 fcda 	bl	8007bd6 <USBD_GetEpDesc>
 8007222:	6138      	str	r0, [r7, #16]
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_IN_EP);
 8007224:	2181      	movs	r1, #129	; 0x81
 8007226:	4813      	ldr	r0, [pc, #76]	; (8007274 <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
 8007228:	f000 fcd5 	bl	8007bd6 <USBD_GetEpDesc>
 800722c:	60f8      	str	r0, [r7, #12]

  if (pEpCmdDesc != NULL)
 800722e:	697b      	ldr	r3, [r7, #20]
 8007230:	2b00      	cmp	r3, #0
 8007232:	d002      	beq.n	800723a <USBD_CDC_GetOtherSpeedCfgDesc+0x32>
  {
    pEpCmdDesc->bInterval = CDC_FS_BINTERVAL;
 8007234:	697b      	ldr	r3, [r7, #20]
 8007236:	2210      	movs	r2, #16
 8007238:	719a      	strb	r2, [r3, #6]
  }

  if (pEpOutDesc != NULL)
 800723a:	693b      	ldr	r3, [r7, #16]
 800723c:	2b00      	cmp	r3, #0
 800723e:	d006      	beq.n	800724e <USBD_CDC_GetOtherSpeedCfgDesc+0x46>
  {
    pEpOutDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 8007240:	693b      	ldr	r3, [r7, #16]
 8007242:	2200      	movs	r2, #0
 8007244:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8007248:	711a      	strb	r2, [r3, #4]
 800724a:	2200      	movs	r2, #0
 800724c:	715a      	strb	r2, [r3, #5]
  }

  if (pEpInDesc != NULL)
 800724e:	68fb      	ldr	r3, [r7, #12]
 8007250:	2b00      	cmp	r3, #0
 8007252:	d006      	beq.n	8007262 <USBD_CDC_GetOtherSpeedCfgDesc+0x5a>
  {
    pEpInDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 8007254:	68fb      	ldr	r3, [r7, #12]
 8007256:	2200      	movs	r2, #0
 8007258:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800725c:	711a      	strb	r2, [r3, #4]
 800725e:	2200      	movs	r2, #0
 8007260:	715a      	strb	r2, [r3, #5]
  }

  *length = (uint16_t)sizeof(USBD_CDC_CfgDesc);
 8007262:	687b      	ldr	r3, [r7, #4]
 8007264:	2243      	movs	r2, #67	; 0x43
 8007266:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgDesc;
 8007268:	4b02      	ldr	r3, [pc, #8]	; (8007274 <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
}
 800726a:	4618      	mov	r0, r3
 800726c:	3718      	adds	r7, #24
 800726e:	46bd      	mov	sp, r7
 8007270:	bd80      	pop	{r7, pc}
 8007272:	bf00      	nop
 8007274:	24000054 	.word	0x24000054

08007278 <USBD_CDC_GetDeviceQualifierDescriptor>:
  *         return Device Qualifier descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
uint8_t *USBD_CDC_GetDeviceQualifierDescriptor(uint16_t *length)
{
 8007278:	b480      	push	{r7}
 800727a:	b083      	sub	sp, #12
 800727c:	af00      	add	r7, sp, #0
 800727e:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_DeviceQualifierDesc);
 8007280:	687b      	ldr	r3, [r7, #4]
 8007282:	220a      	movs	r2, #10
 8007284:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_DeviceQualifierDesc;
 8007286:	4b03      	ldr	r3, [pc, #12]	; (8007294 <USBD_CDC_GetDeviceQualifierDescriptor+0x1c>)
}
 8007288:	4618      	mov	r0, r3
 800728a:	370c      	adds	r7, #12
 800728c:	46bd      	mov	sp, r7
 800728e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007292:	4770      	bx	lr
 8007294:	24000010 	.word	0x24000010

08007298 <USBD_CDC_RegisterInterface>:
  * @param  fops: CD  Interface callback
  * @retval status
  */
uint8_t USBD_CDC_RegisterInterface(USBD_HandleTypeDef *pdev,
                                   USBD_CDC_ItfTypeDef *fops)
{
 8007298:	b480      	push	{r7}
 800729a:	b083      	sub	sp, #12
 800729c:	af00      	add	r7, sp, #0
 800729e:	6078      	str	r0, [r7, #4]
 80072a0:	6039      	str	r1, [r7, #0]
  if (fops == NULL)
 80072a2:	683b      	ldr	r3, [r7, #0]
 80072a4:	2b00      	cmp	r3, #0
 80072a6:	d101      	bne.n	80072ac <USBD_CDC_RegisterInterface+0x14>
  {
    return (uint8_t)USBD_FAIL;
 80072a8:	2303      	movs	r3, #3
 80072aa:	e009      	b.n	80072c0 <USBD_CDC_RegisterInterface+0x28>
  }

  pdev->pUserData[pdev->classId] = fops;
 80072ac:	687b      	ldr	r3, [r7, #4]
 80072ae:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 80072b2:	687a      	ldr	r2, [r7, #4]
 80072b4:	33b0      	adds	r3, #176	; 0xb0
 80072b6:	009b      	lsls	r3, r3, #2
 80072b8:	4413      	add	r3, r2
 80072ba:	683a      	ldr	r2, [r7, #0]
 80072bc:	605a      	str	r2, [r3, #4]

  return (uint8_t)USBD_OK;
 80072be:	2300      	movs	r3, #0
}
 80072c0:	4618      	mov	r0, r3
 80072c2:	370c      	adds	r7, #12
 80072c4:	46bd      	mov	sp, r7
 80072c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80072ca:	4770      	bx	lr

080072cc <USBD_CDC_SetTxBuffer>:
  * @param  length: Tx Buffer length
  * @retval status
  */
uint8_t USBD_CDC_SetTxBuffer(USBD_HandleTypeDef *pdev,
                             uint8_t *pbuff, uint32_t length)
{
 80072cc:	b480      	push	{r7}
 80072ce:	b087      	sub	sp, #28
 80072d0:	af00      	add	r7, sp, #0
 80072d2:	60f8      	str	r0, [r7, #12]
 80072d4:	60b9      	str	r1, [r7, #8]
 80072d6:	607a      	str	r2, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 80072d8:	68fb      	ldr	r3, [r7, #12]
 80072da:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 80072de:	68fb      	ldr	r3, [r7, #12]
 80072e0:	32b0      	adds	r2, #176	; 0xb0
 80072e2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80072e6:	617b      	str	r3, [r7, #20]

  if (hcdc == NULL)
 80072e8:	697b      	ldr	r3, [r7, #20]
 80072ea:	2b00      	cmp	r3, #0
 80072ec:	d101      	bne.n	80072f2 <USBD_CDC_SetTxBuffer+0x26>
  {
    return (uint8_t)USBD_FAIL;
 80072ee:	2303      	movs	r3, #3
 80072f0:	e008      	b.n	8007304 <USBD_CDC_SetTxBuffer+0x38>
  }

  hcdc->TxBuffer = pbuff;
 80072f2:	697b      	ldr	r3, [r7, #20]
 80072f4:	68ba      	ldr	r2, [r7, #8]
 80072f6:	f8c3 2208 	str.w	r2, [r3, #520]	; 0x208
  hcdc->TxLength = length;
 80072fa:	697b      	ldr	r3, [r7, #20]
 80072fc:	687a      	ldr	r2, [r7, #4]
 80072fe:	f8c3 2210 	str.w	r2, [r3, #528]	; 0x210

  return (uint8_t)USBD_OK;
 8007302:	2300      	movs	r3, #0
}
 8007304:	4618      	mov	r0, r3
 8007306:	371c      	adds	r7, #28
 8007308:	46bd      	mov	sp, r7
 800730a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800730e:	4770      	bx	lr

08007310 <USBD_CDC_SetRxBuffer>:
  * @param  pdev: device instance
  * @param  pbuff: Rx Buffer
  * @retval status
  */
uint8_t USBD_CDC_SetRxBuffer(USBD_HandleTypeDef *pdev, uint8_t *pbuff)
{
 8007310:	b480      	push	{r7}
 8007312:	b085      	sub	sp, #20
 8007314:	af00      	add	r7, sp, #0
 8007316:	6078      	str	r0, [r7, #4]
 8007318:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800731a:	687b      	ldr	r3, [r7, #4]
 800731c:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8007320:	687b      	ldr	r3, [r7, #4]
 8007322:	32b0      	adds	r2, #176	; 0xb0
 8007324:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007328:	60fb      	str	r3, [r7, #12]

  if (hcdc == NULL)
 800732a:	68fb      	ldr	r3, [r7, #12]
 800732c:	2b00      	cmp	r3, #0
 800732e:	d101      	bne.n	8007334 <USBD_CDC_SetRxBuffer+0x24>
  {
    return (uint8_t)USBD_FAIL;
 8007330:	2303      	movs	r3, #3
 8007332:	e004      	b.n	800733e <USBD_CDC_SetRxBuffer+0x2e>
  }

  hcdc->RxBuffer = pbuff;
 8007334:	68fb      	ldr	r3, [r7, #12]
 8007336:	683a      	ldr	r2, [r7, #0]
 8007338:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204

  return (uint8_t)USBD_OK;
 800733c:	2300      	movs	r3, #0
}
 800733e:	4618      	mov	r0, r3
 8007340:	3714      	adds	r7, #20
 8007342:	46bd      	mov	sp, r7
 8007344:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007348:	4770      	bx	lr
	...

0800734c <USBD_CDC_TransmitPacket>:
  *         Transmit packet on IN endpoint
  * @param  pdev: device instance
  * @retval status
  */
uint8_t USBD_CDC_TransmitPacket(USBD_HandleTypeDef *pdev)
{
 800734c:	b580      	push	{r7, lr}
 800734e:	b084      	sub	sp, #16
 8007350:	af00      	add	r7, sp, #0
 8007352:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8007354:	687b      	ldr	r3, [r7, #4]
 8007356:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800735a:	687b      	ldr	r3, [r7, #4]
 800735c:	32b0      	adds	r2, #176	; 0xb0
 800735e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007362:	60bb      	str	r3, [r7, #8]
  USBD_StatusTypeDef ret = USBD_BUSY;
 8007364:	2301      	movs	r3, #1
 8007366:	73fb      	strb	r3, [r7, #15]

#ifdef USE_USBD_COMPOSITE
  /* Get the Endpoints addresses allocated for this class instance */
  CDCInEpAdd  = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_BULK);
#endif /* USE_USBD_COMPOSITE */
  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 8007368:	687b      	ldr	r3, [r7, #4]
 800736a:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800736e:	687b      	ldr	r3, [r7, #4]
 8007370:	32b0      	adds	r2, #176	; 0xb0
 8007372:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007376:	2b00      	cmp	r3, #0
 8007378:	d101      	bne.n	800737e <USBD_CDC_TransmitPacket+0x32>
  {
    return (uint8_t)USBD_FAIL;
 800737a:	2303      	movs	r3, #3
 800737c:	e025      	b.n	80073ca <USBD_CDC_TransmitPacket+0x7e>
  }

  if (hcdc->TxState == 0U)
 800737e:	68bb      	ldr	r3, [r7, #8]
 8007380:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 8007384:	2b00      	cmp	r3, #0
 8007386:	d11f      	bne.n	80073c8 <USBD_CDC_TransmitPacket+0x7c>
  {
    /* Tx Transfer in progress */
    hcdc->TxState = 1U;
 8007388:	68bb      	ldr	r3, [r7, #8]
 800738a:	2201      	movs	r2, #1
 800738c:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214

    /* Update the packet total length */
    pdev->ep_in[CDCInEpAdd & 0xFU].total_length = hcdc->TxLength;
 8007390:	4b10      	ldr	r3, [pc, #64]	; (80073d4 <USBD_CDC_TransmitPacket+0x88>)
 8007392:	781b      	ldrb	r3, [r3, #0]
 8007394:	f003 020f 	and.w	r2, r3, #15
 8007398:	68bb      	ldr	r3, [r7, #8]
 800739a:	f8d3 1210 	ldr.w	r1, [r3, #528]	; 0x210
 800739e:	6878      	ldr	r0, [r7, #4]
 80073a0:	4613      	mov	r3, r2
 80073a2:	009b      	lsls	r3, r3, #2
 80073a4:	4413      	add	r3, r2
 80073a6:	009b      	lsls	r3, r3, #2
 80073a8:	4403      	add	r3, r0
 80073aa:	3318      	adds	r3, #24
 80073ac:	6019      	str	r1, [r3, #0]

    /* Transmit next packet */
    (void)USBD_LL_Transmit(pdev, CDCInEpAdd, hcdc->TxBuffer, hcdc->TxLength);
 80073ae:	4b09      	ldr	r3, [pc, #36]	; (80073d4 <USBD_CDC_TransmitPacket+0x88>)
 80073b0:	7819      	ldrb	r1, [r3, #0]
 80073b2:	68bb      	ldr	r3, [r7, #8]
 80073b4:	f8d3 2208 	ldr.w	r2, [r3, #520]	; 0x208
 80073b8:	68bb      	ldr	r3, [r7, #8]
 80073ba:	f8d3 3210 	ldr.w	r3, [r3, #528]	; 0x210
 80073be:	6878      	ldr	r0, [r7, #4]
 80073c0:	f002 f835 	bl	800942e <USBD_LL_Transmit>

    ret = USBD_OK;
 80073c4:	2300      	movs	r3, #0
 80073c6:	73fb      	strb	r3, [r7, #15]
  }

  return (uint8_t)ret;
 80073c8:	7bfb      	ldrb	r3, [r7, #15]
}
 80073ca:	4618      	mov	r0, r3
 80073cc:	3710      	adds	r7, #16
 80073ce:	46bd      	mov	sp, r7
 80073d0:	bd80      	pop	{r7, pc}
 80073d2:	bf00      	nop
 80073d4:	24000097 	.word	0x24000097

080073d8 <USBD_CDC_ReceivePacket>:
  *         prepare OUT Endpoint for reception
  * @param  pdev: device instance
  * @retval status
  */
uint8_t USBD_CDC_ReceivePacket(USBD_HandleTypeDef *pdev)
{
 80073d8:	b580      	push	{r7, lr}
 80073da:	b084      	sub	sp, #16
 80073dc:	af00      	add	r7, sp, #0
 80073de:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 80073e0:	687b      	ldr	r3, [r7, #4]
 80073e2:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 80073e6:	687b      	ldr	r3, [r7, #4]
 80073e8:	32b0      	adds	r2, #176	; 0xb0
 80073ea:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80073ee:	60fb      	str	r3, [r7, #12]
#ifdef USE_USBD_COMPOSITE
  /* Get the Endpoints addresses allocated for this class instance */
  CDCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK);
#endif /* USE_USBD_COMPOSITE */

  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 80073f0:	687b      	ldr	r3, [r7, #4]
 80073f2:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 80073f6:	687b      	ldr	r3, [r7, #4]
 80073f8:	32b0      	adds	r2, #176	; 0xb0
 80073fa:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80073fe:	2b00      	cmp	r3, #0
 8007400:	d101      	bne.n	8007406 <USBD_CDC_ReceivePacket+0x2e>
  {
    return (uint8_t)USBD_FAIL;
 8007402:	2303      	movs	r3, #3
 8007404:	e018      	b.n	8007438 <USBD_CDC_ReceivePacket+0x60>
  }

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 8007406:	687b      	ldr	r3, [r7, #4]
 8007408:	7c1b      	ldrb	r3, [r3, #16]
 800740a:	2b00      	cmp	r3, #0
 800740c:	d10a      	bne.n	8007424 <USBD_CDC_ReceivePacket+0x4c>
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 800740e:	4b0c      	ldr	r3, [pc, #48]	; (8007440 <USBD_CDC_ReceivePacket+0x68>)
 8007410:	7819      	ldrb	r1, [r3, #0]
 8007412:	68fb      	ldr	r3, [r7, #12]
 8007414:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8007418:	f44f 7300 	mov.w	r3, #512	; 0x200
 800741c:	6878      	ldr	r0, [r7, #4]
 800741e:	f002 f827 	bl	8009470 <USBD_LL_PrepareReceive>
 8007422:	e008      	b.n	8007436 <USBD_CDC_ReceivePacket+0x5e>
                                 CDC_DATA_HS_OUT_PACKET_SIZE);
  }
  else
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 8007424:	4b06      	ldr	r3, [pc, #24]	; (8007440 <USBD_CDC_ReceivePacket+0x68>)
 8007426:	7819      	ldrb	r1, [r3, #0]
 8007428:	68fb      	ldr	r3, [r7, #12]
 800742a:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 800742e:	2340      	movs	r3, #64	; 0x40
 8007430:	6878      	ldr	r0, [r7, #4]
 8007432:	f002 f81d 	bl	8009470 <USBD_LL_PrepareReceive>
                                 CDC_DATA_FS_OUT_PACKET_SIZE);
  }

  return (uint8_t)USBD_OK;
 8007436:	2300      	movs	r3, #0
}
 8007438:	4618      	mov	r0, r3
 800743a:	3710      	adds	r7, #16
 800743c:	46bd      	mov	sp, r7
 800743e:	bd80      	pop	{r7, pc}
 8007440:	24000098 	.word	0x24000098

08007444 <USBD_Init>:
  * @param  id: Low level core index
  * @retval None
  */
USBD_StatusTypeDef USBD_Init(USBD_HandleTypeDef *pdev,
                             USBD_DescriptorsTypeDef *pdesc, uint8_t id)
{
 8007444:	b580      	push	{r7, lr}
 8007446:	b086      	sub	sp, #24
 8007448:	af00      	add	r7, sp, #0
 800744a:	60f8      	str	r0, [r7, #12]
 800744c:	60b9      	str	r1, [r7, #8]
 800744e:	4613      	mov	r3, r2
 8007450:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef ret;

  /* Check whether the USB Host handle is valid */
  if (pdev == NULL)
 8007452:	68fb      	ldr	r3, [r7, #12]
 8007454:	2b00      	cmp	r3, #0
 8007456:	d101      	bne.n	800745c <USBD_Init+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Device handle");
#endif /* (USBD_DEBUG_LEVEL > 1U) */
    return USBD_FAIL;
 8007458:	2303      	movs	r3, #3
 800745a:	e01f      	b.n	800749c <USBD_Init+0x58>
    pdev->NumClasses = 0;
    pdev->classId = 0;
  }
#else
  /* Unlink previous class*/
  pdev->pClass[0] = NULL;
 800745c:	68fb      	ldr	r3, [r7, #12]
 800745e:	2200      	movs	r2, #0
 8007460:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8
  pdev->pUserData[0] = NULL;
 8007464:	68fb      	ldr	r3, [r7, #12]
 8007466:	2200      	movs	r2, #0
 8007468:	f8c3 22c4 	str.w	r2, [r3, #708]	; 0x2c4
#endif /* USE_USBD_COMPOSITE */

  pdev->pConfDesc = NULL;
 800746c:	68fb      	ldr	r3, [r7, #12]
 800746e:	2200      	movs	r2, #0
 8007470:	f8c3 22d0 	str.w	r2, [r3, #720]	; 0x2d0

  /* Assign USBD Descriptors */
  if (pdesc != NULL)
 8007474:	68bb      	ldr	r3, [r7, #8]
 8007476:	2b00      	cmp	r3, #0
 8007478:	d003      	beq.n	8007482 <USBD_Init+0x3e>
  {
    pdev->pDesc = pdesc;
 800747a:	68fb      	ldr	r3, [r7, #12]
 800747c:	68ba      	ldr	r2, [r7, #8]
 800747e:	f8c3 22b4 	str.w	r2, [r3, #692]	; 0x2b4
  }

  /* Set Device initial State */
  pdev->dev_state = USBD_STATE_DEFAULT;
 8007482:	68fb      	ldr	r3, [r7, #12]
 8007484:	2201      	movs	r2, #1
 8007486:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->id = id;
 800748a:	68fb      	ldr	r3, [r7, #12]
 800748c:	79fa      	ldrb	r2, [r7, #7]
 800748e:	701a      	strb	r2, [r3, #0]

  /* Initialize low level driver */
  ret = USBD_LL_Init(pdev);
 8007490:	68f8      	ldr	r0, [r7, #12]
 8007492:	f001 fe91 	bl	80091b8 <USBD_LL_Init>
 8007496:	4603      	mov	r3, r0
 8007498:	75fb      	strb	r3, [r7, #23]

  return ret;
 800749a:	7dfb      	ldrb	r3, [r7, #23]
}
 800749c:	4618      	mov	r0, r3
 800749e:	3718      	adds	r7, #24
 80074a0:	46bd      	mov	sp, r7
 80074a2:	bd80      	pop	{r7, pc}

080074a4 <USBD_RegisterClass>:
  * @param  pDevice : Device Handle
  * @param  pclass: Class handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_RegisterClass(USBD_HandleTypeDef *pdev, USBD_ClassTypeDef *pclass)
{
 80074a4:	b580      	push	{r7, lr}
 80074a6:	b084      	sub	sp, #16
 80074a8:	af00      	add	r7, sp, #0
 80074aa:	6078      	str	r0, [r7, #4]
 80074ac:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 80074ae:	2300      	movs	r3, #0
 80074b0:	81fb      	strh	r3, [r7, #14]

  if (pclass == NULL)
 80074b2:	683b      	ldr	r3, [r7, #0]
 80074b4:	2b00      	cmp	r3, #0
 80074b6:	d101      	bne.n	80074bc <USBD_RegisterClass+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Class handle");
#endif /* (USBD_DEBUG_LEVEL > 1U) */
    return USBD_FAIL;
 80074b8:	2303      	movs	r3, #3
 80074ba:	e025      	b.n	8007508 <USBD_RegisterClass+0x64>
  }

  /* link the class to the USB Device handle */
  pdev->pClass[0] = pclass;
 80074bc:	687b      	ldr	r3, [r7, #4]
 80074be:	683a      	ldr	r2, [r7, #0]
 80074c0:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8
  if (pdev->pClass[pdev->classId]->GetHSConfigDescriptor != NULL)
  {
    pdev->pConfDesc = (void *)pdev->pClass[pdev->classId]->GetHSConfigDescriptor(&len);
  }
#else /* Default USE_USB_FS */
  if (pdev->pClass[pdev->classId]->GetFSConfigDescriptor != NULL)
 80074c4:	687b      	ldr	r3, [r7, #4]
 80074c6:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 80074ca:	687b      	ldr	r3, [r7, #4]
 80074cc:	32ae      	adds	r2, #174	; 0xae
 80074ce:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80074d2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80074d4:	2b00      	cmp	r3, #0
 80074d6:	d00f      	beq.n	80074f8 <USBD_RegisterClass+0x54>
  {
    pdev->pConfDesc = (void *)pdev->pClass[pdev->classId]->GetFSConfigDescriptor(&len);
 80074d8:	687b      	ldr	r3, [r7, #4]
 80074da:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 80074de:	687b      	ldr	r3, [r7, #4]
 80074e0:	32ae      	adds	r2, #174	; 0xae
 80074e2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80074e6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80074e8:	f107 020e 	add.w	r2, r7, #14
 80074ec:	4610      	mov	r0, r2
 80074ee:	4798      	blx	r3
 80074f0:	4602      	mov	r2, r0
 80074f2:	687b      	ldr	r3, [r7, #4]
 80074f4:	f8c3 22d0 	str.w	r2, [r3, #720]	; 0x2d0
  }
#endif /* USE_USB_FS */

  /* Increment the NumClasses */
  pdev->NumClasses ++;
 80074f8:	687b      	ldr	r3, [r7, #4]
 80074fa:	f8d3 32d8 	ldr.w	r3, [r3, #728]	; 0x2d8
 80074fe:	1c5a      	adds	r2, r3, #1
 8007500:	687b      	ldr	r3, [r7, #4]
 8007502:	f8c3 22d8 	str.w	r2, [r3, #728]	; 0x2d8

  return USBD_OK;
 8007506:	2300      	movs	r3, #0
}
 8007508:	4618      	mov	r0, r3
 800750a:	3710      	adds	r7, #16
 800750c:	46bd      	mov	sp, r7
 800750e:	bd80      	pop	{r7, pc}

08007510 <USBD_Start>:
  *         Start the USB Device Core.
  * @param  pdev: Device Handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_Start(USBD_HandleTypeDef *pdev)
{
 8007510:	b580      	push	{r7, lr}
 8007512:	b082      	sub	sp, #8
 8007514:	af00      	add	r7, sp, #0
 8007516:	6078      	str	r0, [r7, #4]
#ifdef USE_USBD_COMPOSITE
  pdev->classId = 0U;
#endif /* USE_USBD_COMPOSITE */

  /* Start the low level driver  */
  return USBD_LL_Start(pdev);
 8007518:	6878      	ldr	r0, [r7, #4]
 800751a:	f001 fe9f 	bl	800925c <USBD_LL_Start>
 800751e:	4603      	mov	r3, r0
}
 8007520:	4618      	mov	r0, r3
 8007522:	3708      	adds	r7, #8
 8007524:	46bd      	mov	sp, r7
 8007526:	bd80      	pop	{r7, pc}

08007528 <USBD_RunTestMode>:
  *         Launch test mode process
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_RunTestMode(USBD_HandleTypeDef *pdev)
{
 8007528:	b480      	push	{r7}
 800752a:	b083      	sub	sp, #12
 800752c:	af00      	add	r7, sp, #0
 800752e:	6078      	str	r0, [r7, #4]
  return ret;
#else
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 8007530:	2300      	movs	r3, #0
#endif /* USBD_HS_TESTMODE_ENABLE */
}
 8007532:	4618      	mov	r0, r3
 8007534:	370c      	adds	r7, #12
 8007536:	46bd      	mov	sp, r7
 8007538:	f85d 7b04 	ldr.w	r7, [sp], #4
 800753c:	4770      	bx	lr

0800753e <USBD_SetClassConfig>:
  * @param  cfgidx: configuration index
  * @retval status
  */

USBD_StatusTypeDef USBD_SetClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 800753e:	b580      	push	{r7, lr}
 8007540:	b084      	sub	sp, #16
 8007542:	af00      	add	r7, sp, #0
 8007544:	6078      	str	r0, [r7, #4]
 8007546:	460b      	mov	r3, r1
 8007548:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_OK;
 800754a:	2300      	movs	r3, #0
 800754c:	73fb      	strb	r3, [r7, #15]
        }
      }
    }
  }
#else
  if (pdev->pClass[0] != NULL)
 800754e:	687b      	ldr	r3, [r7, #4]
 8007550:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007554:	2b00      	cmp	r3, #0
 8007556:	d009      	beq.n	800756c <USBD_SetClassConfig+0x2e>
  {
    /* Set configuration and Start the Class */
    ret = (USBD_StatusTypeDef)pdev->pClass[0]->Init(pdev, cfgidx);
 8007558:	687b      	ldr	r3, [r7, #4]
 800755a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800755e:	681b      	ldr	r3, [r3, #0]
 8007560:	78fa      	ldrb	r2, [r7, #3]
 8007562:	4611      	mov	r1, r2
 8007564:	6878      	ldr	r0, [r7, #4]
 8007566:	4798      	blx	r3
 8007568:	4603      	mov	r3, r0
 800756a:	73fb      	strb	r3, [r7, #15]
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 800756c:	7bfb      	ldrb	r3, [r7, #15]
}
 800756e:	4618      	mov	r0, r3
 8007570:	3710      	adds	r7, #16
 8007572:	46bd      	mov	sp, r7
 8007574:	bd80      	pop	{r7, pc}

08007576 <USBD_ClrClassConfig>:
  * @param  pdev: device instance
  * @param  cfgidx: configuration index
  * @retval status: USBD_StatusTypeDef
  */
USBD_StatusTypeDef USBD_ClrClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8007576:	b580      	push	{r7, lr}
 8007578:	b084      	sub	sp, #16
 800757a:	af00      	add	r7, sp, #0
 800757c:	6078      	str	r0, [r7, #4]
 800757e:	460b      	mov	r3, r1
 8007580:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_OK;
 8007582:	2300      	movs	r3, #0
 8007584:	73fb      	strb	r3, [r7, #15]
      }
    }
  }
#else
  /* Clear configuration  and De-initialize the Class process */
  if (pdev->pClass[0]->DeInit(pdev, cfgidx) != 0U)
 8007586:	687b      	ldr	r3, [r7, #4]
 8007588:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800758c:	685b      	ldr	r3, [r3, #4]
 800758e:	78fa      	ldrb	r2, [r7, #3]
 8007590:	4611      	mov	r1, r2
 8007592:	6878      	ldr	r0, [r7, #4]
 8007594:	4798      	blx	r3
 8007596:	4603      	mov	r3, r0
 8007598:	2b00      	cmp	r3, #0
 800759a:	d001      	beq.n	80075a0 <USBD_ClrClassConfig+0x2a>
  {
    ret = USBD_FAIL;
 800759c:	2303      	movs	r3, #3
 800759e:	73fb      	strb	r3, [r7, #15]
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 80075a0:	7bfb      	ldrb	r3, [r7, #15]
}
 80075a2:	4618      	mov	r0, r3
 80075a4:	3710      	adds	r7, #16
 80075a6:	46bd      	mov	sp, r7
 80075a8:	bd80      	pop	{r7, pc}

080075aa <USBD_LL_SetupStage>:
  *         Handle the setup stage
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetupStage(USBD_HandleTypeDef *pdev, uint8_t *psetup)
{
 80075aa:	b580      	push	{r7, lr}
 80075ac:	b084      	sub	sp, #16
 80075ae:	af00      	add	r7, sp, #0
 80075b0:	6078      	str	r0, [r7, #4]
 80075b2:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret;

  USBD_ParseSetupRequest(&pdev->request, psetup);
 80075b4:	687b      	ldr	r3, [r7, #4]
 80075b6:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 80075ba:	6839      	ldr	r1, [r7, #0]
 80075bc:	4618      	mov	r0, r3
 80075be:	f001 f908 	bl	80087d2 <USBD_ParseSetupRequest>

  pdev->ep0_state = USBD_EP0_SETUP;
 80075c2:	687b      	ldr	r3, [r7, #4]
 80075c4:	2201      	movs	r2, #1
 80075c6:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  pdev->ep0_data_len = pdev->request.wLength;
 80075ca:	687b      	ldr	r3, [r7, #4]
 80075cc:	f8b3 32b0 	ldrh.w	r3, [r3, #688]	; 0x2b0
 80075d0:	461a      	mov	r2, r3
 80075d2:	687b      	ldr	r3, [r7, #4]
 80075d4:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

  switch (pdev->request.bmRequest & 0x1FU)
 80075d8:	687b      	ldr	r3, [r7, #4]
 80075da:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 80075de:	f003 031f 	and.w	r3, r3, #31
 80075e2:	2b02      	cmp	r3, #2
 80075e4:	d01a      	beq.n	800761c <USBD_LL_SetupStage+0x72>
 80075e6:	2b02      	cmp	r3, #2
 80075e8:	d822      	bhi.n	8007630 <USBD_LL_SetupStage+0x86>
 80075ea:	2b00      	cmp	r3, #0
 80075ec:	d002      	beq.n	80075f4 <USBD_LL_SetupStage+0x4a>
 80075ee:	2b01      	cmp	r3, #1
 80075f0:	d00a      	beq.n	8007608 <USBD_LL_SetupStage+0x5e>
 80075f2:	e01d      	b.n	8007630 <USBD_LL_SetupStage+0x86>
  {
    case USB_REQ_RECIPIENT_DEVICE:
      ret = USBD_StdDevReq(pdev, &pdev->request);
 80075f4:	687b      	ldr	r3, [r7, #4]
 80075f6:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 80075fa:	4619      	mov	r1, r3
 80075fc:	6878      	ldr	r0, [r7, #4]
 80075fe:	f000 fb5f 	bl	8007cc0 <USBD_StdDevReq>
 8007602:	4603      	mov	r3, r0
 8007604:	73fb      	strb	r3, [r7, #15]
      break;
 8007606:	e020      	b.n	800764a <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_INTERFACE:
      ret = USBD_StdItfReq(pdev, &pdev->request);
 8007608:	687b      	ldr	r3, [r7, #4]
 800760a:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 800760e:	4619      	mov	r1, r3
 8007610:	6878      	ldr	r0, [r7, #4]
 8007612:	f000 fbc7 	bl	8007da4 <USBD_StdItfReq>
 8007616:	4603      	mov	r3, r0
 8007618:	73fb      	strb	r3, [r7, #15]
      break;
 800761a:	e016      	b.n	800764a <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_ENDPOINT:
      ret = USBD_StdEPReq(pdev, &pdev->request);
 800761c:	687b      	ldr	r3, [r7, #4]
 800761e:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 8007622:	4619      	mov	r1, r3
 8007624:	6878      	ldr	r0, [r7, #4]
 8007626:	f000 fc29 	bl	8007e7c <USBD_StdEPReq>
 800762a:	4603      	mov	r3, r0
 800762c:	73fb      	strb	r3, [r7, #15]
      break;
 800762e:	e00c      	b.n	800764a <USBD_LL_SetupStage+0xa0>

    default:
      ret = USBD_LL_StallEP(pdev, (pdev->request.bmRequest & 0x80U));
 8007630:	687b      	ldr	r3, [r7, #4]
 8007632:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 8007636:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 800763a:	b2db      	uxtb	r3, r3
 800763c:	4619      	mov	r1, r3
 800763e:	6878      	ldr	r0, [r7, #4]
 8007640:	f001 fe6c 	bl	800931c <USBD_LL_StallEP>
 8007644:	4603      	mov	r3, r0
 8007646:	73fb      	strb	r3, [r7, #15]
      break;
 8007648:	bf00      	nop
  }

  return ret;
 800764a:	7bfb      	ldrb	r3, [r7, #15]
}
 800764c:	4618      	mov	r0, r3
 800764e:	3710      	adds	r7, #16
 8007650:	46bd      	mov	sp, r7
 8007652:	bd80      	pop	{r7, pc}

08007654 <USBD_LL_DataOutStage>:
  * @param  pdata: data pointer
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataOutStage(USBD_HandleTypeDef *pdev,
                                        uint8_t epnum, uint8_t *pdata)
{
 8007654:	b580      	push	{r7, lr}
 8007656:	b086      	sub	sp, #24
 8007658:	af00      	add	r7, sp, #0
 800765a:	60f8      	str	r0, [r7, #12]
 800765c:	460b      	mov	r3, r1
 800765e:	607a      	str	r2, [r7, #4]
 8007660:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret = USBD_OK;
 8007662:	2300      	movs	r3, #0
 8007664:	75fb      	strb	r3, [r7, #23]
  uint8_t idx;

  if (epnum == 0U)
 8007666:	7afb      	ldrb	r3, [r7, #11]
 8007668:	2b00      	cmp	r3, #0
 800766a:	d16e      	bne.n	800774a <USBD_LL_DataOutStage+0xf6>
  {
    pep = &pdev->ep_out[0];
 800766c:	68fb      	ldr	r3, [r7, #12]
 800766e:	f503 73aa 	add.w	r3, r3, #340	; 0x154
 8007672:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_OUT)
 8007674:	68fb      	ldr	r3, [r7, #12]
 8007676:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 800767a:	2b03      	cmp	r3, #3
 800767c:	f040 8098 	bne.w	80077b0 <USBD_LL_DataOutStage+0x15c>
    {
      if (pep->rem_length > pep->maxpacket)
 8007680:	693b      	ldr	r3, [r7, #16]
 8007682:	689a      	ldr	r2, [r3, #8]
 8007684:	693b      	ldr	r3, [r7, #16]
 8007686:	68db      	ldr	r3, [r3, #12]
 8007688:	429a      	cmp	r2, r3
 800768a:	d913      	bls.n	80076b4 <USBD_LL_DataOutStage+0x60>
      {
        pep->rem_length -= pep->maxpacket;
 800768c:	693b      	ldr	r3, [r7, #16]
 800768e:	689a      	ldr	r2, [r3, #8]
 8007690:	693b      	ldr	r3, [r7, #16]
 8007692:	68db      	ldr	r3, [r3, #12]
 8007694:	1ad2      	subs	r2, r2, r3
 8007696:	693b      	ldr	r3, [r7, #16]
 8007698:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueRx(pdev, pdata, MIN(pep->rem_length, pep->maxpacket));
 800769a:	693b      	ldr	r3, [r7, #16]
 800769c:	68da      	ldr	r2, [r3, #12]
 800769e:	693b      	ldr	r3, [r7, #16]
 80076a0:	689b      	ldr	r3, [r3, #8]
 80076a2:	4293      	cmp	r3, r2
 80076a4:	bf28      	it	cs
 80076a6:	4613      	movcs	r3, r2
 80076a8:	461a      	mov	r2, r3
 80076aa:	6879      	ldr	r1, [r7, #4]
 80076ac:	68f8      	ldr	r0, [r7, #12]
 80076ae:	f001 f984 	bl	80089ba <USBD_CtlContinueRx>
 80076b2:	e07d      	b.n	80077b0 <USBD_LL_DataOutStage+0x15c>
      }
      else
      {
        /* Find the class ID relative to the current request */
        switch (pdev->request.bmRequest & 0x1FU)
 80076b4:	68fb      	ldr	r3, [r7, #12]
 80076b6:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 80076ba:	f003 031f 	and.w	r3, r3, #31
 80076be:	2b02      	cmp	r3, #2
 80076c0:	d014      	beq.n	80076ec <USBD_LL_DataOutStage+0x98>
 80076c2:	2b02      	cmp	r3, #2
 80076c4:	d81d      	bhi.n	8007702 <USBD_LL_DataOutStage+0xae>
 80076c6:	2b00      	cmp	r3, #0
 80076c8:	d002      	beq.n	80076d0 <USBD_LL_DataOutStage+0x7c>
 80076ca:	2b01      	cmp	r3, #1
 80076cc:	d003      	beq.n	80076d6 <USBD_LL_DataOutStage+0x82>
 80076ce:	e018      	b.n	8007702 <USBD_LL_DataOutStage+0xae>
        {
          case USB_REQ_RECIPIENT_DEVICE:
            /* Device requests must be managed by the first instantiated class
               (or duplicated by all classes for simplicity) */
            idx = 0U;
 80076d0:	2300      	movs	r3, #0
 80076d2:	75bb      	strb	r3, [r7, #22]
            break;
 80076d4:	e018      	b.n	8007708 <USBD_LL_DataOutStage+0xb4>

          case USB_REQ_RECIPIENT_INTERFACE:
            idx = USBD_CoreFindIF(pdev, LOBYTE(pdev->request.wIndex));
 80076d6:	68fb      	ldr	r3, [r7, #12]
 80076d8:	f8b3 32ae 	ldrh.w	r3, [r3, #686]	; 0x2ae
 80076dc:	b2db      	uxtb	r3, r3
 80076de:	4619      	mov	r1, r3
 80076e0:	68f8      	ldr	r0, [r7, #12]
 80076e2:	f000 fa5e 	bl	8007ba2 <USBD_CoreFindIF>
 80076e6:	4603      	mov	r3, r0
 80076e8:	75bb      	strb	r3, [r7, #22]
            break;
 80076ea:	e00d      	b.n	8007708 <USBD_LL_DataOutStage+0xb4>

          case USB_REQ_RECIPIENT_ENDPOINT:
            idx = USBD_CoreFindEP(pdev, LOBYTE(pdev->request.wIndex));
 80076ec:	68fb      	ldr	r3, [r7, #12]
 80076ee:	f8b3 32ae 	ldrh.w	r3, [r3, #686]	; 0x2ae
 80076f2:	b2db      	uxtb	r3, r3
 80076f4:	4619      	mov	r1, r3
 80076f6:	68f8      	ldr	r0, [r7, #12]
 80076f8:	f000 fa60 	bl	8007bbc <USBD_CoreFindEP>
 80076fc:	4603      	mov	r3, r0
 80076fe:	75bb      	strb	r3, [r7, #22]
            break;
 8007700:	e002      	b.n	8007708 <USBD_LL_DataOutStage+0xb4>

          default:
            /* Back to the first class in case of doubt */
            idx = 0U;
 8007702:	2300      	movs	r3, #0
 8007704:	75bb      	strb	r3, [r7, #22]
            break;
 8007706:	bf00      	nop
        }

        if (idx < USBD_MAX_SUPPORTED_CLASS)
 8007708:	7dbb      	ldrb	r3, [r7, #22]
 800770a:	2b00      	cmp	r3, #0
 800770c:	d119      	bne.n	8007742 <USBD_LL_DataOutStage+0xee>
        {
          /* Setup the class ID and route the request to the relative class function */
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800770e:	68fb      	ldr	r3, [r7, #12]
 8007710:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8007714:	b2db      	uxtb	r3, r3
 8007716:	2b03      	cmp	r3, #3
 8007718:	d113      	bne.n	8007742 <USBD_LL_DataOutStage+0xee>
          {
            if (pdev->pClass[idx]->EP0_RxReady != NULL)
 800771a:	7dba      	ldrb	r2, [r7, #22]
 800771c:	68fb      	ldr	r3, [r7, #12]
 800771e:	32ae      	adds	r2, #174	; 0xae
 8007720:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007724:	691b      	ldr	r3, [r3, #16]
 8007726:	2b00      	cmp	r3, #0
 8007728:	d00b      	beq.n	8007742 <USBD_LL_DataOutStage+0xee>
            {
              pdev->classId = idx;
 800772a:	7dba      	ldrb	r2, [r7, #22]
 800772c:	68fb      	ldr	r3, [r7, #12]
 800772e:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
              pdev->pClass[idx]->EP0_RxReady(pdev);
 8007732:	7dba      	ldrb	r2, [r7, #22]
 8007734:	68fb      	ldr	r3, [r7, #12]
 8007736:	32ae      	adds	r2, #174	; 0xae
 8007738:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800773c:	691b      	ldr	r3, [r3, #16]
 800773e:	68f8      	ldr	r0, [r7, #12]
 8007740:	4798      	blx	r3
            }
          }
        }

        (void)USBD_CtlSendStatus(pdev);
 8007742:	68f8      	ldr	r0, [r7, #12]
 8007744:	f001 f94a 	bl	80089dc <USBD_CtlSendStatus>
 8007748:	e032      	b.n	80077b0 <USBD_LL_DataOutStage+0x15c>
    }
  }
  else
  {
    /* Get the class index relative to this interface */
    idx = USBD_CoreFindEP(pdev, (epnum & 0x7FU));
 800774a:	7afb      	ldrb	r3, [r7, #11]
 800774c:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8007750:	b2db      	uxtb	r3, r3
 8007752:	4619      	mov	r1, r3
 8007754:	68f8      	ldr	r0, [r7, #12]
 8007756:	f000 fa31 	bl	8007bbc <USBD_CoreFindEP>
 800775a:	4603      	mov	r3, r0
 800775c:	75bb      	strb	r3, [r7, #22]

    if (((uint16_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 800775e:	7dbb      	ldrb	r3, [r7, #22]
 8007760:	2bff      	cmp	r3, #255	; 0xff
 8007762:	d025      	beq.n	80077b0 <USBD_LL_DataOutStage+0x15c>
 8007764:	7dbb      	ldrb	r3, [r7, #22]
 8007766:	2b00      	cmp	r3, #0
 8007768:	d122      	bne.n	80077b0 <USBD_LL_DataOutStage+0x15c>
    {
      /* Call the class data out function to manage the request */
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800776a:	68fb      	ldr	r3, [r7, #12]
 800776c:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8007770:	b2db      	uxtb	r3, r3
 8007772:	2b03      	cmp	r3, #3
 8007774:	d117      	bne.n	80077a6 <USBD_LL_DataOutStage+0x152>
      {
        if (pdev->pClass[idx]->DataOut != NULL)
 8007776:	7dba      	ldrb	r2, [r7, #22]
 8007778:	68fb      	ldr	r3, [r7, #12]
 800777a:	32ae      	adds	r2, #174	; 0xae
 800777c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007780:	699b      	ldr	r3, [r3, #24]
 8007782:	2b00      	cmp	r3, #0
 8007784:	d00f      	beq.n	80077a6 <USBD_LL_DataOutStage+0x152>
        {
          pdev->classId = idx;
 8007786:	7dba      	ldrb	r2, [r7, #22]
 8007788:	68fb      	ldr	r3, [r7, #12]
 800778a:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->DataOut(pdev, epnum);
 800778e:	7dba      	ldrb	r2, [r7, #22]
 8007790:	68fb      	ldr	r3, [r7, #12]
 8007792:	32ae      	adds	r2, #174	; 0xae
 8007794:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007798:	699b      	ldr	r3, [r3, #24]
 800779a:	7afa      	ldrb	r2, [r7, #11]
 800779c:	4611      	mov	r1, r2
 800779e:	68f8      	ldr	r0, [r7, #12]
 80077a0:	4798      	blx	r3
 80077a2:	4603      	mov	r3, r0
 80077a4:	75fb      	strb	r3, [r7, #23]
        }
      }
      if (ret != USBD_OK)
 80077a6:	7dfb      	ldrb	r3, [r7, #23]
 80077a8:	2b00      	cmp	r3, #0
 80077aa:	d001      	beq.n	80077b0 <USBD_LL_DataOutStage+0x15c>
      {
        return ret;
 80077ac:	7dfb      	ldrb	r3, [r7, #23]
 80077ae:	e000      	b.n	80077b2 <USBD_LL_DataOutStage+0x15e>
      }
    }
  }

  return USBD_OK;
 80077b0:	2300      	movs	r3, #0
}
 80077b2:	4618      	mov	r0, r3
 80077b4:	3718      	adds	r7, #24
 80077b6:	46bd      	mov	sp, r7
 80077b8:	bd80      	pop	{r7, pc}

080077ba <USBD_LL_DataInStage>:
  * @param  epnum: endpoint index
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataInStage(USBD_HandleTypeDef *pdev,
                                       uint8_t epnum, uint8_t *pdata)
{
 80077ba:	b580      	push	{r7, lr}
 80077bc:	b086      	sub	sp, #24
 80077be:	af00      	add	r7, sp, #0
 80077c0:	60f8      	str	r0, [r7, #12]
 80077c2:	460b      	mov	r3, r1
 80077c4:	607a      	str	r2, [r7, #4]
 80077c6:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret;
  uint8_t idx;

  if (epnum == 0U)
 80077c8:	7afb      	ldrb	r3, [r7, #11]
 80077ca:	2b00      	cmp	r3, #0
 80077cc:	d16f      	bne.n	80078ae <USBD_LL_DataInStage+0xf4>
  {
    pep = &pdev->ep_in[0];
 80077ce:	68fb      	ldr	r3, [r7, #12]
 80077d0:	3314      	adds	r3, #20
 80077d2:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_IN)
 80077d4:	68fb      	ldr	r3, [r7, #12]
 80077d6:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 80077da:	2b02      	cmp	r3, #2
 80077dc:	d15a      	bne.n	8007894 <USBD_LL_DataInStage+0xda>
    {
      if (pep->rem_length > pep->maxpacket)
 80077de:	693b      	ldr	r3, [r7, #16]
 80077e0:	689a      	ldr	r2, [r3, #8]
 80077e2:	693b      	ldr	r3, [r7, #16]
 80077e4:	68db      	ldr	r3, [r3, #12]
 80077e6:	429a      	cmp	r2, r3
 80077e8:	d914      	bls.n	8007814 <USBD_LL_DataInStage+0x5a>
      {
        pep->rem_length -= pep->maxpacket;
 80077ea:	693b      	ldr	r3, [r7, #16]
 80077ec:	689a      	ldr	r2, [r3, #8]
 80077ee:	693b      	ldr	r3, [r7, #16]
 80077f0:	68db      	ldr	r3, [r3, #12]
 80077f2:	1ad2      	subs	r2, r2, r3
 80077f4:	693b      	ldr	r3, [r7, #16]
 80077f6:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueSendData(pdev, pdata, pep->rem_length);
 80077f8:	693b      	ldr	r3, [r7, #16]
 80077fa:	689b      	ldr	r3, [r3, #8]
 80077fc:	461a      	mov	r2, r3
 80077fe:	6879      	ldr	r1, [r7, #4]
 8007800:	68f8      	ldr	r0, [r7, #12]
 8007802:	f001 f8ac 	bl	800895e <USBD_CtlContinueSendData>

        /* Prepare endpoint for premature end of transfer */
        (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8007806:	2300      	movs	r3, #0
 8007808:	2200      	movs	r2, #0
 800780a:	2100      	movs	r1, #0
 800780c:	68f8      	ldr	r0, [r7, #12]
 800780e:	f001 fe2f 	bl	8009470 <USBD_LL_PrepareReceive>
 8007812:	e03f      	b.n	8007894 <USBD_LL_DataInStage+0xda>
      }
      else
      {
        /* last packet is MPS multiple, so send ZLP packet */
        if ((pep->maxpacket == pep->rem_length) &&
 8007814:	693b      	ldr	r3, [r7, #16]
 8007816:	68da      	ldr	r2, [r3, #12]
 8007818:	693b      	ldr	r3, [r7, #16]
 800781a:	689b      	ldr	r3, [r3, #8]
 800781c:	429a      	cmp	r2, r3
 800781e:	d11c      	bne.n	800785a <USBD_LL_DataInStage+0xa0>
            (pep->total_length >= pep->maxpacket) &&
 8007820:	693b      	ldr	r3, [r7, #16]
 8007822:	685a      	ldr	r2, [r3, #4]
 8007824:	693b      	ldr	r3, [r7, #16]
 8007826:	68db      	ldr	r3, [r3, #12]
        if ((pep->maxpacket == pep->rem_length) &&
 8007828:	429a      	cmp	r2, r3
 800782a:	d316      	bcc.n	800785a <USBD_LL_DataInStage+0xa0>
            (pep->total_length < pdev->ep0_data_len))
 800782c:	693b      	ldr	r3, [r7, #16]
 800782e:	685a      	ldr	r2, [r3, #4]
 8007830:	68fb      	ldr	r3, [r7, #12]
 8007832:	f8d3 3298 	ldr.w	r3, [r3, #664]	; 0x298
            (pep->total_length >= pep->maxpacket) &&
 8007836:	429a      	cmp	r2, r3
 8007838:	d20f      	bcs.n	800785a <USBD_LL_DataInStage+0xa0>
        {
          (void)USBD_CtlContinueSendData(pdev, NULL, 0U);
 800783a:	2200      	movs	r2, #0
 800783c:	2100      	movs	r1, #0
 800783e:	68f8      	ldr	r0, [r7, #12]
 8007840:	f001 f88d 	bl	800895e <USBD_CtlContinueSendData>
          pdev->ep0_data_len = 0U;
 8007844:	68fb      	ldr	r3, [r7, #12]
 8007846:	2200      	movs	r2, #0
 8007848:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

          /* Prepare endpoint for premature end of transfer */
          (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 800784c:	2300      	movs	r3, #0
 800784e:	2200      	movs	r2, #0
 8007850:	2100      	movs	r1, #0
 8007852:	68f8      	ldr	r0, [r7, #12]
 8007854:	f001 fe0c 	bl	8009470 <USBD_LL_PrepareReceive>
 8007858:	e01c      	b.n	8007894 <USBD_LL_DataInStage+0xda>
        }
        else
        {
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800785a:	68fb      	ldr	r3, [r7, #12]
 800785c:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8007860:	b2db      	uxtb	r3, r3
 8007862:	2b03      	cmp	r3, #3
 8007864:	d10f      	bne.n	8007886 <USBD_LL_DataInStage+0xcc>
          {
            if (pdev->pClass[0]->EP0_TxSent != NULL)
 8007866:	68fb      	ldr	r3, [r7, #12]
 8007868:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800786c:	68db      	ldr	r3, [r3, #12]
 800786e:	2b00      	cmp	r3, #0
 8007870:	d009      	beq.n	8007886 <USBD_LL_DataInStage+0xcc>
            {
              pdev->classId = 0U;
 8007872:	68fb      	ldr	r3, [r7, #12]
 8007874:	2200      	movs	r2, #0
 8007876:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
              pdev->pClass[0]->EP0_TxSent(pdev);
 800787a:	68fb      	ldr	r3, [r7, #12]
 800787c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007880:	68db      	ldr	r3, [r3, #12]
 8007882:	68f8      	ldr	r0, [r7, #12]
 8007884:	4798      	blx	r3
            }
          }
          (void)USBD_LL_StallEP(pdev, 0x80U);
 8007886:	2180      	movs	r1, #128	; 0x80
 8007888:	68f8      	ldr	r0, [r7, #12]
 800788a:	f001 fd47 	bl	800931c <USBD_LL_StallEP>
          (void)USBD_CtlReceiveStatus(pdev);
 800788e:	68f8      	ldr	r0, [r7, #12]
 8007890:	f001 f8b7 	bl	8008a02 <USBD_CtlReceiveStatus>
        (void)USBD_LL_StallEP(pdev, 0x80U);
      }
#endif
    }

    if (pdev->dev_test_mode != 0U)
 8007894:	68fb      	ldr	r3, [r7, #12]
 8007896:	f893 32a0 	ldrb.w	r3, [r3, #672]	; 0x2a0
 800789a:	2b00      	cmp	r3, #0
 800789c:	d03a      	beq.n	8007914 <USBD_LL_DataInStage+0x15a>
    {
      (void)USBD_RunTestMode(pdev);
 800789e:	68f8      	ldr	r0, [r7, #12]
 80078a0:	f7ff fe42 	bl	8007528 <USBD_RunTestMode>
      pdev->dev_test_mode = 0U;
 80078a4:	68fb      	ldr	r3, [r7, #12]
 80078a6:	2200      	movs	r2, #0
 80078a8:	f883 22a0 	strb.w	r2, [r3, #672]	; 0x2a0
 80078ac:	e032      	b.n	8007914 <USBD_LL_DataInStage+0x15a>
    }
  }
  else
  {
    /* Get the class index relative to this interface */
    idx = USBD_CoreFindEP(pdev, ((uint8_t)epnum | 0x80U));
 80078ae:	7afb      	ldrb	r3, [r7, #11]
 80078b0:	f063 037f 	orn	r3, r3, #127	; 0x7f
 80078b4:	b2db      	uxtb	r3, r3
 80078b6:	4619      	mov	r1, r3
 80078b8:	68f8      	ldr	r0, [r7, #12]
 80078ba:	f000 f97f 	bl	8007bbc <USBD_CoreFindEP>
 80078be:	4603      	mov	r3, r0
 80078c0:	75fb      	strb	r3, [r7, #23]

    if (((uint16_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 80078c2:	7dfb      	ldrb	r3, [r7, #23]
 80078c4:	2bff      	cmp	r3, #255	; 0xff
 80078c6:	d025      	beq.n	8007914 <USBD_LL_DataInStage+0x15a>
 80078c8:	7dfb      	ldrb	r3, [r7, #23]
 80078ca:	2b00      	cmp	r3, #0
 80078cc:	d122      	bne.n	8007914 <USBD_LL_DataInStage+0x15a>
    {
      /* Call the class data out function to manage the request */
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80078ce:	68fb      	ldr	r3, [r7, #12]
 80078d0:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80078d4:	b2db      	uxtb	r3, r3
 80078d6:	2b03      	cmp	r3, #3
 80078d8:	d11c      	bne.n	8007914 <USBD_LL_DataInStage+0x15a>
      {
        if (pdev->pClass[idx]->DataIn != NULL)
 80078da:	7dfa      	ldrb	r2, [r7, #23]
 80078dc:	68fb      	ldr	r3, [r7, #12]
 80078de:	32ae      	adds	r2, #174	; 0xae
 80078e0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80078e4:	695b      	ldr	r3, [r3, #20]
 80078e6:	2b00      	cmp	r3, #0
 80078e8:	d014      	beq.n	8007914 <USBD_LL_DataInStage+0x15a>
        {
          pdev->classId = idx;
 80078ea:	7dfa      	ldrb	r2, [r7, #23]
 80078ec:	68fb      	ldr	r3, [r7, #12]
 80078ee:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->DataIn(pdev, epnum);
 80078f2:	7dfa      	ldrb	r2, [r7, #23]
 80078f4:	68fb      	ldr	r3, [r7, #12]
 80078f6:	32ae      	adds	r2, #174	; 0xae
 80078f8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80078fc:	695b      	ldr	r3, [r3, #20]
 80078fe:	7afa      	ldrb	r2, [r7, #11]
 8007900:	4611      	mov	r1, r2
 8007902:	68f8      	ldr	r0, [r7, #12]
 8007904:	4798      	blx	r3
 8007906:	4603      	mov	r3, r0
 8007908:	75bb      	strb	r3, [r7, #22]

          if (ret != USBD_OK)
 800790a:	7dbb      	ldrb	r3, [r7, #22]
 800790c:	2b00      	cmp	r3, #0
 800790e:	d001      	beq.n	8007914 <USBD_LL_DataInStage+0x15a>
          {
            return ret;
 8007910:	7dbb      	ldrb	r3, [r7, #22]
 8007912:	e000      	b.n	8007916 <USBD_LL_DataInStage+0x15c>
        }
      }
    }
  }

  return USBD_OK;
 8007914:	2300      	movs	r3, #0
}
 8007916:	4618      	mov	r0, r3
 8007918:	3718      	adds	r7, #24
 800791a:	46bd      	mov	sp, r7
 800791c:	bd80      	pop	{r7, pc}

0800791e <USBD_LL_Reset>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Reset(USBD_HandleTypeDef *pdev)
{
 800791e:	b580      	push	{r7, lr}
 8007920:	b084      	sub	sp, #16
 8007922:	af00      	add	r7, sp, #0
 8007924:	6078      	str	r0, [r7, #4]
  USBD_StatusTypeDef ret = USBD_OK;
 8007926:	2300      	movs	r3, #0
 8007928:	73fb      	strb	r3, [r7, #15]

  /* Upon Reset call user call back */
  pdev->dev_state = USBD_STATE_DEFAULT;
 800792a:	687b      	ldr	r3, [r7, #4]
 800792c:	2201      	movs	r2, #1
 800792e:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->ep0_state = USBD_EP0_IDLE;
 8007932:	687b      	ldr	r3, [r7, #4]
 8007934:	2200      	movs	r2, #0
 8007936:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->dev_config = 0U;
 800793a:	687b      	ldr	r3, [r7, #4]
 800793c:	2200      	movs	r2, #0
 800793e:	605a      	str	r2, [r3, #4]
  pdev->dev_remote_wakeup = 0U;
 8007940:	687b      	ldr	r3, [r7, #4]
 8007942:	2200      	movs	r2, #0
 8007944:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
  pdev->dev_test_mode = 0U;
 8007948:	687b      	ldr	r3, [r7, #4]
 800794a:	2200      	movs	r2, #0
 800794c:	f883 22a0 	strb.w	r2, [r3, #672]	; 0x2a0
      }
    }
  }
#else

  if (pdev->pClass[0] != NULL)
 8007950:	687b      	ldr	r3, [r7, #4]
 8007952:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007956:	2b00      	cmp	r3, #0
 8007958:	d014      	beq.n	8007984 <USBD_LL_Reset+0x66>
  {
    if (pdev->pClass[0]->DeInit != NULL)
 800795a:	687b      	ldr	r3, [r7, #4]
 800795c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007960:	685b      	ldr	r3, [r3, #4]
 8007962:	2b00      	cmp	r3, #0
 8007964:	d00e      	beq.n	8007984 <USBD_LL_Reset+0x66>
    {
      if (pdev->pClass[0]->DeInit(pdev, (uint8_t)pdev->dev_config) != USBD_OK)
 8007966:	687b      	ldr	r3, [r7, #4]
 8007968:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800796c:	685b      	ldr	r3, [r3, #4]
 800796e:	687a      	ldr	r2, [r7, #4]
 8007970:	6852      	ldr	r2, [r2, #4]
 8007972:	b2d2      	uxtb	r2, r2
 8007974:	4611      	mov	r1, r2
 8007976:	6878      	ldr	r0, [r7, #4]
 8007978:	4798      	blx	r3
 800797a:	4603      	mov	r3, r0
 800797c:	2b00      	cmp	r3, #0
 800797e:	d001      	beq.n	8007984 <USBD_LL_Reset+0x66>
      {
        ret = USBD_FAIL;
 8007980:	2303      	movs	r3, #3
 8007982:	73fb      	strb	r3, [r7, #15]
    }
  }
#endif /* USE_USBD_COMPOSITE */

  /* Open EP0 OUT */
  (void)USBD_LL_OpenEP(pdev, 0x00U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 8007984:	2340      	movs	r3, #64	; 0x40
 8007986:	2200      	movs	r2, #0
 8007988:	2100      	movs	r1, #0
 800798a:	6878      	ldr	r0, [r7, #4]
 800798c:	f001 fc81 	bl	8009292 <USBD_LL_OpenEP>
  pdev->ep_out[0x00U & 0xFU].is_used = 1U;
 8007990:	687b      	ldr	r3, [r7, #4]
 8007992:	2201      	movs	r2, #1
 8007994:	f8a3 2164 	strh.w	r2, [r3, #356]	; 0x164

  pdev->ep_out[0].maxpacket = USB_MAX_EP0_SIZE;
 8007998:	687b      	ldr	r3, [r7, #4]
 800799a:	2240      	movs	r2, #64	; 0x40
 800799c:	f8c3 2160 	str.w	r2, [r3, #352]	; 0x160

  /* Open EP0 IN */
  (void)USBD_LL_OpenEP(pdev, 0x80U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 80079a0:	2340      	movs	r3, #64	; 0x40
 80079a2:	2200      	movs	r2, #0
 80079a4:	2180      	movs	r1, #128	; 0x80
 80079a6:	6878      	ldr	r0, [r7, #4]
 80079a8:	f001 fc73 	bl	8009292 <USBD_LL_OpenEP>
  pdev->ep_in[0x80U & 0xFU].is_used = 1U;
 80079ac:	687b      	ldr	r3, [r7, #4]
 80079ae:	2201      	movs	r2, #1
 80079b0:	849a      	strh	r2, [r3, #36]	; 0x24

  pdev->ep_in[0].maxpacket = USB_MAX_EP0_SIZE;
 80079b2:	687b      	ldr	r3, [r7, #4]
 80079b4:	2240      	movs	r2, #64	; 0x40
 80079b6:	621a      	str	r2, [r3, #32]

  return ret;
 80079b8:	7bfb      	ldrb	r3, [r7, #15]
}
 80079ba:	4618      	mov	r0, r3
 80079bc:	3710      	adds	r7, #16
 80079be:	46bd      	mov	sp, r7
 80079c0:	bd80      	pop	{r7, pc}

080079c2 <USBD_LL_SetSpeed>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetSpeed(USBD_HandleTypeDef *pdev,
                                    USBD_SpeedTypeDef speed)
{
 80079c2:	b480      	push	{r7}
 80079c4:	b083      	sub	sp, #12
 80079c6:	af00      	add	r7, sp, #0
 80079c8:	6078      	str	r0, [r7, #4]
 80079ca:	460b      	mov	r3, r1
 80079cc:	70fb      	strb	r3, [r7, #3]
  pdev->dev_speed = speed;
 80079ce:	687b      	ldr	r3, [r7, #4]
 80079d0:	78fa      	ldrb	r2, [r7, #3]
 80079d2:	741a      	strb	r2, [r3, #16]

  return USBD_OK;
 80079d4:	2300      	movs	r3, #0
}
 80079d6:	4618      	mov	r0, r3
 80079d8:	370c      	adds	r7, #12
 80079da:	46bd      	mov	sp, r7
 80079dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80079e0:	4770      	bx	lr

080079e2 <USBD_LL_Suspend>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Suspend(USBD_HandleTypeDef *pdev)
{
 80079e2:	b480      	push	{r7}
 80079e4:	b083      	sub	sp, #12
 80079e6:	af00      	add	r7, sp, #0
 80079e8:	6078      	str	r0, [r7, #4]
  pdev->dev_old_state = pdev->dev_state;
 80079ea:	687b      	ldr	r3, [r7, #4]
 80079ec:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80079f0:	b2da      	uxtb	r2, r3
 80079f2:	687b      	ldr	r3, [r7, #4]
 80079f4:	f883 229d 	strb.w	r2, [r3, #669]	; 0x29d
  pdev->dev_state = USBD_STATE_SUSPENDED;
 80079f8:	687b      	ldr	r3, [r7, #4]
 80079fa:	2204      	movs	r2, #4
 80079fc:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c

  return USBD_OK;
 8007a00:	2300      	movs	r3, #0
}
 8007a02:	4618      	mov	r0, r3
 8007a04:	370c      	adds	r7, #12
 8007a06:	46bd      	mov	sp, r7
 8007a08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007a0c:	4770      	bx	lr

08007a0e <USBD_LL_Resume>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Resume(USBD_HandleTypeDef *pdev)
{
 8007a0e:	b480      	push	{r7}
 8007a10:	b083      	sub	sp, #12
 8007a12:	af00      	add	r7, sp, #0
 8007a14:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_SUSPENDED)
 8007a16:	687b      	ldr	r3, [r7, #4]
 8007a18:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8007a1c:	b2db      	uxtb	r3, r3
 8007a1e:	2b04      	cmp	r3, #4
 8007a20:	d106      	bne.n	8007a30 <USBD_LL_Resume+0x22>
  {
    pdev->dev_state = pdev->dev_old_state;
 8007a22:	687b      	ldr	r3, [r7, #4]
 8007a24:	f893 329d 	ldrb.w	r3, [r3, #669]	; 0x29d
 8007a28:	b2da      	uxtb	r2, r3
 8007a2a:	687b      	ldr	r3, [r7, #4]
 8007a2c:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  }

  return USBD_OK;
 8007a30:	2300      	movs	r3, #0
}
 8007a32:	4618      	mov	r0, r3
 8007a34:	370c      	adds	r7, #12
 8007a36:	46bd      	mov	sp, r7
 8007a38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007a3c:	4770      	bx	lr

08007a3e <USBD_LL_SOF>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_SOF(USBD_HandleTypeDef *pdev)
{
 8007a3e:	b580      	push	{r7, lr}
 8007a40:	b082      	sub	sp, #8
 8007a42:	af00      	add	r7, sp, #0
 8007a44:	6078      	str	r0, [r7, #4]
  /* The SOF event can be distributed for all classes that support it */
  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8007a46:	687b      	ldr	r3, [r7, #4]
 8007a48:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8007a4c:	b2db      	uxtb	r3, r3
 8007a4e:	2b03      	cmp	r3, #3
 8007a50:	d110      	bne.n	8007a74 <USBD_LL_SOF+0x36>
          }
        }
      }
    }
#else
    if (pdev->pClass[0] != NULL)
 8007a52:	687b      	ldr	r3, [r7, #4]
 8007a54:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007a58:	2b00      	cmp	r3, #0
 8007a5a:	d00b      	beq.n	8007a74 <USBD_LL_SOF+0x36>
    {
      if (pdev->pClass[0]->SOF != NULL)
 8007a5c:	687b      	ldr	r3, [r7, #4]
 8007a5e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007a62:	69db      	ldr	r3, [r3, #28]
 8007a64:	2b00      	cmp	r3, #0
 8007a66:	d005      	beq.n	8007a74 <USBD_LL_SOF+0x36>
      {
        (void)pdev->pClass[0]->SOF(pdev);
 8007a68:	687b      	ldr	r3, [r7, #4]
 8007a6a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007a6e:	69db      	ldr	r3, [r3, #28]
 8007a70:	6878      	ldr	r0, [r7, #4]
 8007a72:	4798      	blx	r3
      }
    }
#endif /* USE_USBD_COMPOSITE */
  }

  return USBD_OK;
 8007a74:	2300      	movs	r3, #0
}
 8007a76:	4618      	mov	r0, r3
 8007a78:	3708      	adds	r7, #8
 8007a7a:	46bd      	mov	sp, r7
 8007a7c:	bd80      	pop	{r7, pc}

08007a7e <USBD_LL_IsoINIncomplete>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_IsoINIncomplete(USBD_HandleTypeDef *pdev,
                                           uint8_t epnum)
{
 8007a7e:	b580      	push	{r7, lr}
 8007a80:	b082      	sub	sp, #8
 8007a82:	af00      	add	r7, sp, #0
 8007a84:	6078      	str	r0, [r7, #4]
 8007a86:	460b      	mov	r3, r1
 8007a88:	70fb      	strb	r3, [r7, #3]
  if (pdev->pClass[pdev->classId] == NULL)
 8007a8a:	687b      	ldr	r3, [r7, #4]
 8007a8c:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8007a90:	687b      	ldr	r3, [r7, #4]
 8007a92:	32ae      	adds	r2, #174	; 0xae
 8007a94:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007a98:	2b00      	cmp	r3, #0
 8007a9a:	d101      	bne.n	8007aa0 <USBD_LL_IsoINIncomplete+0x22>
  {
    return USBD_FAIL;
 8007a9c:	2303      	movs	r3, #3
 8007a9e:	e01c      	b.n	8007ada <USBD_LL_IsoINIncomplete+0x5c>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8007aa0:	687b      	ldr	r3, [r7, #4]
 8007aa2:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8007aa6:	b2db      	uxtb	r3, r3
 8007aa8:	2b03      	cmp	r3, #3
 8007aaa:	d115      	bne.n	8007ad8 <USBD_LL_IsoINIncomplete+0x5a>
  {
    if (pdev->pClass[pdev->classId]->IsoINIncomplete != NULL)
 8007aac:	687b      	ldr	r3, [r7, #4]
 8007aae:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8007ab2:	687b      	ldr	r3, [r7, #4]
 8007ab4:	32ae      	adds	r2, #174	; 0xae
 8007ab6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007aba:	6a1b      	ldr	r3, [r3, #32]
 8007abc:	2b00      	cmp	r3, #0
 8007abe:	d00b      	beq.n	8007ad8 <USBD_LL_IsoINIncomplete+0x5a>
    {
      (void)pdev->pClass[pdev->classId]->IsoINIncomplete(pdev, epnum);
 8007ac0:	687b      	ldr	r3, [r7, #4]
 8007ac2:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8007ac6:	687b      	ldr	r3, [r7, #4]
 8007ac8:	32ae      	adds	r2, #174	; 0xae
 8007aca:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007ace:	6a1b      	ldr	r3, [r3, #32]
 8007ad0:	78fa      	ldrb	r2, [r7, #3]
 8007ad2:	4611      	mov	r1, r2
 8007ad4:	6878      	ldr	r0, [r7, #4]
 8007ad6:	4798      	blx	r3
    }
  }

  return USBD_OK;
 8007ad8:	2300      	movs	r3, #0
}
 8007ada:	4618      	mov	r0, r3
 8007adc:	3708      	adds	r7, #8
 8007ade:	46bd      	mov	sp, r7
 8007ae0:	bd80      	pop	{r7, pc}

08007ae2 <USBD_LL_IsoOUTIncomplete>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_IsoOUTIncomplete(USBD_HandleTypeDef *pdev,
                                            uint8_t epnum)
{
 8007ae2:	b580      	push	{r7, lr}
 8007ae4:	b082      	sub	sp, #8
 8007ae6:	af00      	add	r7, sp, #0
 8007ae8:	6078      	str	r0, [r7, #4]
 8007aea:	460b      	mov	r3, r1
 8007aec:	70fb      	strb	r3, [r7, #3]
  if (pdev->pClass[pdev->classId] == NULL)
 8007aee:	687b      	ldr	r3, [r7, #4]
 8007af0:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8007af4:	687b      	ldr	r3, [r7, #4]
 8007af6:	32ae      	adds	r2, #174	; 0xae
 8007af8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007afc:	2b00      	cmp	r3, #0
 8007afe:	d101      	bne.n	8007b04 <USBD_LL_IsoOUTIncomplete+0x22>
  {
    return USBD_FAIL;
 8007b00:	2303      	movs	r3, #3
 8007b02:	e01c      	b.n	8007b3e <USBD_LL_IsoOUTIncomplete+0x5c>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8007b04:	687b      	ldr	r3, [r7, #4]
 8007b06:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8007b0a:	b2db      	uxtb	r3, r3
 8007b0c:	2b03      	cmp	r3, #3
 8007b0e:	d115      	bne.n	8007b3c <USBD_LL_IsoOUTIncomplete+0x5a>
  {
    if (pdev->pClass[pdev->classId]->IsoOUTIncomplete != NULL)
 8007b10:	687b      	ldr	r3, [r7, #4]
 8007b12:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8007b16:	687b      	ldr	r3, [r7, #4]
 8007b18:	32ae      	adds	r2, #174	; 0xae
 8007b1a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007b1e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007b20:	2b00      	cmp	r3, #0
 8007b22:	d00b      	beq.n	8007b3c <USBD_LL_IsoOUTIncomplete+0x5a>
    {
      (void)pdev->pClass[pdev->classId]->IsoOUTIncomplete(pdev, epnum);
 8007b24:	687b      	ldr	r3, [r7, #4]
 8007b26:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8007b2a:	687b      	ldr	r3, [r7, #4]
 8007b2c:	32ae      	adds	r2, #174	; 0xae
 8007b2e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007b32:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007b34:	78fa      	ldrb	r2, [r7, #3]
 8007b36:	4611      	mov	r1, r2
 8007b38:	6878      	ldr	r0, [r7, #4]
 8007b3a:	4798      	blx	r3
    }
  }

  return USBD_OK;
 8007b3c:	2300      	movs	r3, #0
}
 8007b3e:	4618      	mov	r0, r3
 8007b40:	3708      	adds	r7, #8
 8007b42:	46bd      	mov	sp, r7
 8007b44:	bd80      	pop	{r7, pc}

08007b46 <USBD_LL_DevConnected>:
  *         Handle device connection event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DevConnected(USBD_HandleTypeDef *pdev)
{
 8007b46:	b480      	push	{r7}
 8007b48:	b083      	sub	sp, #12
 8007b4a:	af00      	add	r7, sp, #0
 8007b4c:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 8007b4e:	2300      	movs	r3, #0
}
 8007b50:	4618      	mov	r0, r3
 8007b52:	370c      	adds	r7, #12
 8007b54:	46bd      	mov	sp, r7
 8007b56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007b5a:	4770      	bx	lr

08007b5c <USBD_LL_DevDisconnected>:
  *         Handle device disconnection event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DevDisconnected(USBD_HandleTypeDef *pdev)
{
 8007b5c:	b580      	push	{r7, lr}
 8007b5e:	b084      	sub	sp, #16
 8007b60:	af00      	add	r7, sp, #0
 8007b62:	6078      	str	r0, [r7, #4]
  USBD_StatusTypeDef   ret = USBD_OK;
 8007b64:	2300      	movs	r3, #0
 8007b66:	73fb      	strb	r3, [r7, #15]

  /* Free Class Resources */
  pdev->dev_state = USBD_STATE_DEFAULT;
 8007b68:	687b      	ldr	r3, [r7, #4]
 8007b6a:	2201      	movs	r2, #1
 8007b6c:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
        }
      }
    }
  }
#else
  if (pdev->pClass[0] != NULL)
 8007b70:	687b      	ldr	r3, [r7, #4]
 8007b72:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007b76:	2b00      	cmp	r3, #0
 8007b78:	d00e      	beq.n	8007b98 <USBD_LL_DevDisconnected+0x3c>
  {
    if (pdev->pClass[0]->DeInit(pdev, (uint8_t)pdev->dev_config) != 0U)
 8007b7a:	687b      	ldr	r3, [r7, #4]
 8007b7c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007b80:	685b      	ldr	r3, [r3, #4]
 8007b82:	687a      	ldr	r2, [r7, #4]
 8007b84:	6852      	ldr	r2, [r2, #4]
 8007b86:	b2d2      	uxtb	r2, r2
 8007b88:	4611      	mov	r1, r2
 8007b8a:	6878      	ldr	r0, [r7, #4]
 8007b8c:	4798      	blx	r3
 8007b8e:	4603      	mov	r3, r0
 8007b90:	2b00      	cmp	r3, #0
 8007b92:	d001      	beq.n	8007b98 <USBD_LL_DevDisconnected+0x3c>
    {
      ret = USBD_FAIL;
 8007b94:	2303      	movs	r3, #3
 8007b96:	73fb      	strb	r3, [r7, #15]
    }
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 8007b98:	7bfb      	ldrb	r3, [r7, #15]
}
 8007b9a:	4618      	mov	r0, r3
 8007b9c:	3710      	adds	r7, #16
 8007b9e:	46bd      	mov	sp, r7
 8007ba0:	bd80      	pop	{r7, pc}

08007ba2 <USBD_CoreFindIF>:
  * @param  pdev: device instance
  * @param  index : selected interface number
  * @retval index of the class using the selected interface number. OxFF if no class found.
  */
uint8_t USBD_CoreFindIF(USBD_HandleTypeDef *pdev, uint8_t index)
{
 8007ba2:	b480      	push	{r7}
 8007ba4:	b083      	sub	sp, #12
 8007ba6:	af00      	add	r7, sp, #0
 8007ba8:	6078      	str	r0, [r7, #4]
 8007baa:	460b      	mov	r3, r1
 8007bac:	70fb      	strb	r3, [r7, #3]
  return 0xFFU;
#else
  UNUSED(pdev);
  UNUSED(index);

  return 0x00U;
 8007bae:	2300      	movs	r3, #0
#endif /* USE_USBD_COMPOSITE */
}
 8007bb0:	4618      	mov	r0, r3
 8007bb2:	370c      	adds	r7, #12
 8007bb4:	46bd      	mov	sp, r7
 8007bb6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007bba:	4770      	bx	lr

08007bbc <USBD_CoreFindEP>:
  * @param  pdev: device instance
  * @param  index : selected endpoint number
  * @retval index of the class using the selected endpoint number. 0xFF if no class found.
  */
uint8_t USBD_CoreFindEP(USBD_HandleTypeDef *pdev, uint8_t index)
{
 8007bbc:	b480      	push	{r7}
 8007bbe:	b083      	sub	sp, #12
 8007bc0:	af00      	add	r7, sp, #0
 8007bc2:	6078      	str	r0, [r7, #4]
 8007bc4:	460b      	mov	r3, r1
 8007bc6:	70fb      	strb	r3, [r7, #3]
  return 0xFFU;
#else
  UNUSED(pdev);
  UNUSED(index);

  return 0x00U;
 8007bc8:	2300      	movs	r3, #0
#endif /* USE_USBD_COMPOSITE */
}
 8007bca:	4618      	mov	r0, r3
 8007bcc:	370c      	adds	r7, #12
 8007bce:	46bd      	mov	sp, r7
 8007bd0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007bd4:	4770      	bx	lr

08007bd6 <USBD_GetEpDesc>:
  * @param  pConfDesc:  pointer to Bos descriptor
  * @param  EpAddr:  endpoint address
  * @retval pointer to video endpoint descriptor
  */
void *USBD_GetEpDesc(uint8_t *pConfDesc, uint8_t EpAddr)
{
 8007bd6:	b580      	push	{r7, lr}
 8007bd8:	b086      	sub	sp, #24
 8007bda:	af00      	add	r7, sp, #0
 8007bdc:	6078      	str	r0, [r7, #4]
 8007bde:	460b      	mov	r3, r1
 8007be0:	70fb      	strb	r3, [r7, #3]
  USBD_DescHeaderTypeDef *pdesc = (USBD_DescHeaderTypeDef *)(void *)pConfDesc;
 8007be2:	687b      	ldr	r3, [r7, #4]
 8007be4:	617b      	str	r3, [r7, #20]
  USBD_ConfigDescTypeDef *desc = (USBD_ConfigDescTypeDef *)(void *)pConfDesc;
 8007be6:	687b      	ldr	r3, [r7, #4]
 8007be8:	60fb      	str	r3, [r7, #12]
  USBD_EpDescTypeDef *pEpDesc = NULL;
 8007bea:	2300      	movs	r3, #0
 8007bec:	613b      	str	r3, [r7, #16]
  uint16_t ptr;

  if (desc->wTotalLength > desc->bLength)
 8007bee:	68fb      	ldr	r3, [r7, #12]
 8007bf0:	885b      	ldrh	r3, [r3, #2]
 8007bf2:	b29a      	uxth	r2, r3
 8007bf4:	68fb      	ldr	r3, [r7, #12]
 8007bf6:	781b      	ldrb	r3, [r3, #0]
 8007bf8:	b29b      	uxth	r3, r3
 8007bfa:	429a      	cmp	r2, r3
 8007bfc:	d920      	bls.n	8007c40 <USBD_GetEpDesc+0x6a>
  {
    ptr = desc->bLength;
 8007bfe:	68fb      	ldr	r3, [r7, #12]
 8007c00:	781b      	ldrb	r3, [r3, #0]
 8007c02:	b29b      	uxth	r3, r3
 8007c04:	817b      	strh	r3, [r7, #10]

    while (ptr < desc->wTotalLength)
 8007c06:	e013      	b.n	8007c30 <USBD_GetEpDesc+0x5a>
    {
      pdesc = USBD_GetNextDesc((uint8_t *)pdesc, &ptr);
 8007c08:	f107 030a 	add.w	r3, r7, #10
 8007c0c:	4619      	mov	r1, r3
 8007c0e:	6978      	ldr	r0, [r7, #20]
 8007c10:	f000 f81b 	bl	8007c4a <USBD_GetNextDesc>
 8007c14:	6178      	str	r0, [r7, #20]

      if (pdesc->bDescriptorType == USB_DESC_TYPE_ENDPOINT)
 8007c16:	697b      	ldr	r3, [r7, #20]
 8007c18:	785b      	ldrb	r3, [r3, #1]
 8007c1a:	2b05      	cmp	r3, #5
 8007c1c:	d108      	bne.n	8007c30 <USBD_GetEpDesc+0x5a>
      {
        pEpDesc = (USBD_EpDescTypeDef *)(void *)pdesc;
 8007c1e:	697b      	ldr	r3, [r7, #20]
 8007c20:	613b      	str	r3, [r7, #16]

        if (pEpDesc->bEndpointAddress == EpAddr)
 8007c22:	693b      	ldr	r3, [r7, #16]
 8007c24:	789b      	ldrb	r3, [r3, #2]
 8007c26:	78fa      	ldrb	r2, [r7, #3]
 8007c28:	429a      	cmp	r2, r3
 8007c2a:	d008      	beq.n	8007c3e <USBD_GetEpDesc+0x68>
        {
          break;
        }
        else
        {
          pEpDesc = NULL;
 8007c2c:	2300      	movs	r3, #0
 8007c2e:	613b      	str	r3, [r7, #16]
    while (ptr < desc->wTotalLength)
 8007c30:	68fb      	ldr	r3, [r7, #12]
 8007c32:	885b      	ldrh	r3, [r3, #2]
 8007c34:	b29a      	uxth	r2, r3
 8007c36:	897b      	ldrh	r3, [r7, #10]
 8007c38:	429a      	cmp	r2, r3
 8007c3a:	d8e5      	bhi.n	8007c08 <USBD_GetEpDesc+0x32>
 8007c3c:	e000      	b.n	8007c40 <USBD_GetEpDesc+0x6a>
          break;
 8007c3e:	bf00      	nop
        }
      }
    }
  }

  return (void *)pEpDesc;
 8007c40:	693b      	ldr	r3, [r7, #16]
}
 8007c42:	4618      	mov	r0, r3
 8007c44:	3718      	adds	r7, #24
 8007c46:	46bd      	mov	sp, r7
 8007c48:	bd80      	pop	{r7, pc}

08007c4a <USBD_GetNextDesc>:
  * @param  buf: Buffer where the descriptor is available
  * @param  ptr: data pointer inside the descriptor
  * @retval next header
  */
USBD_DescHeaderTypeDef *USBD_GetNextDesc(uint8_t *pbuf, uint16_t *ptr)
{
 8007c4a:	b480      	push	{r7}
 8007c4c:	b085      	sub	sp, #20
 8007c4e:	af00      	add	r7, sp, #0
 8007c50:	6078      	str	r0, [r7, #4]
 8007c52:	6039      	str	r1, [r7, #0]
  USBD_DescHeaderTypeDef *pnext = (USBD_DescHeaderTypeDef *)(void *)pbuf;
 8007c54:	687b      	ldr	r3, [r7, #4]
 8007c56:	60fb      	str	r3, [r7, #12]

  *ptr += pnext->bLength;
 8007c58:	683b      	ldr	r3, [r7, #0]
 8007c5a:	881a      	ldrh	r2, [r3, #0]
 8007c5c:	68fb      	ldr	r3, [r7, #12]
 8007c5e:	781b      	ldrb	r3, [r3, #0]
 8007c60:	b29b      	uxth	r3, r3
 8007c62:	4413      	add	r3, r2
 8007c64:	b29a      	uxth	r2, r3
 8007c66:	683b      	ldr	r3, [r7, #0]
 8007c68:	801a      	strh	r2, [r3, #0]
  pnext = (USBD_DescHeaderTypeDef *)(void *)(pbuf + pnext->bLength);
 8007c6a:	68fb      	ldr	r3, [r7, #12]
 8007c6c:	781b      	ldrb	r3, [r3, #0]
 8007c6e:	461a      	mov	r2, r3
 8007c70:	687b      	ldr	r3, [r7, #4]
 8007c72:	4413      	add	r3, r2
 8007c74:	60fb      	str	r3, [r7, #12]

  return (pnext);
 8007c76:	68fb      	ldr	r3, [r7, #12]
}
 8007c78:	4618      	mov	r0, r3
 8007c7a:	3714      	adds	r7, #20
 8007c7c:	46bd      	mov	sp, r7
 8007c7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007c82:	4770      	bx	lr

08007c84 <SWAPBYTE>:

/** @defgroup USBD_DEF_Exported_Macros
  * @{
  */
__STATIC_INLINE uint16_t SWAPBYTE(uint8_t *addr)
{
 8007c84:	b480      	push	{r7}
 8007c86:	b087      	sub	sp, #28
 8007c88:	af00      	add	r7, sp, #0
 8007c8a:	6078      	str	r0, [r7, #4]
  uint16_t _SwapVal, _Byte1, _Byte2;
  uint8_t *_pbuff = addr;
 8007c8c:	687b      	ldr	r3, [r7, #4]
 8007c8e:	617b      	str	r3, [r7, #20]

  _Byte1 = *(uint8_t *)_pbuff;
 8007c90:	697b      	ldr	r3, [r7, #20]
 8007c92:	781b      	ldrb	r3, [r3, #0]
 8007c94:	827b      	strh	r3, [r7, #18]
  _pbuff++;
 8007c96:	697b      	ldr	r3, [r7, #20]
 8007c98:	3301      	adds	r3, #1
 8007c9a:	617b      	str	r3, [r7, #20]
  _Byte2 = *(uint8_t *)_pbuff;
 8007c9c:	697b      	ldr	r3, [r7, #20]
 8007c9e:	781b      	ldrb	r3, [r3, #0]
 8007ca0:	823b      	strh	r3, [r7, #16]

  _SwapVal = (_Byte2 << 8) | _Byte1;
 8007ca2:	8a3b      	ldrh	r3, [r7, #16]
 8007ca4:	021b      	lsls	r3, r3, #8
 8007ca6:	b21a      	sxth	r2, r3
 8007ca8:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 8007cac:	4313      	orrs	r3, r2
 8007cae:	b21b      	sxth	r3, r3
 8007cb0:	81fb      	strh	r3, [r7, #14]

  return _SwapVal;
 8007cb2:	89fb      	ldrh	r3, [r7, #14]
}
 8007cb4:	4618      	mov	r0, r3
 8007cb6:	371c      	adds	r7, #28
 8007cb8:	46bd      	mov	sp, r7
 8007cba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007cbe:	4770      	bx	lr

08007cc0 <USBD_StdDevReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdDevReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8007cc0:	b580      	push	{r7, lr}
 8007cc2:	b084      	sub	sp, #16
 8007cc4:	af00      	add	r7, sp, #0
 8007cc6:	6078      	str	r0, [r7, #4]
 8007cc8:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 8007cca:	2300      	movs	r3, #0
 8007ccc:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8007cce:	683b      	ldr	r3, [r7, #0]
 8007cd0:	781b      	ldrb	r3, [r3, #0]
 8007cd2:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8007cd6:	2b40      	cmp	r3, #64	; 0x40
 8007cd8:	d005      	beq.n	8007ce6 <USBD_StdDevReq+0x26>
 8007cda:	2b40      	cmp	r3, #64	; 0x40
 8007cdc:	d857      	bhi.n	8007d8e <USBD_StdDevReq+0xce>
 8007cde:	2b00      	cmp	r3, #0
 8007ce0:	d00f      	beq.n	8007d02 <USBD_StdDevReq+0x42>
 8007ce2:	2b20      	cmp	r3, #32
 8007ce4:	d153      	bne.n	8007d8e <USBD_StdDevReq+0xce>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      ret = (USBD_StatusTypeDef)pdev->pClass[pdev->classId]->Setup(pdev, req);
 8007ce6:	687b      	ldr	r3, [r7, #4]
 8007ce8:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8007cec:	687b      	ldr	r3, [r7, #4]
 8007cee:	32ae      	adds	r2, #174	; 0xae
 8007cf0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007cf4:	689b      	ldr	r3, [r3, #8]
 8007cf6:	6839      	ldr	r1, [r7, #0]
 8007cf8:	6878      	ldr	r0, [r7, #4]
 8007cfa:	4798      	blx	r3
 8007cfc:	4603      	mov	r3, r0
 8007cfe:	73fb      	strb	r3, [r7, #15]
      break;
 8007d00:	e04a      	b.n	8007d98 <USBD_StdDevReq+0xd8>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 8007d02:	683b      	ldr	r3, [r7, #0]
 8007d04:	785b      	ldrb	r3, [r3, #1]
 8007d06:	2b09      	cmp	r3, #9
 8007d08:	d83b      	bhi.n	8007d82 <USBD_StdDevReq+0xc2>
 8007d0a:	a201      	add	r2, pc, #4	; (adr r2, 8007d10 <USBD_StdDevReq+0x50>)
 8007d0c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007d10:	08007d65 	.word	0x08007d65
 8007d14:	08007d79 	.word	0x08007d79
 8007d18:	08007d83 	.word	0x08007d83
 8007d1c:	08007d6f 	.word	0x08007d6f
 8007d20:	08007d83 	.word	0x08007d83
 8007d24:	08007d43 	.word	0x08007d43
 8007d28:	08007d39 	.word	0x08007d39
 8007d2c:	08007d83 	.word	0x08007d83
 8007d30:	08007d5b 	.word	0x08007d5b
 8007d34:	08007d4d 	.word	0x08007d4d
      {
        case USB_REQ_GET_DESCRIPTOR:
          USBD_GetDescriptor(pdev, req);
 8007d38:	6839      	ldr	r1, [r7, #0]
 8007d3a:	6878      	ldr	r0, [r7, #4]
 8007d3c:	f000 fa3c 	bl	80081b8 <USBD_GetDescriptor>
          break;
 8007d40:	e024      	b.n	8007d8c <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_ADDRESS:
          USBD_SetAddress(pdev, req);
 8007d42:	6839      	ldr	r1, [r7, #0]
 8007d44:	6878      	ldr	r0, [r7, #4]
 8007d46:	f000 fba1 	bl	800848c <USBD_SetAddress>
          break;
 8007d4a:	e01f      	b.n	8007d8c <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_CONFIGURATION:
          ret = USBD_SetConfig(pdev, req);
 8007d4c:	6839      	ldr	r1, [r7, #0]
 8007d4e:	6878      	ldr	r0, [r7, #4]
 8007d50:	f000 fbe0 	bl	8008514 <USBD_SetConfig>
 8007d54:	4603      	mov	r3, r0
 8007d56:	73fb      	strb	r3, [r7, #15]
          break;
 8007d58:	e018      	b.n	8007d8c <USBD_StdDevReq+0xcc>

        case USB_REQ_GET_CONFIGURATION:
          USBD_GetConfig(pdev, req);
 8007d5a:	6839      	ldr	r1, [r7, #0]
 8007d5c:	6878      	ldr	r0, [r7, #4]
 8007d5e:	f000 fc83 	bl	8008668 <USBD_GetConfig>
          break;
 8007d62:	e013      	b.n	8007d8c <USBD_StdDevReq+0xcc>

        case USB_REQ_GET_STATUS:
          USBD_GetStatus(pdev, req);
 8007d64:	6839      	ldr	r1, [r7, #0]
 8007d66:	6878      	ldr	r0, [r7, #4]
 8007d68:	f000 fcb4 	bl	80086d4 <USBD_GetStatus>
          break;
 8007d6c:	e00e      	b.n	8007d8c <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_FEATURE:
          USBD_SetFeature(pdev, req);
 8007d6e:	6839      	ldr	r1, [r7, #0]
 8007d70:	6878      	ldr	r0, [r7, #4]
 8007d72:	f000 fce3 	bl	800873c <USBD_SetFeature>
          break;
 8007d76:	e009      	b.n	8007d8c <USBD_StdDevReq+0xcc>

        case USB_REQ_CLEAR_FEATURE:
          USBD_ClrFeature(pdev, req);
 8007d78:	6839      	ldr	r1, [r7, #0]
 8007d7a:	6878      	ldr	r0, [r7, #4]
 8007d7c:	f000 fd07 	bl	800878e <USBD_ClrFeature>
          break;
 8007d80:	e004      	b.n	8007d8c <USBD_StdDevReq+0xcc>

        default:
          USBD_CtlError(pdev, req);
 8007d82:	6839      	ldr	r1, [r7, #0]
 8007d84:	6878      	ldr	r0, [r7, #4]
 8007d86:	f000 fd5e 	bl	8008846 <USBD_CtlError>
          break;
 8007d8a:	bf00      	nop
      }
      break;
 8007d8c:	e004      	b.n	8007d98 <USBD_StdDevReq+0xd8>

    default:
      USBD_CtlError(pdev, req);
 8007d8e:	6839      	ldr	r1, [r7, #0]
 8007d90:	6878      	ldr	r0, [r7, #4]
 8007d92:	f000 fd58 	bl	8008846 <USBD_CtlError>
      break;
 8007d96:	bf00      	nop
  }

  return ret;
 8007d98:	7bfb      	ldrb	r3, [r7, #15]
}
 8007d9a:	4618      	mov	r0, r3
 8007d9c:	3710      	adds	r7, #16
 8007d9e:	46bd      	mov	sp, r7
 8007da0:	bd80      	pop	{r7, pc}
 8007da2:	bf00      	nop

08007da4 <USBD_StdItfReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdItfReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8007da4:	b580      	push	{r7, lr}
 8007da6:	b084      	sub	sp, #16
 8007da8:	af00      	add	r7, sp, #0
 8007daa:	6078      	str	r0, [r7, #4]
 8007dac:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 8007dae:	2300      	movs	r3, #0
 8007db0:	73fb      	strb	r3, [r7, #15]
  uint8_t idx;

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8007db2:	683b      	ldr	r3, [r7, #0]
 8007db4:	781b      	ldrb	r3, [r3, #0]
 8007db6:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8007dba:	2b40      	cmp	r3, #64	; 0x40
 8007dbc:	d005      	beq.n	8007dca <USBD_StdItfReq+0x26>
 8007dbe:	2b40      	cmp	r3, #64	; 0x40
 8007dc0:	d852      	bhi.n	8007e68 <USBD_StdItfReq+0xc4>
 8007dc2:	2b00      	cmp	r3, #0
 8007dc4:	d001      	beq.n	8007dca <USBD_StdItfReq+0x26>
 8007dc6:	2b20      	cmp	r3, #32
 8007dc8:	d14e      	bne.n	8007e68 <USBD_StdItfReq+0xc4>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
    case USB_REQ_TYPE_STANDARD:
      switch (pdev->dev_state)
 8007dca:	687b      	ldr	r3, [r7, #4]
 8007dcc:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8007dd0:	b2db      	uxtb	r3, r3
 8007dd2:	3b01      	subs	r3, #1
 8007dd4:	2b02      	cmp	r3, #2
 8007dd6:	d840      	bhi.n	8007e5a <USBD_StdItfReq+0xb6>
      {
        case USBD_STATE_DEFAULT:
        case USBD_STATE_ADDRESSED:
        case USBD_STATE_CONFIGURED:

          if (LOBYTE(req->wIndex) <= USBD_MAX_NUM_INTERFACES)
 8007dd8:	683b      	ldr	r3, [r7, #0]
 8007dda:	889b      	ldrh	r3, [r3, #4]
 8007ddc:	b2db      	uxtb	r3, r3
 8007dde:	2b01      	cmp	r3, #1
 8007de0:	d836      	bhi.n	8007e50 <USBD_StdItfReq+0xac>
          {
            /* Get the class index relative to this interface */
            idx = USBD_CoreFindIF(pdev, LOBYTE(req->wIndex));
 8007de2:	683b      	ldr	r3, [r7, #0]
 8007de4:	889b      	ldrh	r3, [r3, #4]
 8007de6:	b2db      	uxtb	r3, r3
 8007de8:	4619      	mov	r1, r3
 8007dea:	6878      	ldr	r0, [r7, #4]
 8007dec:	f7ff fed9 	bl	8007ba2 <USBD_CoreFindIF>
 8007df0:	4603      	mov	r3, r0
 8007df2:	73bb      	strb	r3, [r7, #14]
            if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 8007df4:	7bbb      	ldrb	r3, [r7, #14]
 8007df6:	2bff      	cmp	r3, #255	; 0xff
 8007df8:	d01d      	beq.n	8007e36 <USBD_StdItfReq+0x92>
 8007dfa:	7bbb      	ldrb	r3, [r7, #14]
 8007dfc:	2b00      	cmp	r3, #0
 8007dfe:	d11a      	bne.n	8007e36 <USBD_StdItfReq+0x92>
            {
              /* Call the class data out function to manage the request */
              if (pdev->pClass[idx]->Setup != NULL)
 8007e00:	7bba      	ldrb	r2, [r7, #14]
 8007e02:	687b      	ldr	r3, [r7, #4]
 8007e04:	32ae      	adds	r2, #174	; 0xae
 8007e06:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007e0a:	689b      	ldr	r3, [r3, #8]
 8007e0c:	2b00      	cmp	r3, #0
 8007e0e:	d00f      	beq.n	8007e30 <USBD_StdItfReq+0x8c>
              {
                pdev->classId = idx;
 8007e10:	7bba      	ldrb	r2, [r7, #14]
 8007e12:	687b      	ldr	r3, [r7, #4]
 8007e14:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
                ret = (USBD_StatusTypeDef)(pdev->pClass[idx]->Setup(pdev, req));
 8007e18:	7bba      	ldrb	r2, [r7, #14]
 8007e1a:	687b      	ldr	r3, [r7, #4]
 8007e1c:	32ae      	adds	r2, #174	; 0xae
 8007e1e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007e22:	689b      	ldr	r3, [r3, #8]
 8007e24:	6839      	ldr	r1, [r7, #0]
 8007e26:	6878      	ldr	r0, [r7, #4]
 8007e28:	4798      	blx	r3
 8007e2a:	4603      	mov	r3, r0
 8007e2c:	73fb      	strb	r3, [r7, #15]
              if (pdev->pClass[idx]->Setup != NULL)
 8007e2e:	e004      	b.n	8007e3a <USBD_StdItfReq+0x96>
              }
              else
              {
                /* should never reach this condition */
                ret = USBD_FAIL;
 8007e30:	2303      	movs	r3, #3
 8007e32:	73fb      	strb	r3, [r7, #15]
              if (pdev->pClass[idx]->Setup != NULL)
 8007e34:	e001      	b.n	8007e3a <USBD_StdItfReq+0x96>
              }
            }
            else
            {
              /* No relative interface found */
              ret = USBD_FAIL;
 8007e36:	2303      	movs	r3, #3
 8007e38:	73fb      	strb	r3, [r7, #15]
            }

            if ((req->wLength == 0U) && (ret == USBD_OK))
 8007e3a:	683b      	ldr	r3, [r7, #0]
 8007e3c:	88db      	ldrh	r3, [r3, #6]
 8007e3e:	2b00      	cmp	r3, #0
 8007e40:	d110      	bne.n	8007e64 <USBD_StdItfReq+0xc0>
 8007e42:	7bfb      	ldrb	r3, [r7, #15]
 8007e44:	2b00      	cmp	r3, #0
 8007e46:	d10d      	bne.n	8007e64 <USBD_StdItfReq+0xc0>
            {
              (void)USBD_CtlSendStatus(pdev);
 8007e48:	6878      	ldr	r0, [r7, #4]
 8007e4a:	f000 fdc7 	bl	80089dc <USBD_CtlSendStatus>
          }
          else
          {
            USBD_CtlError(pdev, req);
          }
          break;
 8007e4e:	e009      	b.n	8007e64 <USBD_StdItfReq+0xc0>
            USBD_CtlError(pdev, req);
 8007e50:	6839      	ldr	r1, [r7, #0]
 8007e52:	6878      	ldr	r0, [r7, #4]
 8007e54:	f000 fcf7 	bl	8008846 <USBD_CtlError>
          break;
 8007e58:	e004      	b.n	8007e64 <USBD_StdItfReq+0xc0>

        default:
          USBD_CtlError(pdev, req);
 8007e5a:	6839      	ldr	r1, [r7, #0]
 8007e5c:	6878      	ldr	r0, [r7, #4]
 8007e5e:	f000 fcf2 	bl	8008846 <USBD_CtlError>
          break;
 8007e62:	e000      	b.n	8007e66 <USBD_StdItfReq+0xc2>
          break;
 8007e64:	bf00      	nop
      }
      break;
 8007e66:	e004      	b.n	8007e72 <USBD_StdItfReq+0xce>

    default:
      USBD_CtlError(pdev, req);
 8007e68:	6839      	ldr	r1, [r7, #0]
 8007e6a:	6878      	ldr	r0, [r7, #4]
 8007e6c:	f000 fceb 	bl	8008846 <USBD_CtlError>
      break;
 8007e70:	bf00      	nop
  }

  return ret;
 8007e72:	7bfb      	ldrb	r3, [r7, #15]
}
 8007e74:	4618      	mov	r0, r3
 8007e76:	3710      	adds	r7, #16
 8007e78:	46bd      	mov	sp, r7
 8007e7a:	bd80      	pop	{r7, pc}

08007e7c <USBD_StdEPReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdEPReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8007e7c:	b580      	push	{r7, lr}
 8007e7e:	b084      	sub	sp, #16
 8007e80:	af00      	add	r7, sp, #0
 8007e82:	6078      	str	r0, [r7, #4]
 8007e84:	6039      	str	r1, [r7, #0]
  USBD_EndpointTypeDef *pep;
  uint8_t ep_addr;
  uint8_t idx;
  USBD_StatusTypeDef ret = USBD_OK;
 8007e86:	2300      	movs	r3, #0
 8007e88:	73fb      	strb	r3, [r7, #15]

  ep_addr = LOBYTE(req->wIndex);
 8007e8a:	683b      	ldr	r3, [r7, #0]
 8007e8c:	889b      	ldrh	r3, [r3, #4]
 8007e8e:	73bb      	strb	r3, [r7, #14]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8007e90:	683b      	ldr	r3, [r7, #0]
 8007e92:	781b      	ldrb	r3, [r3, #0]
 8007e94:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8007e98:	2b40      	cmp	r3, #64	; 0x40
 8007e9a:	d007      	beq.n	8007eac <USBD_StdEPReq+0x30>
 8007e9c:	2b40      	cmp	r3, #64	; 0x40
 8007e9e:	f200 817f 	bhi.w	80081a0 <USBD_StdEPReq+0x324>
 8007ea2:	2b00      	cmp	r3, #0
 8007ea4:	d02a      	beq.n	8007efc <USBD_StdEPReq+0x80>
 8007ea6:	2b20      	cmp	r3, #32
 8007ea8:	f040 817a 	bne.w	80081a0 <USBD_StdEPReq+0x324>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      /* Get the class index relative to this endpoint */
      idx = USBD_CoreFindEP(pdev, ep_addr);
 8007eac:	7bbb      	ldrb	r3, [r7, #14]
 8007eae:	4619      	mov	r1, r3
 8007eb0:	6878      	ldr	r0, [r7, #4]
 8007eb2:	f7ff fe83 	bl	8007bbc <USBD_CoreFindEP>
 8007eb6:	4603      	mov	r3, r0
 8007eb8:	737b      	strb	r3, [r7, #13]
      if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 8007eba:	7b7b      	ldrb	r3, [r7, #13]
 8007ebc:	2bff      	cmp	r3, #255	; 0xff
 8007ebe:	f000 8174 	beq.w	80081aa <USBD_StdEPReq+0x32e>
 8007ec2:	7b7b      	ldrb	r3, [r7, #13]
 8007ec4:	2b00      	cmp	r3, #0
 8007ec6:	f040 8170 	bne.w	80081aa <USBD_StdEPReq+0x32e>
      {
        pdev->classId = idx;
 8007eca:	7b7a      	ldrb	r2, [r7, #13]
 8007ecc:	687b      	ldr	r3, [r7, #4]
 8007ece:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
        /* Call the class data out function to manage the request */
        if (pdev->pClass[idx]->Setup != NULL)
 8007ed2:	7b7a      	ldrb	r2, [r7, #13]
 8007ed4:	687b      	ldr	r3, [r7, #4]
 8007ed6:	32ae      	adds	r2, #174	; 0xae
 8007ed8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007edc:	689b      	ldr	r3, [r3, #8]
 8007ede:	2b00      	cmp	r3, #0
 8007ee0:	f000 8163 	beq.w	80081aa <USBD_StdEPReq+0x32e>
        {
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->Setup(pdev, req);
 8007ee4:	7b7a      	ldrb	r2, [r7, #13]
 8007ee6:	687b      	ldr	r3, [r7, #4]
 8007ee8:	32ae      	adds	r2, #174	; 0xae
 8007eea:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007eee:	689b      	ldr	r3, [r3, #8]
 8007ef0:	6839      	ldr	r1, [r7, #0]
 8007ef2:	6878      	ldr	r0, [r7, #4]
 8007ef4:	4798      	blx	r3
 8007ef6:	4603      	mov	r3, r0
 8007ef8:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 8007efa:	e156      	b.n	80081aa <USBD_StdEPReq+0x32e>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 8007efc:	683b      	ldr	r3, [r7, #0]
 8007efe:	785b      	ldrb	r3, [r3, #1]
 8007f00:	2b03      	cmp	r3, #3
 8007f02:	d008      	beq.n	8007f16 <USBD_StdEPReq+0x9a>
 8007f04:	2b03      	cmp	r3, #3
 8007f06:	f300 8145 	bgt.w	8008194 <USBD_StdEPReq+0x318>
 8007f0a:	2b00      	cmp	r3, #0
 8007f0c:	f000 809b 	beq.w	8008046 <USBD_StdEPReq+0x1ca>
 8007f10:	2b01      	cmp	r3, #1
 8007f12:	d03c      	beq.n	8007f8e <USBD_StdEPReq+0x112>
 8007f14:	e13e      	b.n	8008194 <USBD_StdEPReq+0x318>
      {
        case USB_REQ_SET_FEATURE:
          switch (pdev->dev_state)
 8007f16:	687b      	ldr	r3, [r7, #4]
 8007f18:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8007f1c:	b2db      	uxtb	r3, r3
 8007f1e:	2b02      	cmp	r3, #2
 8007f20:	d002      	beq.n	8007f28 <USBD_StdEPReq+0xac>
 8007f22:	2b03      	cmp	r3, #3
 8007f24:	d016      	beq.n	8007f54 <USBD_StdEPReq+0xd8>
 8007f26:	e02c      	b.n	8007f82 <USBD_StdEPReq+0x106>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8007f28:	7bbb      	ldrb	r3, [r7, #14]
 8007f2a:	2b00      	cmp	r3, #0
 8007f2c:	d00d      	beq.n	8007f4a <USBD_StdEPReq+0xce>
 8007f2e:	7bbb      	ldrb	r3, [r7, #14]
 8007f30:	2b80      	cmp	r3, #128	; 0x80
 8007f32:	d00a      	beq.n	8007f4a <USBD_StdEPReq+0xce>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 8007f34:	7bbb      	ldrb	r3, [r7, #14]
 8007f36:	4619      	mov	r1, r3
 8007f38:	6878      	ldr	r0, [r7, #4]
 8007f3a:	f001 f9ef 	bl	800931c <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 8007f3e:	2180      	movs	r1, #128	; 0x80
 8007f40:	6878      	ldr	r0, [r7, #4]
 8007f42:	f001 f9eb 	bl	800931c <USBD_LL_StallEP>
 8007f46:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 8007f48:	e020      	b.n	8007f8c <USBD_StdEPReq+0x110>
                USBD_CtlError(pdev, req);
 8007f4a:	6839      	ldr	r1, [r7, #0]
 8007f4c:	6878      	ldr	r0, [r7, #4]
 8007f4e:	f000 fc7a 	bl	8008846 <USBD_CtlError>
              break;
 8007f52:	e01b      	b.n	8007f8c <USBD_StdEPReq+0x110>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 8007f54:	683b      	ldr	r3, [r7, #0]
 8007f56:	885b      	ldrh	r3, [r3, #2]
 8007f58:	2b00      	cmp	r3, #0
 8007f5a:	d10e      	bne.n	8007f7a <USBD_StdEPReq+0xfe>
              {
                if ((ep_addr != 0x00U) && (ep_addr != 0x80U) && (req->wLength == 0x00U))
 8007f5c:	7bbb      	ldrb	r3, [r7, #14]
 8007f5e:	2b00      	cmp	r3, #0
 8007f60:	d00b      	beq.n	8007f7a <USBD_StdEPReq+0xfe>
 8007f62:	7bbb      	ldrb	r3, [r7, #14]
 8007f64:	2b80      	cmp	r3, #128	; 0x80
 8007f66:	d008      	beq.n	8007f7a <USBD_StdEPReq+0xfe>
 8007f68:	683b      	ldr	r3, [r7, #0]
 8007f6a:	88db      	ldrh	r3, [r3, #6]
 8007f6c:	2b00      	cmp	r3, #0
 8007f6e:	d104      	bne.n	8007f7a <USBD_StdEPReq+0xfe>
                {
                  (void)USBD_LL_StallEP(pdev, ep_addr);
 8007f70:	7bbb      	ldrb	r3, [r7, #14]
 8007f72:	4619      	mov	r1, r3
 8007f74:	6878      	ldr	r0, [r7, #4]
 8007f76:	f001 f9d1 	bl	800931c <USBD_LL_StallEP>
                }
              }
              (void)USBD_CtlSendStatus(pdev);
 8007f7a:	6878      	ldr	r0, [r7, #4]
 8007f7c:	f000 fd2e 	bl	80089dc <USBD_CtlSendStatus>

              break;
 8007f80:	e004      	b.n	8007f8c <USBD_StdEPReq+0x110>

            default:
              USBD_CtlError(pdev, req);
 8007f82:	6839      	ldr	r1, [r7, #0]
 8007f84:	6878      	ldr	r0, [r7, #4]
 8007f86:	f000 fc5e 	bl	8008846 <USBD_CtlError>
              break;
 8007f8a:	bf00      	nop
          }
          break;
 8007f8c:	e107      	b.n	800819e <USBD_StdEPReq+0x322>

        case USB_REQ_CLEAR_FEATURE:

          switch (pdev->dev_state)
 8007f8e:	687b      	ldr	r3, [r7, #4]
 8007f90:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8007f94:	b2db      	uxtb	r3, r3
 8007f96:	2b02      	cmp	r3, #2
 8007f98:	d002      	beq.n	8007fa0 <USBD_StdEPReq+0x124>
 8007f9a:	2b03      	cmp	r3, #3
 8007f9c:	d016      	beq.n	8007fcc <USBD_StdEPReq+0x150>
 8007f9e:	e04b      	b.n	8008038 <USBD_StdEPReq+0x1bc>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8007fa0:	7bbb      	ldrb	r3, [r7, #14]
 8007fa2:	2b00      	cmp	r3, #0
 8007fa4:	d00d      	beq.n	8007fc2 <USBD_StdEPReq+0x146>
 8007fa6:	7bbb      	ldrb	r3, [r7, #14]
 8007fa8:	2b80      	cmp	r3, #128	; 0x80
 8007faa:	d00a      	beq.n	8007fc2 <USBD_StdEPReq+0x146>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 8007fac:	7bbb      	ldrb	r3, [r7, #14]
 8007fae:	4619      	mov	r1, r3
 8007fb0:	6878      	ldr	r0, [r7, #4]
 8007fb2:	f001 f9b3 	bl	800931c <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 8007fb6:	2180      	movs	r1, #128	; 0x80
 8007fb8:	6878      	ldr	r0, [r7, #4]
 8007fba:	f001 f9af 	bl	800931c <USBD_LL_StallEP>
 8007fbe:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 8007fc0:	e040      	b.n	8008044 <USBD_StdEPReq+0x1c8>
                USBD_CtlError(pdev, req);
 8007fc2:	6839      	ldr	r1, [r7, #0]
 8007fc4:	6878      	ldr	r0, [r7, #4]
 8007fc6:	f000 fc3e 	bl	8008846 <USBD_CtlError>
              break;
 8007fca:	e03b      	b.n	8008044 <USBD_StdEPReq+0x1c8>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 8007fcc:	683b      	ldr	r3, [r7, #0]
 8007fce:	885b      	ldrh	r3, [r3, #2]
 8007fd0:	2b00      	cmp	r3, #0
 8007fd2:	d136      	bne.n	8008042 <USBD_StdEPReq+0x1c6>
              {
                if ((ep_addr & 0x7FU) != 0x00U)
 8007fd4:	7bbb      	ldrb	r3, [r7, #14]
 8007fd6:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8007fda:	2b00      	cmp	r3, #0
 8007fdc:	d004      	beq.n	8007fe8 <USBD_StdEPReq+0x16c>
                {
                  (void)USBD_LL_ClearStallEP(pdev, ep_addr);
 8007fde:	7bbb      	ldrb	r3, [r7, #14]
 8007fe0:	4619      	mov	r1, r3
 8007fe2:	6878      	ldr	r0, [r7, #4]
 8007fe4:	f001 f9b9 	bl	800935a <USBD_LL_ClearStallEP>
                }
                (void)USBD_CtlSendStatus(pdev);
 8007fe8:	6878      	ldr	r0, [r7, #4]
 8007fea:	f000 fcf7 	bl	80089dc <USBD_CtlSendStatus>

                /* Get the class index relative to this interface */
                idx = USBD_CoreFindEP(pdev, ep_addr);
 8007fee:	7bbb      	ldrb	r3, [r7, #14]
 8007ff0:	4619      	mov	r1, r3
 8007ff2:	6878      	ldr	r0, [r7, #4]
 8007ff4:	f7ff fde2 	bl	8007bbc <USBD_CoreFindEP>
 8007ff8:	4603      	mov	r3, r0
 8007ffa:	737b      	strb	r3, [r7, #13]
                if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 8007ffc:	7b7b      	ldrb	r3, [r7, #13]
 8007ffe:	2bff      	cmp	r3, #255	; 0xff
 8008000:	d01f      	beq.n	8008042 <USBD_StdEPReq+0x1c6>
 8008002:	7b7b      	ldrb	r3, [r7, #13]
 8008004:	2b00      	cmp	r3, #0
 8008006:	d11c      	bne.n	8008042 <USBD_StdEPReq+0x1c6>
                {
                  pdev->classId = idx;
 8008008:	7b7a      	ldrb	r2, [r7, #13]
 800800a:	687b      	ldr	r3, [r7, #4]
 800800c:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
                  /* Call the class data out function to manage the request */
                  if (pdev->pClass[idx]->Setup != NULL)
 8008010:	7b7a      	ldrb	r2, [r7, #13]
 8008012:	687b      	ldr	r3, [r7, #4]
 8008014:	32ae      	adds	r2, #174	; 0xae
 8008016:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800801a:	689b      	ldr	r3, [r3, #8]
 800801c:	2b00      	cmp	r3, #0
 800801e:	d010      	beq.n	8008042 <USBD_StdEPReq+0x1c6>
                  {
                    ret = (USBD_StatusTypeDef)(pdev->pClass[idx]->Setup(pdev, req));
 8008020:	7b7a      	ldrb	r2, [r7, #13]
 8008022:	687b      	ldr	r3, [r7, #4]
 8008024:	32ae      	adds	r2, #174	; 0xae
 8008026:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800802a:	689b      	ldr	r3, [r3, #8]
 800802c:	6839      	ldr	r1, [r7, #0]
 800802e:	6878      	ldr	r0, [r7, #4]
 8008030:	4798      	blx	r3
 8008032:	4603      	mov	r3, r0
 8008034:	73fb      	strb	r3, [r7, #15]
                  }
                }
              }
              break;
 8008036:	e004      	b.n	8008042 <USBD_StdEPReq+0x1c6>

            default:
              USBD_CtlError(pdev, req);
 8008038:	6839      	ldr	r1, [r7, #0]
 800803a:	6878      	ldr	r0, [r7, #4]
 800803c:	f000 fc03 	bl	8008846 <USBD_CtlError>
              break;
 8008040:	e000      	b.n	8008044 <USBD_StdEPReq+0x1c8>
              break;
 8008042:	bf00      	nop
          }
          break;
 8008044:	e0ab      	b.n	800819e <USBD_StdEPReq+0x322>

        case USB_REQ_GET_STATUS:
          switch (pdev->dev_state)
 8008046:	687b      	ldr	r3, [r7, #4]
 8008048:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800804c:	b2db      	uxtb	r3, r3
 800804e:	2b02      	cmp	r3, #2
 8008050:	d002      	beq.n	8008058 <USBD_StdEPReq+0x1dc>
 8008052:	2b03      	cmp	r3, #3
 8008054:	d032      	beq.n	80080bc <USBD_StdEPReq+0x240>
 8008056:	e097      	b.n	8008188 <USBD_StdEPReq+0x30c>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8008058:	7bbb      	ldrb	r3, [r7, #14]
 800805a:	2b00      	cmp	r3, #0
 800805c:	d007      	beq.n	800806e <USBD_StdEPReq+0x1f2>
 800805e:	7bbb      	ldrb	r3, [r7, #14]
 8008060:	2b80      	cmp	r3, #128	; 0x80
 8008062:	d004      	beq.n	800806e <USBD_StdEPReq+0x1f2>
              {
                USBD_CtlError(pdev, req);
 8008064:	6839      	ldr	r1, [r7, #0]
 8008066:	6878      	ldr	r0, [r7, #4]
 8008068:	f000 fbed 	bl	8008846 <USBD_CtlError>
                break;
 800806c:	e091      	b.n	8008192 <USBD_StdEPReq+0x316>
              }
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800806e:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8008072:	2b00      	cmp	r3, #0
 8008074:	da0b      	bge.n	800808e <USBD_StdEPReq+0x212>
 8008076:	7bbb      	ldrb	r3, [r7, #14]
 8008078:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800807c:	4613      	mov	r3, r2
 800807e:	009b      	lsls	r3, r3, #2
 8008080:	4413      	add	r3, r2
 8008082:	009b      	lsls	r3, r3, #2
 8008084:	3310      	adds	r3, #16
 8008086:	687a      	ldr	r2, [r7, #4]
 8008088:	4413      	add	r3, r2
 800808a:	3304      	adds	r3, #4
 800808c:	e00b      	b.n	80080a6 <USBD_StdEPReq+0x22a>
                    &pdev->ep_out[ep_addr & 0x7FU];
 800808e:	7bbb      	ldrb	r3, [r7, #14]
 8008090:	f003 027f 	and.w	r2, r3, #127	; 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8008094:	4613      	mov	r3, r2
 8008096:	009b      	lsls	r3, r3, #2
 8008098:	4413      	add	r3, r2
 800809a:	009b      	lsls	r3, r3, #2
 800809c:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 80080a0:	687a      	ldr	r2, [r7, #4]
 80080a2:	4413      	add	r3, r2
 80080a4:	3304      	adds	r3, #4
 80080a6:	60bb      	str	r3, [r7, #8]

              pep->status = 0x0000U;
 80080a8:	68bb      	ldr	r3, [r7, #8]
 80080aa:	2200      	movs	r2, #0
 80080ac:	601a      	str	r2, [r3, #0]

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 80080ae:	68bb      	ldr	r3, [r7, #8]
 80080b0:	2202      	movs	r2, #2
 80080b2:	4619      	mov	r1, r3
 80080b4:	6878      	ldr	r0, [r7, #4]
 80080b6:	f000 fc37 	bl	8008928 <USBD_CtlSendData>
              break;
 80080ba:	e06a      	b.n	8008192 <USBD_StdEPReq+0x316>

            case USBD_STATE_CONFIGURED:
              if ((ep_addr & 0x80U) == 0x80U)
 80080bc:	f997 300e 	ldrsb.w	r3, [r7, #14]
 80080c0:	2b00      	cmp	r3, #0
 80080c2:	da11      	bge.n	80080e8 <USBD_StdEPReq+0x26c>
              {
                if (pdev->ep_in[ep_addr & 0xFU].is_used == 0U)
 80080c4:	7bbb      	ldrb	r3, [r7, #14]
 80080c6:	f003 020f 	and.w	r2, r3, #15
 80080ca:	6879      	ldr	r1, [r7, #4]
 80080cc:	4613      	mov	r3, r2
 80080ce:	009b      	lsls	r3, r3, #2
 80080d0:	4413      	add	r3, r2
 80080d2:	009b      	lsls	r3, r3, #2
 80080d4:	440b      	add	r3, r1
 80080d6:	3324      	adds	r3, #36	; 0x24
 80080d8:	881b      	ldrh	r3, [r3, #0]
 80080da:	2b00      	cmp	r3, #0
 80080dc:	d117      	bne.n	800810e <USBD_StdEPReq+0x292>
                {
                  USBD_CtlError(pdev, req);
 80080de:	6839      	ldr	r1, [r7, #0]
 80080e0:	6878      	ldr	r0, [r7, #4]
 80080e2:	f000 fbb0 	bl	8008846 <USBD_CtlError>
                  break;
 80080e6:	e054      	b.n	8008192 <USBD_StdEPReq+0x316>
                }
              }
              else
              {
                if (pdev->ep_out[ep_addr & 0xFU].is_used == 0U)
 80080e8:	7bbb      	ldrb	r3, [r7, #14]
 80080ea:	f003 020f 	and.w	r2, r3, #15
 80080ee:	6879      	ldr	r1, [r7, #4]
 80080f0:	4613      	mov	r3, r2
 80080f2:	009b      	lsls	r3, r3, #2
 80080f4:	4413      	add	r3, r2
 80080f6:	009b      	lsls	r3, r3, #2
 80080f8:	440b      	add	r3, r1
 80080fa:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 80080fe:	881b      	ldrh	r3, [r3, #0]
 8008100:	2b00      	cmp	r3, #0
 8008102:	d104      	bne.n	800810e <USBD_StdEPReq+0x292>
                {
                  USBD_CtlError(pdev, req);
 8008104:	6839      	ldr	r1, [r7, #0]
 8008106:	6878      	ldr	r0, [r7, #4]
 8008108:	f000 fb9d 	bl	8008846 <USBD_CtlError>
                  break;
 800810c:	e041      	b.n	8008192 <USBD_StdEPReq+0x316>
                }
              }

              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800810e:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8008112:	2b00      	cmp	r3, #0
 8008114:	da0b      	bge.n	800812e <USBD_StdEPReq+0x2b2>
 8008116:	7bbb      	ldrb	r3, [r7, #14]
 8008118:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800811c:	4613      	mov	r3, r2
 800811e:	009b      	lsls	r3, r3, #2
 8008120:	4413      	add	r3, r2
 8008122:	009b      	lsls	r3, r3, #2
 8008124:	3310      	adds	r3, #16
 8008126:	687a      	ldr	r2, [r7, #4]
 8008128:	4413      	add	r3, r2
 800812a:	3304      	adds	r3, #4
 800812c:	e00b      	b.n	8008146 <USBD_StdEPReq+0x2ca>
                    &pdev->ep_out[ep_addr & 0x7FU];
 800812e:	7bbb      	ldrb	r3, [r7, #14]
 8008130:	f003 027f 	and.w	r2, r3, #127	; 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8008134:	4613      	mov	r3, r2
 8008136:	009b      	lsls	r3, r3, #2
 8008138:	4413      	add	r3, r2
 800813a:	009b      	lsls	r3, r3, #2
 800813c:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 8008140:	687a      	ldr	r2, [r7, #4]
 8008142:	4413      	add	r3, r2
 8008144:	3304      	adds	r3, #4
 8008146:	60bb      	str	r3, [r7, #8]

              if ((ep_addr == 0x00U) || (ep_addr == 0x80U))
 8008148:	7bbb      	ldrb	r3, [r7, #14]
 800814a:	2b00      	cmp	r3, #0
 800814c:	d002      	beq.n	8008154 <USBD_StdEPReq+0x2d8>
 800814e:	7bbb      	ldrb	r3, [r7, #14]
 8008150:	2b80      	cmp	r3, #128	; 0x80
 8008152:	d103      	bne.n	800815c <USBD_StdEPReq+0x2e0>
              {
                pep->status = 0x0000U;
 8008154:	68bb      	ldr	r3, [r7, #8]
 8008156:	2200      	movs	r2, #0
 8008158:	601a      	str	r2, [r3, #0]
 800815a:	e00e      	b.n	800817a <USBD_StdEPReq+0x2fe>
              }
              else if (USBD_LL_IsStallEP(pdev, ep_addr) != 0U)
 800815c:	7bbb      	ldrb	r3, [r7, #14]
 800815e:	4619      	mov	r1, r3
 8008160:	6878      	ldr	r0, [r7, #4]
 8008162:	f001 f919 	bl	8009398 <USBD_LL_IsStallEP>
 8008166:	4603      	mov	r3, r0
 8008168:	2b00      	cmp	r3, #0
 800816a:	d003      	beq.n	8008174 <USBD_StdEPReq+0x2f8>
              {
                pep->status = 0x0001U;
 800816c:	68bb      	ldr	r3, [r7, #8]
 800816e:	2201      	movs	r2, #1
 8008170:	601a      	str	r2, [r3, #0]
 8008172:	e002      	b.n	800817a <USBD_StdEPReq+0x2fe>
              }
              else
              {
                pep->status = 0x0000U;
 8008174:	68bb      	ldr	r3, [r7, #8]
 8008176:	2200      	movs	r2, #0
 8008178:	601a      	str	r2, [r3, #0]
              }

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 800817a:	68bb      	ldr	r3, [r7, #8]
 800817c:	2202      	movs	r2, #2
 800817e:	4619      	mov	r1, r3
 8008180:	6878      	ldr	r0, [r7, #4]
 8008182:	f000 fbd1 	bl	8008928 <USBD_CtlSendData>
              break;
 8008186:	e004      	b.n	8008192 <USBD_StdEPReq+0x316>

            default:
              USBD_CtlError(pdev, req);
 8008188:	6839      	ldr	r1, [r7, #0]
 800818a:	6878      	ldr	r0, [r7, #4]
 800818c:	f000 fb5b 	bl	8008846 <USBD_CtlError>
              break;
 8008190:	bf00      	nop
          }
          break;
 8008192:	e004      	b.n	800819e <USBD_StdEPReq+0x322>

        default:
          USBD_CtlError(pdev, req);
 8008194:	6839      	ldr	r1, [r7, #0]
 8008196:	6878      	ldr	r0, [r7, #4]
 8008198:	f000 fb55 	bl	8008846 <USBD_CtlError>
          break;
 800819c:	bf00      	nop
      }
      break;
 800819e:	e005      	b.n	80081ac <USBD_StdEPReq+0x330>

    default:
      USBD_CtlError(pdev, req);
 80081a0:	6839      	ldr	r1, [r7, #0]
 80081a2:	6878      	ldr	r0, [r7, #4]
 80081a4:	f000 fb4f 	bl	8008846 <USBD_CtlError>
      break;
 80081a8:	e000      	b.n	80081ac <USBD_StdEPReq+0x330>
      break;
 80081aa:	bf00      	nop
  }

  return ret;
 80081ac:	7bfb      	ldrb	r3, [r7, #15]
}
 80081ae:	4618      	mov	r0, r3
 80081b0:	3710      	adds	r7, #16
 80081b2:	46bd      	mov	sp, r7
 80081b4:	bd80      	pop	{r7, pc}
	...

080081b8 <USBD_GetDescriptor>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetDescriptor(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80081b8:	b580      	push	{r7, lr}
 80081ba:	b084      	sub	sp, #16
 80081bc:	af00      	add	r7, sp, #0
 80081be:	6078      	str	r0, [r7, #4]
 80081c0:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 80081c2:	2300      	movs	r3, #0
 80081c4:	813b      	strh	r3, [r7, #8]
  uint8_t *pbuf = NULL;
 80081c6:	2300      	movs	r3, #0
 80081c8:	60fb      	str	r3, [r7, #12]
  uint8_t err = 0U;
 80081ca:	2300      	movs	r3, #0
 80081cc:	72fb      	strb	r3, [r7, #11]

  switch (req->wValue >> 8)
 80081ce:	683b      	ldr	r3, [r7, #0]
 80081d0:	885b      	ldrh	r3, [r3, #2]
 80081d2:	0a1b      	lsrs	r3, r3, #8
 80081d4:	b29b      	uxth	r3, r3
 80081d6:	3b01      	subs	r3, #1
 80081d8:	2b06      	cmp	r3, #6
 80081da:	f200 8128 	bhi.w	800842e <USBD_GetDescriptor+0x276>
 80081de:	a201      	add	r2, pc, #4	; (adr r2, 80081e4 <USBD_GetDescriptor+0x2c>)
 80081e0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80081e4:	08008201 	.word	0x08008201
 80081e8:	08008219 	.word	0x08008219
 80081ec:	08008259 	.word	0x08008259
 80081f0:	0800842f 	.word	0x0800842f
 80081f4:	0800842f 	.word	0x0800842f
 80081f8:	080083cf 	.word	0x080083cf
 80081fc:	080083fb 	.word	0x080083fb
        err++;
      }
      break;
#endif /* (USBD_LPM_ENABLED == 1U) || (USBD_CLASS_BOS_ENABLED == 1U) */
    case USB_DESC_TYPE_DEVICE:
      pbuf = pdev->pDesc->GetDeviceDescriptor(pdev->dev_speed, &len);
 8008200:	687b      	ldr	r3, [r7, #4]
 8008202:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8008206:	681b      	ldr	r3, [r3, #0]
 8008208:	687a      	ldr	r2, [r7, #4]
 800820a:	7c12      	ldrb	r2, [r2, #16]
 800820c:	f107 0108 	add.w	r1, r7, #8
 8008210:	4610      	mov	r0, r2
 8008212:	4798      	blx	r3
 8008214:	60f8      	str	r0, [r7, #12]
      break;
 8008216:	e112      	b.n	800843e <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 8008218:	687b      	ldr	r3, [r7, #4]
 800821a:	7c1b      	ldrb	r3, [r3, #16]
 800821c:	2b00      	cmp	r3, #0
 800821e:	d10d      	bne.n	800823c <USBD_GetDescriptor+0x84>
          pbuf   = (uint8_t *)USBD_CMPSIT.GetHSConfigDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetHSConfigDescriptor(&len);
 8008220:	687b      	ldr	r3, [r7, #4]
 8008222:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8008226:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008228:	f107 0208 	add.w	r2, r7, #8
 800822c:	4610      	mov	r0, r2
 800822e:	4798      	blx	r3
 8008230:	60f8      	str	r0, [r7, #12]
        }
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 8008232:	68fb      	ldr	r3, [r7, #12]
 8008234:	3301      	adds	r3, #1
 8008236:	2202      	movs	r2, #2
 8008238:	701a      	strb	r2, [r3, #0]
        {
          pbuf   = (uint8_t *)pdev->pClass[0]->GetFSConfigDescriptor(&len);
        }
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
      }
      break;
 800823a:	e100      	b.n	800843e <USBD_GetDescriptor+0x286>
          pbuf   = (uint8_t *)pdev->pClass[0]->GetFSConfigDescriptor(&len);
 800823c:	687b      	ldr	r3, [r7, #4]
 800823e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8008242:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008244:	f107 0208 	add.w	r2, r7, #8
 8008248:	4610      	mov	r0, r2
 800824a:	4798      	blx	r3
 800824c:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 800824e:	68fb      	ldr	r3, [r7, #12]
 8008250:	3301      	adds	r3, #1
 8008252:	2202      	movs	r2, #2
 8008254:	701a      	strb	r2, [r3, #0]
      break;
 8008256:	e0f2      	b.n	800843e <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_STRING:
      switch ((uint8_t)(req->wValue))
 8008258:	683b      	ldr	r3, [r7, #0]
 800825a:	885b      	ldrh	r3, [r3, #2]
 800825c:	b2db      	uxtb	r3, r3
 800825e:	2b05      	cmp	r3, #5
 8008260:	f200 80ac 	bhi.w	80083bc <USBD_GetDescriptor+0x204>
 8008264:	a201      	add	r2, pc, #4	; (adr r2, 800826c <USBD_GetDescriptor+0xb4>)
 8008266:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800826a:	bf00      	nop
 800826c:	08008285 	.word	0x08008285
 8008270:	080082b9 	.word	0x080082b9
 8008274:	080082ed 	.word	0x080082ed
 8008278:	08008321 	.word	0x08008321
 800827c:	08008355 	.word	0x08008355
 8008280:	08008389 	.word	0x08008389
      {
        case USBD_IDX_LANGID_STR:
          if (pdev->pDesc->GetLangIDStrDescriptor != NULL)
 8008284:	687b      	ldr	r3, [r7, #4]
 8008286:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800828a:	685b      	ldr	r3, [r3, #4]
 800828c:	2b00      	cmp	r3, #0
 800828e:	d00b      	beq.n	80082a8 <USBD_GetDescriptor+0xf0>
          {
            pbuf = pdev->pDesc->GetLangIDStrDescriptor(pdev->dev_speed, &len);
 8008290:	687b      	ldr	r3, [r7, #4]
 8008292:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8008296:	685b      	ldr	r3, [r3, #4]
 8008298:	687a      	ldr	r2, [r7, #4]
 800829a:	7c12      	ldrb	r2, [r2, #16]
 800829c:	f107 0108 	add.w	r1, r7, #8
 80082a0:	4610      	mov	r0, r2
 80082a2:	4798      	blx	r3
 80082a4:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 80082a6:	e091      	b.n	80083cc <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 80082a8:	6839      	ldr	r1, [r7, #0]
 80082aa:	6878      	ldr	r0, [r7, #4]
 80082ac:	f000 facb 	bl	8008846 <USBD_CtlError>
            err++;
 80082b0:	7afb      	ldrb	r3, [r7, #11]
 80082b2:	3301      	adds	r3, #1
 80082b4:	72fb      	strb	r3, [r7, #11]
          break;
 80082b6:	e089      	b.n	80083cc <USBD_GetDescriptor+0x214>

        case USBD_IDX_MFC_STR:
          if (pdev->pDesc->GetManufacturerStrDescriptor != NULL)
 80082b8:	687b      	ldr	r3, [r7, #4]
 80082ba:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80082be:	689b      	ldr	r3, [r3, #8]
 80082c0:	2b00      	cmp	r3, #0
 80082c2:	d00b      	beq.n	80082dc <USBD_GetDescriptor+0x124>
          {
            pbuf = pdev->pDesc->GetManufacturerStrDescriptor(pdev->dev_speed, &len);
 80082c4:	687b      	ldr	r3, [r7, #4]
 80082c6:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80082ca:	689b      	ldr	r3, [r3, #8]
 80082cc:	687a      	ldr	r2, [r7, #4]
 80082ce:	7c12      	ldrb	r2, [r2, #16]
 80082d0:	f107 0108 	add.w	r1, r7, #8
 80082d4:	4610      	mov	r0, r2
 80082d6:	4798      	blx	r3
 80082d8:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 80082da:	e077      	b.n	80083cc <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 80082dc:	6839      	ldr	r1, [r7, #0]
 80082de:	6878      	ldr	r0, [r7, #4]
 80082e0:	f000 fab1 	bl	8008846 <USBD_CtlError>
            err++;
 80082e4:	7afb      	ldrb	r3, [r7, #11]
 80082e6:	3301      	adds	r3, #1
 80082e8:	72fb      	strb	r3, [r7, #11]
          break;
 80082ea:	e06f      	b.n	80083cc <USBD_GetDescriptor+0x214>

        case USBD_IDX_PRODUCT_STR:
          if (pdev->pDesc->GetProductStrDescriptor != NULL)
 80082ec:	687b      	ldr	r3, [r7, #4]
 80082ee:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80082f2:	68db      	ldr	r3, [r3, #12]
 80082f4:	2b00      	cmp	r3, #0
 80082f6:	d00b      	beq.n	8008310 <USBD_GetDescriptor+0x158>
          {
            pbuf = pdev->pDesc->GetProductStrDescriptor(pdev->dev_speed, &len);
 80082f8:	687b      	ldr	r3, [r7, #4]
 80082fa:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80082fe:	68db      	ldr	r3, [r3, #12]
 8008300:	687a      	ldr	r2, [r7, #4]
 8008302:	7c12      	ldrb	r2, [r2, #16]
 8008304:	f107 0108 	add.w	r1, r7, #8
 8008308:	4610      	mov	r0, r2
 800830a:	4798      	blx	r3
 800830c:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800830e:	e05d      	b.n	80083cc <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8008310:	6839      	ldr	r1, [r7, #0]
 8008312:	6878      	ldr	r0, [r7, #4]
 8008314:	f000 fa97 	bl	8008846 <USBD_CtlError>
            err++;
 8008318:	7afb      	ldrb	r3, [r7, #11]
 800831a:	3301      	adds	r3, #1
 800831c:	72fb      	strb	r3, [r7, #11]
          break;
 800831e:	e055      	b.n	80083cc <USBD_GetDescriptor+0x214>

        case USBD_IDX_SERIAL_STR:
          if (pdev->pDesc->GetSerialStrDescriptor != NULL)
 8008320:	687b      	ldr	r3, [r7, #4]
 8008322:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8008326:	691b      	ldr	r3, [r3, #16]
 8008328:	2b00      	cmp	r3, #0
 800832a:	d00b      	beq.n	8008344 <USBD_GetDescriptor+0x18c>
          {
            pbuf = pdev->pDesc->GetSerialStrDescriptor(pdev->dev_speed, &len);
 800832c:	687b      	ldr	r3, [r7, #4]
 800832e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8008332:	691b      	ldr	r3, [r3, #16]
 8008334:	687a      	ldr	r2, [r7, #4]
 8008336:	7c12      	ldrb	r2, [r2, #16]
 8008338:	f107 0108 	add.w	r1, r7, #8
 800833c:	4610      	mov	r0, r2
 800833e:	4798      	blx	r3
 8008340:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8008342:	e043      	b.n	80083cc <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8008344:	6839      	ldr	r1, [r7, #0]
 8008346:	6878      	ldr	r0, [r7, #4]
 8008348:	f000 fa7d 	bl	8008846 <USBD_CtlError>
            err++;
 800834c:	7afb      	ldrb	r3, [r7, #11]
 800834e:	3301      	adds	r3, #1
 8008350:	72fb      	strb	r3, [r7, #11]
          break;
 8008352:	e03b      	b.n	80083cc <USBD_GetDescriptor+0x214>

        case USBD_IDX_CONFIG_STR:
          if (pdev->pDesc->GetConfigurationStrDescriptor != NULL)
 8008354:	687b      	ldr	r3, [r7, #4]
 8008356:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800835a:	695b      	ldr	r3, [r3, #20]
 800835c:	2b00      	cmp	r3, #0
 800835e:	d00b      	beq.n	8008378 <USBD_GetDescriptor+0x1c0>
          {
            pbuf = pdev->pDesc->GetConfigurationStrDescriptor(pdev->dev_speed, &len);
 8008360:	687b      	ldr	r3, [r7, #4]
 8008362:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8008366:	695b      	ldr	r3, [r3, #20]
 8008368:	687a      	ldr	r2, [r7, #4]
 800836a:	7c12      	ldrb	r2, [r2, #16]
 800836c:	f107 0108 	add.w	r1, r7, #8
 8008370:	4610      	mov	r0, r2
 8008372:	4798      	blx	r3
 8008374:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8008376:	e029      	b.n	80083cc <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8008378:	6839      	ldr	r1, [r7, #0]
 800837a:	6878      	ldr	r0, [r7, #4]
 800837c:	f000 fa63 	bl	8008846 <USBD_CtlError>
            err++;
 8008380:	7afb      	ldrb	r3, [r7, #11]
 8008382:	3301      	adds	r3, #1
 8008384:	72fb      	strb	r3, [r7, #11]
          break;
 8008386:	e021      	b.n	80083cc <USBD_GetDescriptor+0x214>

        case USBD_IDX_INTERFACE_STR:
          if (pdev->pDesc->GetInterfaceStrDescriptor != NULL)
 8008388:	687b      	ldr	r3, [r7, #4]
 800838a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800838e:	699b      	ldr	r3, [r3, #24]
 8008390:	2b00      	cmp	r3, #0
 8008392:	d00b      	beq.n	80083ac <USBD_GetDescriptor+0x1f4>
          {
            pbuf = pdev->pDesc->GetInterfaceStrDescriptor(pdev->dev_speed, &len);
 8008394:	687b      	ldr	r3, [r7, #4]
 8008396:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800839a:	699b      	ldr	r3, [r3, #24]
 800839c:	687a      	ldr	r2, [r7, #4]
 800839e:	7c12      	ldrb	r2, [r2, #16]
 80083a0:	f107 0108 	add.w	r1, r7, #8
 80083a4:	4610      	mov	r0, r2
 80083a6:	4798      	blx	r3
 80083a8:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 80083aa:	e00f      	b.n	80083cc <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 80083ac:	6839      	ldr	r1, [r7, #0]
 80083ae:	6878      	ldr	r0, [r7, #4]
 80083b0:	f000 fa49 	bl	8008846 <USBD_CtlError>
            err++;
 80083b4:	7afb      	ldrb	r3, [r7, #11]
 80083b6:	3301      	adds	r3, #1
 80083b8:	72fb      	strb	r3, [r7, #11]
          break;
 80083ba:	e007      	b.n	80083cc <USBD_GetDescriptor+0x214>
            err++;
          }
#endif /* USBD_SUPPORT_USER_STRING_DESC  */

#if ((USBD_CLASS_USER_STRING_DESC == 0U) && (USBD_SUPPORT_USER_STRING_DESC == 0U))
          USBD_CtlError(pdev, req);
 80083bc:	6839      	ldr	r1, [r7, #0]
 80083be:	6878      	ldr	r0, [r7, #4]
 80083c0:	f000 fa41 	bl	8008846 <USBD_CtlError>
          err++;
 80083c4:	7afb      	ldrb	r3, [r7, #11]
 80083c6:	3301      	adds	r3, #1
 80083c8:	72fb      	strb	r3, [r7, #11]
#endif /* (USBD_CLASS_USER_STRING_DESC == 0U) && (USBD_SUPPORT_USER_STRING_DESC == 0U) */
          break;
 80083ca:	bf00      	nop
      }
      break;
 80083cc:	e037      	b.n	800843e <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_DEVICE_QUALIFIER:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 80083ce:	687b      	ldr	r3, [r7, #4]
 80083d0:	7c1b      	ldrb	r3, [r3, #16]
 80083d2:	2b00      	cmp	r3, #0
 80083d4:	d109      	bne.n	80083ea <USBD_GetDescriptor+0x232>
          pbuf = (uint8_t *)USBD_CMPSIT.GetDeviceQualifierDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetDeviceQualifierDescriptor(&len);
 80083d6:	687b      	ldr	r3, [r7, #4]
 80083d8:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80083dc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80083de:	f107 0208 	add.w	r2, r7, #8
 80083e2:	4610      	mov	r0, r2
 80083e4:	4798      	blx	r3
 80083e6:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 80083e8:	e029      	b.n	800843e <USBD_GetDescriptor+0x286>
        USBD_CtlError(pdev, req);
 80083ea:	6839      	ldr	r1, [r7, #0]
 80083ec:	6878      	ldr	r0, [r7, #4]
 80083ee:	f000 fa2a 	bl	8008846 <USBD_CtlError>
        err++;
 80083f2:	7afb      	ldrb	r3, [r7, #11]
 80083f4:	3301      	adds	r3, #1
 80083f6:	72fb      	strb	r3, [r7, #11]
      break;
 80083f8:	e021      	b.n	800843e <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 80083fa:	687b      	ldr	r3, [r7, #4]
 80083fc:	7c1b      	ldrb	r3, [r3, #16]
 80083fe:	2b00      	cmp	r3, #0
 8008400:	d10d      	bne.n	800841e <USBD_GetDescriptor+0x266>
          pbuf = (uint8_t *)USBD_CMPSIT.GetOtherSpeedConfigDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetOtherSpeedConfigDescriptor(&len);
 8008402:	687b      	ldr	r3, [r7, #4]
 8008404:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8008408:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800840a:	f107 0208 	add.w	r2, r7, #8
 800840e:	4610      	mov	r0, r2
 8008410:	4798      	blx	r3
 8008412:	60f8      	str	r0, [r7, #12]
        }
        pbuf[1] = USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION;
 8008414:	68fb      	ldr	r3, [r7, #12]
 8008416:	3301      	adds	r3, #1
 8008418:	2207      	movs	r2, #7
 800841a:	701a      	strb	r2, [r3, #0]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 800841c:	e00f      	b.n	800843e <USBD_GetDescriptor+0x286>
        USBD_CtlError(pdev, req);
 800841e:	6839      	ldr	r1, [r7, #0]
 8008420:	6878      	ldr	r0, [r7, #4]
 8008422:	f000 fa10 	bl	8008846 <USBD_CtlError>
        err++;
 8008426:	7afb      	ldrb	r3, [r7, #11]
 8008428:	3301      	adds	r3, #1
 800842a:	72fb      	strb	r3, [r7, #11]
      break;
 800842c:	e007      	b.n	800843e <USBD_GetDescriptor+0x286>

    default:
      USBD_CtlError(pdev, req);
 800842e:	6839      	ldr	r1, [r7, #0]
 8008430:	6878      	ldr	r0, [r7, #4]
 8008432:	f000 fa08 	bl	8008846 <USBD_CtlError>
      err++;
 8008436:	7afb      	ldrb	r3, [r7, #11]
 8008438:	3301      	adds	r3, #1
 800843a:	72fb      	strb	r3, [r7, #11]
      break;
 800843c:	bf00      	nop
  }

  if (err != 0U)
 800843e:	7afb      	ldrb	r3, [r7, #11]
 8008440:	2b00      	cmp	r3, #0
 8008442:	d11e      	bne.n	8008482 <USBD_GetDescriptor+0x2ca>
  {
    return;
  }

  if (req->wLength != 0U)
 8008444:	683b      	ldr	r3, [r7, #0]
 8008446:	88db      	ldrh	r3, [r3, #6]
 8008448:	2b00      	cmp	r3, #0
 800844a:	d016      	beq.n	800847a <USBD_GetDescriptor+0x2c2>
  {
    if (len != 0U)
 800844c:	893b      	ldrh	r3, [r7, #8]
 800844e:	2b00      	cmp	r3, #0
 8008450:	d00e      	beq.n	8008470 <USBD_GetDescriptor+0x2b8>
    {
      len = MIN(len, req->wLength);
 8008452:	683b      	ldr	r3, [r7, #0]
 8008454:	88da      	ldrh	r2, [r3, #6]
 8008456:	893b      	ldrh	r3, [r7, #8]
 8008458:	4293      	cmp	r3, r2
 800845a:	bf28      	it	cs
 800845c:	4613      	movcs	r3, r2
 800845e:	b29b      	uxth	r3, r3
 8008460:	813b      	strh	r3, [r7, #8]
      (void)USBD_CtlSendData(pdev, pbuf, len);
 8008462:	893b      	ldrh	r3, [r7, #8]
 8008464:	461a      	mov	r2, r3
 8008466:	68f9      	ldr	r1, [r7, #12]
 8008468:	6878      	ldr	r0, [r7, #4]
 800846a:	f000 fa5d 	bl	8008928 <USBD_CtlSendData>
 800846e:	e009      	b.n	8008484 <USBD_GetDescriptor+0x2cc>
    }
    else
    {
      USBD_CtlError(pdev, req);
 8008470:	6839      	ldr	r1, [r7, #0]
 8008472:	6878      	ldr	r0, [r7, #4]
 8008474:	f000 f9e7 	bl	8008846 <USBD_CtlError>
 8008478:	e004      	b.n	8008484 <USBD_GetDescriptor+0x2cc>
    }
  }
  else
  {
    (void)USBD_CtlSendStatus(pdev);
 800847a:	6878      	ldr	r0, [r7, #4]
 800847c:	f000 faae 	bl	80089dc <USBD_CtlSendStatus>
 8008480:	e000      	b.n	8008484 <USBD_GetDescriptor+0x2cc>
    return;
 8008482:	bf00      	nop
  }
}
 8008484:	3710      	adds	r7, #16
 8008486:	46bd      	mov	sp, r7
 8008488:	bd80      	pop	{r7, pc}
 800848a:	bf00      	nop

0800848c <USBD_SetAddress>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_SetAddress(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800848c:	b580      	push	{r7, lr}
 800848e:	b084      	sub	sp, #16
 8008490:	af00      	add	r7, sp, #0
 8008492:	6078      	str	r0, [r7, #4]
 8008494:	6039      	str	r1, [r7, #0]
  uint8_t  dev_addr;

  if ((req->wIndex == 0U) && (req->wLength == 0U) && (req->wValue < 128U))
 8008496:	683b      	ldr	r3, [r7, #0]
 8008498:	889b      	ldrh	r3, [r3, #4]
 800849a:	2b00      	cmp	r3, #0
 800849c:	d131      	bne.n	8008502 <USBD_SetAddress+0x76>
 800849e:	683b      	ldr	r3, [r7, #0]
 80084a0:	88db      	ldrh	r3, [r3, #6]
 80084a2:	2b00      	cmp	r3, #0
 80084a4:	d12d      	bne.n	8008502 <USBD_SetAddress+0x76>
 80084a6:	683b      	ldr	r3, [r7, #0]
 80084a8:	885b      	ldrh	r3, [r3, #2]
 80084aa:	2b7f      	cmp	r3, #127	; 0x7f
 80084ac:	d829      	bhi.n	8008502 <USBD_SetAddress+0x76>
  {
    dev_addr = (uint8_t)(req->wValue) & 0x7FU;
 80084ae:	683b      	ldr	r3, [r7, #0]
 80084b0:	885b      	ldrh	r3, [r3, #2]
 80084b2:	b2db      	uxtb	r3, r3
 80084b4:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80084b8:	73fb      	strb	r3, [r7, #15]

    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80084ba:	687b      	ldr	r3, [r7, #4]
 80084bc:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80084c0:	b2db      	uxtb	r3, r3
 80084c2:	2b03      	cmp	r3, #3
 80084c4:	d104      	bne.n	80084d0 <USBD_SetAddress+0x44>
    {
      USBD_CtlError(pdev, req);
 80084c6:	6839      	ldr	r1, [r7, #0]
 80084c8:	6878      	ldr	r0, [r7, #4]
 80084ca:	f000 f9bc 	bl	8008846 <USBD_CtlError>
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80084ce:	e01d      	b.n	800850c <USBD_SetAddress+0x80>
    }
    else
    {
      pdev->dev_address = dev_addr;
 80084d0:	687b      	ldr	r3, [r7, #4]
 80084d2:	7bfa      	ldrb	r2, [r7, #15]
 80084d4:	f883 229e 	strb.w	r2, [r3, #670]	; 0x29e
      (void)USBD_LL_SetUSBAddress(pdev, dev_addr);
 80084d8:	7bfb      	ldrb	r3, [r7, #15]
 80084da:	4619      	mov	r1, r3
 80084dc:	6878      	ldr	r0, [r7, #4]
 80084de:	f000 ff87 	bl	80093f0 <USBD_LL_SetUSBAddress>
      (void)USBD_CtlSendStatus(pdev);
 80084e2:	6878      	ldr	r0, [r7, #4]
 80084e4:	f000 fa7a 	bl	80089dc <USBD_CtlSendStatus>

      if (dev_addr != 0U)
 80084e8:	7bfb      	ldrb	r3, [r7, #15]
 80084ea:	2b00      	cmp	r3, #0
 80084ec:	d004      	beq.n	80084f8 <USBD_SetAddress+0x6c>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 80084ee:	687b      	ldr	r3, [r7, #4]
 80084f0:	2202      	movs	r2, #2
 80084f2:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80084f6:	e009      	b.n	800850c <USBD_SetAddress+0x80>
      }
      else
      {
        pdev->dev_state = USBD_STATE_DEFAULT;
 80084f8:	687b      	ldr	r3, [r7, #4]
 80084fa:	2201      	movs	r2, #1
 80084fc:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8008500:	e004      	b.n	800850c <USBD_SetAddress+0x80>
      }
    }
  }
  else
  {
    USBD_CtlError(pdev, req);
 8008502:	6839      	ldr	r1, [r7, #0]
 8008504:	6878      	ldr	r0, [r7, #4]
 8008506:	f000 f99e 	bl	8008846 <USBD_CtlError>
  }
}
 800850a:	bf00      	nop
 800850c:	bf00      	nop
 800850e:	3710      	adds	r7, #16
 8008510:	46bd      	mov	sp, r7
 8008512:	bd80      	pop	{r7, pc}

08008514 <USBD_SetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static USBD_StatusTypeDef USBD_SetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8008514:	b580      	push	{r7, lr}
 8008516:	b084      	sub	sp, #16
 8008518:	af00      	add	r7, sp, #0
 800851a:	6078      	str	r0, [r7, #4]
 800851c:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 800851e:	2300      	movs	r3, #0
 8008520:	73fb      	strb	r3, [r7, #15]
  static uint8_t cfgidx;

  cfgidx = (uint8_t)(req->wValue);
 8008522:	683b      	ldr	r3, [r7, #0]
 8008524:	885b      	ldrh	r3, [r3, #2]
 8008526:	b2da      	uxtb	r2, r3
 8008528:	4b4e      	ldr	r3, [pc, #312]	; (8008664 <USBD_SetConfig+0x150>)
 800852a:	701a      	strb	r2, [r3, #0]

  if (cfgidx > USBD_MAX_NUM_CONFIGURATION)
 800852c:	4b4d      	ldr	r3, [pc, #308]	; (8008664 <USBD_SetConfig+0x150>)
 800852e:	781b      	ldrb	r3, [r3, #0]
 8008530:	2b01      	cmp	r3, #1
 8008532:	d905      	bls.n	8008540 <USBD_SetConfig+0x2c>
  {
    USBD_CtlError(pdev, req);
 8008534:	6839      	ldr	r1, [r7, #0]
 8008536:	6878      	ldr	r0, [r7, #4]
 8008538:	f000 f985 	bl	8008846 <USBD_CtlError>
    return USBD_FAIL;
 800853c:	2303      	movs	r3, #3
 800853e:	e08c      	b.n	800865a <USBD_SetConfig+0x146>
  }

  switch (pdev->dev_state)
 8008540:	687b      	ldr	r3, [r7, #4]
 8008542:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8008546:	b2db      	uxtb	r3, r3
 8008548:	2b02      	cmp	r3, #2
 800854a:	d002      	beq.n	8008552 <USBD_SetConfig+0x3e>
 800854c:	2b03      	cmp	r3, #3
 800854e:	d029      	beq.n	80085a4 <USBD_SetConfig+0x90>
 8008550:	e075      	b.n	800863e <USBD_SetConfig+0x12a>
  {
    case USBD_STATE_ADDRESSED:
      if (cfgidx != 0U)
 8008552:	4b44      	ldr	r3, [pc, #272]	; (8008664 <USBD_SetConfig+0x150>)
 8008554:	781b      	ldrb	r3, [r3, #0]
 8008556:	2b00      	cmp	r3, #0
 8008558:	d020      	beq.n	800859c <USBD_SetConfig+0x88>
      {
        pdev->dev_config = cfgidx;
 800855a:	4b42      	ldr	r3, [pc, #264]	; (8008664 <USBD_SetConfig+0x150>)
 800855c:	781b      	ldrb	r3, [r3, #0]
 800855e:	461a      	mov	r2, r3
 8008560:	687b      	ldr	r3, [r7, #4]
 8008562:	605a      	str	r2, [r3, #4]

        ret = USBD_SetClassConfig(pdev, cfgidx);
 8008564:	4b3f      	ldr	r3, [pc, #252]	; (8008664 <USBD_SetConfig+0x150>)
 8008566:	781b      	ldrb	r3, [r3, #0]
 8008568:	4619      	mov	r1, r3
 800856a:	6878      	ldr	r0, [r7, #4]
 800856c:	f7fe ffe7 	bl	800753e <USBD_SetClassConfig>
 8008570:	4603      	mov	r3, r0
 8008572:	73fb      	strb	r3, [r7, #15]

        if (ret != USBD_OK)
 8008574:	7bfb      	ldrb	r3, [r7, #15]
 8008576:	2b00      	cmp	r3, #0
 8008578:	d008      	beq.n	800858c <USBD_SetConfig+0x78>
        {
          USBD_CtlError(pdev, req);
 800857a:	6839      	ldr	r1, [r7, #0]
 800857c:	6878      	ldr	r0, [r7, #4]
 800857e:	f000 f962 	bl	8008846 <USBD_CtlError>
          pdev->dev_state = USBD_STATE_ADDRESSED;
 8008582:	687b      	ldr	r3, [r7, #4]
 8008584:	2202      	movs	r2, #2
 8008586:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 800858a:	e065      	b.n	8008658 <USBD_SetConfig+0x144>
          (void)USBD_CtlSendStatus(pdev);
 800858c:	6878      	ldr	r0, [r7, #4]
 800858e:	f000 fa25 	bl	80089dc <USBD_CtlSendStatus>
          pdev->dev_state = USBD_STATE_CONFIGURED;
 8008592:	687b      	ldr	r3, [r7, #4]
 8008594:	2203      	movs	r2, #3
 8008596:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
      break;
 800859a:	e05d      	b.n	8008658 <USBD_SetConfig+0x144>
        (void)USBD_CtlSendStatus(pdev);
 800859c:	6878      	ldr	r0, [r7, #4]
 800859e:	f000 fa1d 	bl	80089dc <USBD_CtlSendStatus>
      break;
 80085a2:	e059      	b.n	8008658 <USBD_SetConfig+0x144>

    case USBD_STATE_CONFIGURED:
      if (cfgidx == 0U)
 80085a4:	4b2f      	ldr	r3, [pc, #188]	; (8008664 <USBD_SetConfig+0x150>)
 80085a6:	781b      	ldrb	r3, [r3, #0]
 80085a8:	2b00      	cmp	r3, #0
 80085aa:	d112      	bne.n	80085d2 <USBD_SetConfig+0xbe>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 80085ac:	687b      	ldr	r3, [r7, #4]
 80085ae:	2202      	movs	r2, #2
 80085b0:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
        pdev->dev_config = cfgidx;
 80085b4:	4b2b      	ldr	r3, [pc, #172]	; (8008664 <USBD_SetConfig+0x150>)
 80085b6:	781b      	ldrb	r3, [r3, #0]
 80085b8:	461a      	mov	r2, r3
 80085ba:	687b      	ldr	r3, [r7, #4]
 80085bc:	605a      	str	r2, [r3, #4]
        (void)USBD_ClrClassConfig(pdev, cfgidx);
 80085be:	4b29      	ldr	r3, [pc, #164]	; (8008664 <USBD_SetConfig+0x150>)
 80085c0:	781b      	ldrb	r3, [r3, #0]
 80085c2:	4619      	mov	r1, r3
 80085c4:	6878      	ldr	r0, [r7, #4]
 80085c6:	f7fe ffd6 	bl	8007576 <USBD_ClrClassConfig>
        (void)USBD_CtlSendStatus(pdev);
 80085ca:	6878      	ldr	r0, [r7, #4]
 80085cc:	f000 fa06 	bl	80089dc <USBD_CtlSendStatus>
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 80085d0:	e042      	b.n	8008658 <USBD_SetConfig+0x144>
      else if (cfgidx != pdev->dev_config)
 80085d2:	4b24      	ldr	r3, [pc, #144]	; (8008664 <USBD_SetConfig+0x150>)
 80085d4:	781b      	ldrb	r3, [r3, #0]
 80085d6:	461a      	mov	r2, r3
 80085d8:	687b      	ldr	r3, [r7, #4]
 80085da:	685b      	ldr	r3, [r3, #4]
 80085dc:	429a      	cmp	r2, r3
 80085de:	d02a      	beq.n	8008636 <USBD_SetConfig+0x122>
        (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 80085e0:	687b      	ldr	r3, [r7, #4]
 80085e2:	685b      	ldr	r3, [r3, #4]
 80085e4:	b2db      	uxtb	r3, r3
 80085e6:	4619      	mov	r1, r3
 80085e8:	6878      	ldr	r0, [r7, #4]
 80085ea:	f7fe ffc4 	bl	8007576 <USBD_ClrClassConfig>
        pdev->dev_config = cfgidx;
 80085ee:	4b1d      	ldr	r3, [pc, #116]	; (8008664 <USBD_SetConfig+0x150>)
 80085f0:	781b      	ldrb	r3, [r3, #0]
 80085f2:	461a      	mov	r2, r3
 80085f4:	687b      	ldr	r3, [r7, #4]
 80085f6:	605a      	str	r2, [r3, #4]
        ret = USBD_SetClassConfig(pdev, cfgidx);
 80085f8:	4b1a      	ldr	r3, [pc, #104]	; (8008664 <USBD_SetConfig+0x150>)
 80085fa:	781b      	ldrb	r3, [r3, #0]
 80085fc:	4619      	mov	r1, r3
 80085fe:	6878      	ldr	r0, [r7, #4]
 8008600:	f7fe ff9d 	bl	800753e <USBD_SetClassConfig>
 8008604:	4603      	mov	r3, r0
 8008606:	73fb      	strb	r3, [r7, #15]
        if (ret != USBD_OK)
 8008608:	7bfb      	ldrb	r3, [r7, #15]
 800860a:	2b00      	cmp	r3, #0
 800860c:	d00f      	beq.n	800862e <USBD_SetConfig+0x11a>
          USBD_CtlError(pdev, req);
 800860e:	6839      	ldr	r1, [r7, #0]
 8008610:	6878      	ldr	r0, [r7, #4]
 8008612:	f000 f918 	bl	8008846 <USBD_CtlError>
          (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 8008616:	687b      	ldr	r3, [r7, #4]
 8008618:	685b      	ldr	r3, [r3, #4]
 800861a:	b2db      	uxtb	r3, r3
 800861c:	4619      	mov	r1, r3
 800861e:	6878      	ldr	r0, [r7, #4]
 8008620:	f7fe ffa9 	bl	8007576 <USBD_ClrClassConfig>
          pdev->dev_state = USBD_STATE_ADDRESSED;
 8008624:	687b      	ldr	r3, [r7, #4]
 8008626:	2202      	movs	r2, #2
 8008628:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
      break;
 800862c:	e014      	b.n	8008658 <USBD_SetConfig+0x144>
          (void)USBD_CtlSendStatus(pdev);
 800862e:	6878      	ldr	r0, [r7, #4]
 8008630:	f000 f9d4 	bl	80089dc <USBD_CtlSendStatus>
      break;
 8008634:	e010      	b.n	8008658 <USBD_SetConfig+0x144>
        (void)USBD_CtlSendStatus(pdev);
 8008636:	6878      	ldr	r0, [r7, #4]
 8008638:	f000 f9d0 	bl	80089dc <USBD_CtlSendStatus>
      break;
 800863c:	e00c      	b.n	8008658 <USBD_SetConfig+0x144>

    default:
      USBD_CtlError(pdev, req);
 800863e:	6839      	ldr	r1, [r7, #0]
 8008640:	6878      	ldr	r0, [r7, #4]
 8008642:	f000 f900 	bl	8008846 <USBD_CtlError>
      (void)USBD_ClrClassConfig(pdev, cfgidx);
 8008646:	4b07      	ldr	r3, [pc, #28]	; (8008664 <USBD_SetConfig+0x150>)
 8008648:	781b      	ldrb	r3, [r3, #0]
 800864a:	4619      	mov	r1, r3
 800864c:	6878      	ldr	r0, [r7, #4]
 800864e:	f7fe ff92 	bl	8007576 <USBD_ClrClassConfig>
      ret = USBD_FAIL;
 8008652:	2303      	movs	r3, #3
 8008654:	73fb      	strb	r3, [r7, #15]
      break;
 8008656:	bf00      	nop
  }

  return ret;
 8008658:	7bfb      	ldrb	r3, [r7, #15]
}
 800865a:	4618      	mov	r0, r3
 800865c:	3710      	adds	r7, #16
 800865e:	46bd      	mov	sp, r7
 8008660:	bd80      	pop	{r7, pc}
 8008662:	bf00      	nop
 8008664:	24000210 	.word	0x24000210

08008668 <USBD_GetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8008668:	b580      	push	{r7, lr}
 800866a:	b082      	sub	sp, #8
 800866c:	af00      	add	r7, sp, #0
 800866e:	6078      	str	r0, [r7, #4]
 8008670:	6039      	str	r1, [r7, #0]
  if (req->wLength != 1U)
 8008672:	683b      	ldr	r3, [r7, #0]
 8008674:	88db      	ldrh	r3, [r3, #6]
 8008676:	2b01      	cmp	r3, #1
 8008678:	d004      	beq.n	8008684 <USBD_GetConfig+0x1c>
  {
    USBD_CtlError(pdev, req);
 800867a:	6839      	ldr	r1, [r7, #0]
 800867c:	6878      	ldr	r0, [r7, #4]
 800867e:	f000 f8e2 	bl	8008846 <USBD_CtlError>
      default:
        USBD_CtlError(pdev, req);
        break;
    }
  }
}
 8008682:	e023      	b.n	80086cc <USBD_GetConfig+0x64>
    switch (pdev->dev_state)
 8008684:	687b      	ldr	r3, [r7, #4]
 8008686:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800868a:	b2db      	uxtb	r3, r3
 800868c:	2b02      	cmp	r3, #2
 800868e:	dc02      	bgt.n	8008696 <USBD_GetConfig+0x2e>
 8008690:	2b00      	cmp	r3, #0
 8008692:	dc03      	bgt.n	800869c <USBD_GetConfig+0x34>
 8008694:	e015      	b.n	80086c2 <USBD_GetConfig+0x5a>
 8008696:	2b03      	cmp	r3, #3
 8008698:	d00b      	beq.n	80086b2 <USBD_GetConfig+0x4a>
 800869a:	e012      	b.n	80086c2 <USBD_GetConfig+0x5a>
        pdev->dev_default_config = 0U;
 800869c:	687b      	ldr	r3, [r7, #4]
 800869e:	2200      	movs	r2, #0
 80086a0:	609a      	str	r2, [r3, #8]
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_default_config, 1U);
 80086a2:	687b      	ldr	r3, [r7, #4]
 80086a4:	3308      	adds	r3, #8
 80086a6:	2201      	movs	r2, #1
 80086a8:	4619      	mov	r1, r3
 80086aa:	6878      	ldr	r0, [r7, #4]
 80086ac:	f000 f93c 	bl	8008928 <USBD_CtlSendData>
        break;
 80086b0:	e00c      	b.n	80086cc <USBD_GetConfig+0x64>
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config, 1U);
 80086b2:	687b      	ldr	r3, [r7, #4]
 80086b4:	3304      	adds	r3, #4
 80086b6:	2201      	movs	r2, #1
 80086b8:	4619      	mov	r1, r3
 80086ba:	6878      	ldr	r0, [r7, #4]
 80086bc:	f000 f934 	bl	8008928 <USBD_CtlSendData>
        break;
 80086c0:	e004      	b.n	80086cc <USBD_GetConfig+0x64>
        USBD_CtlError(pdev, req);
 80086c2:	6839      	ldr	r1, [r7, #0]
 80086c4:	6878      	ldr	r0, [r7, #4]
 80086c6:	f000 f8be 	bl	8008846 <USBD_CtlError>
        break;
 80086ca:	bf00      	nop
}
 80086cc:	bf00      	nop
 80086ce:	3708      	adds	r7, #8
 80086d0:	46bd      	mov	sp, r7
 80086d2:	bd80      	pop	{r7, pc}

080086d4 <USBD_GetStatus>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetStatus(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80086d4:	b580      	push	{r7, lr}
 80086d6:	b082      	sub	sp, #8
 80086d8:	af00      	add	r7, sp, #0
 80086da:	6078      	str	r0, [r7, #4]
 80086dc:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 80086de:	687b      	ldr	r3, [r7, #4]
 80086e0:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80086e4:	b2db      	uxtb	r3, r3
 80086e6:	3b01      	subs	r3, #1
 80086e8:	2b02      	cmp	r3, #2
 80086ea:	d81e      	bhi.n	800872a <USBD_GetStatus+0x56>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wLength != 0x2U)
 80086ec:	683b      	ldr	r3, [r7, #0]
 80086ee:	88db      	ldrh	r3, [r3, #6]
 80086f0:	2b02      	cmp	r3, #2
 80086f2:	d004      	beq.n	80086fe <USBD_GetStatus+0x2a>
      {
        USBD_CtlError(pdev, req);
 80086f4:	6839      	ldr	r1, [r7, #0]
 80086f6:	6878      	ldr	r0, [r7, #4]
 80086f8:	f000 f8a5 	bl	8008846 <USBD_CtlError>
        break;
 80086fc:	e01a      	b.n	8008734 <USBD_GetStatus+0x60>
      }

#if (USBD_SELF_POWERED == 1U)
      pdev->dev_config_status = USB_CONFIG_SELF_POWERED;
 80086fe:	687b      	ldr	r3, [r7, #4]
 8008700:	2201      	movs	r2, #1
 8008702:	60da      	str	r2, [r3, #12]
#else
      pdev->dev_config_status = 0U;
#endif /* USBD_SELF_POWERED */

      if (pdev->dev_remote_wakeup != 0U)
 8008704:	687b      	ldr	r3, [r7, #4]
 8008706:	f8d3 32a4 	ldr.w	r3, [r3, #676]	; 0x2a4
 800870a:	2b00      	cmp	r3, #0
 800870c:	d005      	beq.n	800871a <USBD_GetStatus+0x46>
      {
        pdev->dev_config_status |= USB_CONFIG_REMOTE_WAKEUP;
 800870e:	687b      	ldr	r3, [r7, #4]
 8008710:	68db      	ldr	r3, [r3, #12]
 8008712:	f043 0202 	orr.w	r2, r3, #2
 8008716:	687b      	ldr	r3, [r7, #4]
 8008718:	60da      	str	r2, [r3, #12]
      }

      (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config_status, 2U);
 800871a:	687b      	ldr	r3, [r7, #4]
 800871c:	330c      	adds	r3, #12
 800871e:	2202      	movs	r2, #2
 8008720:	4619      	mov	r1, r3
 8008722:	6878      	ldr	r0, [r7, #4]
 8008724:	f000 f900 	bl	8008928 <USBD_CtlSendData>
      break;
 8008728:	e004      	b.n	8008734 <USBD_GetStatus+0x60>

    default:
      USBD_CtlError(pdev, req);
 800872a:	6839      	ldr	r1, [r7, #0]
 800872c:	6878      	ldr	r0, [r7, #4]
 800872e:	f000 f88a 	bl	8008846 <USBD_CtlError>
      break;
 8008732:	bf00      	nop
  }
}
 8008734:	bf00      	nop
 8008736:	3708      	adds	r7, #8
 8008738:	46bd      	mov	sp, r7
 800873a:	bd80      	pop	{r7, pc}

0800873c <USBD_SetFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_SetFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800873c:	b580      	push	{r7, lr}
 800873e:	b082      	sub	sp, #8
 8008740:	af00      	add	r7, sp, #0
 8008742:	6078      	str	r0, [r7, #4]
 8008744:	6039      	str	r1, [r7, #0]
  if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 8008746:	683b      	ldr	r3, [r7, #0]
 8008748:	885b      	ldrh	r3, [r3, #2]
 800874a:	2b01      	cmp	r3, #1
 800874c:	d107      	bne.n	800875e <USBD_SetFeature+0x22>
  {
    pdev->dev_remote_wakeup = 1U;
 800874e:	687b      	ldr	r3, [r7, #4]
 8008750:	2201      	movs	r2, #1
 8008752:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
    (void)USBD_CtlSendStatus(pdev);
 8008756:	6878      	ldr	r0, [r7, #4]
 8008758:	f000 f940 	bl	80089dc <USBD_CtlSendStatus>
  }
  else
  {
    USBD_CtlError(pdev, req);
  }
}
 800875c:	e013      	b.n	8008786 <USBD_SetFeature+0x4a>
  else if (req->wValue == USB_FEATURE_TEST_MODE)
 800875e:	683b      	ldr	r3, [r7, #0]
 8008760:	885b      	ldrh	r3, [r3, #2]
 8008762:	2b02      	cmp	r3, #2
 8008764:	d10b      	bne.n	800877e <USBD_SetFeature+0x42>
    pdev->dev_test_mode = req->wIndex >> 8;
 8008766:	683b      	ldr	r3, [r7, #0]
 8008768:	889b      	ldrh	r3, [r3, #4]
 800876a:	0a1b      	lsrs	r3, r3, #8
 800876c:	b29b      	uxth	r3, r3
 800876e:	b2da      	uxtb	r2, r3
 8008770:	687b      	ldr	r3, [r7, #4]
 8008772:	f883 22a0 	strb.w	r2, [r3, #672]	; 0x2a0
    (void)USBD_CtlSendStatus(pdev);
 8008776:	6878      	ldr	r0, [r7, #4]
 8008778:	f000 f930 	bl	80089dc <USBD_CtlSendStatus>
}
 800877c:	e003      	b.n	8008786 <USBD_SetFeature+0x4a>
    USBD_CtlError(pdev, req);
 800877e:	6839      	ldr	r1, [r7, #0]
 8008780:	6878      	ldr	r0, [r7, #4]
 8008782:	f000 f860 	bl	8008846 <USBD_CtlError>
}
 8008786:	bf00      	nop
 8008788:	3708      	adds	r7, #8
 800878a:	46bd      	mov	sp, r7
 800878c:	bd80      	pop	{r7, pc}

0800878e <USBD_ClrFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_ClrFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800878e:	b580      	push	{r7, lr}
 8008790:	b082      	sub	sp, #8
 8008792:	af00      	add	r7, sp, #0
 8008794:	6078      	str	r0, [r7, #4]
 8008796:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 8008798:	687b      	ldr	r3, [r7, #4]
 800879a:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800879e:	b2db      	uxtb	r3, r3
 80087a0:	3b01      	subs	r3, #1
 80087a2:	2b02      	cmp	r3, #2
 80087a4:	d80b      	bhi.n	80087be <USBD_ClrFeature+0x30>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 80087a6:	683b      	ldr	r3, [r7, #0]
 80087a8:	885b      	ldrh	r3, [r3, #2]
 80087aa:	2b01      	cmp	r3, #1
 80087ac:	d10c      	bne.n	80087c8 <USBD_ClrFeature+0x3a>
      {
        pdev->dev_remote_wakeup = 0U;
 80087ae:	687b      	ldr	r3, [r7, #4]
 80087b0:	2200      	movs	r2, #0
 80087b2:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
        (void)USBD_CtlSendStatus(pdev);
 80087b6:	6878      	ldr	r0, [r7, #4]
 80087b8:	f000 f910 	bl	80089dc <USBD_CtlSendStatus>
      }
      break;
 80087bc:	e004      	b.n	80087c8 <USBD_ClrFeature+0x3a>

    default:
      USBD_CtlError(pdev, req);
 80087be:	6839      	ldr	r1, [r7, #0]
 80087c0:	6878      	ldr	r0, [r7, #4]
 80087c2:	f000 f840 	bl	8008846 <USBD_CtlError>
      break;
 80087c6:	e000      	b.n	80087ca <USBD_ClrFeature+0x3c>
      break;
 80087c8:	bf00      	nop
  }
}
 80087ca:	bf00      	nop
 80087cc:	3708      	adds	r7, #8
 80087ce:	46bd      	mov	sp, r7
 80087d0:	bd80      	pop	{r7, pc}

080087d2 <USBD_ParseSetupRequest>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
void USBD_ParseSetupRequest(USBD_SetupReqTypedef *req, uint8_t *pdata)
{
 80087d2:	b580      	push	{r7, lr}
 80087d4:	b084      	sub	sp, #16
 80087d6:	af00      	add	r7, sp, #0
 80087d8:	6078      	str	r0, [r7, #4]
 80087da:	6039      	str	r1, [r7, #0]
  uint8_t *pbuff = pdata;
 80087dc:	683b      	ldr	r3, [r7, #0]
 80087de:	60fb      	str	r3, [r7, #12]

  req->bmRequest = *(uint8_t *)(pbuff);
 80087e0:	68fb      	ldr	r3, [r7, #12]
 80087e2:	781a      	ldrb	r2, [r3, #0]
 80087e4:	687b      	ldr	r3, [r7, #4]
 80087e6:	701a      	strb	r2, [r3, #0]

  pbuff++;
 80087e8:	68fb      	ldr	r3, [r7, #12]
 80087ea:	3301      	adds	r3, #1
 80087ec:	60fb      	str	r3, [r7, #12]
  req->bRequest = *(uint8_t *)(pbuff);
 80087ee:	68fb      	ldr	r3, [r7, #12]
 80087f0:	781a      	ldrb	r2, [r3, #0]
 80087f2:	687b      	ldr	r3, [r7, #4]
 80087f4:	705a      	strb	r2, [r3, #1]

  pbuff++;
 80087f6:	68fb      	ldr	r3, [r7, #12]
 80087f8:	3301      	adds	r3, #1
 80087fa:	60fb      	str	r3, [r7, #12]
  req->wValue = SWAPBYTE(pbuff);
 80087fc:	68f8      	ldr	r0, [r7, #12]
 80087fe:	f7ff fa41 	bl	8007c84 <SWAPBYTE>
 8008802:	4603      	mov	r3, r0
 8008804:	461a      	mov	r2, r3
 8008806:	687b      	ldr	r3, [r7, #4]
 8008808:	805a      	strh	r2, [r3, #2]

  pbuff++;
 800880a:	68fb      	ldr	r3, [r7, #12]
 800880c:	3301      	adds	r3, #1
 800880e:	60fb      	str	r3, [r7, #12]
  pbuff++;
 8008810:	68fb      	ldr	r3, [r7, #12]
 8008812:	3301      	adds	r3, #1
 8008814:	60fb      	str	r3, [r7, #12]
  req->wIndex = SWAPBYTE(pbuff);
 8008816:	68f8      	ldr	r0, [r7, #12]
 8008818:	f7ff fa34 	bl	8007c84 <SWAPBYTE>
 800881c:	4603      	mov	r3, r0
 800881e:	461a      	mov	r2, r3
 8008820:	687b      	ldr	r3, [r7, #4]
 8008822:	809a      	strh	r2, [r3, #4]

  pbuff++;
 8008824:	68fb      	ldr	r3, [r7, #12]
 8008826:	3301      	adds	r3, #1
 8008828:	60fb      	str	r3, [r7, #12]
  pbuff++;
 800882a:	68fb      	ldr	r3, [r7, #12]
 800882c:	3301      	adds	r3, #1
 800882e:	60fb      	str	r3, [r7, #12]
  req->wLength = SWAPBYTE(pbuff);
 8008830:	68f8      	ldr	r0, [r7, #12]
 8008832:	f7ff fa27 	bl	8007c84 <SWAPBYTE>
 8008836:	4603      	mov	r3, r0
 8008838:	461a      	mov	r2, r3
 800883a:	687b      	ldr	r3, [r7, #4]
 800883c:	80da      	strh	r2, [r3, #6]
}
 800883e:	bf00      	nop
 8008840:	3710      	adds	r7, #16
 8008842:	46bd      	mov	sp, r7
 8008844:	bd80      	pop	{r7, pc}

08008846 <USBD_CtlError>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
void USBD_CtlError(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8008846:	b580      	push	{r7, lr}
 8008848:	b082      	sub	sp, #8
 800884a:	af00      	add	r7, sp, #0
 800884c:	6078      	str	r0, [r7, #4]
 800884e:	6039      	str	r1, [r7, #0]
  UNUSED(req);

  (void)USBD_LL_StallEP(pdev, 0x80U);
 8008850:	2180      	movs	r1, #128	; 0x80
 8008852:	6878      	ldr	r0, [r7, #4]
 8008854:	f000 fd62 	bl	800931c <USBD_LL_StallEP>
  (void)USBD_LL_StallEP(pdev, 0U);
 8008858:	2100      	movs	r1, #0
 800885a:	6878      	ldr	r0, [r7, #4]
 800885c:	f000 fd5e 	bl	800931c <USBD_LL_StallEP>
}
 8008860:	bf00      	nop
 8008862:	3708      	adds	r7, #8
 8008864:	46bd      	mov	sp, r7
 8008866:	bd80      	pop	{r7, pc}

08008868 <USBD_GetString>:
  * @param  unicode : Formatted string buffer (unicode)
  * @param  len : descriptor length
  * @retval None
  */
void USBD_GetString(uint8_t *desc, uint8_t *unicode, uint16_t *len)
{
 8008868:	b580      	push	{r7, lr}
 800886a:	b086      	sub	sp, #24
 800886c:	af00      	add	r7, sp, #0
 800886e:	60f8      	str	r0, [r7, #12]
 8008870:	60b9      	str	r1, [r7, #8]
 8008872:	607a      	str	r2, [r7, #4]
  uint8_t idx = 0U;
 8008874:	2300      	movs	r3, #0
 8008876:	75fb      	strb	r3, [r7, #23]
  uint8_t *pdesc;

  if (desc == NULL)
 8008878:	68fb      	ldr	r3, [r7, #12]
 800887a:	2b00      	cmp	r3, #0
 800887c:	d036      	beq.n	80088ec <USBD_GetString+0x84>
  {
    return;
  }

  pdesc = desc;
 800887e:	68fb      	ldr	r3, [r7, #12]
 8008880:	613b      	str	r3, [r7, #16]
  *len = ((uint16_t)USBD_GetLen(pdesc) * 2U) + 2U;
 8008882:	6938      	ldr	r0, [r7, #16]
 8008884:	f000 f836 	bl	80088f4 <USBD_GetLen>
 8008888:	4603      	mov	r3, r0
 800888a:	3301      	adds	r3, #1
 800888c:	b29b      	uxth	r3, r3
 800888e:	005b      	lsls	r3, r3, #1
 8008890:	b29a      	uxth	r2, r3
 8008892:	687b      	ldr	r3, [r7, #4]
 8008894:	801a      	strh	r2, [r3, #0]

  unicode[idx] = *(uint8_t *)len;
 8008896:	7dfb      	ldrb	r3, [r7, #23]
 8008898:	68ba      	ldr	r2, [r7, #8]
 800889a:	4413      	add	r3, r2
 800889c:	687a      	ldr	r2, [r7, #4]
 800889e:	7812      	ldrb	r2, [r2, #0]
 80088a0:	701a      	strb	r2, [r3, #0]
  idx++;
 80088a2:	7dfb      	ldrb	r3, [r7, #23]
 80088a4:	3301      	adds	r3, #1
 80088a6:	75fb      	strb	r3, [r7, #23]
  unicode[idx] = USB_DESC_TYPE_STRING;
 80088a8:	7dfb      	ldrb	r3, [r7, #23]
 80088aa:	68ba      	ldr	r2, [r7, #8]
 80088ac:	4413      	add	r3, r2
 80088ae:	2203      	movs	r2, #3
 80088b0:	701a      	strb	r2, [r3, #0]
  idx++;
 80088b2:	7dfb      	ldrb	r3, [r7, #23]
 80088b4:	3301      	adds	r3, #1
 80088b6:	75fb      	strb	r3, [r7, #23]

  while (*pdesc != (uint8_t)'\0')
 80088b8:	e013      	b.n	80088e2 <USBD_GetString+0x7a>
  {
    unicode[idx] = *pdesc;
 80088ba:	7dfb      	ldrb	r3, [r7, #23]
 80088bc:	68ba      	ldr	r2, [r7, #8]
 80088be:	4413      	add	r3, r2
 80088c0:	693a      	ldr	r2, [r7, #16]
 80088c2:	7812      	ldrb	r2, [r2, #0]
 80088c4:	701a      	strb	r2, [r3, #0]
    pdesc++;
 80088c6:	693b      	ldr	r3, [r7, #16]
 80088c8:	3301      	adds	r3, #1
 80088ca:	613b      	str	r3, [r7, #16]
    idx++;
 80088cc:	7dfb      	ldrb	r3, [r7, #23]
 80088ce:	3301      	adds	r3, #1
 80088d0:	75fb      	strb	r3, [r7, #23]

    unicode[idx] = 0U;
 80088d2:	7dfb      	ldrb	r3, [r7, #23]
 80088d4:	68ba      	ldr	r2, [r7, #8]
 80088d6:	4413      	add	r3, r2
 80088d8:	2200      	movs	r2, #0
 80088da:	701a      	strb	r2, [r3, #0]
    idx++;
 80088dc:	7dfb      	ldrb	r3, [r7, #23]
 80088de:	3301      	adds	r3, #1
 80088e0:	75fb      	strb	r3, [r7, #23]
  while (*pdesc != (uint8_t)'\0')
 80088e2:	693b      	ldr	r3, [r7, #16]
 80088e4:	781b      	ldrb	r3, [r3, #0]
 80088e6:	2b00      	cmp	r3, #0
 80088e8:	d1e7      	bne.n	80088ba <USBD_GetString+0x52>
 80088ea:	e000      	b.n	80088ee <USBD_GetString+0x86>
    return;
 80088ec:	bf00      	nop
  }
}
 80088ee:	3718      	adds	r7, #24
 80088f0:	46bd      	mov	sp, r7
 80088f2:	bd80      	pop	{r7, pc}

080088f4 <USBD_GetLen>:
  *         return the string length
   * @param  buf : pointer to the ascii string buffer
  * @retval string length
  */
static uint8_t USBD_GetLen(uint8_t *buf)
{
 80088f4:	b480      	push	{r7}
 80088f6:	b085      	sub	sp, #20
 80088f8:	af00      	add	r7, sp, #0
 80088fa:	6078      	str	r0, [r7, #4]
  uint8_t  len = 0U;
 80088fc:	2300      	movs	r3, #0
 80088fe:	73fb      	strb	r3, [r7, #15]
  uint8_t *pbuff = buf;
 8008900:	687b      	ldr	r3, [r7, #4]
 8008902:	60bb      	str	r3, [r7, #8]

  while (*pbuff != (uint8_t)'\0')
 8008904:	e005      	b.n	8008912 <USBD_GetLen+0x1e>
  {
    len++;
 8008906:	7bfb      	ldrb	r3, [r7, #15]
 8008908:	3301      	adds	r3, #1
 800890a:	73fb      	strb	r3, [r7, #15]
    pbuff++;
 800890c:	68bb      	ldr	r3, [r7, #8]
 800890e:	3301      	adds	r3, #1
 8008910:	60bb      	str	r3, [r7, #8]
  while (*pbuff != (uint8_t)'\0')
 8008912:	68bb      	ldr	r3, [r7, #8]
 8008914:	781b      	ldrb	r3, [r3, #0]
 8008916:	2b00      	cmp	r3, #0
 8008918:	d1f5      	bne.n	8008906 <USBD_GetLen+0x12>
  }

  return len;
 800891a:	7bfb      	ldrb	r3, [r7, #15]
}
 800891c:	4618      	mov	r0, r3
 800891e:	3714      	adds	r7, #20
 8008920:	46bd      	mov	sp, r7
 8008922:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008926:	4770      	bx	lr

08008928 <USBD_CtlSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendData(USBD_HandleTypeDef *pdev,
                                    uint8_t *pbuf, uint32_t len)
{
 8008928:	b580      	push	{r7, lr}
 800892a:	b084      	sub	sp, #16
 800892c:	af00      	add	r7, sp, #0
 800892e:	60f8      	str	r0, [r7, #12]
 8008930:	60b9      	str	r1, [r7, #8]
 8008932:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_IN;
 8008934:	68fb      	ldr	r3, [r7, #12]
 8008936:	2202      	movs	r2, #2
 8008938:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_in[0].total_length = len;
 800893c:	68fb      	ldr	r3, [r7, #12]
 800893e:	687a      	ldr	r2, [r7, #4]
 8008940:	619a      	str	r2, [r3, #24]

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_in[0].rem_length = 0U;
#else
  pdev->ep_in[0].rem_length = len;
 8008942:	68fb      	ldr	r3, [r7, #12]
 8008944:	687a      	ldr	r2, [r7, #4]
 8008946:	61da      	str	r2, [r3, #28]
#endif /* USBD_AVOID_PACKET_SPLIT_MPS */

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 8008948:	687b      	ldr	r3, [r7, #4]
 800894a:	68ba      	ldr	r2, [r7, #8]
 800894c:	2100      	movs	r1, #0
 800894e:	68f8      	ldr	r0, [r7, #12]
 8008950:	f000 fd6d 	bl	800942e <USBD_LL_Transmit>

  return USBD_OK;
 8008954:	2300      	movs	r3, #0
}
 8008956:	4618      	mov	r0, r3
 8008958:	3710      	adds	r7, #16
 800895a:	46bd      	mov	sp, r7
 800895c:	bd80      	pop	{r7, pc}

0800895e <USBD_CtlContinueSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueSendData(USBD_HandleTypeDef *pdev,
                                            uint8_t *pbuf, uint32_t len)
{
 800895e:	b580      	push	{r7, lr}
 8008960:	b084      	sub	sp, #16
 8008962:	af00      	add	r7, sp, #0
 8008964:	60f8      	str	r0, [r7, #12]
 8008966:	60b9      	str	r1, [r7, #8]
 8008968:	607a      	str	r2, [r7, #4]
  /* Start the next transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 800896a:	687b      	ldr	r3, [r7, #4]
 800896c:	68ba      	ldr	r2, [r7, #8]
 800896e:	2100      	movs	r1, #0
 8008970:	68f8      	ldr	r0, [r7, #12]
 8008972:	f000 fd5c 	bl	800942e <USBD_LL_Transmit>

  return USBD_OK;
 8008976:	2300      	movs	r3, #0
}
 8008978:	4618      	mov	r0, r3
 800897a:	3710      	adds	r7, #16
 800897c:	46bd      	mov	sp, r7
 800897e:	bd80      	pop	{r7, pc}

08008980 <USBD_CtlPrepareRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlPrepareRx(USBD_HandleTypeDef *pdev,
                                     uint8_t *pbuf, uint32_t len)
{
 8008980:	b580      	push	{r7, lr}
 8008982:	b084      	sub	sp, #16
 8008984:	af00      	add	r7, sp, #0
 8008986:	60f8      	str	r0, [r7, #12]
 8008988:	60b9      	str	r1, [r7, #8]
 800898a:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_OUT;
 800898c:	68fb      	ldr	r3, [r7, #12]
 800898e:	2203      	movs	r2, #3
 8008990:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_out[0].total_length = len;
 8008994:	68fb      	ldr	r3, [r7, #12]
 8008996:	687a      	ldr	r2, [r7, #4]
 8008998:	f8c3 2158 	str.w	r2, [r3, #344]	; 0x158

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_out[0].rem_length = 0U;
#else
  pdev->ep_out[0].rem_length = len;
 800899c:	68fb      	ldr	r3, [r7, #12]
 800899e:	687a      	ldr	r2, [r7, #4]
 80089a0:	f8c3 215c 	str.w	r2, [r3, #348]	; 0x15c
#endif /* USBD_AVOID_PACKET_SPLIT_MPS */

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 80089a4:	687b      	ldr	r3, [r7, #4]
 80089a6:	68ba      	ldr	r2, [r7, #8]
 80089a8:	2100      	movs	r1, #0
 80089aa:	68f8      	ldr	r0, [r7, #12]
 80089ac:	f000 fd60 	bl	8009470 <USBD_LL_PrepareReceive>

  return USBD_OK;
 80089b0:	2300      	movs	r3, #0
}
 80089b2:	4618      	mov	r0, r3
 80089b4:	3710      	adds	r7, #16
 80089b6:	46bd      	mov	sp, r7
 80089b8:	bd80      	pop	{r7, pc}

080089ba <USBD_CtlContinueRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueRx(USBD_HandleTypeDef *pdev,
                                      uint8_t *pbuf, uint32_t len)
{
 80089ba:	b580      	push	{r7, lr}
 80089bc:	b084      	sub	sp, #16
 80089be:	af00      	add	r7, sp, #0
 80089c0:	60f8      	str	r0, [r7, #12]
 80089c2:	60b9      	str	r1, [r7, #8]
 80089c4:	607a      	str	r2, [r7, #4]
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 80089c6:	687b      	ldr	r3, [r7, #4]
 80089c8:	68ba      	ldr	r2, [r7, #8]
 80089ca:	2100      	movs	r1, #0
 80089cc:	68f8      	ldr	r0, [r7, #12]
 80089ce:	f000 fd4f 	bl	8009470 <USBD_LL_PrepareReceive>

  return USBD_OK;
 80089d2:	2300      	movs	r3, #0
}
 80089d4:	4618      	mov	r0, r3
 80089d6:	3710      	adds	r7, #16
 80089d8:	46bd      	mov	sp, r7
 80089da:	bd80      	pop	{r7, pc}

080089dc <USBD_CtlSendStatus>:
  *         send zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendStatus(USBD_HandleTypeDef *pdev)
{
 80089dc:	b580      	push	{r7, lr}
 80089de:	b082      	sub	sp, #8
 80089e0:	af00      	add	r7, sp, #0
 80089e2:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_IN;
 80089e4:	687b      	ldr	r3, [r7, #4]
 80089e6:	2204      	movs	r2, #4
 80089e8:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, NULL, 0U);
 80089ec:	2300      	movs	r3, #0
 80089ee:	2200      	movs	r2, #0
 80089f0:	2100      	movs	r1, #0
 80089f2:	6878      	ldr	r0, [r7, #4]
 80089f4:	f000 fd1b 	bl	800942e <USBD_LL_Transmit>

  return USBD_OK;
 80089f8:	2300      	movs	r3, #0
}
 80089fa:	4618      	mov	r0, r3
 80089fc:	3708      	adds	r7, #8
 80089fe:	46bd      	mov	sp, r7
 8008a00:	bd80      	pop	{r7, pc}

08008a02 <USBD_CtlReceiveStatus>:
  *         receive zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlReceiveStatus(USBD_HandleTypeDef *pdev)
{
 8008a02:	b580      	push	{r7, lr}
 8008a04:	b082      	sub	sp, #8
 8008a06:	af00      	add	r7, sp, #0
 8008a08:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_OUT;
 8008a0a:	687b      	ldr	r3, [r7, #4]
 8008a0c:	2205      	movs	r2, #5
 8008a0e:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8008a12:	2300      	movs	r3, #0
 8008a14:	2200      	movs	r2, #0
 8008a16:	2100      	movs	r1, #0
 8008a18:	6878      	ldr	r0, [r7, #4]
 8008a1a:	f000 fd29 	bl	8009470 <USBD_LL_PrepareReceive>

  return USBD_OK;
 8008a1e:	2300      	movs	r3, #0
}
 8008a20:	4618      	mov	r0, r3
 8008a22:	3708      	adds	r7, #8
 8008a24:	46bd      	mov	sp, r7
 8008a26:	bd80      	pop	{r7, pc}

08008a28 <MX_USB_DEVICE_Init>:
/**
  * Init USB device Library, add supported class and start the library
  * @retval None
  */
void MX_USB_DEVICE_Init(void)
{
 8008a28:	b580      	push	{r7, lr}
 8008a2a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_DEVICE_Init_PreTreatment */

  /* USER CODE END USB_DEVICE_Init_PreTreatment */

  /* Init Device Library, add supported class and start the library. */
  if (USBD_Init(&hUsbDeviceHS, &HS_Desc, DEVICE_HS) != USBD_OK)
 8008a2c:	2201      	movs	r2, #1
 8008a2e:	4913      	ldr	r1, [pc, #76]	; (8008a7c <MX_USB_DEVICE_Init+0x54>)
 8008a30:	4813      	ldr	r0, [pc, #76]	; (8008a80 <MX_USB_DEVICE_Init+0x58>)
 8008a32:	f7fe fd07 	bl	8007444 <USBD_Init>
 8008a36:	4603      	mov	r3, r0
 8008a38:	2b00      	cmp	r3, #0
 8008a3a:	d001      	beq.n	8008a40 <MX_USB_DEVICE_Init+0x18>
  {
    Error_Handler();
 8008a3c:	f7f7 fec6 	bl	80007cc <Error_Handler>
  }
  if (USBD_RegisterClass(&hUsbDeviceHS, &USBD_CDC) != USBD_OK)
 8008a40:	4910      	ldr	r1, [pc, #64]	; (8008a84 <MX_USB_DEVICE_Init+0x5c>)
 8008a42:	480f      	ldr	r0, [pc, #60]	; (8008a80 <MX_USB_DEVICE_Init+0x58>)
 8008a44:	f7fe fd2e 	bl	80074a4 <USBD_RegisterClass>
 8008a48:	4603      	mov	r3, r0
 8008a4a:	2b00      	cmp	r3, #0
 8008a4c:	d001      	beq.n	8008a52 <MX_USB_DEVICE_Init+0x2a>
  {
    Error_Handler();
 8008a4e:	f7f7 febd 	bl	80007cc <Error_Handler>
  }
  if (USBD_CDC_RegisterInterface(&hUsbDeviceHS, &USBD_Interface_fops_HS) != USBD_OK)
 8008a52:	490d      	ldr	r1, [pc, #52]	; (8008a88 <MX_USB_DEVICE_Init+0x60>)
 8008a54:	480a      	ldr	r0, [pc, #40]	; (8008a80 <MX_USB_DEVICE_Init+0x58>)
 8008a56:	f7fe fc1f 	bl	8007298 <USBD_CDC_RegisterInterface>
 8008a5a:	4603      	mov	r3, r0
 8008a5c:	2b00      	cmp	r3, #0
 8008a5e:	d001      	beq.n	8008a64 <MX_USB_DEVICE_Init+0x3c>
  {
    Error_Handler();
 8008a60:	f7f7 feb4 	bl	80007cc <Error_Handler>
  }
  if (USBD_Start(&hUsbDeviceHS) != USBD_OK)
 8008a64:	4806      	ldr	r0, [pc, #24]	; (8008a80 <MX_USB_DEVICE_Init+0x58>)
 8008a66:	f7fe fd53 	bl	8007510 <USBD_Start>
 8008a6a:	4603      	mov	r3, r0
 8008a6c:	2b00      	cmp	r3, #0
 8008a6e:	d001      	beq.n	8008a74 <MX_USB_DEVICE_Init+0x4c>
  {
    Error_Handler();
 8008a70:	f7f7 feac 	bl	80007cc <Error_Handler>
  }

  /* USER CODE BEGIN USB_DEVICE_Init_PostTreatment */
  HAL_PWREx_EnableUSBVoltageDetector();
 8008a74:	f7f9 ff4e 	bl	8002914 <HAL_PWREx_EnableUSBVoltageDetector>

  /* USER CODE END USB_DEVICE_Init_PostTreatment */
}
 8008a78:	bf00      	nop
 8008a7a:	bd80      	pop	{r7, pc}
 8008a7c:	240000b0 	.word	0x240000b0
 8008a80:	24000214 	.word	0x24000214
 8008a84:	2400001c 	.word	0x2400001c
 8008a88:	2400009c 	.word	0x2400009c

08008a8c <CDC_Init_HS>:
/**
  * @brief  Initializes the CDC media low layer over the USB HS IP
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Init_HS(void)
{
 8008a8c:	b580      	push	{r7, lr}
 8008a8e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 8 */
  /* Set Application Buffers */
  USBD_CDC_SetTxBuffer(&hUsbDeviceHS, UserTxBufferHS, 0);
 8008a90:	2200      	movs	r2, #0
 8008a92:	4905      	ldr	r1, [pc, #20]	; (8008aa8 <CDC_Init_HS+0x1c>)
 8008a94:	4805      	ldr	r0, [pc, #20]	; (8008aac <CDC_Init_HS+0x20>)
 8008a96:	f7fe fc19 	bl	80072cc <USBD_CDC_SetTxBuffer>
  USBD_CDC_SetRxBuffer(&hUsbDeviceHS, UserRxBufferHS);
 8008a9a:	4905      	ldr	r1, [pc, #20]	; (8008ab0 <CDC_Init_HS+0x24>)
 8008a9c:	4803      	ldr	r0, [pc, #12]	; (8008aac <CDC_Init_HS+0x20>)
 8008a9e:	f7fe fc37 	bl	8007310 <USBD_CDC_SetRxBuffer>
  return (USBD_OK);
 8008aa2:	2300      	movs	r3, #0
  /* USER CODE END 8 */
}
 8008aa4:	4618      	mov	r0, r3
 8008aa6:	bd80      	pop	{r7, pc}
 8008aa8:	24000cf0 	.word	0x24000cf0
 8008aac:	24000214 	.word	0x24000214
 8008ab0:	240004f0 	.word	0x240004f0

08008ab4 <CDC_DeInit_HS>:
  * @brief  DeInitializes the CDC media low layer
  * @param  None
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_DeInit_HS(void)
{
 8008ab4:	b480      	push	{r7}
 8008ab6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 9 */
  return (USBD_OK);
 8008ab8:	2300      	movs	r3, #0
  /* USER CODE END 9 */
}
 8008aba:	4618      	mov	r0, r3
 8008abc:	46bd      	mov	sp, r7
 8008abe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008ac2:	4770      	bx	lr

08008ac4 <CDC_Control_HS>:
  * @param  pbuf: Buffer containing command data (request parameters)
  * @param  length: Number of data to be sent (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Control_HS(uint8_t cmd, uint8_t* pbuf, uint16_t length)
{
 8008ac4:	b480      	push	{r7}
 8008ac6:	b083      	sub	sp, #12
 8008ac8:	af00      	add	r7, sp, #0
 8008aca:	4603      	mov	r3, r0
 8008acc:	6039      	str	r1, [r7, #0]
 8008ace:	71fb      	strb	r3, [r7, #7]
 8008ad0:	4613      	mov	r3, r2
 8008ad2:	80bb      	strh	r3, [r7, #4]
  /* USER CODE BEGIN 10 */
  switch(cmd)
 8008ad4:	79fb      	ldrb	r3, [r7, #7]
 8008ad6:	2b23      	cmp	r3, #35	; 0x23
 8008ad8:	d84a      	bhi.n	8008b70 <CDC_Control_HS+0xac>
 8008ada:	a201      	add	r2, pc, #4	; (adr r2, 8008ae0 <CDC_Control_HS+0x1c>)
 8008adc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008ae0:	08008b71 	.word	0x08008b71
 8008ae4:	08008b71 	.word	0x08008b71
 8008ae8:	08008b71 	.word	0x08008b71
 8008aec:	08008b71 	.word	0x08008b71
 8008af0:	08008b71 	.word	0x08008b71
 8008af4:	08008b71 	.word	0x08008b71
 8008af8:	08008b71 	.word	0x08008b71
 8008afc:	08008b71 	.word	0x08008b71
 8008b00:	08008b71 	.word	0x08008b71
 8008b04:	08008b71 	.word	0x08008b71
 8008b08:	08008b71 	.word	0x08008b71
 8008b0c:	08008b71 	.word	0x08008b71
 8008b10:	08008b71 	.word	0x08008b71
 8008b14:	08008b71 	.word	0x08008b71
 8008b18:	08008b71 	.word	0x08008b71
 8008b1c:	08008b71 	.word	0x08008b71
 8008b20:	08008b71 	.word	0x08008b71
 8008b24:	08008b71 	.word	0x08008b71
 8008b28:	08008b71 	.word	0x08008b71
 8008b2c:	08008b71 	.word	0x08008b71
 8008b30:	08008b71 	.word	0x08008b71
 8008b34:	08008b71 	.word	0x08008b71
 8008b38:	08008b71 	.word	0x08008b71
 8008b3c:	08008b71 	.word	0x08008b71
 8008b40:	08008b71 	.word	0x08008b71
 8008b44:	08008b71 	.word	0x08008b71
 8008b48:	08008b71 	.word	0x08008b71
 8008b4c:	08008b71 	.word	0x08008b71
 8008b50:	08008b71 	.word	0x08008b71
 8008b54:	08008b71 	.word	0x08008b71
 8008b58:	08008b71 	.word	0x08008b71
 8008b5c:	08008b71 	.word	0x08008b71
 8008b60:	08008b71 	.word	0x08008b71
 8008b64:	08008b71 	.word	0x08008b71
 8008b68:	08008b71 	.word	0x08008b71
 8008b6c:	08008b71 	.word	0x08008b71
  case CDC_SEND_BREAK:

    break;

  default:
    break;
 8008b70:	bf00      	nop
  }

  return (USBD_OK);
 8008b72:	2300      	movs	r3, #0
  /* USER CODE END 10 */
}
 8008b74:	4618      	mov	r0, r3
 8008b76:	370c      	adds	r7, #12
 8008b78:	46bd      	mov	sp, r7
 8008b7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008b7e:	4770      	bx	lr

08008b80 <CDC_Receive_HS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAILL
  */
static int8_t CDC_Receive_HS(uint8_t* Buf, uint32_t *Len)
{
 8008b80:	b580      	push	{r7, lr}
 8008b82:	b082      	sub	sp, #8
 8008b84:	af00      	add	r7, sp, #0
 8008b86:	6078      	str	r0, [r7, #4]
 8008b88:	6039      	str	r1, [r7, #0]
  /* USER CODE BEGIN 11 */
  USBD_CDC_SetRxBuffer(&hUsbDeviceHS, &Buf[0]);
 8008b8a:	6879      	ldr	r1, [r7, #4]
 8008b8c:	4805      	ldr	r0, [pc, #20]	; (8008ba4 <CDC_Receive_HS+0x24>)
 8008b8e:	f7fe fbbf 	bl	8007310 <USBD_CDC_SetRxBuffer>
  USBD_CDC_ReceivePacket(&hUsbDeviceHS);
 8008b92:	4804      	ldr	r0, [pc, #16]	; (8008ba4 <CDC_Receive_HS+0x24>)
 8008b94:	f7fe fc20 	bl	80073d8 <USBD_CDC_ReceivePacket>
  return (USBD_OK);
 8008b98:	2300      	movs	r3, #0
  /* USER CODE END 11 */
}
 8008b9a:	4618      	mov	r0, r3
 8008b9c:	3708      	adds	r7, #8
 8008b9e:	46bd      	mov	sp, r7
 8008ba0:	bd80      	pop	{r7, pc}
 8008ba2:	bf00      	nop
 8008ba4:	24000214 	.word	0x24000214

08008ba8 <CDC_Transmit_HS>:
  * @param  Buf: Buffer of data to be sent
  * @param  Len: Number of data to be sent (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL or USBD_BUSY
  */
uint8_t CDC_Transmit_HS(uint8_t* Buf, uint16_t Len)
{
 8008ba8:	b580      	push	{r7, lr}
 8008baa:	b084      	sub	sp, #16
 8008bac:	af00      	add	r7, sp, #0
 8008bae:	6078      	str	r0, [r7, #4]
 8008bb0:	460b      	mov	r3, r1
 8008bb2:	807b      	strh	r3, [r7, #2]
  uint8_t result = USBD_OK;
 8008bb4:	2300      	movs	r3, #0
 8008bb6:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN 12 */
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef*)hUsbDeviceHS.pClassData;
 8008bb8:	4b0d      	ldr	r3, [pc, #52]	; (8008bf0 <CDC_Transmit_HS+0x48>)
 8008bba:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8008bbe:	60bb      	str	r3, [r7, #8]
  if (hcdc->TxState != 0){
 8008bc0:	68bb      	ldr	r3, [r7, #8]
 8008bc2:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 8008bc6:	2b00      	cmp	r3, #0
 8008bc8:	d001      	beq.n	8008bce <CDC_Transmit_HS+0x26>
    return USBD_BUSY;
 8008bca:	2301      	movs	r3, #1
 8008bcc:	e00b      	b.n	8008be6 <CDC_Transmit_HS+0x3e>
  }
  USBD_CDC_SetTxBuffer(&hUsbDeviceHS, Buf, Len);
 8008bce:	887b      	ldrh	r3, [r7, #2]
 8008bd0:	461a      	mov	r2, r3
 8008bd2:	6879      	ldr	r1, [r7, #4]
 8008bd4:	4806      	ldr	r0, [pc, #24]	; (8008bf0 <CDC_Transmit_HS+0x48>)
 8008bd6:	f7fe fb79 	bl	80072cc <USBD_CDC_SetTxBuffer>
  result = USBD_CDC_TransmitPacket(&hUsbDeviceHS);
 8008bda:	4805      	ldr	r0, [pc, #20]	; (8008bf0 <CDC_Transmit_HS+0x48>)
 8008bdc:	f7fe fbb6 	bl	800734c <USBD_CDC_TransmitPacket>
 8008be0:	4603      	mov	r3, r0
 8008be2:	73fb      	strb	r3, [r7, #15]
  /* USER CODE END 12 */
  return result;
 8008be4:	7bfb      	ldrb	r3, [r7, #15]
}
 8008be6:	4618      	mov	r0, r3
 8008be8:	3710      	adds	r7, #16
 8008bea:	46bd      	mov	sp, r7
 8008bec:	bd80      	pop	{r7, pc}
 8008bee:	bf00      	nop
 8008bf0:	24000214 	.word	0x24000214

08008bf4 <CDC_TransmitCplt_HS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_TransmitCplt_HS(uint8_t *Buf, uint32_t *Len, uint8_t epnum)
{
 8008bf4:	b480      	push	{r7}
 8008bf6:	b087      	sub	sp, #28
 8008bf8:	af00      	add	r7, sp, #0
 8008bfa:	60f8      	str	r0, [r7, #12]
 8008bfc:	60b9      	str	r1, [r7, #8]
 8008bfe:	4613      	mov	r3, r2
 8008c00:	71fb      	strb	r3, [r7, #7]
  uint8_t result = USBD_OK;
 8008c02:	2300      	movs	r3, #0
 8008c04:	75fb      	strb	r3, [r7, #23]
  /* USER CODE BEGIN 14 */
  UNUSED(Buf);
  UNUSED(Len);
  UNUSED(epnum);
  /* USER CODE END 14 */
  return result;
 8008c06:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8008c0a:	4618      	mov	r0, r3
 8008c0c:	371c      	adds	r7, #28
 8008c0e:	46bd      	mov	sp, r7
 8008c10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008c14:	4770      	bx	lr
	...

08008c18 <USBD_HS_DeviceDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_HS_DeviceDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8008c18:	b480      	push	{r7}
 8008c1a:	b083      	sub	sp, #12
 8008c1c:	af00      	add	r7, sp, #0
 8008c1e:	4603      	mov	r3, r0
 8008c20:	6039      	str	r1, [r7, #0]
 8008c22:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_HS_DeviceDesc);
 8008c24:	683b      	ldr	r3, [r7, #0]
 8008c26:	2212      	movs	r2, #18
 8008c28:	801a      	strh	r2, [r3, #0]
  return USBD_HS_DeviceDesc;
 8008c2a:	4b03      	ldr	r3, [pc, #12]	; (8008c38 <USBD_HS_DeviceDescriptor+0x20>)
}
 8008c2c:	4618      	mov	r0, r3
 8008c2e:	370c      	adds	r7, #12
 8008c30:	46bd      	mov	sp, r7
 8008c32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008c36:	4770      	bx	lr
 8008c38:	240000cc 	.word	0x240000cc

08008c3c <USBD_HS_LangIDStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_HS_LangIDStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8008c3c:	b480      	push	{r7}
 8008c3e:	b083      	sub	sp, #12
 8008c40:	af00      	add	r7, sp, #0
 8008c42:	4603      	mov	r3, r0
 8008c44:	6039      	str	r1, [r7, #0]
 8008c46:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_LangIDDesc);
 8008c48:	683b      	ldr	r3, [r7, #0]
 8008c4a:	2204      	movs	r2, #4
 8008c4c:	801a      	strh	r2, [r3, #0]
  return USBD_LangIDDesc;
 8008c4e:	4b03      	ldr	r3, [pc, #12]	; (8008c5c <USBD_HS_LangIDStrDescriptor+0x20>)
}
 8008c50:	4618      	mov	r0, r3
 8008c52:	370c      	adds	r7, #12
 8008c54:	46bd      	mov	sp, r7
 8008c56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008c5a:	4770      	bx	lr
 8008c5c:	240000e0 	.word	0x240000e0

08008c60 <USBD_HS_ProductStrDescriptor>:
  * @param  speed : current device speed
  * @param  length : pointer to data length variable
  * @retval pointer to descriptor buffer
  */
uint8_t * USBD_HS_ProductStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8008c60:	b580      	push	{r7, lr}
 8008c62:	b082      	sub	sp, #8
 8008c64:	af00      	add	r7, sp, #0
 8008c66:	4603      	mov	r3, r0
 8008c68:	6039      	str	r1, [r7, #0]
 8008c6a:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 8008c6c:	79fb      	ldrb	r3, [r7, #7]
 8008c6e:	2b00      	cmp	r3, #0
 8008c70:	d105      	bne.n	8008c7e <USBD_HS_ProductStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_HS, USBD_StrDesc, length);
 8008c72:	683a      	ldr	r2, [r7, #0]
 8008c74:	4907      	ldr	r1, [pc, #28]	; (8008c94 <USBD_HS_ProductStrDescriptor+0x34>)
 8008c76:	4808      	ldr	r0, [pc, #32]	; (8008c98 <USBD_HS_ProductStrDescriptor+0x38>)
 8008c78:	f7ff fdf6 	bl	8008868 <USBD_GetString>
 8008c7c:	e004      	b.n	8008c88 <USBD_HS_ProductStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_HS, USBD_StrDesc, length);
 8008c7e:	683a      	ldr	r2, [r7, #0]
 8008c80:	4904      	ldr	r1, [pc, #16]	; (8008c94 <USBD_HS_ProductStrDescriptor+0x34>)
 8008c82:	4805      	ldr	r0, [pc, #20]	; (8008c98 <USBD_HS_ProductStrDescriptor+0x38>)
 8008c84:	f7ff fdf0 	bl	8008868 <USBD_GetString>
  }
  return USBD_StrDesc;
 8008c88:	4b02      	ldr	r3, [pc, #8]	; (8008c94 <USBD_HS_ProductStrDescriptor+0x34>)
}
 8008c8a:	4618      	mov	r0, r3
 8008c8c:	3708      	adds	r7, #8
 8008c8e:	46bd      	mov	sp, r7
 8008c90:	bd80      	pop	{r7, pc}
 8008c92:	bf00      	nop
 8008c94:	240014f0 	.word	0x240014f0
 8008c98:	08009edc 	.word	0x08009edc

08008c9c <USBD_HS_ManufacturerStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_HS_ManufacturerStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8008c9c:	b580      	push	{r7, lr}
 8008c9e:	b082      	sub	sp, #8
 8008ca0:	af00      	add	r7, sp, #0
 8008ca2:	4603      	mov	r3, r0
 8008ca4:	6039      	str	r1, [r7, #0]
 8008ca6:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  USBD_GetString((uint8_t *)USBD_MANUFACTURER_STRING, USBD_StrDesc, length);
 8008ca8:	683a      	ldr	r2, [r7, #0]
 8008caa:	4904      	ldr	r1, [pc, #16]	; (8008cbc <USBD_HS_ManufacturerStrDescriptor+0x20>)
 8008cac:	4804      	ldr	r0, [pc, #16]	; (8008cc0 <USBD_HS_ManufacturerStrDescriptor+0x24>)
 8008cae:	f7ff fddb 	bl	8008868 <USBD_GetString>
  return USBD_StrDesc;
 8008cb2:	4b02      	ldr	r3, [pc, #8]	; (8008cbc <USBD_HS_ManufacturerStrDescriptor+0x20>)
}
 8008cb4:	4618      	mov	r0, r3
 8008cb6:	3708      	adds	r7, #8
 8008cb8:	46bd      	mov	sp, r7
 8008cba:	bd80      	pop	{r7, pc}
 8008cbc:	240014f0 	.word	0x240014f0
 8008cc0:	08009ef4 	.word	0x08009ef4

08008cc4 <USBD_HS_SerialStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_HS_SerialStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8008cc4:	b580      	push	{r7, lr}
 8008cc6:	b082      	sub	sp, #8
 8008cc8:	af00      	add	r7, sp, #0
 8008cca:	4603      	mov	r3, r0
 8008ccc:	6039      	str	r1, [r7, #0]
 8008cce:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = USB_SIZ_STRING_SERIAL;
 8008cd0:	683b      	ldr	r3, [r7, #0]
 8008cd2:	221a      	movs	r2, #26
 8008cd4:	801a      	strh	r2, [r3, #0]

  /* Update the serial number string descriptor with the data from the unique
   * ID */
  Get_SerialNum();
 8008cd6:	f000 f843 	bl	8008d60 <Get_SerialNum>
  /* USER CODE BEGIN USBD_HS_SerialStrDescriptor */

  /* USER CODE END USBD_HS_SerialStrDescriptor */

  return (uint8_t *) USBD_StringSerial;
 8008cda:	4b02      	ldr	r3, [pc, #8]	; (8008ce4 <USBD_HS_SerialStrDescriptor+0x20>)
}
 8008cdc:	4618      	mov	r0, r3
 8008cde:	3708      	adds	r7, #8
 8008ce0:	46bd      	mov	sp, r7
 8008ce2:	bd80      	pop	{r7, pc}
 8008ce4:	240000e4 	.word	0x240000e4

08008ce8 <USBD_HS_ConfigStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_HS_ConfigStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8008ce8:	b580      	push	{r7, lr}
 8008cea:	b082      	sub	sp, #8
 8008cec:	af00      	add	r7, sp, #0
 8008cee:	4603      	mov	r3, r0
 8008cf0:	6039      	str	r1, [r7, #0]
 8008cf2:	71fb      	strb	r3, [r7, #7]
  if(speed == USBD_SPEED_HIGH)
 8008cf4:	79fb      	ldrb	r3, [r7, #7]
 8008cf6:	2b00      	cmp	r3, #0
 8008cf8:	d105      	bne.n	8008d06 <USBD_HS_ConfigStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_HS, USBD_StrDesc, length);
 8008cfa:	683a      	ldr	r2, [r7, #0]
 8008cfc:	4907      	ldr	r1, [pc, #28]	; (8008d1c <USBD_HS_ConfigStrDescriptor+0x34>)
 8008cfe:	4808      	ldr	r0, [pc, #32]	; (8008d20 <USBD_HS_ConfigStrDescriptor+0x38>)
 8008d00:	f7ff fdb2 	bl	8008868 <USBD_GetString>
 8008d04:	e004      	b.n	8008d10 <USBD_HS_ConfigStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_HS, USBD_StrDesc, length);
 8008d06:	683a      	ldr	r2, [r7, #0]
 8008d08:	4904      	ldr	r1, [pc, #16]	; (8008d1c <USBD_HS_ConfigStrDescriptor+0x34>)
 8008d0a:	4805      	ldr	r0, [pc, #20]	; (8008d20 <USBD_HS_ConfigStrDescriptor+0x38>)
 8008d0c:	f7ff fdac 	bl	8008868 <USBD_GetString>
  }
  return USBD_StrDesc;
 8008d10:	4b02      	ldr	r3, [pc, #8]	; (8008d1c <USBD_HS_ConfigStrDescriptor+0x34>)
}
 8008d12:	4618      	mov	r0, r3
 8008d14:	3708      	adds	r7, #8
 8008d16:	46bd      	mov	sp, r7
 8008d18:	bd80      	pop	{r7, pc}
 8008d1a:	bf00      	nop
 8008d1c:	240014f0 	.word	0x240014f0
 8008d20:	08009f08 	.word	0x08009f08

08008d24 <USBD_HS_InterfaceStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_HS_InterfaceStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8008d24:	b580      	push	{r7, lr}
 8008d26:	b082      	sub	sp, #8
 8008d28:	af00      	add	r7, sp, #0
 8008d2a:	4603      	mov	r3, r0
 8008d2c:	6039      	str	r1, [r7, #0]
 8008d2e:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 8008d30:	79fb      	ldrb	r3, [r7, #7]
 8008d32:	2b00      	cmp	r3, #0
 8008d34:	d105      	bne.n	8008d42 <USBD_HS_InterfaceStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_HS, USBD_StrDesc, length);
 8008d36:	683a      	ldr	r2, [r7, #0]
 8008d38:	4907      	ldr	r1, [pc, #28]	; (8008d58 <USBD_HS_InterfaceStrDescriptor+0x34>)
 8008d3a:	4808      	ldr	r0, [pc, #32]	; (8008d5c <USBD_HS_InterfaceStrDescriptor+0x38>)
 8008d3c:	f7ff fd94 	bl	8008868 <USBD_GetString>
 8008d40:	e004      	b.n	8008d4c <USBD_HS_InterfaceStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_HS, USBD_StrDesc, length);
 8008d42:	683a      	ldr	r2, [r7, #0]
 8008d44:	4904      	ldr	r1, [pc, #16]	; (8008d58 <USBD_HS_InterfaceStrDescriptor+0x34>)
 8008d46:	4805      	ldr	r0, [pc, #20]	; (8008d5c <USBD_HS_InterfaceStrDescriptor+0x38>)
 8008d48:	f7ff fd8e 	bl	8008868 <USBD_GetString>
  }
  return USBD_StrDesc;
 8008d4c:	4b02      	ldr	r3, [pc, #8]	; (8008d58 <USBD_HS_InterfaceStrDescriptor+0x34>)
}
 8008d4e:	4618      	mov	r0, r3
 8008d50:	3708      	adds	r7, #8
 8008d52:	46bd      	mov	sp, r7
 8008d54:	bd80      	pop	{r7, pc}
 8008d56:	bf00      	nop
 8008d58:	240014f0 	.word	0x240014f0
 8008d5c:	08009f14 	.word	0x08009f14

08008d60 <Get_SerialNum>:
  * @brief  Create the serial number string descriptor
  * @param  None
  * @retval None
  */
static void Get_SerialNum(void)
{
 8008d60:	b580      	push	{r7, lr}
 8008d62:	b084      	sub	sp, #16
 8008d64:	af00      	add	r7, sp, #0
  uint32_t deviceserial0, deviceserial1, deviceserial2;

  deviceserial0 = *(uint32_t *) DEVICE_ID1;
 8008d66:	4b0f      	ldr	r3, [pc, #60]	; (8008da4 <Get_SerialNum+0x44>)
 8008d68:	681b      	ldr	r3, [r3, #0]
 8008d6a:	60fb      	str	r3, [r7, #12]
  deviceserial1 = *(uint32_t *) DEVICE_ID2;
 8008d6c:	4b0e      	ldr	r3, [pc, #56]	; (8008da8 <Get_SerialNum+0x48>)
 8008d6e:	681b      	ldr	r3, [r3, #0]
 8008d70:	60bb      	str	r3, [r7, #8]
  deviceserial2 = *(uint32_t *) DEVICE_ID3;
 8008d72:	4b0e      	ldr	r3, [pc, #56]	; (8008dac <Get_SerialNum+0x4c>)
 8008d74:	681b      	ldr	r3, [r3, #0]
 8008d76:	607b      	str	r3, [r7, #4]

  deviceserial0 += deviceserial2;
 8008d78:	68fa      	ldr	r2, [r7, #12]
 8008d7a:	687b      	ldr	r3, [r7, #4]
 8008d7c:	4413      	add	r3, r2
 8008d7e:	60fb      	str	r3, [r7, #12]

  if (deviceserial0 != 0)
 8008d80:	68fb      	ldr	r3, [r7, #12]
 8008d82:	2b00      	cmp	r3, #0
 8008d84:	d009      	beq.n	8008d9a <Get_SerialNum+0x3a>
  {
    IntToUnicode(deviceserial0, &USBD_StringSerial[2], 8);
 8008d86:	2208      	movs	r2, #8
 8008d88:	4909      	ldr	r1, [pc, #36]	; (8008db0 <Get_SerialNum+0x50>)
 8008d8a:	68f8      	ldr	r0, [r7, #12]
 8008d8c:	f000 f814 	bl	8008db8 <IntToUnicode>
    IntToUnicode(deviceserial1, &USBD_StringSerial[18], 4);
 8008d90:	2204      	movs	r2, #4
 8008d92:	4908      	ldr	r1, [pc, #32]	; (8008db4 <Get_SerialNum+0x54>)
 8008d94:	68b8      	ldr	r0, [r7, #8]
 8008d96:	f000 f80f 	bl	8008db8 <IntToUnicode>
  }
}
 8008d9a:	bf00      	nop
 8008d9c:	3710      	adds	r7, #16
 8008d9e:	46bd      	mov	sp, r7
 8008da0:	bd80      	pop	{r7, pc}
 8008da2:	bf00      	nop
 8008da4:	1ff1e800 	.word	0x1ff1e800
 8008da8:	1ff1e804 	.word	0x1ff1e804
 8008dac:	1ff1e808 	.word	0x1ff1e808
 8008db0:	240000e6 	.word	0x240000e6
 8008db4:	240000f6 	.word	0x240000f6

08008db8 <IntToUnicode>:
  * @param  pbuf: pointer to the buffer
  * @param  len: buffer length
  * @retval None
  */
static void IntToUnicode(uint32_t value, uint8_t * pbuf, uint8_t len)
{
 8008db8:	b480      	push	{r7}
 8008dba:	b087      	sub	sp, #28
 8008dbc:	af00      	add	r7, sp, #0
 8008dbe:	60f8      	str	r0, [r7, #12]
 8008dc0:	60b9      	str	r1, [r7, #8]
 8008dc2:	4613      	mov	r3, r2
 8008dc4:	71fb      	strb	r3, [r7, #7]
  uint8_t idx = 0;
 8008dc6:	2300      	movs	r3, #0
 8008dc8:	75fb      	strb	r3, [r7, #23]

  for (idx = 0; idx < len; idx++)
 8008dca:	2300      	movs	r3, #0
 8008dcc:	75fb      	strb	r3, [r7, #23]
 8008dce:	e027      	b.n	8008e20 <IntToUnicode+0x68>
  {
    if (((value >> 28)) < 0xA)
 8008dd0:	68fb      	ldr	r3, [r7, #12]
 8008dd2:	0f1b      	lsrs	r3, r3, #28
 8008dd4:	2b09      	cmp	r3, #9
 8008dd6:	d80b      	bhi.n	8008df0 <IntToUnicode+0x38>
    {
      pbuf[2 * idx] = (value >> 28) + '0';
 8008dd8:	68fb      	ldr	r3, [r7, #12]
 8008dda:	0f1b      	lsrs	r3, r3, #28
 8008ddc:	b2da      	uxtb	r2, r3
 8008dde:	7dfb      	ldrb	r3, [r7, #23]
 8008de0:	005b      	lsls	r3, r3, #1
 8008de2:	4619      	mov	r1, r3
 8008de4:	68bb      	ldr	r3, [r7, #8]
 8008de6:	440b      	add	r3, r1
 8008de8:	3230      	adds	r2, #48	; 0x30
 8008dea:	b2d2      	uxtb	r2, r2
 8008dec:	701a      	strb	r2, [r3, #0]
 8008dee:	e00a      	b.n	8008e06 <IntToUnicode+0x4e>
    }
    else
    {
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 8008df0:	68fb      	ldr	r3, [r7, #12]
 8008df2:	0f1b      	lsrs	r3, r3, #28
 8008df4:	b2da      	uxtb	r2, r3
 8008df6:	7dfb      	ldrb	r3, [r7, #23]
 8008df8:	005b      	lsls	r3, r3, #1
 8008dfa:	4619      	mov	r1, r3
 8008dfc:	68bb      	ldr	r3, [r7, #8]
 8008dfe:	440b      	add	r3, r1
 8008e00:	3237      	adds	r2, #55	; 0x37
 8008e02:	b2d2      	uxtb	r2, r2
 8008e04:	701a      	strb	r2, [r3, #0]
    }

    value = value << 4;
 8008e06:	68fb      	ldr	r3, [r7, #12]
 8008e08:	011b      	lsls	r3, r3, #4
 8008e0a:	60fb      	str	r3, [r7, #12]

    pbuf[2 * idx + 1] = 0;
 8008e0c:	7dfb      	ldrb	r3, [r7, #23]
 8008e0e:	005b      	lsls	r3, r3, #1
 8008e10:	3301      	adds	r3, #1
 8008e12:	68ba      	ldr	r2, [r7, #8]
 8008e14:	4413      	add	r3, r2
 8008e16:	2200      	movs	r2, #0
 8008e18:	701a      	strb	r2, [r3, #0]
  for (idx = 0; idx < len; idx++)
 8008e1a:	7dfb      	ldrb	r3, [r7, #23]
 8008e1c:	3301      	adds	r3, #1
 8008e1e:	75fb      	strb	r3, [r7, #23]
 8008e20:	7dfa      	ldrb	r2, [r7, #23]
 8008e22:	79fb      	ldrb	r3, [r7, #7]
 8008e24:	429a      	cmp	r2, r3
 8008e26:	d3d3      	bcc.n	8008dd0 <IntToUnicode+0x18>
  }
}
 8008e28:	bf00      	nop
 8008e2a:	bf00      	nop
 8008e2c:	371c      	adds	r7, #28
 8008e2e:	46bd      	mov	sp, r7
 8008e30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008e34:	4770      	bx	lr
	...

08008e38 <HAL_PCD_MspInit>:
                       LL Driver Callbacks (PCD -> USB Device Library)
*******************************************************************************/
/* MSP Init */

void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
{
 8008e38:	b580      	push	{r7, lr}
 8008e3a:	b0bc      	sub	sp, #240	; 0xf0
 8008e3c:	af00      	add	r7, sp, #0
 8008e3e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8008e40:	f107 03dc 	add.w	r3, r7, #220	; 0xdc
 8008e44:	2200      	movs	r2, #0
 8008e46:	601a      	str	r2, [r3, #0]
 8008e48:	605a      	str	r2, [r3, #4]
 8008e4a:	609a      	str	r2, [r3, #8]
 8008e4c:	60da      	str	r2, [r3, #12]
 8008e4e:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8008e50:	f107 0320 	add.w	r3, r7, #32
 8008e54:	22bc      	movs	r2, #188	; 0xbc
 8008e56:	2100      	movs	r1, #0
 8008e58:	4618      	mov	r0, r3
 8008e5a:	f000 fbab 	bl	80095b4 <memset>
  if(pcdHandle->Instance==USB_OTG_HS)
 8008e5e:	687b      	ldr	r3, [r7, #4]
 8008e60:	681b      	ldr	r3, [r3, #0]
 8008e62:	4a57      	ldr	r2, [pc, #348]	; (8008fc0 <HAL_PCD_MspInit+0x188>)
 8008e64:	4293      	cmp	r3, r2
 8008e66:	f040 80a6 	bne.w	8008fb6 <HAL_PCD_MspInit+0x17e>

  /* USER CODE END USB_OTG_HS_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USB;
 8008e6a:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 8008e6e:	623b      	str	r3, [r7, #32]
    PeriphClkInitStruct.UsbClockSelection = RCC_USBCLKSOURCE_HSI48;
 8008e70:	f44f 1340 	mov.w	r3, #3145728	; 0x300000
 8008e74:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8008e78:	f107 0320 	add.w	r3, r7, #32
 8008e7c:	4618      	mov	r0, r3
 8008e7e:	f7fa fce7 	bl	8003850 <HAL_RCCEx_PeriphCLKConfig>
 8008e82:	4603      	mov	r3, r0
 8008e84:	2b00      	cmp	r3, #0
 8008e86:	d001      	beq.n	8008e8c <HAL_PCD_MspInit+0x54>
    {
      Error_Handler();
 8008e88:	f7f7 fca0 	bl	80007cc <Error_Handler>
    }

  /** Enable USB Voltage detector
  */
    HAL_PWREx_EnableUSBVoltageDetector();
 8008e8c:	f7f9 fd42 	bl	8002914 <HAL_PWREx_EnableUSBVoltageDetector>

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8008e90:	4b4c      	ldr	r3, [pc, #304]	; (8008fc4 <HAL_PCD_MspInit+0x18c>)
 8008e92:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8008e96:	4a4b      	ldr	r2, [pc, #300]	; (8008fc4 <HAL_PCD_MspInit+0x18c>)
 8008e98:	f043 0304 	orr.w	r3, r3, #4
 8008e9c:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8008ea0:	4b48      	ldr	r3, [pc, #288]	; (8008fc4 <HAL_PCD_MspInit+0x18c>)
 8008ea2:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8008ea6:	f003 0304 	and.w	r3, r3, #4
 8008eaa:	61fb      	str	r3, [r7, #28]
 8008eac:	69fb      	ldr	r3, [r7, #28]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8008eae:	4b45      	ldr	r3, [pc, #276]	; (8008fc4 <HAL_PCD_MspInit+0x18c>)
 8008eb0:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8008eb4:	4a43      	ldr	r2, [pc, #268]	; (8008fc4 <HAL_PCD_MspInit+0x18c>)
 8008eb6:	f043 0301 	orr.w	r3, r3, #1
 8008eba:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8008ebe:	4b41      	ldr	r3, [pc, #260]	; (8008fc4 <HAL_PCD_MspInit+0x18c>)
 8008ec0:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8008ec4:	f003 0301 	and.w	r3, r3, #1
 8008ec8:	61bb      	str	r3, [r7, #24]
 8008eca:	69bb      	ldr	r3, [r7, #24]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8008ecc:	4b3d      	ldr	r3, [pc, #244]	; (8008fc4 <HAL_PCD_MspInit+0x18c>)
 8008ece:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8008ed2:	4a3c      	ldr	r2, [pc, #240]	; (8008fc4 <HAL_PCD_MspInit+0x18c>)
 8008ed4:	f043 0302 	orr.w	r3, r3, #2
 8008ed8:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8008edc:	4b39      	ldr	r3, [pc, #228]	; (8008fc4 <HAL_PCD_MspInit+0x18c>)
 8008ede:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8008ee2:	f003 0302 	and.w	r3, r3, #2
 8008ee6:	617b      	str	r3, [r7, #20]
 8008ee8:	697b      	ldr	r3, [r7, #20]
    PB11     ------> USB_OTG_HS_ULPI_D4
    PB12     ------> USB_OTG_HS_ULPI_D5
    PB13     ------> USB_OTG_HS_ULPI_D6
    PB5     ------> USB_OTG_HS_ULPI_D7
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_2|GPIO_PIN_3;
 8008eea:	230d      	movs	r3, #13
 8008eec:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8008ef0:	2302      	movs	r3, #2
 8008ef2:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8008ef6:	2300      	movs	r3, #0
 8008ef8:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8008efc:	2302      	movs	r3, #2
 8008efe:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG2_HS;
 8008f02:	230a      	movs	r3, #10
 8008f04:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8008f08:	f107 03dc 	add.w	r3, r7, #220	; 0xdc
 8008f0c:	4619      	mov	r1, r3
 8008f0e:	482e      	ldr	r0, [pc, #184]	; (8008fc8 <HAL_PCD_MspInit+0x190>)
 8008f10:	f7f8 f828 	bl	8000f64 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_3|GPIO_PIN_5;
 8008f14:	2328      	movs	r3, #40	; 0x28
 8008f16:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8008f1a:	2302      	movs	r3, #2
 8008f1c:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8008f20:	2300      	movs	r3, #0
 8008f22:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8008f26:	2302      	movs	r3, #2
 8008f28:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG2_HS;
 8008f2c:	230a      	movs	r3, #10
 8008f2e:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8008f32:	f107 03dc 	add.w	r3, r7, #220	; 0xdc
 8008f36:	4619      	mov	r1, r3
 8008f38:	4824      	ldr	r0, [pc, #144]	; (8008fcc <HAL_PCD_MspInit+0x194>)
 8008f3a:	f7f8 f813 	bl	8000f64 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_10|GPIO_PIN_11
 8008f3e:	f643 4323 	movw	r3, #15395	; 0x3c23
 8008f42:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
                          |GPIO_PIN_12|GPIO_PIN_13|GPIO_PIN_5;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8008f46:	2302      	movs	r3, #2
 8008f48:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8008f4c:	2300      	movs	r3, #0
 8008f4e:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8008f52:	2302      	movs	r3, #2
 8008f54:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG2_HS;
 8008f58:	230a      	movs	r3, #10
 8008f5a:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8008f5e:	f107 03dc 	add.w	r3, r7, #220	; 0xdc
 8008f62:	4619      	mov	r1, r3
 8008f64:	481a      	ldr	r0, [pc, #104]	; (8008fd0 <HAL_PCD_MspInit+0x198>)
 8008f66:	f7f7 fffd 	bl	8000f64 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_HS_CLK_ENABLE();
 8008f6a:	4b16      	ldr	r3, [pc, #88]	; (8008fc4 <HAL_PCD_MspInit+0x18c>)
 8008f6c:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8008f70:	4a14      	ldr	r2, [pc, #80]	; (8008fc4 <HAL_PCD_MspInit+0x18c>)
 8008f72:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8008f76:	f8c2 30d8 	str.w	r3, [r2, #216]	; 0xd8
 8008f7a:	4b12      	ldr	r3, [pc, #72]	; (8008fc4 <HAL_PCD_MspInit+0x18c>)
 8008f7c:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8008f80:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8008f84:	613b      	str	r3, [r7, #16]
 8008f86:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_USB_OTG_HS_ULPI_CLK_ENABLE();
 8008f88:	4b0e      	ldr	r3, [pc, #56]	; (8008fc4 <HAL_PCD_MspInit+0x18c>)
 8008f8a:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8008f8e:	4a0d      	ldr	r2, [pc, #52]	; (8008fc4 <HAL_PCD_MspInit+0x18c>)
 8008f90:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8008f94:	f8c2 30d8 	str.w	r3, [r2, #216]	; 0xd8
 8008f98:	4b0a      	ldr	r3, [pc, #40]	; (8008fc4 <HAL_PCD_MspInit+0x18c>)
 8008f9a:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8008f9e:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8008fa2:	60fb      	str	r3, [r7, #12]
 8008fa4:	68fb      	ldr	r3, [r7, #12]

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(OTG_HS_IRQn, 0, 0);
 8008fa6:	2200      	movs	r2, #0
 8008fa8:	2100      	movs	r1, #0
 8008faa:	204d      	movs	r0, #77	; 0x4d
 8008fac:	f7f7 ffa5 	bl	8000efa <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(OTG_HS_IRQn);
 8008fb0:	204d      	movs	r0, #77	; 0x4d
 8008fb2:	f7f7 ffbc 	bl	8000f2e <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_OTG_HS_MspInit 1 */

  /* USER CODE END USB_OTG_HS_MspInit 1 */
  }
}
 8008fb6:	bf00      	nop
 8008fb8:	37f0      	adds	r7, #240	; 0xf0
 8008fba:	46bd      	mov	sp, r7
 8008fbc:	bd80      	pop	{r7, pc}
 8008fbe:	bf00      	nop
 8008fc0:	40040000 	.word	0x40040000
 8008fc4:	58024400 	.word	0x58024400
 8008fc8:	58020800 	.word	0x58020800
 8008fcc:	58020000 	.word	0x58020000
 8008fd0:	58020400 	.word	0x58020400

08008fd4 <HAL_PCD_SetupStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8008fd4:	b580      	push	{r7, lr}
 8008fd6:	b082      	sub	sp, #8
 8008fd8:	af00      	add	r7, sp, #0
 8008fda:	6078      	str	r0, [r7, #4]
  USBD_LL_SetupStage((USBD_HandleTypeDef*)hpcd->pData, (uint8_t *)hpcd->Setup);
 8008fdc:	687b      	ldr	r3, [r7, #4]
 8008fde:	f8d3 2508 	ldr.w	r2, [r3, #1288]	; 0x508
 8008fe2:	687b      	ldr	r3, [r7, #4]
 8008fe4:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 8008fe8:	4619      	mov	r1, r3
 8008fea:	4610      	mov	r0, r2
 8008fec:	f7fe fadd 	bl	80075aa <USBD_LL_SetupStage>
}
 8008ff0:	bf00      	nop
 8008ff2:	3708      	adds	r7, #8
 8008ff4:	46bd      	mov	sp, r7
 8008ff6:	bd80      	pop	{r7, pc}

08008ff8 <HAL_PCD_DataOutStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8008ff8:	b580      	push	{r7, lr}
 8008ffa:	b082      	sub	sp, #8
 8008ffc:	af00      	add	r7, sp, #0
 8008ffe:	6078      	str	r0, [r7, #4]
 8009000:	460b      	mov	r3, r1
 8009002:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataOutStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->OUT_ep[epnum].xfer_buff);
 8009004:	687b      	ldr	r3, [r7, #4]
 8009006:	f8d3 0508 	ldr.w	r0, [r3, #1288]	; 0x508
 800900a:	78fa      	ldrb	r2, [r7, #3]
 800900c:	6879      	ldr	r1, [r7, #4]
 800900e:	4613      	mov	r3, r2
 8009010:	00db      	lsls	r3, r3, #3
 8009012:	4413      	add	r3, r2
 8009014:	009b      	lsls	r3, r3, #2
 8009016:	440b      	add	r3, r1
 8009018:	f503 7323 	add.w	r3, r3, #652	; 0x28c
 800901c:	681a      	ldr	r2, [r3, #0]
 800901e:	78fb      	ldrb	r3, [r7, #3]
 8009020:	4619      	mov	r1, r3
 8009022:	f7fe fb17 	bl	8007654 <USBD_LL_DataOutStage>
}
 8009026:	bf00      	nop
 8009028:	3708      	adds	r7, #8
 800902a:	46bd      	mov	sp, r7
 800902c:	bd80      	pop	{r7, pc}

0800902e <HAL_PCD_DataInStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800902e:	b580      	push	{r7, lr}
 8009030:	b082      	sub	sp, #8
 8009032:	af00      	add	r7, sp, #0
 8009034:	6078      	str	r0, [r7, #4]
 8009036:	460b      	mov	r3, r1
 8009038:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataInStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->IN_ep[epnum].xfer_buff);
 800903a:	687b      	ldr	r3, [r7, #4]
 800903c:	f8d3 0508 	ldr.w	r0, [r3, #1288]	; 0x508
 8009040:	78fa      	ldrb	r2, [r7, #3]
 8009042:	6879      	ldr	r1, [r7, #4]
 8009044:	4613      	mov	r3, r2
 8009046:	00db      	lsls	r3, r3, #3
 8009048:	4413      	add	r3, r2
 800904a:	009b      	lsls	r3, r3, #2
 800904c:	440b      	add	r3, r1
 800904e:	334c      	adds	r3, #76	; 0x4c
 8009050:	681a      	ldr	r2, [r3, #0]
 8009052:	78fb      	ldrb	r3, [r7, #3]
 8009054:	4619      	mov	r1, r3
 8009056:	f7fe fbb0 	bl	80077ba <USBD_LL_DataInStage>
}
 800905a:	bf00      	nop
 800905c:	3708      	adds	r7, #8
 800905e:	46bd      	mov	sp, r7
 8009060:	bd80      	pop	{r7, pc}

08009062 <HAL_PCD_SOFCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8009062:	b580      	push	{r7, lr}
 8009064:	b082      	sub	sp, #8
 8009066:	af00      	add	r7, sp, #0
 8009068:	6078      	str	r0, [r7, #4]
  USBD_LL_SOF((USBD_HandleTypeDef*)hpcd->pData);
 800906a:	687b      	ldr	r3, [r7, #4]
 800906c:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 8009070:	4618      	mov	r0, r3
 8009072:	f7fe fce4 	bl	8007a3e <USBD_LL_SOF>
}
 8009076:	bf00      	nop
 8009078:	3708      	adds	r7, #8
 800907a:	46bd      	mov	sp, r7
 800907c:	bd80      	pop	{r7, pc}

0800907e <HAL_PCD_ResetCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800907e:	b580      	push	{r7, lr}
 8009080:	b084      	sub	sp, #16
 8009082:	af00      	add	r7, sp, #0
 8009084:	6078      	str	r0, [r7, #4]
  USBD_SpeedTypeDef speed = USBD_SPEED_FULL;
 8009086:	2301      	movs	r3, #1
 8009088:	73fb      	strb	r3, [r7, #15]

  if ( hpcd->Init.speed == PCD_SPEED_HIGH)
 800908a:	687b      	ldr	r3, [r7, #4]
 800908c:	68db      	ldr	r3, [r3, #12]
 800908e:	2b00      	cmp	r3, #0
 8009090:	d102      	bne.n	8009098 <HAL_PCD_ResetCallback+0x1a>
  {
    speed = USBD_SPEED_HIGH;
 8009092:	2300      	movs	r3, #0
 8009094:	73fb      	strb	r3, [r7, #15]
 8009096:	e008      	b.n	80090aa <HAL_PCD_ResetCallback+0x2c>
  }
  else if ( hpcd->Init.speed == PCD_SPEED_FULL)
 8009098:	687b      	ldr	r3, [r7, #4]
 800909a:	68db      	ldr	r3, [r3, #12]
 800909c:	2b02      	cmp	r3, #2
 800909e:	d102      	bne.n	80090a6 <HAL_PCD_ResetCallback+0x28>
  {
    speed = USBD_SPEED_FULL;
 80090a0:	2301      	movs	r3, #1
 80090a2:	73fb      	strb	r3, [r7, #15]
 80090a4:	e001      	b.n	80090aa <HAL_PCD_ResetCallback+0x2c>
  }
  else
  {
    Error_Handler();
 80090a6:	f7f7 fb91 	bl	80007cc <Error_Handler>
  }
    /* Set Speed. */
  USBD_LL_SetSpeed((USBD_HandleTypeDef*)hpcd->pData, speed);
 80090aa:	687b      	ldr	r3, [r7, #4]
 80090ac:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 80090b0:	7bfa      	ldrb	r2, [r7, #15]
 80090b2:	4611      	mov	r1, r2
 80090b4:	4618      	mov	r0, r3
 80090b6:	f7fe fc84 	bl	80079c2 <USBD_LL_SetSpeed>

  /* Reset Device. */
  USBD_LL_Reset((USBD_HandleTypeDef*)hpcd->pData);
 80090ba:	687b      	ldr	r3, [r7, #4]
 80090bc:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 80090c0:	4618      	mov	r0, r3
 80090c2:	f7fe fc2c 	bl	800791e <USBD_LL_Reset>
}
 80090c6:	bf00      	nop
 80090c8:	3710      	adds	r7, #16
 80090ca:	46bd      	mov	sp, r7
 80090cc:	bd80      	pop	{r7, pc}
	...

080090d0 <HAL_PCD_SuspendCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80090d0:	b580      	push	{r7, lr}
 80090d2:	b082      	sub	sp, #8
 80090d4:	af00      	add	r7, sp, #0
 80090d6:	6078      	str	r0, [r7, #4]
  /* Inform USB library that core enters in suspend Mode. */
  USBD_LL_Suspend((USBD_HandleTypeDef*)hpcd->pData);
 80090d8:	687b      	ldr	r3, [r7, #4]
 80090da:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 80090de:	4618      	mov	r0, r3
 80090e0:	f7fe fc7f 	bl	80079e2 <USBD_LL_Suspend>
  __HAL_PCD_GATE_PHYCLOCK(hpcd);
 80090e4:	687b      	ldr	r3, [r7, #4]
 80090e6:	681b      	ldr	r3, [r3, #0]
 80090e8:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 80090ec:	681b      	ldr	r3, [r3, #0]
 80090ee:	687a      	ldr	r2, [r7, #4]
 80090f0:	6812      	ldr	r2, [r2, #0]
 80090f2:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 80090f6:	f043 0301 	orr.w	r3, r3, #1
 80090fa:	6013      	str	r3, [r2, #0]
  /* Enter in STOP mode. */
  /* USER CODE BEGIN 2 */
  if (hpcd->Init.low_power_enable)
 80090fc:	687b      	ldr	r3, [r7, #4]
 80090fe:	6a1b      	ldr	r3, [r3, #32]
 8009100:	2b00      	cmp	r3, #0
 8009102:	d005      	beq.n	8009110 <HAL_PCD_SuspendCallback+0x40>
  {
    /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register. */
    SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 8009104:	4b04      	ldr	r3, [pc, #16]	; (8009118 <HAL_PCD_SuspendCallback+0x48>)
 8009106:	691b      	ldr	r3, [r3, #16]
 8009108:	4a03      	ldr	r2, [pc, #12]	; (8009118 <HAL_PCD_SuspendCallback+0x48>)
 800910a:	f043 0306 	orr.w	r3, r3, #6
 800910e:	6113      	str	r3, [r2, #16]
  }
  /* USER CODE END 2 */
}
 8009110:	bf00      	nop
 8009112:	3708      	adds	r7, #8
 8009114:	46bd      	mov	sp, r7
 8009116:	bd80      	pop	{r7, pc}
 8009118:	e000ed00 	.word	0xe000ed00

0800911c <HAL_PCD_ResumeCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800911c:	b580      	push	{r7, lr}
 800911e:	b082      	sub	sp, #8
 8009120:	af00      	add	r7, sp, #0
 8009122:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 3 */

  /* USER CODE END 3 */
  USBD_LL_Resume((USBD_HandleTypeDef*)hpcd->pData);
 8009124:	687b      	ldr	r3, [r7, #4]
 8009126:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 800912a:	4618      	mov	r0, r3
 800912c:	f7fe fc6f 	bl	8007a0e <USBD_LL_Resume>
}
 8009130:	bf00      	nop
 8009132:	3708      	adds	r7, #8
 8009134:	46bd      	mov	sp, r7
 8009136:	bd80      	pop	{r7, pc}

08009138 <HAL_PCD_ISOOUTIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8009138:	b580      	push	{r7, lr}
 800913a:	b082      	sub	sp, #8
 800913c:	af00      	add	r7, sp, #0
 800913e:	6078      	str	r0, [r7, #4]
 8009140:	460b      	mov	r3, r1
 8009142:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoOUTIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 8009144:	687b      	ldr	r3, [r7, #4]
 8009146:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 800914a:	78fa      	ldrb	r2, [r7, #3]
 800914c:	4611      	mov	r1, r2
 800914e:	4618      	mov	r0, r3
 8009150:	f7fe fcc7 	bl	8007ae2 <USBD_LL_IsoOUTIncomplete>
}
 8009154:	bf00      	nop
 8009156:	3708      	adds	r7, #8
 8009158:	46bd      	mov	sp, r7
 800915a:	bd80      	pop	{r7, pc}

0800915c <HAL_PCD_ISOINIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800915c:	b580      	push	{r7, lr}
 800915e:	b082      	sub	sp, #8
 8009160:	af00      	add	r7, sp, #0
 8009162:	6078      	str	r0, [r7, #4]
 8009164:	460b      	mov	r3, r1
 8009166:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoINIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 8009168:	687b      	ldr	r3, [r7, #4]
 800916a:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 800916e:	78fa      	ldrb	r2, [r7, #3]
 8009170:	4611      	mov	r1, r2
 8009172:	4618      	mov	r0, r3
 8009174:	f7fe fc83 	bl	8007a7e <USBD_LL_IsoINIncomplete>
}
 8009178:	bf00      	nop
 800917a:	3708      	adds	r7, #8
 800917c:	46bd      	mov	sp, r7
 800917e:	bd80      	pop	{r7, pc}

08009180 <HAL_PCD_ConnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8009180:	b580      	push	{r7, lr}
 8009182:	b082      	sub	sp, #8
 8009184:	af00      	add	r7, sp, #0
 8009186:	6078      	str	r0, [r7, #4]
  USBD_LL_DevConnected((USBD_HandleTypeDef*)hpcd->pData);
 8009188:	687b      	ldr	r3, [r7, #4]
 800918a:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 800918e:	4618      	mov	r0, r3
 8009190:	f7fe fcd9 	bl	8007b46 <USBD_LL_DevConnected>
}
 8009194:	bf00      	nop
 8009196:	3708      	adds	r7, #8
 8009198:	46bd      	mov	sp, r7
 800919a:	bd80      	pop	{r7, pc}

0800919c <HAL_PCD_DisconnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800919c:	b580      	push	{r7, lr}
 800919e:	b082      	sub	sp, #8
 80091a0:	af00      	add	r7, sp, #0
 80091a2:	6078      	str	r0, [r7, #4]
  USBD_LL_DevDisconnected((USBD_HandleTypeDef*)hpcd->pData);
 80091a4:	687b      	ldr	r3, [r7, #4]
 80091a6:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 80091aa:	4618      	mov	r0, r3
 80091ac:	f7fe fcd6 	bl	8007b5c <USBD_LL_DevDisconnected>
}
 80091b0:	bf00      	nop
 80091b2:	3708      	adds	r7, #8
 80091b4:	46bd      	mov	sp, r7
 80091b6:	bd80      	pop	{r7, pc}

080091b8 <USBD_LL_Init>:
  * @brief  Initializes the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Init(USBD_HandleTypeDef *pdev)
{
 80091b8:	b580      	push	{r7, lr}
 80091ba:	b082      	sub	sp, #8
 80091bc:	af00      	add	r7, sp, #0
 80091be:	6078      	str	r0, [r7, #4]
  /* Init USB Ip. */
  if (pdev->id == DEVICE_HS) {
 80091c0:	687b      	ldr	r3, [r7, #4]
 80091c2:	781b      	ldrb	r3, [r3, #0]
 80091c4:	2b01      	cmp	r3, #1
 80091c6:	d140      	bne.n	800924a <USBD_LL_Init+0x92>
  /* Link the driver to the stack. */
  hpcd_USB_OTG_HS.pData = pdev;
 80091c8:	4a22      	ldr	r2, [pc, #136]	; (8009254 <USBD_LL_Init+0x9c>)
 80091ca:	687b      	ldr	r3, [r7, #4]
 80091cc:	f8c2 3508 	str.w	r3, [r2, #1288]	; 0x508
  pdev->pData = &hpcd_USB_OTG_HS;
 80091d0:	687b      	ldr	r3, [r7, #4]
 80091d2:	4a20      	ldr	r2, [pc, #128]	; (8009254 <USBD_LL_Init+0x9c>)
 80091d4:	f8c3 22c8 	str.w	r2, [r3, #712]	; 0x2c8

  hpcd_USB_OTG_HS.Instance = USB_OTG_HS;
 80091d8:	4b1e      	ldr	r3, [pc, #120]	; (8009254 <USBD_LL_Init+0x9c>)
 80091da:	4a1f      	ldr	r2, [pc, #124]	; (8009258 <USBD_LL_Init+0xa0>)
 80091dc:	601a      	str	r2, [r3, #0]
  hpcd_USB_OTG_HS.Init.dev_endpoints = 9;
 80091de:	4b1d      	ldr	r3, [pc, #116]	; (8009254 <USBD_LL_Init+0x9c>)
 80091e0:	2209      	movs	r2, #9
 80091e2:	605a      	str	r2, [r3, #4]
  hpcd_USB_OTG_HS.Init.speed = PCD_SPEED_HIGH;
 80091e4:	4b1b      	ldr	r3, [pc, #108]	; (8009254 <USBD_LL_Init+0x9c>)
 80091e6:	2200      	movs	r2, #0
 80091e8:	60da      	str	r2, [r3, #12]
  hpcd_USB_OTG_HS.Init.dma_enable = DISABLE;
 80091ea:	4b1a      	ldr	r3, [pc, #104]	; (8009254 <USBD_LL_Init+0x9c>)
 80091ec:	2200      	movs	r2, #0
 80091ee:	611a      	str	r2, [r3, #16]
  hpcd_USB_OTG_HS.Init.phy_itface = USB_OTG_ULPI_PHY;
 80091f0:	4b18      	ldr	r3, [pc, #96]	; (8009254 <USBD_LL_Init+0x9c>)
 80091f2:	2201      	movs	r2, #1
 80091f4:	619a      	str	r2, [r3, #24]
  hpcd_USB_OTG_HS.Init.Sof_enable = DISABLE;
 80091f6:	4b17      	ldr	r3, [pc, #92]	; (8009254 <USBD_LL_Init+0x9c>)
 80091f8:	2200      	movs	r2, #0
 80091fa:	61da      	str	r2, [r3, #28]
  hpcd_USB_OTG_HS.Init.low_power_enable = DISABLE;
 80091fc:	4b15      	ldr	r3, [pc, #84]	; (8009254 <USBD_LL_Init+0x9c>)
 80091fe:	2200      	movs	r2, #0
 8009200:	621a      	str	r2, [r3, #32]
  hpcd_USB_OTG_HS.Init.lpm_enable = DISABLE;
 8009202:	4b14      	ldr	r3, [pc, #80]	; (8009254 <USBD_LL_Init+0x9c>)
 8009204:	2200      	movs	r2, #0
 8009206:	625a      	str	r2, [r3, #36]	; 0x24
  hpcd_USB_OTG_HS.Init.vbus_sensing_enable = DISABLE;
 8009208:	4b12      	ldr	r3, [pc, #72]	; (8009254 <USBD_LL_Init+0x9c>)
 800920a:	2200      	movs	r2, #0
 800920c:	62da      	str	r2, [r3, #44]	; 0x2c
  hpcd_USB_OTG_HS.Init.use_dedicated_ep1 = DISABLE;
 800920e:	4b11      	ldr	r3, [pc, #68]	; (8009254 <USBD_LL_Init+0x9c>)
 8009210:	2200      	movs	r2, #0
 8009212:	631a      	str	r2, [r3, #48]	; 0x30
  hpcd_USB_OTG_HS.Init.use_external_vbus = DISABLE;
 8009214:	4b0f      	ldr	r3, [pc, #60]	; (8009254 <USBD_LL_Init+0x9c>)
 8009216:	2200      	movs	r2, #0
 8009218:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_PCD_Init(&hpcd_USB_OTG_HS) != HAL_OK)
 800921a:	480e      	ldr	r0, [pc, #56]	; (8009254 <USBD_LL_Init+0x9c>)
 800921c:	f7f8 f86b 	bl	80012f6 <HAL_PCD_Init>
 8009220:	4603      	mov	r3, r0
 8009222:	2b00      	cmp	r3, #0
 8009224:	d001      	beq.n	800922a <USBD_LL_Init+0x72>
  {
    Error_Handler( );
 8009226:	f7f7 fad1 	bl	80007cc <Error_Handler>
  HAL_PCD_RegisterDataInStageCallback(&hpcd_USB_OTG_HS, PCD_DataInStageCallback);
  HAL_PCD_RegisterIsoOutIncpltCallback(&hpcd_USB_OTG_HS, PCD_ISOOUTIncompleteCallback);
  HAL_PCD_RegisterIsoInIncpltCallback(&hpcd_USB_OTG_HS, PCD_ISOINIncompleteCallback);
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  /* USER CODE BEGIN TxRx_Configuration */
  HAL_PCDEx_SetRxFiFo(&hpcd_USB_OTG_HS, 0x200);
 800922a:	f44f 7100 	mov.w	r1, #512	; 0x200
 800922e:	4809      	ldr	r0, [pc, #36]	; (8009254 <USBD_LL_Init+0x9c>)
 8009230:	f7f9 faf5 	bl	800281e <HAL_PCDEx_SetRxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_HS, 0, 0x80);
 8009234:	2280      	movs	r2, #128	; 0x80
 8009236:	2100      	movs	r1, #0
 8009238:	4806      	ldr	r0, [pc, #24]	; (8009254 <USBD_LL_Init+0x9c>)
 800923a:	f7f9 faa9 	bl	8002790 <HAL_PCDEx_SetTxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_HS, 1, 0x174);
 800923e:	f44f 72ba 	mov.w	r2, #372	; 0x174
 8009242:	2101      	movs	r1, #1
 8009244:	4803      	ldr	r0, [pc, #12]	; (8009254 <USBD_LL_Init+0x9c>)
 8009246:	f7f9 faa3 	bl	8002790 <HAL_PCDEx_SetTxFiFo>
  /* USER CODE END TxRx_Configuration */
  }
  return USBD_OK;
 800924a:	2300      	movs	r3, #0
}
 800924c:	4618      	mov	r0, r3
 800924e:	3708      	adds	r7, #8
 8009250:	46bd      	mov	sp, r7
 8009252:	bd80      	pop	{r7, pc}
 8009254:	240016f0 	.word	0x240016f0
 8009258:	40040000 	.word	0x40040000

0800925c <USBD_LL_Start>:
  * @brief  Starts the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Start(USBD_HandleTypeDef *pdev)
{
 800925c:	b580      	push	{r7, lr}
 800925e:	b084      	sub	sp, #16
 8009260:	af00      	add	r7, sp, #0
 8009262:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8009264:	2300      	movs	r3, #0
 8009266:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8009268:	2300      	movs	r3, #0
 800926a:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_Start(pdev->pData);
 800926c:	687b      	ldr	r3, [r7, #4]
 800926e:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 8009272:	4618      	mov	r0, r3
 8009274:	f7f8 f963 	bl	800153e <HAL_PCD_Start>
 8009278:	4603      	mov	r3, r0
 800927a:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800927c:	7bfb      	ldrb	r3, [r7, #15]
 800927e:	4618      	mov	r0, r3
 8009280:	f000 f942 	bl	8009508 <USBD_Get_USB_Status>
 8009284:	4603      	mov	r3, r0
 8009286:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8009288:	7bbb      	ldrb	r3, [r7, #14]
}
 800928a:	4618      	mov	r0, r3
 800928c:	3710      	adds	r7, #16
 800928e:	46bd      	mov	sp, r7
 8009290:	bd80      	pop	{r7, pc}

08009292 <USBD_LL_OpenEP>:
  * @param  ep_type: Endpoint type
  * @param  ep_mps: Endpoint max packet size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_OpenEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t ep_type, uint16_t ep_mps)
{
 8009292:	b580      	push	{r7, lr}
 8009294:	b084      	sub	sp, #16
 8009296:	af00      	add	r7, sp, #0
 8009298:	6078      	str	r0, [r7, #4]
 800929a:	4608      	mov	r0, r1
 800929c:	4611      	mov	r1, r2
 800929e:	461a      	mov	r2, r3
 80092a0:	4603      	mov	r3, r0
 80092a2:	70fb      	strb	r3, [r7, #3]
 80092a4:	460b      	mov	r3, r1
 80092a6:	70bb      	strb	r3, [r7, #2]
 80092a8:	4613      	mov	r3, r2
 80092aa:	803b      	strh	r3, [r7, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80092ac:	2300      	movs	r3, #0
 80092ae:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80092b0:	2300      	movs	r3, #0
 80092b2:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Open(pdev->pData, ep_addr, ep_mps, ep_type);
 80092b4:	687b      	ldr	r3, [r7, #4]
 80092b6:	f8d3 02c8 	ldr.w	r0, [r3, #712]	; 0x2c8
 80092ba:	78bb      	ldrb	r3, [r7, #2]
 80092bc:	883a      	ldrh	r2, [r7, #0]
 80092be:	78f9      	ldrb	r1, [r7, #3]
 80092c0:	f7f8 fe61 	bl	8001f86 <HAL_PCD_EP_Open>
 80092c4:	4603      	mov	r3, r0
 80092c6:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 80092c8:	7bfb      	ldrb	r3, [r7, #15]
 80092ca:	4618      	mov	r0, r3
 80092cc:	f000 f91c 	bl	8009508 <USBD_Get_USB_Status>
 80092d0:	4603      	mov	r3, r0
 80092d2:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 80092d4:	7bbb      	ldrb	r3, [r7, #14]
}
 80092d6:	4618      	mov	r0, r3
 80092d8:	3710      	adds	r7, #16
 80092da:	46bd      	mov	sp, r7
 80092dc:	bd80      	pop	{r7, pc}

080092de <USBD_LL_CloseEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_CloseEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 80092de:	b580      	push	{r7, lr}
 80092e0:	b084      	sub	sp, #16
 80092e2:	af00      	add	r7, sp, #0
 80092e4:	6078      	str	r0, [r7, #4]
 80092e6:	460b      	mov	r3, r1
 80092e8:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80092ea:	2300      	movs	r3, #0
 80092ec:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80092ee:	2300      	movs	r3, #0
 80092f0:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Close(pdev->pData, ep_addr);
 80092f2:	687b      	ldr	r3, [r7, #4]
 80092f4:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 80092f8:	78fa      	ldrb	r2, [r7, #3]
 80092fa:	4611      	mov	r1, r2
 80092fc:	4618      	mov	r0, r3
 80092fe:	f7f8 feaa 	bl	8002056 <HAL_PCD_EP_Close>
 8009302:	4603      	mov	r3, r0
 8009304:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8009306:	7bfb      	ldrb	r3, [r7, #15]
 8009308:	4618      	mov	r0, r3
 800930a:	f000 f8fd 	bl	8009508 <USBD_Get_USB_Status>
 800930e:	4603      	mov	r3, r0
 8009310:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8009312:	7bbb      	ldrb	r3, [r7, #14]
}
 8009314:	4618      	mov	r0, r3
 8009316:	3710      	adds	r7, #16
 8009318:	46bd      	mov	sp, r7
 800931a:	bd80      	pop	{r7, pc}

0800931c <USBD_LL_StallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_StallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800931c:	b580      	push	{r7, lr}
 800931e:	b084      	sub	sp, #16
 8009320:	af00      	add	r7, sp, #0
 8009322:	6078      	str	r0, [r7, #4]
 8009324:	460b      	mov	r3, r1
 8009326:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8009328:	2300      	movs	r3, #0
 800932a:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800932c:	2300      	movs	r3, #0
 800932e:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_SetStall(pdev->pData, ep_addr);
 8009330:	687b      	ldr	r3, [r7, #4]
 8009332:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 8009336:	78fa      	ldrb	r2, [r7, #3]
 8009338:	4611      	mov	r1, r2
 800933a:	4618      	mov	r0, r3
 800933c:	f7f8 ff82 	bl	8002244 <HAL_PCD_EP_SetStall>
 8009340:	4603      	mov	r3, r0
 8009342:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8009344:	7bfb      	ldrb	r3, [r7, #15]
 8009346:	4618      	mov	r0, r3
 8009348:	f000 f8de 	bl	8009508 <USBD_Get_USB_Status>
 800934c:	4603      	mov	r3, r0
 800934e:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8009350:	7bbb      	ldrb	r3, [r7, #14]
}
 8009352:	4618      	mov	r0, r3
 8009354:	3710      	adds	r7, #16
 8009356:	46bd      	mov	sp, r7
 8009358:	bd80      	pop	{r7, pc}

0800935a <USBD_LL_ClearStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_ClearStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800935a:	b580      	push	{r7, lr}
 800935c:	b084      	sub	sp, #16
 800935e:	af00      	add	r7, sp, #0
 8009360:	6078      	str	r0, [r7, #4]
 8009362:	460b      	mov	r3, r1
 8009364:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8009366:	2300      	movs	r3, #0
 8009368:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800936a:	2300      	movs	r3, #0
 800936c:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_ClrStall(pdev->pData, ep_addr);
 800936e:	687b      	ldr	r3, [r7, #4]
 8009370:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 8009374:	78fa      	ldrb	r2, [r7, #3]
 8009376:	4611      	mov	r1, r2
 8009378:	4618      	mov	r0, r3
 800937a:	f7f8 ffc7 	bl	800230c <HAL_PCD_EP_ClrStall>
 800937e:	4603      	mov	r3, r0
 8009380:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8009382:	7bfb      	ldrb	r3, [r7, #15]
 8009384:	4618      	mov	r0, r3
 8009386:	f000 f8bf 	bl	8009508 <USBD_Get_USB_Status>
 800938a:	4603      	mov	r3, r0
 800938c:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800938e:	7bbb      	ldrb	r3, [r7, #14]
}
 8009390:	4618      	mov	r0, r3
 8009392:	3710      	adds	r7, #16
 8009394:	46bd      	mov	sp, r7
 8009396:	bd80      	pop	{r7, pc}

08009398 <USBD_LL_IsStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Stall (1: Yes, 0: No)
  */
uint8_t USBD_LL_IsStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8009398:	b480      	push	{r7}
 800939a:	b085      	sub	sp, #20
 800939c:	af00      	add	r7, sp, #0
 800939e:	6078      	str	r0, [r7, #4]
 80093a0:	460b      	mov	r3, r1
 80093a2:	70fb      	strb	r3, [r7, #3]
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef*) pdev->pData;
 80093a4:	687b      	ldr	r3, [r7, #4]
 80093a6:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 80093aa:	60fb      	str	r3, [r7, #12]

  if((ep_addr & 0x80) == 0x80)
 80093ac:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80093b0:	2b00      	cmp	r3, #0
 80093b2:	da0b      	bge.n	80093cc <USBD_LL_IsStallEP+0x34>
  {
    return hpcd->IN_ep[ep_addr & 0x7F].is_stall;
 80093b4:	78fb      	ldrb	r3, [r7, #3]
 80093b6:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 80093ba:	68f9      	ldr	r1, [r7, #12]
 80093bc:	4613      	mov	r3, r2
 80093be:	00db      	lsls	r3, r3, #3
 80093c0:	4413      	add	r3, r2
 80093c2:	009b      	lsls	r3, r3, #2
 80093c4:	440b      	add	r3, r1
 80093c6:	333e      	adds	r3, #62	; 0x3e
 80093c8:	781b      	ldrb	r3, [r3, #0]
 80093ca:	e00b      	b.n	80093e4 <USBD_LL_IsStallEP+0x4c>
  }
  else
  {
    return hpcd->OUT_ep[ep_addr & 0x7F].is_stall;
 80093cc:	78fb      	ldrb	r3, [r7, #3]
 80093ce:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 80093d2:	68f9      	ldr	r1, [r7, #12]
 80093d4:	4613      	mov	r3, r2
 80093d6:	00db      	lsls	r3, r3, #3
 80093d8:	4413      	add	r3, r2
 80093da:	009b      	lsls	r3, r3, #2
 80093dc:	440b      	add	r3, r1
 80093de:	f203 237e 	addw	r3, r3, #638	; 0x27e
 80093e2:	781b      	ldrb	r3, [r3, #0]
  }
}
 80093e4:	4618      	mov	r0, r3
 80093e6:	3714      	adds	r7, #20
 80093e8:	46bd      	mov	sp, r7
 80093ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80093ee:	4770      	bx	lr

080093f0 <USBD_LL_SetUSBAddress>:
  * @param  pdev: Device handle
  * @param  dev_addr: Device address
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_SetUSBAddress(USBD_HandleTypeDef *pdev, uint8_t dev_addr)
{
 80093f0:	b580      	push	{r7, lr}
 80093f2:	b084      	sub	sp, #16
 80093f4:	af00      	add	r7, sp, #0
 80093f6:	6078      	str	r0, [r7, #4]
 80093f8:	460b      	mov	r3, r1
 80093fa:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80093fc:	2300      	movs	r3, #0
 80093fe:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8009400:	2300      	movs	r3, #0
 8009402:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_SetAddress(pdev->pData, dev_addr);
 8009404:	687b      	ldr	r3, [r7, #4]
 8009406:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 800940a:	78fa      	ldrb	r2, [r7, #3]
 800940c:	4611      	mov	r1, r2
 800940e:	4618      	mov	r0, r3
 8009410:	f7f8 fd94 	bl	8001f3c <HAL_PCD_SetAddress>
 8009414:	4603      	mov	r3, r0
 8009416:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8009418:	7bfb      	ldrb	r3, [r7, #15]
 800941a:	4618      	mov	r0, r3
 800941c:	f000 f874 	bl	8009508 <USBD_Get_USB_Status>
 8009420:	4603      	mov	r3, r0
 8009422:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8009424:	7bbb      	ldrb	r3, [r7, #14]
}
 8009426:	4618      	mov	r0, r3
 8009428:	3710      	adds	r7, #16
 800942a:	46bd      	mov	sp, r7
 800942c:	bd80      	pop	{r7, pc}

0800942e <USBD_LL_Transmit>:
  * @param  pbuf: Pointer to data to be sent
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Transmit(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 800942e:	b580      	push	{r7, lr}
 8009430:	b086      	sub	sp, #24
 8009432:	af00      	add	r7, sp, #0
 8009434:	60f8      	str	r0, [r7, #12]
 8009436:	607a      	str	r2, [r7, #4]
 8009438:	603b      	str	r3, [r7, #0]
 800943a:	460b      	mov	r3, r1
 800943c:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800943e:	2300      	movs	r3, #0
 8009440:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8009442:	2300      	movs	r3, #0
 8009444:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Transmit(pdev->pData, ep_addr, pbuf, size);
 8009446:	68fb      	ldr	r3, [r7, #12]
 8009448:	f8d3 02c8 	ldr.w	r0, [r3, #712]	; 0x2c8
 800944c:	7af9      	ldrb	r1, [r7, #11]
 800944e:	683b      	ldr	r3, [r7, #0]
 8009450:	687a      	ldr	r2, [r7, #4]
 8009452:	f7f8 fead 	bl	80021b0 <HAL_PCD_EP_Transmit>
 8009456:	4603      	mov	r3, r0
 8009458:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800945a:	7dfb      	ldrb	r3, [r7, #23]
 800945c:	4618      	mov	r0, r3
 800945e:	f000 f853 	bl	8009508 <USBD_Get_USB_Status>
 8009462:	4603      	mov	r3, r0
 8009464:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 8009466:	7dbb      	ldrb	r3, [r7, #22]
}
 8009468:	4618      	mov	r0, r3
 800946a:	3718      	adds	r7, #24
 800946c:	46bd      	mov	sp, r7
 800946e:	bd80      	pop	{r7, pc}

08009470 <USBD_LL_PrepareReceive>:
  * @param  pbuf: Pointer to data to be received
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_PrepareReceive(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 8009470:	b580      	push	{r7, lr}
 8009472:	b086      	sub	sp, #24
 8009474:	af00      	add	r7, sp, #0
 8009476:	60f8      	str	r0, [r7, #12]
 8009478:	607a      	str	r2, [r7, #4]
 800947a:	603b      	str	r3, [r7, #0]
 800947c:	460b      	mov	r3, r1
 800947e:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8009480:	2300      	movs	r3, #0
 8009482:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8009484:	2300      	movs	r3, #0
 8009486:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Receive(pdev->pData, ep_addr, pbuf, size);
 8009488:	68fb      	ldr	r3, [r7, #12]
 800948a:	f8d3 02c8 	ldr.w	r0, [r3, #712]	; 0x2c8
 800948e:	7af9      	ldrb	r1, [r7, #11]
 8009490:	683b      	ldr	r3, [r7, #0]
 8009492:	687a      	ldr	r2, [r7, #4]
 8009494:	f7f8 fe29 	bl	80020ea <HAL_PCD_EP_Receive>
 8009498:	4603      	mov	r3, r0
 800949a:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800949c:	7dfb      	ldrb	r3, [r7, #23]
 800949e:	4618      	mov	r0, r3
 80094a0:	f000 f832 	bl	8009508 <USBD_Get_USB_Status>
 80094a4:	4603      	mov	r3, r0
 80094a6:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 80094a8:	7dbb      	ldrb	r3, [r7, #22]
}
 80094aa:	4618      	mov	r0, r3
 80094ac:	3718      	adds	r7, #24
 80094ae:	46bd      	mov	sp, r7
 80094b0:	bd80      	pop	{r7, pc}

080094b2 <USBD_LL_GetRxDataSize>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Received Data Size
  */
uint32_t USBD_LL_GetRxDataSize(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 80094b2:	b580      	push	{r7, lr}
 80094b4:	b082      	sub	sp, #8
 80094b6:	af00      	add	r7, sp, #0
 80094b8:	6078      	str	r0, [r7, #4]
 80094ba:	460b      	mov	r3, r1
 80094bc:	70fb      	strb	r3, [r7, #3]
  return HAL_PCD_EP_GetRxCount((PCD_HandleTypeDef*) pdev->pData, ep_addr);
 80094be:	687b      	ldr	r3, [r7, #4]
 80094c0:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 80094c4:	78fa      	ldrb	r2, [r7, #3]
 80094c6:	4611      	mov	r1, r2
 80094c8:	4618      	mov	r0, r3
 80094ca:	f7f8 fe59 	bl	8002180 <HAL_PCD_EP_GetRxCount>
 80094ce:	4603      	mov	r3, r0
}
 80094d0:	4618      	mov	r0, r3
 80094d2:	3708      	adds	r7, #8
 80094d4:	46bd      	mov	sp, r7
 80094d6:	bd80      	pop	{r7, pc}

080094d8 <USBD_static_malloc>:
  * @brief  Static single allocation.
  * @param  size: Size of allocated memory
  * @retval None
  */
void *USBD_static_malloc(uint32_t size)
{
 80094d8:	b480      	push	{r7}
 80094da:	b083      	sub	sp, #12
 80094dc:	af00      	add	r7, sp, #0
 80094de:	6078      	str	r0, [r7, #4]
  static uint32_t mem[(sizeof(USBD_CDC_HandleTypeDef)/4)+1];/* On 32-bit boundary */
  return mem;
 80094e0:	4b03      	ldr	r3, [pc, #12]	; (80094f0 <USBD_static_malloc+0x18>)
}
 80094e2:	4618      	mov	r0, r3
 80094e4:	370c      	adds	r7, #12
 80094e6:	46bd      	mov	sp, r7
 80094e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80094ec:	4770      	bx	lr
 80094ee:	bf00      	nop
 80094f0:	24001bfc 	.word	0x24001bfc

080094f4 <USBD_static_free>:
  * @brief  Dummy memory free
  * @param  p: Pointer to allocated  memory address
  * @retval None
  */
void USBD_static_free(void *p)
{
 80094f4:	b480      	push	{r7}
 80094f6:	b083      	sub	sp, #12
 80094f8:	af00      	add	r7, sp, #0
 80094fa:	6078      	str	r0, [r7, #4]

}
 80094fc:	bf00      	nop
 80094fe:	370c      	adds	r7, #12
 8009500:	46bd      	mov	sp, r7
 8009502:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009506:	4770      	bx	lr

08009508 <USBD_Get_USB_Status>:
  * @brief  Returns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBD_StatusTypeDef USBD_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 8009508:	b480      	push	{r7}
 800950a:	b085      	sub	sp, #20
 800950c:	af00      	add	r7, sp, #0
 800950e:	4603      	mov	r3, r0
 8009510:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8009512:	2300      	movs	r3, #0
 8009514:	73fb      	strb	r3, [r7, #15]

  switch (hal_status)
 8009516:	79fb      	ldrb	r3, [r7, #7]
 8009518:	2b03      	cmp	r3, #3
 800951a:	d817      	bhi.n	800954c <USBD_Get_USB_Status+0x44>
 800951c:	a201      	add	r2, pc, #4	; (adr r2, 8009524 <USBD_Get_USB_Status+0x1c>)
 800951e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009522:	bf00      	nop
 8009524:	08009535 	.word	0x08009535
 8009528:	0800953b 	.word	0x0800953b
 800952c:	08009541 	.word	0x08009541
 8009530:	08009547 	.word	0x08009547
  {
    case HAL_OK :
      usb_status = USBD_OK;
 8009534:	2300      	movs	r3, #0
 8009536:	73fb      	strb	r3, [r7, #15]
    break;
 8009538:	e00b      	b.n	8009552 <USBD_Get_USB_Status+0x4a>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 800953a:	2303      	movs	r3, #3
 800953c:	73fb      	strb	r3, [r7, #15]
    break;
 800953e:	e008      	b.n	8009552 <USBD_Get_USB_Status+0x4a>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 8009540:	2301      	movs	r3, #1
 8009542:	73fb      	strb	r3, [r7, #15]
    break;
 8009544:	e005      	b.n	8009552 <USBD_Get_USB_Status+0x4a>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 8009546:	2303      	movs	r3, #3
 8009548:	73fb      	strb	r3, [r7, #15]
    break;
 800954a:	e002      	b.n	8009552 <USBD_Get_USB_Status+0x4a>
    default :
      usb_status = USBD_FAIL;
 800954c:	2303      	movs	r3, #3
 800954e:	73fb      	strb	r3, [r7, #15]
    break;
 8009550:	bf00      	nop
  }
  return usb_status;
 8009552:	7bfb      	ldrb	r3, [r7, #15]
}
 8009554:	4618      	mov	r0, r3
 8009556:	3714      	adds	r7, #20
 8009558:	46bd      	mov	sp, r7
 800955a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800955e:	4770      	bx	lr

08009560 <__errno>:
 8009560:	4b01      	ldr	r3, [pc, #4]	; (8009568 <__errno+0x8>)
 8009562:	6818      	ldr	r0, [r3, #0]
 8009564:	4770      	bx	lr
 8009566:	bf00      	nop
 8009568:	24000100 	.word	0x24000100

0800956c <__libc_init_array>:
 800956c:	b570      	push	{r4, r5, r6, lr}
 800956e:	4d0d      	ldr	r5, [pc, #52]	; (80095a4 <__libc_init_array+0x38>)
 8009570:	4c0d      	ldr	r4, [pc, #52]	; (80095a8 <__libc_init_array+0x3c>)
 8009572:	1b64      	subs	r4, r4, r5
 8009574:	10a4      	asrs	r4, r4, #2
 8009576:	2600      	movs	r6, #0
 8009578:	42a6      	cmp	r6, r4
 800957a:	d109      	bne.n	8009590 <__libc_init_array+0x24>
 800957c:	4d0b      	ldr	r5, [pc, #44]	; (80095ac <__libc_init_array+0x40>)
 800957e:	4c0c      	ldr	r4, [pc, #48]	; (80095b0 <__libc_init_array+0x44>)
 8009580:	f000 fc8e 	bl	8009ea0 <_init>
 8009584:	1b64      	subs	r4, r4, r5
 8009586:	10a4      	asrs	r4, r4, #2
 8009588:	2600      	movs	r6, #0
 800958a:	42a6      	cmp	r6, r4
 800958c:	d105      	bne.n	800959a <__libc_init_array+0x2e>
 800958e:	bd70      	pop	{r4, r5, r6, pc}
 8009590:	f855 3b04 	ldr.w	r3, [r5], #4
 8009594:	4798      	blx	r3
 8009596:	3601      	adds	r6, #1
 8009598:	e7ee      	b.n	8009578 <__libc_init_array+0xc>
 800959a:	f855 3b04 	ldr.w	r3, [r5], #4
 800959e:	4798      	blx	r3
 80095a0:	3601      	adds	r6, #1
 80095a2:	e7f2      	b.n	800958a <__libc_init_array+0x1e>
 80095a4:	08009f68 	.word	0x08009f68
 80095a8:	08009f68 	.word	0x08009f68
 80095ac:	08009f68 	.word	0x08009f68
 80095b0:	08009f6c 	.word	0x08009f6c

080095b4 <memset>:
 80095b4:	4402      	add	r2, r0
 80095b6:	4603      	mov	r3, r0
 80095b8:	4293      	cmp	r3, r2
 80095ba:	d100      	bne.n	80095be <memset+0xa>
 80095bc:	4770      	bx	lr
 80095be:	f803 1b01 	strb.w	r1, [r3], #1
 80095c2:	e7f9      	b.n	80095b8 <memset+0x4>

080095c4 <siprintf>:
 80095c4:	b40e      	push	{r1, r2, r3}
 80095c6:	b500      	push	{lr}
 80095c8:	b09c      	sub	sp, #112	; 0x70
 80095ca:	ab1d      	add	r3, sp, #116	; 0x74
 80095cc:	9002      	str	r0, [sp, #8]
 80095ce:	9006      	str	r0, [sp, #24]
 80095d0:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 80095d4:	4809      	ldr	r0, [pc, #36]	; (80095fc <siprintf+0x38>)
 80095d6:	9107      	str	r1, [sp, #28]
 80095d8:	9104      	str	r1, [sp, #16]
 80095da:	4909      	ldr	r1, [pc, #36]	; (8009600 <siprintf+0x3c>)
 80095dc:	f853 2b04 	ldr.w	r2, [r3], #4
 80095e0:	9105      	str	r1, [sp, #20]
 80095e2:	6800      	ldr	r0, [r0, #0]
 80095e4:	9301      	str	r3, [sp, #4]
 80095e6:	a902      	add	r1, sp, #8
 80095e8:	f000 f868 	bl	80096bc <_svfiprintf_r>
 80095ec:	9b02      	ldr	r3, [sp, #8]
 80095ee:	2200      	movs	r2, #0
 80095f0:	701a      	strb	r2, [r3, #0]
 80095f2:	b01c      	add	sp, #112	; 0x70
 80095f4:	f85d eb04 	ldr.w	lr, [sp], #4
 80095f8:	b003      	add	sp, #12
 80095fa:	4770      	bx	lr
 80095fc:	24000100 	.word	0x24000100
 8009600:	ffff0208 	.word	0xffff0208

08009604 <__ssputs_r>:
 8009604:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8009608:	688e      	ldr	r6, [r1, #8]
 800960a:	429e      	cmp	r6, r3
 800960c:	4682      	mov	sl, r0
 800960e:	460c      	mov	r4, r1
 8009610:	4690      	mov	r8, r2
 8009612:	461f      	mov	r7, r3
 8009614:	d838      	bhi.n	8009688 <__ssputs_r+0x84>
 8009616:	898a      	ldrh	r2, [r1, #12]
 8009618:	f412 6f90 	tst.w	r2, #1152	; 0x480
 800961c:	d032      	beq.n	8009684 <__ssputs_r+0x80>
 800961e:	6825      	ldr	r5, [r4, #0]
 8009620:	6909      	ldr	r1, [r1, #16]
 8009622:	eba5 0901 	sub.w	r9, r5, r1
 8009626:	6965      	ldr	r5, [r4, #20]
 8009628:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800962c:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8009630:	3301      	adds	r3, #1
 8009632:	444b      	add	r3, r9
 8009634:	106d      	asrs	r5, r5, #1
 8009636:	429d      	cmp	r5, r3
 8009638:	bf38      	it	cc
 800963a:	461d      	movcc	r5, r3
 800963c:	0553      	lsls	r3, r2, #21
 800963e:	d531      	bpl.n	80096a4 <__ssputs_r+0xa0>
 8009640:	4629      	mov	r1, r5
 8009642:	f000 fb63 	bl	8009d0c <_malloc_r>
 8009646:	4606      	mov	r6, r0
 8009648:	b950      	cbnz	r0, 8009660 <__ssputs_r+0x5c>
 800964a:	230c      	movs	r3, #12
 800964c:	f8ca 3000 	str.w	r3, [sl]
 8009650:	89a3      	ldrh	r3, [r4, #12]
 8009652:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8009656:	81a3      	strh	r3, [r4, #12]
 8009658:	f04f 30ff 	mov.w	r0, #4294967295
 800965c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8009660:	6921      	ldr	r1, [r4, #16]
 8009662:	464a      	mov	r2, r9
 8009664:	f000 fabe 	bl	8009be4 <memcpy>
 8009668:	89a3      	ldrh	r3, [r4, #12]
 800966a:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 800966e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8009672:	81a3      	strh	r3, [r4, #12]
 8009674:	6126      	str	r6, [r4, #16]
 8009676:	6165      	str	r5, [r4, #20]
 8009678:	444e      	add	r6, r9
 800967a:	eba5 0509 	sub.w	r5, r5, r9
 800967e:	6026      	str	r6, [r4, #0]
 8009680:	60a5      	str	r5, [r4, #8]
 8009682:	463e      	mov	r6, r7
 8009684:	42be      	cmp	r6, r7
 8009686:	d900      	bls.n	800968a <__ssputs_r+0x86>
 8009688:	463e      	mov	r6, r7
 800968a:	6820      	ldr	r0, [r4, #0]
 800968c:	4632      	mov	r2, r6
 800968e:	4641      	mov	r1, r8
 8009690:	f000 fab6 	bl	8009c00 <memmove>
 8009694:	68a3      	ldr	r3, [r4, #8]
 8009696:	1b9b      	subs	r3, r3, r6
 8009698:	60a3      	str	r3, [r4, #8]
 800969a:	6823      	ldr	r3, [r4, #0]
 800969c:	4433      	add	r3, r6
 800969e:	6023      	str	r3, [r4, #0]
 80096a0:	2000      	movs	r0, #0
 80096a2:	e7db      	b.n	800965c <__ssputs_r+0x58>
 80096a4:	462a      	mov	r2, r5
 80096a6:	f000 fba5 	bl	8009df4 <_realloc_r>
 80096aa:	4606      	mov	r6, r0
 80096ac:	2800      	cmp	r0, #0
 80096ae:	d1e1      	bne.n	8009674 <__ssputs_r+0x70>
 80096b0:	6921      	ldr	r1, [r4, #16]
 80096b2:	4650      	mov	r0, sl
 80096b4:	f000 fabe 	bl	8009c34 <_free_r>
 80096b8:	e7c7      	b.n	800964a <__ssputs_r+0x46>
	...

080096bc <_svfiprintf_r>:
 80096bc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80096c0:	4698      	mov	r8, r3
 80096c2:	898b      	ldrh	r3, [r1, #12]
 80096c4:	061b      	lsls	r3, r3, #24
 80096c6:	b09d      	sub	sp, #116	; 0x74
 80096c8:	4607      	mov	r7, r0
 80096ca:	460d      	mov	r5, r1
 80096cc:	4614      	mov	r4, r2
 80096ce:	d50e      	bpl.n	80096ee <_svfiprintf_r+0x32>
 80096d0:	690b      	ldr	r3, [r1, #16]
 80096d2:	b963      	cbnz	r3, 80096ee <_svfiprintf_r+0x32>
 80096d4:	2140      	movs	r1, #64	; 0x40
 80096d6:	f000 fb19 	bl	8009d0c <_malloc_r>
 80096da:	6028      	str	r0, [r5, #0]
 80096dc:	6128      	str	r0, [r5, #16]
 80096de:	b920      	cbnz	r0, 80096ea <_svfiprintf_r+0x2e>
 80096e0:	230c      	movs	r3, #12
 80096e2:	603b      	str	r3, [r7, #0]
 80096e4:	f04f 30ff 	mov.w	r0, #4294967295
 80096e8:	e0d1      	b.n	800988e <_svfiprintf_r+0x1d2>
 80096ea:	2340      	movs	r3, #64	; 0x40
 80096ec:	616b      	str	r3, [r5, #20]
 80096ee:	2300      	movs	r3, #0
 80096f0:	9309      	str	r3, [sp, #36]	; 0x24
 80096f2:	2320      	movs	r3, #32
 80096f4:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 80096f8:	f8cd 800c 	str.w	r8, [sp, #12]
 80096fc:	2330      	movs	r3, #48	; 0x30
 80096fe:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 80098a8 <_svfiprintf_r+0x1ec>
 8009702:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8009706:	f04f 0901 	mov.w	r9, #1
 800970a:	4623      	mov	r3, r4
 800970c:	469a      	mov	sl, r3
 800970e:	f813 2b01 	ldrb.w	r2, [r3], #1
 8009712:	b10a      	cbz	r2, 8009718 <_svfiprintf_r+0x5c>
 8009714:	2a25      	cmp	r2, #37	; 0x25
 8009716:	d1f9      	bne.n	800970c <_svfiprintf_r+0x50>
 8009718:	ebba 0b04 	subs.w	fp, sl, r4
 800971c:	d00b      	beq.n	8009736 <_svfiprintf_r+0x7a>
 800971e:	465b      	mov	r3, fp
 8009720:	4622      	mov	r2, r4
 8009722:	4629      	mov	r1, r5
 8009724:	4638      	mov	r0, r7
 8009726:	f7ff ff6d 	bl	8009604 <__ssputs_r>
 800972a:	3001      	adds	r0, #1
 800972c:	f000 80aa 	beq.w	8009884 <_svfiprintf_r+0x1c8>
 8009730:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8009732:	445a      	add	r2, fp
 8009734:	9209      	str	r2, [sp, #36]	; 0x24
 8009736:	f89a 3000 	ldrb.w	r3, [sl]
 800973a:	2b00      	cmp	r3, #0
 800973c:	f000 80a2 	beq.w	8009884 <_svfiprintf_r+0x1c8>
 8009740:	2300      	movs	r3, #0
 8009742:	f04f 32ff 	mov.w	r2, #4294967295
 8009746:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800974a:	f10a 0a01 	add.w	sl, sl, #1
 800974e:	9304      	str	r3, [sp, #16]
 8009750:	9307      	str	r3, [sp, #28]
 8009752:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8009756:	931a      	str	r3, [sp, #104]	; 0x68
 8009758:	4654      	mov	r4, sl
 800975a:	2205      	movs	r2, #5
 800975c:	f814 1b01 	ldrb.w	r1, [r4], #1
 8009760:	4851      	ldr	r0, [pc, #324]	; (80098a8 <_svfiprintf_r+0x1ec>)
 8009762:	f7f6 fdc5 	bl	80002f0 <memchr>
 8009766:	9a04      	ldr	r2, [sp, #16]
 8009768:	b9d8      	cbnz	r0, 80097a2 <_svfiprintf_r+0xe6>
 800976a:	06d0      	lsls	r0, r2, #27
 800976c:	bf44      	itt	mi
 800976e:	2320      	movmi	r3, #32
 8009770:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8009774:	0711      	lsls	r1, r2, #28
 8009776:	bf44      	itt	mi
 8009778:	232b      	movmi	r3, #43	; 0x2b
 800977a:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800977e:	f89a 3000 	ldrb.w	r3, [sl]
 8009782:	2b2a      	cmp	r3, #42	; 0x2a
 8009784:	d015      	beq.n	80097b2 <_svfiprintf_r+0xf6>
 8009786:	9a07      	ldr	r2, [sp, #28]
 8009788:	4654      	mov	r4, sl
 800978a:	2000      	movs	r0, #0
 800978c:	f04f 0c0a 	mov.w	ip, #10
 8009790:	4621      	mov	r1, r4
 8009792:	f811 3b01 	ldrb.w	r3, [r1], #1
 8009796:	3b30      	subs	r3, #48	; 0x30
 8009798:	2b09      	cmp	r3, #9
 800979a:	d94e      	bls.n	800983a <_svfiprintf_r+0x17e>
 800979c:	b1b0      	cbz	r0, 80097cc <_svfiprintf_r+0x110>
 800979e:	9207      	str	r2, [sp, #28]
 80097a0:	e014      	b.n	80097cc <_svfiprintf_r+0x110>
 80097a2:	eba0 0308 	sub.w	r3, r0, r8
 80097a6:	fa09 f303 	lsl.w	r3, r9, r3
 80097aa:	4313      	orrs	r3, r2
 80097ac:	9304      	str	r3, [sp, #16]
 80097ae:	46a2      	mov	sl, r4
 80097b0:	e7d2      	b.n	8009758 <_svfiprintf_r+0x9c>
 80097b2:	9b03      	ldr	r3, [sp, #12]
 80097b4:	1d19      	adds	r1, r3, #4
 80097b6:	681b      	ldr	r3, [r3, #0]
 80097b8:	9103      	str	r1, [sp, #12]
 80097ba:	2b00      	cmp	r3, #0
 80097bc:	bfbb      	ittet	lt
 80097be:	425b      	neglt	r3, r3
 80097c0:	f042 0202 	orrlt.w	r2, r2, #2
 80097c4:	9307      	strge	r3, [sp, #28]
 80097c6:	9307      	strlt	r3, [sp, #28]
 80097c8:	bfb8      	it	lt
 80097ca:	9204      	strlt	r2, [sp, #16]
 80097cc:	7823      	ldrb	r3, [r4, #0]
 80097ce:	2b2e      	cmp	r3, #46	; 0x2e
 80097d0:	d10c      	bne.n	80097ec <_svfiprintf_r+0x130>
 80097d2:	7863      	ldrb	r3, [r4, #1]
 80097d4:	2b2a      	cmp	r3, #42	; 0x2a
 80097d6:	d135      	bne.n	8009844 <_svfiprintf_r+0x188>
 80097d8:	9b03      	ldr	r3, [sp, #12]
 80097da:	1d1a      	adds	r2, r3, #4
 80097dc:	681b      	ldr	r3, [r3, #0]
 80097de:	9203      	str	r2, [sp, #12]
 80097e0:	2b00      	cmp	r3, #0
 80097e2:	bfb8      	it	lt
 80097e4:	f04f 33ff 	movlt.w	r3, #4294967295
 80097e8:	3402      	adds	r4, #2
 80097ea:	9305      	str	r3, [sp, #20]
 80097ec:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 80098b8 <_svfiprintf_r+0x1fc>
 80097f0:	7821      	ldrb	r1, [r4, #0]
 80097f2:	2203      	movs	r2, #3
 80097f4:	4650      	mov	r0, sl
 80097f6:	f7f6 fd7b 	bl	80002f0 <memchr>
 80097fa:	b140      	cbz	r0, 800980e <_svfiprintf_r+0x152>
 80097fc:	2340      	movs	r3, #64	; 0x40
 80097fe:	eba0 000a 	sub.w	r0, r0, sl
 8009802:	fa03 f000 	lsl.w	r0, r3, r0
 8009806:	9b04      	ldr	r3, [sp, #16]
 8009808:	4303      	orrs	r3, r0
 800980a:	3401      	adds	r4, #1
 800980c:	9304      	str	r3, [sp, #16]
 800980e:	f814 1b01 	ldrb.w	r1, [r4], #1
 8009812:	4826      	ldr	r0, [pc, #152]	; (80098ac <_svfiprintf_r+0x1f0>)
 8009814:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8009818:	2206      	movs	r2, #6
 800981a:	f7f6 fd69 	bl	80002f0 <memchr>
 800981e:	2800      	cmp	r0, #0
 8009820:	d038      	beq.n	8009894 <_svfiprintf_r+0x1d8>
 8009822:	4b23      	ldr	r3, [pc, #140]	; (80098b0 <_svfiprintf_r+0x1f4>)
 8009824:	bb1b      	cbnz	r3, 800986e <_svfiprintf_r+0x1b2>
 8009826:	9b03      	ldr	r3, [sp, #12]
 8009828:	3307      	adds	r3, #7
 800982a:	f023 0307 	bic.w	r3, r3, #7
 800982e:	3308      	adds	r3, #8
 8009830:	9303      	str	r3, [sp, #12]
 8009832:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8009834:	4433      	add	r3, r6
 8009836:	9309      	str	r3, [sp, #36]	; 0x24
 8009838:	e767      	b.n	800970a <_svfiprintf_r+0x4e>
 800983a:	fb0c 3202 	mla	r2, ip, r2, r3
 800983e:	460c      	mov	r4, r1
 8009840:	2001      	movs	r0, #1
 8009842:	e7a5      	b.n	8009790 <_svfiprintf_r+0xd4>
 8009844:	2300      	movs	r3, #0
 8009846:	3401      	adds	r4, #1
 8009848:	9305      	str	r3, [sp, #20]
 800984a:	4619      	mov	r1, r3
 800984c:	f04f 0c0a 	mov.w	ip, #10
 8009850:	4620      	mov	r0, r4
 8009852:	f810 2b01 	ldrb.w	r2, [r0], #1
 8009856:	3a30      	subs	r2, #48	; 0x30
 8009858:	2a09      	cmp	r2, #9
 800985a:	d903      	bls.n	8009864 <_svfiprintf_r+0x1a8>
 800985c:	2b00      	cmp	r3, #0
 800985e:	d0c5      	beq.n	80097ec <_svfiprintf_r+0x130>
 8009860:	9105      	str	r1, [sp, #20]
 8009862:	e7c3      	b.n	80097ec <_svfiprintf_r+0x130>
 8009864:	fb0c 2101 	mla	r1, ip, r1, r2
 8009868:	4604      	mov	r4, r0
 800986a:	2301      	movs	r3, #1
 800986c:	e7f0      	b.n	8009850 <_svfiprintf_r+0x194>
 800986e:	ab03      	add	r3, sp, #12
 8009870:	9300      	str	r3, [sp, #0]
 8009872:	462a      	mov	r2, r5
 8009874:	4b0f      	ldr	r3, [pc, #60]	; (80098b4 <_svfiprintf_r+0x1f8>)
 8009876:	a904      	add	r1, sp, #16
 8009878:	4638      	mov	r0, r7
 800987a:	f3af 8000 	nop.w
 800987e:	1c42      	adds	r2, r0, #1
 8009880:	4606      	mov	r6, r0
 8009882:	d1d6      	bne.n	8009832 <_svfiprintf_r+0x176>
 8009884:	89ab      	ldrh	r3, [r5, #12]
 8009886:	065b      	lsls	r3, r3, #25
 8009888:	f53f af2c 	bmi.w	80096e4 <_svfiprintf_r+0x28>
 800988c:	9809      	ldr	r0, [sp, #36]	; 0x24
 800988e:	b01d      	add	sp, #116	; 0x74
 8009890:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009894:	ab03      	add	r3, sp, #12
 8009896:	9300      	str	r3, [sp, #0]
 8009898:	462a      	mov	r2, r5
 800989a:	4b06      	ldr	r3, [pc, #24]	; (80098b4 <_svfiprintf_r+0x1f8>)
 800989c:	a904      	add	r1, sp, #16
 800989e:	4638      	mov	r0, r7
 80098a0:	f000 f87a 	bl	8009998 <_printf_i>
 80098a4:	e7eb      	b.n	800987e <_svfiprintf_r+0x1c2>
 80098a6:	bf00      	nop
 80098a8:	08009f34 	.word	0x08009f34
 80098ac:	08009f3e 	.word	0x08009f3e
 80098b0:	00000000 	.word	0x00000000
 80098b4:	08009605 	.word	0x08009605
 80098b8:	08009f3a 	.word	0x08009f3a

080098bc <_printf_common>:
 80098bc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80098c0:	4616      	mov	r6, r2
 80098c2:	4699      	mov	r9, r3
 80098c4:	688a      	ldr	r2, [r1, #8]
 80098c6:	690b      	ldr	r3, [r1, #16]
 80098c8:	f8dd 8020 	ldr.w	r8, [sp, #32]
 80098cc:	4293      	cmp	r3, r2
 80098ce:	bfb8      	it	lt
 80098d0:	4613      	movlt	r3, r2
 80098d2:	6033      	str	r3, [r6, #0]
 80098d4:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 80098d8:	4607      	mov	r7, r0
 80098da:	460c      	mov	r4, r1
 80098dc:	b10a      	cbz	r2, 80098e2 <_printf_common+0x26>
 80098de:	3301      	adds	r3, #1
 80098e0:	6033      	str	r3, [r6, #0]
 80098e2:	6823      	ldr	r3, [r4, #0]
 80098e4:	0699      	lsls	r1, r3, #26
 80098e6:	bf42      	ittt	mi
 80098e8:	6833      	ldrmi	r3, [r6, #0]
 80098ea:	3302      	addmi	r3, #2
 80098ec:	6033      	strmi	r3, [r6, #0]
 80098ee:	6825      	ldr	r5, [r4, #0]
 80098f0:	f015 0506 	ands.w	r5, r5, #6
 80098f4:	d106      	bne.n	8009904 <_printf_common+0x48>
 80098f6:	f104 0a19 	add.w	sl, r4, #25
 80098fa:	68e3      	ldr	r3, [r4, #12]
 80098fc:	6832      	ldr	r2, [r6, #0]
 80098fe:	1a9b      	subs	r3, r3, r2
 8009900:	42ab      	cmp	r3, r5
 8009902:	dc26      	bgt.n	8009952 <_printf_common+0x96>
 8009904:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8009908:	1e13      	subs	r3, r2, #0
 800990a:	6822      	ldr	r2, [r4, #0]
 800990c:	bf18      	it	ne
 800990e:	2301      	movne	r3, #1
 8009910:	0692      	lsls	r2, r2, #26
 8009912:	d42b      	bmi.n	800996c <_printf_common+0xb0>
 8009914:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8009918:	4649      	mov	r1, r9
 800991a:	4638      	mov	r0, r7
 800991c:	47c0      	blx	r8
 800991e:	3001      	adds	r0, #1
 8009920:	d01e      	beq.n	8009960 <_printf_common+0xa4>
 8009922:	6823      	ldr	r3, [r4, #0]
 8009924:	68e5      	ldr	r5, [r4, #12]
 8009926:	6832      	ldr	r2, [r6, #0]
 8009928:	f003 0306 	and.w	r3, r3, #6
 800992c:	2b04      	cmp	r3, #4
 800992e:	bf08      	it	eq
 8009930:	1aad      	subeq	r5, r5, r2
 8009932:	68a3      	ldr	r3, [r4, #8]
 8009934:	6922      	ldr	r2, [r4, #16]
 8009936:	bf0c      	ite	eq
 8009938:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800993c:	2500      	movne	r5, #0
 800993e:	4293      	cmp	r3, r2
 8009940:	bfc4      	itt	gt
 8009942:	1a9b      	subgt	r3, r3, r2
 8009944:	18ed      	addgt	r5, r5, r3
 8009946:	2600      	movs	r6, #0
 8009948:	341a      	adds	r4, #26
 800994a:	42b5      	cmp	r5, r6
 800994c:	d11a      	bne.n	8009984 <_printf_common+0xc8>
 800994e:	2000      	movs	r0, #0
 8009950:	e008      	b.n	8009964 <_printf_common+0xa8>
 8009952:	2301      	movs	r3, #1
 8009954:	4652      	mov	r2, sl
 8009956:	4649      	mov	r1, r9
 8009958:	4638      	mov	r0, r7
 800995a:	47c0      	blx	r8
 800995c:	3001      	adds	r0, #1
 800995e:	d103      	bne.n	8009968 <_printf_common+0xac>
 8009960:	f04f 30ff 	mov.w	r0, #4294967295
 8009964:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8009968:	3501      	adds	r5, #1
 800996a:	e7c6      	b.n	80098fa <_printf_common+0x3e>
 800996c:	18e1      	adds	r1, r4, r3
 800996e:	1c5a      	adds	r2, r3, #1
 8009970:	2030      	movs	r0, #48	; 0x30
 8009972:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8009976:	4422      	add	r2, r4
 8009978:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 800997c:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8009980:	3302      	adds	r3, #2
 8009982:	e7c7      	b.n	8009914 <_printf_common+0x58>
 8009984:	2301      	movs	r3, #1
 8009986:	4622      	mov	r2, r4
 8009988:	4649      	mov	r1, r9
 800998a:	4638      	mov	r0, r7
 800998c:	47c0      	blx	r8
 800998e:	3001      	adds	r0, #1
 8009990:	d0e6      	beq.n	8009960 <_printf_common+0xa4>
 8009992:	3601      	adds	r6, #1
 8009994:	e7d9      	b.n	800994a <_printf_common+0x8e>
	...

08009998 <_printf_i>:
 8009998:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800999c:	7e0f      	ldrb	r7, [r1, #24]
 800999e:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 80099a0:	2f78      	cmp	r7, #120	; 0x78
 80099a2:	4691      	mov	r9, r2
 80099a4:	4680      	mov	r8, r0
 80099a6:	460c      	mov	r4, r1
 80099a8:	469a      	mov	sl, r3
 80099aa:	f101 0243 	add.w	r2, r1, #67	; 0x43
 80099ae:	d807      	bhi.n	80099c0 <_printf_i+0x28>
 80099b0:	2f62      	cmp	r7, #98	; 0x62
 80099b2:	d80a      	bhi.n	80099ca <_printf_i+0x32>
 80099b4:	2f00      	cmp	r7, #0
 80099b6:	f000 80d8 	beq.w	8009b6a <_printf_i+0x1d2>
 80099ba:	2f58      	cmp	r7, #88	; 0x58
 80099bc:	f000 80a3 	beq.w	8009b06 <_printf_i+0x16e>
 80099c0:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80099c4:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 80099c8:	e03a      	b.n	8009a40 <_printf_i+0xa8>
 80099ca:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 80099ce:	2b15      	cmp	r3, #21
 80099d0:	d8f6      	bhi.n	80099c0 <_printf_i+0x28>
 80099d2:	a101      	add	r1, pc, #4	; (adr r1, 80099d8 <_printf_i+0x40>)
 80099d4:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 80099d8:	08009a31 	.word	0x08009a31
 80099dc:	08009a45 	.word	0x08009a45
 80099e0:	080099c1 	.word	0x080099c1
 80099e4:	080099c1 	.word	0x080099c1
 80099e8:	080099c1 	.word	0x080099c1
 80099ec:	080099c1 	.word	0x080099c1
 80099f0:	08009a45 	.word	0x08009a45
 80099f4:	080099c1 	.word	0x080099c1
 80099f8:	080099c1 	.word	0x080099c1
 80099fc:	080099c1 	.word	0x080099c1
 8009a00:	080099c1 	.word	0x080099c1
 8009a04:	08009b51 	.word	0x08009b51
 8009a08:	08009a75 	.word	0x08009a75
 8009a0c:	08009b33 	.word	0x08009b33
 8009a10:	080099c1 	.word	0x080099c1
 8009a14:	080099c1 	.word	0x080099c1
 8009a18:	08009b73 	.word	0x08009b73
 8009a1c:	080099c1 	.word	0x080099c1
 8009a20:	08009a75 	.word	0x08009a75
 8009a24:	080099c1 	.word	0x080099c1
 8009a28:	080099c1 	.word	0x080099c1
 8009a2c:	08009b3b 	.word	0x08009b3b
 8009a30:	682b      	ldr	r3, [r5, #0]
 8009a32:	1d1a      	adds	r2, r3, #4
 8009a34:	681b      	ldr	r3, [r3, #0]
 8009a36:	602a      	str	r2, [r5, #0]
 8009a38:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8009a3c:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8009a40:	2301      	movs	r3, #1
 8009a42:	e0a3      	b.n	8009b8c <_printf_i+0x1f4>
 8009a44:	6820      	ldr	r0, [r4, #0]
 8009a46:	6829      	ldr	r1, [r5, #0]
 8009a48:	0606      	lsls	r6, r0, #24
 8009a4a:	f101 0304 	add.w	r3, r1, #4
 8009a4e:	d50a      	bpl.n	8009a66 <_printf_i+0xce>
 8009a50:	680e      	ldr	r6, [r1, #0]
 8009a52:	602b      	str	r3, [r5, #0]
 8009a54:	2e00      	cmp	r6, #0
 8009a56:	da03      	bge.n	8009a60 <_printf_i+0xc8>
 8009a58:	232d      	movs	r3, #45	; 0x2d
 8009a5a:	4276      	negs	r6, r6
 8009a5c:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8009a60:	485e      	ldr	r0, [pc, #376]	; (8009bdc <_printf_i+0x244>)
 8009a62:	230a      	movs	r3, #10
 8009a64:	e019      	b.n	8009a9a <_printf_i+0x102>
 8009a66:	680e      	ldr	r6, [r1, #0]
 8009a68:	602b      	str	r3, [r5, #0]
 8009a6a:	f010 0f40 	tst.w	r0, #64	; 0x40
 8009a6e:	bf18      	it	ne
 8009a70:	b236      	sxthne	r6, r6
 8009a72:	e7ef      	b.n	8009a54 <_printf_i+0xbc>
 8009a74:	682b      	ldr	r3, [r5, #0]
 8009a76:	6820      	ldr	r0, [r4, #0]
 8009a78:	1d19      	adds	r1, r3, #4
 8009a7a:	6029      	str	r1, [r5, #0]
 8009a7c:	0601      	lsls	r1, r0, #24
 8009a7e:	d501      	bpl.n	8009a84 <_printf_i+0xec>
 8009a80:	681e      	ldr	r6, [r3, #0]
 8009a82:	e002      	b.n	8009a8a <_printf_i+0xf2>
 8009a84:	0646      	lsls	r6, r0, #25
 8009a86:	d5fb      	bpl.n	8009a80 <_printf_i+0xe8>
 8009a88:	881e      	ldrh	r6, [r3, #0]
 8009a8a:	4854      	ldr	r0, [pc, #336]	; (8009bdc <_printf_i+0x244>)
 8009a8c:	2f6f      	cmp	r7, #111	; 0x6f
 8009a8e:	bf0c      	ite	eq
 8009a90:	2308      	moveq	r3, #8
 8009a92:	230a      	movne	r3, #10
 8009a94:	2100      	movs	r1, #0
 8009a96:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8009a9a:	6865      	ldr	r5, [r4, #4]
 8009a9c:	60a5      	str	r5, [r4, #8]
 8009a9e:	2d00      	cmp	r5, #0
 8009aa0:	bfa2      	ittt	ge
 8009aa2:	6821      	ldrge	r1, [r4, #0]
 8009aa4:	f021 0104 	bicge.w	r1, r1, #4
 8009aa8:	6021      	strge	r1, [r4, #0]
 8009aaa:	b90e      	cbnz	r6, 8009ab0 <_printf_i+0x118>
 8009aac:	2d00      	cmp	r5, #0
 8009aae:	d04d      	beq.n	8009b4c <_printf_i+0x1b4>
 8009ab0:	4615      	mov	r5, r2
 8009ab2:	fbb6 f1f3 	udiv	r1, r6, r3
 8009ab6:	fb03 6711 	mls	r7, r3, r1, r6
 8009aba:	5dc7      	ldrb	r7, [r0, r7]
 8009abc:	f805 7d01 	strb.w	r7, [r5, #-1]!
 8009ac0:	4637      	mov	r7, r6
 8009ac2:	42bb      	cmp	r3, r7
 8009ac4:	460e      	mov	r6, r1
 8009ac6:	d9f4      	bls.n	8009ab2 <_printf_i+0x11a>
 8009ac8:	2b08      	cmp	r3, #8
 8009aca:	d10b      	bne.n	8009ae4 <_printf_i+0x14c>
 8009acc:	6823      	ldr	r3, [r4, #0]
 8009ace:	07de      	lsls	r6, r3, #31
 8009ad0:	d508      	bpl.n	8009ae4 <_printf_i+0x14c>
 8009ad2:	6923      	ldr	r3, [r4, #16]
 8009ad4:	6861      	ldr	r1, [r4, #4]
 8009ad6:	4299      	cmp	r1, r3
 8009ad8:	bfde      	ittt	le
 8009ada:	2330      	movle	r3, #48	; 0x30
 8009adc:	f805 3c01 	strble.w	r3, [r5, #-1]
 8009ae0:	f105 35ff 	addle.w	r5, r5, #4294967295
 8009ae4:	1b52      	subs	r2, r2, r5
 8009ae6:	6122      	str	r2, [r4, #16]
 8009ae8:	f8cd a000 	str.w	sl, [sp]
 8009aec:	464b      	mov	r3, r9
 8009aee:	aa03      	add	r2, sp, #12
 8009af0:	4621      	mov	r1, r4
 8009af2:	4640      	mov	r0, r8
 8009af4:	f7ff fee2 	bl	80098bc <_printf_common>
 8009af8:	3001      	adds	r0, #1
 8009afa:	d14c      	bne.n	8009b96 <_printf_i+0x1fe>
 8009afc:	f04f 30ff 	mov.w	r0, #4294967295
 8009b00:	b004      	add	sp, #16
 8009b02:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8009b06:	4835      	ldr	r0, [pc, #212]	; (8009bdc <_printf_i+0x244>)
 8009b08:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 8009b0c:	6829      	ldr	r1, [r5, #0]
 8009b0e:	6823      	ldr	r3, [r4, #0]
 8009b10:	f851 6b04 	ldr.w	r6, [r1], #4
 8009b14:	6029      	str	r1, [r5, #0]
 8009b16:	061d      	lsls	r5, r3, #24
 8009b18:	d514      	bpl.n	8009b44 <_printf_i+0x1ac>
 8009b1a:	07df      	lsls	r7, r3, #31
 8009b1c:	bf44      	itt	mi
 8009b1e:	f043 0320 	orrmi.w	r3, r3, #32
 8009b22:	6023      	strmi	r3, [r4, #0]
 8009b24:	b91e      	cbnz	r6, 8009b2e <_printf_i+0x196>
 8009b26:	6823      	ldr	r3, [r4, #0]
 8009b28:	f023 0320 	bic.w	r3, r3, #32
 8009b2c:	6023      	str	r3, [r4, #0]
 8009b2e:	2310      	movs	r3, #16
 8009b30:	e7b0      	b.n	8009a94 <_printf_i+0xfc>
 8009b32:	6823      	ldr	r3, [r4, #0]
 8009b34:	f043 0320 	orr.w	r3, r3, #32
 8009b38:	6023      	str	r3, [r4, #0]
 8009b3a:	2378      	movs	r3, #120	; 0x78
 8009b3c:	4828      	ldr	r0, [pc, #160]	; (8009be0 <_printf_i+0x248>)
 8009b3e:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8009b42:	e7e3      	b.n	8009b0c <_printf_i+0x174>
 8009b44:	0659      	lsls	r1, r3, #25
 8009b46:	bf48      	it	mi
 8009b48:	b2b6      	uxthmi	r6, r6
 8009b4a:	e7e6      	b.n	8009b1a <_printf_i+0x182>
 8009b4c:	4615      	mov	r5, r2
 8009b4e:	e7bb      	b.n	8009ac8 <_printf_i+0x130>
 8009b50:	682b      	ldr	r3, [r5, #0]
 8009b52:	6826      	ldr	r6, [r4, #0]
 8009b54:	6961      	ldr	r1, [r4, #20]
 8009b56:	1d18      	adds	r0, r3, #4
 8009b58:	6028      	str	r0, [r5, #0]
 8009b5a:	0635      	lsls	r5, r6, #24
 8009b5c:	681b      	ldr	r3, [r3, #0]
 8009b5e:	d501      	bpl.n	8009b64 <_printf_i+0x1cc>
 8009b60:	6019      	str	r1, [r3, #0]
 8009b62:	e002      	b.n	8009b6a <_printf_i+0x1d2>
 8009b64:	0670      	lsls	r0, r6, #25
 8009b66:	d5fb      	bpl.n	8009b60 <_printf_i+0x1c8>
 8009b68:	8019      	strh	r1, [r3, #0]
 8009b6a:	2300      	movs	r3, #0
 8009b6c:	6123      	str	r3, [r4, #16]
 8009b6e:	4615      	mov	r5, r2
 8009b70:	e7ba      	b.n	8009ae8 <_printf_i+0x150>
 8009b72:	682b      	ldr	r3, [r5, #0]
 8009b74:	1d1a      	adds	r2, r3, #4
 8009b76:	602a      	str	r2, [r5, #0]
 8009b78:	681d      	ldr	r5, [r3, #0]
 8009b7a:	6862      	ldr	r2, [r4, #4]
 8009b7c:	2100      	movs	r1, #0
 8009b7e:	4628      	mov	r0, r5
 8009b80:	f7f6 fbb6 	bl	80002f0 <memchr>
 8009b84:	b108      	cbz	r0, 8009b8a <_printf_i+0x1f2>
 8009b86:	1b40      	subs	r0, r0, r5
 8009b88:	6060      	str	r0, [r4, #4]
 8009b8a:	6863      	ldr	r3, [r4, #4]
 8009b8c:	6123      	str	r3, [r4, #16]
 8009b8e:	2300      	movs	r3, #0
 8009b90:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8009b94:	e7a8      	b.n	8009ae8 <_printf_i+0x150>
 8009b96:	6923      	ldr	r3, [r4, #16]
 8009b98:	462a      	mov	r2, r5
 8009b9a:	4649      	mov	r1, r9
 8009b9c:	4640      	mov	r0, r8
 8009b9e:	47d0      	blx	sl
 8009ba0:	3001      	adds	r0, #1
 8009ba2:	d0ab      	beq.n	8009afc <_printf_i+0x164>
 8009ba4:	6823      	ldr	r3, [r4, #0]
 8009ba6:	079b      	lsls	r3, r3, #30
 8009ba8:	d413      	bmi.n	8009bd2 <_printf_i+0x23a>
 8009baa:	68e0      	ldr	r0, [r4, #12]
 8009bac:	9b03      	ldr	r3, [sp, #12]
 8009bae:	4298      	cmp	r0, r3
 8009bb0:	bfb8      	it	lt
 8009bb2:	4618      	movlt	r0, r3
 8009bb4:	e7a4      	b.n	8009b00 <_printf_i+0x168>
 8009bb6:	2301      	movs	r3, #1
 8009bb8:	4632      	mov	r2, r6
 8009bba:	4649      	mov	r1, r9
 8009bbc:	4640      	mov	r0, r8
 8009bbe:	47d0      	blx	sl
 8009bc0:	3001      	adds	r0, #1
 8009bc2:	d09b      	beq.n	8009afc <_printf_i+0x164>
 8009bc4:	3501      	adds	r5, #1
 8009bc6:	68e3      	ldr	r3, [r4, #12]
 8009bc8:	9903      	ldr	r1, [sp, #12]
 8009bca:	1a5b      	subs	r3, r3, r1
 8009bcc:	42ab      	cmp	r3, r5
 8009bce:	dcf2      	bgt.n	8009bb6 <_printf_i+0x21e>
 8009bd0:	e7eb      	b.n	8009baa <_printf_i+0x212>
 8009bd2:	2500      	movs	r5, #0
 8009bd4:	f104 0619 	add.w	r6, r4, #25
 8009bd8:	e7f5      	b.n	8009bc6 <_printf_i+0x22e>
 8009bda:	bf00      	nop
 8009bdc:	08009f45 	.word	0x08009f45
 8009be0:	08009f56 	.word	0x08009f56

08009be4 <memcpy>:
 8009be4:	440a      	add	r2, r1
 8009be6:	4291      	cmp	r1, r2
 8009be8:	f100 33ff 	add.w	r3, r0, #4294967295
 8009bec:	d100      	bne.n	8009bf0 <memcpy+0xc>
 8009bee:	4770      	bx	lr
 8009bf0:	b510      	push	{r4, lr}
 8009bf2:	f811 4b01 	ldrb.w	r4, [r1], #1
 8009bf6:	f803 4f01 	strb.w	r4, [r3, #1]!
 8009bfa:	4291      	cmp	r1, r2
 8009bfc:	d1f9      	bne.n	8009bf2 <memcpy+0xe>
 8009bfe:	bd10      	pop	{r4, pc}

08009c00 <memmove>:
 8009c00:	4288      	cmp	r0, r1
 8009c02:	b510      	push	{r4, lr}
 8009c04:	eb01 0402 	add.w	r4, r1, r2
 8009c08:	d902      	bls.n	8009c10 <memmove+0x10>
 8009c0a:	4284      	cmp	r4, r0
 8009c0c:	4623      	mov	r3, r4
 8009c0e:	d807      	bhi.n	8009c20 <memmove+0x20>
 8009c10:	1e43      	subs	r3, r0, #1
 8009c12:	42a1      	cmp	r1, r4
 8009c14:	d008      	beq.n	8009c28 <memmove+0x28>
 8009c16:	f811 2b01 	ldrb.w	r2, [r1], #1
 8009c1a:	f803 2f01 	strb.w	r2, [r3, #1]!
 8009c1e:	e7f8      	b.n	8009c12 <memmove+0x12>
 8009c20:	4402      	add	r2, r0
 8009c22:	4601      	mov	r1, r0
 8009c24:	428a      	cmp	r2, r1
 8009c26:	d100      	bne.n	8009c2a <memmove+0x2a>
 8009c28:	bd10      	pop	{r4, pc}
 8009c2a:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8009c2e:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8009c32:	e7f7      	b.n	8009c24 <memmove+0x24>

08009c34 <_free_r>:
 8009c34:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8009c36:	2900      	cmp	r1, #0
 8009c38:	d044      	beq.n	8009cc4 <_free_r+0x90>
 8009c3a:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8009c3e:	9001      	str	r0, [sp, #4]
 8009c40:	2b00      	cmp	r3, #0
 8009c42:	f1a1 0404 	sub.w	r4, r1, #4
 8009c46:	bfb8      	it	lt
 8009c48:	18e4      	addlt	r4, r4, r3
 8009c4a:	f000 f913 	bl	8009e74 <__malloc_lock>
 8009c4e:	4a1e      	ldr	r2, [pc, #120]	; (8009cc8 <_free_r+0x94>)
 8009c50:	9801      	ldr	r0, [sp, #4]
 8009c52:	6813      	ldr	r3, [r2, #0]
 8009c54:	b933      	cbnz	r3, 8009c64 <_free_r+0x30>
 8009c56:	6063      	str	r3, [r4, #4]
 8009c58:	6014      	str	r4, [r2, #0]
 8009c5a:	b003      	add	sp, #12
 8009c5c:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8009c60:	f000 b90e 	b.w	8009e80 <__malloc_unlock>
 8009c64:	42a3      	cmp	r3, r4
 8009c66:	d908      	bls.n	8009c7a <_free_r+0x46>
 8009c68:	6825      	ldr	r5, [r4, #0]
 8009c6a:	1961      	adds	r1, r4, r5
 8009c6c:	428b      	cmp	r3, r1
 8009c6e:	bf01      	itttt	eq
 8009c70:	6819      	ldreq	r1, [r3, #0]
 8009c72:	685b      	ldreq	r3, [r3, #4]
 8009c74:	1949      	addeq	r1, r1, r5
 8009c76:	6021      	streq	r1, [r4, #0]
 8009c78:	e7ed      	b.n	8009c56 <_free_r+0x22>
 8009c7a:	461a      	mov	r2, r3
 8009c7c:	685b      	ldr	r3, [r3, #4]
 8009c7e:	b10b      	cbz	r3, 8009c84 <_free_r+0x50>
 8009c80:	42a3      	cmp	r3, r4
 8009c82:	d9fa      	bls.n	8009c7a <_free_r+0x46>
 8009c84:	6811      	ldr	r1, [r2, #0]
 8009c86:	1855      	adds	r5, r2, r1
 8009c88:	42a5      	cmp	r5, r4
 8009c8a:	d10b      	bne.n	8009ca4 <_free_r+0x70>
 8009c8c:	6824      	ldr	r4, [r4, #0]
 8009c8e:	4421      	add	r1, r4
 8009c90:	1854      	adds	r4, r2, r1
 8009c92:	42a3      	cmp	r3, r4
 8009c94:	6011      	str	r1, [r2, #0]
 8009c96:	d1e0      	bne.n	8009c5a <_free_r+0x26>
 8009c98:	681c      	ldr	r4, [r3, #0]
 8009c9a:	685b      	ldr	r3, [r3, #4]
 8009c9c:	6053      	str	r3, [r2, #4]
 8009c9e:	4421      	add	r1, r4
 8009ca0:	6011      	str	r1, [r2, #0]
 8009ca2:	e7da      	b.n	8009c5a <_free_r+0x26>
 8009ca4:	d902      	bls.n	8009cac <_free_r+0x78>
 8009ca6:	230c      	movs	r3, #12
 8009ca8:	6003      	str	r3, [r0, #0]
 8009caa:	e7d6      	b.n	8009c5a <_free_r+0x26>
 8009cac:	6825      	ldr	r5, [r4, #0]
 8009cae:	1961      	adds	r1, r4, r5
 8009cb0:	428b      	cmp	r3, r1
 8009cb2:	bf04      	itt	eq
 8009cb4:	6819      	ldreq	r1, [r3, #0]
 8009cb6:	685b      	ldreq	r3, [r3, #4]
 8009cb8:	6063      	str	r3, [r4, #4]
 8009cba:	bf04      	itt	eq
 8009cbc:	1949      	addeq	r1, r1, r5
 8009cbe:	6021      	streq	r1, [r4, #0]
 8009cc0:	6054      	str	r4, [r2, #4]
 8009cc2:	e7ca      	b.n	8009c5a <_free_r+0x26>
 8009cc4:	b003      	add	sp, #12
 8009cc6:	bd30      	pop	{r4, r5, pc}
 8009cc8:	24001e1c 	.word	0x24001e1c

08009ccc <sbrk_aligned>:
 8009ccc:	b570      	push	{r4, r5, r6, lr}
 8009cce:	4e0e      	ldr	r6, [pc, #56]	; (8009d08 <sbrk_aligned+0x3c>)
 8009cd0:	460c      	mov	r4, r1
 8009cd2:	6831      	ldr	r1, [r6, #0]
 8009cd4:	4605      	mov	r5, r0
 8009cd6:	b911      	cbnz	r1, 8009cde <sbrk_aligned+0x12>
 8009cd8:	f000 f8bc 	bl	8009e54 <_sbrk_r>
 8009cdc:	6030      	str	r0, [r6, #0]
 8009cde:	4621      	mov	r1, r4
 8009ce0:	4628      	mov	r0, r5
 8009ce2:	f000 f8b7 	bl	8009e54 <_sbrk_r>
 8009ce6:	1c43      	adds	r3, r0, #1
 8009ce8:	d00a      	beq.n	8009d00 <sbrk_aligned+0x34>
 8009cea:	1cc4      	adds	r4, r0, #3
 8009cec:	f024 0403 	bic.w	r4, r4, #3
 8009cf0:	42a0      	cmp	r0, r4
 8009cf2:	d007      	beq.n	8009d04 <sbrk_aligned+0x38>
 8009cf4:	1a21      	subs	r1, r4, r0
 8009cf6:	4628      	mov	r0, r5
 8009cf8:	f000 f8ac 	bl	8009e54 <_sbrk_r>
 8009cfc:	3001      	adds	r0, #1
 8009cfe:	d101      	bne.n	8009d04 <sbrk_aligned+0x38>
 8009d00:	f04f 34ff 	mov.w	r4, #4294967295
 8009d04:	4620      	mov	r0, r4
 8009d06:	bd70      	pop	{r4, r5, r6, pc}
 8009d08:	24001e20 	.word	0x24001e20

08009d0c <_malloc_r>:
 8009d0c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8009d10:	1ccd      	adds	r5, r1, #3
 8009d12:	f025 0503 	bic.w	r5, r5, #3
 8009d16:	3508      	adds	r5, #8
 8009d18:	2d0c      	cmp	r5, #12
 8009d1a:	bf38      	it	cc
 8009d1c:	250c      	movcc	r5, #12
 8009d1e:	2d00      	cmp	r5, #0
 8009d20:	4607      	mov	r7, r0
 8009d22:	db01      	blt.n	8009d28 <_malloc_r+0x1c>
 8009d24:	42a9      	cmp	r1, r5
 8009d26:	d905      	bls.n	8009d34 <_malloc_r+0x28>
 8009d28:	230c      	movs	r3, #12
 8009d2a:	603b      	str	r3, [r7, #0]
 8009d2c:	2600      	movs	r6, #0
 8009d2e:	4630      	mov	r0, r6
 8009d30:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8009d34:	4e2e      	ldr	r6, [pc, #184]	; (8009df0 <_malloc_r+0xe4>)
 8009d36:	f000 f89d 	bl	8009e74 <__malloc_lock>
 8009d3a:	6833      	ldr	r3, [r6, #0]
 8009d3c:	461c      	mov	r4, r3
 8009d3e:	bb34      	cbnz	r4, 8009d8e <_malloc_r+0x82>
 8009d40:	4629      	mov	r1, r5
 8009d42:	4638      	mov	r0, r7
 8009d44:	f7ff ffc2 	bl	8009ccc <sbrk_aligned>
 8009d48:	1c43      	adds	r3, r0, #1
 8009d4a:	4604      	mov	r4, r0
 8009d4c:	d14d      	bne.n	8009dea <_malloc_r+0xde>
 8009d4e:	6834      	ldr	r4, [r6, #0]
 8009d50:	4626      	mov	r6, r4
 8009d52:	2e00      	cmp	r6, #0
 8009d54:	d140      	bne.n	8009dd8 <_malloc_r+0xcc>
 8009d56:	6823      	ldr	r3, [r4, #0]
 8009d58:	4631      	mov	r1, r6
 8009d5a:	4638      	mov	r0, r7
 8009d5c:	eb04 0803 	add.w	r8, r4, r3
 8009d60:	f000 f878 	bl	8009e54 <_sbrk_r>
 8009d64:	4580      	cmp	r8, r0
 8009d66:	d13a      	bne.n	8009dde <_malloc_r+0xd2>
 8009d68:	6821      	ldr	r1, [r4, #0]
 8009d6a:	3503      	adds	r5, #3
 8009d6c:	1a6d      	subs	r5, r5, r1
 8009d6e:	f025 0503 	bic.w	r5, r5, #3
 8009d72:	3508      	adds	r5, #8
 8009d74:	2d0c      	cmp	r5, #12
 8009d76:	bf38      	it	cc
 8009d78:	250c      	movcc	r5, #12
 8009d7a:	4629      	mov	r1, r5
 8009d7c:	4638      	mov	r0, r7
 8009d7e:	f7ff ffa5 	bl	8009ccc <sbrk_aligned>
 8009d82:	3001      	adds	r0, #1
 8009d84:	d02b      	beq.n	8009dde <_malloc_r+0xd2>
 8009d86:	6823      	ldr	r3, [r4, #0]
 8009d88:	442b      	add	r3, r5
 8009d8a:	6023      	str	r3, [r4, #0]
 8009d8c:	e00e      	b.n	8009dac <_malloc_r+0xa0>
 8009d8e:	6822      	ldr	r2, [r4, #0]
 8009d90:	1b52      	subs	r2, r2, r5
 8009d92:	d41e      	bmi.n	8009dd2 <_malloc_r+0xc6>
 8009d94:	2a0b      	cmp	r2, #11
 8009d96:	d916      	bls.n	8009dc6 <_malloc_r+0xba>
 8009d98:	1961      	adds	r1, r4, r5
 8009d9a:	42a3      	cmp	r3, r4
 8009d9c:	6025      	str	r5, [r4, #0]
 8009d9e:	bf18      	it	ne
 8009da0:	6059      	strne	r1, [r3, #4]
 8009da2:	6863      	ldr	r3, [r4, #4]
 8009da4:	bf08      	it	eq
 8009da6:	6031      	streq	r1, [r6, #0]
 8009da8:	5162      	str	r2, [r4, r5]
 8009daa:	604b      	str	r3, [r1, #4]
 8009dac:	4638      	mov	r0, r7
 8009dae:	f104 060b 	add.w	r6, r4, #11
 8009db2:	f000 f865 	bl	8009e80 <__malloc_unlock>
 8009db6:	f026 0607 	bic.w	r6, r6, #7
 8009dba:	1d23      	adds	r3, r4, #4
 8009dbc:	1af2      	subs	r2, r6, r3
 8009dbe:	d0b6      	beq.n	8009d2e <_malloc_r+0x22>
 8009dc0:	1b9b      	subs	r3, r3, r6
 8009dc2:	50a3      	str	r3, [r4, r2]
 8009dc4:	e7b3      	b.n	8009d2e <_malloc_r+0x22>
 8009dc6:	6862      	ldr	r2, [r4, #4]
 8009dc8:	42a3      	cmp	r3, r4
 8009dca:	bf0c      	ite	eq
 8009dcc:	6032      	streq	r2, [r6, #0]
 8009dce:	605a      	strne	r2, [r3, #4]
 8009dd0:	e7ec      	b.n	8009dac <_malloc_r+0xa0>
 8009dd2:	4623      	mov	r3, r4
 8009dd4:	6864      	ldr	r4, [r4, #4]
 8009dd6:	e7b2      	b.n	8009d3e <_malloc_r+0x32>
 8009dd8:	4634      	mov	r4, r6
 8009dda:	6876      	ldr	r6, [r6, #4]
 8009ddc:	e7b9      	b.n	8009d52 <_malloc_r+0x46>
 8009dde:	230c      	movs	r3, #12
 8009de0:	603b      	str	r3, [r7, #0]
 8009de2:	4638      	mov	r0, r7
 8009de4:	f000 f84c 	bl	8009e80 <__malloc_unlock>
 8009de8:	e7a1      	b.n	8009d2e <_malloc_r+0x22>
 8009dea:	6025      	str	r5, [r4, #0]
 8009dec:	e7de      	b.n	8009dac <_malloc_r+0xa0>
 8009dee:	bf00      	nop
 8009df0:	24001e1c 	.word	0x24001e1c

08009df4 <_realloc_r>:
 8009df4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8009df8:	4680      	mov	r8, r0
 8009dfa:	4614      	mov	r4, r2
 8009dfc:	460e      	mov	r6, r1
 8009dfe:	b921      	cbnz	r1, 8009e0a <_realloc_r+0x16>
 8009e00:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8009e04:	4611      	mov	r1, r2
 8009e06:	f7ff bf81 	b.w	8009d0c <_malloc_r>
 8009e0a:	b92a      	cbnz	r2, 8009e18 <_realloc_r+0x24>
 8009e0c:	f7ff ff12 	bl	8009c34 <_free_r>
 8009e10:	4625      	mov	r5, r4
 8009e12:	4628      	mov	r0, r5
 8009e14:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8009e18:	f000 f838 	bl	8009e8c <_malloc_usable_size_r>
 8009e1c:	4284      	cmp	r4, r0
 8009e1e:	4607      	mov	r7, r0
 8009e20:	d802      	bhi.n	8009e28 <_realloc_r+0x34>
 8009e22:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 8009e26:	d812      	bhi.n	8009e4e <_realloc_r+0x5a>
 8009e28:	4621      	mov	r1, r4
 8009e2a:	4640      	mov	r0, r8
 8009e2c:	f7ff ff6e 	bl	8009d0c <_malloc_r>
 8009e30:	4605      	mov	r5, r0
 8009e32:	2800      	cmp	r0, #0
 8009e34:	d0ed      	beq.n	8009e12 <_realloc_r+0x1e>
 8009e36:	42bc      	cmp	r4, r7
 8009e38:	4622      	mov	r2, r4
 8009e3a:	4631      	mov	r1, r6
 8009e3c:	bf28      	it	cs
 8009e3e:	463a      	movcs	r2, r7
 8009e40:	f7ff fed0 	bl	8009be4 <memcpy>
 8009e44:	4631      	mov	r1, r6
 8009e46:	4640      	mov	r0, r8
 8009e48:	f7ff fef4 	bl	8009c34 <_free_r>
 8009e4c:	e7e1      	b.n	8009e12 <_realloc_r+0x1e>
 8009e4e:	4635      	mov	r5, r6
 8009e50:	e7df      	b.n	8009e12 <_realloc_r+0x1e>
	...

08009e54 <_sbrk_r>:
 8009e54:	b538      	push	{r3, r4, r5, lr}
 8009e56:	4d06      	ldr	r5, [pc, #24]	; (8009e70 <_sbrk_r+0x1c>)
 8009e58:	2300      	movs	r3, #0
 8009e5a:	4604      	mov	r4, r0
 8009e5c:	4608      	mov	r0, r1
 8009e5e:	602b      	str	r3, [r5, #0]
 8009e60:	f7f6 fdc6 	bl	80009f0 <_sbrk>
 8009e64:	1c43      	adds	r3, r0, #1
 8009e66:	d102      	bne.n	8009e6e <_sbrk_r+0x1a>
 8009e68:	682b      	ldr	r3, [r5, #0]
 8009e6a:	b103      	cbz	r3, 8009e6e <_sbrk_r+0x1a>
 8009e6c:	6023      	str	r3, [r4, #0]
 8009e6e:	bd38      	pop	{r3, r4, r5, pc}
 8009e70:	24001e24 	.word	0x24001e24

08009e74 <__malloc_lock>:
 8009e74:	4801      	ldr	r0, [pc, #4]	; (8009e7c <__malloc_lock+0x8>)
 8009e76:	f000 b811 	b.w	8009e9c <__retarget_lock_acquire_recursive>
 8009e7a:	bf00      	nop
 8009e7c:	24001e28 	.word	0x24001e28

08009e80 <__malloc_unlock>:
 8009e80:	4801      	ldr	r0, [pc, #4]	; (8009e88 <__malloc_unlock+0x8>)
 8009e82:	f000 b80c 	b.w	8009e9e <__retarget_lock_release_recursive>
 8009e86:	bf00      	nop
 8009e88:	24001e28 	.word	0x24001e28

08009e8c <_malloc_usable_size_r>:
 8009e8c:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8009e90:	1f18      	subs	r0, r3, #4
 8009e92:	2b00      	cmp	r3, #0
 8009e94:	bfbc      	itt	lt
 8009e96:	580b      	ldrlt	r3, [r1, r0]
 8009e98:	18c0      	addlt	r0, r0, r3
 8009e9a:	4770      	bx	lr

08009e9c <__retarget_lock_acquire_recursive>:
 8009e9c:	4770      	bx	lr

08009e9e <__retarget_lock_release_recursive>:
 8009e9e:	4770      	bx	lr

08009ea0 <_init>:
 8009ea0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009ea2:	bf00      	nop
 8009ea4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8009ea6:	bc08      	pop	{r3}
 8009ea8:	469e      	mov	lr, r3
 8009eaa:	4770      	bx	lr

08009eac <_fini>:
 8009eac:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009eae:	bf00      	nop
 8009eb0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8009eb2:	bc08      	pop	{r3}
 8009eb4:	469e      	mov	lr, r3
 8009eb6:	4770      	bx	lr
