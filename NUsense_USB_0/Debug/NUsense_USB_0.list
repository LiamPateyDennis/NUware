
NUsense_USB_0.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000298  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000aa54  080002a0  080002a0  000102a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000000b8  0800acf4  0800acf4  0001acf4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .init_array   00000004  0800adac  0800adac  0001adac  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  4 .fini_array   00000004  0800adb0  0800adb0  0001adb0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .data         00000164  24000000  0800adb4  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  6 .bss          00001ccc  24000164  0800af18  00020164  2**2
                  ALLOC
  7 ._user_heap_stack 00000600  24001e30  0800af18  00021e30  2**0
                  ALLOC
  8 .ARM.attributes 0000002e  00000000  00000000  00020164  2**0
                  CONTENTS, READONLY
  9 .debug_info   00018b4a  00000000  00000000  00020192  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 10 .debug_abbrev 00003b21  00000000  00000000  00038cdc  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 11 .debug_aranges 00001160  00000000  00000000  0003c800  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 12 .debug_ranges 00000fa8  00000000  00000000  0003d960  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_macro  0003a857  00000000  00000000  0003e908  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_line   00019c1c  00000000  00000000  0007915f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_str    0015b63c  00000000  00000000  00092d7b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .comment      00000050  00000000  00000000  001ee3b7  2**0
                  CONTENTS, READONLY
 17 .debug_frame  000049a0  00000000  00000000  001ee408  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080002a0 <__do_global_dtors_aux>:
 80002a0:	b510      	push	{r4, lr}
 80002a2:	4c05      	ldr	r4, [pc, #20]	; (80002b8 <__do_global_dtors_aux+0x18>)
 80002a4:	7823      	ldrb	r3, [r4, #0]
 80002a6:	b933      	cbnz	r3, 80002b6 <__do_global_dtors_aux+0x16>
 80002a8:	4b04      	ldr	r3, [pc, #16]	; (80002bc <__do_global_dtors_aux+0x1c>)
 80002aa:	b113      	cbz	r3, 80002b2 <__do_global_dtors_aux+0x12>
 80002ac:	4804      	ldr	r0, [pc, #16]	; (80002c0 <__do_global_dtors_aux+0x20>)
 80002ae:	f3af 8000 	nop.w
 80002b2:	2301      	movs	r3, #1
 80002b4:	7023      	strb	r3, [r4, #0]
 80002b6:	bd10      	pop	{r4, pc}
 80002b8:	24000164 	.word	0x24000164
 80002bc:	00000000 	.word	0x00000000
 80002c0:	0800acdc 	.word	0x0800acdc

080002c4 <frame_dummy>:
 80002c4:	b508      	push	{r3, lr}
 80002c6:	4b03      	ldr	r3, [pc, #12]	; (80002d4 <frame_dummy+0x10>)
 80002c8:	b11b      	cbz	r3, 80002d2 <frame_dummy+0xe>
 80002ca:	4903      	ldr	r1, [pc, #12]	; (80002d8 <frame_dummy+0x14>)
 80002cc:	4803      	ldr	r0, [pc, #12]	; (80002dc <frame_dummy+0x18>)
 80002ce:	f3af 8000 	nop.w
 80002d2:	bd08      	pop	{r3, pc}
 80002d4:	00000000 	.word	0x00000000
 80002d8:	24000168 	.word	0x24000168
 80002dc:	0800acdc 	.word	0x0800acdc

080002e0 <strlen>:
 80002e0:	4603      	mov	r3, r0
 80002e2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80002e6:	2a00      	cmp	r2, #0
 80002e8:	d1fb      	bne.n	80002e2 <strlen+0x2>
 80002ea:	1a18      	subs	r0, r3, r0
 80002ec:	3801      	subs	r0, #1
 80002ee:	4770      	bx	lr

080002f0 <memchr>:
 80002f0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80002f4:	2a10      	cmp	r2, #16
 80002f6:	db2b      	blt.n	8000350 <memchr+0x60>
 80002f8:	f010 0f07 	tst.w	r0, #7
 80002fc:	d008      	beq.n	8000310 <memchr+0x20>
 80002fe:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000302:	3a01      	subs	r2, #1
 8000304:	428b      	cmp	r3, r1
 8000306:	d02d      	beq.n	8000364 <memchr+0x74>
 8000308:	f010 0f07 	tst.w	r0, #7
 800030c:	b342      	cbz	r2, 8000360 <memchr+0x70>
 800030e:	d1f6      	bne.n	80002fe <memchr+0xe>
 8000310:	b4f0      	push	{r4, r5, r6, r7}
 8000312:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000316:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800031a:	f022 0407 	bic.w	r4, r2, #7
 800031e:	f07f 0700 	mvns.w	r7, #0
 8000322:	2300      	movs	r3, #0
 8000324:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000328:	3c08      	subs	r4, #8
 800032a:	ea85 0501 	eor.w	r5, r5, r1
 800032e:	ea86 0601 	eor.w	r6, r6, r1
 8000332:	fa85 f547 	uadd8	r5, r5, r7
 8000336:	faa3 f587 	sel	r5, r3, r7
 800033a:	fa86 f647 	uadd8	r6, r6, r7
 800033e:	faa5 f687 	sel	r6, r5, r7
 8000342:	b98e      	cbnz	r6, 8000368 <memchr+0x78>
 8000344:	d1ee      	bne.n	8000324 <memchr+0x34>
 8000346:	bcf0      	pop	{r4, r5, r6, r7}
 8000348:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800034c:	f002 0207 	and.w	r2, r2, #7
 8000350:	b132      	cbz	r2, 8000360 <memchr+0x70>
 8000352:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000356:	3a01      	subs	r2, #1
 8000358:	ea83 0301 	eor.w	r3, r3, r1
 800035c:	b113      	cbz	r3, 8000364 <memchr+0x74>
 800035e:	d1f8      	bne.n	8000352 <memchr+0x62>
 8000360:	2000      	movs	r0, #0
 8000362:	4770      	bx	lr
 8000364:	3801      	subs	r0, #1
 8000366:	4770      	bx	lr
 8000368:	2d00      	cmp	r5, #0
 800036a:	bf06      	itte	eq
 800036c:	4635      	moveq	r5, r6
 800036e:	3803      	subeq	r0, #3
 8000370:	3807      	subne	r0, #7
 8000372:	f015 0f01 	tst.w	r5, #1
 8000376:	d107      	bne.n	8000388 <memchr+0x98>
 8000378:	3001      	adds	r0, #1
 800037a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800037e:	bf02      	ittt	eq
 8000380:	3001      	addeq	r0, #1
 8000382:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000386:	3001      	addeq	r0, #1
 8000388:	bcf0      	pop	{r4, r5, r6, r7}
 800038a:	3801      	subs	r0, #1
 800038c:	4770      	bx	lr
 800038e:	bf00      	nop

08000390 <MX_GPIO_Init>:
/** Configure pins
     PA13 (JTMS/SWDIO)   ------> DEBUG_JTMS-SWDIO
     PA14 (JTCK/SWCLK)   ------> DEBUG_JTCK-SWCLK
*/
void MX_GPIO_Init(void)
{
 8000390:	b580      	push	{r7, lr}
 8000392:	b08a      	sub	sp, #40	; 0x28
 8000394:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000396:	f107 0314 	add.w	r3, r7, #20
 800039a:	2200      	movs	r2, #0
 800039c:	601a      	str	r2, [r3, #0]
 800039e:	605a      	str	r2, [r3, #4]
 80003a0:	609a      	str	r2, [r3, #8]
 80003a2:	60da      	str	r2, [r3, #12]
 80003a4:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80003a6:	4b34      	ldr	r3, [pc, #208]	; (8000478 <MX_GPIO_Init+0xe8>)
 80003a8:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80003ac:	4a32      	ldr	r2, [pc, #200]	; (8000478 <MX_GPIO_Init+0xe8>)
 80003ae:	f043 0304 	orr.w	r3, r3, #4
 80003b2:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80003b6:	4b30      	ldr	r3, [pc, #192]	; (8000478 <MX_GPIO_Init+0xe8>)
 80003b8:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80003bc:	f003 0304 	and.w	r3, r3, #4
 80003c0:	613b      	str	r3, [r7, #16]
 80003c2:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80003c4:	4b2c      	ldr	r3, [pc, #176]	; (8000478 <MX_GPIO_Init+0xe8>)
 80003c6:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80003ca:	4a2b      	ldr	r2, [pc, #172]	; (8000478 <MX_GPIO_Init+0xe8>)
 80003cc:	f043 0301 	orr.w	r3, r3, #1
 80003d0:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80003d4:	4b28      	ldr	r3, [pc, #160]	; (8000478 <MX_GPIO_Init+0xe8>)
 80003d6:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80003da:	f003 0301 	and.w	r3, r3, #1
 80003de:	60fb      	str	r3, [r7, #12]
 80003e0:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80003e2:	4b25      	ldr	r3, [pc, #148]	; (8000478 <MX_GPIO_Init+0xe8>)
 80003e4:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80003e8:	4a23      	ldr	r2, [pc, #140]	; (8000478 <MX_GPIO_Init+0xe8>)
 80003ea:	f043 0302 	orr.w	r3, r3, #2
 80003ee:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80003f2:	4b21      	ldr	r3, [pc, #132]	; (8000478 <MX_GPIO_Init+0xe8>)
 80003f4:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80003f8:	f003 0302 	and.w	r3, r3, #2
 80003fc:	60bb      	str	r3, [r7, #8]
 80003fe:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8000400:	4b1d      	ldr	r3, [pc, #116]	; (8000478 <MX_GPIO_Init+0xe8>)
 8000402:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000406:	4a1c      	ldr	r2, [pc, #112]	; (8000478 <MX_GPIO_Init+0xe8>)
 8000408:	f043 0310 	orr.w	r3, r3, #16
 800040c:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000410:	4b19      	ldr	r3, [pc, #100]	; (8000478 <MX_GPIO_Init+0xe8>)
 8000412:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000416:	f003 0310 	and.w	r3, r3, #16
 800041a:	607b      	str	r3, [r7, #4]
 800041c:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(BUZZER_SIG_GPIO_Port, BUZZER_SIG_Pin, GPIO_PIN_SET);
 800041e:	2201      	movs	r2, #1
 8000420:	2180      	movs	r1, #128	; 0x80
 8000422:	4816      	ldr	r0, [pc, #88]	; (800047c <MX_GPIO_Init+0xec>)
 8000424:	f001 f9c6 	bl	80017b4 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PE10 */
  GPIO_InitStruct.Pin = GPIO_PIN_10;
 8000428:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800042c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 800042e:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 8000432:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000434:	2300      	movs	r3, #0
 8000436:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8000438:	f107 0314 	add.w	r3, r7, #20
 800043c:	4619      	mov	r1, r3
 800043e:	4810      	ldr	r0, [pc, #64]	; (8000480 <MX_GPIO_Init+0xf0>)
 8000440:	f001 f808 	bl	8001454 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = BUZZER_SIG_Pin;
 8000444:	2380      	movs	r3, #128	; 0x80
 8000446:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000448:	2301      	movs	r3, #1
 800044a:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800044c:	2300      	movs	r3, #0
 800044e:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000450:	2300      	movs	r3, #0
 8000452:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(BUZZER_SIG_GPIO_Port, &GPIO_InitStruct);
 8000454:	f107 0314 	add.w	r3, r7, #20
 8000458:	4619      	mov	r1, r3
 800045a:	4808      	ldr	r0, [pc, #32]	; (800047c <MX_GPIO_Init+0xec>)
 800045c:	f000 fffa 	bl	8001454 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 0, 0);
 8000460:	2200      	movs	r2, #0
 8000462:	2100      	movs	r1, #0
 8000464:	2028      	movs	r0, #40	; 0x28
 8000466:	f000 fd7a 	bl	8000f5e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 800046a:	2028      	movs	r0, #40	; 0x28
 800046c:	f000 fd91 	bl	8000f92 <HAL_NVIC_EnableIRQ>

}
 8000470:	bf00      	nop
 8000472:	3728      	adds	r7, #40	; 0x28
 8000474:	46bd      	mov	sp, r7
 8000476:	bd80      	pop	{r7, pc}
 8000478:	58024400 	.word	0x58024400
 800047c:	58020400 	.word	0x58020400
 8000480:	58021000 	.word	0x58021000

08000484 <HAL_SPI_TxRxCpltCallback>:
// TODO: properly comment/document file contents

#include "imu.h"
#include "spi.h"

void HAL_SPI_TxRxCpltCallback(SPI_HandleTypeDef* handle) {
 8000484:	b480      	push	{r7}
 8000486:	b083      	sub	sp, #12
 8000488:	af00      	add	r7, sp, #0
 800048a:	6078      	str	r0, [r7, #4]
	if (handle == &hspi4)
 800048c:	687b      	ldr	r3, [r7, #4]
 800048e:	4a06      	ldr	r2, [pc, #24]	; (80004a8 <HAL_SPI_TxRxCpltCallback+0x24>)
 8000490:	4293      	cmp	r3, r2
 8000492:	d102      	bne.n	800049a <HAL_SPI_TxRxCpltCallback+0x16>
		SPI_flag = 1;
 8000494:	4b05      	ldr	r3, [pc, #20]	; (80004ac <HAL_SPI_TxRxCpltCallback+0x28>)
 8000496:	2201      	movs	r2, #1
 8000498:	701a      	strb	r2, [r3, #0]

}
 800049a:	bf00      	nop
 800049c:	370c      	adds	r7, #12
 800049e:	46bd      	mov	sp, r7
 80004a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80004a4:	4770      	bx	lr
 80004a6:	bf00      	nop
 80004a8:	24000184 	.word	0x24000184
 80004ac:	24000180 	.word	0x24000180

080004b0 <NUfsr_IMU_Init>:

void NUfsr_IMU_Init()
{
 80004b0:	b580      	push	{r7, lr}
 80004b2:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(MPU_NSS_GPIO_Port, MPU_NSS_Pin, GPIO_PIN_RESET);
 80004b4:	2200      	movs	r2, #0
 80004b6:	f44f 6100 	mov.w	r1, #2048	; 0x800
 80004ba:	481e      	ldr	r0, [pc, #120]	; (8000534 <NUfsr_IMU_Init+0x84>)
 80004bc:	f001 f97a 	bl	80017b4 <HAL_GPIO_WritePin>

	// From NUFSR branch:
	// Ensure that R/W registers are set from power-up.
    HAL_Delay(100);
 80004c0:	2064      	movs	r0, #100	; 0x64
 80004c2:	f000 fc41 	bl	8000d48 <HAL_Delay>

	// Reset the device.
	NUfsr_IMU_Transmit(PWR_MGMT_1, 0x80, 2);
 80004c6:	2202      	movs	r2, #2
 80004c8:	2180      	movs	r1, #128	; 0x80
 80004ca:	206b      	movs	r0, #107	; 0x6b
 80004cc:	f000 f85c 	bl	8000588 <NUfsr_IMU_Transmit>
	HAL_Delay(10);
 80004d0:	200a      	movs	r0, #10
 80004d2:	f000 fc39 	bl	8000d48 <HAL_Delay>

	// Turn off sleep mode.
	NUfsr_IMU_Transmit(PWR_MGMT_1, 0x00, 2);
 80004d6:	2202      	movs	r2, #2
 80004d8:	2100      	movs	r1, #0
 80004da:	206b      	movs	r0, #107	; 0x6b
 80004dc:	f000 f854 	bl	8000588 <NUfsr_IMU_Transmit>

	// Enable all axes.
	NUfsr_IMU_Transmit(PWR_MGMT_2, 0x00, 2);
 80004e0:	2202      	movs	r2, #2
 80004e2:	2100      	movs	r1, #0
 80004e4:	206c      	movs	r0, #108	; 0x6c
 80004e6:	f000 f84f 	bl	8000588 <NUfsr_IMU_Transmit>

	// Ensure that it is in SPI mode.
	NUfsr_IMU_Transmit(USER_CTRL, 0x10, 2);
 80004ea:	2202      	movs	r2, #2
 80004ec:	2110      	movs	r1, #16
 80004ee:	206a      	movs	r0, #106	; 0x6a
 80004f0:	f000 f84a 	bl	8000588 <NUfsr_IMU_Transmit>

	// Configure settings.
	NUfsr_IMU_Transmit(CONFIG, 0x00, 2);
 80004f4:	2202      	movs	r2, #2
 80004f6:	2100      	movs	r1, #0
 80004f8:	201a      	movs	r0, #26
 80004fa:	f000 f845 	bl	8000588 <NUfsr_IMU_Transmit>

	// Gyro Config:
	// 0x00?
	NUfsr_IMU_Transmit(GYRO_CONFIG, 0x08, 2);
 80004fe:	2202      	movs	r2, #2
 8000500:	2108      	movs	r1, #8
 8000502:	201b      	movs	r0, #27
 8000504:	f000 f840 	bl	8000588 <NUfsr_IMU_Transmit>

	// Accel Config:
	// 0x00?
	NUfsr_IMU_Transmit(ACCEL_CONFIG, 0x08, 2);
 8000508:	2202      	movs	r2, #2
 800050a:	2108      	movs	r1, #8
 800050c:	201c      	movs	r0, #28
 800050e:	f000 f83b 	bl	8000588 <NUfsr_IMU_Transmit>

	// Int config:
	NUfsr_IMU_Transmit(INT_PIN_CFG, 0x20, 2);
 8000512:	2202      	movs	r2, #2
 8000514:	2120      	movs	r1, #32
 8000516:	2037      	movs	r0, #55	; 0x37
 8000518:	f000 f836 	bl	8000588 <NUfsr_IMU_Transmit>

	// Interupt settings:
	NUfsr_IMU_Transmit(INT_ENABLE, 0x01, 2);
 800051c:	2202      	movs	r2, #2
 800051e:	2101      	movs	r1, #1
 8000520:	2038      	movs	r0, #56	; 0x38
 8000522:	f000 f831 	bl	8000588 <NUfsr_IMU_Transmit>

	// Reset the IMU interrupt status.
	NUfsr_IMU_Transmit(INT_STATUS | IMU_READ, 0x00, 2);
 8000526:	2202      	movs	r2, #2
 8000528:	2100      	movs	r1, #0
 800052a:	20ba      	movs	r0, #186	; 0xba
 800052c:	f000 f82c 	bl	8000588 <NUfsr_IMU_Transmit>

}
 8000530:	bf00      	nop
 8000532:	bd80      	pop	{r7, pc}
 8000534:	58021000 	.word	0x58021000

08000538 <NUfsr_IMU_BlockingTransmit>:

void NUfsr_IMU_BlockingTransmit(uint8_t* dat, int byte_size)
{
 8000538:	b580      	push	{r7, lr}
 800053a:	b082      	sub	sp, #8
 800053c:	af00      	add	r7, sp, #0
 800053e:	6078      	str	r0, [r7, #4]
 8000540:	6039      	str	r1, [r7, #0]
	HAL_SPI_Transmit(&hspi4, dat, byte_size, HAL_MAX_DELAY);
 8000542:	683b      	ldr	r3, [r7, #0]
 8000544:	b29a      	uxth	r2, r3
 8000546:	f04f 33ff 	mov.w	r3, #4294967295
 800054a:	6879      	ldr	r1, [r7, #4]
 800054c:	4803      	ldr	r0, [pc, #12]	; (800055c <NUfsr_IMU_BlockingTransmit+0x24>)
 800054e:	f004 fdc1 	bl	80050d4 <HAL_SPI_Transmit>

}
 8000552:	bf00      	nop
 8000554:	3708      	adds	r7, #8
 8000556:	46bd      	mov	sp, r7
 8000558:	bd80      	pop	{r7, pc}
 800055a:	bf00      	nop
 800055c:	24000184 	.word	0x24000184

08000560 <NUfsr_IMU_TransmitReceive_IT>:

void NUfsr_IMU_TransmitReceive_IT(uint8_t* dat, uint8_t* dat_return, int byte_size)
{
 8000560:	b580      	push	{r7, lr}
 8000562:	b084      	sub	sp, #16
 8000564:	af00      	add	r7, sp, #0
 8000566:	60f8      	str	r0, [r7, #12]
 8000568:	60b9      	str	r1, [r7, #8]
 800056a:	607a      	str	r2, [r7, #4]
	HAL_SPI_TransmitReceive_IT(&hspi4, dat, dat_return, byte_size);
 800056c:	687b      	ldr	r3, [r7, #4]
 800056e:	b29b      	uxth	r3, r3
 8000570:	68ba      	ldr	r2, [r7, #8]
 8000572:	68f9      	ldr	r1, [r7, #12]
 8000574:	4803      	ldr	r0, [pc, #12]	; (8000584 <NUfsr_IMU_TransmitReceive_IT+0x24>)
 8000576:	f004 ff9f 	bl	80054b8 <HAL_SPI_TransmitReceive_IT>
}
 800057a:	bf00      	nop
 800057c:	3710      	adds	r7, #16
 800057e:	46bd      	mov	sp, r7
 8000580:	bd80      	pop	{r7, pc}
 8000582:	bf00      	nop
 8000584:	24000184 	.word	0x24000184

08000588 <NUfsr_IMU_Transmit>:

//Legacy functions:

void NUfsr_IMU_Transmit(uint8_t adr, uint8_t dat, int byte_size)
{
 8000588:	b580      	push	{r7, lr}
 800058a:	b084      	sub	sp, #16
 800058c:	af00      	add	r7, sp, #0
 800058e:	4603      	mov	r3, r0
 8000590:	603a      	str	r2, [r7, #0]
 8000592:	71fb      	strb	r3, [r7, #7]
 8000594:	460b      	mov	r3, r1
 8000596:	71bb      	strb	r3, [r7, #6]
	uint16_t pak = (adr << 8) | dat;
 8000598:	79fb      	ldrb	r3, [r7, #7]
 800059a:	021b      	lsls	r3, r3, #8
 800059c:	b21a      	sxth	r2, r3
 800059e:	79bb      	ldrb	r3, [r7, #6]
 80005a0:	b21b      	sxth	r3, r3
 80005a2:	4313      	orrs	r3, r2
 80005a4:	b21b      	sxth	r3, r3
 80005a6:	b29b      	uxth	r3, r3
 80005a8:	817b      	strh	r3, [r7, #10]
	uint8_t* pak_ptr = (uint8_t*)&pak;
 80005aa:	f107 030a 	add.w	r3, r7, #10
 80005ae:	60fb      	str	r3, [r7, #12]

	HAL_SPI_Transmit(&hspi4, pak_ptr, byte_size, HAL_MAX_DELAY);
 80005b0:	683b      	ldr	r3, [r7, #0]
 80005b2:	b29a      	uxth	r2, r3
 80005b4:	f04f 33ff 	mov.w	r3, #4294967295
 80005b8:	68f9      	ldr	r1, [r7, #12]
 80005ba:	4803      	ldr	r0, [pc, #12]	; (80005c8 <NUfsr_IMU_Transmit+0x40>)
 80005bc:	f004 fd8a 	bl	80050d4 <HAL_SPI_Transmit>

}
 80005c0:	bf00      	nop
 80005c2:	3710      	adds	r7, #16
 80005c4:	46bd      	mov	sp, r7
 80005c6:	bd80      	pop	{r7, pc}
 80005c8:	24000184 	.word	0x24000184

080005cc <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80005cc:	b5f0      	push	{r4, r5, r6, r7, lr}
 80005ce:	b0a5      	sub	sp, #148	; 0x94
 80005d0:	af08      	add	r7, sp, #32
  /* USER CODE BEGIN 1 */
	SPI_flag = 0; INT_flag = 0;
 80005d2:	4b44      	ldr	r3, [pc, #272]	; (80006e4 <main+0x118>)
 80005d4:	2200      	movs	r2, #0
 80005d6:	701a      	strb	r2, [r3, #0]
 80005d8:	4b43      	ldr	r3, [pc, #268]	; (80006e8 <main+0x11c>)
 80005da:	2200      	movs	r2, #0
 80005dc:	701a      	strb	r2, [r3, #0]
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80005de:	f000 fb21 	bl	8000c24 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80005e2:	f000 f889 	bl	80006f8 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80005e6:	f7ff fed3 	bl	8000390 <MX_GPIO_Init>
  MX_USB_DEVICE_Init();
 80005ea:	f009 f93b 	bl	8009864 <MX_USB_DEVICE_Init>
  MX_SPI4_Init();
 80005ee:	f000 f90b 	bl	8000808 <MX_SPI4_Init>
  /* USER CODE BEGIN 2 */

  NUfsr_IMU_Init();
 80005f2:	f7ff ff5d 	bl	80004b0 <NUfsr_IMU_Init>

  //Confirm that the programme is running.
  HAL_GPIO_WritePin(BUZZER_SIG_GPIO_Port, BUZZER_SIG_Pin, GPIO_PIN_SET);
 80005f6:	2201      	movs	r2, #1
 80005f8:	2180      	movs	r1, #128	; 0x80
 80005fa:	483c      	ldr	r0, [pc, #240]	; (80006ec <main+0x120>)
 80005fc:	f001 f8da 	bl	80017b4 <HAL_GPIO_WritePin>
  HAL_Delay(500);
 8000600:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8000604:	f000 fba0 	bl	8000d48 <HAL_Delay>
  HAL_GPIO_WritePin(BUZZER_SIG_GPIO_Port, BUZZER_SIG_Pin, GPIO_PIN_RESET);
 8000608:	2200      	movs	r2, #0
 800060a:	2180      	movs	r1, #128	; 0x80
 800060c:	4837      	ldr	r0, [pc, #220]	; (80006ec <main+0x120>)
 800060e:	f001 f8d1 	bl	80017b4 <HAL_GPIO_WritePin>

  //Declare some variables.
  struct IMURawData raw_data;
  uint8_t read_buffer[16] = {
 8000612:	4b37      	ldr	r3, [pc, #220]	; (80006f0 <main+0x124>)
 8000614:	f107 0450 	add.w	r4, r7, #80	; 0x50
 8000618:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 800061a:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
	  GYRO_YOUT_L 	| IMU_READ,
	  GYRO_ZOUT_H 	| IMU_READ,
	  GYRO_ZOUT_L 	| IMU_READ,
	  0x00
  };
  uint8_t reset_buffer[2] = {INT_STATUS | IMU_READ, 0x00};
 800061e:	23ba      	movs	r3, #186	; 0xba
 8000620:	f8a7 304c 	strh.w	r3, [r7, #76]	; 0x4c
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  //Wait for five seconds as a buffer.
  HAL_Delay(5000);
 8000624:	f241 3088 	movw	r0, #5000	; 0x1388
 8000628:	f000 fb8e 	bl	8000d48 <HAL_Delay>

  //Send the first packet.
  NUfsr_IMU_TransmitReceive_IT(read_buffer, (uint8_t*)&raw_data, 16);
 800062c:	f107 0160 	add.w	r1, r7, #96	; 0x60
 8000630:	f107 0350 	add.w	r3, r7, #80	; 0x50
 8000634:	2210      	movs	r2, #16
 8000636:	4618      	mov	r0, r3
 8000638:	f7ff ff92 	bl	8000560 <NUfsr_IMU_TransmitReceive_IT>
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */

	  //If a packet has been received, then parse it.
	  if (SPI_flag == 1) {
 800063c:	4b29      	ldr	r3, [pc, #164]	; (80006e4 <main+0x118>)
 800063e:	781b      	ldrb	r3, [r3, #0]
 8000640:	2b01      	cmp	r3, #1
 8000642:	d149      	bne.n	80006d8 <main+0x10c>
				  "%x\t"
				  "%d\t%d\t%d\t"
				  "%d\t%d\t%d\t"
				  "%d"
				  "%d\r\n",
				  raw_data.ID,
 8000644:	f897 3061 	ldrb.w	r3, [r7, #97]	; 0x61
		  sprintf(str_buffer,
 8000648:	469c      	mov	ip, r3
				  raw_data.accelerometer.x,raw_data.accelerometer.y,raw_data.accelerometer.z,
 800064a:	f9b7 3062 	ldrsh.w	r3, [r7, #98]	; 0x62
		  sprintf(str_buffer,
 800064e:	469e      	mov	lr, r3
				  raw_data.accelerometer.x,raw_data.accelerometer.y,raw_data.accelerometer.z,
 8000650:	f9b7 3064 	ldrsh.w	r3, [r7, #100]	; 0x64
		  sprintf(str_buffer,
 8000654:	461a      	mov	r2, r3
				  raw_data.accelerometer.x,raw_data.accelerometer.y,raw_data.accelerometer.z,
 8000656:	f9b7 3066 	ldrsh.w	r3, [r7, #102]	; 0x66
		  sprintf(str_buffer,
 800065a:	4619      	mov	r1, r3
				  raw_data.gyroscope.x,raw_data.gyroscope.y,raw_data.gyroscope.z,
 800065c:	f9b7 306a 	ldrsh.w	r3, [r7, #106]	; 0x6a
		  sprintf(str_buffer,
 8000660:	461c      	mov	r4, r3
				  raw_data.gyroscope.x,raw_data.gyroscope.y,raw_data.gyroscope.z,
 8000662:	f9b7 306c 	ldrsh.w	r3, [r7, #108]	; 0x6c
		  sprintf(str_buffer,
 8000666:	461d      	mov	r5, r3
				  raw_data.gyroscope.x,raw_data.gyroscope.y,raw_data.gyroscope.z,
 8000668:	f9b7 306e 	ldrsh.w	r3, [r7, #110]	; 0x6e
		  sprintf(str_buffer,
 800066c:	461e      	mov	r6, r3
				  raw_data.temperature,
 800066e:	f9b7 3068 	ldrsh.w	r3, [r7, #104]	; 0x68
		  sprintf(str_buffer,
 8000672:	607b      	str	r3, [r7, #4]
 8000674:	4b1c      	ldr	r3, [pc, #112]	; (80006e8 <main+0x11c>)
 8000676:	781b      	ldrb	r3, [r3, #0]
 8000678:	f107 000c 	add.w	r0, r7, #12
 800067c:	9306      	str	r3, [sp, #24]
 800067e:	687b      	ldr	r3, [r7, #4]
 8000680:	9305      	str	r3, [sp, #20]
 8000682:	9604      	str	r6, [sp, #16]
 8000684:	9503      	str	r5, [sp, #12]
 8000686:	9402      	str	r4, [sp, #8]
 8000688:	9101      	str	r1, [sp, #4]
 800068a:	9200      	str	r2, [sp, #0]
 800068c:	4673      	mov	r3, lr
 800068e:	4662      	mov	r2, ip
 8000690:	4918      	ldr	r1, [pc, #96]	; (80006f4 <main+0x128>)
 8000692:	f009 feb5 	bl	800a400 <siprintf>
				  INT_flag);
		  CDC_Transmit_HS((uint8_t*)str_buffer, strlen(str_buffer));
 8000696:	f107 030c 	add.w	r3, r7, #12
 800069a:	4618      	mov	r0, r3
 800069c:	f7ff fe20 	bl	80002e0 <strlen>
 80006a0:	4603      	mov	r3, r0
 80006a2:	b29a      	uxth	r2, r3
 80006a4:	f107 030c 	add.w	r3, r7, #12
 80006a8:	4611      	mov	r1, r2
 80006aa:	4618      	mov	r0, r3
 80006ac:	f009 f99a 	bl	80099e4 <CDC_Transmit_HS>
		  NUfsr_IMU_TransmitReceive_IT(read_buffer, (uint8_t*)&raw_data, 16);
 80006b0:	f107 0160 	add.w	r1, r7, #96	; 0x60
 80006b4:	f107 0350 	add.w	r3, r7, #80	; 0x50
 80006b8:	2210      	movs	r2, #16
 80006ba:	4618      	mov	r0, r3
 80006bc:	f7ff ff50 	bl	8000560 <NUfsr_IMU_TransmitReceive_IT>

		  NUfsr_IMU_BlockingTransmit(reset_buffer, 2);
 80006c0:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 80006c4:	2102      	movs	r1, #2
 80006c6:	4618      	mov	r0, r3
 80006c8:	f7ff ff36 	bl	8000538 <NUfsr_IMU_BlockingTransmit>

		  //Reset the flags.
		  SPI_flag = 0;
 80006cc:	4b05      	ldr	r3, [pc, #20]	; (80006e4 <main+0x118>)
 80006ce:	2200      	movs	r2, #0
 80006d0:	701a      	strb	r2, [r3, #0]
		  INT_flag = 0;
 80006d2:	4b05      	ldr	r3, [pc, #20]	; (80006e8 <main+0x11c>)
 80006d4:	2200      	movs	r2, #0
 80006d6:	701a      	strb	r2, [r3, #0]
	  }

	  //Wait for one second and repeat.
	  HAL_Delay(1000);
 80006d8:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80006dc:	f000 fb34 	bl	8000d48 <HAL_Delay>
	  if (SPI_flag == 1) {
 80006e0:	e7ac      	b.n	800063c <main+0x70>
 80006e2:	bf00      	nop
 80006e4:	24000180 	.word	0x24000180
 80006e8:	24000181 	.word	0x24000181
 80006ec:	58020400 	.word	0x58020400
 80006f0:	0800ad10 	.word	0x0800ad10
 80006f4:	0800acf4 	.word	0x0800acf4

080006f8 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80006f8:	b580      	push	{r7, lr}
 80006fa:	b09c      	sub	sp, #112	; 0x70
 80006fc:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80006fe:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000702:	224c      	movs	r2, #76	; 0x4c
 8000704:	2100      	movs	r1, #0
 8000706:	4618      	mov	r0, r3
 8000708:	f009 fe72 	bl	800a3f0 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800070c:	1d3b      	adds	r3, r7, #4
 800070e:	2220      	movs	r2, #32
 8000710:	2100      	movs	r1, #0
 8000712:	4618      	mov	r0, r3
 8000714:	f009 fe6c 	bl	800a3f0 <memset>

  /** Supply configuration update enable
  */
  HAL_PWREx_ConfigSupply(PWR_LDO_SUPPLY);
 8000718:	2002      	movs	r0, #2
 800071a:	f002 fb53 	bl	8002dc4 <HAL_PWREx_ConfigSupply>

  /** Configure the main internal regulator output voltage
  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE3);
 800071e:	2300      	movs	r3, #0
 8000720:	603b      	str	r3, [r7, #0]
 8000722:	4b2a      	ldr	r3, [pc, #168]	; (80007cc <SystemClock_Config+0xd4>)
 8000724:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000726:	4a29      	ldr	r2, [pc, #164]	; (80007cc <SystemClock_Config+0xd4>)
 8000728:	f023 0301 	bic.w	r3, r3, #1
 800072c:	62d3      	str	r3, [r2, #44]	; 0x2c
 800072e:	4b27      	ldr	r3, [pc, #156]	; (80007cc <SystemClock_Config+0xd4>)
 8000730:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000732:	f003 0301 	and.w	r3, r3, #1
 8000736:	603b      	str	r3, [r7, #0]
 8000738:	4b25      	ldr	r3, [pc, #148]	; (80007d0 <SystemClock_Config+0xd8>)
 800073a:	699b      	ldr	r3, [r3, #24]
 800073c:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 8000740:	4a23      	ldr	r2, [pc, #140]	; (80007d0 <SystemClock_Config+0xd8>)
 8000742:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000746:	6193      	str	r3, [r2, #24]
 8000748:	4b21      	ldr	r3, [pc, #132]	; (80007d0 <SystemClock_Config+0xd8>)
 800074a:	699b      	ldr	r3, [r3, #24]
 800074c:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8000750:	603b      	str	r3, [r7, #0]
 8000752:	683b      	ldr	r3, [r7, #0]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_VOSRDY)) {}
 8000754:	bf00      	nop
 8000756:	4b1e      	ldr	r3, [pc, #120]	; (80007d0 <SystemClock_Config+0xd8>)
 8000758:	699b      	ldr	r3, [r3, #24]
 800075a:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800075e:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8000762:	d1f8      	bne.n	8000756 <SystemClock_Config+0x5e>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI48|RCC_OSCILLATORTYPE_HSI;
 8000764:	2322      	movs	r3, #34	; 0x22
 8000766:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.HSIState = RCC_HSI_DIV1;
 8000768:	2301      	movs	r3, #1
 800076a:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 800076c:	2340      	movs	r3, #64	; 0x40
 800076e:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.HSI48State = RCC_HSI48_ON;
 8000770:	2301      	movs	r3, #1
 8000772:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 8000774:	2300      	movs	r3, #0
 8000776:	64bb      	str	r3, [r7, #72]	; 0x48
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000778:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800077c:	4618      	mov	r0, r3
 800077e:	f002 fb6b 	bl	8002e58 <HAL_RCC_OscConfig>
 8000782:	4603      	mov	r3, r0
 8000784:	2b00      	cmp	r3, #0
 8000786:	d001      	beq.n	800078c <SystemClock_Config+0x94>
  {
    Error_Handler();
 8000788:	f000 f838 	bl	80007fc <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800078c:	233f      	movs	r3, #63	; 0x3f
 800078e:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2
                              |RCC_CLOCKTYPE_D3PCLK1|RCC_CLOCKTYPE_D1PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 8000790:	2300      	movs	r3, #0
 8000792:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.SYSCLKDivider = RCC_SYSCLK_DIV1;
 8000794:	2300      	movs	r3, #0
 8000796:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_HCLK_DIV1;
 8000798:	2300      	movs	r3, #0
 800079a:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB3CLKDivider = RCC_APB3_DIV1;
 800079c:	2300      	movs	r3, #0
 800079e:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_APB1_DIV1;
 80007a0:	2300      	movs	r3, #0
 80007a2:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_APB2_DIV2;
 80007a4:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80007a8:	61fb      	str	r3, [r7, #28]
  RCC_ClkInitStruct.APB4CLKDivider = RCC_APB4_DIV1;
 80007aa:	2300      	movs	r3, #0
 80007ac:	623b      	str	r3, [r7, #32]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 80007ae:	1d3b      	adds	r3, r7, #4
 80007b0:	2101      	movs	r1, #1
 80007b2:	4618      	mov	r0, r3
 80007b4:	f002 ff7e 	bl	80036b4 <HAL_RCC_ClockConfig>
 80007b8:	4603      	mov	r3, r0
 80007ba:	2b00      	cmp	r3, #0
 80007bc:	d001      	beq.n	80007c2 <SystemClock_Config+0xca>
  {
    Error_Handler();
 80007be:	f000 f81d 	bl	80007fc <Error_Handler>
  }
}
 80007c2:	bf00      	nop
 80007c4:	3770      	adds	r7, #112	; 0x70
 80007c6:	46bd      	mov	sp, r7
 80007c8:	bd80      	pop	{r7, pc}
 80007ca:	bf00      	nop
 80007cc:	58000400 	.word	0x58000400
 80007d0:	58024800 	.word	0x58024800

080007d4 <HAL_GPIO_EXTI_Callback>:

/* USER CODE BEGIN 4 */

void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 80007d4:	b480      	push	{r7}
 80007d6:	b083      	sub	sp, #12
 80007d8:	af00      	add	r7, sp, #0
 80007da:	4603      	mov	r3, r0
 80007dc:	80fb      	strh	r3, [r7, #6]
	if (GPIO_Pin == GPIO_PIN_10)
 80007de:	88fb      	ldrh	r3, [r7, #6]
 80007e0:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80007e4:	d102      	bne.n	80007ec <HAL_GPIO_EXTI_Callback+0x18>
		INT_flag = 1;
 80007e6:	4b04      	ldr	r3, [pc, #16]	; (80007f8 <HAL_GPIO_EXTI_Callback+0x24>)
 80007e8:	2201      	movs	r2, #1
 80007ea:	701a      	strb	r2, [r3, #0]
}
 80007ec:	bf00      	nop
 80007ee:	370c      	adds	r7, #12
 80007f0:	46bd      	mov	sp, r7
 80007f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80007f6:	4770      	bx	lr
 80007f8:	24000181 	.word	0x24000181

080007fc <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80007fc:	b480      	push	{r7}
 80007fe:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000800:	b672      	cpsid	i
}
 8000802:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000804:	e7fe      	b.n	8000804 <Error_Handler+0x8>
	...

08000808 <MX_SPI4_Init>:

SPI_HandleTypeDef hspi4;

/* SPI4 init function */
void MX_SPI4_Init(void)
{
 8000808:	b580      	push	{r7, lr}
 800080a:	af00      	add	r7, sp, #0
  /* USER CODE END SPI4_Init 0 */

  /* USER CODE BEGIN SPI4_Init 1 */

  /* USER CODE END SPI4_Init 1 */
  hspi4.Instance = SPI4;
 800080c:	4b28      	ldr	r3, [pc, #160]	; (80008b0 <MX_SPI4_Init+0xa8>)
 800080e:	4a29      	ldr	r2, [pc, #164]	; (80008b4 <MX_SPI4_Init+0xac>)
 8000810:	601a      	str	r2, [r3, #0]
  hspi4.Init.Mode = SPI_MODE_MASTER;
 8000812:	4b27      	ldr	r3, [pc, #156]	; (80008b0 <MX_SPI4_Init+0xa8>)
 8000814:	f44f 0280 	mov.w	r2, #4194304	; 0x400000
 8000818:	605a      	str	r2, [r3, #4]
  hspi4.Init.Direction = SPI_DIRECTION_2LINES;
 800081a:	4b25      	ldr	r3, [pc, #148]	; (80008b0 <MX_SPI4_Init+0xa8>)
 800081c:	2200      	movs	r2, #0
 800081e:	609a      	str	r2, [r3, #8]
  hspi4.Init.DataSize = SPI_DATASIZE_8BIT;
 8000820:	4b23      	ldr	r3, [pc, #140]	; (80008b0 <MX_SPI4_Init+0xa8>)
 8000822:	2207      	movs	r2, #7
 8000824:	60da      	str	r2, [r3, #12]
  hspi4.Init.CLKPolarity = SPI_POLARITY_HIGH;
 8000826:	4b22      	ldr	r3, [pc, #136]	; (80008b0 <MX_SPI4_Init+0xa8>)
 8000828:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 800082c:	611a      	str	r2, [r3, #16]
  hspi4.Init.CLKPhase = SPI_PHASE_2EDGE;
 800082e:	4b20      	ldr	r3, [pc, #128]	; (80008b0 <MX_SPI4_Init+0xa8>)
 8000830:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8000834:	615a      	str	r2, [r3, #20]
  hspi4.Init.NSS = SPI_NSS_HARD_OUTPUT;
 8000836:	4b1e      	ldr	r3, [pc, #120]	; (80008b0 <MX_SPI4_Init+0xa8>)
 8000838:	f04f 5200 	mov.w	r2, #536870912	; 0x20000000
 800083c:	619a      	str	r2, [r3, #24]
  hspi4.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_16;
 800083e:	4b1c      	ldr	r3, [pc, #112]	; (80008b0 <MX_SPI4_Init+0xa8>)
 8000840:	f04f 5240 	mov.w	r2, #805306368	; 0x30000000
 8000844:	61da      	str	r2, [r3, #28]
  hspi4.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8000846:	4b1a      	ldr	r3, [pc, #104]	; (80008b0 <MX_SPI4_Init+0xa8>)
 8000848:	2200      	movs	r2, #0
 800084a:	621a      	str	r2, [r3, #32]
  hspi4.Init.TIMode = SPI_TIMODE_DISABLE;
 800084c:	4b18      	ldr	r3, [pc, #96]	; (80008b0 <MX_SPI4_Init+0xa8>)
 800084e:	2200      	movs	r2, #0
 8000850:	625a      	str	r2, [r3, #36]	; 0x24
  hspi4.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8000852:	4b17      	ldr	r3, [pc, #92]	; (80008b0 <MX_SPI4_Init+0xa8>)
 8000854:	2200      	movs	r2, #0
 8000856:	629a      	str	r2, [r3, #40]	; 0x28
  hspi4.Init.CRCPolynomial = 0x0;
 8000858:	4b15      	ldr	r3, [pc, #84]	; (80008b0 <MX_SPI4_Init+0xa8>)
 800085a:	2200      	movs	r2, #0
 800085c:	62da      	str	r2, [r3, #44]	; 0x2c
  hspi4.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 800085e:	4b14      	ldr	r3, [pc, #80]	; (80008b0 <MX_SPI4_Init+0xa8>)
 8000860:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8000864:	635a      	str	r2, [r3, #52]	; 0x34
  hspi4.Init.NSSPolarity = SPI_NSS_POLARITY_LOW;
 8000866:	4b12      	ldr	r3, [pc, #72]	; (80008b0 <MX_SPI4_Init+0xa8>)
 8000868:	2200      	movs	r2, #0
 800086a:	639a      	str	r2, [r3, #56]	; 0x38
  hspi4.Init.FifoThreshold = SPI_FIFO_THRESHOLD_01DATA;
 800086c:	4b10      	ldr	r3, [pc, #64]	; (80008b0 <MX_SPI4_Init+0xa8>)
 800086e:	2200      	movs	r2, #0
 8000870:	63da      	str	r2, [r3, #60]	; 0x3c
  hspi4.Init.TxCRCInitializationPattern = SPI_CRC_INITIALIZATION_ALL_ZERO_PATTERN;
 8000872:	4b0f      	ldr	r3, [pc, #60]	; (80008b0 <MX_SPI4_Init+0xa8>)
 8000874:	2200      	movs	r2, #0
 8000876:	641a      	str	r2, [r3, #64]	; 0x40
  hspi4.Init.RxCRCInitializationPattern = SPI_CRC_INITIALIZATION_ALL_ZERO_PATTERN;
 8000878:	4b0d      	ldr	r3, [pc, #52]	; (80008b0 <MX_SPI4_Init+0xa8>)
 800087a:	2200      	movs	r2, #0
 800087c:	645a      	str	r2, [r3, #68]	; 0x44
  hspi4.Init.MasterSSIdleness = SPI_MASTER_SS_IDLENESS_00CYCLE;
 800087e:	4b0c      	ldr	r3, [pc, #48]	; (80008b0 <MX_SPI4_Init+0xa8>)
 8000880:	2200      	movs	r2, #0
 8000882:	649a      	str	r2, [r3, #72]	; 0x48
  hspi4.Init.MasterInterDataIdleness = SPI_MASTER_INTERDATA_IDLENESS_00CYCLE;
 8000884:	4b0a      	ldr	r3, [pc, #40]	; (80008b0 <MX_SPI4_Init+0xa8>)
 8000886:	2200      	movs	r2, #0
 8000888:	64da      	str	r2, [r3, #76]	; 0x4c
  hspi4.Init.MasterReceiverAutoSusp = SPI_MASTER_RX_AUTOSUSP_DISABLE;
 800088a:	4b09      	ldr	r3, [pc, #36]	; (80008b0 <MX_SPI4_Init+0xa8>)
 800088c:	2200      	movs	r2, #0
 800088e:	651a      	str	r2, [r3, #80]	; 0x50
  hspi4.Init.MasterKeepIOState = SPI_MASTER_KEEP_IO_STATE_DISABLE;
 8000890:	4b07      	ldr	r3, [pc, #28]	; (80008b0 <MX_SPI4_Init+0xa8>)
 8000892:	2200      	movs	r2, #0
 8000894:	655a      	str	r2, [r3, #84]	; 0x54
  hspi4.Init.IOSwap = SPI_IO_SWAP_DISABLE;
 8000896:	4b06      	ldr	r3, [pc, #24]	; (80008b0 <MX_SPI4_Init+0xa8>)
 8000898:	2200      	movs	r2, #0
 800089a:	659a      	str	r2, [r3, #88]	; 0x58
  if (HAL_SPI_Init(&hspi4) != HAL_OK)
 800089c:	4804      	ldr	r0, [pc, #16]	; (80008b0 <MX_SPI4_Init+0xa8>)
 800089e:	f004 fb13 	bl	8004ec8 <HAL_SPI_Init>
 80008a2:	4603      	mov	r3, r0
 80008a4:	2b00      	cmp	r3, #0
 80008a6:	d001      	beq.n	80008ac <MX_SPI4_Init+0xa4>
  {
    Error_Handler();
 80008a8:	f7ff ffa8 	bl	80007fc <Error_Handler>
  }
  /* USER CODE BEGIN SPI4_Init 2 */

  /* USER CODE END SPI4_Init 2 */

}
 80008ac:	bf00      	nop
 80008ae:	bd80      	pop	{r7, pc}
 80008b0:	24000184 	.word	0x24000184
 80008b4:	40013400 	.word	0x40013400

080008b8 <HAL_SPI_MspInit>:

void HAL_SPI_MspInit(SPI_HandleTypeDef* spiHandle)
{
 80008b8:	b580      	push	{r7, lr}
 80008ba:	b0b8      	sub	sp, #224	; 0xe0
 80008bc:	af00      	add	r7, sp, #0
 80008be:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80008c0:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 80008c4:	2200      	movs	r2, #0
 80008c6:	601a      	str	r2, [r3, #0]
 80008c8:	605a      	str	r2, [r3, #4]
 80008ca:	609a      	str	r2, [r3, #8]
 80008cc:	60da      	str	r2, [r3, #12]
 80008ce:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 80008d0:	f107 0310 	add.w	r3, r7, #16
 80008d4:	22bc      	movs	r2, #188	; 0xbc
 80008d6:	2100      	movs	r1, #0
 80008d8:	4618      	mov	r0, r3
 80008da:	f009 fd89 	bl	800a3f0 <memset>
  if(spiHandle->Instance==SPI4)
 80008de:	687b      	ldr	r3, [r7, #4]
 80008e0:	681b      	ldr	r3, [r3, #0]
 80008e2:	4a29      	ldr	r2, [pc, #164]	; (8000988 <HAL_SPI_MspInit+0xd0>)
 80008e4:	4293      	cmp	r3, r2
 80008e6:	d14a      	bne.n	800097e <HAL_SPI_MspInit+0xc6>

  /* USER CODE END SPI4_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_SPI4;
 80008e8:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80008ec:	613b      	str	r3, [r7, #16]
    PeriphClkInitStruct.Spi45ClockSelection = RCC_SPI45CLKSOURCE_D2PCLK1;
 80008ee:	2300      	movs	r3, #0
 80008f0:	673b      	str	r3, [r7, #112]	; 0x70
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 80008f2:	f107 0310 	add.w	r3, r7, #16
 80008f6:	4618      	mov	r0, r3
 80008f8:	f003 fa3c 	bl	8003d74 <HAL_RCCEx_PeriphCLKConfig>
 80008fc:	4603      	mov	r3, r0
 80008fe:	2b00      	cmp	r3, #0
 8000900:	d001      	beq.n	8000906 <HAL_SPI_MspInit+0x4e>
    {
      Error_Handler();
 8000902:	f7ff ff7b 	bl	80007fc <Error_Handler>
    }

    /* SPI4 clock enable */
    __HAL_RCC_SPI4_CLK_ENABLE();
 8000906:	4b21      	ldr	r3, [pc, #132]	; (800098c <HAL_SPI_MspInit+0xd4>)
 8000908:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 800090c:	4a1f      	ldr	r2, [pc, #124]	; (800098c <HAL_SPI_MspInit+0xd4>)
 800090e:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8000912:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0
 8000916:	4b1d      	ldr	r3, [pc, #116]	; (800098c <HAL_SPI_MspInit+0xd4>)
 8000918:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 800091c:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8000920:	60fb      	str	r3, [r7, #12]
 8000922:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOE_CLK_ENABLE();
 8000924:	4b19      	ldr	r3, [pc, #100]	; (800098c <HAL_SPI_MspInit+0xd4>)
 8000926:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800092a:	4a18      	ldr	r2, [pc, #96]	; (800098c <HAL_SPI_MspInit+0xd4>)
 800092c:	f043 0310 	orr.w	r3, r3, #16
 8000930:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000934:	4b15      	ldr	r3, [pc, #84]	; (800098c <HAL_SPI_MspInit+0xd4>)
 8000936:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800093a:	f003 0310 	and.w	r3, r3, #16
 800093e:	60bb      	str	r3, [r7, #8]
 8000940:	68bb      	ldr	r3, [r7, #8]
    PE11     ------> SPI4_NSS
    PE12     ------> SPI4_SCK
    PE13     ------> SPI4_MISO
    PE14     ------> SPI4_MOSI
    */
    GPIO_InitStruct.Pin = MPU_NSS_Pin|MPU_SCK_Pin|MPU_MISO_Pin|MPU_MOSI_Pin;
 8000942:	f44f 43f0 	mov.w	r3, #30720	; 0x7800
 8000946:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800094a:	2302      	movs	r3, #2
 800094c:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000950:	2300      	movs	r3, #0
 8000952:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000956:	2300      	movs	r3, #0
 8000958:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI4;
 800095c:	2305      	movs	r3, #5
 800095e:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8000962:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 8000966:	4619      	mov	r1, r3
 8000968:	4809      	ldr	r0, [pc, #36]	; (8000990 <HAL_SPI_MspInit+0xd8>)
 800096a:	f000 fd73 	bl	8001454 <HAL_GPIO_Init>

    /* SPI4 interrupt Init */
    HAL_NVIC_SetPriority(SPI4_IRQn, 0, 0);
 800096e:	2200      	movs	r2, #0
 8000970:	2100      	movs	r1, #0
 8000972:	2054      	movs	r0, #84	; 0x54
 8000974:	f000 faf3 	bl	8000f5e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(SPI4_IRQn);
 8000978:	2054      	movs	r0, #84	; 0x54
 800097a:	f000 fb0a 	bl	8000f92 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN SPI4_MspInit 1 */

  /* USER CODE END SPI4_MspInit 1 */
  }
}
 800097e:	bf00      	nop
 8000980:	37e0      	adds	r7, #224	; 0xe0
 8000982:	46bd      	mov	sp, r7
 8000984:	bd80      	pop	{r7, pc}
 8000986:	bf00      	nop
 8000988:	40013400 	.word	0x40013400
 800098c:	58024400 	.word	0x58024400
 8000990:	58021000 	.word	0x58021000

08000994 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000994:	b480      	push	{r7}
 8000996:	b083      	sub	sp, #12
 8000998:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800099a:	4b0a      	ldr	r3, [pc, #40]	; (80009c4 <HAL_MspInit+0x30>)
 800099c:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 80009a0:	4a08      	ldr	r2, [pc, #32]	; (80009c4 <HAL_MspInit+0x30>)
 80009a2:	f043 0302 	orr.w	r3, r3, #2
 80009a6:	f8c2 30f4 	str.w	r3, [r2, #244]	; 0xf4
 80009aa:	4b06      	ldr	r3, [pc, #24]	; (80009c4 <HAL_MspInit+0x30>)
 80009ac:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 80009b0:	f003 0302 	and.w	r3, r3, #2
 80009b4:	607b      	str	r3, [r7, #4]
 80009b6:	687b      	ldr	r3, [r7, #4]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80009b8:	bf00      	nop
 80009ba:	370c      	adds	r7, #12
 80009bc:	46bd      	mov	sp, r7
 80009be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009c2:	4770      	bx	lr
 80009c4:	58024400 	.word	0x58024400

080009c8 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80009c8:	b480      	push	{r7}
 80009ca:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80009cc:	e7fe      	b.n	80009cc <NMI_Handler+0x4>

080009ce <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80009ce:	b480      	push	{r7}
 80009d0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80009d2:	e7fe      	b.n	80009d2 <HardFault_Handler+0x4>

080009d4 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80009d4:	b480      	push	{r7}
 80009d6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80009d8:	e7fe      	b.n	80009d8 <MemManage_Handler+0x4>

080009da <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80009da:	b480      	push	{r7}
 80009dc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80009de:	e7fe      	b.n	80009de <BusFault_Handler+0x4>

080009e0 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80009e0:	b480      	push	{r7}
 80009e2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80009e4:	e7fe      	b.n	80009e4 <UsageFault_Handler+0x4>

080009e6 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80009e6:	b480      	push	{r7}
 80009e8:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80009ea:	bf00      	nop
 80009ec:	46bd      	mov	sp, r7
 80009ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009f2:	4770      	bx	lr

080009f4 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80009f4:	b480      	push	{r7}
 80009f6:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80009f8:	bf00      	nop
 80009fa:	46bd      	mov	sp, r7
 80009fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a00:	4770      	bx	lr

08000a02 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000a02:	b480      	push	{r7}
 8000a04:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000a06:	bf00      	nop
 8000a08:	46bd      	mov	sp, r7
 8000a0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a0e:	4770      	bx	lr

08000a10 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000a10:	b580      	push	{r7, lr}
 8000a12:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000a14:	f000 f978 	bl	8000d08 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000a18:	bf00      	nop
 8000a1a:	bd80      	pop	{r7, pc}

08000a1c <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 8000a1c:	b580      	push	{r7, lr}
 8000a1e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_10);
 8000a20:	f44f 6080 	mov.w	r0, #1024	; 0x400
 8000a24:	f000 fedf 	bl	80017e6 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 8000a28:	bf00      	nop
 8000a2a:	bd80      	pop	{r7, pc}

08000a2c <OTG_HS_IRQHandler>:

/**
  * @brief This function handles USB On The Go HS global interrupt.
  */
void OTG_HS_IRQHandler(void)
{
 8000a2c:	b580      	push	{r7, lr}
 8000a2e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN OTG_HS_IRQn 0 */

  /* USER CODE END OTG_HS_IRQn 0 */
  HAL_PCD_IRQHandler(&hpcd_USB_OTG_HS);
 8000a30:	4802      	ldr	r0, [pc, #8]	; (8000a3c <OTG_HS_IRQHandler+0x10>)
 8000a32:	f001 f849 	bl	8001ac8 <HAL_PCD_IRQHandler>
  /* USER CODE BEGIN OTG_HS_IRQn 1 */

  /* USER CODE END OTG_HS_IRQn 1 */
}
 8000a36:	bf00      	nop
 8000a38:	bd80      	pop	{r7, pc}
 8000a3a:	bf00      	nop
 8000a3c:	240016f4 	.word	0x240016f4

08000a40 <SPI4_IRQHandler>:

/**
  * @brief This function handles SPI4 global interrupt.
  */
void SPI4_IRQHandler(void)
{
 8000a40:	b580      	push	{r7, lr}
 8000a42:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SPI4_IRQn 0 */

  /* USER CODE END SPI4_IRQn 0 */
  HAL_SPI_IRQHandler(&hspi4);
 8000a44:	4802      	ldr	r0, [pc, #8]	; (8000a50 <SPI4_IRQHandler+0x10>)
 8000a46:	f004 fee1 	bl	800580c <HAL_SPI_IRQHandler>
  /* USER CODE BEGIN SPI4_IRQn 1 */

  /* USER CODE END SPI4_IRQn 1 */
}
 8000a4a:	bf00      	nop
 8000a4c:	bd80      	pop	{r7, pc}
 8000a4e:	bf00      	nop
 8000a50:	24000184 	.word	0x24000184

08000a54 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000a54:	b580      	push	{r7, lr}
 8000a56:	b086      	sub	sp, #24
 8000a58:	af00      	add	r7, sp, #0
 8000a5a:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000a5c:	4a14      	ldr	r2, [pc, #80]	; (8000ab0 <_sbrk+0x5c>)
 8000a5e:	4b15      	ldr	r3, [pc, #84]	; (8000ab4 <_sbrk+0x60>)
 8000a60:	1ad3      	subs	r3, r2, r3
 8000a62:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000a64:	697b      	ldr	r3, [r7, #20]
 8000a66:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000a68:	4b13      	ldr	r3, [pc, #76]	; (8000ab8 <_sbrk+0x64>)
 8000a6a:	681b      	ldr	r3, [r3, #0]
 8000a6c:	2b00      	cmp	r3, #0
 8000a6e:	d102      	bne.n	8000a76 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000a70:	4b11      	ldr	r3, [pc, #68]	; (8000ab8 <_sbrk+0x64>)
 8000a72:	4a12      	ldr	r2, [pc, #72]	; (8000abc <_sbrk+0x68>)
 8000a74:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8000a76:	4b10      	ldr	r3, [pc, #64]	; (8000ab8 <_sbrk+0x64>)
 8000a78:	681a      	ldr	r2, [r3, #0]
 8000a7a:	687b      	ldr	r3, [r7, #4]
 8000a7c:	4413      	add	r3, r2
 8000a7e:	693a      	ldr	r2, [r7, #16]
 8000a80:	429a      	cmp	r2, r3
 8000a82:	d207      	bcs.n	8000a94 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8000a84:	f009 fc8a 	bl	800a39c <__errno>
 8000a88:	4603      	mov	r3, r0
 8000a8a:	220c      	movs	r2, #12
 8000a8c:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8000a8e:	f04f 33ff 	mov.w	r3, #4294967295
 8000a92:	e009      	b.n	8000aa8 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8000a94:	4b08      	ldr	r3, [pc, #32]	; (8000ab8 <_sbrk+0x64>)
 8000a96:	681b      	ldr	r3, [r3, #0]
 8000a98:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8000a9a:	4b07      	ldr	r3, [pc, #28]	; (8000ab8 <_sbrk+0x64>)
 8000a9c:	681a      	ldr	r2, [r3, #0]
 8000a9e:	687b      	ldr	r3, [r7, #4]
 8000aa0:	4413      	add	r3, r2
 8000aa2:	4a05      	ldr	r2, [pc, #20]	; (8000ab8 <_sbrk+0x64>)
 8000aa4:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8000aa6:	68fb      	ldr	r3, [r7, #12]
}
 8000aa8:	4618      	mov	r0, r3
 8000aaa:	3718      	adds	r7, #24
 8000aac:	46bd      	mov	sp, r7
 8000aae:	bd80      	pop	{r7, pc}
 8000ab0:	24080000 	.word	0x24080000
 8000ab4:	00000400 	.word	0x00000400
 8000ab8:	2400020c 	.word	0x2400020c
 8000abc:	24001e30 	.word	0x24001e30

08000ac0 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8000ac0:	b480      	push	{r7}
 8000ac2:	af00      	add	r7, sp, #0
 __IO uint32_t tmpreg;
#endif /* DATA_IN_D2_SRAM */

  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 8000ac4:	4b37      	ldr	r3, [pc, #220]	; (8000ba4 <SystemInit+0xe4>)
 8000ac6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000aca:	4a36      	ldr	r2, [pc, #216]	; (8000ba4 <SystemInit+0xe4>)
 8000acc:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000ad0:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  #endif
  /* Reset the RCC clock configuration to the default reset state ------------*/

   /* Increasing the CPU frequency */
  if(FLASH_LATENCY_DEFAULT  > (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 8000ad4:	4b34      	ldr	r3, [pc, #208]	; (8000ba8 <SystemInit+0xe8>)
 8000ad6:	681b      	ldr	r3, [r3, #0]
 8000ad8:	f003 030f 	and.w	r3, r3, #15
 8000adc:	2b06      	cmp	r3, #6
 8000ade:	d807      	bhi.n	8000af0 <SystemInit+0x30>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 8000ae0:	4b31      	ldr	r3, [pc, #196]	; (8000ba8 <SystemInit+0xe8>)
 8000ae2:	681b      	ldr	r3, [r3, #0]
 8000ae4:	f023 030f 	bic.w	r3, r3, #15
 8000ae8:	4a2f      	ldr	r2, [pc, #188]	; (8000ba8 <SystemInit+0xe8>)
 8000aea:	f043 0307 	orr.w	r3, r3, #7
 8000aee:	6013      	str	r3, [r2, #0]
  }

  /* Set HSION bit */
  RCC->CR |= RCC_CR_HSION;
 8000af0:	4b2e      	ldr	r3, [pc, #184]	; (8000bac <SystemInit+0xec>)
 8000af2:	681b      	ldr	r3, [r3, #0]
 8000af4:	4a2d      	ldr	r2, [pc, #180]	; (8000bac <SystemInit+0xec>)
 8000af6:	f043 0301 	orr.w	r3, r3, #1
 8000afa:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 8000afc:	4b2b      	ldr	r3, [pc, #172]	; (8000bac <SystemInit+0xec>)
 8000afe:	2200      	movs	r2, #0
 8000b00:	611a      	str	r2, [r3, #16]

  /* Reset HSEON, HSECSSON, CSION, HSI48ON, CSIKERON, PLL1ON, PLL2ON and PLL3ON bits */
  RCC->CR &= 0xEAF6ED7FU;
 8000b02:	4b2a      	ldr	r3, [pc, #168]	; (8000bac <SystemInit+0xec>)
 8000b04:	681a      	ldr	r2, [r3, #0]
 8000b06:	4929      	ldr	r1, [pc, #164]	; (8000bac <SystemInit+0xec>)
 8000b08:	4b29      	ldr	r3, [pc, #164]	; (8000bb0 <SystemInit+0xf0>)
 8000b0a:	4013      	ands	r3, r2
 8000b0c:	600b      	str	r3, [r1, #0]

   /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLASH_LATENCY_DEFAULT  < (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 8000b0e:	4b26      	ldr	r3, [pc, #152]	; (8000ba8 <SystemInit+0xe8>)
 8000b10:	681b      	ldr	r3, [r3, #0]
 8000b12:	f003 0308 	and.w	r3, r3, #8
 8000b16:	2b00      	cmp	r3, #0
 8000b18:	d007      	beq.n	8000b2a <SystemInit+0x6a>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 8000b1a:	4b23      	ldr	r3, [pc, #140]	; (8000ba8 <SystemInit+0xe8>)
 8000b1c:	681b      	ldr	r3, [r3, #0]
 8000b1e:	f023 030f 	bic.w	r3, r3, #15
 8000b22:	4a21      	ldr	r2, [pc, #132]	; (8000ba8 <SystemInit+0xe8>)
 8000b24:	f043 0307 	orr.w	r3, r3, #7
 8000b28:	6013      	str	r3, [r2, #0]
  }

#if defined(D3_SRAM_BASE)
  /* Reset D1CFGR register */
  RCC->D1CFGR = 0x00000000;
 8000b2a:	4b20      	ldr	r3, [pc, #128]	; (8000bac <SystemInit+0xec>)
 8000b2c:	2200      	movs	r2, #0
 8000b2e:	619a      	str	r2, [r3, #24]

  /* Reset D2CFGR register */
  RCC->D2CFGR = 0x00000000;
 8000b30:	4b1e      	ldr	r3, [pc, #120]	; (8000bac <SystemInit+0xec>)
 8000b32:	2200      	movs	r2, #0
 8000b34:	61da      	str	r2, [r3, #28]

  /* Reset D3CFGR register */
  RCC->D3CFGR = 0x00000000;
 8000b36:	4b1d      	ldr	r3, [pc, #116]	; (8000bac <SystemInit+0xec>)
 8000b38:	2200      	movs	r2, #0
 8000b3a:	621a      	str	r2, [r3, #32]

  /* Reset SRDCFGR register */
  RCC->SRDCFGR = 0x00000000;
#endif
  /* Reset PLLCKSELR register */
  RCC->PLLCKSELR = 0x02020200;
 8000b3c:	4b1b      	ldr	r3, [pc, #108]	; (8000bac <SystemInit+0xec>)
 8000b3e:	4a1d      	ldr	r2, [pc, #116]	; (8000bb4 <SystemInit+0xf4>)
 8000b40:	629a      	str	r2, [r3, #40]	; 0x28

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x01FF0000;
 8000b42:	4b1a      	ldr	r3, [pc, #104]	; (8000bac <SystemInit+0xec>)
 8000b44:	4a1c      	ldr	r2, [pc, #112]	; (8000bb8 <SystemInit+0xf8>)
 8000b46:	62da      	str	r2, [r3, #44]	; 0x2c
  /* Reset PLL1DIVR register */
  RCC->PLL1DIVR = 0x01010280;
 8000b48:	4b18      	ldr	r3, [pc, #96]	; (8000bac <SystemInit+0xec>)
 8000b4a:	4a1c      	ldr	r2, [pc, #112]	; (8000bbc <SystemInit+0xfc>)
 8000b4c:	631a      	str	r2, [r3, #48]	; 0x30
  /* Reset PLL1FRACR register */
  RCC->PLL1FRACR = 0x00000000;
 8000b4e:	4b17      	ldr	r3, [pc, #92]	; (8000bac <SystemInit+0xec>)
 8000b50:	2200      	movs	r2, #0
 8000b52:	635a      	str	r2, [r3, #52]	; 0x34

  /* Reset PLL2DIVR register */
  RCC->PLL2DIVR = 0x01010280;
 8000b54:	4b15      	ldr	r3, [pc, #84]	; (8000bac <SystemInit+0xec>)
 8000b56:	4a19      	ldr	r2, [pc, #100]	; (8000bbc <SystemInit+0xfc>)
 8000b58:	639a      	str	r2, [r3, #56]	; 0x38

  /* Reset PLL2FRACR register */

  RCC->PLL2FRACR = 0x00000000;
 8000b5a:	4b14      	ldr	r3, [pc, #80]	; (8000bac <SystemInit+0xec>)
 8000b5c:	2200      	movs	r2, #0
 8000b5e:	63da      	str	r2, [r3, #60]	; 0x3c
  /* Reset PLL3DIVR register */
  RCC->PLL3DIVR = 0x01010280;
 8000b60:	4b12      	ldr	r3, [pc, #72]	; (8000bac <SystemInit+0xec>)
 8000b62:	4a16      	ldr	r2, [pc, #88]	; (8000bbc <SystemInit+0xfc>)
 8000b64:	641a      	str	r2, [r3, #64]	; 0x40

  /* Reset PLL3FRACR register */
  RCC->PLL3FRACR = 0x00000000;
 8000b66:	4b11      	ldr	r3, [pc, #68]	; (8000bac <SystemInit+0xec>)
 8000b68:	2200      	movs	r2, #0
 8000b6a:	645a      	str	r2, [r3, #68]	; 0x44

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 8000b6c:	4b0f      	ldr	r3, [pc, #60]	; (8000bac <SystemInit+0xec>)
 8000b6e:	681b      	ldr	r3, [r3, #0]
 8000b70:	4a0e      	ldr	r2, [pc, #56]	; (8000bac <SystemInit+0xec>)
 8000b72:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8000b76:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000;
 8000b78:	4b0c      	ldr	r3, [pc, #48]	; (8000bac <SystemInit+0xec>)
 8000b7a:	2200      	movs	r2, #0
 8000b7c:	661a      	str	r2, [r3, #96]	; 0x60

#if (STM32H7_DEV_ID == 0x450UL)
  /* dual core CM7 or single core line */
  if((DBGMCU->IDCODE & 0xFFFF0000U) < 0x20000000U)
 8000b7e:	4b10      	ldr	r3, [pc, #64]	; (8000bc0 <SystemInit+0x100>)
 8000b80:	681a      	ldr	r2, [r3, #0]
 8000b82:	4b10      	ldr	r3, [pc, #64]	; (8000bc4 <SystemInit+0x104>)
 8000b84:	4013      	ands	r3, r2
 8000b86:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8000b8a:	d202      	bcs.n	8000b92 <SystemInit+0xd2>
  {
    /* if stm32h7 revY*/
    /* Change  the switch matrix read issuing capability to 1 for the AXI SRAM target (Target 7) */
    *((__IO uint32_t*)0x51008108) = 0x000000001U;
 8000b8c:	4b0e      	ldr	r3, [pc, #56]	; (8000bc8 <SystemInit+0x108>)
 8000b8e:	2201      	movs	r2, #1
 8000b90:	601a      	str	r2, [r3, #0]
  /*
   * Disable the FMC bank1 (enabled after reset).
   * This, prevents CPU speculation access on this bank which blocks the use of FMC during
   * 24us. During this time the others FMC master (such as LTDC) cannot use it!
   */
  FMC_Bank1_R->BTCR[0] = 0x000030D2;
 8000b92:	4b0e      	ldr	r3, [pc, #56]	; (8000bcc <SystemInit+0x10c>)
 8000b94:	f243 02d2 	movw	r2, #12498	; 0x30d2
 8000b98:	601a      	str	r2, [r3, #0]
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal D1 AXI-RAM or in Internal FLASH */
#endif /* USER_VECT_TAB_ADDRESS */

#endif /*DUAL_CORE && CORE_CM4*/
}
 8000b9a:	bf00      	nop
 8000b9c:	46bd      	mov	sp, r7
 8000b9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ba2:	4770      	bx	lr
 8000ba4:	e000ed00 	.word	0xe000ed00
 8000ba8:	52002000 	.word	0x52002000
 8000bac:	58024400 	.word	0x58024400
 8000bb0:	eaf6ed7f 	.word	0xeaf6ed7f
 8000bb4:	02020200 	.word	0x02020200
 8000bb8:	01ff0000 	.word	0x01ff0000
 8000bbc:	01010280 	.word	0x01010280
 8000bc0:	5c001000 	.word	0x5c001000
 8000bc4:	ffff0000 	.word	0xffff0000
 8000bc8:	51008108 	.word	0x51008108
 8000bcc:	52004000 	.word	0x52004000

08000bd0 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack      /* set stack pointer */
 8000bd0:	f8df d034 	ldr.w	sp, [pc, #52]	; 8000c08 <LoopFillZerobss+0xe>

/* Call the clock system initialization function.*/
  bl  SystemInit
 8000bd4:	f7ff ff74 	bl	8000ac0 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000bd8:	480c      	ldr	r0, [pc, #48]	; (8000c0c <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8000bda:	490d      	ldr	r1, [pc, #52]	; (8000c10 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8000bdc:	4a0d      	ldr	r2, [pc, #52]	; (8000c14 <LoopFillZerobss+0x1a>)
  movs r3, #0
 8000bde:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000be0:	e002      	b.n	8000be8 <LoopCopyDataInit>

08000be2 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000be2:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000be4:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000be6:	3304      	adds	r3, #4

08000be8 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000be8:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000bea:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000bec:	d3f9      	bcc.n	8000be2 <CopyDataInit>
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000bee:	4a0a      	ldr	r2, [pc, #40]	; (8000c18 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8000bf0:	4c0a      	ldr	r4, [pc, #40]	; (8000c1c <LoopFillZerobss+0x22>)
  movs r3, #0
 8000bf2:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000bf4:	e001      	b.n	8000bfa <LoopFillZerobss>

08000bf6 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000bf6:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000bf8:	3204      	adds	r2, #4

08000bfa <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000bfa:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000bfc:	d3fb      	bcc.n	8000bf6 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8000bfe:	f009 fbd3 	bl	800a3a8 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8000c02:	f7ff fce3 	bl	80005cc <main>
  bx  lr
 8000c06:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8000c08:	24080000 	.word	0x24080000
  ldr r0, =_sdata
 8000c0c:	24000000 	.word	0x24000000
  ldr r1, =_edata
 8000c10:	24000164 	.word	0x24000164
  ldr r2, =_sidata
 8000c14:	0800adb4 	.word	0x0800adb4
  ldr r2, =_sbss
 8000c18:	24000164 	.word	0x24000164
  ldr r4, =_ebss
 8000c1c:	24001e30 	.word	0x24001e30

08000c20 <ADC3_IRQHandler>:
 * @retval None
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8000c20:	e7fe      	b.n	8000c20 <ADC3_IRQHandler>
	...

08000c24 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000c24:	b580      	push	{r7, lr}
 8000c26:	b082      	sub	sp, #8
 8000c28:	af00      	add	r7, sp, #0
   __HAL_ART_CONFIG_BASE_ADDRESS(0x08100000UL);  /* Configure the Cortex-M4 ART Base address to the Flash Bank 2 : */
   __HAL_ART_ENABLE();                           /* Enable the Cortex-M4 ART */
#endif /* DUAL_CORE &&  CORE_CM4 */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000c2a:	2003      	movs	r0, #3
 8000c2c:	f000 f98c 	bl	8000f48 <HAL_NVIC_SetPriorityGrouping>

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 8000c30:	f002 fef6 	bl	8003a20 <HAL_RCC_GetSysClockFreq>
 8000c34:	4602      	mov	r2, r0
 8000c36:	4b15      	ldr	r3, [pc, #84]	; (8000c8c <HAL_Init+0x68>)
 8000c38:	699b      	ldr	r3, [r3, #24]
 8000c3a:	0a1b      	lsrs	r3, r3, #8
 8000c3c:	f003 030f 	and.w	r3, r3, #15
 8000c40:	4913      	ldr	r1, [pc, #76]	; (8000c90 <HAL_Init+0x6c>)
 8000c42:	5ccb      	ldrb	r3, [r1, r3]
 8000c44:	f003 031f 	and.w	r3, r3, #31
 8000c48:	fa22 f303 	lsr.w	r3, r2, r3
 8000c4c:	607b      	str	r3, [r7, #4]
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

  /* Update the SystemD2Clock global variable */
#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8000c4e:	4b0f      	ldr	r3, [pc, #60]	; (8000c8c <HAL_Init+0x68>)
 8000c50:	699b      	ldr	r3, [r3, #24]
 8000c52:	f003 030f 	and.w	r3, r3, #15
 8000c56:	4a0e      	ldr	r2, [pc, #56]	; (8000c90 <HAL_Init+0x6c>)
 8000c58:	5cd3      	ldrb	r3, [r2, r3]
 8000c5a:	f003 031f 	and.w	r3, r3, #31
 8000c5e:	687a      	ldr	r2, [r7, #4]
 8000c60:	fa22 f303 	lsr.w	r3, r2, r3
 8000c64:	4a0b      	ldr	r2, [pc, #44]	; (8000c94 <HAL_Init+0x70>)
 8000c66:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8000c68:	4a0b      	ldr	r2, [pc, #44]	; (8000c98 <HAL_Init+0x74>)
 8000c6a:	687b      	ldr	r3, [r7, #4]
 8000c6c:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if(HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8000c6e:	200f      	movs	r0, #15
 8000c70:	f000 f814 	bl	8000c9c <HAL_InitTick>
 8000c74:	4603      	mov	r3, r0
 8000c76:	2b00      	cmp	r3, #0
 8000c78:	d001      	beq.n	8000c7e <HAL_Init+0x5a>
  {
    return HAL_ERROR;
 8000c7a:	2301      	movs	r3, #1
 8000c7c:	e002      	b.n	8000c84 <HAL_Init+0x60>
  }

  /* Init the low level hardware */
  HAL_MspInit();
 8000c7e:	f7ff fe89 	bl	8000994 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000c82:	2300      	movs	r3, #0
}
 8000c84:	4618      	mov	r0, r3
 8000c86:	3708      	adds	r7, #8
 8000c88:	46bd      	mov	sp, r7
 8000c8a:	bd80      	pop	{r7, pc}
 8000c8c:	58024400 	.word	0x58024400
 8000c90:	0800ad68 	.word	0x0800ad68
 8000c94:	24000004 	.word	0x24000004
 8000c98:	24000000 	.word	0x24000000

08000c9c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000c9c:	b580      	push	{r7, lr}
 8000c9e:	b082      	sub	sp, #8
 8000ca0:	af00      	add	r7, sp, #0
 8000ca2:	6078      	str	r0, [r7, #4]
  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that don't take the value zero)*/
  if((uint32_t)uwTickFreq == 0UL)
 8000ca4:	4b15      	ldr	r3, [pc, #84]	; (8000cfc <HAL_InitTick+0x60>)
 8000ca6:	781b      	ldrb	r3, [r3, #0]
 8000ca8:	2b00      	cmp	r3, #0
 8000caa:	d101      	bne.n	8000cb0 <HAL_InitTick+0x14>
  {
    return HAL_ERROR;
 8000cac:	2301      	movs	r3, #1
 8000cae:	e021      	b.n	8000cf4 <HAL_InitTick+0x58>
  }

    /* Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000UL / (uint32_t)uwTickFreq)) > 0U)
 8000cb0:	4b13      	ldr	r3, [pc, #76]	; (8000d00 <HAL_InitTick+0x64>)
 8000cb2:	681a      	ldr	r2, [r3, #0]
 8000cb4:	4b11      	ldr	r3, [pc, #68]	; (8000cfc <HAL_InitTick+0x60>)
 8000cb6:	781b      	ldrb	r3, [r3, #0]
 8000cb8:	4619      	mov	r1, r3
 8000cba:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000cbe:	fbb3 f3f1 	udiv	r3, r3, r1
 8000cc2:	fbb2 f3f3 	udiv	r3, r2, r3
 8000cc6:	4618      	mov	r0, r3
 8000cc8:	f000 f971 	bl	8000fae <HAL_SYSTICK_Config>
 8000ccc:	4603      	mov	r3, r0
 8000cce:	2b00      	cmp	r3, #0
 8000cd0:	d001      	beq.n	8000cd6 <HAL_InitTick+0x3a>
    {
      return HAL_ERROR;
 8000cd2:	2301      	movs	r3, #1
 8000cd4:	e00e      	b.n	8000cf4 <HAL_InitTick+0x58>
    }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000cd6:	687b      	ldr	r3, [r7, #4]
 8000cd8:	2b0f      	cmp	r3, #15
 8000cda:	d80a      	bhi.n	8000cf2 <HAL_InitTick+0x56>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000cdc:	2200      	movs	r2, #0
 8000cde:	6879      	ldr	r1, [r7, #4]
 8000ce0:	f04f 30ff 	mov.w	r0, #4294967295
 8000ce4:	f000 f93b 	bl	8000f5e <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000ce8:	4a06      	ldr	r2, [pc, #24]	; (8000d04 <HAL_InitTick+0x68>)
 8000cea:	687b      	ldr	r3, [r7, #4]
 8000cec:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8000cee:	2300      	movs	r3, #0
 8000cf0:	e000      	b.n	8000cf4 <HAL_InitTick+0x58>
    return HAL_ERROR;
 8000cf2:	2301      	movs	r3, #1
}
 8000cf4:	4618      	mov	r0, r3
 8000cf6:	3708      	adds	r7, #8
 8000cf8:	46bd      	mov	sp, r7
 8000cfa:	bd80      	pop	{r7, pc}
 8000cfc:	2400000c 	.word	0x2400000c
 8000d00:	24000000 	.word	0x24000000
 8000d04:	24000008 	.word	0x24000008

08000d08 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000d08:	b480      	push	{r7}
 8000d0a:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8000d0c:	4b06      	ldr	r3, [pc, #24]	; (8000d28 <HAL_IncTick+0x20>)
 8000d0e:	781b      	ldrb	r3, [r3, #0]
 8000d10:	461a      	mov	r2, r3
 8000d12:	4b06      	ldr	r3, [pc, #24]	; (8000d2c <HAL_IncTick+0x24>)
 8000d14:	681b      	ldr	r3, [r3, #0]
 8000d16:	4413      	add	r3, r2
 8000d18:	4a04      	ldr	r2, [pc, #16]	; (8000d2c <HAL_IncTick+0x24>)
 8000d1a:	6013      	str	r3, [r2, #0]
}
 8000d1c:	bf00      	nop
 8000d1e:	46bd      	mov	sp, r7
 8000d20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d24:	4770      	bx	lr
 8000d26:	bf00      	nop
 8000d28:	2400000c 	.word	0x2400000c
 8000d2c:	24000210 	.word	0x24000210

08000d30 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000d30:	b480      	push	{r7}
 8000d32:	af00      	add	r7, sp, #0
  return uwTick;
 8000d34:	4b03      	ldr	r3, [pc, #12]	; (8000d44 <HAL_GetTick+0x14>)
 8000d36:	681b      	ldr	r3, [r3, #0]
}
 8000d38:	4618      	mov	r0, r3
 8000d3a:	46bd      	mov	sp, r7
 8000d3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d40:	4770      	bx	lr
 8000d42:	bf00      	nop
 8000d44:	24000210 	.word	0x24000210

08000d48 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000d48:	b580      	push	{r7, lr}
 8000d4a:	b084      	sub	sp, #16
 8000d4c:	af00      	add	r7, sp, #0
 8000d4e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8000d50:	f7ff ffee 	bl	8000d30 <HAL_GetTick>
 8000d54:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8000d56:	687b      	ldr	r3, [r7, #4]
 8000d58:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000d5a:	68fb      	ldr	r3, [r7, #12]
 8000d5c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000d60:	d005      	beq.n	8000d6e <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8000d62:	4b0a      	ldr	r3, [pc, #40]	; (8000d8c <HAL_Delay+0x44>)
 8000d64:	781b      	ldrb	r3, [r3, #0]
 8000d66:	461a      	mov	r2, r3
 8000d68:	68fb      	ldr	r3, [r7, #12]
 8000d6a:	4413      	add	r3, r2
 8000d6c:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8000d6e:	bf00      	nop
 8000d70:	f7ff ffde 	bl	8000d30 <HAL_GetTick>
 8000d74:	4602      	mov	r2, r0
 8000d76:	68bb      	ldr	r3, [r7, #8]
 8000d78:	1ad3      	subs	r3, r2, r3
 8000d7a:	68fa      	ldr	r2, [r7, #12]
 8000d7c:	429a      	cmp	r2, r3
 8000d7e:	d8f7      	bhi.n	8000d70 <HAL_Delay+0x28>
  {
  }
}
 8000d80:	bf00      	nop
 8000d82:	bf00      	nop
 8000d84:	3710      	adds	r7, #16
 8000d86:	46bd      	mov	sp, r7
 8000d88:	bd80      	pop	{r7, pc}
 8000d8a:	bf00      	nop
 8000d8c:	2400000c 	.word	0x2400000c

08000d90 <HAL_GetREVID>:
/**
  * @brief  Returns the device revision identifier.
  * @retval Device revision identifier
  */
uint32_t HAL_GetREVID(void)
{
 8000d90:	b480      	push	{r7}
 8000d92:	af00      	add	r7, sp, #0
   return((DBGMCU->IDCODE) >> 16);
 8000d94:	4b03      	ldr	r3, [pc, #12]	; (8000da4 <HAL_GetREVID+0x14>)
 8000d96:	681b      	ldr	r3, [r3, #0]
 8000d98:	0c1b      	lsrs	r3, r3, #16
}
 8000d9a:	4618      	mov	r0, r3
 8000d9c:	46bd      	mov	sp, r7
 8000d9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000da2:	4770      	bx	lr
 8000da4:	5c001000 	.word	0x5c001000

08000da8 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000da8:	b480      	push	{r7}
 8000daa:	b085      	sub	sp, #20
 8000dac:	af00      	add	r7, sp, #0
 8000dae:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000db0:	687b      	ldr	r3, [r7, #4]
 8000db2:	f003 0307 	and.w	r3, r3, #7
 8000db6:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000db8:	4b0b      	ldr	r3, [pc, #44]	; (8000de8 <__NVIC_SetPriorityGrouping+0x40>)
 8000dba:	68db      	ldr	r3, [r3, #12]
 8000dbc:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000dbe:	68ba      	ldr	r2, [r7, #8]
 8000dc0:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8000dc4:	4013      	ands	r3, r2
 8000dc6:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000dc8:	68fb      	ldr	r3, [r7, #12]
 8000dca:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000dcc:	68bb      	ldr	r3, [r7, #8]
 8000dce:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 8000dd0:	4b06      	ldr	r3, [pc, #24]	; (8000dec <__NVIC_SetPriorityGrouping+0x44>)
 8000dd2:	4313      	orrs	r3, r2
 8000dd4:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000dd6:	4a04      	ldr	r2, [pc, #16]	; (8000de8 <__NVIC_SetPriorityGrouping+0x40>)
 8000dd8:	68bb      	ldr	r3, [r7, #8]
 8000dda:	60d3      	str	r3, [r2, #12]
}
 8000ddc:	bf00      	nop
 8000dde:	3714      	adds	r7, #20
 8000de0:	46bd      	mov	sp, r7
 8000de2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000de6:	4770      	bx	lr
 8000de8:	e000ed00 	.word	0xe000ed00
 8000dec:	05fa0000 	.word	0x05fa0000

08000df0 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000df0:	b480      	push	{r7}
 8000df2:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000df4:	4b04      	ldr	r3, [pc, #16]	; (8000e08 <__NVIC_GetPriorityGrouping+0x18>)
 8000df6:	68db      	ldr	r3, [r3, #12]
 8000df8:	0a1b      	lsrs	r3, r3, #8
 8000dfa:	f003 0307 	and.w	r3, r3, #7
}
 8000dfe:	4618      	mov	r0, r3
 8000e00:	46bd      	mov	sp, r7
 8000e02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e06:	4770      	bx	lr
 8000e08:	e000ed00 	.word	0xe000ed00

08000e0c <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000e0c:	b480      	push	{r7}
 8000e0e:	b083      	sub	sp, #12
 8000e10:	af00      	add	r7, sp, #0
 8000e12:	4603      	mov	r3, r0
 8000e14:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 8000e16:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8000e1a:	2b00      	cmp	r3, #0
 8000e1c:	db0b      	blt.n	8000e36 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000e1e:	88fb      	ldrh	r3, [r7, #6]
 8000e20:	f003 021f 	and.w	r2, r3, #31
 8000e24:	4907      	ldr	r1, [pc, #28]	; (8000e44 <__NVIC_EnableIRQ+0x38>)
 8000e26:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8000e2a:	095b      	lsrs	r3, r3, #5
 8000e2c:	2001      	movs	r0, #1
 8000e2e:	fa00 f202 	lsl.w	r2, r0, r2
 8000e32:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8000e36:	bf00      	nop
 8000e38:	370c      	adds	r7, #12
 8000e3a:	46bd      	mov	sp, r7
 8000e3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e40:	4770      	bx	lr
 8000e42:	bf00      	nop
 8000e44:	e000e100 	.word	0xe000e100

08000e48 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000e48:	b480      	push	{r7}
 8000e4a:	b083      	sub	sp, #12
 8000e4c:	af00      	add	r7, sp, #0
 8000e4e:	4603      	mov	r3, r0
 8000e50:	6039      	str	r1, [r7, #0]
 8000e52:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 8000e54:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8000e58:	2b00      	cmp	r3, #0
 8000e5a:	db0a      	blt.n	8000e72 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000e5c:	683b      	ldr	r3, [r7, #0]
 8000e5e:	b2da      	uxtb	r2, r3
 8000e60:	490c      	ldr	r1, [pc, #48]	; (8000e94 <__NVIC_SetPriority+0x4c>)
 8000e62:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8000e66:	0112      	lsls	r2, r2, #4
 8000e68:	b2d2      	uxtb	r2, r2
 8000e6a:	440b      	add	r3, r1
 8000e6c:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000e70:	e00a      	b.n	8000e88 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000e72:	683b      	ldr	r3, [r7, #0]
 8000e74:	b2da      	uxtb	r2, r3
 8000e76:	4908      	ldr	r1, [pc, #32]	; (8000e98 <__NVIC_SetPriority+0x50>)
 8000e78:	88fb      	ldrh	r3, [r7, #6]
 8000e7a:	f003 030f 	and.w	r3, r3, #15
 8000e7e:	3b04      	subs	r3, #4
 8000e80:	0112      	lsls	r2, r2, #4
 8000e82:	b2d2      	uxtb	r2, r2
 8000e84:	440b      	add	r3, r1
 8000e86:	761a      	strb	r2, [r3, #24]
}
 8000e88:	bf00      	nop
 8000e8a:	370c      	adds	r7, #12
 8000e8c:	46bd      	mov	sp, r7
 8000e8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e92:	4770      	bx	lr
 8000e94:	e000e100 	.word	0xe000e100
 8000e98:	e000ed00 	.word	0xe000ed00

08000e9c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000e9c:	b480      	push	{r7}
 8000e9e:	b089      	sub	sp, #36	; 0x24
 8000ea0:	af00      	add	r7, sp, #0
 8000ea2:	60f8      	str	r0, [r7, #12]
 8000ea4:	60b9      	str	r1, [r7, #8]
 8000ea6:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000ea8:	68fb      	ldr	r3, [r7, #12]
 8000eaa:	f003 0307 	and.w	r3, r3, #7
 8000eae:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000eb0:	69fb      	ldr	r3, [r7, #28]
 8000eb2:	f1c3 0307 	rsb	r3, r3, #7
 8000eb6:	2b04      	cmp	r3, #4
 8000eb8:	bf28      	it	cs
 8000eba:	2304      	movcs	r3, #4
 8000ebc:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000ebe:	69fb      	ldr	r3, [r7, #28]
 8000ec0:	3304      	adds	r3, #4
 8000ec2:	2b06      	cmp	r3, #6
 8000ec4:	d902      	bls.n	8000ecc <NVIC_EncodePriority+0x30>
 8000ec6:	69fb      	ldr	r3, [r7, #28]
 8000ec8:	3b03      	subs	r3, #3
 8000eca:	e000      	b.n	8000ece <NVIC_EncodePriority+0x32>
 8000ecc:	2300      	movs	r3, #0
 8000ece:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000ed0:	f04f 32ff 	mov.w	r2, #4294967295
 8000ed4:	69bb      	ldr	r3, [r7, #24]
 8000ed6:	fa02 f303 	lsl.w	r3, r2, r3
 8000eda:	43da      	mvns	r2, r3
 8000edc:	68bb      	ldr	r3, [r7, #8]
 8000ede:	401a      	ands	r2, r3
 8000ee0:	697b      	ldr	r3, [r7, #20]
 8000ee2:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000ee4:	f04f 31ff 	mov.w	r1, #4294967295
 8000ee8:	697b      	ldr	r3, [r7, #20]
 8000eea:	fa01 f303 	lsl.w	r3, r1, r3
 8000eee:	43d9      	mvns	r1, r3
 8000ef0:	687b      	ldr	r3, [r7, #4]
 8000ef2:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000ef4:	4313      	orrs	r3, r2
         );
}
 8000ef6:	4618      	mov	r0, r3
 8000ef8:	3724      	adds	r7, #36	; 0x24
 8000efa:	46bd      	mov	sp, r7
 8000efc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f00:	4770      	bx	lr
	...

08000f04 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000f04:	b580      	push	{r7, lr}
 8000f06:	b082      	sub	sp, #8
 8000f08:	af00      	add	r7, sp, #0
 8000f0a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000f0c:	687b      	ldr	r3, [r7, #4]
 8000f0e:	3b01      	subs	r3, #1
 8000f10:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8000f14:	d301      	bcc.n	8000f1a <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8000f16:	2301      	movs	r3, #1
 8000f18:	e00f      	b.n	8000f3a <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000f1a:	4a0a      	ldr	r2, [pc, #40]	; (8000f44 <SysTick_Config+0x40>)
 8000f1c:	687b      	ldr	r3, [r7, #4]
 8000f1e:	3b01      	subs	r3, #1
 8000f20:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000f22:	210f      	movs	r1, #15
 8000f24:	f04f 30ff 	mov.w	r0, #4294967295
 8000f28:	f7ff ff8e 	bl	8000e48 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000f2c:	4b05      	ldr	r3, [pc, #20]	; (8000f44 <SysTick_Config+0x40>)
 8000f2e:	2200      	movs	r2, #0
 8000f30:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000f32:	4b04      	ldr	r3, [pc, #16]	; (8000f44 <SysTick_Config+0x40>)
 8000f34:	2207      	movs	r2, #7
 8000f36:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000f38:	2300      	movs	r3, #0
}
 8000f3a:	4618      	mov	r0, r3
 8000f3c:	3708      	adds	r7, #8
 8000f3e:	46bd      	mov	sp, r7
 8000f40:	bd80      	pop	{r7, pc}
 8000f42:	bf00      	nop
 8000f44:	e000e010 	.word	0xe000e010

08000f48 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000f48:	b580      	push	{r7, lr}
 8000f4a:	b082      	sub	sp, #8
 8000f4c:	af00      	add	r7, sp, #0
 8000f4e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000f50:	6878      	ldr	r0, [r7, #4]
 8000f52:	f7ff ff29 	bl	8000da8 <__NVIC_SetPriorityGrouping>
}
 8000f56:	bf00      	nop
 8000f58:	3708      	adds	r7, #8
 8000f5a:	46bd      	mov	sp, r7
 8000f5c:	bd80      	pop	{r7, pc}

08000f5e <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000f5e:	b580      	push	{r7, lr}
 8000f60:	b086      	sub	sp, #24
 8000f62:	af00      	add	r7, sp, #0
 8000f64:	4603      	mov	r3, r0
 8000f66:	60b9      	str	r1, [r7, #8]
 8000f68:	607a      	str	r2, [r7, #4]
 8000f6a:	81fb      	strh	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8000f6c:	f7ff ff40 	bl	8000df0 <__NVIC_GetPriorityGrouping>
 8000f70:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000f72:	687a      	ldr	r2, [r7, #4]
 8000f74:	68b9      	ldr	r1, [r7, #8]
 8000f76:	6978      	ldr	r0, [r7, #20]
 8000f78:	f7ff ff90 	bl	8000e9c <NVIC_EncodePriority>
 8000f7c:	4602      	mov	r2, r0
 8000f7e:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8000f82:	4611      	mov	r1, r2
 8000f84:	4618      	mov	r0, r3
 8000f86:	f7ff ff5f 	bl	8000e48 <__NVIC_SetPriority>
}
 8000f8a:	bf00      	nop
 8000f8c:	3718      	adds	r7, #24
 8000f8e:	46bd      	mov	sp, r7
 8000f90:	bd80      	pop	{r7, pc}

08000f92 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32h7xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000f92:	b580      	push	{r7, lr}
 8000f94:	b082      	sub	sp, #8
 8000f96:	af00      	add	r7, sp, #0
 8000f98:	4603      	mov	r3, r0
 8000f9a:	80fb      	strh	r3, [r7, #6]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8000f9c:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8000fa0:	4618      	mov	r0, r3
 8000fa2:	f7ff ff33 	bl	8000e0c <__NVIC_EnableIRQ>
}
 8000fa6:	bf00      	nop
 8000fa8:	3708      	adds	r7, #8
 8000faa:	46bd      	mov	sp, r7
 8000fac:	bd80      	pop	{r7, pc}

08000fae <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status   - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8000fae:	b580      	push	{r7, lr}
 8000fb0:	b082      	sub	sp, #8
 8000fb2:	af00      	add	r7, sp, #0
 8000fb4:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8000fb6:	6878      	ldr	r0, [r7, #4]
 8000fb8:	f7ff ffa4 	bl	8000f04 <SysTick_Config>
 8000fbc:	4603      	mov	r3, r0
}
 8000fbe:	4618      	mov	r0, r3
 8000fc0:	3708      	adds	r7, #8
 8000fc2:	46bd      	mov	sp, r7
 8000fc4:	bd80      	pop	{r7, pc}
	...

08000fc8 <HAL_DMA_Abort_IT>:
  * @param  hdma  : pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8000fc8:	b580      	push	{r7, lr}
 8000fca:	b084      	sub	sp, #16
 8000fcc:	af00      	add	r7, sp, #0
 8000fce:	6078      	str	r0, [r7, #4]
  BDMA_Base_Registers *regs_bdma;

  /* Check the DMA peripheral handle */
  if(hdma == NULL)
 8000fd0:	687b      	ldr	r3, [r7, #4]
 8000fd2:	2b00      	cmp	r3, #0
 8000fd4:	d101      	bne.n	8000fda <HAL_DMA_Abort_IT+0x12>
  {
    return HAL_ERROR;
 8000fd6:	2301      	movs	r3, #1
 8000fd8:	e237      	b.n	800144a <HAL_DMA_Abort_IT+0x482>
  }

  if(hdma->State != HAL_DMA_STATE_BUSY)
 8000fda:	687b      	ldr	r3, [r7, #4]
 8000fdc:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8000fe0:	b2db      	uxtb	r3, r3
 8000fe2:	2b02      	cmp	r3, #2
 8000fe4:	d004      	beq.n	8000ff0 <HAL_DMA_Abort_IT+0x28>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8000fe6:	687b      	ldr	r3, [r7, #4]
 8000fe8:	2280      	movs	r2, #128	; 0x80
 8000fea:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 8000fec:	2301      	movs	r3, #1
 8000fee:	e22c      	b.n	800144a <HAL_DMA_Abort_IT+0x482>
  }
  else
  {
    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8000ff0:	687b      	ldr	r3, [r7, #4]
 8000ff2:	681b      	ldr	r3, [r3, #0]
 8000ff4:	4a5c      	ldr	r2, [pc, #368]	; (8001168 <HAL_DMA_Abort_IT+0x1a0>)
 8000ff6:	4293      	cmp	r3, r2
 8000ff8:	d04a      	beq.n	8001090 <HAL_DMA_Abort_IT+0xc8>
 8000ffa:	687b      	ldr	r3, [r7, #4]
 8000ffc:	681b      	ldr	r3, [r3, #0]
 8000ffe:	4a5b      	ldr	r2, [pc, #364]	; (800116c <HAL_DMA_Abort_IT+0x1a4>)
 8001000:	4293      	cmp	r3, r2
 8001002:	d045      	beq.n	8001090 <HAL_DMA_Abort_IT+0xc8>
 8001004:	687b      	ldr	r3, [r7, #4]
 8001006:	681b      	ldr	r3, [r3, #0]
 8001008:	4a59      	ldr	r2, [pc, #356]	; (8001170 <HAL_DMA_Abort_IT+0x1a8>)
 800100a:	4293      	cmp	r3, r2
 800100c:	d040      	beq.n	8001090 <HAL_DMA_Abort_IT+0xc8>
 800100e:	687b      	ldr	r3, [r7, #4]
 8001010:	681b      	ldr	r3, [r3, #0]
 8001012:	4a58      	ldr	r2, [pc, #352]	; (8001174 <HAL_DMA_Abort_IT+0x1ac>)
 8001014:	4293      	cmp	r3, r2
 8001016:	d03b      	beq.n	8001090 <HAL_DMA_Abort_IT+0xc8>
 8001018:	687b      	ldr	r3, [r7, #4]
 800101a:	681b      	ldr	r3, [r3, #0]
 800101c:	4a56      	ldr	r2, [pc, #344]	; (8001178 <HAL_DMA_Abort_IT+0x1b0>)
 800101e:	4293      	cmp	r3, r2
 8001020:	d036      	beq.n	8001090 <HAL_DMA_Abort_IT+0xc8>
 8001022:	687b      	ldr	r3, [r7, #4]
 8001024:	681b      	ldr	r3, [r3, #0]
 8001026:	4a55      	ldr	r2, [pc, #340]	; (800117c <HAL_DMA_Abort_IT+0x1b4>)
 8001028:	4293      	cmp	r3, r2
 800102a:	d031      	beq.n	8001090 <HAL_DMA_Abort_IT+0xc8>
 800102c:	687b      	ldr	r3, [r7, #4]
 800102e:	681b      	ldr	r3, [r3, #0]
 8001030:	4a53      	ldr	r2, [pc, #332]	; (8001180 <HAL_DMA_Abort_IT+0x1b8>)
 8001032:	4293      	cmp	r3, r2
 8001034:	d02c      	beq.n	8001090 <HAL_DMA_Abort_IT+0xc8>
 8001036:	687b      	ldr	r3, [r7, #4]
 8001038:	681b      	ldr	r3, [r3, #0]
 800103a:	4a52      	ldr	r2, [pc, #328]	; (8001184 <HAL_DMA_Abort_IT+0x1bc>)
 800103c:	4293      	cmp	r3, r2
 800103e:	d027      	beq.n	8001090 <HAL_DMA_Abort_IT+0xc8>
 8001040:	687b      	ldr	r3, [r7, #4]
 8001042:	681b      	ldr	r3, [r3, #0]
 8001044:	4a50      	ldr	r2, [pc, #320]	; (8001188 <HAL_DMA_Abort_IT+0x1c0>)
 8001046:	4293      	cmp	r3, r2
 8001048:	d022      	beq.n	8001090 <HAL_DMA_Abort_IT+0xc8>
 800104a:	687b      	ldr	r3, [r7, #4]
 800104c:	681b      	ldr	r3, [r3, #0]
 800104e:	4a4f      	ldr	r2, [pc, #316]	; (800118c <HAL_DMA_Abort_IT+0x1c4>)
 8001050:	4293      	cmp	r3, r2
 8001052:	d01d      	beq.n	8001090 <HAL_DMA_Abort_IT+0xc8>
 8001054:	687b      	ldr	r3, [r7, #4]
 8001056:	681b      	ldr	r3, [r3, #0]
 8001058:	4a4d      	ldr	r2, [pc, #308]	; (8001190 <HAL_DMA_Abort_IT+0x1c8>)
 800105a:	4293      	cmp	r3, r2
 800105c:	d018      	beq.n	8001090 <HAL_DMA_Abort_IT+0xc8>
 800105e:	687b      	ldr	r3, [r7, #4]
 8001060:	681b      	ldr	r3, [r3, #0]
 8001062:	4a4c      	ldr	r2, [pc, #304]	; (8001194 <HAL_DMA_Abort_IT+0x1cc>)
 8001064:	4293      	cmp	r3, r2
 8001066:	d013      	beq.n	8001090 <HAL_DMA_Abort_IT+0xc8>
 8001068:	687b      	ldr	r3, [r7, #4]
 800106a:	681b      	ldr	r3, [r3, #0]
 800106c:	4a4a      	ldr	r2, [pc, #296]	; (8001198 <HAL_DMA_Abort_IT+0x1d0>)
 800106e:	4293      	cmp	r3, r2
 8001070:	d00e      	beq.n	8001090 <HAL_DMA_Abort_IT+0xc8>
 8001072:	687b      	ldr	r3, [r7, #4]
 8001074:	681b      	ldr	r3, [r3, #0]
 8001076:	4a49      	ldr	r2, [pc, #292]	; (800119c <HAL_DMA_Abort_IT+0x1d4>)
 8001078:	4293      	cmp	r3, r2
 800107a:	d009      	beq.n	8001090 <HAL_DMA_Abort_IT+0xc8>
 800107c:	687b      	ldr	r3, [r7, #4]
 800107e:	681b      	ldr	r3, [r3, #0]
 8001080:	4a47      	ldr	r2, [pc, #284]	; (80011a0 <HAL_DMA_Abort_IT+0x1d8>)
 8001082:	4293      	cmp	r3, r2
 8001084:	d004      	beq.n	8001090 <HAL_DMA_Abort_IT+0xc8>
 8001086:	687b      	ldr	r3, [r7, #4]
 8001088:	681b      	ldr	r3, [r3, #0]
 800108a:	4a46      	ldr	r2, [pc, #280]	; (80011a4 <HAL_DMA_Abort_IT+0x1dc>)
 800108c:	4293      	cmp	r3, r2
 800108e:	d101      	bne.n	8001094 <HAL_DMA_Abort_IT+0xcc>
 8001090:	2301      	movs	r3, #1
 8001092:	e000      	b.n	8001096 <HAL_DMA_Abort_IT+0xce>
 8001094:	2300      	movs	r3, #0
 8001096:	2b00      	cmp	r3, #0
 8001098:	f000 8086 	beq.w	80011a8 <HAL_DMA_Abort_IT+0x1e0>
    {
      /* Set Abort State  */
      hdma->State = HAL_DMA_STATE_ABORT;
 800109c:	687b      	ldr	r3, [r7, #4]
 800109e:	2204      	movs	r2, #4
 80010a0:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 80010a4:	687b      	ldr	r3, [r7, #4]
 80010a6:	681b      	ldr	r3, [r3, #0]
 80010a8:	4a2f      	ldr	r2, [pc, #188]	; (8001168 <HAL_DMA_Abort_IT+0x1a0>)
 80010aa:	4293      	cmp	r3, r2
 80010ac:	d04a      	beq.n	8001144 <HAL_DMA_Abort_IT+0x17c>
 80010ae:	687b      	ldr	r3, [r7, #4]
 80010b0:	681b      	ldr	r3, [r3, #0]
 80010b2:	4a2e      	ldr	r2, [pc, #184]	; (800116c <HAL_DMA_Abort_IT+0x1a4>)
 80010b4:	4293      	cmp	r3, r2
 80010b6:	d045      	beq.n	8001144 <HAL_DMA_Abort_IT+0x17c>
 80010b8:	687b      	ldr	r3, [r7, #4]
 80010ba:	681b      	ldr	r3, [r3, #0]
 80010bc:	4a2c      	ldr	r2, [pc, #176]	; (8001170 <HAL_DMA_Abort_IT+0x1a8>)
 80010be:	4293      	cmp	r3, r2
 80010c0:	d040      	beq.n	8001144 <HAL_DMA_Abort_IT+0x17c>
 80010c2:	687b      	ldr	r3, [r7, #4]
 80010c4:	681b      	ldr	r3, [r3, #0]
 80010c6:	4a2b      	ldr	r2, [pc, #172]	; (8001174 <HAL_DMA_Abort_IT+0x1ac>)
 80010c8:	4293      	cmp	r3, r2
 80010ca:	d03b      	beq.n	8001144 <HAL_DMA_Abort_IT+0x17c>
 80010cc:	687b      	ldr	r3, [r7, #4]
 80010ce:	681b      	ldr	r3, [r3, #0]
 80010d0:	4a29      	ldr	r2, [pc, #164]	; (8001178 <HAL_DMA_Abort_IT+0x1b0>)
 80010d2:	4293      	cmp	r3, r2
 80010d4:	d036      	beq.n	8001144 <HAL_DMA_Abort_IT+0x17c>
 80010d6:	687b      	ldr	r3, [r7, #4]
 80010d8:	681b      	ldr	r3, [r3, #0]
 80010da:	4a28      	ldr	r2, [pc, #160]	; (800117c <HAL_DMA_Abort_IT+0x1b4>)
 80010dc:	4293      	cmp	r3, r2
 80010de:	d031      	beq.n	8001144 <HAL_DMA_Abort_IT+0x17c>
 80010e0:	687b      	ldr	r3, [r7, #4]
 80010e2:	681b      	ldr	r3, [r3, #0]
 80010e4:	4a26      	ldr	r2, [pc, #152]	; (8001180 <HAL_DMA_Abort_IT+0x1b8>)
 80010e6:	4293      	cmp	r3, r2
 80010e8:	d02c      	beq.n	8001144 <HAL_DMA_Abort_IT+0x17c>
 80010ea:	687b      	ldr	r3, [r7, #4]
 80010ec:	681b      	ldr	r3, [r3, #0]
 80010ee:	4a25      	ldr	r2, [pc, #148]	; (8001184 <HAL_DMA_Abort_IT+0x1bc>)
 80010f0:	4293      	cmp	r3, r2
 80010f2:	d027      	beq.n	8001144 <HAL_DMA_Abort_IT+0x17c>
 80010f4:	687b      	ldr	r3, [r7, #4]
 80010f6:	681b      	ldr	r3, [r3, #0]
 80010f8:	4a23      	ldr	r2, [pc, #140]	; (8001188 <HAL_DMA_Abort_IT+0x1c0>)
 80010fa:	4293      	cmp	r3, r2
 80010fc:	d022      	beq.n	8001144 <HAL_DMA_Abort_IT+0x17c>
 80010fe:	687b      	ldr	r3, [r7, #4]
 8001100:	681b      	ldr	r3, [r3, #0]
 8001102:	4a22      	ldr	r2, [pc, #136]	; (800118c <HAL_DMA_Abort_IT+0x1c4>)
 8001104:	4293      	cmp	r3, r2
 8001106:	d01d      	beq.n	8001144 <HAL_DMA_Abort_IT+0x17c>
 8001108:	687b      	ldr	r3, [r7, #4]
 800110a:	681b      	ldr	r3, [r3, #0]
 800110c:	4a20      	ldr	r2, [pc, #128]	; (8001190 <HAL_DMA_Abort_IT+0x1c8>)
 800110e:	4293      	cmp	r3, r2
 8001110:	d018      	beq.n	8001144 <HAL_DMA_Abort_IT+0x17c>
 8001112:	687b      	ldr	r3, [r7, #4]
 8001114:	681b      	ldr	r3, [r3, #0]
 8001116:	4a1f      	ldr	r2, [pc, #124]	; (8001194 <HAL_DMA_Abort_IT+0x1cc>)
 8001118:	4293      	cmp	r3, r2
 800111a:	d013      	beq.n	8001144 <HAL_DMA_Abort_IT+0x17c>
 800111c:	687b      	ldr	r3, [r7, #4]
 800111e:	681b      	ldr	r3, [r3, #0]
 8001120:	4a1d      	ldr	r2, [pc, #116]	; (8001198 <HAL_DMA_Abort_IT+0x1d0>)
 8001122:	4293      	cmp	r3, r2
 8001124:	d00e      	beq.n	8001144 <HAL_DMA_Abort_IT+0x17c>
 8001126:	687b      	ldr	r3, [r7, #4]
 8001128:	681b      	ldr	r3, [r3, #0]
 800112a:	4a1c      	ldr	r2, [pc, #112]	; (800119c <HAL_DMA_Abort_IT+0x1d4>)
 800112c:	4293      	cmp	r3, r2
 800112e:	d009      	beq.n	8001144 <HAL_DMA_Abort_IT+0x17c>
 8001130:	687b      	ldr	r3, [r7, #4]
 8001132:	681b      	ldr	r3, [r3, #0]
 8001134:	4a1a      	ldr	r2, [pc, #104]	; (80011a0 <HAL_DMA_Abort_IT+0x1d8>)
 8001136:	4293      	cmp	r3, r2
 8001138:	d004      	beq.n	8001144 <HAL_DMA_Abort_IT+0x17c>
 800113a:	687b      	ldr	r3, [r7, #4]
 800113c:	681b      	ldr	r3, [r3, #0]
 800113e:	4a19      	ldr	r2, [pc, #100]	; (80011a4 <HAL_DMA_Abort_IT+0x1dc>)
 8001140:	4293      	cmp	r3, r2
 8001142:	d108      	bne.n	8001156 <HAL_DMA_Abort_IT+0x18e>
 8001144:	687b      	ldr	r3, [r7, #4]
 8001146:	681b      	ldr	r3, [r3, #0]
 8001148:	681a      	ldr	r2, [r3, #0]
 800114a:	687b      	ldr	r3, [r7, #4]
 800114c:	681b      	ldr	r3, [r3, #0]
 800114e:	f022 0201 	bic.w	r2, r2, #1
 8001152:	601a      	str	r2, [r3, #0]
 8001154:	e178      	b.n	8001448 <HAL_DMA_Abort_IT+0x480>
 8001156:	687b      	ldr	r3, [r7, #4]
 8001158:	681b      	ldr	r3, [r3, #0]
 800115a:	681a      	ldr	r2, [r3, #0]
 800115c:	687b      	ldr	r3, [r7, #4]
 800115e:	681b      	ldr	r3, [r3, #0]
 8001160:	f022 0201 	bic.w	r2, r2, #1
 8001164:	601a      	str	r2, [r3, #0]
 8001166:	e16f      	b.n	8001448 <HAL_DMA_Abort_IT+0x480>
 8001168:	40020010 	.word	0x40020010
 800116c:	40020028 	.word	0x40020028
 8001170:	40020040 	.word	0x40020040
 8001174:	40020058 	.word	0x40020058
 8001178:	40020070 	.word	0x40020070
 800117c:	40020088 	.word	0x40020088
 8001180:	400200a0 	.word	0x400200a0
 8001184:	400200b8 	.word	0x400200b8
 8001188:	40020410 	.word	0x40020410
 800118c:	40020428 	.word	0x40020428
 8001190:	40020440 	.word	0x40020440
 8001194:	40020458 	.word	0x40020458
 8001198:	40020470 	.word	0x40020470
 800119c:	40020488 	.word	0x40020488
 80011a0:	400204a0 	.word	0x400204a0
 80011a4:	400204b8 	.word	0x400204b8
    }
    else /* BDMA channel */
    {
      /* Disable DMA All Interrupts  */
      ((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR  &= ~(BDMA_CCR_TCIE | BDMA_CCR_HTIE | BDMA_CCR_TEIE);
 80011a8:	687b      	ldr	r3, [r7, #4]
 80011aa:	681b      	ldr	r3, [r3, #0]
 80011ac:	681a      	ldr	r2, [r3, #0]
 80011ae:	687b      	ldr	r3, [r7, #4]
 80011b0:	681b      	ldr	r3, [r3, #0]
 80011b2:	f022 020e 	bic.w	r2, r2, #14
 80011b6:	601a      	str	r2, [r3, #0]

      /* Disable the channel */
      __HAL_DMA_DISABLE(hdma);
 80011b8:	687b      	ldr	r3, [r7, #4]
 80011ba:	681b      	ldr	r3, [r3, #0]
 80011bc:	4a6c      	ldr	r2, [pc, #432]	; (8001370 <HAL_DMA_Abort_IT+0x3a8>)
 80011be:	4293      	cmp	r3, r2
 80011c0:	d04a      	beq.n	8001258 <HAL_DMA_Abort_IT+0x290>
 80011c2:	687b      	ldr	r3, [r7, #4]
 80011c4:	681b      	ldr	r3, [r3, #0]
 80011c6:	4a6b      	ldr	r2, [pc, #428]	; (8001374 <HAL_DMA_Abort_IT+0x3ac>)
 80011c8:	4293      	cmp	r3, r2
 80011ca:	d045      	beq.n	8001258 <HAL_DMA_Abort_IT+0x290>
 80011cc:	687b      	ldr	r3, [r7, #4]
 80011ce:	681b      	ldr	r3, [r3, #0]
 80011d0:	4a69      	ldr	r2, [pc, #420]	; (8001378 <HAL_DMA_Abort_IT+0x3b0>)
 80011d2:	4293      	cmp	r3, r2
 80011d4:	d040      	beq.n	8001258 <HAL_DMA_Abort_IT+0x290>
 80011d6:	687b      	ldr	r3, [r7, #4]
 80011d8:	681b      	ldr	r3, [r3, #0]
 80011da:	4a68      	ldr	r2, [pc, #416]	; (800137c <HAL_DMA_Abort_IT+0x3b4>)
 80011dc:	4293      	cmp	r3, r2
 80011de:	d03b      	beq.n	8001258 <HAL_DMA_Abort_IT+0x290>
 80011e0:	687b      	ldr	r3, [r7, #4]
 80011e2:	681b      	ldr	r3, [r3, #0]
 80011e4:	4a66      	ldr	r2, [pc, #408]	; (8001380 <HAL_DMA_Abort_IT+0x3b8>)
 80011e6:	4293      	cmp	r3, r2
 80011e8:	d036      	beq.n	8001258 <HAL_DMA_Abort_IT+0x290>
 80011ea:	687b      	ldr	r3, [r7, #4]
 80011ec:	681b      	ldr	r3, [r3, #0]
 80011ee:	4a65      	ldr	r2, [pc, #404]	; (8001384 <HAL_DMA_Abort_IT+0x3bc>)
 80011f0:	4293      	cmp	r3, r2
 80011f2:	d031      	beq.n	8001258 <HAL_DMA_Abort_IT+0x290>
 80011f4:	687b      	ldr	r3, [r7, #4]
 80011f6:	681b      	ldr	r3, [r3, #0]
 80011f8:	4a63      	ldr	r2, [pc, #396]	; (8001388 <HAL_DMA_Abort_IT+0x3c0>)
 80011fa:	4293      	cmp	r3, r2
 80011fc:	d02c      	beq.n	8001258 <HAL_DMA_Abort_IT+0x290>
 80011fe:	687b      	ldr	r3, [r7, #4]
 8001200:	681b      	ldr	r3, [r3, #0]
 8001202:	4a62      	ldr	r2, [pc, #392]	; (800138c <HAL_DMA_Abort_IT+0x3c4>)
 8001204:	4293      	cmp	r3, r2
 8001206:	d027      	beq.n	8001258 <HAL_DMA_Abort_IT+0x290>
 8001208:	687b      	ldr	r3, [r7, #4]
 800120a:	681b      	ldr	r3, [r3, #0]
 800120c:	4a60      	ldr	r2, [pc, #384]	; (8001390 <HAL_DMA_Abort_IT+0x3c8>)
 800120e:	4293      	cmp	r3, r2
 8001210:	d022      	beq.n	8001258 <HAL_DMA_Abort_IT+0x290>
 8001212:	687b      	ldr	r3, [r7, #4]
 8001214:	681b      	ldr	r3, [r3, #0]
 8001216:	4a5f      	ldr	r2, [pc, #380]	; (8001394 <HAL_DMA_Abort_IT+0x3cc>)
 8001218:	4293      	cmp	r3, r2
 800121a:	d01d      	beq.n	8001258 <HAL_DMA_Abort_IT+0x290>
 800121c:	687b      	ldr	r3, [r7, #4]
 800121e:	681b      	ldr	r3, [r3, #0]
 8001220:	4a5d      	ldr	r2, [pc, #372]	; (8001398 <HAL_DMA_Abort_IT+0x3d0>)
 8001222:	4293      	cmp	r3, r2
 8001224:	d018      	beq.n	8001258 <HAL_DMA_Abort_IT+0x290>
 8001226:	687b      	ldr	r3, [r7, #4]
 8001228:	681b      	ldr	r3, [r3, #0]
 800122a:	4a5c      	ldr	r2, [pc, #368]	; (800139c <HAL_DMA_Abort_IT+0x3d4>)
 800122c:	4293      	cmp	r3, r2
 800122e:	d013      	beq.n	8001258 <HAL_DMA_Abort_IT+0x290>
 8001230:	687b      	ldr	r3, [r7, #4]
 8001232:	681b      	ldr	r3, [r3, #0]
 8001234:	4a5a      	ldr	r2, [pc, #360]	; (80013a0 <HAL_DMA_Abort_IT+0x3d8>)
 8001236:	4293      	cmp	r3, r2
 8001238:	d00e      	beq.n	8001258 <HAL_DMA_Abort_IT+0x290>
 800123a:	687b      	ldr	r3, [r7, #4]
 800123c:	681b      	ldr	r3, [r3, #0]
 800123e:	4a59      	ldr	r2, [pc, #356]	; (80013a4 <HAL_DMA_Abort_IT+0x3dc>)
 8001240:	4293      	cmp	r3, r2
 8001242:	d009      	beq.n	8001258 <HAL_DMA_Abort_IT+0x290>
 8001244:	687b      	ldr	r3, [r7, #4]
 8001246:	681b      	ldr	r3, [r3, #0]
 8001248:	4a57      	ldr	r2, [pc, #348]	; (80013a8 <HAL_DMA_Abort_IT+0x3e0>)
 800124a:	4293      	cmp	r3, r2
 800124c:	d004      	beq.n	8001258 <HAL_DMA_Abort_IT+0x290>
 800124e:	687b      	ldr	r3, [r7, #4]
 8001250:	681b      	ldr	r3, [r3, #0]
 8001252:	4a56      	ldr	r2, [pc, #344]	; (80013ac <HAL_DMA_Abort_IT+0x3e4>)
 8001254:	4293      	cmp	r3, r2
 8001256:	d108      	bne.n	800126a <HAL_DMA_Abort_IT+0x2a2>
 8001258:	687b      	ldr	r3, [r7, #4]
 800125a:	681b      	ldr	r3, [r3, #0]
 800125c:	681a      	ldr	r2, [r3, #0]
 800125e:	687b      	ldr	r3, [r7, #4]
 8001260:	681b      	ldr	r3, [r3, #0]
 8001262:	f022 0201 	bic.w	r2, r2, #1
 8001266:	601a      	str	r2, [r3, #0]
 8001268:	e007      	b.n	800127a <HAL_DMA_Abort_IT+0x2b2>
 800126a:	687b      	ldr	r3, [r7, #4]
 800126c:	681b      	ldr	r3, [r3, #0]
 800126e:	681a      	ldr	r2, [r3, #0]
 8001270:	687b      	ldr	r3, [r7, #4]
 8001272:	681b      	ldr	r3, [r3, #0]
 8001274:	f022 0201 	bic.w	r2, r2, #1
 8001278:	601a      	str	r2, [r3, #0]

      if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 800127a:	687b      	ldr	r3, [r7, #4]
 800127c:	681b      	ldr	r3, [r3, #0]
 800127e:	4a3c      	ldr	r2, [pc, #240]	; (8001370 <HAL_DMA_Abort_IT+0x3a8>)
 8001280:	4293      	cmp	r3, r2
 8001282:	d072      	beq.n	800136a <HAL_DMA_Abort_IT+0x3a2>
 8001284:	687b      	ldr	r3, [r7, #4]
 8001286:	681b      	ldr	r3, [r3, #0]
 8001288:	4a3a      	ldr	r2, [pc, #232]	; (8001374 <HAL_DMA_Abort_IT+0x3ac>)
 800128a:	4293      	cmp	r3, r2
 800128c:	d06d      	beq.n	800136a <HAL_DMA_Abort_IT+0x3a2>
 800128e:	687b      	ldr	r3, [r7, #4]
 8001290:	681b      	ldr	r3, [r3, #0]
 8001292:	4a39      	ldr	r2, [pc, #228]	; (8001378 <HAL_DMA_Abort_IT+0x3b0>)
 8001294:	4293      	cmp	r3, r2
 8001296:	d068      	beq.n	800136a <HAL_DMA_Abort_IT+0x3a2>
 8001298:	687b      	ldr	r3, [r7, #4]
 800129a:	681b      	ldr	r3, [r3, #0]
 800129c:	4a37      	ldr	r2, [pc, #220]	; (800137c <HAL_DMA_Abort_IT+0x3b4>)
 800129e:	4293      	cmp	r3, r2
 80012a0:	d063      	beq.n	800136a <HAL_DMA_Abort_IT+0x3a2>
 80012a2:	687b      	ldr	r3, [r7, #4]
 80012a4:	681b      	ldr	r3, [r3, #0]
 80012a6:	4a36      	ldr	r2, [pc, #216]	; (8001380 <HAL_DMA_Abort_IT+0x3b8>)
 80012a8:	4293      	cmp	r3, r2
 80012aa:	d05e      	beq.n	800136a <HAL_DMA_Abort_IT+0x3a2>
 80012ac:	687b      	ldr	r3, [r7, #4]
 80012ae:	681b      	ldr	r3, [r3, #0]
 80012b0:	4a34      	ldr	r2, [pc, #208]	; (8001384 <HAL_DMA_Abort_IT+0x3bc>)
 80012b2:	4293      	cmp	r3, r2
 80012b4:	d059      	beq.n	800136a <HAL_DMA_Abort_IT+0x3a2>
 80012b6:	687b      	ldr	r3, [r7, #4]
 80012b8:	681b      	ldr	r3, [r3, #0]
 80012ba:	4a33      	ldr	r2, [pc, #204]	; (8001388 <HAL_DMA_Abort_IT+0x3c0>)
 80012bc:	4293      	cmp	r3, r2
 80012be:	d054      	beq.n	800136a <HAL_DMA_Abort_IT+0x3a2>
 80012c0:	687b      	ldr	r3, [r7, #4]
 80012c2:	681b      	ldr	r3, [r3, #0]
 80012c4:	4a31      	ldr	r2, [pc, #196]	; (800138c <HAL_DMA_Abort_IT+0x3c4>)
 80012c6:	4293      	cmp	r3, r2
 80012c8:	d04f      	beq.n	800136a <HAL_DMA_Abort_IT+0x3a2>
 80012ca:	687b      	ldr	r3, [r7, #4]
 80012cc:	681b      	ldr	r3, [r3, #0]
 80012ce:	4a30      	ldr	r2, [pc, #192]	; (8001390 <HAL_DMA_Abort_IT+0x3c8>)
 80012d0:	4293      	cmp	r3, r2
 80012d2:	d04a      	beq.n	800136a <HAL_DMA_Abort_IT+0x3a2>
 80012d4:	687b      	ldr	r3, [r7, #4]
 80012d6:	681b      	ldr	r3, [r3, #0]
 80012d8:	4a2e      	ldr	r2, [pc, #184]	; (8001394 <HAL_DMA_Abort_IT+0x3cc>)
 80012da:	4293      	cmp	r3, r2
 80012dc:	d045      	beq.n	800136a <HAL_DMA_Abort_IT+0x3a2>
 80012de:	687b      	ldr	r3, [r7, #4]
 80012e0:	681b      	ldr	r3, [r3, #0]
 80012e2:	4a2d      	ldr	r2, [pc, #180]	; (8001398 <HAL_DMA_Abort_IT+0x3d0>)
 80012e4:	4293      	cmp	r3, r2
 80012e6:	d040      	beq.n	800136a <HAL_DMA_Abort_IT+0x3a2>
 80012e8:	687b      	ldr	r3, [r7, #4]
 80012ea:	681b      	ldr	r3, [r3, #0]
 80012ec:	4a2b      	ldr	r2, [pc, #172]	; (800139c <HAL_DMA_Abort_IT+0x3d4>)
 80012ee:	4293      	cmp	r3, r2
 80012f0:	d03b      	beq.n	800136a <HAL_DMA_Abort_IT+0x3a2>
 80012f2:	687b      	ldr	r3, [r7, #4]
 80012f4:	681b      	ldr	r3, [r3, #0]
 80012f6:	4a2a      	ldr	r2, [pc, #168]	; (80013a0 <HAL_DMA_Abort_IT+0x3d8>)
 80012f8:	4293      	cmp	r3, r2
 80012fa:	d036      	beq.n	800136a <HAL_DMA_Abort_IT+0x3a2>
 80012fc:	687b      	ldr	r3, [r7, #4]
 80012fe:	681b      	ldr	r3, [r3, #0]
 8001300:	4a28      	ldr	r2, [pc, #160]	; (80013a4 <HAL_DMA_Abort_IT+0x3dc>)
 8001302:	4293      	cmp	r3, r2
 8001304:	d031      	beq.n	800136a <HAL_DMA_Abort_IT+0x3a2>
 8001306:	687b      	ldr	r3, [r7, #4]
 8001308:	681b      	ldr	r3, [r3, #0]
 800130a:	4a27      	ldr	r2, [pc, #156]	; (80013a8 <HAL_DMA_Abort_IT+0x3e0>)
 800130c:	4293      	cmp	r3, r2
 800130e:	d02c      	beq.n	800136a <HAL_DMA_Abort_IT+0x3a2>
 8001310:	687b      	ldr	r3, [r7, #4]
 8001312:	681b      	ldr	r3, [r3, #0]
 8001314:	4a25      	ldr	r2, [pc, #148]	; (80013ac <HAL_DMA_Abort_IT+0x3e4>)
 8001316:	4293      	cmp	r3, r2
 8001318:	d027      	beq.n	800136a <HAL_DMA_Abort_IT+0x3a2>
 800131a:	687b      	ldr	r3, [r7, #4]
 800131c:	681b      	ldr	r3, [r3, #0]
 800131e:	4a24      	ldr	r2, [pc, #144]	; (80013b0 <HAL_DMA_Abort_IT+0x3e8>)
 8001320:	4293      	cmp	r3, r2
 8001322:	d022      	beq.n	800136a <HAL_DMA_Abort_IT+0x3a2>
 8001324:	687b      	ldr	r3, [r7, #4]
 8001326:	681b      	ldr	r3, [r3, #0]
 8001328:	4a22      	ldr	r2, [pc, #136]	; (80013b4 <HAL_DMA_Abort_IT+0x3ec>)
 800132a:	4293      	cmp	r3, r2
 800132c:	d01d      	beq.n	800136a <HAL_DMA_Abort_IT+0x3a2>
 800132e:	687b      	ldr	r3, [r7, #4]
 8001330:	681b      	ldr	r3, [r3, #0]
 8001332:	4a21      	ldr	r2, [pc, #132]	; (80013b8 <HAL_DMA_Abort_IT+0x3f0>)
 8001334:	4293      	cmp	r3, r2
 8001336:	d018      	beq.n	800136a <HAL_DMA_Abort_IT+0x3a2>
 8001338:	687b      	ldr	r3, [r7, #4]
 800133a:	681b      	ldr	r3, [r3, #0]
 800133c:	4a1f      	ldr	r2, [pc, #124]	; (80013bc <HAL_DMA_Abort_IT+0x3f4>)
 800133e:	4293      	cmp	r3, r2
 8001340:	d013      	beq.n	800136a <HAL_DMA_Abort_IT+0x3a2>
 8001342:	687b      	ldr	r3, [r7, #4]
 8001344:	681b      	ldr	r3, [r3, #0]
 8001346:	4a1e      	ldr	r2, [pc, #120]	; (80013c0 <HAL_DMA_Abort_IT+0x3f8>)
 8001348:	4293      	cmp	r3, r2
 800134a:	d00e      	beq.n	800136a <HAL_DMA_Abort_IT+0x3a2>
 800134c:	687b      	ldr	r3, [r7, #4]
 800134e:	681b      	ldr	r3, [r3, #0]
 8001350:	4a1c      	ldr	r2, [pc, #112]	; (80013c4 <HAL_DMA_Abort_IT+0x3fc>)
 8001352:	4293      	cmp	r3, r2
 8001354:	d009      	beq.n	800136a <HAL_DMA_Abort_IT+0x3a2>
 8001356:	687b      	ldr	r3, [r7, #4]
 8001358:	681b      	ldr	r3, [r3, #0]
 800135a:	4a1b      	ldr	r2, [pc, #108]	; (80013c8 <HAL_DMA_Abort_IT+0x400>)
 800135c:	4293      	cmp	r3, r2
 800135e:	d004      	beq.n	800136a <HAL_DMA_Abort_IT+0x3a2>
 8001360:	687b      	ldr	r3, [r7, #4]
 8001362:	681b      	ldr	r3, [r3, #0]
 8001364:	4a19      	ldr	r2, [pc, #100]	; (80013cc <HAL_DMA_Abort_IT+0x404>)
 8001366:	4293      	cmp	r3, r2
 8001368:	d132      	bne.n	80013d0 <HAL_DMA_Abort_IT+0x408>
 800136a:	2301      	movs	r3, #1
 800136c:	e031      	b.n	80013d2 <HAL_DMA_Abort_IT+0x40a>
 800136e:	bf00      	nop
 8001370:	40020010 	.word	0x40020010
 8001374:	40020028 	.word	0x40020028
 8001378:	40020040 	.word	0x40020040
 800137c:	40020058 	.word	0x40020058
 8001380:	40020070 	.word	0x40020070
 8001384:	40020088 	.word	0x40020088
 8001388:	400200a0 	.word	0x400200a0
 800138c:	400200b8 	.word	0x400200b8
 8001390:	40020410 	.word	0x40020410
 8001394:	40020428 	.word	0x40020428
 8001398:	40020440 	.word	0x40020440
 800139c:	40020458 	.word	0x40020458
 80013a0:	40020470 	.word	0x40020470
 80013a4:	40020488 	.word	0x40020488
 80013a8:	400204a0 	.word	0x400204a0
 80013ac:	400204b8 	.word	0x400204b8
 80013b0:	58025408 	.word	0x58025408
 80013b4:	5802541c 	.word	0x5802541c
 80013b8:	58025430 	.word	0x58025430
 80013bc:	58025444 	.word	0x58025444
 80013c0:	58025458 	.word	0x58025458
 80013c4:	5802546c 	.word	0x5802546c
 80013c8:	58025480 	.word	0x58025480
 80013cc:	58025494 	.word	0x58025494
 80013d0:	2300      	movs	r3, #0
 80013d2:	2b00      	cmp	r3, #0
 80013d4:	d028      	beq.n	8001428 <HAL_DMA_Abort_IT+0x460>
      {
        /* disable the DMAMUX sync overrun IT */
        hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 80013d6:	687b      	ldr	r3, [r7, #4]
 80013d8:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80013da:	681a      	ldr	r2, [r3, #0]
 80013dc:	687b      	ldr	r3, [r7, #4]
 80013de:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80013e0:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80013e4:	601a      	str	r2, [r3, #0]

        /* Clear all flags */
        regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
 80013e6:	687b      	ldr	r3, [r7, #4]
 80013e8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80013ea:	60fb      	str	r3, [r7, #12]
        regs_bdma->IFCR = ((BDMA_IFCR_CGIF0) << (hdma->StreamIndex & 0x1FU));
 80013ec:	687b      	ldr	r3, [r7, #4]
 80013ee:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80013f0:	f003 031f 	and.w	r3, r3, #31
 80013f4:	2201      	movs	r2, #1
 80013f6:	409a      	lsls	r2, r3
 80013f8:	68fb      	ldr	r3, [r7, #12]
 80013fa:	605a      	str	r2, [r3, #4]

        /* Clear the DMAMUX synchro overrun flag */
        hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 80013fc:	687b      	ldr	r3, [r7, #4]
 80013fe:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8001400:	687a      	ldr	r2, [r7, #4]
 8001402:	6e92      	ldr	r2, [r2, #104]	; 0x68
 8001404:	605a      	str	r2, [r3, #4]

        if(hdma->DMAmuxRequestGen != 0U)
 8001406:	687b      	ldr	r3, [r7, #4]
 8001408:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800140a:	2b00      	cmp	r3, #0
 800140c:	d00c      	beq.n	8001428 <HAL_DMA_Abort_IT+0x460>
        {
          /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
          /* disable the request gen overrun IT */
          hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 800140e:	687b      	ldr	r3, [r7, #4]
 8001410:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8001412:	681a      	ldr	r2, [r3, #0]
 8001414:	687b      	ldr	r3, [r7, #4]
 8001416:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8001418:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 800141c:	601a      	str	r2, [r3, #0]

          /* Clear the DMAMUX request generator overrun flag */
          hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 800141e:	687b      	ldr	r3, [r7, #4]
 8001420:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001422:	687a      	ldr	r2, [r7, #4]
 8001424:	6f52      	ldr	r2, [r2, #116]	; 0x74
 8001426:	605a      	str	r2, [r3, #4]
        }
      }

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8001428:	687b      	ldr	r3, [r7, #4]
 800142a:	2201      	movs	r2, #1
 800142c:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8001430:	687b      	ldr	r3, [r7, #4]
 8001432:	2200      	movs	r2, #0
 8001434:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

      /* Call User Abort callback */
      if(hdma->XferAbortCallback != NULL)
 8001438:	687b      	ldr	r3, [r7, #4]
 800143a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800143c:	2b00      	cmp	r3, #0
 800143e:	d003      	beq.n	8001448 <HAL_DMA_Abort_IT+0x480>
      {
        hdma->XferAbortCallback(hdma);
 8001440:	687b      	ldr	r3, [r7, #4]
 8001442:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8001444:	6878      	ldr	r0, [r7, #4]
 8001446:	4798      	blx	r3
      }
    }
  }

  return HAL_OK;
 8001448:	2300      	movs	r3, #0
}
 800144a:	4618      	mov	r0, r3
 800144c:	3710      	adds	r7, #16
 800144e:	46bd      	mov	sp, r7
 8001450:	bd80      	pop	{r7, pc}
 8001452:	bf00      	nop

08001454 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001454:	b480      	push	{r7}
 8001456:	b089      	sub	sp, #36	; 0x24
 8001458:	af00      	add	r7, sp, #0
 800145a:	6078      	str	r0, [r7, #4]
 800145c:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 800145e:	2300      	movs	r3, #0
 8001460:	61fb      	str	r3, [r7, #28]
  EXTI_Core_TypeDef *EXTI_CurrentCPU;

#if defined(DUAL_CORE) && defined(CORE_CM4)
  EXTI_CurrentCPU = EXTI_D2; /* EXTI for CM4 CPU */
#else
  EXTI_CurrentCPU = EXTI_D1; /* EXTI for CM7 CPU */
 8001462:	4b89      	ldr	r3, [pc, #548]	; (8001688 <HAL_GPIO_Init+0x234>)
 8001464:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 8001466:	e194      	b.n	8001792 <HAL_GPIO_Init+0x33e>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 8001468:	683b      	ldr	r3, [r7, #0]
 800146a:	681a      	ldr	r2, [r3, #0]
 800146c:	2101      	movs	r1, #1
 800146e:	69fb      	ldr	r3, [r7, #28]
 8001470:	fa01 f303 	lsl.w	r3, r1, r3
 8001474:	4013      	ands	r3, r2
 8001476:	613b      	str	r3, [r7, #16]

    if (iocurrent != 0x00U)
 8001478:	693b      	ldr	r3, [r7, #16]
 800147a:	2b00      	cmp	r3, #0
 800147c:	f000 8186 	beq.w	800178c <HAL_GPIO_Init+0x338>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8001480:	683b      	ldr	r3, [r7, #0]
 8001482:	685b      	ldr	r3, [r3, #4]
 8001484:	f003 0303 	and.w	r3, r3, #3
 8001488:	2b01      	cmp	r3, #1
 800148a:	d005      	beq.n	8001498 <HAL_GPIO_Init+0x44>
 800148c:	683b      	ldr	r3, [r7, #0]
 800148e:	685b      	ldr	r3, [r3, #4]
 8001490:	f003 0303 	and.w	r3, r3, #3
 8001494:	2b02      	cmp	r3, #2
 8001496:	d130      	bne.n	80014fa <HAL_GPIO_Init+0xa6>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8001498:	687b      	ldr	r3, [r7, #4]
 800149a:	689b      	ldr	r3, [r3, #8]
 800149c:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 800149e:	69fb      	ldr	r3, [r7, #28]
 80014a0:	005b      	lsls	r3, r3, #1
 80014a2:	2203      	movs	r2, #3
 80014a4:	fa02 f303 	lsl.w	r3, r2, r3
 80014a8:	43db      	mvns	r3, r3
 80014aa:	69ba      	ldr	r2, [r7, #24]
 80014ac:	4013      	ands	r3, r2
 80014ae:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 80014b0:	683b      	ldr	r3, [r7, #0]
 80014b2:	68da      	ldr	r2, [r3, #12]
 80014b4:	69fb      	ldr	r3, [r7, #28]
 80014b6:	005b      	lsls	r3, r3, #1
 80014b8:	fa02 f303 	lsl.w	r3, r2, r3
 80014bc:	69ba      	ldr	r2, [r7, #24]
 80014be:	4313      	orrs	r3, r2
 80014c0:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 80014c2:	687b      	ldr	r3, [r7, #4]
 80014c4:	69ba      	ldr	r2, [r7, #24]
 80014c6:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80014c8:	687b      	ldr	r3, [r7, #4]
 80014ca:	685b      	ldr	r3, [r3, #4]
 80014cc:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 80014ce:	2201      	movs	r2, #1
 80014d0:	69fb      	ldr	r3, [r7, #28]
 80014d2:	fa02 f303 	lsl.w	r3, r2, r3
 80014d6:	43db      	mvns	r3, r3
 80014d8:	69ba      	ldr	r2, [r7, #24]
 80014da:	4013      	ands	r3, r2
 80014dc:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80014de:	683b      	ldr	r3, [r7, #0]
 80014e0:	685b      	ldr	r3, [r3, #4]
 80014e2:	091b      	lsrs	r3, r3, #4
 80014e4:	f003 0201 	and.w	r2, r3, #1
 80014e8:	69fb      	ldr	r3, [r7, #28]
 80014ea:	fa02 f303 	lsl.w	r3, r2, r3
 80014ee:	69ba      	ldr	r2, [r7, #24]
 80014f0:	4313      	orrs	r3, r2
 80014f2:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 80014f4:	687b      	ldr	r3, [r7, #4]
 80014f6:	69ba      	ldr	r2, [r7, #24]
 80014f8:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80014fa:	683b      	ldr	r3, [r7, #0]
 80014fc:	685b      	ldr	r3, [r3, #4]
 80014fe:	f003 0303 	and.w	r3, r3, #3
 8001502:	2b03      	cmp	r3, #3
 8001504:	d017      	beq.n	8001536 <HAL_GPIO_Init+0xe2>
      {
       /* Check the Pull parameter */
       assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8001506:	687b      	ldr	r3, [r7, #4]
 8001508:	68db      	ldr	r3, [r3, #12]
 800150a:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 800150c:	69fb      	ldr	r3, [r7, #28]
 800150e:	005b      	lsls	r3, r3, #1
 8001510:	2203      	movs	r2, #3
 8001512:	fa02 f303 	lsl.w	r3, r2, r3
 8001516:	43db      	mvns	r3, r3
 8001518:	69ba      	ldr	r2, [r7, #24]
 800151a:	4013      	ands	r3, r2
 800151c:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 800151e:	683b      	ldr	r3, [r7, #0]
 8001520:	689a      	ldr	r2, [r3, #8]
 8001522:	69fb      	ldr	r3, [r7, #28]
 8001524:	005b      	lsls	r3, r3, #1
 8001526:	fa02 f303 	lsl.w	r3, r2, r3
 800152a:	69ba      	ldr	r2, [r7, #24]
 800152c:	4313      	orrs	r3, r2
 800152e:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 8001530:	687b      	ldr	r3, [r7, #4]
 8001532:	69ba      	ldr	r2, [r7, #24]
 8001534:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001536:	683b      	ldr	r3, [r7, #0]
 8001538:	685b      	ldr	r3, [r3, #4]
 800153a:	f003 0303 	and.w	r3, r3, #3
 800153e:	2b02      	cmp	r3, #2
 8001540:	d123      	bne.n	800158a <HAL_GPIO_Init+0x136>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8001542:	69fb      	ldr	r3, [r7, #28]
 8001544:	08da      	lsrs	r2, r3, #3
 8001546:	687b      	ldr	r3, [r7, #4]
 8001548:	3208      	adds	r2, #8
 800154a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800154e:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 8001550:	69fb      	ldr	r3, [r7, #28]
 8001552:	f003 0307 	and.w	r3, r3, #7
 8001556:	009b      	lsls	r3, r3, #2
 8001558:	220f      	movs	r2, #15
 800155a:	fa02 f303 	lsl.w	r3, r2, r3
 800155e:	43db      	mvns	r3, r3
 8001560:	69ba      	ldr	r2, [r7, #24]
 8001562:	4013      	ands	r3, r2
 8001564:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 8001566:	683b      	ldr	r3, [r7, #0]
 8001568:	691a      	ldr	r2, [r3, #16]
 800156a:	69fb      	ldr	r3, [r7, #28]
 800156c:	f003 0307 	and.w	r3, r3, #7
 8001570:	009b      	lsls	r3, r3, #2
 8001572:	fa02 f303 	lsl.w	r3, r2, r3
 8001576:	69ba      	ldr	r2, [r7, #24]
 8001578:	4313      	orrs	r3, r2
 800157a:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 800157c:	69fb      	ldr	r3, [r7, #28]
 800157e:	08da      	lsrs	r2, r3, #3
 8001580:	687b      	ldr	r3, [r7, #4]
 8001582:	3208      	adds	r2, #8
 8001584:	69b9      	ldr	r1, [r7, #24]
 8001586:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800158a:	687b      	ldr	r3, [r7, #4]
 800158c:	681b      	ldr	r3, [r3, #0]
 800158e:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 8001590:	69fb      	ldr	r3, [r7, #28]
 8001592:	005b      	lsls	r3, r3, #1
 8001594:	2203      	movs	r2, #3
 8001596:	fa02 f303 	lsl.w	r3, r2, r3
 800159a:	43db      	mvns	r3, r3
 800159c:	69ba      	ldr	r2, [r7, #24]
 800159e:	4013      	ands	r3, r2
 80015a0:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80015a2:	683b      	ldr	r3, [r7, #0]
 80015a4:	685b      	ldr	r3, [r3, #4]
 80015a6:	f003 0203 	and.w	r2, r3, #3
 80015aa:	69fb      	ldr	r3, [r7, #28]
 80015ac:	005b      	lsls	r3, r3, #1
 80015ae:	fa02 f303 	lsl.w	r3, r2, r3
 80015b2:	69ba      	ldr	r2, [r7, #24]
 80015b4:	4313      	orrs	r3, r2
 80015b6:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 80015b8:	687b      	ldr	r3, [r7, #4]
 80015ba:	69ba      	ldr	r2, [r7, #24]
 80015bc:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 80015be:	683b      	ldr	r3, [r7, #0]
 80015c0:	685b      	ldr	r3, [r3, #4]
 80015c2:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 80015c6:	2b00      	cmp	r3, #0
 80015c8:	f000 80e0 	beq.w	800178c <HAL_GPIO_Init+0x338>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80015cc:	4b2f      	ldr	r3, [pc, #188]	; (800168c <HAL_GPIO_Init+0x238>)
 80015ce:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 80015d2:	4a2e      	ldr	r2, [pc, #184]	; (800168c <HAL_GPIO_Init+0x238>)
 80015d4:	f043 0302 	orr.w	r3, r3, #2
 80015d8:	f8c2 30f4 	str.w	r3, [r2, #244]	; 0xf4
 80015dc:	4b2b      	ldr	r3, [pc, #172]	; (800168c <HAL_GPIO_Init+0x238>)
 80015de:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 80015e2:	f003 0302 	and.w	r3, r3, #2
 80015e6:	60fb      	str	r3, [r7, #12]
 80015e8:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 80015ea:	4a29      	ldr	r2, [pc, #164]	; (8001690 <HAL_GPIO_Init+0x23c>)
 80015ec:	69fb      	ldr	r3, [r7, #28]
 80015ee:	089b      	lsrs	r3, r3, #2
 80015f0:	3302      	adds	r3, #2
 80015f2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80015f6:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 80015f8:	69fb      	ldr	r3, [r7, #28]
 80015fa:	f003 0303 	and.w	r3, r3, #3
 80015fe:	009b      	lsls	r3, r3, #2
 8001600:	220f      	movs	r2, #15
 8001602:	fa02 f303 	lsl.w	r3, r2, r3
 8001606:	43db      	mvns	r3, r3
 8001608:	69ba      	ldr	r2, [r7, #24]
 800160a:	4013      	ands	r3, r2
 800160c:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 800160e:	687b      	ldr	r3, [r7, #4]
 8001610:	4a20      	ldr	r2, [pc, #128]	; (8001694 <HAL_GPIO_Init+0x240>)
 8001612:	4293      	cmp	r3, r2
 8001614:	d052      	beq.n	80016bc <HAL_GPIO_Init+0x268>
 8001616:	687b      	ldr	r3, [r7, #4]
 8001618:	4a1f      	ldr	r2, [pc, #124]	; (8001698 <HAL_GPIO_Init+0x244>)
 800161a:	4293      	cmp	r3, r2
 800161c:	d031      	beq.n	8001682 <HAL_GPIO_Init+0x22e>
 800161e:	687b      	ldr	r3, [r7, #4]
 8001620:	4a1e      	ldr	r2, [pc, #120]	; (800169c <HAL_GPIO_Init+0x248>)
 8001622:	4293      	cmp	r3, r2
 8001624:	d02b      	beq.n	800167e <HAL_GPIO_Init+0x22a>
 8001626:	687b      	ldr	r3, [r7, #4]
 8001628:	4a1d      	ldr	r2, [pc, #116]	; (80016a0 <HAL_GPIO_Init+0x24c>)
 800162a:	4293      	cmp	r3, r2
 800162c:	d025      	beq.n	800167a <HAL_GPIO_Init+0x226>
 800162e:	687b      	ldr	r3, [r7, #4]
 8001630:	4a1c      	ldr	r2, [pc, #112]	; (80016a4 <HAL_GPIO_Init+0x250>)
 8001632:	4293      	cmp	r3, r2
 8001634:	d01f      	beq.n	8001676 <HAL_GPIO_Init+0x222>
 8001636:	687b      	ldr	r3, [r7, #4]
 8001638:	4a1b      	ldr	r2, [pc, #108]	; (80016a8 <HAL_GPIO_Init+0x254>)
 800163a:	4293      	cmp	r3, r2
 800163c:	d019      	beq.n	8001672 <HAL_GPIO_Init+0x21e>
 800163e:	687b      	ldr	r3, [r7, #4]
 8001640:	4a1a      	ldr	r2, [pc, #104]	; (80016ac <HAL_GPIO_Init+0x258>)
 8001642:	4293      	cmp	r3, r2
 8001644:	d013      	beq.n	800166e <HAL_GPIO_Init+0x21a>
 8001646:	687b      	ldr	r3, [r7, #4]
 8001648:	4a19      	ldr	r2, [pc, #100]	; (80016b0 <HAL_GPIO_Init+0x25c>)
 800164a:	4293      	cmp	r3, r2
 800164c:	d00d      	beq.n	800166a <HAL_GPIO_Init+0x216>
 800164e:	687b      	ldr	r3, [r7, #4]
 8001650:	4a18      	ldr	r2, [pc, #96]	; (80016b4 <HAL_GPIO_Init+0x260>)
 8001652:	4293      	cmp	r3, r2
 8001654:	d007      	beq.n	8001666 <HAL_GPIO_Init+0x212>
 8001656:	687b      	ldr	r3, [r7, #4]
 8001658:	4a17      	ldr	r2, [pc, #92]	; (80016b8 <HAL_GPIO_Init+0x264>)
 800165a:	4293      	cmp	r3, r2
 800165c:	d101      	bne.n	8001662 <HAL_GPIO_Init+0x20e>
 800165e:	2309      	movs	r3, #9
 8001660:	e02d      	b.n	80016be <HAL_GPIO_Init+0x26a>
 8001662:	230a      	movs	r3, #10
 8001664:	e02b      	b.n	80016be <HAL_GPIO_Init+0x26a>
 8001666:	2308      	movs	r3, #8
 8001668:	e029      	b.n	80016be <HAL_GPIO_Init+0x26a>
 800166a:	2307      	movs	r3, #7
 800166c:	e027      	b.n	80016be <HAL_GPIO_Init+0x26a>
 800166e:	2306      	movs	r3, #6
 8001670:	e025      	b.n	80016be <HAL_GPIO_Init+0x26a>
 8001672:	2305      	movs	r3, #5
 8001674:	e023      	b.n	80016be <HAL_GPIO_Init+0x26a>
 8001676:	2304      	movs	r3, #4
 8001678:	e021      	b.n	80016be <HAL_GPIO_Init+0x26a>
 800167a:	2303      	movs	r3, #3
 800167c:	e01f      	b.n	80016be <HAL_GPIO_Init+0x26a>
 800167e:	2302      	movs	r3, #2
 8001680:	e01d      	b.n	80016be <HAL_GPIO_Init+0x26a>
 8001682:	2301      	movs	r3, #1
 8001684:	e01b      	b.n	80016be <HAL_GPIO_Init+0x26a>
 8001686:	bf00      	nop
 8001688:	58000080 	.word	0x58000080
 800168c:	58024400 	.word	0x58024400
 8001690:	58000400 	.word	0x58000400
 8001694:	58020000 	.word	0x58020000
 8001698:	58020400 	.word	0x58020400
 800169c:	58020800 	.word	0x58020800
 80016a0:	58020c00 	.word	0x58020c00
 80016a4:	58021000 	.word	0x58021000
 80016a8:	58021400 	.word	0x58021400
 80016ac:	58021800 	.word	0x58021800
 80016b0:	58021c00 	.word	0x58021c00
 80016b4:	58022000 	.word	0x58022000
 80016b8:	58022400 	.word	0x58022400
 80016bc:	2300      	movs	r3, #0
 80016be:	69fa      	ldr	r2, [r7, #28]
 80016c0:	f002 0203 	and.w	r2, r2, #3
 80016c4:	0092      	lsls	r2, r2, #2
 80016c6:	4093      	lsls	r3, r2
 80016c8:	69ba      	ldr	r2, [r7, #24]
 80016ca:	4313      	orrs	r3, r2
 80016cc:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 80016ce:	4938      	ldr	r1, [pc, #224]	; (80017b0 <HAL_GPIO_Init+0x35c>)
 80016d0:	69fb      	ldr	r3, [r7, #28]
 80016d2:	089b      	lsrs	r3, r3, #2
 80016d4:	3302      	adds	r3, #2
 80016d6:	69ba      	ldr	r2, [r7, #24]
 80016d8:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 80016dc:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80016e0:	681b      	ldr	r3, [r3, #0]
 80016e2:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 80016e4:	693b      	ldr	r3, [r7, #16]
 80016e6:	43db      	mvns	r3, r3
 80016e8:	69ba      	ldr	r2, [r7, #24]
 80016ea:	4013      	ands	r3, r2
 80016ec:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 80016ee:	683b      	ldr	r3, [r7, #0]
 80016f0:	685b      	ldr	r3, [r3, #4]
 80016f2:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80016f6:	2b00      	cmp	r3, #0
 80016f8:	d003      	beq.n	8001702 <HAL_GPIO_Init+0x2ae>
        {
          temp |= iocurrent;
 80016fa:	69ba      	ldr	r2, [r7, #24]
 80016fc:	693b      	ldr	r3, [r7, #16]
 80016fe:	4313      	orrs	r3, r2
 8001700:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR1 = temp;
 8001702:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8001706:	69bb      	ldr	r3, [r7, #24]
 8001708:	6013      	str	r3, [r2, #0]

        temp = EXTI->FTSR1;
 800170a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800170e:	685b      	ldr	r3, [r3, #4]
 8001710:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8001712:	693b      	ldr	r3, [r7, #16]
 8001714:	43db      	mvns	r3, r3
 8001716:	69ba      	ldr	r2, [r7, #24]
 8001718:	4013      	ands	r3, r2
 800171a:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 800171c:	683b      	ldr	r3, [r7, #0]
 800171e:	685b      	ldr	r3, [r3, #4]
 8001720:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001724:	2b00      	cmp	r3, #0
 8001726:	d003      	beq.n	8001730 <HAL_GPIO_Init+0x2dc>
        {
          temp |= iocurrent;
 8001728:	69ba      	ldr	r2, [r7, #24]
 800172a:	693b      	ldr	r3, [r7, #16]
 800172c:	4313      	orrs	r3, r2
 800172e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR1 = temp;
 8001730:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8001734:	69bb      	ldr	r3, [r7, #24]
 8001736:	6053      	str	r3, [r2, #4]

        temp = EXTI_CurrentCPU->EMR1;
 8001738:	697b      	ldr	r3, [r7, #20]
 800173a:	685b      	ldr	r3, [r3, #4]
 800173c:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 800173e:	693b      	ldr	r3, [r7, #16]
 8001740:	43db      	mvns	r3, r3
 8001742:	69ba      	ldr	r2, [r7, #24]
 8001744:	4013      	ands	r3, r2
 8001746:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8001748:	683b      	ldr	r3, [r7, #0]
 800174a:	685b      	ldr	r3, [r3, #4]
 800174c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001750:	2b00      	cmp	r3, #0
 8001752:	d003      	beq.n	800175c <HAL_GPIO_Init+0x308>
        {
          temp |= iocurrent;
 8001754:	69ba      	ldr	r2, [r7, #24]
 8001756:	693b      	ldr	r3, [r7, #16]
 8001758:	4313      	orrs	r3, r2
 800175a:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->EMR1 = temp;
 800175c:	697b      	ldr	r3, [r7, #20]
 800175e:	69ba      	ldr	r2, [r7, #24]
 8001760:	605a      	str	r2, [r3, #4]

        /* Clear EXTI line configuration */
        temp = EXTI_CurrentCPU->IMR1;
 8001762:	697b      	ldr	r3, [r7, #20]
 8001764:	681b      	ldr	r3, [r3, #0]
 8001766:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8001768:	693b      	ldr	r3, [r7, #16]
 800176a:	43db      	mvns	r3, r3
 800176c:	69ba      	ldr	r2, [r7, #24]
 800176e:	4013      	ands	r3, r2
 8001770:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8001772:	683b      	ldr	r3, [r7, #0]
 8001774:	685b      	ldr	r3, [r3, #4]
 8001776:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800177a:	2b00      	cmp	r3, #0
 800177c:	d003      	beq.n	8001786 <HAL_GPIO_Init+0x332>
        {
          temp |= iocurrent;
 800177e:	69ba      	ldr	r2, [r7, #24]
 8001780:	693b      	ldr	r3, [r7, #16]
 8001782:	4313      	orrs	r3, r2
 8001784:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->IMR1 = temp;
 8001786:	697b      	ldr	r3, [r7, #20]
 8001788:	69ba      	ldr	r2, [r7, #24]
 800178a:	601a      	str	r2, [r3, #0]
      }
    }

    position++;
 800178c:	69fb      	ldr	r3, [r7, #28]
 800178e:	3301      	adds	r3, #1
 8001790:	61fb      	str	r3, [r7, #28]
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 8001792:	683b      	ldr	r3, [r7, #0]
 8001794:	681a      	ldr	r2, [r3, #0]
 8001796:	69fb      	ldr	r3, [r7, #28]
 8001798:	fa22 f303 	lsr.w	r3, r2, r3
 800179c:	2b00      	cmp	r3, #0
 800179e:	f47f ae63 	bne.w	8001468 <HAL_GPIO_Init+0x14>
  }
}
 80017a2:	bf00      	nop
 80017a4:	bf00      	nop
 80017a6:	3724      	adds	r7, #36	; 0x24
 80017a8:	46bd      	mov	sp, r7
 80017aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017ae:	4770      	bx	lr
 80017b0:	58000400 	.word	0x58000400

080017b4 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80017b4:	b480      	push	{r7}
 80017b6:	b083      	sub	sp, #12
 80017b8:	af00      	add	r7, sp, #0
 80017ba:	6078      	str	r0, [r7, #4]
 80017bc:	460b      	mov	r3, r1
 80017be:	807b      	strh	r3, [r7, #2]
 80017c0:	4613      	mov	r3, r2
 80017c2:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 80017c4:	787b      	ldrb	r3, [r7, #1]
 80017c6:	2b00      	cmp	r3, #0
 80017c8:	d003      	beq.n	80017d2 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80017ca:	887a      	ldrh	r2, [r7, #2]
 80017cc:	687b      	ldr	r3, [r7, #4]
 80017ce:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
  }
}
 80017d0:	e003      	b.n	80017da <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
 80017d2:	887b      	ldrh	r3, [r7, #2]
 80017d4:	041a      	lsls	r2, r3, #16
 80017d6:	687b      	ldr	r3, [r7, #4]
 80017d8:	619a      	str	r2, [r3, #24]
}
 80017da:	bf00      	nop
 80017dc:	370c      	adds	r7, #12
 80017de:	46bd      	mov	sp, r7
 80017e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017e4:	4770      	bx	lr

080017e6 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  Handle EXTI interrupt request.
  * @param  GPIO_Pin: Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 80017e6:	b580      	push	{r7, lr}
 80017e8:	b082      	sub	sp, #8
 80017ea:	af00      	add	r7, sp, #0
 80017ec:	4603      	mov	r3, r0
 80017ee:	80fb      	strh	r3, [r7, #6]
    __HAL_GPIO_EXTID2_CLEAR_IT(GPIO_Pin);
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
  }
#else
  /* EXTI line interrupt detected */
  if (__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00U)
 80017f0:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80017f4:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
 80017f8:	88fb      	ldrh	r3, [r7, #6]
 80017fa:	4013      	ands	r3, r2
 80017fc:	2b00      	cmp	r3, #0
 80017fe:	d008      	beq.n	8001812 <HAL_GPIO_EXTI_IRQHandler+0x2c>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8001800:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8001804:	88fb      	ldrh	r3, [r7, #6]
 8001806:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 800180a:	88fb      	ldrh	r3, [r7, #6]
 800180c:	4618      	mov	r0, r3
 800180e:	f7fe ffe1 	bl	80007d4 <HAL_GPIO_EXTI_Callback>
  }
#endif
}
 8001812:	bf00      	nop
 8001814:	3708      	adds	r7, #8
 8001816:	46bd      	mov	sp, r7
 8001818:	bd80      	pop	{r7, pc}

0800181a <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 800181a:	b5f0      	push	{r4, r5, r6, r7, lr}
 800181c:	b08f      	sub	sp, #60	; 0x3c
 800181e:	af0a      	add	r7, sp, #40	; 0x28
 8001820:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx;
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 8001822:	687b      	ldr	r3, [r7, #4]
 8001824:	2b00      	cmp	r3, #0
 8001826:	d101      	bne.n	800182c <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 8001828:	2301      	movs	r3, #1
 800182a:	e116      	b.n	8001a5a <HAL_PCD_Init+0x240>
  }

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

  USBx = hpcd->Instance;
 800182c:	687b      	ldr	r3, [r7, #4]
 800182e:	681b      	ldr	r3, [r3, #0]
 8001830:	60bb      	str	r3, [r7, #8]

  if (hpcd->State == HAL_PCD_STATE_RESET)
 8001832:	687b      	ldr	r3, [r7, #4]
 8001834:	f893 34bd 	ldrb.w	r3, [r3, #1213]	; 0x4bd
 8001838:	b2db      	uxtb	r3, r3
 800183a:	2b00      	cmp	r3, #0
 800183c:	d106      	bne.n	800184c <HAL_PCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 800183e:	687b      	ldr	r3, [r7, #4]
 8001840:	2200      	movs	r2, #0
 8001842:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 8001846:	6878      	ldr	r0, [r7, #4]
 8001848:	f008 fa14 	bl	8009c74 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 800184c:	687b      	ldr	r3, [r7, #4]
 800184e:	2203      	movs	r2, #3
 8001850:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd

  /* Disable DMA mode for FS instance */
  if ((USBx->CID & (0x1U << 8)) == 0U)
 8001854:	68bb      	ldr	r3, [r7, #8]
 8001856:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001858:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800185c:	2b00      	cmp	r3, #0
 800185e:	d102      	bne.n	8001866 <HAL_PCD_Init+0x4c>
  {
    hpcd->Init.dma_enable = 0U;
 8001860:	687b      	ldr	r3, [r7, #4]
 8001862:	2200      	movs	r2, #0
 8001864:	611a      	str	r2, [r3, #16]
  }

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 8001866:	687b      	ldr	r3, [r7, #4]
 8001868:	681b      	ldr	r3, [r3, #0]
 800186a:	4618      	mov	r0, r3
 800186c:	f004 fcf1 	bl	8006252 <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8001870:	687b      	ldr	r3, [r7, #4]
 8001872:	681b      	ldr	r3, [r3, #0]
 8001874:	603b      	str	r3, [r7, #0]
 8001876:	687e      	ldr	r6, [r7, #4]
 8001878:	466d      	mov	r5, sp
 800187a:	f106 0410 	add.w	r4, r6, #16
 800187e:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001880:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8001882:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001884:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8001886:	e894 0003 	ldmia.w	r4, {r0, r1}
 800188a:	e885 0003 	stmia.w	r5, {r0, r1}
 800188e:	1d33      	adds	r3, r6, #4
 8001890:	cb0e      	ldmia	r3, {r1, r2, r3}
 8001892:	6838      	ldr	r0, [r7, #0]
 8001894:	f004 fbbc 	bl	8006010 <USB_CoreInit>
 8001898:	4603      	mov	r3, r0
 800189a:	2b00      	cmp	r3, #0
 800189c:	d005      	beq.n	80018aa <HAL_PCD_Init+0x90>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 800189e:	687b      	ldr	r3, [r7, #4]
 80018a0:	2202      	movs	r2, #2
 80018a2:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd
    return HAL_ERROR;
 80018a6:	2301      	movs	r3, #1
 80018a8:	e0d7      	b.n	8001a5a <HAL_PCD_Init+0x240>
  }

  /* Force Device Mode*/
  (void)USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE);
 80018aa:	687b      	ldr	r3, [r7, #4]
 80018ac:	681b      	ldr	r3, [r3, #0]
 80018ae:	2100      	movs	r1, #0
 80018b0:	4618      	mov	r0, r3
 80018b2:	f004 fcdf 	bl	8006274 <USB_SetCurrentMode>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80018b6:	2300      	movs	r3, #0
 80018b8:	73fb      	strb	r3, [r7, #15]
 80018ba:	e04a      	b.n	8001952 <HAL_PCD_Init+0x138>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 80018bc:	7bfa      	ldrb	r2, [r7, #15]
 80018be:	6879      	ldr	r1, [r7, #4]
 80018c0:	4613      	mov	r3, r2
 80018c2:	00db      	lsls	r3, r3, #3
 80018c4:	4413      	add	r3, r2
 80018c6:	009b      	lsls	r3, r3, #2
 80018c8:	440b      	add	r3, r1
 80018ca:	333d      	adds	r3, #61	; 0x3d
 80018cc:	2201      	movs	r2, #1
 80018ce:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 80018d0:	7bfa      	ldrb	r2, [r7, #15]
 80018d2:	6879      	ldr	r1, [r7, #4]
 80018d4:	4613      	mov	r3, r2
 80018d6:	00db      	lsls	r3, r3, #3
 80018d8:	4413      	add	r3, r2
 80018da:	009b      	lsls	r3, r3, #2
 80018dc:	440b      	add	r3, r1
 80018de:	333c      	adds	r3, #60	; 0x3c
 80018e0:	7bfa      	ldrb	r2, [r7, #15]
 80018e2:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 80018e4:	7bfa      	ldrb	r2, [r7, #15]
 80018e6:	7bfb      	ldrb	r3, [r7, #15]
 80018e8:	b298      	uxth	r0, r3
 80018ea:	6879      	ldr	r1, [r7, #4]
 80018ec:	4613      	mov	r3, r2
 80018ee:	00db      	lsls	r3, r3, #3
 80018f0:	4413      	add	r3, r2
 80018f2:	009b      	lsls	r3, r3, #2
 80018f4:	440b      	add	r3, r1
 80018f6:	3344      	adds	r3, #68	; 0x44
 80018f8:	4602      	mov	r2, r0
 80018fa:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 80018fc:	7bfa      	ldrb	r2, [r7, #15]
 80018fe:	6879      	ldr	r1, [r7, #4]
 8001900:	4613      	mov	r3, r2
 8001902:	00db      	lsls	r3, r3, #3
 8001904:	4413      	add	r3, r2
 8001906:	009b      	lsls	r3, r3, #2
 8001908:	440b      	add	r3, r1
 800190a:	3340      	adds	r3, #64	; 0x40
 800190c:	2200      	movs	r2, #0
 800190e:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 8001910:	7bfa      	ldrb	r2, [r7, #15]
 8001912:	6879      	ldr	r1, [r7, #4]
 8001914:	4613      	mov	r3, r2
 8001916:	00db      	lsls	r3, r3, #3
 8001918:	4413      	add	r3, r2
 800191a:	009b      	lsls	r3, r3, #2
 800191c:	440b      	add	r3, r1
 800191e:	3348      	adds	r3, #72	; 0x48
 8001920:	2200      	movs	r2, #0
 8001922:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 8001924:	7bfa      	ldrb	r2, [r7, #15]
 8001926:	6879      	ldr	r1, [r7, #4]
 8001928:	4613      	mov	r3, r2
 800192a:	00db      	lsls	r3, r3, #3
 800192c:	4413      	add	r3, r2
 800192e:	009b      	lsls	r3, r3, #2
 8001930:	440b      	add	r3, r1
 8001932:	334c      	adds	r3, #76	; 0x4c
 8001934:	2200      	movs	r2, #0
 8001936:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 8001938:	7bfa      	ldrb	r2, [r7, #15]
 800193a:	6879      	ldr	r1, [r7, #4]
 800193c:	4613      	mov	r3, r2
 800193e:	00db      	lsls	r3, r3, #3
 8001940:	4413      	add	r3, r2
 8001942:	009b      	lsls	r3, r3, #2
 8001944:	440b      	add	r3, r1
 8001946:	3354      	adds	r3, #84	; 0x54
 8001948:	2200      	movs	r2, #0
 800194a:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800194c:	7bfb      	ldrb	r3, [r7, #15]
 800194e:	3301      	adds	r3, #1
 8001950:	73fb      	strb	r3, [r7, #15]
 8001952:	7bfa      	ldrb	r2, [r7, #15]
 8001954:	687b      	ldr	r3, [r7, #4]
 8001956:	685b      	ldr	r3, [r3, #4]
 8001958:	429a      	cmp	r2, r3
 800195a:	d3af      	bcc.n	80018bc <HAL_PCD_Init+0xa2>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800195c:	2300      	movs	r3, #0
 800195e:	73fb      	strb	r3, [r7, #15]
 8001960:	e044      	b.n	80019ec <HAL_PCD_Init+0x1d2>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 8001962:	7bfa      	ldrb	r2, [r7, #15]
 8001964:	6879      	ldr	r1, [r7, #4]
 8001966:	4613      	mov	r3, r2
 8001968:	00db      	lsls	r3, r3, #3
 800196a:	4413      	add	r3, r2
 800196c:	009b      	lsls	r3, r3, #2
 800196e:	440b      	add	r3, r1
 8001970:	f203 237d 	addw	r3, r3, #637	; 0x27d
 8001974:	2200      	movs	r2, #0
 8001976:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 8001978:	7bfa      	ldrb	r2, [r7, #15]
 800197a:	6879      	ldr	r1, [r7, #4]
 800197c:	4613      	mov	r3, r2
 800197e:	00db      	lsls	r3, r3, #3
 8001980:	4413      	add	r3, r2
 8001982:	009b      	lsls	r3, r3, #2
 8001984:	440b      	add	r3, r1
 8001986:	f503 731f 	add.w	r3, r3, #636	; 0x27c
 800198a:	7bfa      	ldrb	r2, [r7, #15]
 800198c:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 800198e:	7bfa      	ldrb	r2, [r7, #15]
 8001990:	6879      	ldr	r1, [r7, #4]
 8001992:	4613      	mov	r3, r2
 8001994:	00db      	lsls	r3, r3, #3
 8001996:	4413      	add	r3, r2
 8001998:	009b      	lsls	r3, r3, #2
 800199a:	440b      	add	r3, r1
 800199c:	f503 7320 	add.w	r3, r3, #640	; 0x280
 80019a0:	2200      	movs	r2, #0
 80019a2:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 80019a4:	7bfa      	ldrb	r2, [r7, #15]
 80019a6:	6879      	ldr	r1, [r7, #4]
 80019a8:	4613      	mov	r3, r2
 80019aa:	00db      	lsls	r3, r3, #3
 80019ac:	4413      	add	r3, r2
 80019ae:	009b      	lsls	r3, r3, #2
 80019b0:	440b      	add	r3, r1
 80019b2:	f503 7322 	add.w	r3, r3, #648	; 0x288
 80019b6:	2200      	movs	r2, #0
 80019b8:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 80019ba:	7bfa      	ldrb	r2, [r7, #15]
 80019bc:	6879      	ldr	r1, [r7, #4]
 80019be:	4613      	mov	r3, r2
 80019c0:	00db      	lsls	r3, r3, #3
 80019c2:	4413      	add	r3, r2
 80019c4:	009b      	lsls	r3, r3, #2
 80019c6:	440b      	add	r3, r1
 80019c8:	f503 7323 	add.w	r3, r3, #652	; 0x28c
 80019cc:	2200      	movs	r2, #0
 80019ce:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 80019d0:	7bfa      	ldrb	r2, [r7, #15]
 80019d2:	6879      	ldr	r1, [r7, #4]
 80019d4:	4613      	mov	r3, r2
 80019d6:	00db      	lsls	r3, r3, #3
 80019d8:	4413      	add	r3, r2
 80019da:	009b      	lsls	r3, r3, #2
 80019dc:	440b      	add	r3, r1
 80019de:	f503 7325 	add.w	r3, r3, #660	; 0x294
 80019e2:	2200      	movs	r2, #0
 80019e4:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80019e6:	7bfb      	ldrb	r3, [r7, #15]
 80019e8:	3301      	adds	r3, #1
 80019ea:	73fb      	strb	r3, [r7, #15]
 80019ec:	7bfa      	ldrb	r2, [r7, #15]
 80019ee:	687b      	ldr	r3, [r7, #4]
 80019f0:	685b      	ldr	r3, [r3, #4]
 80019f2:	429a      	cmp	r2, r3
 80019f4:	d3b5      	bcc.n	8001962 <HAL_PCD_Init+0x148>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 80019f6:	687b      	ldr	r3, [r7, #4]
 80019f8:	681b      	ldr	r3, [r3, #0]
 80019fa:	603b      	str	r3, [r7, #0]
 80019fc:	687e      	ldr	r6, [r7, #4]
 80019fe:	466d      	mov	r5, sp
 8001a00:	f106 0410 	add.w	r4, r6, #16
 8001a04:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001a06:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8001a08:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001a0a:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8001a0c:	e894 0003 	ldmia.w	r4, {r0, r1}
 8001a10:	e885 0003 	stmia.w	r5, {r0, r1}
 8001a14:	1d33      	adds	r3, r6, #4
 8001a16:	cb0e      	ldmia	r3, {r1, r2, r3}
 8001a18:	6838      	ldr	r0, [r7, #0]
 8001a1a:	f004 fc77 	bl	800630c <USB_DevInit>
 8001a1e:	4603      	mov	r3, r0
 8001a20:	2b00      	cmp	r3, #0
 8001a22:	d005      	beq.n	8001a30 <HAL_PCD_Init+0x216>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8001a24:	687b      	ldr	r3, [r7, #4]
 8001a26:	2202      	movs	r2, #2
 8001a28:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd
    return HAL_ERROR;
 8001a2c:	2301      	movs	r3, #1
 8001a2e:	e014      	b.n	8001a5a <HAL_PCD_Init+0x240>
  }

  hpcd->USB_Address = 0U;
 8001a30:	687b      	ldr	r3, [r7, #4]
 8001a32:	2200      	movs	r2, #0
 8001a34:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  hpcd->State = HAL_PCD_STATE_READY;
 8001a38:	687b      	ldr	r3, [r7, #4]
 8001a3a:	2201      	movs	r2, #1
 8001a3c:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd

  /* Activate LPM */
  if (hpcd->Init.lpm_enable == 1U)
 8001a40:	687b      	ldr	r3, [r7, #4]
 8001a42:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001a44:	2b01      	cmp	r3, #1
 8001a46:	d102      	bne.n	8001a4e <HAL_PCD_Init+0x234>
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
 8001a48:	6878      	ldr	r0, [r7, #4]
 8001a4a:	f001 f98b 	bl	8002d64 <HAL_PCDEx_ActivateLPM>
  }

  (void)USB_DevDisconnect(hpcd->Instance);
 8001a4e:	687b      	ldr	r3, [r7, #4]
 8001a50:	681b      	ldr	r3, [r3, #0]
 8001a52:	4618      	mov	r0, r3
 8001a54:	f005 fdc5 	bl	80075e2 <USB_DevDisconnect>

  return HAL_OK;
 8001a58:	2300      	movs	r3, #0
}
 8001a5a:	4618      	mov	r0, r3
 8001a5c:	3714      	adds	r7, #20
 8001a5e:	46bd      	mov	sp, r7
 8001a60:	bdf0      	pop	{r4, r5, r6, r7, pc}

08001a62 <HAL_PCD_Start>:
  * @brief  Start the USB device
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Start(PCD_HandleTypeDef *hpcd)
{
 8001a62:	b580      	push	{r7, lr}
 8001a64:	b084      	sub	sp, #16
 8001a66:	af00      	add	r7, sp, #0
 8001a68:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8001a6a:	687b      	ldr	r3, [r7, #4]
 8001a6c:	681b      	ldr	r3, [r3, #0]
 8001a6e:	60fb      	str	r3, [r7, #12]

  __HAL_LOCK(hpcd);
 8001a70:	687b      	ldr	r3, [r7, #4]
 8001a72:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 8001a76:	2b01      	cmp	r3, #1
 8001a78:	d101      	bne.n	8001a7e <HAL_PCD_Start+0x1c>
 8001a7a:	2302      	movs	r3, #2
 8001a7c:	e020      	b.n	8001ac0 <HAL_PCD_Start+0x5e>
 8001a7e:	687b      	ldr	r3, [r7, #4]
 8001a80:	2201      	movs	r2, #1
 8001a82:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  if ((hpcd->Init.battery_charging_enable == 1U) &&
 8001a86:	687b      	ldr	r3, [r7, #4]
 8001a88:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001a8a:	2b01      	cmp	r3, #1
 8001a8c:	d109      	bne.n	8001aa2 <HAL_PCD_Start+0x40>
      (hpcd->Init.phy_itface != USB_OTG_ULPI_PHY))
 8001a8e:	687b      	ldr	r3, [r7, #4]
 8001a90:	699b      	ldr	r3, [r3, #24]
  if ((hpcd->Init.battery_charging_enable == 1U) &&
 8001a92:	2b01      	cmp	r3, #1
 8001a94:	d005      	beq.n	8001aa2 <HAL_PCD_Start+0x40>
  {
    /* Enable USB Transceiver */
    USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 8001a96:	68fb      	ldr	r3, [r7, #12]
 8001a98:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001a9a:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 8001a9e:	68fb      	ldr	r3, [r7, #12]
 8001aa0:	639a      	str	r2, [r3, #56]	; 0x38
  }

  __HAL_PCD_ENABLE(hpcd);
 8001aa2:	687b      	ldr	r3, [r7, #4]
 8001aa4:	681b      	ldr	r3, [r3, #0]
 8001aa6:	4618      	mov	r0, r3
 8001aa8:	f004 fbc2 	bl	8006230 <USB_EnableGlobalInt>
  (void)USB_DevConnect(hpcd->Instance);
 8001aac:	687b      	ldr	r3, [r7, #4]
 8001aae:	681b      	ldr	r3, [r3, #0]
 8001ab0:	4618      	mov	r0, r3
 8001ab2:	f005 fd75 	bl	80075a0 <USB_DevConnect>
  __HAL_UNLOCK(hpcd);
 8001ab6:	687b      	ldr	r3, [r7, #4]
 8001ab8:	2200      	movs	r2, #0
 8001aba:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  return HAL_OK;
 8001abe:	2300      	movs	r3, #0
}
 8001ac0:	4618      	mov	r0, r3
 8001ac2:	3710      	adds	r7, #16
 8001ac4:	46bd      	mov	sp, r7
 8001ac6:	bd80      	pop	{r7, pc}

08001ac8 <HAL_PCD_IRQHandler>:
  * @brief  Handles PCD interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
void HAL_PCD_IRQHandler(PCD_HandleTypeDef *hpcd)
{
 8001ac8:	b590      	push	{r4, r7, lr}
 8001aca:	b08d      	sub	sp, #52	; 0x34
 8001acc:	af00      	add	r7, sp, #0
 8001ace:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8001ad0:	687b      	ldr	r3, [r7, #4]
 8001ad2:	681b      	ldr	r3, [r3, #0]
 8001ad4:	623b      	str	r3, [r7, #32]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8001ad6:	6a3b      	ldr	r3, [r7, #32]
 8001ad8:	61fb      	str	r3, [r7, #28]
  uint32_t epnum;
  uint32_t fifoemptymsk;
  uint32_t RegVal;

  /* ensure that we are in device mode */
  if (USB_GetMode(hpcd->Instance) == USB_OTG_MODE_DEVICE)
 8001ada:	687b      	ldr	r3, [r7, #4]
 8001adc:	681b      	ldr	r3, [r3, #0]
 8001ade:	4618      	mov	r0, r3
 8001ae0:	f005 fe33 	bl	800774a <USB_GetMode>
 8001ae4:	4603      	mov	r3, r0
 8001ae6:	2b00      	cmp	r3, #0
 8001ae8:	f040 84b7 	bne.w	800245a <HAL_PCD_IRQHandler+0x992>
  {
    /* avoid spurious interrupt */
    if (__HAL_PCD_IS_INVALID_INTERRUPT(hpcd))
 8001aec:	687b      	ldr	r3, [r7, #4]
 8001aee:	681b      	ldr	r3, [r3, #0]
 8001af0:	4618      	mov	r0, r3
 8001af2:	f005 fd97 	bl	8007624 <USB_ReadInterrupts>
 8001af6:	4603      	mov	r3, r0
 8001af8:	2b00      	cmp	r3, #0
 8001afa:	f000 84ad 	beq.w	8002458 <HAL_PCD_IRQHandler+0x990>
    {
      return;
    }

    /* store current frame number */
    hpcd->FrameNumber = (USBx_DEVICE->DSTS & USB_OTG_DSTS_FNSOF_Msk) >> USB_OTG_DSTS_FNSOF_Pos;
 8001afe:	69fb      	ldr	r3, [r7, #28]
 8001b00:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8001b04:	689b      	ldr	r3, [r3, #8]
 8001b06:	0a1b      	lsrs	r3, r3, #8
 8001b08:	f3c3 020d 	ubfx	r2, r3, #0, #14
 8001b0c:	687b      	ldr	r3, [r7, #4]
 8001b0e:	f8c3 24fc 	str.w	r2, [r3, #1276]	; 0x4fc

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_MMIS))
 8001b12:	687b      	ldr	r3, [r7, #4]
 8001b14:	681b      	ldr	r3, [r3, #0]
 8001b16:	4618      	mov	r0, r3
 8001b18:	f005 fd84 	bl	8007624 <USB_ReadInterrupts>
 8001b1c:	4603      	mov	r3, r0
 8001b1e:	f003 0302 	and.w	r3, r3, #2
 8001b22:	2b02      	cmp	r3, #2
 8001b24:	d107      	bne.n	8001b36 <HAL_PCD_IRQHandler+0x6e>
    {
      /* incorrect mode, acknowledge the interrupt */
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_MMIS);
 8001b26:	687b      	ldr	r3, [r7, #4]
 8001b28:	681b      	ldr	r3, [r3, #0]
 8001b2a:	695a      	ldr	r2, [r3, #20]
 8001b2c:	687b      	ldr	r3, [r7, #4]
 8001b2e:	681b      	ldr	r3, [r3, #0]
 8001b30:	f002 0202 	and.w	r2, r2, #2
 8001b34:	615a      	str	r2, [r3, #20]
    }

    /* Handle RxQLevel Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_RXFLVL))
 8001b36:	687b      	ldr	r3, [r7, #4]
 8001b38:	681b      	ldr	r3, [r3, #0]
 8001b3a:	4618      	mov	r0, r3
 8001b3c:	f005 fd72 	bl	8007624 <USB_ReadInterrupts>
 8001b40:	4603      	mov	r3, r0
 8001b42:	f003 0310 	and.w	r3, r3, #16
 8001b46:	2b10      	cmp	r3, #16
 8001b48:	d161      	bne.n	8001c0e <HAL_PCD_IRQHandler+0x146>
    {
      USB_MASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8001b4a:	687b      	ldr	r3, [r7, #4]
 8001b4c:	681b      	ldr	r3, [r3, #0]
 8001b4e:	699a      	ldr	r2, [r3, #24]
 8001b50:	687b      	ldr	r3, [r7, #4]
 8001b52:	681b      	ldr	r3, [r3, #0]
 8001b54:	f022 0210 	bic.w	r2, r2, #16
 8001b58:	619a      	str	r2, [r3, #24]

      RegVal = USBx->GRXSTSP;
 8001b5a:	6a3b      	ldr	r3, [r7, #32]
 8001b5c:	6a1b      	ldr	r3, [r3, #32]
 8001b5e:	61bb      	str	r3, [r7, #24]

      ep = &hpcd->OUT_ep[RegVal & USB_OTG_GRXSTSP_EPNUM];
 8001b60:	69bb      	ldr	r3, [r7, #24]
 8001b62:	f003 020f 	and.w	r2, r3, #15
 8001b66:	4613      	mov	r3, r2
 8001b68:	00db      	lsls	r3, r3, #3
 8001b6a:	4413      	add	r3, r2
 8001b6c:	009b      	lsls	r3, r3, #2
 8001b6e:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8001b72:	687a      	ldr	r2, [r7, #4]
 8001b74:	4413      	add	r3, r2
 8001b76:	3304      	adds	r3, #4
 8001b78:	617b      	str	r3, [r7, #20]

      if (((RegVal & USB_OTG_GRXSTSP_PKTSTS) >> 17) ==  STS_DATA_UPDT)
 8001b7a:	69bb      	ldr	r3, [r7, #24]
 8001b7c:	0c5b      	lsrs	r3, r3, #17
 8001b7e:	f003 030f 	and.w	r3, r3, #15
 8001b82:	2b02      	cmp	r3, #2
 8001b84:	d124      	bne.n	8001bd0 <HAL_PCD_IRQHandler+0x108>
      {
        if ((RegVal & USB_OTG_GRXSTSP_BCNT) != 0U)
 8001b86:	69ba      	ldr	r2, [r7, #24]
 8001b88:	f647 73f0 	movw	r3, #32752	; 0x7ff0
 8001b8c:	4013      	ands	r3, r2
 8001b8e:	2b00      	cmp	r3, #0
 8001b90:	d035      	beq.n	8001bfe <HAL_PCD_IRQHandler+0x136>
        {
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 8001b92:	697b      	ldr	r3, [r7, #20]
 8001b94:	6919      	ldr	r1, [r3, #16]
                               (uint16_t)((RegVal & USB_OTG_GRXSTSP_BCNT) >> 4));
 8001b96:	69bb      	ldr	r3, [r7, #24]
 8001b98:	091b      	lsrs	r3, r3, #4
 8001b9a:	b29b      	uxth	r3, r3
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 8001b9c:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8001ba0:	b29b      	uxth	r3, r3
 8001ba2:	461a      	mov	r2, r3
 8001ba4:	6a38      	ldr	r0, [r7, #32]
 8001ba6:	f005 fba9 	bl	80072fc <USB_ReadPacket>

          ep->xfer_buff += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 8001baa:	697b      	ldr	r3, [r7, #20]
 8001bac:	691a      	ldr	r2, [r3, #16]
 8001bae:	69bb      	ldr	r3, [r7, #24]
 8001bb0:	091b      	lsrs	r3, r3, #4
 8001bb2:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8001bb6:	441a      	add	r2, r3
 8001bb8:	697b      	ldr	r3, [r7, #20]
 8001bba:	611a      	str	r2, [r3, #16]
          ep->xfer_count += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 8001bbc:	697b      	ldr	r3, [r7, #20]
 8001bbe:	6a1a      	ldr	r2, [r3, #32]
 8001bc0:	69bb      	ldr	r3, [r7, #24]
 8001bc2:	091b      	lsrs	r3, r3, #4
 8001bc4:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8001bc8:	441a      	add	r2, r3
 8001bca:	697b      	ldr	r3, [r7, #20]
 8001bcc:	621a      	str	r2, [r3, #32]
 8001bce:	e016      	b.n	8001bfe <HAL_PCD_IRQHandler+0x136>
        }
      }
      else if (((RegVal & USB_OTG_GRXSTSP_PKTSTS) >> 17) == STS_SETUP_UPDT)
 8001bd0:	69bb      	ldr	r3, [r7, #24]
 8001bd2:	0c5b      	lsrs	r3, r3, #17
 8001bd4:	f003 030f 	and.w	r3, r3, #15
 8001bd8:	2b06      	cmp	r3, #6
 8001bda:	d110      	bne.n	8001bfe <HAL_PCD_IRQHandler+0x136>
      {
        (void)USB_ReadPacket(USBx, (uint8_t *)hpcd->Setup, 8U);
 8001bdc:	687b      	ldr	r3, [r7, #4]
 8001bde:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 8001be2:	2208      	movs	r2, #8
 8001be4:	4619      	mov	r1, r3
 8001be6:	6a38      	ldr	r0, [r7, #32]
 8001be8:	f005 fb88 	bl	80072fc <USB_ReadPacket>
        ep->xfer_count += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 8001bec:	697b      	ldr	r3, [r7, #20]
 8001bee:	6a1a      	ldr	r2, [r3, #32]
 8001bf0:	69bb      	ldr	r3, [r7, #24]
 8001bf2:	091b      	lsrs	r3, r3, #4
 8001bf4:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8001bf8:	441a      	add	r2, r3
 8001bfa:	697b      	ldr	r3, [r7, #20]
 8001bfc:	621a      	str	r2, [r3, #32]
      else
      {
        /* ... */
      }

      USB_UNMASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8001bfe:	687b      	ldr	r3, [r7, #4]
 8001c00:	681b      	ldr	r3, [r3, #0]
 8001c02:	699a      	ldr	r2, [r3, #24]
 8001c04:	687b      	ldr	r3, [r7, #4]
 8001c06:	681b      	ldr	r3, [r3, #0]
 8001c08:	f042 0210 	orr.w	r2, r2, #16
 8001c0c:	619a      	str	r2, [r3, #24]
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OEPINT))
 8001c0e:	687b      	ldr	r3, [r7, #4]
 8001c10:	681b      	ldr	r3, [r3, #0]
 8001c12:	4618      	mov	r0, r3
 8001c14:	f005 fd06 	bl	8007624 <USB_ReadInterrupts>
 8001c18:	4603      	mov	r3, r0
 8001c1a:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8001c1e:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 8001c22:	f040 80a7 	bne.w	8001d74 <HAL_PCD_IRQHandler+0x2ac>
    {
      epnum = 0U;
 8001c26:	2300      	movs	r3, #0
 8001c28:	627b      	str	r3, [r7, #36]	; 0x24

      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllOutEpInterrupt(hpcd->Instance);
 8001c2a:	687b      	ldr	r3, [r7, #4]
 8001c2c:	681b      	ldr	r3, [r3, #0]
 8001c2e:	4618      	mov	r0, r3
 8001c30:	f005 fd0b 	bl	800764a <USB_ReadDevAllOutEpInterrupt>
 8001c34:	62b8      	str	r0, [r7, #40]	; 0x28

      while (ep_intr != 0U)
 8001c36:	e099      	b.n	8001d6c <HAL_PCD_IRQHandler+0x2a4>
      {
        if ((ep_intr & 0x1U) != 0U)
 8001c38:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001c3a:	f003 0301 	and.w	r3, r3, #1
 8001c3e:	2b00      	cmp	r3, #0
 8001c40:	f000 808e 	beq.w	8001d60 <HAL_PCD_IRQHandler+0x298>
        {
          epint = USB_ReadDevOutEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 8001c44:	687b      	ldr	r3, [r7, #4]
 8001c46:	681b      	ldr	r3, [r3, #0]
 8001c48:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001c4a:	b2d2      	uxtb	r2, r2
 8001c4c:	4611      	mov	r1, r2
 8001c4e:	4618      	mov	r0, r3
 8001c50:	f005 fd2f 	bl	80076b2 <USB_ReadDevOutEPInterrupt>
 8001c54:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DOEPINT_XFRC) == USB_OTG_DOEPINT_XFRC)
 8001c56:	693b      	ldr	r3, [r7, #16]
 8001c58:	f003 0301 	and.w	r3, r3, #1
 8001c5c:	2b00      	cmp	r3, #0
 8001c5e:	d00c      	beq.n	8001c7a <HAL_PCD_IRQHandler+0x1b2>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_XFRC);
 8001c60:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001c62:	015a      	lsls	r2, r3, #5
 8001c64:	69fb      	ldr	r3, [r7, #28]
 8001c66:	4413      	add	r3, r2
 8001c68:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8001c6c:	461a      	mov	r2, r3
 8001c6e:	2301      	movs	r3, #1
 8001c70:	6093      	str	r3, [r2, #8]
            (void)PCD_EP_OutXfrComplete_int(hpcd, epnum);
 8001c72:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8001c74:	6878      	ldr	r0, [r7, #4]
 8001c76:	f000 feef 	bl	8002a58 <PCD_EP_OutXfrComplete_int>
          }

          if ((epint & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP)
 8001c7a:	693b      	ldr	r3, [r7, #16]
 8001c7c:	f003 0308 	and.w	r3, r3, #8
 8001c80:	2b00      	cmp	r3, #0
 8001c82:	d00c      	beq.n	8001c9e <HAL_PCD_IRQHandler+0x1d6>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STUP);
 8001c84:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001c86:	015a      	lsls	r2, r3, #5
 8001c88:	69fb      	ldr	r3, [r7, #28]
 8001c8a:	4413      	add	r3, r2
 8001c8c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8001c90:	461a      	mov	r2, r3
 8001c92:	2308      	movs	r3, #8
 8001c94:	6093      	str	r3, [r2, #8]
            /* Class B setup phase done for previous decoded setup */
            (void)PCD_EP_OutSetupPacket_int(hpcd, epnum);
 8001c96:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8001c98:	6878      	ldr	r0, [r7, #4]
 8001c9a:	f000 ffc5 	bl	8002c28 <PCD_EP_OutSetupPacket_int>
          }

          if ((epint & USB_OTG_DOEPINT_OTEPDIS) == USB_OTG_DOEPINT_OTEPDIS)
 8001c9e:	693b      	ldr	r3, [r7, #16]
 8001ca0:	f003 0310 	and.w	r3, r3, #16
 8001ca4:	2b00      	cmp	r3, #0
 8001ca6:	d008      	beq.n	8001cba <HAL_PCD_IRQHandler+0x1f2>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPDIS);
 8001ca8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001caa:	015a      	lsls	r2, r3, #5
 8001cac:	69fb      	ldr	r3, [r7, #28]
 8001cae:	4413      	add	r3, r2
 8001cb0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8001cb4:	461a      	mov	r2, r3
 8001cb6:	2310      	movs	r3, #16
 8001cb8:	6093      	str	r3, [r2, #8]
          }

          /* Clear OUT Endpoint disable interrupt */
          if ((epint & USB_OTG_DOEPINT_EPDISD) == USB_OTG_DOEPINT_EPDISD)
 8001cba:	693b      	ldr	r3, [r7, #16]
 8001cbc:	f003 0302 	and.w	r3, r3, #2
 8001cc0:	2b00      	cmp	r3, #0
 8001cc2:	d030      	beq.n	8001d26 <HAL_PCD_IRQHandler+0x25e>
          {
            if ((USBx->GINTSTS & USB_OTG_GINTSTS_BOUTNAKEFF) == USB_OTG_GINTSTS_BOUTNAKEFF)
 8001cc4:	6a3b      	ldr	r3, [r7, #32]
 8001cc6:	695b      	ldr	r3, [r3, #20]
 8001cc8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001ccc:	2b80      	cmp	r3, #128	; 0x80
 8001cce:	d109      	bne.n	8001ce4 <HAL_PCD_IRQHandler+0x21c>
            {
              USBx_DEVICE->DCTL |= USB_OTG_DCTL_CGONAK;
 8001cd0:	69fb      	ldr	r3, [r7, #28]
 8001cd2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8001cd6:	685b      	ldr	r3, [r3, #4]
 8001cd8:	69fa      	ldr	r2, [r7, #28]
 8001cda:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8001cde:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8001ce2:	6053      	str	r3, [r2, #4]
            }

            ep = &hpcd->OUT_ep[epnum];
 8001ce4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001ce6:	4613      	mov	r3, r2
 8001ce8:	00db      	lsls	r3, r3, #3
 8001cea:	4413      	add	r3, r2
 8001cec:	009b      	lsls	r3, r3, #2
 8001cee:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8001cf2:	687a      	ldr	r2, [r7, #4]
 8001cf4:	4413      	add	r3, r2
 8001cf6:	3304      	adds	r3, #4
 8001cf8:	617b      	str	r3, [r7, #20]

            if (ep->is_iso_incomplete == 1U)
 8001cfa:	697b      	ldr	r3, [r7, #20]
 8001cfc:	78db      	ldrb	r3, [r3, #3]
 8001cfe:	2b01      	cmp	r3, #1
 8001d00:	d108      	bne.n	8001d14 <HAL_PCD_IRQHandler+0x24c>
            {
              ep->is_iso_incomplete = 0U;
 8001d02:	697b      	ldr	r3, [r7, #20]
 8001d04:	2200      	movs	r2, #0
 8001d06:	70da      	strb	r2, [r3, #3]

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
              hpcd->ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
#else
              HAL_PCD_ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
 8001d08:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001d0a:	b2db      	uxtb	r3, r3
 8001d0c:	4619      	mov	r1, r3
 8001d0e:	6878      	ldr	r0, [r7, #4]
 8001d10:	f008 f930 	bl	8009f74 <HAL_PCD_ISOOUTIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
            }

            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_EPDISD);
 8001d14:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001d16:	015a      	lsls	r2, r3, #5
 8001d18:	69fb      	ldr	r3, [r7, #28]
 8001d1a:	4413      	add	r3, r2
 8001d1c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8001d20:	461a      	mov	r2, r3
 8001d22:	2302      	movs	r3, #2
 8001d24:	6093      	str	r3, [r2, #8]
          }

          /* Clear Status Phase Received interrupt */
          if ((epint & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 8001d26:	693b      	ldr	r3, [r7, #16]
 8001d28:	f003 0320 	and.w	r3, r3, #32
 8001d2c:	2b00      	cmp	r3, #0
 8001d2e:	d008      	beq.n	8001d42 <HAL_PCD_IRQHandler+0x27a>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 8001d30:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001d32:	015a      	lsls	r2, r3, #5
 8001d34:	69fb      	ldr	r3, [r7, #28]
 8001d36:	4413      	add	r3, r2
 8001d38:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8001d3c:	461a      	mov	r2, r3
 8001d3e:	2320      	movs	r3, #32
 8001d40:	6093      	str	r3, [r2, #8]
          }

          /* Clear OUT NAK interrupt */
          if ((epint & USB_OTG_DOEPINT_NAK) == USB_OTG_DOEPINT_NAK)
 8001d42:	693b      	ldr	r3, [r7, #16]
 8001d44:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8001d48:	2b00      	cmp	r3, #0
 8001d4a:	d009      	beq.n	8001d60 <HAL_PCD_IRQHandler+0x298>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_NAK);
 8001d4c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001d4e:	015a      	lsls	r2, r3, #5
 8001d50:	69fb      	ldr	r3, [r7, #28]
 8001d52:	4413      	add	r3, r2
 8001d54:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8001d58:	461a      	mov	r2, r3
 8001d5a:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8001d5e:	6093      	str	r3, [r2, #8]
          }
        }
        epnum++;
 8001d60:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001d62:	3301      	adds	r3, #1
 8001d64:	627b      	str	r3, [r7, #36]	; 0x24
        ep_intr >>= 1U;
 8001d66:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001d68:	085b      	lsrs	r3, r3, #1
 8001d6a:	62bb      	str	r3, [r7, #40]	; 0x28
      while (ep_intr != 0U)
 8001d6c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001d6e:	2b00      	cmp	r3, #0
 8001d70:	f47f af62 	bne.w	8001c38 <HAL_PCD_IRQHandler+0x170>
      }
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IEPINT))
 8001d74:	687b      	ldr	r3, [r7, #4]
 8001d76:	681b      	ldr	r3, [r3, #0]
 8001d78:	4618      	mov	r0, r3
 8001d7a:	f005 fc53 	bl	8007624 <USB_ReadInterrupts>
 8001d7e:	4603      	mov	r3, r0
 8001d80:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8001d84:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8001d88:	f040 80db 	bne.w	8001f42 <HAL_PCD_IRQHandler+0x47a>
    {
      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllInEpInterrupt(hpcd->Instance);
 8001d8c:	687b      	ldr	r3, [r7, #4]
 8001d8e:	681b      	ldr	r3, [r3, #0]
 8001d90:	4618      	mov	r0, r3
 8001d92:	f005 fc74 	bl	800767e <USB_ReadDevAllInEpInterrupt>
 8001d96:	62b8      	str	r0, [r7, #40]	; 0x28

      epnum = 0U;
 8001d98:	2300      	movs	r3, #0
 8001d9a:	627b      	str	r3, [r7, #36]	; 0x24

      while (ep_intr != 0U)
 8001d9c:	e0cd      	b.n	8001f3a <HAL_PCD_IRQHandler+0x472>
      {
        if ((ep_intr & 0x1U) != 0U) /* In ITR */
 8001d9e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001da0:	f003 0301 	and.w	r3, r3, #1
 8001da4:	2b00      	cmp	r3, #0
 8001da6:	f000 80c2 	beq.w	8001f2e <HAL_PCD_IRQHandler+0x466>
        {
          epint = USB_ReadDevInEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 8001daa:	687b      	ldr	r3, [r7, #4]
 8001dac:	681b      	ldr	r3, [r3, #0]
 8001dae:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001db0:	b2d2      	uxtb	r2, r2
 8001db2:	4611      	mov	r1, r2
 8001db4:	4618      	mov	r0, r3
 8001db6:	f005 fc9a 	bl	80076ee <USB_ReadDevInEPInterrupt>
 8001dba:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DIEPINT_XFRC) == USB_OTG_DIEPINT_XFRC)
 8001dbc:	693b      	ldr	r3, [r7, #16]
 8001dbe:	f003 0301 	and.w	r3, r3, #1
 8001dc2:	2b00      	cmp	r3, #0
 8001dc4:	d057      	beq.n	8001e76 <HAL_PCD_IRQHandler+0x3ae>
          {
            fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 8001dc6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001dc8:	f003 030f 	and.w	r3, r3, #15
 8001dcc:	2201      	movs	r2, #1
 8001dce:	fa02 f303 	lsl.w	r3, r2, r3
 8001dd2:	60fb      	str	r3, [r7, #12]
            USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 8001dd4:	69fb      	ldr	r3, [r7, #28]
 8001dd6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8001dda:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8001ddc:	68fb      	ldr	r3, [r7, #12]
 8001dde:	43db      	mvns	r3, r3
 8001de0:	69f9      	ldr	r1, [r7, #28]
 8001de2:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8001de6:	4013      	ands	r3, r2
 8001de8:	634b      	str	r3, [r1, #52]	; 0x34

            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_XFRC);
 8001dea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001dec:	015a      	lsls	r2, r3, #5
 8001dee:	69fb      	ldr	r3, [r7, #28]
 8001df0:	4413      	add	r3, r2
 8001df2:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8001df6:	461a      	mov	r2, r3
 8001df8:	2301      	movs	r3, #1
 8001dfa:	6093      	str	r3, [r2, #8]

            if (hpcd->Init.dma_enable == 1U)
 8001dfc:	687b      	ldr	r3, [r7, #4]
 8001dfe:	691b      	ldr	r3, [r3, #16]
 8001e00:	2b01      	cmp	r3, #1
 8001e02:	d132      	bne.n	8001e6a <HAL_PCD_IRQHandler+0x3a2>
            {
              hpcd->IN_ep[epnum].xfer_buff += hpcd->IN_ep[epnum].maxpacket;
 8001e04:	6879      	ldr	r1, [r7, #4]
 8001e06:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001e08:	4613      	mov	r3, r2
 8001e0a:	00db      	lsls	r3, r3, #3
 8001e0c:	4413      	add	r3, r2
 8001e0e:	009b      	lsls	r3, r3, #2
 8001e10:	440b      	add	r3, r1
 8001e12:	334c      	adds	r3, #76	; 0x4c
 8001e14:	6819      	ldr	r1, [r3, #0]
 8001e16:	6878      	ldr	r0, [r7, #4]
 8001e18:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001e1a:	4613      	mov	r3, r2
 8001e1c:	00db      	lsls	r3, r3, #3
 8001e1e:	4413      	add	r3, r2
 8001e20:	009b      	lsls	r3, r3, #2
 8001e22:	4403      	add	r3, r0
 8001e24:	3348      	adds	r3, #72	; 0x48
 8001e26:	681b      	ldr	r3, [r3, #0]
 8001e28:	4419      	add	r1, r3
 8001e2a:	6878      	ldr	r0, [r7, #4]
 8001e2c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001e2e:	4613      	mov	r3, r2
 8001e30:	00db      	lsls	r3, r3, #3
 8001e32:	4413      	add	r3, r2
 8001e34:	009b      	lsls	r3, r3, #2
 8001e36:	4403      	add	r3, r0
 8001e38:	334c      	adds	r3, #76	; 0x4c
 8001e3a:	6019      	str	r1, [r3, #0]

              /* this is ZLP, so prepare EP0 for next setup */
              if ((epnum == 0U) && (hpcd->IN_ep[epnum].xfer_len == 0U))
 8001e3c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001e3e:	2b00      	cmp	r3, #0
 8001e40:	d113      	bne.n	8001e6a <HAL_PCD_IRQHandler+0x3a2>
 8001e42:	6879      	ldr	r1, [r7, #4]
 8001e44:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001e46:	4613      	mov	r3, r2
 8001e48:	00db      	lsls	r3, r3, #3
 8001e4a:	4413      	add	r3, r2
 8001e4c:	009b      	lsls	r3, r3, #2
 8001e4e:	440b      	add	r3, r1
 8001e50:	3354      	adds	r3, #84	; 0x54
 8001e52:	681b      	ldr	r3, [r3, #0]
 8001e54:	2b00      	cmp	r3, #0
 8001e56:	d108      	bne.n	8001e6a <HAL_PCD_IRQHandler+0x3a2>
              {
                /* prepare to rx more setup packets */
                (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 8001e58:	687b      	ldr	r3, [r7, #4]
 8001e5a:	6818      	ldr	r0, [r3, #0]
 8001e5c:	687b      	ldr	r3, [r7, #4]
 8001e5e:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 8001e62:	461a      	mov	r2, r3
 8001e64:	2101      	movs	r1, #1
 8001e66:	f005 fca3 	bl	80077b0 <USB_EP0_OutStart>
            }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
            hpcd->DataInStageCallback(hpcd, (uint8_t)epnum);
#else
            HAL_PCD_DataInStageCallback(hpcd, (uint8_t)epnum);
 8001e6a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001e6c:	b2db      	uxtb	r3, r3
 8001e6e:	4619      	mov	r1, r3
 8001e70:	6878      	ldr	r0, [r7, #4]
 8001e72:	f007 fffa 	bl	8009e6a <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
          }
          if ((epint & USB_OTG_DIEPINT_TOC) == USB_OTG_DIEPINT_TOC)
 8001e76:	693b      	ldr	r3, [r7, #16]
 8001e78:	f003 0308 	and.w	r3, r3, #8
 8001e7c:	2b00      	cmp	r3, #0
 8001e7e:	d008      	beq.n	8001e92 <HAL_PCD_IRQHandler+0x3ca>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_TOC);
 8001e80:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001e82:	015a      	lsls	r2, r3, #5
 8001e84:	69fb      	ldr	r3, [r7, #28]
 8001e86:	4413      	add	r3, r2
 8001e88:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8001e8c:	461a      	mov	r2, r3
 8001e8e:	2308      	movs	r3, #8
 8001e90:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_ITTXFE) == USB_OTG_DIEPINT_ITTXFE)
 8001e92:	693b      	ldr	r3, [r7, #16]
 8001e94:	f003 0310 	and.w	r3, r3, #16
 8001e98:	2b00      	cmp	r3, #0
 8001e9a:	d008      	beq.n	8001eae <HAL_PCD_IRQHandler+0x3e6>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_ITTXFE);
 8001e9c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001e9e:	015a      	lsls	r2, r3, #5
 8001ea0:	69fb      	ldr	r3, [r7, #28]
 8001ea2:	4413      	add	r3, r2
 8001ea4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8001ea8:	461a      	mov	r2, r3
 8001eaa:	2310      	movs	r3, #16
 8001eac:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_INEPNE) == USB_OTG_DIEPINT_INEPNE)
 8001eae:	693b      	ldr	r3, [r7, #16]
 8001eb0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001eb4:	2b00      	cmp	r3, #0
 8001eb6:	d008      	beq.n	8001eca <HAL_PCD_IRQHandler+0x402>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_INEPNE);
 8001eb8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001eba:	015a      	lsls	r2, r3, #5
 8001ebc:	69fb      	ldr	r3, [r7, #28]
 8001ebe:	4413      	add	r3, r2
 8001ec0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8001ec4:	461a      	mov	r2, r3
 8001ec6:	2340      	movs	r3, #64	; 0x40
 8001ec8:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_EPDISD) == USB_OTG_DIEPINT_EPDISD)
 8001eca:	693b      	ldr	r3, [r7, #16]
 8001ecc:	f003 0302 	and.w	r3, r3, #2
 8001ed0:	2b00      	cmp	r3, #0
 8001ed2:	d023      	beq.n	8001f1c <HAL_PCD_IRQHandler+0x454>
          {
            (void)USB_FlushTxFifo(USBx, epnum);
 8001ed4:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8001ed6:	6a38      	ldr	r0, [r7, #32]
 8001ed8:	f004 fb76 	bl	80065c8 <USB_FlushTxFifo>

            ep = &hpcd->IN_ep[epnum];
 8001edc:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001ede:	4613      	mov	r3, r2
 8001ee0:	00db      	lsls	r3, r3, #3
 8001ee2:	4413      	add	r3, r2
 8001ee4:	009b      	lsls	r3, r3, #2
 8001ee6:	3338      	adds	r3, #56	; 0x38
 8001ee8:	687a      	ldr	r2, [r7, #4]
 8001eea:	4413      	add	r3, r2
 8001eec:	3304      	adds	r3, #4
 8001eee:	617b      	str	r3, [r7, #20]

            if (ep->is_iso_incomplete == 1U)
 8001ef0:	697b      	ldr	r3, [r7, #20]
 8001ef2:	78db      	ldrb	r3, [r3, #3]
 8001ef4:	2b01      	cmp	r3, #1
 8001ef6:	d108      	bne.n	8001f0a <HAL_PCD_IRQHandler+0x442>
            {
              ep->is_iso_incomplete = 0U;
 8001ef8:	697b      	ldr	r3, [r7, #20]
 8001efa:	2200      	movs	r2, #0
 8001efc:	70da      	strb	r2, [r3, #3]

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
              hpcd->ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
#else
              HAL_PCD_ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
 8001efe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001f00:	b2db      	uxtb	r3, r3
 8001f02:	4619      	mov	r1, r3
 8001f04:	6878      	ldr	r0, [r7, #4]
 8001f06:	f008 f847 	bl	8009f98 <HAL_PCD_ISOINIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
            }

            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_EPDISD);
 8001f0a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001f0c:	015a      	lsls	r2, r3, #5
 8001f0e:	69fb      	ldr	r3, [r7, #28]
 8001f10:	4413      	add	r3, r2
 8001f12:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8001f16:	461a      	mov	r2, r3
 8001f18:	2302      	movs	r3, #2
 8001f1a:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_TXFE) == USB_OTG_DIEPINT_TXFE)
 8001f1c:	693b      	ldr	r3, [r7, #16]
 8001f1e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001f22:	2b00      	cmp	r3, #0
 8001f24:	d003      	beq.n	8001f2e <HAL_PCD_IRQHandler+0x466>
          {
            (void)PCD_WriteEmptyTxFifo(hpcd, epnum);
 8001f26:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8001f28:	6878      	ldr	r0, [r7, #4]
 8001f2a:	f000 fd08 	bl	800293e <PCD_WriteEmptyTxFifo>
          }
        }
        epnum++;
 8001f2e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001f30:	3301      	adds	r3, #1
 8001f32:	627b      	str	r3, [r7, #36]	; 0x24
        ep_intr >>= 1U;
 8001f34:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001f36:	085b      	lsrs	r3, r3, #1
 8001f38:	62bb      	str	r3, [r7, #40]	; 0x28
      while (ep_intr != 0U)
 8001f3a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001f3c:	2b00      	cmp	r3, #0
 8001f3e:	f47f af2e 	bne.w	8001d9e <HAL_PCD_IRQHandler+0x2d6>
      }
    }

    /* Handle Resume Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT))
 8001f42:	687b      	ldr	r3, [r7, #4]
 8001f44:	681b      	ldr	r3, [r3, #0]
 8001f46:	4618      	mov	r0, r3
 8001f48:	f005 fb6c 	bl	8007624 <USB_ReadInterrupts>
 8001f4c:	4603      	mov	r3, r0
 8001f4e:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8001f52:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8001f56:	d122      	bne.n	8001f9e <HAL_PCD_IRQHandler+0x4d6>
    {
      /* Clear the Remote Wake-up Signaling */
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 8001f58:	69fb      	ldr	r3, [r7, #28]
 8001f5a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8001f5e:	685b      	ldr	r3, [r3, #4]
 8001f60:	69fa      	ldr	r2, [r7, #28]
 8001f62:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8001f66:	f023 0301 	bic.w	r3, r3, #1
 8001f6a:	6053      	str	r3, [r2, #4]

      if (hpcd->LPM_State == LPM_L1)
 8001f6c:	687b      	ldr	r3, [r7, #4]
 8001f6e:	f893 34f4 	ldrb.w	r3, [r3, #1268]	; 0x4f4
 8001f72:	2b01      	cmp	r3, #1
 8001f74:	d108      	bne.n	8001f88 <HAL_PCD_IRQHandler+0x4c0>
      {
        hpcd->LPM_State = LPM_L0;
 8001f76:	687b      	ldr	r3, [r7, #4]
 8001f78:	2200      	movs	r2, #0
 8001f7a:	f883 24f4 	strb.w	r2, [r3, #1268]	; 0x4f4

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->LPMCallback(hpcd, PCD_LPM_L0_ACTIVE);
#else
        HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L0_ACTIVE);
 8001f7e:	2100      	movs	r1, #0
 8001f80:	6878      	ldr	r0, [r7, #4]
 8001f82:	f000 ff13 	bl	8002dac <HAL_PCDEx_LPM_Callback>
 8001f86:	e002      	b.n	8001f8e <HAL_PCD_IRQHandler+0x4c6>
      else
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->ResumeCallback(hpcd);
#else
        HAL_PCD_ResumeCallback(hpcd);
 8001f88:	6878      	ldr	r0, [r7, #4]
 8001f8a:	f007 ffe5 	bl	8009f58 <HAL_PCD_ResumeCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT);
 8001f8e:	687b      	ldr	r3, [r7, #4]
 8001f90:	681b      	ldr	r3, [r3, #0]
 8001f92:	695a      	ldr	r2, [r3, #20]
 8001f94:	687b      	ldr	r3, [r7, #4]
 8001f96:	681b      	ldr	r3, [r3, #0]
 8001f98:	f002 4200 	and.w	r2, r2, #2147483648	; 0x80000000
 8001f9c:	615a      	str	r2, [r3, #20]
    }

    /* Handle Suspend Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP))
 8001f9e:	687b      	ldr	r3, [r7, #4]
 8001fa0:	681b      	ldr	r3, [r3, #0]
 8001fa2:	4618      	mov	r0, r3
 8001fa4:	f005 fb3e 	bl	8007624 <USB_ReadInterrupts>
 8001fa8:	4603      	mov	r3, r0
 8001faa:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8001fae:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8001fb2:	d112      	bne.n	8001fda <HAL_PCD_IRQHandler+0x512>
    {
      if ((USBx_DEVICE->DSTS & USB_OTG_DSTS_SUSPSTS) == USB_OTG_DSTS_SUSPSTS)
 8001fb4:	69fb      	ldr	r3, [r7, #28]
 8001fb6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8001fba:	689b      	ldr	r3, [r3, #8]
 8001fbc:	f003 0301 	and.w	r3, r3, #1
 8001fc0:	2b01      	cmp	r3, #1
 8001fc2:	d102      	bne.n	8001fca <HAL_PCD_IRQHandler+0x502>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->SuspendCallback(hpcd);
#else
        HAL_PCD_SuspendCallback(hpcd);
 8001fc4:	6878      	ldr	r0, [r7, #4]
 8001fc6:	f007 ffa1 	bl	8009f0c <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP);
 8001fca:	687b      	ldr	r3, [r7, #4]
 8001fcc:	681b      	ldr	r3, [r3, #0]
 8001fce:	695a      	ldr	r2, [r3, #20]
 8001fd0:	687b      	ldr	r3, [r7, #4]
 8001fd2:	681b      	ldr	r3, [r3, #0]
 8001fd4:	f402 6200 	and.w	r2, r2, #2048	; 0x800
 8001fd8:	615a      	str	r2, [r3, #20]
    }

    /* Handle LPM Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_LPMINT))
 8001fda:	687b      	ldr	r3, [r7, #4]
 8001fdc:	681b      	ldr	r3, [r3, #0]
 8001fde:	4618      	mov	r0, r3
 8001fe0:	f005 fb20 	bl	8007624 <USB_ReadInterrupts>
 8001fe4:	4603      	mov	r3, r0
 8001fe6:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8001fea:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8001fee:	d121      	bne.n	8002034 <HAL_PCD_IRQHandler+0x56c>
    {
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_LPMINT);
 8001ff0:	687b      	ldr	r3, [r7, #4]
 8001ff2:	681b      	ldr	r3, [r3, #0]
 8001ff4:	695a      	ldr	r2, [r3, #20]
 8001ff6:	687b      	ldr	r3, [r7, #4]
 8001ff8:	681b      	ldr	r3, [r3, #0]
 8001ffa:	f002 6200 	and.w	r2, r2, #134217728	; 0x8000000
 8001ffe:	615a      	str	r2, [r3, #20]

      if (hpcd->LPM_State == LPM_L0)
 8002000:	687b      	ldr	r3, [r7, #4]
 8002002:	f893 34f4 	ldrb.w	r3, [r3, #1268]	; 0x4f4
 8002006:	2b00      	cmp	r3, #0
 8002008:	d111      	bne.n	800202e <HAL_PCD_IRQHandler+0x566>
      {
        hpcd->LPM_State = LPM_L1;
 800200a:	687b      	ldr	r3, [r7, #4]
 800200c:	2201      	movs	r2, #1
 800200e:	f883 24f4 	strb.w	r2, [r3, #1268]	; 0x4f4
        hpcd->BESL = (hpcd->Instance->GLPMCFG & USB_OTG_GLPMCFG_BESL) >> 2U;
 8002012:	687b      	ldr	r3, [r7, #4]
 8002014:	681b      	ldr	r3, [r3, #0]
 8002016:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002018:	089b      	lsrs	r3, r3, #2
 800201a:	f003 020f 	and.w	r2, r3, #15
 800201e:	687b      	ldr	r3, [r7, #4]
 8002020:	f8c3 24f8 	str.w	r2, [r3, #1272]	; 0x4f8

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->LPMCallback(hpcd, PCD_LPM_L1_ACTIVE);
#else
        HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L1_ACTIVE);
 8002024:	2101      	movs	r1, #1
 8002026:	6878      	ldr	r0, [r7, #4]
 8002028:	f000 fec0 	bl	8002dac <HAL_PCDEx_LPM_Callback>
 800202c:	e002      	b.n	8002034 <HAL_PCD_IRQHandler+0x56c>
      else
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->SuspendCallback(hpcd);
#else
        HAL_PCD_SuspendCallback(hpcd);
 800202e:	6878      	ldr	r0, [r7, #4]
 8002030:	f007 ff6c 	bl	8009f0c <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
    }

    /* Handle Reset Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBRST))
 8002034:	687b      	ldr	r3, [r7, #4]
 8002036:	681b      	ldr	r3, [r3, #0]
 8002038:	4618      	mov	r0, r3
 800203a:	f005 faf3 	bl	8007624 <USB_ReadInterrupts>
 800203e:	4603      	mov	r3, r0
 8002040:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8002044:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002048:	f040 80b7 	bne.w	80021ba <HAL_PCD_IRQHandler+0x6f2>
    {
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 800204c:	69fb      	ldr	r3, [r7, #28]
 800204e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8002052:	685b      	ldr	r3, [r3, #4]
 8002054:	69fa      	ldr	r2, [r7, #28]
 8002056:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800205a:	f023 0301 	bic.w	r3, r3, #1
 800205e:	6053      	str	r3, [r2, #4]
      (void)USB_FlushTxFifo(hpcd->Instance, 0x10U);
 8002060:	687b      	ldr	r3, [r7, #4]
 8002062:	681b      	ldr	r3, [r3, #0]
 8002064:	2110      	movs	r1, #16
 8002066:	4618      	mov	r0, r3
 8002068:	f004 faae 	bl	80065c8 <USB_FlushTxFifo>

      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800206c:	2300      	movs	r3, #0
 800206e:	62fb      	str	r3, [r7, #44]	; 0x2c
 8002070:	e046      	b.n	8002100 <HAL_PCD_IRQHandler+0x638>
      {
        USBx_INEP(i)->DIEPINT = 0xFB7FU;
 8002072:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002074:	015a      	lsls	r2, r3, #5
 8002076:	69fb      	ldr	r3, [r7, #28]
 8002078:	4413      	add	r3, r2
 800207a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800207e:	461a      	mov	r2, r3
 8002080:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8002084:	6093      	str	r3, [r2, #8]
        USBx_INEP(i)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 8002086:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002088:	015a      	lsls	r2, r3, #5
 800208a:	69fb      	ldr	r3, [r7, #28]
 800208c:	4413      	add	r3, r2
 800208e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8002092:	681b      	ldr	r3, [r3, #0]
 8002094:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8002096:	0151      	lsls	r1, r2, #5
 8002098:	69fa      	ldr	r2, [r7, #28]
 800209a:	440a      	add	r2, r1
 800209c:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80020a0:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 80020a4:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPINT = 0xFB7FU;
 80020a6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80020a8:	015a      	lsls	r2, r3, #5
 80020aa:	69fb      	ldr	r3, [r7, #28]
 80020ac:	4413      	add	r3, r2
 80020ae:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80020b2:	461a      	mov	r2, r3
 80020b4:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 80020b8:	6093      	str	r3, [r2, #8]
        USBx_OUTEP(i)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 80020ba:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80020bc:	015a      	lsls	r2, r3, #5
 80020be:	69fb      	ldr	r3, [r7, #28]
 80020c0:	4413      	add	r3, r2
 80020c2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80020c6:	681b      	ldr	r3, [r3, #0]
 80020c8:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80020ca:	0151      	lsls	r1, r2, #5
 80020cc:	69fa      	ldr	r2, [r7, #28]
 80020ce:	440a      	add	r2, r1
 80020d0:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80020d4:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 80020d8:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 80020da:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80020dc:	015a      	lsls	r2, r3, #5
 80020de:	69fb      	ldr	r3, [r7, #28]
 80020e0:	4413      	add	r3, r2
 80020e2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80020e6:	681b      	ldr	r3, [r3, #0]
 80020e8:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80020ea:	0151      	lsls	r1, r2, #5
 80020ec:	69fa      	ldr	r2, [r7, #28]
 80020ee:	440a      	add	r2, r1
 80020f0:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80020f4:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 80020f8:	6013      	str	r3, [r2, #0]
      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80020fa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80020fc:	3301      	adds	r3, #1
 80020fe:	62fb      	str	r3, [r7, #44]	; 0x2c
 8002100:	687b      	ldr	r3, [r7, #4]
 8002102:	685b      	ldr	r3, [r3, #4]
 8002104:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8002106:	429a      	cmp	r2, r3
 8002108:	d3b3      	bcc.n	8002072 <HAL_PCD_IRQHandler+0x5aa>
      }
      USBx_DEVICE->DAINTMSK |= 0x10001U;
 800210a:	69fb      	ldr	r3, [r7, #28]
 800210c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8002110:	69db      	ldr	r3, [r3, #28]
 8002112:	69fa      	ldr	r2, [r7, #28]
 8002114:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8002118:	f043 1301 	orr.w	r3, r3, #65537	; 0x10001
 800211c:	61d3      	str	r3, [r2, #28]

      if (hpcd->Init.use_dedicated_ep1 != 0U)
 800211e:	687b      	ldr	r3, [r7, #4]
 8002120:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002122:	2b00      	cmp	r3, #0
 8002124:	d016      	beq.n	8002154 <HAL_PCD_IRQHandler+0x68c>
      {
        USBx_DEVICE->DOUTEP1MSK |= USB_OTG_DOEPMSK_STUPM |
 8002126:	69fb      	ldr	r3, [r7, #28]
 8002128:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800212c:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8002130:	69fa      	ldr	r2, [r7, #28]
 8002132:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8002136:	f043 030b 	orr.w	r3, r3, #11
 800213a:	f8c2 3084 	str.w	r3, [r2, #132]	; 0x84
                                   USB_OTG_DOEPMSK_XFRCM |
                                   USB_OTG_DOEPMSK_EPDM;

        USBx_DEVICE->DINEP1MSK |= USB_OTG_DIEPMSK_TOM |
 800213e:	69fb      	ldr	r3, [r7, #28]
 8002140:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8002144:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002146:	69fa      	ldr	r2, [r7, #28]
 8002148:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800214c:	f043 030b 	orr.w	r3, r3, #11
 8002150:	6453      	str	r3, [r2, #68]	; 0x44
 8002152:	e015      	b.n	8002180 <HAL_PCD_IRQHandler+0x6b8>
                                  USB_OTG_DIEPMSK_XFRCM |
                                  USB_OTG_DIEPMSK_EPDM;
      }
      else
      {
        USBx_DEVICE->DOEPMSK |= USB_OTG_DOEPMSK_STUPM |
 8002154:	69fb      	ldr	r3, [r7, #28]
 8002156:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800215a:	695a      	ldr	r2, [r3, #20]
 800215c:	69fb      	ldr	r3, [r7, #28]
 800215e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8002162:	4619      	mov	r1, r3
 8002164:	f242 032b 	movw	r3, #8235	; 0x202b
 8002168:	4313      	orrs	r3, r2
 800216a:	614b      	str	r3, [r1, #20]
                                USB_OTG_DOEPMSK_XFRCM |
                                USB_OTG_DOEPMSK_EPDM |
                                USB_OTG_DOEPMSK_OTEPSPRM |
                                USB_OTG_DOEPMSK_NAKM;

        USBx_DEVICE->DIEPMSK |= USB_OTG_DIEPMSK_TOM |
 800216c:	69fb      	ldr	r3, [r7, #28]
 800216e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8002172:	691b      	ldr	r3, [r3, #16]
 8002174:	69fa      	ldr	r2, [r7, #28]
 8002176:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800217a:	f043 030b 	orr.w	r3, r3, #11
 800217e:	6113      	str	r3, [r2, #16]
                                USB_OTG_DIEPMSK_XFRCM |
                                USB_OTG_DIEPMSK_EPDM;
      }

      /* Set Default Address to 0 */
      USBx_DEVICE->DCFG &= ~USB_OTG_DCFG_DAD;
 8002180:	69fb      	ldr	r3, [r7, #28]
 8002182:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8002186:	681b      	ldr	r3, [r3, #0]
 8002188:	69fa      	ldr	r2, [r7, #28]
 800218a:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800218e:	f423 63fe 	bic.w	r3, r3, #2032	; 0x7f0
 8002192:	6013      	str	r3, [r2, #0]

      /* setup EP0 to receive SETUP packets */
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 8002194:	687b      	ldr	r3, [r7, #4]
 8002196:	6818      	ldr	r0, [r3, #0]
 8002198:	687b      	ldr	r3, [r7, #4]
 800219a:	691b      	ldr	r3, [r3, #16]
 800219c:	b2d9      	uxtb	r1, r3
                             (uint8_t *)hpcd->Setup);
 800219e:	687b      	ldr	r3, [r7, #4]
 80021a0:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 80021a4:	461a      	mov	r2, r3
 80021a6:	f005 fb03 	bl	80077b0 <USB_EP0_OutStart>

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBRST);
 80021aa:	687b      	ldr	r3, [r7, #4]
 80021ac:	681b      	ldr	r3, [r3, #0]
 80021ae:	695a      	ldr	r2, [r3, #20]
 80021b0:	687b      	ldr	r3, [r7, #4]
 80021b2:	681b      	ldr	r3, [r3, #0]
 80021b4:	f402 5280 	and.w	r2, r2, #4096	; 0x1000
 80021b8:	615a      	str	r2, [r3, #20]
    }

    /* Handle Enumeration done Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE))
 80021ba:	687b      	ldr	r3, [r7, #4]
 80021bc:	681b      	ldr	r3, [r3, #0]
 80021be:	4618      	mov	r0, r3
 80021c0:	f005 fa30 	bl	8007624 <USB_ReadInterrupts>
 80021c4:	4603      	mov	r3, r0
 80021c6:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80021ca:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80021ce:	d124      	bne.n	800221a <HAL_PCD_IRQHandler+0x752>
    {
      (void)USB_ActivateSetup(hpcd->Instance);
 80021d0:	687b      	ldr	r3, [r7, #4]
 80021d2:	681b      	ldr	r3, [r3, #0]
 80021d4:	4618      	mov	r0, r3
 80021d6:	f005 fac7 	bl	8007768 <USB_ActivateSetup>
      hpcd->Init.speed = USB_GetDevSpeed(hpcd->Instance);
 80021da:	687b      	ldr	r3, [r7, #4]
 80021dc:	681b      	ldr	r3, [r3, #0]
 80021de:	4618      	mov	r0, r3
 80021e0:	f004 fa6f 	bl	80066c2 <USB_GetDevSpeed>
 80021e4:	4603      	mov	r3, r0
 80021e6:	461a      	mov	r2, r3
 80021e8:	687b      	ldr	r3, [r7, #4]
 80021ea:	60da      	str	r2, [r3, #12]

      /* Set USB Turnaround time */
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 80021ec:	687b      	ldr	r3, [r7, #4]
 80021ee:	681c      	ldr	r4, [r3, #0]
 80021f0:	f001 fd90 	bl	8003d14 <HAL_RCC_GetHCLKFreq>
 80021f4:	4601      	mov	r1, r0
                                  HAL_RCC_GetHCLKFreq(),
                                  (uint8_t)hpcd->Init.speed);
 80021f6:	687b      	ldr	r3, [r7, #4]
 80021f8:	68db      	ldr	r3, [r3, #12]
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 80021fa:	b2db      	uxtb	r3, r3
 80021fc:	461a      	mov	r2, r3
 80021fe:	4620      	mov	r0, r4
 8002200:	f003 ff74 	bl	80060ec <USB_SetTurnaroundTime>

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ResetCallback(hpcd);
#else
      HAL_PCD_ResetCallback(hpcd);
 8002204:	6878      	ldr	r0, [r7, #4]
 8002206:	f007 fe58 	bl	8009eba <HAL_PCD_ResetCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE);
 800220a:	687b      	ldr	r3, [r7, #4]
 800220c:	681b      	ldr	r3, [r3, #0]
 800220e:	695a      	ldr	r2, [r3, #20]
 8002210:	687b      	ldr	r3, [r7, #4]
 8002212:	681b      	ldr	r3, [r3, #0]
 8002214:	f402 5200 	and.w	r2, r2, #8192	; 0x2000
 8002218:	615a      	str	r2, [r3, #20]
    }

    /* Handle SOF Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SOF))
 800221a:	687b      	ldr	r3, [r7, #4]
 800221c:	681b      	ldr	r3, [r3, #0]
 800221e:	4618      	mov	r0, r3
 8002220:	f005 fa00 	bl	8007624 <USB_ReadInterrupts>
 8002224:	4603      	mov	r3, r0
 8002226:	f003 0308 	and.w	r3, r3, #8
 800222a:	2b08      	cmp	r3, #8
 800222c:	d10a      	bne.n	8002244 <HAL_PCD_IRQHandler+0x77c>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->SOFCallback(hpcd);
#else
      HAL_PCD_SOFCallback(hpcd);
 800222e:	6878      	ldr	r0, [r7, #4]
 8002230:	f007 fe35 	bl	8009e9e <HAL_PCD_SOFCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SOF);
 8002234:	687b      	ldr	r3, [r7, #4]
 8002236:	681b      	ldr	r3, [r3, #0]
 8002238:	695a      	ldr	r2, [r3, #20]
 800223a:	687b      	ldr	r3, [r7, #4]
 800223c:	681b      	ldr	r3, [r3, #0]
 800223e:	f002 0208 	and.w	r2, r2, #8
 8002242:	615a      	str	r2, [r3, #20]
    }

    /* Handle Global OUT NAK effective Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_BOUTNAKEFF))
 8002244:	687b      	ldr	r3, [r7, #4]
 8002246:	681b      	ldr	r3, [r3, #0]
 8002248:	4618      	mov	r0, r3
 800224a:	f005 f9eb 	bl	8007624 <USB_ReadInterrupts>
 800224e:	4603      	mov	r3, r0
 8002250:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002254:	2b80      	cmp	r3, #128	; 0x80
 8002256:	d122      	bne.n	800229e <HAL_PCD_IRQHandler+0x7d6>
    {
      USBx->GINTMSK &= ~USB_OTG_GINTMSK_GONAKEFFM;
 8002258:	6a3b      	ldr	r3, [r7, #32]
 800225a:	699b      	ldr	r3, [r3, #24]
 800225c:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8002260:	6a3b      	ldr	r3, [r7, #32]
 8002262:	619a      	str	r2, [r3, #24]

      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8002264:	2301      	movs	r3, #1
 8002266:	627b      	str	r3, [r7, #36]	; 0x24
 8002268:	e014      	b.n	8002294 <HAL_PCD_IRQHandler+0x7cc>
      {
        if (hpcd->OUT_ep[epnum].is_iso_incomplete == 1U)
 800226a:	6879      	ldr	r1, [r7, #4]
 800226c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800226e:	4613      	mov	r3, r2
 8002270:	00db      	lsls	r3, r3, #3
 8002272:	4413      	add	r3, r2
 8002274:	009b      	lsls	r3, r3, #2
 8002276:	440b      	add	r3, r1
 8002278:	f203 237f 	addw	r3, r3, #639	; 0x27f
 800227c:	781b      	ldrb	r3, [r3, #0]
 800227e:	2b01      	cmp	r3, #1
 8002280:	d105      	bne.n	800228e <HAL_PCD_IRQHandler+0x7c6>
        {
          /* Abort current transaction and disable the EP */
          (void)HAL_PCD_EP_Abort(hpcd, (uint8_t)epnum);
 8002282:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002284:	b2db      	uxtb	r3, r3
 8002286:	4619      	mov	r1, r3
 8002288:	6878      	ldr	r0, [r7, #4]
 800228a:	f000 fb27 	bl	80028dc <HAL_PCD_EP_Abort>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 800228e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002290:	3301      	adds	r3, #1
 8002292:	627b      	str	r3, [r7, #36]	; 0x24
 8002294:	687b      	ldr	r3, [r7, #4]
 8002296:	685b      	ldr	r3, [r3, #4]
 8002298:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800229a:	429a      	cmp	r2, r3
 800229c:	d3e5      	bcc.n	800226a <HAL_PCD_IRQHandler+0x7a2>
        }
      }
    }

    /* Handle Incomplete ISO IN Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR))
 800229e:	687b      	ldr	r3, [r7, #4]
 80022a0:	681b      	ldr	r3, [r3, #0]
 80022a2:	4618      	mov	r0, r3
 80022a4:	f005 f9be 	bl	8007624 <USB_ReadInterrupts>
 80022a8:	4603      	mov	r3, r0
 80022aa:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80022ae:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80022b2:	d13b      	bne.n	800232c <HAL_PCD_IRQHandler+0x864>
    {
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 80022b4:	2301      	movs	r3, #1
 80022b6:	627b      	str	r3, [r7, #36]	; 0x24
 80022b8:	e02b      	b.n	8002312 <HAL_PCD_IRQHandler+0x84a>
      {
        RegVal = USBx_INEP(epnum)->DIEPCTL;
 80022ba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80022bc:	015a      	lsls	r2, r3, #5
 80022be:	69fb      	ldr	r3, [r7, #28]
 80022c0:	4413      	add	r3, r2
 80022c2:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80022c6:	681b      	ldr	r3, [r3, #0]
 80022c8:	61bb      	str	r3, [r7, #24]

        if ((hpcd->IN_ep[epnum].type == EP_TYPE_ISOC) &&
 80022ca:	6879      	ldr	r1, [r7, #4]
 80022cc:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80022ce:	4613      	mov	r3, r2
 80022d0:	00db      	lsls	r3, r3, #3
 80022d2:	4413      	add	r3, r2
 80022d4:	009b      	lsls	r3, r3, #2
 80022d6:	440b      	add	r3, r1
 80022d8:	3340      	adds	r3, #64	; 0x40
 80022da:	781b      	ldrb	r3, [r3, #0]
 80022dc:	2b01      	cmp	r3, #1
 80022de:	d115      	bne.n	800230c <HAL_PCD_IRQHandler+0x844>
            ((RegVal & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA))
 80022e0:	69bb      	ldr	r3, [r7, #24]
        if ((hpcd->IN_ep[epnum].type == EP_TYPE_ISOC) &&
 80022e2:	2b00      	cmp	r3, #0
 80022e4:	da12      	bge.n	800230c <HAL_PCD_IRQHandler+0x844>
        {
          hpcd->IN_ep[epnum].is_iso_incomplete = 1U;
 80022e6:	6879      	ldr	r1, [r7, #4]
 80022e8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80022ea:	4613      	mov	r3, r2
 80022ec:	00db      	lsls	r3, r3, #3
 80022ee:	4413      	add	r3, r2
 80022f0:	009b      	lsls	r3, r3, #2
 80022f2:	440b      	add	r3, r1
 80022f4:	333f      	adds	r3, #63	; 0x3f
 80022f6:	2201      	movs	r2, #1
 80022f8:	701a      	strb	r2, [r3, #0]

          /* Abort current transaction and disable the EP */
          (void)HAL_PCD_EP_Abort(hpcd, (uint8_t)(epnum | 0x80U));
 80022fa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80022fc:	b2db      	uxtb	r3, r3
 80022fe:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8002302:	b2db      	uxtb	r3, r3
 8002304:	4619      	mov	r1, r3
 8002306:	6878      	ldr	r0, [r7, #4]
 8002308:	f000 fae8 	bl	80028dc <HAL_PCD_EP_Abort>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 800230c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800230e:	3301      	adds	r3, #1
 8002310:	627b      	str	r3, [r7, #36]	; 0x24
 8002312:	687b      	ldr	r3, [r7, #4]
 8002314:	685b      	ldr	r3, [r3, #4]
 8002316:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002318:	429a      	cmp	r2, r3
 800231a:	d3ce      	bcc.n	80022ba <HAL_PCD_IRQHandler+0x7f2>
        }
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR);
 800231c:	687b      	ldr	r3, [r7, #4]
 800231e:	681b      	ldr	r3, [r3, #0]
 8002320:	695a      	ldr	r2, [r3, #20]
 8002322:	687b      	ldr	r3, [r7, #4]
 8002324:	681b      	ldr	r3, [r3, #0]
 8002326:	f402 1280 	and.w	r2, r2, #1048576	; 0x100000
 800232a:	615a      	str	r2, [r3, #20]
    }

    /* Handle Incomplete ISO OUT Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT))
 800232c:	687b      	ldr	r3, [r7, #4]
 800232e:	681b      	ldr	r3, [r3, #0]
 8002330:	4618      	mov	r0, r3
 8002332:	f005 f977 	bl	8007624 <USB_ReadInterrupts>
 8002336:	4603      	mov	r3, r0
 8002338:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800233c:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8002340:	d155      	bne.n	80023ee <HAL_PCD_IRQHandler+0x926>
    {
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8002342:	2301      	movs	r3, #1
 8002344:	627b      	str	r3, [r7, #36]	; 0x24
 8002346:	e045      	b.n	80023d4 <HAL_PCD_IRQHandler+0x90c>
      {
        RegVal = USBx_OUTEP(epnum)->DOEPCTL;
 8002348:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800234a:	015a      	lsls	r2, r3, #5
 800234c:	69fb      	ldr	r3, [r7, #28]
 800234e:	4413      	add	r3, r2
 8002350:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002354:	681b      	ldr	r3, [r3, #0]
 8002356:	61bb      	str	r3, [r7, #24]

        if ((hpcd->OUT_ep[epnum].type == EP_TYPE_ISOC) &&
 8002358:	6879      	ldr	r1, [r7, #4]
 800235a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800235c:	4613      	mov	r3, r2
 800235e:	00db      	lsls	r3, r3, #3
 8002360:	4413      	add	r3, r2
 8002362:	009b      	lsls	r3, r3, #2
 8002364:	440b      	add	r3, r1
 8002366:	f503 7320 	add.w	r3, r3, #640	; 0x280
 800236a:	781b      	ldrb	r3, [r3, #0]
 800236c:	2b01      	cmp	r3, #1
 800236e:	d12e      	bne.n	80023ce <HAL_PCD_IRQHandler+0x906>
            ((RegVal & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA) &&
 8002370:	69bb      	ldr	r3, [r7, #24]
        if ((hpcd->OUT_ep[epnum].type == EP_TYPE_ISOC) &&
 8002372:	2b00      	cmp	r3, #0
 8002374:	da2b      	bge.n	80023ce <HAL_PCD_IRQHandler+0x906>
            ((RegVal & (0x1U << 16)) == (hpcd->FrameNumber & 0x1U)))
 8002376:	69bb      	ldr	r3, [r7, #24]
 8002378:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 800237c:	687b      	ldr	r3, [r7, #4]
 800237e:	f8d3 34fc 	ldr.w	r3, [r3, #1276]	; 0x4fc
 8002382:	f003 0301 	and.w	r3, r3, #1
            ((RegVal & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA) &&
 8002386:	429a      	cmp	r2, r3
 8002388:	d121      	bne.n	80023ce <HAL_PCD_IRQHandler+0x906>
        {
          hpcd->OUT_ep[epnum].is_iso_incomplete = 1U;
 800238a:	6879      	ldr	r1, [r7, #4]
 800238c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800238e:	4613      	mov	r3, r2
 8002390:	00db      	lsls	r3, r3, #3
 8002392:	4413      	add	r3, r2
 8002394:	009b      	lsls	r3, r3, #2
 8002396:	440b      	add	r3, r1
 8002398:	f203 237f 	addw	r3, r3, #639	; 0x27f
 800239c:	2201      	movs	r2, #1
 800239e:	701a      	strb	r2, [r3, #0]

          USBx->GINTMSK |= USB_OTG_GINTMSK_GONAKEFFM;
 80023a0:	6a3b      	ldr	r3, [r7, #32]
 80023a2:	699b      	ldr	r3, [r3, #24]
 80023a4:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 80023a8:	6a3b      	ldr	r3, [r7, #32]
 80023aa:	619a      	str	r2, [r3, #24]

          if ((USBx->GINTSTS & USB_OTG_GINTSTS_BOUTNAKEFF) == 0U)
 80023ac:	6a3b      	ldr	r3, [r7, #32]
 80023ae:	695b      	ldr	r3, [r3, #20]
 80023b0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80023b4:	2b00      	cmp	r3, #0
 80023b6:	d10a      	bne.n	80023ce <HAL_PCD_IRQHandler+0x906>
          {
            USBx_DEVICE->DCTL |= USB_OTG_DCTL_SGONAK;
 80023b8:	69fb      	ldr	r3, [r7, #28]
 80023ba:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80023be:	685b      	ldr	r3, [r3, #4]
 80023c0:	69fa      	ldr	r2, [r7, #28]
 80023c2:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80023c6:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80023ca:	6053      	str	r3, [r2, #4]
            break;
 80023cc:	e007      	b.n	80023de <HAL_PCD_IRQHandler+0x916>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 80023ce:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80023d0:	3301      	adds	r3, #1
 80023d2:	627b      	str	r3, [r7, #36]	; 0x24
 80023d4:	687b      	ldr	r3, [r7, #4]
 80023d6:	685b      	ldr	r3, [r3, #4]
 80023d8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80023da:	429a      	cmp	r2, r3
 80023dc:	d3b4      	bcc.n	8002348 <HAL_PCD_IRQHandler+0x880>
          }
        }
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT);
 80023de:	687b      	ldr	r3, [r7, #4]
 80023e0:	681b      	ldr	r3, [r3, #0]
 80023e2:	695a      	ldr	r2, [r3, #20]
 80023e4:	687b      	ldr	r3, [r7, #4]
 80023e6:	681b      	ldr	r3, [r3, #0]
 80023e8:	f402 1200 	and.w	r2, r2, #2097152	; 0x200000
 80023ec:	615a      	str	r2, [r3, #20]
    }

    /* Handle Connection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT))
 80023ee:	687b      	ldr	r3, [r7, #4]
 80023f0:	681b      	ldr	r3, [r3, #0]
 80023f2:	4618      	mov	r0, r3
 80023f4:	f005 f916 	bl	8007624 <USB_ReadInterrupts>
 80023f8:	4603      	mov	r3, r0
 80023fa:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 80023fe:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002402:	d10a      	bne.n	800241a <HAL_PCD_IRQHandler+0x952>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ConnectCallback(hpcd);
#else
      HAL_PCD_ConnectCallback(hpcd);
 8002404:	6878      	ldr	r0, [r7, #4]
 8002406:	f007 fdd9 	bl	8009fbc <HAL_PCD_ConnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT);
 800240a:	687b      	ldr	r3, [r7, #4]
 800240c:	681b      	ldr	r3, [r3, #0]
 800240e:	695a      	ldr	r2, [r3, #20]
 8002410:	687b      	ldr	r3, [r7, #4]
 8002412:	681b      	ldr	r3, [r3, #0]
 8002414:	f002 4280 	and.w	r2, r2, #1073741824	; 0x40000000
 8002418:	615a      	str	r2, [r3, #20]
    }

    /* Handle Disconnection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OTGINT))
 800241a:	687b      	ldr	r3, [r7, #4]
 800241c:	681b      	ldr	r3, [r3, #0]
 800241e:	4618      	mov	r0, r3
 8002420:	f005 f900 	bl	8007624 <USB_ReadInterrupts>
 8002424:	4603      	mov	r3, r0
 8002426:	f003 0304 	and.w	r3, r3, #4
 800242a:	2b04      	cmp	r3, #4
 800242c:	d115      	bne.n	800245a <HAL_PCD_IRQHandler+0x992>
    {
      RegVal = hpcd->Instance->GOTGINT;
 800242e:	687b      	ldr	r3, [r7, #4]
 8002430:	681b      	ldr	r3, [r3, #0]
 8002432:	685b      	ldr	r3, [r3, #4]
 8002434:	61bb      	str	r3, [r7, #24]

      if ((RegVal & USB_OTG_GOTGINT_SEDET) == USB_OTG_GOTGINT_SEDET)
 8002436:	69bb      	ldr	r3, [r7, #24]
 8002438:	f003 0304 	and.w	r3, r3, #4
 800243c:	2b00      	cmp	r3, #0
 800243e:	d002      	beq.n	8002446 <HAL_PCD_IRQHandler+0x97e>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DisconnectCallback(hpcd);
#else
        HAL_PCD_DisconnectCallback(hpcd);
 8002440:	6878      	ldr	r0, [r7, #4]
 8002442:	f007 fdc9 	bl	8009fd8 <HAL_PCD_DisconnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      hpcd->Instance->GOTGINT |= RegVal;
 8002446:	687b      	ldr	r3, [r7, #4]
 8002448:	681b      	ldr	r3, [r3, #0]
 800244a:	6859      	ldr	r1, [r3, #4]
 800244c:	687b      	ldr	r3, [r7, #4]
 800244e:	681b      	ldr	r3, [r3, #0]
 8002450:	69ba      	ldr	r2, [r7, #24]
 8002452:	430a      	orrs	r2, r1
 8002454:	605a      	str	r2, [r3, #4]
 8002456:	e000      	b.n	800245a <HAL_PCD_IRQHandler+0x992>
      return;
 8002458:	bf00      	nop
    }
  }
}
 800245a:	3734      	adds	r7, #52	; 0x34
 800245c:	46bd      	mov	sp, r7
 800245e:	bd90      	pop	{r4, r7, pc}

08002460 <HAL_PCD_SetAddress>:
  * @param  hpcd PCD handle
  * @param  address new device address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_SetAddress(PCD_HandleTypeDef *hpcd, uint8_t address)
{
 8002460:	b580      	push	{r7, lr}
 8002462:	b082      	sub	sp, #8
 8002464:	af00      	add	r7, sp, #0
 8002466:	6078      	str	r0, [r7, #4]
 8002468:	460b      	mov	r3, r1
 800246a:	70fb      	strb	r3, [r7, #3]
  __HAL_LOCK(hpcd);
 800246c:	687b      	ldr	r3, [r7, #4]
 800246e:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 8002472:	2b01      	cmp	r3, #1
 8002474:	d101      	bne.n	800247a <HAL_PCD_SetAddress+0x1a>
 8002476:	2302      	movs	r3, #2
 8002478:	e013      	b.n	80024a2 <HAL_PCD_SetAddress+0x42>
 800247a:	687b      	ldr	r3, [r7, #4]
 800247c:	2201      	movs	r2, #1
 800247e:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc
  hpcd->USB_Address = address;
 8002482:	687b      	ldr	r3, [r7, #4]
 8002484:	78fa      	ldrb	r2, [r7, #3]
 8002486:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  (void)USB_SetDevAddress(hpcd->Instance, address);
 800248a:	687b      	ldr	r3, [r7, #4]
 800248c:	681b      	ldr	r3, [r3, #0]
 800248e:	78fa      	ldrb	r2, [r7, #3]
 8002490:	4611      	mov	r1, r2
 8002492:	4618      	mov	r0, r3
 8002494:	f005 f85e 	bl	8007554 <USB_SetDevAddress>
  __HAL_UNLOCK(hpcd);
 8002498:	687b      	ldr	r3, [r7, #4]
 800249a:	2200      	movs	r2, #0
 800249c:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  return HAL_OK;
 80024a0:	2300      	movs	r3, #0
}
 80024a2:	4618      	mov	r0, r3
 80024a4:	3708      	adds	r7, #8
 80024a6:	46bd      	mov	sp, r7
 80024a8:	bd80      	pop	{r7, pc}

080024aa <HAL_PCD_EP_Open>:
  * @param  ep_type endpoint type
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Open(PCD_HandleTypeDef *hpcd, uint8_t ep_addr,
                                  uint16_t ep_mps, uint8_t ep_type)
{
 80024aa:	b580      	push	{r7, lr}
 80024ac:	b084      	sub	sp, #16
 80024ae:	af00      	add	r7, sp, #0
 80024b0:	6078      	str	r0, [r7, #4]
 80024b2:	4608      	mov	r0, r1
 80024b4:	4611      	mov	r1, r2
 80024b6:	461a      	mov	r2, r3
 80024b8:	4603      	mov	r3, r0
 80024ba:	70fb      	strb	r3, [r7, #3]
 80024bc:	460b      	mov	r3, r1
 80024be:	803b      	strh	r3, [r7, #0]
 80024c0:	4613      	mov	r3, r2
 80024c2:	70bb      	strb	r3, [r7, #2]
  HAL_StatusTypeDef  ret = HAL_OK;
 80024c4:	2300      	movs	r3, #0
 80024c6:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 80024c8:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80024cc:	2b00      	cmp	r3, #0
 80024ce:	da0f      	bge.n	80024f0 <HAL_PCD_EP_Open+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80024d0:	78fb      	ldrb	r3, [r7, #3]
 80024d2:	f003 020f 	and.w	r2, r3, #15
 80024d6:	4613      	mov	r3, r2
 80024d8:	00db      	lsls	r3, r3, #3
 80024da:	4413      	add	r3, r2
 80024dc:	009b      	lsls	r3, r3, #2
 80024de:	3338      	adds	r3, #56	; 0x38
 80024e0:	687a      	ldr	r2, [r7, #4]
 80024e2:	4413      	add	r3, r2
 80024e4:	3304      	adds	r3, #4
 80024e6:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 80024e8:	68fb      	ldr	r3, [r7, #12]
 80024ea:	2201      	movs	r2, #1
 80024ec:	705a      	strb	r2, [r3, #1]
 80024ee:	e00f      	b.n	8002510 <HAL_PCD_EP_Open+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 80024f0:	78fb      	ldrb	r3, [r7, #3]
 80024f2:	f003 020f 	and.w	r2, r3, #15
 80024f6:	4613      	mov	r3, r2
 80024f8:	00db      	lsls	r3, r3, #3
 80024fa:	4413      	add	r3, r2
 80024fc:	009b      	lsls	r3, r3, #2
 80024fe:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8002502:	687a      	ldr	r2, [r7, #4]
 8002504:	4413      	add	r3, r2
 8002506:	3304      	adds	r3, #4
 8002508:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 800250a:	68fb      	ldr	r3, [r7, #12]
 800250c:	2200      	movs	r2, #0
 800250e:	705a      	strb	r2, [r3, #1]
  }

  ep->num = ep_addr & EP_ADDR_MSK;
 8002510:	78fb      	ldrb	r3, [r7, #3]
 8002512:	f003 030f 	and.w	r3, r3, #15
 8002516:	b2da      	uxtb	r2, r3
 8002518:	68fb      	ldr	r3, [r7, #12]
 800251a:	701a      	strb	r2, [r3, #0]
  ep->maxpacket = ep_mps;
 800251c:	883a      	ldrh	r2, [r7, #0]
 800251e:	68fb      	ldr	r3, [r7, #12]
 8002520:	60da      	str	r2, [r3, #12]
  ep->type = ep_type;
 8002522:	68fb      	ldr	r3, [r7, #12]
 8002524:	78ba      	ldrb	r2, [r7, #2]
 8002526:	711a      	strb	r2, [r3, #4]

  if (ep->is_in != 0U)
 8002528:	68fb      	ldr	r3, [r7, #12]
 800252a:	785b      	ldrb	r3, [r3, #1]
 800252c:	2b00      	cmp	r3, #0
 800252e:	d004      	beq.n	800253a <HAL_PCD_EP_Open+0x90>
  {
    /* Assign a Tx FIFO */
    ep->tx_fifo_num = ep->num;
 8002530:	68fb      	ldr	r3, [r7, #12]
 8002532:	781b      	ldrb	r3, [r3, #0]
 8002534:	b29a      	uxth	r2, r3
 8002536:	68fb      	ldr	r3, [r7, #12]
 8002538:	811a      	strh	r2, [r3, #8]
  }
  /* Set initial data PID. */
  if (ep_type == EP_TYPE_BULK)
 800253a:	78bb      	ldrb	r3, [r7, #2]
 800253c:	2b02      	cmp	r3, #2
 800253e:	d102      	bne.n	8002546 <HAL_PCD_EP_Open+0x9c>
  {
    ep->data_pid_start = 0U;
 8002540:	68fb      	ldr	r3, [r7, #12]
 8002542:	2200      	movs	r2, #0
 8002544:	715a      	strb	r2, [r3, #5]
  }

  __HAL_LOCK(hpcd);
 8002546:	687b      	ldr	r3, [r7, #4]
 8002548:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 800254c:	2b01      	cmp	r3, #1
 800254e:	d101      	bne.n	8002554 <HAL_PCD_EP_Open+0xaa>
 8002550:	2302      	movs	r3, #2
 8002552:	e00e      	b.n	8002572 <HAL_PCD_EP_Open+0xc8>
 8002554:	687b      	ldr	r3, [r7, #4]
 8002556:	2201      	movs	r2, #1
 8002558:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc
  (void)USB_ActivateEndpoint(hpcd->Instance, ep);
 800255c:	687b      	ldr	r3, [r7, #4]
 800255e:	681b      	ldr	r3, [r3, #0]
 8002560:	68f9      	ldr	r1, [r7, #12]
 8002562:	4618      	mov	r0, r3
 8002564:	f004 f8d2 	bl	800670c <USB_ActivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8002568:	687b      	ldr	r3, [r7, #4]
 800256a:	2200      	movs	r2, #0
 800256c:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  return ret;
 8002570:	7afb      	ldrb	r3, [r7, #11]
}
 8002572:	4618      	mov	r0, r3
 8002574:	3710      	adds	r7, #16
 8002576:	46bd      	mov	sp, r7
 8002578:	bd80      	pop	{r7, pc}

0800257a <HAL_PCD_EP_Close>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Close(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 800257a:	b580      	push	{r7, lr}
 800257c:	b084      	sub	sp, #16
 800257e:	af00      	add	r7, sp, #0
 8002580:	6078      	str	r0, [r7, #4]
 8002582:	460b      	mov	r3, r1
 8002584:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8002586:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800258a:	2b00      	cmp	r3, #0
 800258c:	da0f      	bge.n	80025ae <HAL_PCD_EP_Close+0x34>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800258e:	78fb      	ldrb	r3, [r7, #3]
 8002590:	f003 020f 	and.w	r2, r3, #15
 8002594:	4613      	mov	r3, r2
 8002596:	00db      	lsls	r3, r3, #3
 8002598:	4413      	add	r3, r2
 800259a:	009b      	lsls	r3, r3, #2
 800259c:	3338      	adds	r3, #56	; 0x38
 800259e:	687a      	ldr	r2, [r7, #4]
 80025a0:	4413      	add	r3, r2
 80025a2:	3304      	adds	r3, #4
 80025a4:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 80025a6:	68fb      	ldr	r3, [r7, #12]
 80025a8:	2201      	movs	r2, #1
 80025aa:	705a      	strb	r2, [r3, #1]
 80025ac:	e00f      	b.n	80025ce <HAL_PCD_EP_Close+0x54>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 80025ae:	78fb      	ldrb	r3, [r7, #3]
 80025b0:	f003 020f 	and.w	r2, r3, #15
 80025b4:	4613      	mov	r3, r2
 80025b6:	00db      	lsls	r3, r3, #3
 80025b8:	4413      	add	r3, r2
 80025ba:	009b      	lsls	r3, r3, #2
 80025bc:	f503 731e 	add.w	r3, r3, #632	; 0x278
 80025c0:	687a      	ldr	r2, [r7, #4]
 80025c2:	4413      	add	r3, r2
 80025c4:	3304      	adds	r3, #4
 80025c6:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 80025c8:	68fb      	ldr	r3, [r7, #12]
 80025ca:	2200      	movs	r2, #0
 80025cc:	705a      	strb	r2, [r3, #1]
  }
  ep->num   = ep_addr & EP_ADDR_MSK;
 80025ce:	78fb      	ldrb	r3, [r7, #3]
 80025d0:	f003 030f 	and.w	r3, r3, #15
 80025d4:	b2da      	uxtb	r2, r3
 80025d6:	68fb      	ldr	r3, [r7, #12]
 80025d8:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 80025da:	687b      	ldr	r3, [r7, #4]
 80025dc:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 80025e0:	2b01      	cmp	r3, #1
 80025e2:	d101      	bne.n	80025e8 <HAL_PCD_EP_Close+0x6e>
 80025e4:	2302      	movs	r3, #2
 80025e6:	e00e      	b.n	8002606 <HAL_PCD_EP_Close+0x8c>
 80025e8:	687b      	ldr	r3, [r7, #4]
 80025ea:	2201      	movs	r2, #1
 80025ec:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc
  (void)USB_DeactivateEndpoint(hpcd->Instance, ep);
 80025f0:	687b      	ldr	r3, [r7, #4]
 80025f2:	681b      	ldr	r3, [r3, #0]
 80025f4:	68f9      	ldr	r1, [r7, #12]
 80025f6:	4618      	mov	r0, r3
 80025f8:	f004 f910 	bl	800681c <USB_DeactivateEndpoint>
  __HAL_UNLOCK(hpcd);
 80025fc:	687b      	ldr	r3, [r7, #4]
 80025fe:	2200      	movs	r2, #0
 8002600:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc
  return HAL_OK;
 8002604:	2300      	movs	r3, #0
}
 8002606:	4618      	mov	r0, r3
 8002608:	3710      	adds	r7, #16
 800260a:	46bd      	mov	sp, r7
 800260c:	bd80      	pop	{r7, pc}

0800260e <HAL_PCD_EP_Receive>:
  * @param  pBuf pointer to the reception buffer
  * @param  len amount of data to be received
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Receive(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 800260e:	b580      	push	{r7, lr}
 8002610:	b086      	sub	sp, #24
 8002612:	af00      	add	r7, sp, #0
 8002614:	60f8      	str	r0, [r7, #12]
 8002616:	607a      	str	r2, [r7, #4]
 8002618:	603b      	str	r3, [r7, #0]
 800261a:	460b      	mov	r3, r1
 800261c:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 800261e:	7afb      	ldrb	r3, [r7, #11]
 8002620:	f003 020f 	and.w	r2, r3, #15
 8002624:	4613      	mov	r3, r2
 8002626:	00db      	lsls	r3, r3, #3
 8002628:	4413      	add	r3, r2
 800262a:	009b      	lsls	r3, r3, #2
 800262c:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8002630:	68fa      	ldr	r2, [r7, #12]
 8002632:	4413      	add	r3, r2
 8002634:	3304      	adds	r3, #4
 8002636:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8002638:	697b      	ldr	r3, [r7, #20]
 800263a:	687a      	ldr	r2, [r7, #4]
 800263c:	611a      	str	r2, [r3, #16]
  ep->xfer_len = len;
 800263e:	697b      	ldr	r3, [r7, #20]
 8002640:	683a      	ldr	r2, [r7, #0]
 8002642:	619a      	str	r2, [r3, #24]
  ep->xfer_count = 0U;
 8002644:	697b      	ldr	r3, [r7, #20]
 8002646:	2200      	movs	r2, #0
 8002648:	621a      	str	r2, [r3, #32]
  ep->is_in = 0U;
 800264a:	697b      	ldr	r3, [r7, #20]
 800264c:	2200      	movs	r2, #0
 800264e:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8002650:	7afb      	ldrb	r3, [r7, #11]
 8002652:	f003 030f 	and.w	r3, r3, #15
 8002656:	b2da      	uxtb	r2, r3
 8002658:	697b      	ldr	r3, [r7, #20]
 800265a:	701a      	strb	r2, [r3, #0]

  if (hpcd->Init.dma_enable == 1U)
 800265c:	68fb      	ldr	r3, [r7, #12]
 800265e:	691b      	ldr	r3, [r3, #16]
 8002660:	2b01      	cmp	r3, #1
 8002662:	d102      	bne.n	800266a <HAL_PCD_EP_Receive+0x5c>
  {
    ep->dma_addr = (uint32_t)pBuf;
 8002664:	687a      	ldr	r2, [r7, #4]
 8002666:	697b      	ldr	r3, [r7, #20]
 8002668:	615a      	str	r2, [r3, #20]
  }

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 800266a:	7afb      	ldrb	r3, [r7, #11]
 800266c:	f003 030f 	and.w	r3, r3, #15
 8002670:	2b00      	cmp	r3, #0
 8002672:	d109      	bne.n	8002688 <HAL_PCD_EP_Receive+0x7a>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8002674:	68fb      	ldr	r3, [r7, #12]
 8002676:	6818      	ldr	r0, [r3, #0]
 8002678:	68fb      	ldr	r3, [r7, #12]
 800267a:	691b      	ldr	r3, [r3, #16]
 800267c:	b2db      	uxtb	r3, r3
 800267e:	461a      	mov	r2, r3
 8002680:	6979      	ldr	r1, [r7, #20]
 8002682:	f004 fbf7 	bl	8006e74 <USB_EP0StartXfer>
 8002686:	e008      	b.n	800269a <HAL_PCD_EP_Receive+0x8c>
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8002688:	68fb      	ldr	r3, [r7, #12]
 800268a:	6818      	ldr	r0, [r3, #0]
 800268c:	68fb      	ldr	r3, [r7, #12]
 800268e:	691b      	ldr	r3, [r3, #16]
 8002690:	b2db      	uxtb	r3, r3
 8002692:	461a      	mov	r2, r3
 8002694:	6979      	ldr	r1, [r7, #20]
 8002696:	f004 f99d 	bl	80069d4 <USB_EPStartXfer>
  }

  return HAL_OK;
 800269a:	2300      	movs	r3, #0
}
 800269c:	4618      	mov	r0, r3
 800269e:	3718      	adds	r7, #24
 80026a0:	46bd      	mov	sp, r7
 80026a2:	bd80      	pop	{r7, pc}

080026a4 <HAL_PCD_EP_GetRxCount>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval Data Size
  */
uint32_t HAL_PCD_EP_GetRxCount(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 80026a4:	b480      	push	{r7}
 80026a6:	b083      	sub	sp, #12
 80026a8:	af00      	add	r7, sp, #0
 80026aa:	6078      	str	r0, [r7, #4]
 80026ac:	460b      	mov	r3, r1
 80026ae:	70fb      	strb	r3, [r7, #3]
  return hpcd->OUT_ep[ep_addr & EP_ADDR_MSK].xfer_count;
 80026b0:	78fb      	ldrb	r3, [r7, #3]
 80026b2:	f003 020f 	and.w	r2, r3, #15
 80026b6:	6879      	ldr	r1, [r7, #4]
 80026b8:	4613      	mov	r3, r2
 80026ba:	00db      	lsls	r3, r3, #3
 80026bc:	4413      	add	r3, r2
 80026be:	009b      	lsls	r3, r3, #2
 80026c0:	440b      	add	r3, r1
 80026c2:	f503 7327 	add.w	r3, r3, #668	; 0x29c
 80026c6:	681b      	ldr	r3, [r3, #0]
}
 80026c8:	4618      	mov	r0, r3
 80026ca:	370c      	adds	r7, #12
 80026cc:	46bd      	mov	sp, r7
 80026ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026d2:	4770      	bx	lr

080026d4 <HAL_PCD_EP_Transmit>:
  * @param  pBuf pointer to the transmission buffer
  * @param  len amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Transmit(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 80026d4:	b580      	push	{r7, lr}
 80026d6:	b086      	sub	sp, #24
 80026d8:	af00      	add	r7, sp, #0
 80026da:	60f8      	str	r0, [r7, #12]
 80026dc:	607a      	str	r2, [r7, #4]
 80026de:	603b      	str	r3, [r7, #0]
 80026e0:	460b      	mov	r3, r1
 80026e2:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80026e4:	7afb      	ldrb	r3, [r7, #11]
 80026e6:	f003 020f 	and.w	r2, r3, #15
 80026ea:	4613      	mov	r3, r2
 80026ec:	00db      	lsls	r3, r3, #3
 80026ee:	4413      	add	r3, r2
 80026f0:	009b      	lsls	r3, r3, #2
 80026f2:	3338      	adds	r3, #56	; 0x38
 80026f4:	68fa      	ldr	r2, [r7, #12]
 80026f6:	4413      	add	r3, r2
 80026f8:	3304      	adds	r3, #4
 80026fa:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 80026fc:	697b      	ldr	r3, [r7, #20]
 80026fe:	687a      	ldr	r2, [r7, #4]
 8002700:	611a      	str	r2, [r3, #16]
  ep->xfer_len = len;
 8002702:	697b      	ldr	r3, [r7, #20]
 8002704:	683a      	ldr	r2, [r7, #0]
 8002706:	619a      	str	r2, [r3, #24]
  ep->xfer_count = 0U;
 8002708:	697b      	ldr	r3, [r7, #20]
 800270a:	2200      	movs	r2, #0
 800270c:	621a      	str	r2, [r3, #32]
  ep->is_in = 1U;
 800270e:	697b      	ldr	r3, [r7, #20]
 8002710:	2201      	movs	r2, #1
 8002712:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8002714:	7afb      	ldrb	r3, [r7, #11]
 8002716:	f003 030f 	and.w	r3, r3, #15
 800271a:	b2da      	uxtb	r2, r3
 800271c:	697b      	ldr	r3, [r7, #20]
 800271e:	701a      	strb	r2, [r3, #0]

  if (hpcd->Init.dma_enable == 1U)
 8002720:	68fb      	ldr	r3, [r7, #12]
 8002722:	691b      	ldr	r3, [r3, #16]
 8002724:	2b01      	cmp	r3, #1
 8002726:	d102      	bne.n	800272e <HAL_PCD_EP_Transmit+0x5a>
  {
    ep->dma_addr = (uint32_t)pBuf;
 8002728:	687a      	ldr	r2, [r7, #4]
 800272a:	697b      	ldr	r3, [r7, #20]
 800272c:	615a      	str	r2, [r3, #20]
  }

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 800272e:	7afb      	ldrb	r3, [r7, #11]
 8002730:	f003 030f 	and.w	r3, r3, #15
 8002734:	2b00      	cmp	r3, #0
 8002736:	d109      	bne.n	800274c <HAL_PCD_EP_Transmit+0x78>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8002738:	68fb      	ldr	r3, [r7, #12]
 800273a:	6818      	ldr	r0, [r3, #0]
 800273c:	68fb      	ldr	r3, [r7, #12]
 800273e:	691b      	ldr	r3, [r3, #16]
 8002740:	b2db      	uxtb	r3, r3
 8002742:	461a      	mov	r2, r3
 8002744:	6979      	ldr	r1, [r7, #20]
 8002746:	f004 fb95 	bl	8006e74 <USB_EP0StartXfer>
 800274a:	e008      	b.n	800275e <HAL_PCD_EP_Transmit+0x8a>
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 800274c:	68fb      	ldr	r3, [r7, #12]
 800274e:	6818      	ldr	r0, [r3, #0]
 8002750:	68fb      	ldr	r3, [r7, #12]
 8002752:	691b      	ldr	r3, [r3, #16]
 8002754:	b2db      	uxtb	r3, r3
 8002756:	461a      	mov	r2, r3
 8002758:	6979      	ldr	r1, [r7, #20]
 800275a:	f004 f93b 	bl	80069d4 <USB_EPStartXfer>
  }

  return HAL_OK;
 800275e:	2300      	movs	r3, #0
}
 8002760:	4618      	mov	r0, r3
 8002762:	3718      	adds	r7, #24
 8002764:	46bd      	mov	sp, r7
 8002766:	bd80      	pop	{r7, pc}

08002768 <HAL_PCD_EP_SetStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_SetStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8002768:	b580      	push	{r7, lr}
 800276a:	b084      	sub	sp, #16
 800276c:	af00      	add	r7, sp, #0
 800276e:	6078      	str	r0, [r7, #4]
 8002770:	460b      	mov	r3, r1
 8002772:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & EP_ADDR_MSK) > hpcd->Init.dev_endpoints)
 8002774:	78fb      	ldrb	r3, [r7, #3]
 8002776:	f003 020f 	and.w	r2, r3, #15
 800277a:	687b      	ldr	r3, [r7, #4]
 800277c:	685b      	ldr	r3, [r3, #4]
 800277e:	429a      	cmp	r2, r3
 8002780:	d901      	bls.n	8002786 <HAL_PCD_EP_SetStall+0x1e>
  {
    return HAL_ERROR;
 8002782:	2301      	movs	r3, #1
 8002784:	e050      	b.n	8002828 <HAL_PCD_EP_SetStall+0xc0>
  }

  if ((0x80U & ep_addr) == 0x80U)
 8002786:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800278a:	2b00      	cmp	r3, #0
 800278c:	da0f      	bge.n	80027ae <HAL_PCD_EP_SetStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800278e:	78fb      	ldrb	r3, [r7, #3]
 8002790:	f003 020f 	and.w	r2, r3, #15
 8002794:	4613      	mov	r3, r2
 8002796:	00db      	lsls	r3, r3, #3
 8002798:	4413      	add	r3, r2
 800279a:	009b      	lsls	r3, r3, #2
 800279c:	3338      	adds	r3, #56	; 0x38
 800279e:	687a      	ldr	r2, [r7, #4]
 80027a0:	4413      	add	r3, r2
 80027a2:	3304      	adds	r3, #4
 80027a4:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 80027a6:	68fb      	ldr	r3, [r7, #12]
 80027a8:	2201      	movs	r2, #1
 80027aa:	705a      	strb	r2, [r3, #1]
 80027ac:	e00d      	b.n	80027ca <HAL_PCD_EP_SetStall+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 80027ae:	78fa      	ldrb	r2, [r7, #3]
 80027b0:	4613      	mov	r3, r2
 80027b2:	00db      	lsls	r3, r3, #3
 80027b4:	4413      	add	r3, r2
 80027b6:	009b      	lsls	r3, r3, #2
 80027b8:	f503 731e 	add.w	r3, r3, #632	; 0x278
 80027bc:	687a      	ldr	r2, [r7, #4]
 80027be:	4413      	add	r3, r2
 80027c0:	3304      	adds	r3, #4
 80027c2:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 80027c4:	68fb      	ldr	r3, [r7, #12]
 80027c6:	2200      	movs	r2, #0
 80027c8:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 1U;
 80027ca:	68fb      	ldr	r3, [r7, #12]
 80027cc:	2201      	movs	r2, #1
 80027ce:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 80027d0:	78fb      	ldrb	r3, [r7, #3]
 80027d2:	f003 030f 	and.w	r3, r3, #15
 80027d6:	b2da      	uxtb	r2, r3
 80027d8:	68fb      	ldr	r3, [r7, #12]
 80027da:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 80027dc:	687b      	ldr	r3, [r7, #4]
 80027de:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 80027e2:	2b01      	cmp	r3, #1
 80027e4:	d101      	bne.n	80027ea <HAL_PCD_EP_SetStall+0x82>
 80027e6:	2302      	movs	r3, #2
 80027e8:	e01e      	b.n	8002828 <HAL_PCD_EP_SetStall+0xc0>
 80027ea:	687b      	ldr	r3, [r7, #4]
 80027ec:	2201      	movs	r2, #1
 80027ee:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  (void)USB_EPSetStall(hpcd->Instance, ep);
 80027f2:	687b      	ldr	r3, [r7, #4]
 80027f4:	681b      	ldr	r3, [r3, #0]
 80027f6:	68f9      	ldr	r1, [r7, #12]
 80027f8:	4618      	mov	r0, r3
 80027fa:	f004 fdd7 	bl	80073ac <USB_EPSetStall>

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 80027fe:	78fb      	ldrb	r3, [r7, #3]
 8002800:	f003 030f 	and.w	r3, r3, #15
 8002804:	2b00      	cmp	r3, #0
 8002806:	d10a      	bne.n	800281e <HAL_PCD_EP_SetStall+0xb6>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable, (uint8_t *)hpcd->Setup);
 8002808:	687b      	ldr	r3, [r7, #4]
 800280a:	6818      	ldr	r0, [r3, #0]
 800280c:	687b      	ldr	r3, [r7, #4]
 800280e:	691b      	ldr	r3, [r3, #16]
 8002810:	b2d9      	uxtb	r1, r3
 8002812:	687b      	ldr	r3, [r7, #4]
 8002814:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 8002818:	461a      	mov	r2, r3
 800281a:	f004 ffc9 	bl	80077b0 <USB_EP0_OutStart>
  }

  __HAL_UNLOCK(hpcd);
 800281e:	687b      	ldr	r3, [r7, #4]
 8002820:	2200      	movs	r2, #0
 8002822:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  return HAL_OK;
 8002826:	2300      	movs	r3, #0
}
 8002828:	4618      	mov	r0, r3
 800282a:	3710      	adds	r7, #16
 800282c:	46bd      	mov	sp, r7
 800282e:	bd80      	pop	{r7, pc}

08002830 <HAL_PCD_EP_ClrStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_ClrStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8002830:	b580      	push	{r7, lr}
 8002832:	b084      	sub	sp, #16
 8002834:	af00      	add	r7, sp, #0
 8002836:	6078      	str	r0, [r7, #4]
 8002838:	460b      	mov	r3, r1
 800283a:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & 0x0FU) > hpcd->Init.dev_endpoints)
 800283c:	78fb      	ldrb	r3, [r7, #3]
 800283e:	f003 020f 	and.w	r2, r3, #15
 8002842:	687b      	ldr	r3, [r7, #4]
 8002844:	685b      	ldr	r3, [r3, #4]
 8002846:	429a      	cmp	r2, r3
 8002848:	d901      	bls.n	800284e <HAL_PCD_EP_ClrStall+0x1e>
  {
    return HAL_ERROR;
 800284a:	2301      	movs	r3, #1
 800284c:	e042      	b.n	80028d4 <HAL_PCD_EP_ClrStall+0xa4>
  }

  if ((0x80U & ep_addr) == 0x80U)
 800284e:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8002852:	2b00      	cmp	r3, #0
 8002854:	da0f      	bge.n	8002876 <HAL_PCD_EP_ClrStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8002856:	78fb      	ldrb	r3, [r7, #3]
 8002858:	f003 020f 	and.w	r2, r3, #15
 800285c:	4613      	mov	r3, r2
 800285e:	00db      	lsls	r3, r3, #3
 8002860:	4413      	add	r3, r2
 8002862:	009b      	lsls	r3, r3, #2
 8002864:	3338      	adds	r3, #56	; 0x38
 8002866:	687a      	ldr	r2, [r7, #4]
 8002868:	4413      	add	r3, r2
 800286a:	3304      	adds	r3, #4
 800286c:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 800286e:	68fb      	ldr	r3, [r7, #12]
 8002870:	2201      	movs	r2, #1
 8002872:	705a      	strb	r2, [r3, #1]
 8002874:	e00f      	b.n	8002896 <HAL_PCD_EP_ClrStall+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8002876:	78fb      	ldrb	r3, [r7, #3]
 8002878:	f003 020f 	and.w	r2, r3, #15
 800287c:	4613      	mov	r3, r2
 800287e:	00db      	lsls	r3, r3, #3
 8002880:	4413      	add	r3, r2
 8002882:	009b      	lsls	r3, r3, #2
 8002884:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8002888:	687a      	ldr	r2, [r7, #4]
 800288a:	4413      	add	r3, r2
 800288c:	3304      	adds	r3, #4
 800288e:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8002890:	68fb      	ldr	r3, [r7, #12]
 8002892:	2200      	movs	r2, #0
 8002894:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 0U;
 8002896:	68fb      	ldr	r3, [r7, #12]
 8002898:	2200      	movs	r2, #0
 800289a:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 800289c:	78fb      	ldrb	r3, [r7, #3]
 800289e:	f003 030f 	and.w	r3, r3, #15
 80028a2:	b2da      	uxtb	r2, r3
 80028a4:	68fb      	ldr	r3, [r7, #12]
 80028a6:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 80028a8:	687b      	ldr	r3, [r7, #4]
 80028aa:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 80028ae:	2b01      	cmp	r3, #1
 80028b0:	d101      	bne.n	80028b6 <HAL_PCD_EP_ClrStall+0x86>
 80028b2:	2302      	movs	r3, #2
 80028b4:	e00e      	b.n	80028d4 <HAL_PCD_EP_ClrStall+0xa4>
 80028b6:	687b      	ldr	r3, [r7, #4]
 80028b8:	2201      	movs	r2, #1
 80028ba:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc
  (void)USB_EPClearStall(hpcd->Instance, ep);
 80028be:	687b      	ldr	r3, [r7, #4]
 80028c0:	681b      	ldr	r3, [r3, #0]
 80028c2:	68f9      	ldr	r1, [r7, #12]
 80028c4:	4618      	mov	r0, r3
 80028c6:	f004 fddf 	bl	8007488 <USB_EPClearStall>
  __HAL_UNLOCK(hpcd);
 80028ca:	687b      	ldr	r3, [r7, #4]
 80028cc:	2200      	movs	r2, #0
 80028ce:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  return HAL_OK;
 80028d2:	2300      	movs	r3, #0
}
 80028d4:	4618      	mov	r0, r3
 80028d6:	3710      	adds	r7, #16
 80028d8:	46bd      	mov	sp, r7
 80028da:	bd80      	pop	{r7, pc}

080028dc <HAL_PCD_EP_Abort>:
   * @param  hpcd PCD handle
   * @param  ep_addr endpoint address
   * @retval HAL status
   */
HAL_StatusTypeDef HAL_PCD_EP_Abort(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 80028dc:	b580      	push	{r7, lr}
 80028de:	b084      	sub	sp, #16
 80028e0:	af00      	add	r7, sp, #0
 80028e2:	6078      	str	r0, [r7, #4]
 80028e4:	460b      	mov	r3, r1
 80028e6:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef ret;
  PCD_EPTypeDef *ep;

  if ((0x80U & ep_addr) == 0x80U)
 80028e8:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80028ec:	2b00      	cmp	r3, #0
 80028ee:	da0c      	bge.n	800290a <HAL_PCD_EP_Abort+0x2e>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80028f0:	78fb      	ldrb	r3, [r7, #3]
 80028f2:	f003 020f 	and.w	r2, r3, #15
 80028f6:	4613      	mov	r3, r2
 80028f8:	00db      	lsls	r3, r3, #3
 80028fa:	4413      	add	r3, r2
 80028fc:	009b      	lsls	r3, r3, #2
 80028fe:	3338      	adds	r3, #56	; 0x38
 8002900:	687a      	ldr	r2, [r7, #4]
 8002902:	4413      	add	r3, r2
 8002904:	3304      	adds	r3, #4
 8002906:	60fb      	str	r3, [r7, #12]
 8002908:	e00c      	b.n	8002924 <HAL_PCD_EP_Abort+0x48>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 800290a:	78fb      	ldrb	r3, [r7, #3]
 800290c:	f003 020f 	and.w	r2, r3, #15
 8002910:	4613      	mov	r3, r2
 8002912:	00db      	lsls	r3, r3, #3
 8002914:	4413      	add	r3, r2
 8002916:	009b      	lsls	r3, r3, #2
 8002918:	f503 731e 	add.w	r3, r3, #632	; 0x278
 800291c:	687a      	ldr	r2, [r7, #4]
 800291e:	4413      	add	r3, r2
 8002920:	3304      	adds	r3, #4
 8002922:	60fb      	str	r3, [r7, #12]
  }

  /* Stop Xfer */
  ret = USB_EPStopXfer(hpcd->Instance, ep);
 8002924:	687b      	ldr	r3, [r7, #4]
 8002926:	681b      	ldr	r3, [r3, #0]
 8002928:	68f9      	ldr	r1, [r7, #12]
 800292a:	4618      	mov	r0, r3
 800292c:	f004 fbfe 	bl	800712c <USB_EPStopXfer>
 8002930:	4603      	mov	r3, r0
 8002932:	72fb      	strb	r3, [r7, #11]

  return ret;
 8002934:	7afb      	ldrb	r3, [r7, #11]
}
 8002936:	4618      	mov	r0, r3
 8002938:	3710      	adds	r7, #16
 800293a:	46bd      	mov	sp, r7
 800293c:	bd80      	pop	{r7, pc}

0800293e <PCD_WriteEmptyTxFifo>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_WriteEmptyTxFifo(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 800293e:	b580      	push	{r7, lr}
 8002940:	b08a      	sub	sp, #40	; 0x28
 8002942:	af02      	add	r7, sp, #8
 8002944:	6078      	str	r0, [r7, #4]
 8002946:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8002948:	687b      	ldr	r3, [r7, #4]
 800294a:	681b      	ldr	r3, [r3, #0]
 800294c:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800294e:	697b      	ldr	r3, [r7, #20]
 8002950:	613b      	str	r3, [r7, #16]
  USB_OTG_EPTypeDef *ep;
  uint32_t len;
  uint32_t len32b;
  uint32_t fifoemptymsk;

  ep = &hpcd->IN_ep[epnum];
 8002952:	683a      	ldr	r2, [r7, #0]
 8002954:	4613      	mov	r3, r2
 8002956:	00db      	lsls	r3, r3, #3
 8002958:	4413      	add	r3, r2
 800295a:	009b      	lsls	r3, r3, #2
 800295c:	3338      	adds	r3, #56	; 0x38
 800295e:	687a      	ldr	r2, [r7, #4]
 8002960:	4413      	add	r3, r2
 8002962:	3304      	adds	r3, #4
 8002964:	60fb      	str	r3, [r7, #12]

  if (ep->xfer_count > ep->xfer_len)
 8002966:	68fb      	ldr	r3, [r7, #12]
 8002968:	6a1a      	ldr	r2, [r3, #32]
 800296a:	68fb      	ldr	r3, [r7, #12]
 800296c:	699b      	ldr	r3, [r3, #24]
 800296e:	429a      	cmp	r2, r3
 8002970:	d901      	bls.n	8002976 <PCD_WriteEmptyTxFifo+0x38>
  {
    return HAL_ERROR;
 8002972:	2301      	movs	r3, #1
 8002974:	e06c      	b.n	8002a50 <PCD_WriteEmptyTxFifo+0x112>
  }

  len = ep->xfer_len - ep->xfer_count;
 8002976:	68fb      	ldr	r3, [r7, #12]
 8002978:	699a      	ldr	r2, [r3, #24]
 800297a:	68fb      	ldr	r3, [r7, #12]
 800297c:	6a1b      	ldr	r3, [r3, #32]
 800297e:	1ad3      	subs	r3, r2, r3
 8002980:	61fb      	str	r3, [r7, #28]

  if (len > ep->maxpacket)
 8002982:	68fb      	ldr	r3, [r7, #12]
 8002984:	68db      	ldr	r3, [r3, #12]
 8002986:	69fa      	ldr	r2, [r7, #28]
 8002988:	429a      	cmp	r2, r3
 800298a:	d902      	bls.n	8002992 <PCD_WriteEmptyTxFifo+0x54>
  {
    len = ep->maxpacket;
 800298c:	68fb      	ldr	r3, [r7, #12]
 800298e:	68db      	ldr	r3, [r3, #12]
 8002990:	61fb      	str	r3, [r7, #28]
  }

  len32b = (len + 3U) / 4U;
 8002992:	69fb      	ldr	r3, [r7, #28]
 8002994:	3303      	adds	r3, #3
 8002996:	089b      	lsrs	r3, r3, #2
 8002998:	61bb      	str	r3, [r7, #24]

  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 800299a:	e02b      	b.n	80029f4 <PCD_WriteEmptyTxFifo+0xb6>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
  {
    /* Write the FIFO */
    len = ep->xfer_len - ep->xfer_count;
 800299c:	68fb      	ldr	r3, [r7, #12]
 800299e:	699a      	ldr	r2, [r3, #24]
 80029a0:	68fb      	ldr	r3, [r7, #12]
 80029a2:	6a1b      	ldr	r3, [r3, #32]
 80029a4:	1ad3      	subs	r3, r2, r3
 80029a6:	61fb      	str	r3, [r7, #28]

    if (len > ep->maxpacket)
 80029a8:	68fb      	ldr	r3, [r7, #12]
 80029aa:	68db      	ldr	r3, [r3, #12]
 80029ac:	69fa      	ldr	r2, [r7, #28]
 80029ae:	429a      	cmp	r2, r3
 80029b0:	d902      	bls.n	80029b8 <PCD_WriteEmptyTxFifo+0x7a>
    {
      len = ep->maxpacket;
 80029b2:	68fb      	ldr	r3, [r7, #12]
 80029b4:	68db      	ldr	r3, [r3, #12]
 80029b6:	61fb      	str	r3, [r7, #28]
    }
    len32b = (len + 3U) / 4U;
 80029b8:	69fb      	ldr	r3, [r7, #28]
 80029ba:	3303      	adds	r3, #3
 80029bc:	089b      	lsrs	r3, r3, #2
 80029be:	61bb      	str	r3, [r7, #24]

    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 80029c0:	68fb      	ldr	r3, [r7, #12]
 80029c2:	6919      	ldr	r1, [r3, #16]
 80029c4:	683b      	ldr	r3, [r7, #0]
 80029c6:	b2da      	uxtb	r2, r3
 80029c8:	69fb      	ldr	r3, [r7, #28]
 80029ca:	b298      	uxth	r0, r3
                          (uint8_t)hpcd->Init.dma_enable);
 80029cc:	687b      	ldr	r3, [r7, #4]
 80029ce:	691b      	ldr	r3, [r3, #16]
    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 80029d0:	b2db      	uxtb	r3, r3
 80029d2:	9300      	str	r3, [sp, #0]
 80029d4:	4603      	mov	r3, r0
 80029d6:	6978      	ldr	r0, [r7, #20]
 80029d8:	f004 fc52 	bl	8007280 <USB_WritePacket>

    ep->xfer_buff  += len;
 80029dc:	68fb      	ldr	r3, [r7, #12]
 80029de:	691a      	ldr	r2, [r3, #16]
 80029e0:	69fb      	ldr	r3, [r7, #28]
 80029e2:	441a      	add	r2, r3
 80029e4:	68fb      	ldr	r3, [r7, #12]
 80029e6:	611a      	str	r2, [r3, #16]
    ep->xfer_count += len;
 80029e8:	68fb      	ldr	r3, [r7, #12]
 80029ea:	6a1a      	ldr	r2, [r3, #32]
 80029ec:	69fb      	ldr	r3, [r7, #28]
 80029ee:	441a      	add	r2, r3
 80029f0:	68fb      	ldr	r3, [r7, #12]
 80029f2:	621a      	str	r2, [r3, #32]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 80029f4:	683b      	ldr	r3, [r7, #0]
 80029f6:	015a      	lsls	r2, r3, #5
 80029f8:	693b      	ldr	r3, [r7, #16]
 80029fa:	4413      	add	r3, r2
 80029fc:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8002a00:	699b      	ldr	r3, [r3, #24]
 8002a02:	b29b      	uxth	r3, r3
 8002a04:	69ba      	ldr	r2, [r7, #24]
 8002a06:	429a      	cmp	r2, r3
 8002a08:	d809      	bhi.n	8002a1e <PCD_WriteEmptyTxFifo+0xe0>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 8002a0a:	68fb      	ldr	r3, [r7, #12]
 8002a0c:	6a1a      	ldr	r2, [r3, #32]
 8002a0e:	68fb      	ldr	r3, [r7, #12]
 8002a10:	699b      	ldr	r3, [r3, #24]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 8002a12:	429a      	cmp	r2, r3
 8002a14:	d203      	bcs.n	8002a1e <PCD_WriteEmptyTxFifo+0xe0>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 8002a16:	68fb      	ldr	r3, [r7, #12]
 8002a18:	699b      	ldr	r3, [r3, #24]
 8002a1a:	2b00      	cmp	r3, #0
 8002a1c:	d1be      	bne.n	800299c <PCD_WriteEmptyTxFifo+0x5e>
  }

  if (ep->xfer_len <= ep->xfer_count)
 8002a1e:	68fb      	ldr	r3, [r7, #12]
 8002a20:	699a      	ldr	r2, [r3, #24]
 8002a22:	68fb      	ldr	r3, [r7, #12]
 8002a24:	6a1b      	ldr	r3, [r3, #32]
 8002a26:	429a      	cmp	r2, r3
 8002a28:	d811      	bhi.n	8002a4e <PCD_WriteEmptyTxFifo+0x110>
  {
    fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 8002a2a:	683b      	ldr	r3, [r7, #0]
 8002a2c:	f003 030f 	and.w	r3, r3, #15
 8002a30:	2201      	movs	r2, #1
 8002a32:	fa02 f303 	lsl.w	r3, r2, r3
 8002a36:	60bb      	str	r3, [r7, #8]
    USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 8002a38:	693b      	ldr	r3, [r7, #16]
 8002a3a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8002a3e:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8002a40:	68bb      	ldr	r3, [r7, #8]
 8002a42:	43db      	mvns	r3, r3
 8002a44:	6939      	ldr	r1, [r7, #16]
 8002a46:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8002a4a:	4013      	ands	r3, r2
 8002a4c:	634b      	str	r3, [r1, #52]	; 0x34
  }

  return HAL_OK;
 8002a4e:	2300      	movs	r3, #0
}
 8002a50:	4618      	mov	r0, r3
 8002a52:	3720      	adds	r7, #32
 8002a54:	46bd      	mov	sp, r7
 8002a56:	bd80      	pop	{r7, pc}

08002a58 <PCD_EP_OutXfrComplete_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutXfrComplete_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 8002a58:	b580      	push	{r7, lr}
 8002a5a:	b088      	sub	sp, #32
 8002a5c:	af00      	add	r7, sp, #0
 8002a5e:	6078      	str	r0, [r7, #4]
 8002a60:	6039      	str	r1, [r7, #0]
  USB_OTG_EPTypeDef *ep;
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8002a62:	687b      	ldr	r3, [r7, #4]
 8002a64:	681b      	ldr	r3, [r3, #0]
 8002a66:	61fb      	str	r3, [r7, #28]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8002a68:	69fb      	ldr	r3, [r7, #28]
 8002a6a:	61bb      	str	r3, [r7, #24]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 8002a6c:	69fb      	ldr	r3, [r7, #28]
 8002a6e:	333c      	adds	r3, #60	; 0x3c
 8002a70:	3304      	adds	r3, #4
 8002a72:	681b      	ldr	r3, [r3, #0]
 8002a74:	617b      	str	r3, [r7, #20]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 8002a76:	683b      	ldr	r3, [r7, #0]
 8002a78:	015a      	lsls	r2, r3, #5
 8002a7a:	69bb      	ldr	r3, [r7, #24]
 8002a7c:	4413      	add	r3, r2
 8002a7e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002a82:	689b      	ldr	r3, [r3, #8]
 8002a84:	613b      	str	r3, [r7, #16]

  if (hpcd->Init.dma_enable == 1U)
 8002a86:	687b      	ldr	r3, [r7, #4]
 8002a88:	691b      	ldr	r3, [r3, #16]
 8002a8a:	2b01      	cmp	r3, #1
 8002a8c:	d17b      	bne.n	8002b86 <PCD_EP_OutXfrComplete_int+0x12e>
  {
    if ((DoepintReg & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP) /* Class C */
 8002a8e:	693b      	ldr	r3, [r7, #16]
 8002a90:	f003 0308 	and.w	r3, r3, #8
 8002a94:	2b00      	cmp	r3, #0
 8002a96:	d015      	beq.n	8002ac4 <PCD_EP_OutXfrComplete_int+0x6c>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8002a98:	697b      	ldr	r3, [r7, #20]
 8002a9a:	4a61      	ldr	r2, [pc, #388]	; (8002c20 <PCD_EP_OutXfrComplete_int+0x1c8>)
 8002a9c:	4293      	cmp	r3, r2
 8002a9e:	f240 80b9 	bls.w	8002c14 <PCD_EP_OutXfrComplete_int+0x1bc>
          ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 8002aa2:	693b      	ldr	r3, [r7, #16]
 8002aa4:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8002aa8:	2b00      	cmp	r3, #0
 8002aaa:	f000 80b3 	beq.w	8002c14 <PCD_EP_OutXfrComplete_int+0x1bc>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8002aae:	683b      	ldr	r3, [r7, #0]
 8002ab0:	015a      	lsls	r2, r3, #5
 8002ab2:	69bb      	ldr	r3, [r7, #24]
 8002ab4:	4413      	add	r3, r2
 8002ab6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002aba:	461a      	mov	r2, r3
 8002abc:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8002ac0:	6093      	str	r3, [r2, #8]
 8002ac2:	e0a7      	b.n	8002c14 <PCD_EP_OutXfrComplete_int+0x1bc>
      }
    }
    else if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR) /* Class E */
 8002ac4:	693b      	ldr	r3, [r7, #16]
 8002ac6:	f003 0320 	and.w	r3, r3, #32
 8002aca:	2b00      	cmp	r3, #0
 8002acc:	d009      	beq.n	8002ae2 <PCD_EP_OutXfrComplete_int+0x8a>
    {
      CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 8002ace:	683b      	ldr	r3, [r7, #0]
 8002ad0:	015a      	lsls	r2, r3, #5
 8002ad2:	69bb      	ldr	r3, [r7, #24]
 8002ad4:	4413      	add	r3, r2
 8002ad6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002ada:	461a      	mov	r2, r3
 8002adc:	2320      	movs	r3, #32
 8002ade:	6093      	str	r3, [r2, #8]
 8002ae0:	e098      	b.n	8002c14 <PCD_EP_OutXfrComplete_int+0x1bc>
    }
    else if ((DoepintReg & (USB_OTG_DOEPINT_STUP | USB_OTG_DOEPINT_OTEPSPR)) == 0U)
 8002ae2:	693b      	ldr	r3, [r7, #16]
 8002ae4:	f003 0328 	and.w	r3, r3, #40	; 0x28
 8002ae8:	2b00      	cmp	r3, #0
 8002aea:	f040 8093 	bne.w	8002c14 <PCD_EP_OutXfrComplete_int+0x1bc>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8002aee:	697b      	ldr	r3, [r7, #20]
 8002af0:	4a4b      	ldr	r2, [pc, #300]	; (8002c20 <PCD_EP_OutXfrComplete_int+0x1c8>)
 8002af2:	4293      	cmp	r3, r2
 8002af4:	d90f      	bls.n	8002b16 <PCD_EP_OutXfrComplete_int+0xbe>
          ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 8002af6:	693b      	ldr	r3, [r7, #16]
 8002af8:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8002afc:	2b00      	cmp	r3, #0
 8002afe:	d00a      	beq.n	8002b16 <PCD_EP_OutXfrComplete_int+0xbe>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8002b00:	683b      	ldr	r3, [r7, #0]
 8002b02:	015a      	lsls	r2, r3, #5
 8002b04:	69bb      	ldr	r3, [r7, #24]
 8002b06:	4413      	add	r3, r2
 8002b08:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002b0c:	461a      	mov	r2, r3
 8002b0e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8002b12:	6093      	str	r3, [r2, #8]
 8002b14:	e07e      	b.n	8002c14 <PCD_EP_OutXfrComplete_int+0x1bc>
      }
      else
      {
        ep = &hpcd->OUT_ep[epnum];
 8002b16:	683a      	ldr	r2, [r7, #0]
 8002b18:	4613      	mov	r3, r2
 8002b1a:	00db      	lsls	r3, r3, #3
 8002b1c:	4413      	add	r3, r2
 8002b1e:	009b      	lsls	r3, r3, #2
 8002b20:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8002b24:	687a      	ldr	r2, [r7, #4]
 8002b26:	4413      	add	r3, r2
 8002b28:	3304      	adds	r3, #4
 8002b2a:	60fb      	str	r3, [r7, #12]

        /* out data packet received over EP */
        ep->xfer_count = ep->xfer_size - (USBx_OUTEP(epnum)->DOEPTSIZ & USB_OTG_DOEPTSIZ_XFRSIZ);
 8002b2c:	68fb      	ldr	r3, [r7, #12]
 8002b2e:	69da      	ldr	r2, [r3, #28]
 8002b30:	683b      	ldr	r3, [r7, #0]
 8002b32:	0159      	lsls	r1, r3, #5
 8002b34:	69bb      	ldr	r3, [r7, #24]
 8002b36:	440b      	add	r3, r1
 8002b38:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002b3c:	691b      	ldr	r3, [r3, #16]
 8002b3e:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002b42:	1ad2      	subs	r2, r2, r3
 8002b44:	68fb      	ldr	r3, [r7, #12]
 8002b46:	621a      	str	r2, [r3, #32]

        if (epnum == 0U)
 8002b48:	683b      	ldr	r3, [r7, #0]
 8002b4a:	2b00      	cmp	r3, #0
 8002b4c:	d114      	bne.n	8002b78 <PCD_EP_OutXfrComplete_int+0x120>
        {
          if (ep->xfer_len == 0U)
 8002b4e:	68fb      	ldr	r3, [r7, #12]
 8002b50:	699b      	ldr	r3, [r3, #24]
 8002b52:	2b00      	cmp	r3, #0
 8002b54:	d109      	bne.n	8002b6a <PCD_EP_OutXfrComplete_int+0x112>
          {
            /* this is ZLP, so prepare EP0 for next setup */
            (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 8002b56:	687b      	ldr	r3, [r7, #4]
 8002b58:	6818      	ldr	r0, [r3, #0]
 8002b5a:	687b      	ldr	r3, [r7, #4]
 8002b5c:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 8002b60:	461a      	mov	r2, r3
 8002b62:	2101      	movs	r1, #1
 8002b64:	f004 fe24 	bl	80077b0 <USB_EP0_OutStart>
 8002b68:	e006      	b.n	8002b78 <PCD_EP_OutXfrComplete_int+0x120>
          }
          else
          {
            ep->xfer_buff += ep->xfer_count;
 8002b6a:	68fb      	ldr	r3, [r7, #12]
 8002b6c:	691a      	ldr	r2, [r3, #16]
 8002b6e:	68fb      	ldr	r3, [r7, #12]
 8002b70:	6a1b      	ldr	r3, [r3, #32]
 8002b72:	441a      	add	r2, r3
 8002b74:	68fb      	ldr	r3, [r7, #12]
 8002b76:	611a      	str	r2, [r3, #16]
        }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 8002b78:	683b      	ldr	r3, [r7, #0]
 8002b7a:	b2db      	uxtb	r3, r3
 8002b7c:	4619      	mov	r1, r3
 8002b7e:	6878      	ldr	r0, [r7, #4]
 8002b80:	f007 f958 	bl	8009e34 <HAL_PCD_DataOutStageCallback>
 8002b84:	e046      	b.n	8002c14 <PCD_EP_OutXfrComplete_int+0x1bc>
      /* ... */
    }
  }
  else
  {
    if (gSNPSiD == USB_OTG_CORE_ID_310A)
 8002b86:	697b      	ldr	r3, [r7, #20]
 8002b88:	4a26      	ldr	r2, [pc, #152]	; (8002c24 <PCD_EP_OutXfrComplete_int+0x1cc>)
 8002b8a:	4293      	cmp	r3, r2
 8002b8c:	d124      	bne.n	8002bd8 <PCD_EP_OutXfrComplete_int+0x180>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX)
 8002b8e:	693b      	ldr	r3, [r7, #16]
 8002b90:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8002b94:	2b00      	cmp	r3, #0
 8002b96:	d00a      	beq.n	8002bae <PCD_EP_OutXfrComplete_int+0x156>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8002b98:	683b      	ldr	r3, [r7, #0]
 8002b9a:	015a      	lsls	r2, r3, #5
 8002b9c:	69bb      	ldr	r3, [r7, #24]
 8002b9e:	4413      	add	r3, r2
 8002ba0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002ba4:	461a      	mov	r2, r3
 8002ba6:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8002baa:	6093      	str	r3, [r2, #8]
 8002bac:	e032      	b.n	8002c14 <PCD_EP_OutXfrComplete_int+0x1bc>
      }
      else
      {
        if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 8002bae:	693b      	ldr	r3, [r7, #16]
 8002bb0:	f003 0320 	and.w	r3, r3, #32
 8002bb4:	2b00      	cmp	r3, #0
 8002bb6:	d008      	beq.n	8002bca <PCD_EP_OutXfrComplete_int+0x172>
        {
          CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 8002bb8:	683b      	ldr	r3, [r7, #0]
 8002bba:	015a      	lsls	r2, r3, #5
 8002bbc:	69bb      	ldr	r3, [r7, #24]
 8002bbe:	4413      	add	r3, r2
 8002bc0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002bc4:	461a      	mov	r2, r3
 8002bc6:	2320      	movs	r3, #32
 8002bc8:	6093      	str	r3, [r2, #8]
        }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 8002bca:	683b      	ldr	r3, [r7, #0]
 8002bcc:	b2db      	uxtb	r3, r3
 8002bce:	4619      	mov	r1, r3
 8002bd0:	6878      	ldr	r0, [r7, #4]
 8002bd2:	f007 f92f 	bl	8009e34 <HAL_PCD_DataOutStageCallback>
 8002bd6:	e01d      	b.n	8002c14 <PCD_EP_OutXfrComplete_int+0x1bc>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
    }
    else
    {
      if ((epnum == 0U) && (hpcd->OUT_ep[epnum].xfer_len == 0U))
 8002bd8:	683b      	ldr	r3, [r7, #0]
 8002bda:	2b00      	cmp	r3, #0
 8002bdc:	d114      	bne.n	8002c08 <PCD_EP_OutXfrComplete_int+0x1b0>
 8002bde:	6879      	ldr	r1, [r7, #4]
 8002be0:	683a      	ldr	r2, [r7, #0]
 8002be2:	4613      	mov	r3, r2
 8002be4:	00db      	lsls	r3, r3, #3
 8002be6:	4413      	add	r3, r2
 8002be8:	009b      	lsls	r3, r3, #2
 8002bea:	440b      	add	r3, r1
 8002bec:	f503 7325 	add.w	r3, r3, #660	; 0x294
 8002bf0:	681b      	ldr	r3, [r3, #0]
 8002bf2:	2b00      	cmp	r3, #0
 8002bf4:	d108      	bne.n	8002c08 <PCD_EP_OutXfrComplete_int+0x1b0>
      {
        /* this is ZLP, so prepare EP0 for next setup */
        (void)USB_EP0_OutStart(hpcd->Instance, 0U, (uint8_t *)hpcd->Setup);
 8002bf6:	687b      	ldr	r3, [r7, #4]
 8002bf8:	6818      	ldr	r0, [r3, #0]
 8002bfa:	687b      	ldr	r3, [r7, #4]
 8002bfc:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 8002c00:	461a      	mov	r2, r3
 8002c02:	2100      	movs	r1, #0
 8002c04:	f004 fdd4 	bl	80077b0 <USB_EP0_OutStart>
      }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
      HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 8002c08:	683b      	ldr	r3, [r7, #0]
 8002c0a:	b2db      	uxtb	r3, r3
 8002c0c:	4619      	mov	r1, r3
 8002c0e:	6878      	ldr	r0, [r7, #4]
 8002c10:	f007 f910 	bl	8009e34 <HAL_PCD_DataOutStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
    }
  }

  return HAL_OK;
 8002c14:	2300      	movs	r3, #0
}
 8002c16:	4618      	mov	r0, r3
 8002c18:	3720      	adds	r7, #32
 8002c1a:	46bd      	mov	sp, r7
 8002c1c:	bd80      	pop	{r7, pc}
 8002c1e:	bf00      	nop
 8002c20:	4f54300a 	.word	0x4f54300a
 8002c24:	4f54310a 	.word	0x4f54310a

08002c28 <PCD_EP_OutSetupPacket_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutSetupPacket_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 8002c28:	b580      	push	{r7, lr}
 8002c2a:	b086      	sub	sp, #24
 8002c2c:	af00      	add	r7, sp, #0
 8002c2e:	6078      	str	r0, [r7, #4]
 8002c30:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8002c32:	687b      	ldr	r3, [r7, #4]
 8002c34:	681b      	ldr	r3, [r3, #0]
 8002c36:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8002c38:	697b      	ldr	r3, [r7, #20]
 8002c3a:	613b      	str	r3, [r7, #16]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 8002c3c:	697b      	ldr	r3, [r7, #20]
 8002c3e:	333c      	adds	r3, #60	; 0x3c
 8002c40:	3304      	adds	r3, #4
 8002c42:	681b      	ldr	r3, [r3, #0]
 8002c44:	60fb      	str	r3, [r7, #12]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 8002c46:	683b      	ldr	r3, [r7, #0]
 8002c48:	015a      	lsls	r2, r3, #5
 8002c4a:	693b      	ldr	r3, [r7, #16]
 8002c4c:	4413      	add	r3, r2
 8002c4e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002c52:	689b      	ldr	r3, [r3, #8]
 8002c54:	60bb      	str	r3, [r7, #8]

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8002c56:	68fb      	ldr	r3, [r7, #12]
 8002c58:	4a15      	ldr	r2, [pc, #84]	; (8002cb0 <PCD_EP_OutSetupPacket_int+0x88>)
 8002c5a:	4293      	cmp	r3, r2
 8002c5c:	d90e      	bls.n	8002c7c <PCD_EP_OutSetupPacket_int+0x54>
      ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 8002c5e:	68bb      	ldr	r3, [r7, #8]
 8002c60:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8002c64:	2b00      	cmp	r3, #0
 8002c66:	d009      	beq.n	8002c7c <PCD_EP_OutSetupPacket_int+0x54>
  {
    CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8002c68:	683b      	ldr	r3, [r7, #0]
 8002c6a:	015a      	lsls	r2, r3, #5
 8002c6c:	693b      	ldr	r3, [r7, #16]
 8002c6e:	4413      	add	r3, r2
 8002c70:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002c74:	461a      	mov	r2, r3
 8002c76:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8002c7a:	6093      	str	r3, [r2, #8]

  /* Inform the upper layer that a setup packet is available */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
  hpcd->SetupStageCallback(hpcd);
#else
  HAL_PCD_SetupStageCallback(hpcd);
 8002c7c:	6878      	ldr	r0, [r7, #4]
 8002c7e:	f007 f8c7 	bl	8009e10 <HAL_PCD_SetupStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) && (hpcd->Init.dma_enable == 1U))
 8002c82:	68fb      	ldr	r3, [r7, #12]
 8002c84:	4a0a      	ldr	r2, [pc, #40]	; (8002cb0 <PCD_EP_OutSetupPacket_int+0x88>)
 8002c86:	4293      	cmp	r3, r2
 8002c88:	d90c      	bls.n	8002ca4 <PCD_EP_OutSetupPacket_int+0x7c>
 8002c8a:	687b      	ldr	r3, [r7, #4]
 8002c8c:	691b      	ldr	r3, [r3, #16]
 8002c8e:	2b01      	cmp	r3, #1
 8002c90:	d108      	bne.n	8002ca4 <PCD_EP_OutSetupPacket_int+0x7c>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 8002c92:	687b      	ldr	r3, [r7, #4]
 8002c94:	6818      	ldr	r0, [r3, #0]
 8002c96:	687b      	ldr	r3, [r7, #4]
 8002c98:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 8002c9c:	461a      	mov	r2, r3
 8002c9e:	2101      	movs	r1, #1
 8002ca0:	f004 fd86 	bl	80077b0 <USB_EP0_OutStart>
  }

  return HAL_OK;
 8002ca4:	2300      	movs	r3, #0
}
 8002ca6:	4618      	mov	r0, r3
 8002ca8:	3718      	adds	r7, #24
 8002caa:	46bd      	mov	sp, r7
 8002cac:	bd80      	pop	{r7, pc}
 8002cae:	bf00      	nop
 8002cb0:	4f54300a 	.word	0x4f54300a

08002cb4 <HAL_PCDEx_SetTxFiFo>:
  * @param  fifo The number of Tx fifo
  * @param  size Fifo size
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetTxFiFo(PCD_HandleTypeDef *hpcd, uint8_t fifo, uint16_t size)
{
 8002cb4:	b480      	push	{r7}
 8002cb6:	b085      	sub	sp, #20
 8002cb8:	af00      	add	r7, sp, #0
 8002cba:	6078      	str	r0, [r7, #4]
 8002cbc:	460b      	mov	r3, r1
 8002cbe:	70fb      	strb	r3, [r7, #3]
 8002cc0:	4613      	mov	r3, r2
 8002cc2:	803b      	strh	r3, [r7, #0]
         --> Txn should be configured with the minimum space of 16 words
     The FIFO is used optimally when used TxFIFOs are allocated in the top
         of the FIFO.Ex: use EP1 and EP2 as IN instead of EP1 and EP3 as IN ones.
     When DMA is used 3n * FIFO locations should be reserved for internal DMA registers */

  Tx_Offset = hpcd->Instance->GRXFSIZ;
 8002cc4:	687b      	ldr	r3, [r7, #4]
 8002cc6:	681b      	ldr	r3, [r3, #0]
 8002cc8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002cca:	60bb      	str	r3, [r7, #8]

  if (fifo == 0U)
 8002ccc:	78fb      	ldrb	r3, [r7, #3]
 8002cce:	2b00      	cmp	r3, #0
 8002cd0:	d107      	bne.n	8002ce2 <HAL_PCDEx_SetTxFiFo+0x2e>
  {
    hpcd->Instance->DIEPTXF0_HNPTXFSIZ = ((uint32_t)size << 16) | Tx_Offset;
 8002cd2:	883b      	ldrh	r3, [r7, #0]
 8002cd4:	0419      	lsls	r1, r3, #16
 8002cd6:	687b      	ldr	r3, [r7, #4]
 8002cd8:	681b      	ldr	r3, [r3, #0]
 8002cda:	68ba      	ldr	r2, [r7, #8]
 8002cdc:	430a      	orrs	r2, r1
 8002cde:	629a      	str	r2, [r3, #40]	; 0x28
 8002ce0:	e028      	b.n	8002d34 <HAL_PCDEx_SetTxFiFo+0x80>
  }
  else
  {
    Tx_Offset += (hpcd->Instance->DIEPTXF0_HNPTXFSIZ) >> 16;
 8002ce2:	687b      	ldr	r3, [r7, #4]
 8002ce4:	681b      	ldr	r3, [r3, #0]
 8002ce6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002ce8:	0c1b      	lsrs	r3, r3, #16
 8002cea:	68ba      	ldr	r2, [r7, #8]
 8002cec:	4413      	add	r3, r2
 8002cee:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 8002cf0:	2300      	movs	r3, #0
 8002cf2:	73fb      	strb	r3, [r7, #15]
 8002cf4:	e00d      	b.n	8002d12 <HAL_PCDEx_SetTxFiFo+0x5e>
    {
      Tx_Offset += (hpcd->Instance->DIEPTXF[i] >> 16);
 8002cf6:	687b      	ldr	r3, [r7, #4]
 8002cf8:	681a      	ldr	r2, [r3, #0]
 8002cfa:	7bfb      	ldrb	r3, [r7, #15]
 8002cfc:	3340      	adds	r3, #64	; 0x40
 8002cfe:	009b      	lsls	r3, r3, #2
 8002d00:	4413      	add	r3, r2
 8002d02:	685b      	ldr	r3, [r3, #4]
 8002d04:	0c1b      	lsrs	r3, r3, #16
 8002d06:	68ba      	ldr	r2, [r7, #8]
 8002d08:	4413      	add	r3, r2
 8002d0a:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 8002d0c:	7bfb      	ldrb	r3, [r7, #15]
 8002d0e:	3301      	adds	r3, #1
 8002d10:	73fb      	strb	r3, [r7, #15]
 8002d12:	7bfa      	ldrb	r2, [r7, #15]
 8002d14:	78fb      	ldrb	r3, [r7, #3]
 8002d16:	3b01      	subs	r3, #1
 8002d18:	429a      	cmp	r2, r3
 8002d1a:	d3ec      	bcc.n	8002cf6 <HAL_PCDEx_SetTxFiFo+0x42>
    }

    /* Multiply Tx_Size by 2 to get higher performance */
    hpcd->Instance->DIEPTXF[fifo - 1U] = ((uint32_t)size << 16) | Tx_Offset;
 8002d1c:	883b      	ldrh	r3, [r7, #0]
 8002d1e:	0418      	lsls	r0, r3, #16
 8002d20:	687b      	ldr	r3, [r7, #4]
 8002d22:	6819      	ldr	r1, [r3, #0]
 8002d24:	78fb      	ldrb	r3, [r7, #3]
 8002d26:	3b01      	subs	r3, #1
 8002d28:	68ba      	ldr	r2, [r7, #8]
 8002d2a:	4302      	orrs	r2, r0
 8002d2c:	3340      	adds	r3, #64	; 0x40
 8002d2e:	009b      	lsls	r3, r3, #2
 8002d30:	440b      	add	r3, r1
 8002d32:	605a      	str	r2, [r3, #4]
  }

  return HAL_OK;
 8002d34:	2300      	movs	r3, #0
}
 8002d36:	4618      	mov	r0, r3
 8002d38:	3714      	adds	r7, #20
 8002d3a:	46bd      	mov	sp, r7
 8002d3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d40:	4770      	bx	lr

08002d42 <HAL_PCDEx_SetRxFiFo>:
  * @param  hpcd PCD handle
  * @param  size Size of Rx fifo
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetRxFiFo(PCD_HandleTypeDef *hpcd, uint16_t size)
{
 8002d42:	b480      	push	{r7}
 8002d44:	b083      	sub	sp, #12
 8002d46:	af00      	add	r7, sp, #0
 8002d48:	6078      	str	r0, [r7, #4]
 8002d4a:	460b      	mov	r3, r1
 8002d4c:	807b      	strh	r3, [r7, #2]
  hpcd->Instance->GRXFSIZ = size;
 8002d4e:	687b      	ldr	r3, [r7, #4]
 8002d50:	681b      	ldr	r3, [r3, #0]
 8002d52:	887a      	ldrh	r2, [r7, #2]
 8002d54:	625a      	str	r2, [r3, #36]	; 0x24

  return HAL_OK;
 8002d56:	2300      	movs	r3, #0
}
 8002d58:	4618      	mov	r0, r3
 8002d5a:	370c      	adds	r7, #12
 8002d5c:	46bd      	mov	sp, r7
 8002d5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d62:	4770      	bx	lr

08002d64 <HAL_PCDEx_ActivateLPM>:
  * @brief  Activate LPM feature.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_ActivateLPM(PCD_HandleTypeDef *hpcd)
{
 8002d64:	b480      	push	{r7}
 8002d66:	b085      	sub	sp, #20
 8002d68:	af00      	add	r7, sp, #0
 8002d6a:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8002d6c:	687b      	ldr	r3, [r7, #4]
 8002d6e:	681b      	ldr	r3, [r3, #0]
 8002d70:	60fb      	str	r3, [r7, #12]

  hpcd->lpm_active = 1U;
 8002d72:	687b      	ldr	r3, [r7, #4]
 8002d74:	2201      	movs	r2, #1
 8002d76:	f8c3 2500 	str.w	r2, [r3, #1280]	; 0x500
  hpcd->LPM_State = LPM_L0;
 8002d7a:	687b      	ldr	r3, [r7, #4]
 8002d7c:	2200      	movs	r2, #0
 8002d7e:	f883 24f4 	strb.w	r2, [r3, #1268]	; 0x4f4
  USBx->GINTMSK |= USB_OTG_GINTMSK_LPMINTM;
 8002d82:	68fb      	ldr	r3, [r7, #12]
 8002d84:	699b      	ldr	r3, [r3, #24]
 8002d86:	f043 6200 	orr.w	r2, r3, #134217728	; 0x8000000
 8002d8a:	68fb      	ldr	r3, [r7, #12]
 8002d8c:	619a      	str	r2, [r3, #24]
  USBx->GLPMCFG |= (USB_OTG_GLPMCFG_LPMEN | USB_OTG_GLPMCFG_LPMACK | USB_OTG_GLPMCFG_ENBESL);
 8002d8e:	68fb      	ldr	r3, [r7, #12]
 8002d90:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8002d92:	4b05      	ldr	r3, [pc, #20]	; (8002da8 <HAL_PCDEx_ActivateLPM+0x44>)
 8002d94:	4313      	orrs	r3, r2
 8002d96:	68fa      	ldr	r2, [r7, #12]
 8002d98:	6553      	str	r3, [r2, #84]	; 0x54

  return HAL_OK;
 8002d9a:	2300      	movs	r3, #0
}
 8002d9c:	4618      	mov	r0, r3
 8002d9e:	3714      	adds	r7, #20
 8002da0:	46bd      	mov	sp, r7
 8002da2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002da6:	4770      	bx	lr
 8002da8:	10000003 	.word	0x10000003

08002dac <HAL_PCDEx_LPM_Callback>:
  * @param  hpcd PCD handle
  * @param  msg LPM message
  * @retval HAL status
  */
__weak void HAL_PCDEx_LPM_Callback(PCD_HandleTypeDef *hpcd, PCD_LPM_MsgTypeDef msg)
{
 8002dac:	b480      	push	{r7}
 8002dae:	b083      	sub	sp, #12
 8002db0:	af00      	add	r7, sp, #0
 8002db2:	6078      	str	r0, [r7, #4]
 8002db4:	460b      	mov	r3, r1
 8002db6:	70fb      	strb	r3, [r7, #3]
  UNUSED(msg);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_PCDEx_LPM_Callback could be implemented in the user file
   */
}
 8002db8:	bf00      	nop
 8002dba:	370c      	adds	r7, #12
 8002dbc:	46bd      	mov	sp, r7
 8002dbe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002dc2:	4770      	bx	lr

08002dc4 <HAL_PWREx_ConfigSupply>:
  *         PWR_SMPS_2V5_SUPPLIES_EXT are used only for lines that supports SMPS
  *         regulator.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_PWREx_ConfigSupply (uint32_t SupplySource)
{
 8002dc4:	b580      	push	{r7, lr}
 8002dc6:	b084      	sub	sp, #16
 8002dc8:	af00      	add	r7, sp, #0
 8002dca:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param (IS_PWR_SUPPLY (SupplySource));

  /* Check if supply source was configured */
#if defined (PWR_FLAG_SCUEN)
  if (__HAL_PWR_GET_FLAG (PWR_FLAG_SCUEN) == 0U)
 8002dcc:	4b19      	ldr	r3, [pc, #100]	; (8002e34 <HAL_PWREx_ConfigSupply+0x70>)
 8002dce:	68db      	ldr	r3, [r3, #12]
 8002dd0:	f003 0304 	and.w	r3, r3, #4
 8002dd4:	2b04      	cmp	r3, #4
 8002dd6:	d00a      	beq.n	8002dee <HAL_PWREx_ConfigSupply+0x2a>
#else
  if ((PWR->CR3 & (PWR_CR3_SMPSEN | PWR_CR3_LDOEN | PWR_CR3_BYPASS)) != (PWR_CR3_SMPSEN | PWR_CR3_LDOEN))
#endif /* defined (PWR_FLAG_SCUEN) */
  {
    /* Check supply configuration */
    if ((PWR->CR3 & PWR_SUPPLY_CONFIG_MASK) != SupplySource)
 8002dd8:	4b16      	ldr	r3, [pc, #88]	; (8002e34 <HAL_PWREx_ConfigSupply+0x70>)
 8002dda:	68db      	ldr	r3, [r3, #12]
 8002ddc:	f003 0307 	and.w	r3, r3, #7
 8002de0:	687a      	ldr	r2, [r7, #4]
 8002de2:	429a      	cmp	r2, r3
 8002de4:	d001      	beq.n	8002dea <HAL_PWREx_ConfigSupply+0x26>
    {
      /* Supply configuration update locked, can't apply a new supply config */
      return HAL_ERROR;
 8002de6:	2301      	movs	r3, #1
 8002de8:	e01f      	b.n	8002e2a <HAL_PWREx_ConfigSupply+0x66>
    else
    {
      /* Supply configuration update locked, but new supply configuration
         matches with old supply configuration : nothing to do
      */
      return HAL_OK;
 8002dea:	2300      	movs	r3, #0
 8002dec:	e01d      	b.n	8002e2a <HAL_PWREx_ConfigSupply+0x66>
    }
  }

  /* Set the power supply configuration */
  MODIFY_REG (PWR->CR3, PWR_SUPPLY_CONFIG_MASK, SupplySource);
 8002dee:	4b11      	ldr	r3, [pc, #68]	; (8002e34 <HAL_PWREx_ConfigSupply+0x70>)
 8002df0:	68db      	ldr	r3, [r3, #12]
 8002df2:	f023 0207 	bic.w	r2, r3, #7
 8002df6:	490f      	ldr	r1, [pc, #60]	; (8002e34 <HAL_PWREx_ConfigSupply+0x70>)
 8002df8:	687b      	ldr	r3, [r7, #4]
 8002dfa:	4313      	orrs	r3, r2
 8002dfc:	60cb      	str	r3, [r1, #12]

  /* Get tick */
  tickstart = HAL_GetTick ();
 8002dfe:	f7fd ff97 	bl	8000d30 <HAL_GetTick>
 8002e02:	60f8      	str	r0, [r7, #12]

  /* Wait till voltage level flag is set */
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 8002e04:	e009      	b.n	8002e1a <HAL_PWREx_ConfigSupply+0x56>
  {
    if ((HAL_GetTick () - tickstart) > PWR_FLAG_SETTING_DELAY)
 8002e06:	f7fd ff93 	bl	8000d30 <HAL_GetTick>
 8002e0a:	4602      	mov	r2, r0
 8002e0c:	68fb      	ldr	r3, [r7, #12]
 8002e0e:	1ad3      	subs	r3, r2, r3
 8002e10:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8002e14:	d901      	bls.n	8002e1a <HAL_PWREx_ConfigSupply+0x56>
    {
      return HAL_ERROR;
 8002e16:	2301      	movs	r3, #1
 8002e18:	e007      	b.n	8002e2a <HAL_PWREx_ConfigSupply+0x66>
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 8002e1a:	4b06      	ldr	r3, [pc, #24]	; (8002e34 <HAL_PWREx_ConfigSupply+0x70>)
 8002e1c:	685b      	ldr	r3, [r3, #4]
 8002e1e:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8002e22:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8002e26:	d1ee      	bne.n	8002e06 <HAL_PWREx_ConfigSupply+0x42>
      }
    }
  }
#endif /* defined (SMPS) */

  return HAL_OK;
 8002e28:	2300      	movs	r3, #0
}
 8002e2a:	4618      	mov	r0, r3
 8002e2c:	3710      	adds	r7, #16
 8002e2e:	46bd      	mov	sp, r7
 8002e30:	bd80      	pop	{r7, pc}
 8002e32:	bf00      	nop
 8002e34:	58024800 	.word	0x58024800

08002e38 <HAL_PWREx_EnableUSBVoltageDetector>:
/**
  * @brief Enable the USB voltage level detector.
  * @retval None.
  */
void HAL_PWREx_EnableUSBVoltageDetector (void)
{
 8002e38:	b480      	push	{r7}
 8002e3a:	af00      	add	r7, sp, #0
  /* Enable the USB voltage detector */
  SET_BIT (PWR->CR3, PWR_CR3_USB33DEN);
 8002e3c:	4b05      	ldr	r3, [pc, #20]	; (8002e54 <HAL_PWREx_EnableUSBVoltageDetector+0x1c>)
 8002e3e:	68db      	ldr	r3, [r3, #12]
 8002e40:	4a04      	ldr	r2, [pc, #16]	; (8002e54 <HAL_PWREx_EnableUSBVoltageDetector+0x1c>)
 8002e42:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8002e46:	60d3      	str	r3, [r2, #12]
}
 8002e48:	bf00      	nop
 8002e4a:	46bd      	mov	sp, r7
 8002e4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e50:	4770      	bx	lr
 8002e52:	bf00      	nop
 8002e54:	58024800 	.word	0x58024800

08002e58 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002e58:	b580      	push	{r7, lr}
 8002e5a:	b08c      	sub	sp, #48	; 0x30
 8002e5c:	af00      	add	r7, sp, #0
 8002e5e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp1_pllckcfg, temp2_pllckcfg;

    /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8002e60:	687b      	ldr	r3, [r7, #4]
 8002e62:	2b00      	cmp	r3, #0
 8002e64:	d102      	bne.n	8002e6c <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 8002e66:	2301      	movs	r3, #1
 8002e68:	f000 bc1d 	b.w	80036a6 <HAL_RCC_OscConfig+0x84e>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002e6c:	687b      	ldr	r3, [r7, #4]
 8002e6e:	681b      	ldr	r3, [r3, #0]
 8002e70:	f003 0301 	and.w	r3, r3, #1
 8002e74:	2b00      	cmp	r3, #0
 8002e76:	f000 8087 	beq.w	8002f88 <HAL_RCC_OscConfig+0x130>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8002e7a:	4b99      	ldr	r3, [pc, #612]	; (80030e0 <HAL_RCC_OscConfig+0x288>)
 8002e7c:	691b      	ldr	r3, [r3, #16]
 8002e7e:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8002e82:	62fb      	str	r3, [r7, #44]	; 0x2c
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8002e84:	4b96      	ldr	r3, [pc, #600]	; (80030e0 <HAL_RCC_OscConfig+0x288>)
 8002e86:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002e88:	62bb      	str	r3, [r7, #40]	; 0x28
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((temp_sysclksrc == RCC_CFGR_SWS_HSE) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSE)))
 8002e8a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002e8c:	2b10      	cmp	r3, #16
 8002e8e:	d007      	beq.n	8002ea0 <HAL_RCC_OscConfig+0x48>
 8002e90:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002e92:	2b18      	cmp	r3, #24
 8002e94:	d110      	bne.n	8002eb8 <HAL_RCC_OscConfig+0x60>
 8002e96:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002e98:	f003 0303 	and.w	r3, r3, #3
 8002e9c:	2b02      	cmp	r3, #2
 8002e9e:	d10b      	bne.n	8002eb8 <HAL_RCC_OscConfig+0x60>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002ea0:	4b8f      	ldr	r3, [pc, #572]	; (80030e0 <HAL_RCC_OscConfig+0x288>)
 8002ea2:	681b      	ldr	r3, [r3, #0]
 8002ea4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002ea8:	2b00      	cmp	r3, #0
 8002eaa:	d06c      	beq.n	8002f86 <HAL_RCC_OscConfig+0x12e>
 8002eac:	687b      	ldr	r3, [r7, #4]
 8002eae:	685b      	ldr	r3, [r3, #4]
 8002eb0:	2b00      	cmp	r3, #0
 8002eb2:	d168      	bne.n	8002f86 <HAL_RCC_OscConfig+0x12e>
      {
        return HAL_ERROR;
 8002eb4:	2301      	movs	r3, #1
 8002eb6:	e3f6      	b.n	80036a6 <HAL_RCC_OscConfig+0x84e>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002eb8:	687b      	ldr	r3, [r7, #4]
 8002eba:	685b      	ldr	r3, [r3, #4]
 8002ebc:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002ec0:	d106      	bne.n	8002ed0 <HAL_RCC_OscConfig+0x78>
 8002ec2:	4b87      	ldr	r3, [pc, #540]	; (80030e0 <HAL_RCC_OscConfig+0x288>)
 8002ec4:	681b      	ldr	r3, [r3, #0]
 8002ec6:	4a86      	ldr	r2, [pc, #536]	; (80030e0 <HAL_RCC_OscConfig+0x288>)
 8002ec8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002ecc:	6013      	str	r3, [r2, #0]
 8002ece:	e02e      	b.n	8002f2e <HAL_RCC_OscConfig+0xd6>
 8002ed0:	687b      	ldr	r3, [r7, #4]
 8002ed2:	685b      	ldr	r3, [r3, #4]
 8002ed4:	2b00      	cmp	r3, #0
 8002ed6:	d10c      	bne.n	8002ef2 <HAL_RCC_OscConfig+0x9a>
 8002ed8:	4b81      	ldr	r3, [pc, #516]	; (80030e0 <HAL_RCC_OscConfig+0x288>)
 8002eda:	681b      	ldr	r3, [r3, #0]
 8002edc:	4a80      	ldr	r2, [pc, #512]	; (80030e0 <HAL_RCC_OscConfig+0x288>)
 8002ede:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002ee2:	6013      	str	r3, [r2, #0]
 8002ee4:	4b7e      	ldr	r3, [pc, #504]	; (80030e0 <HAL_RCC_OscConfig+0x288>)
 8002ee6:	681b      	ldr	r3, [r3, #0]
 8002ee8:	4a7d      	ldr	r2, [pc, #500]	; (80030e0 <HAL_RCC_OscConfig+0x288>)
 8002eea:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002eee:	6013      	str	r3, [r2, #0]
 8002ef0:	e01d      	b.n	8002f2e <HAL_RCC_OscConfig+0xd6>
 8002ef2:	687b      	ldr	r3, [r7, #4]
 8002ef4:	685b      	ldr	r3, [r3, #4]
 8002ef6:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8002efa:	d10c      	bne.n	8002f16 <HAL_RCC_OscConfig+0xbe>
 8002efc:	4b78      	ldr	r3, [pc, #480]	; (80030e0 <HAL_RCC_OscConfig+0x288>)
 8002efe:	681b      	ldr	r3, [r3, #0]
 8002f00:	4a77      	ldr	r2, [pc, #476]	; (80030e0 <HAL_RCC_OscConfig+0x288>)
 8002f02:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002f06:	6013      	str	r3, [r2, #0]
 8002f08:	4b75      	ldr	r3, [pc, #468]	; (80030e0 <HAL_RCC_OscConfig+0x288>)
 8002f0a:	681b      	ldr	r3, [r3, #0]
 8002f0c:	4a74      	ldr	r2, [pc, #464]	; (80030e0 <HAL_RCC_OscConfig+0x288>)
 8002f0e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002f12:	6013      	str	r3, [r2, #0]
 8002f14:	e00b      	b.n	8002f2e <HAL_RCC_OscConfig+0xd6>
 8002f16:	4b72      	ldr	r3, [pc, #456]	; (80030e0 <HAL_RCC_OscConfig+0x288>)
 8002f18:	681b      	ldr	r3, [r3, #0]
 8002f1a:	4a71      	ldr	r2, [pc, #452]	; (80030e0 <HAL_RCC_OscConfig+0x288>)
 8002f1c:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002f20:	6013      	str	r3, [r2, #0]
 8002f22:	4b6f      	ldr	r3, [pc, #444]	; (80030e0 <HAL_RCC_OscConfig+0x288>)
 8002f24:	681b      	ldr	r3, [r3, #0]
 8002f26:	4a6e      	ldr	r2, [pc, #440]	; (80030e0 <HAL_RCC_OscConfig+0x288>)
 8002f28:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002f2c:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8002f2e:	687b      	ldr	r3, [r7, #4]
 8002f30:	685b      	ldr	r3, [r3, #4]
 8002f32:	2b00      	cmp	r3, #0
 8002f34:	d013      	beq.n	8002f5e <HAL_RCC_OscConfig+0x106>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002f36:	f7fd fefb 	bl	8000d30 <HAL_GetTick>
 8002f3a:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8002f3c:	e008      	b.n	8002f50 <HAL_RCC_OscConfig+0xf8>
        {
          if((uint32_t) (HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8002f3e:	f7fd fef7 	bl	8000d30 <HAL_GetTick>
 8002f42:	4602      	mov	r2, r0
 8002f44:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002f46:	1ad3      	subs	r3, r2, r3
 8002f48:	2b64      	cmp	r3, #100	; 0x64
 8002f4a:	d901      	bls.n	8002f50 <HAL_RCC_OscConfig+0xf8>
          {
            return HAL_TIMEOUT;
 8002f4c:	2303      	movs	r3, #3
 8002f4e:	e3aa      	b.n	80036a6 <HAL_RCC_OscConfig+0x84e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8002f50:	4b63      	ldr	r3, [pc, #396]	; (80030e0 <HAL_RCC_OscConfig+0x288>)
 8002f52:	681b      	ldr	r3, [r3, #0]
 8002f54:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002f58:	2b00      	cmp	r3, #0
 8002f5a:	d0f0      	beq.n	8002f3e <HAL_RCC_OscConfig+0xe6>
 8002f5c:	e014      	b.n	8002f88 <HAL_RCC_OscConfig+0x130>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002f5e:	f7fd fee7 	bl	8000d30 <HAL_GetTick>
 8002f62:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 8002f64:	e008      	b.n	8002f78 <HAL_RCC_OscConfig+0x120>
        {
          if((uint32_t) (HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8002f66:	f7fd fee3 	bl	8000d30 <HAL_GetTick>
 8002f6a:	4602      	mov	r2, r0
 8002f6c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002f6e:	1ad3      	subs	r3, r2, r3
 8002f70:	2b64      	cmp	r3, #100	; 0x64
 8002f72:	d901      	bls.n	8002f78 <HAL_RCC_OscConfig+0x120>
          {
            return HAL_TIMEOUT;
 8002f74:	2303      	movs	r3, #3
 8002f76:	e396      	b.n	80036a6 <HAL_RCC_OscConfig+0x84e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 8002f78:	4b59      	ldr	r3, [pc, #356]	; (80030e0 <HAL_RCC_OscConfig+0x288>)
 8002f7a:	681b      	ldr	r3, [r3, #0]
 8002f7c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002f80:	2b00      	cmp	r3, #0
 8002f82:	d1f0      	bne.n	8002f66 <HAL_RCC_OscConfig+0x10e>
 8002f84:	e000      	b.n	8002f88 <HAL_RCC_OscConfig+0x130>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002f86:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002f88:	687b      	ldr	r3, [r7, #4]
 8002f8a:	681b      	ldr	r3, [r3, #0]
 8002f8c:	f003 0302 	and.w	r3, r3, #2
 8002f90:	2b00      	cmp	r3, #0
 8002f92:	f000 80cb 	beq.w	800312c <HAL_RCC_OscConfig+0x2d4>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSICALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* When the HSI is used as system clock it will not be disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8002f96:	4b52      	ldr	r3, [pc, #328]	; (80030e0 <HAL_RCC_OscConfig+0x288>)
 8002f98:	691b      	ldr	r3, [r3, #16]
 8002f9a:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8002f9e:	623b      	str	r3, [r7, #32]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8002fa0:	4b4f      	ldr	r3, [pc, #316]	; (80030e0 <HAL_RCC_OscConfig+0x288>)
 8002fa2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002fa4:	61fb      	str	r3, [r7, #28]
    if((temp_sysclksrc == RCC_CFGR_SWS_HSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSI)))
 8002fa6:	6a3b      	ldr	r3, [r7, #32]
 8002fa8:	2b00      	cmp	r3, #0
 8002faa:	d007      	beq.n	8002fbc <HAL_RCC_OscConfig+0x164>
 8002fac:	6a3b      	ldr	r3, [r7, #32]
 8002fae:	2b18      	cmp	r3, #24
 8002fb0:	d156      	bne.n	8003060 <HAL_RCC_OscConfig+0x208>
 8002fb2:	69fb      	ldr	r3, [r7, #28]
 8002fb4:	f003 0303 	and.w	r3, r3, #3
 8002fb8:	2b00      	cmp	r3, #0
 8002fba:	d151      	bne.n	8003060 <HAL_RCC_OscConfig+0x208>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8002fbc:	4b48      	ldr	r3, [pc, #288]	; (80030e0 <HAL_RCC_OscConfig+0x288>)
 8002fbe:	681b      	ldr	r3, [r3, #0]
 8002fc0:	f003 0304 	and.w	r3, r3, #4
 8002fc4:	2b00      	cmp	r3, #0
 8002fc6:	d005      	beq.n	8002fd4 <HAL_RCC_OscConfig+0x17c>
 8002fc8:	687b      	ldr	r3, [r7, #4]
 8002fca:	68db      	ldr	r3, [r3, #12]
 8002fcc:	2b00      	cmp	r3, #0
 8002fce:	d101      	bne.n	8002fd4 <HAL_RCC_OscConfig+0x17c>
      {
        return HAL_ERROR;
 8002fd0:	2301      	movs	r3, #1
 8002fd2:	e368      	b.n	80036a6 <HAL_RCC_OscConfig+0x84e>
      }
      /* Otherwise, only HSI division and calibration are allowed */
      else
      {
          /* Enable the Internal High Speed oscillator (HSI, HSIDIV2, HSIDIV4, or HSIDIV8) */
          __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 8002fd4:	4b42      	ldr	r3, [pc, #264]	; (80030e0 <HAL_RCC_OscConfig+0x288>)
 8002fd6:	681b      	ldr	r3, [r3, #0]
 8002fd8:	f023 0219 	bic.w	r2, r3, #25
 8002fdc:	687b      	ldr	r3, [r7, #4]
 8002fde:	68db      	ldr	r3, [r3, #12]
 8002fe0:	493f      	ldr	r1, [pc, #252]	; (80030e0 <HAL_RCC_OscConfig+0x288>)
 8002fe2:	4313      	orrs	r3, r2
 8002fe4:	600b      	str	r3, [r1, #0]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8002fe6:	f7fd fea3 	bl	8000d30 <HAL_GetTick>
 8002fea:	6278      	str	r0, [r7, #36]	; 0x24

          /* Wait till HSI is ready */
          while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8002fec:	e008      	b.n	8003000 <HAL_RCC_OscConfig+0x1a8>
          {
            if((uint32_t) (HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8002fee:	f7fd fe9f 	bl	8000d30 <HAL_GetTick>
 8002ff2:	4602      	mov	r2, r0
 8002ff4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002ff6:	1ad3      	subs	r3, r2, r3
 8002ff8:	2b02      	cmp	r3, #2
 8002ffa:	d901      	bls.n	8003000 <HAL_RCC_OscConfig+0x1a8>
            {
              return HAL_TIMEOUT;
 8002ffc:	2303      	movs	r3, #3
 8002ffe:	e352      	b.n	80036a6 <HAL_RCC_OscConfig+0x84e>
          while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8003000:	4b37      	ldr	r3, [pc, #220]	; (80030e0 <HAL_RCC_OscConfig+0x288>)
 8003002:	681b      	ldr	r3, [r3, #0]
 8003004:	f003 0304 	and.w	r3, r3, #4
 8003008:	2b00      	cmp	r3, #0
 800300a:	d0f0      	beq.n	8002fee <HAL_RCC_OscConfig+0x196>
            }
          }
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800300c:	f7fd fec0 	bl	8000d90 <HAL_GetREVID>
 8003010:	4603      	mov	r3, r0
 8003012:	f241 0203 	movw	r2, #4099	; 0x1003
 8003016:	4293      	cmp	r3, r2
 8003018:	d817      	bhi.n	800304a <HAL_RCC_OscConfig+0x1f2>
 800301a:	687b      	ldr	r3, [r7, #4]
 800301c:	691b      	ldr	r3, [r3, #16]
 800301e:	2b40      	cmp	r3, #64	; 0x40
 8003020:	d108      	bne.n	8003034 <HAL_RCC_OscConfig+0x1dc>
 8003022:	4b2f      	ldr	r3, [pc, #188]	; (80030e0 <HAL_RCC_OscConfig+0x288>)
 8003024:	685b      	ldr	r3, [r3, #4]
 8003026:	f423 337c 	bic.w	r3, r3, #258048	; 0x3f000
 800302a:	4a2d      	ldr	r2, [pc, #180]	; (80030e0 <HAL_RCC_OscConfig+0x288>)
 800302c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8003030:	6053      	str	r3, [r2, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8003032:	e07b      	b.n	800312c <HAL_RCC_OscConfig+0x2d4>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003034:	4b2a      	ldr	r3, [pc, #168]	; (80030e0 <HAL_RCC_OscConfig+0x288>)
 8003036:	685b      	ldr	r3, [r3, #4]
 8003038:	f423 327c 	bic.w	r2, r3, #258048	; 0x3f000
 800303c:	687b      	ldr	r3, [r7, #4]
 800303e:	691b      	ldr	r3, [r3, #16]
 8003040:	031b      	lsls	r3, r3, #12
 8003042:	4927      	ldr	r1, [pc, #156]	; (80030e0 <HAL_RCC_OscConfig+0x288>)
 8003044:	4313      	orrs	r3, r2
 8003046:	604b      	str	r3, [r1, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8003048:	e070      	b.n	800312c <HAL_RCC_OscConfig+0x2d4>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800304a:	4b25      	ldr	r3, [pc, #148]	; (80030e0 <HAL_RCC_OscConfig+0x288>)
 800304c:	685b      	ldr	r3, [r3, #4]
 800304e:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8003052:	687b      	ldr	r3, [r7, #4]
 8003054:	691b      	ldr	r3, [r3, #16]
 8003056:	061b      	lsls	r3, r3, #24
 8003058:	4921      	ldr	r1, [pc, #132]	; (80030e0 <HAL_RCC_OscConfig+0x288>)
 800305a:	4313      	orrs	r3, r2
 800305c:	604b      	str	r3, [r1, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 800305e:	e065      	b.n	800312c <HAL_RCC_OscConfig+0x2d4>
    }

    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8003060:	687b      	ldr	r3, [r7, #4]
 8003062:	68db      	ldr	r3, [r3, #12]
 8003064:	2b00      	cmp	r3, #0
 8003066:	d048      	beq.n	80030fa <HAL_RCC_OscConfig+0x2a2>
      {
     /* Enable the Internal High Speed oscillator (HSI, HSIDIV2,HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 8003068:	4b1d      	ldr	r3, [pc, #116]	; (80030e0 <HAL_RCC_OscConfig+0x288>)
 800306a:	681b      	ldr	r3, [r3, #0]
 800306c:	f023 0219 	bic.w	r2, r3, #25
 8003070:	687b      	ldr	r3, [r7, #4]
 8003072:	68db      	ldr	r3, [r3, #12]
 8003074:	491a      	ldr	r1, [pc, #104]	; (80030e0 <HAL_RCC_OscConfig+0x288>)
 8003076:	4313      	orrs	r3, r2
 8003078:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800307a:	f7fd fe59 	bl	8000d30 <HAL_GetTick>
 800307e:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8003080:	e008      	b.n	8003094 <HAL_RCC_OscConfig+0x23c>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8003082:	f7fd fe55 	bl	8000d30 <HAL_GetTick>
 8003086:	4602      	mov	r2, r0
 8003088:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800308a:	1ad3      	subs	r3, r2, r3
 800308c:	2b02      	cmp	r3, #2
 800308e:	d901      	bls.n	8003094 <HAL_RCC_OscConfig+0x23c>
          {
            return HAL_TIMEOUT;
 8003090:	2303      	movs	r3, #3
 8003092:	e308      	b.n	80036a6 <HAL_RCC_OscConfig+0x84e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8003094:	4b12      	ldr	r3, [pc, #72]	; (80030e0 <HAL_RCC_OscConfig+0x288>)
 8003096:	681b      	ldr	r3, [r3, #0]
 8003098:	f003 0304 	and.w	r3, r3, #4
 800309c:	2b00      	cmp	r3, #0
 800309e:	d0f0      	beq.n	8003082 <HAL_RCC_OscConfig+0x22a>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80030a0:	f7fd fe76 	bl	8000d90 <HAL_GetREVID>
 80030a4:	4603      	mov	r3, r0
 80030a6:	f241 0203 	movw	r2, #4099	; 0x1003
 80030aa:	4293      	cmp	r3, r2
 80030ac:	d81a      	bhi.n	80030e4 <HAL_RCC_OscConfig+0x28c>
 80030ae:	687b      	ldr	r3, [r7, #4]
 80030b0:	691b      	ldr	r3, [r3, #16]
 80030b2:	2b40      	cmp	r3, #64	; 0x40
 80030b4:	d108      	bne.n	80030c8 <HAL_RCC_OscConfig+0x270>
 80030b6:	4b0a      	ldr	r3, [pc, #40]	; (80030e0 <HAL_RCC_OscConfig+0x288>)
 80030b8:	685b      	ldr	r3, [r3, #4]
 80030ba:	f423 337c 	bic.w	r3, r3, #258048	; 0x3f000
 80030be:	4a08      	ldr	r2, [pc, #32]	; (80030e0 <HAL_RCC_OscConfig+0x288>)
 80030c0:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80030c4:	6053      	str	r3, [r2, #4]
 80030c6:	e031      	b.n	800312c <HAL_RCC_OscConfig+0x2d4>
 80030c8:	4b05      	ldr	r3, [pc, #20]	; (80030e0 <HAL_RCC_OscConfig+0x288>)
 80030ca:	685b      	ldr	r3, [r3, #4]
 80030cc:	f423 327c 	bic.w	r2, r3, #258048	; 0x3f000
 80030d0:	687b      	ldr	r3, [r7, #4]
 80030d2:	691b      	ldr	r3, [r3, #16]
 80030d4:	031b      	lsls	r3, r3, #12
 80030d6:	4902      	ldr	r1, [pc, #8]	; (80030e0 <HAL_RCC_OscConfig+0x288>)
 80030d8:	4313      	orrs	r3, r2
 80030da:	604b      	str	r3, [r1, #4]
 80030dc:	e026      	b.n	800312c <HAL_RCC_OscConfig+0x2d4>
 80030de:	bf00      	nop
 80030e0:	58024400 	.word	0x58024400
 80030e4:	4b9a      	ldr	r3, [pc, #616]	; (8003350 <HAL_RCC_OscConfig+0x4f8>)
 80030e6:	685b      	ldr	r3, [r3, #4]
 80030e8:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 80030ec:	687b      	ldr	r3, [r7, #4]
 80030ee:	691b      	ldr	r3, [r3, #16]
 80030f0:	061b      	lsls	r3, r3, #24
 80030f2:	4997      	ldr	r1, [pc, #604]	; (8003350 <HAL_RCC_OscConfig+0x4f8>)
 80030f4:	4313      	orrs	r3, r2
 80030f6:	604b      	str	r3, [r1, #4]
 80030f8:	e018      	b.n	800312c <HAL_RCC_OscConfig+0x2d4>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80030fa:	4b95      	ldr	r3, [pc, #596]	; (8003350 <HAL_RCC_OscConfig+0x4f8>)
 80030fc:	681b      	ldr	r3, [r3, #0]
 80030fe:	4a94      	ldr	r2, [pc, #592]	; (8003350 <HAL_RCC_OscConfig+0x4f8>)
 8003100:	f023 0301 	bic.w	r3, r3, #1
 8003104:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003106:	f7fd fe13 	bl	8000d30 <HAL_GetTick>
 800310a:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 800310c:	e008      	b.n	8003120 <HAL_RCC_OscConfig+0x2c8>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800310e:	f7fd fe0f 	bl	8000d30 <HAL_GetTick>
 8003112:	4602      	mov	r2, r0
 8003114:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003116:	1ad3      	subs	r3, r2, r3
 8003118:	2b02      	cmp	r3, #2
 800311a:	d901      	bls.n	8003120 <HAL_RCC_OscConfig+0x2c8>
          {
            return HAL_TIMEOUT;
 800311c:	2303      	movs	r3, #3
 800311e:	e2c2      	b.n	80036a6 <HAL_RCC_OscConfig+0x84e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8003120:	4b8b      	ldr	r3, [pc, #556]	; (8003350 <HAL_RCC_OscConfig+0x4f8>)
 8003122:	681b      	ldr	r3, [r3, #0]
 8003124:	f003 0304 	and.w	r3, r3, #4
 8003128:	2b00      	cmp	r3, #0
 800312a:	d1f0      	bne.n	800310e <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }
  }
  /*----------------------------- CSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_CSI) == RCC_OSCILLATORTYPE_CSI)
 800312c:	687b      	ldr	r3, [r7, #4]
 800312e:	681b      	ldr	r3, [r3, #0]
 8003130:	f003 0310 	and.w	r3, r3, #16
 8003134:	2b00      	cmp	r3, #0
 8003136:	f000 80a9 	beq.w	800328c <HAL_RCC_OscConfig+0x434>
    /* Check the parameters */
    assert_param(IS_RCC_CSI(RCC_OscInitStruct->CSIState));
    assert_param(IS_RCC_CSICALIBRATION_VALUE(RCC_OscInitStruct->CSICalibrationValue));

    /* When the CSI is used as system clock it will not disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 800313a:	4b85      	ldr	r3, [pc, #532]	; (8003350 <HAL_RCC_OscConfig+0x4f8>)
 800313c:	691b      	ldr	r3, [r3, #16]
 800313e:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8003142:	61bb      	str	r3, [r7, #24]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8003144:	4b82      	ldr	r3, [pc, #520]	; (8003350 <HAL_RCC_OscConfig+0x4f8>)
 8003146:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003148:	617b      	str	r3, [r7, #20]
    if((temp_sysclksrc == RCC_CFGR_SWS_CSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_CSI)))
 800314a:	69bb      	ldr	r3, [r7, #24]
 800314c:	2b08      	cmp	r3, #8
 800314e:	d007      	beq.n	8003160 <HAL_RCC_OscConfig+0x308>
 8003150:	69bb      	ldr	r3, [r7, #24]
 8003152:	2b18      	cmp	r3, #24
 8003154:	d13a      	bne.n	80031cc <HAL_RCC_OscConfig+0x374>
 8003156:	697b      	ldr	r3, [r7, #20]
 8003158:	f003 0303 	and.w	r3, r3, #3
 800315c:	2b01      	cmp	r3, #1
 800315e:	d135      	bne.n	80031cc <HAL_RCC_OscConfig+0x374>
    {
      /* When CSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8003160:	4b7b      	ldr	r3, [pc, #492]	; (8003350 <HAL_RCC_OscConfig+0x4f8>)
 8003162:	681b      	ldr	r3, [r3, #0]
 8003164:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003168:	2b00      	cmp	r3, #0
 800316a:	d005      	beq.n	8003178 <HAL_RCC_OscConfig+0x320>
 800316c:	687b      	ldr	r3, [r7, #4]
 800316e:	69db      	ldr	r3, [r3, #28]
 8003170:	2b80      	cmp	r3, #128	; 0x80
 8003172:	d001      	beq.n	8003178 <HAL_RCC_OscConfig+0x320>
      {
        return HAL_ERROR;
 8003174:	2301      	movs	r3, #1
 8003176:	e296      	b.n	80036a6 <HAL_RCC_OscConfig+0x84e>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8003178:	f7fd fe0a 	bl	8000d90 <HAL_GetREVID>
 800317c:	4603      	mov	r3, r0
 800317e:	f241 0203 	movw	r2, #4099	; 0x1003
 8003182:	4293      	cmp	r3, r2
 8003184:	d817      	bhi.n	80031b6 <HAL_RCC_OscConfig+0x35e>
 8003186:	687b      	ldr	r3, [r7, #4]
 8003188:	6a1b      	ldr	r3, [r3, #32]
 800318a:	2b20      	cmp	r3, #32
 800318c:	d108      	bne.n	80031a0 <HAL_RCC_OscConfig+0x348>
 800318e:	4b70      	ldr	r3, [pc, #448]	; (8003350 <HAL_RCC_OscConfig+0x4f8>)
 8003190:	685b      	ldr	r3, [r3, #4]
 8003192:	f023 43f8 	bic.w	r3, r3, #2080374784	; 0x7c000000
 8003196:	4a6e      	ldr	r2, [pc, #440]	; (8003350 <HAL_RCC_OscConfig+0x4f8>)
 8003198:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 800319c:	6053      	str	r3, [r2, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 800319e:	e075      	b.n	800328c <HAL_RCC_OscConfig+0x434>
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 80031a0:	4b6b      	ldr	r3, [pc, #428]	; (8003350 <HAL_RCC_OscConfig+0x4f8>)
 80031a2:	685b      	ldr	r3, [r3, #4]
 80031a4:	f023 42f8 	bic.w	r2, r3, #2080374784	; 0x7c000000
 80031a8:	687b      	ldr	r3, [r7, #4]
 80031aa:	6a1b      	ldr	r3, [r3, #32]
 80031ac:	069b      	lsls	r3, r3, #26
 80031ae:	4968      	ldr	r1, [pc, #416]	; (8003350 <HAL_RCC_OscConfig+0x4f8>)
 80031b0:	4313      	orrs	r3, r2
 80031b2:	604b      	str	r3, [r1, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 80031b4:	e06a      	b.n	800328c <HAL_RCC_OscConfig+0x434>
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 80031b6:	4b66      	ldr	r3, [pc, #408]	; (8003350 <HAL_RCC_OscConfig+0x4f8>)
 80031b8:	68db      	ldr	r3, [r3, #12]
 80031ba:	f023 527c 	bic.w	r2, r3, #1056964608	; 0x3f000000
 80031be:	687b      	ldr	r3, [r7, #4]
 80031c0:	6a1b      	ldr	r3, [r3, #32]
 80031c2:	061b      	lsls	r3, r3, #24
 80031c4:	4962      	ldr	r1, [pc, #392]	; (8003350 <HAL_RCC_OscConfig+0x4f8>)
 80031c6:	4313      	orrs	r3, r2
 80031c8:	60cb      	str	r3, [r1, #12]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 80031ca:	e05f      	b.n	800328c <HAL_RCC_OscConfig+0x434>
      }
    }
    else
    {
      /* Check the CSI State */
      if((RCC_OscInitStruct->CSIState)!= RCC_CSI_OFF)
 80031cc:	687b      	ldr	r3, [r7, #4]
 80031ce:	69db      	ldr	r3, [r3, #28]
 80031d0:	2b00      	cmp	r3, #0
 80031d2:	d042      	beq.n	800325a <HAL_RCC_OscConfig+0x402>
      {
        /* Enable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_ENABLE();
 80031d4:	4b5e      	ldr	r3, [pc, #376]	; (8003350 <HAL_RCC_OscConfig+0x4f8>)
 80031d6:	681b      	ldr	r3, [r3, #0]
 80031d8:	4a5d      	ldr	r2, [pc, #372]	; (8003350 <HAL_RCC_OscConfig+0x4f8>)
 80031da:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80031de:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80031e0:	f7fd fda6 	bl	8000d30 <HAL_GetTick>
 80031e4:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till CSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 80031e6:	e008      	b.n	80031fa <HAL_RCC_OscConfig+0x3a2>
        {
          if((HAL_GetTick() - tickstart ) > CSI_TIMEOUT_VALUE)
 80031e8:	f7fd fda2 	bl	8000d30 <HAL_GetTick>
 80031ec:	4602      	mov	r2, r0
 80031ee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80031f0:	1ad3      	subs	r3, r2, r3
 80031f2:	2b02      	cmp	r3, #2
 80031f4:	d901      	bls.n	80031fa <HAL_RCC_OscConfig+0x3a2>
          {
            return HAL_TIMEOUT;
 80031f6:	2303      	movs	r3, #3
 80031f8:	e255      	b.n	80036a6 <HAL_RCC_OscConfig+0x84e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 80031fa:	4b55      	ldr	r3, [pc, #340]	; (8003350 <HAL_RCC_OscConfig+0x4f8>)
 80031fc:	681b      	ldr	r3, [r3, #0]
 80031fe:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003202:	2b00      	cmp	r3, #0
 8003204:	d0f0      	beq.n	80031e8 <HAL_RCC_OscConfig+0x390>
          }
        }

        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8003206:	f7fd fdc3 	bl	8000d90 <HAL_GetREVID>
 800320a:	4603      	mov	r3, r0
 800320c:	f241 0203 	movw	r2, #4099	; 0x1003
 8003210:	4293      	cmp	r3, r2
 8003212:	d817      	bhi.n	8003244 <HAL_RCC_OscConfig+0x3ec>
 8003214:	687b      	ldr	r3, [r7, #4]
 8003216:	6a1b      	ldr	r3, [r3, #32]
 8003218:	2b20      	cmp	r3, #32
 800321a:	d108      	bne.n	800322e <HAL_RCC_OscConfig+0x3d6>
 800321c:	4b4c      	ldr	r3, [pc, #304]	; (8003350 <HAL_RCC_OscConfig+0x4f8>)
 800321e:	685b      	ldr	r3, [r3, #4]
 8003220:	f023 43f8 	bic.w	r3, r3, #2080374784	; 0x7c000000
 8003224:	4a4a      	ldr	r2, [pc, #296]	; (8003350 <HAL_RCC_OscConfig+0x4f8>)
 8003226:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 800322a:	6053      	str	r3, [r2, #4]
 800322c:	e02e      	b.n	800328c <HAL_RCC_OscConfig+0x434>
 800322e:	4b48      	ldr	r3, [pc, #288]	; (8003350 <HAL_RCC_OscConfig+0x4f8>)
 8003230:	685b      	ldr	r3, [r3, #4]
 8003232:	f023 42f8 	bic.w	r2, r3, #2080374784	; 0x7c000000
 8003236:	687b      	ldr	r3, [r7, #4]
 8003238:	6a1b      	ldr	r3, [r3, #32]
 800323a:	069b      	lsls	r3, r3, #26
 800323c:	4944      	ldr	r1, [pc, #272]	; (8003350 <HAL_RCC_OscConfig+0x4f8>)
 800323e:	4313      	orrs	r3, r2
 8003240:	604b      	str	r3, [r1, #4]
 8003242:	e023      	b.n	800328c <HAL_RCC_OscConfig+0x434>
 8003244:	4b42      	ldr	r3, [pc, #264]	; (8003350 <HAL_RCC_OscConfig+0x4f8>)
 8003246:	68db      	ldr	r3, [r3, #12]
 8003248:	f023 527c 	bic.w	r2, r3, #1056964608	; 0x3f000000
 800324c:	687b      	ldr	r3, [r7, #4]
 800324e:	6a1b      	ldr	r3, [r3, #32]
 8003250:	061b      	lsls	r3, r3, #24
 8003252:	493f      	ldr	r1, [pc, #252]	; (8003350 <HAL_RCC_OscConfig+0x4f8>)
 8003254:	4313      	orrs	r3, r2
 8003256:	60cb      	str	r3, [r1, #12]
 8003258:	e018      	b.n	800328c <HAL_RCC_OscConfig+0x434>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_DISABLE();
 800325a:	4b3d      	ldr	r3, [pc, #244]	; (8003350 <HAL_RCC_OscConfig+0x4f8>)
 800325c:	681b      	ldr	r3, [r3, #0]
 800325e:	4a3c      	ldr	r2, [pc, #240]	; (8003350 <HAL_RCC_OscConfig+0x4f8>)
 8003260:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8003264:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003266:	f7fd fd63 	bl	8000d30 <HAL_GetTick>
 800326a:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till CSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 800326c:	e008      	b.n	8003280 <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > CSI_TIMEOUT_VALUE)
 800326e:	f7fd fd5f 	bl	8000d30 <HAL_GetTick>
 8003272:	4602      	mov	r2, r0
 8003274:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003276:	1ad3      	subs	r3, r2, r3
 8003278:	2b02      	cmp	r3, #2
 800327a:	d901      	bls.n	8003280 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 800327c:	2303      	movs	r3, #3
 800327e:	e212      	b.n	80036a6 <HAL_RCC_OscConfig+0x84e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 8003280:	4b33      	ldr	r3, [pc, #204]	; (8003350 <HAL_RCC_OscConfig+0x4f8>)
 8003282:	681b      	ldr	r3, [r3, #0]
 8003284:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003288:	2b00      	cmp	r3, #0
 800328a:	d1f0      	bne.n	800326e <HAL_RCC_OscConfig+0x416>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800328c:	687b      	ldr	r3, [r7, #4]
 800328e:	681b      	ldr	r3, [r3, #0]
 8003290:	f003 0308 	and.w	r3, r3, #8
 8003294:	2b00      	cmp	r3, #0
 8003296:	d036      	beq.n	8003306 <HAL_RCC_OscConfig+0x4ae>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8003298:	687b      	ldr	r3, [r7, #4]
 800329a:	695b      	ldr	r3, [r3, #20]
 800329c:	2b00      	cmp	r3, #0
 800329e:	d019      	beq.n	80032d4 <HAL_RCC_OscConfig+0x47c>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80032a0:	4b2b      	ldr	r3, [pc, #172]	; (8003350 <HAL_RCC_OscConfig+0x4f8>)
 80032a2:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80032a4:	4a2a      	ldr	r2, [pc, #168]	; (8003350 <HAL_RCC_OscConfig+0x4f8>)
 80032a6:	f043 0301 	orr.w	r3, r3, #1
 80032aa:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80032ac:	f7fd fd40 	bl	8000d30 <HAL_GetTick>
 80032b0:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 80032b2:	e008      	b.n	80032c6 <HAL_RCC_OscConfig+0x46e>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80032b4:	f7fd fd3c 	bl	8000d30 <HAL_GetTick>
 80032b8:	4602      	mov	r2, r0
 80032ba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80032bc:	1ad3      	subs	r3, r2, r3
 80032be:	2b02      	cmp	r3, #2
 80032c0:	d901      	bls.n	80032c6 <HAL_RCC_OscConfig+0x46e>
        {
          return HAL_TIMEOUT;
 80032c2:	2303      	movs	r3, #3
 80032c4:	e1ef      	b.n	80036a6 <HAL_RCC_OscConfig+0x84e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 80032c6:	4b22      	ldr	r3, [pc, #136]	; (8003350 <HAL_RCC_OscConfig+0x4f8>)
 80032c8:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80032ca:	f003 0302 	and.w	r3, r3, #2
 80032ce:	2b00      	cmp	r3, #0
 80032d0:	d0f0      	beq.n	80032b4 <HAL_RCC_OscConfig+0x45c>
 80032d2:	e018      	b.n	8003306 <HAL_RCC_OscConfig+0x4ae>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80032d4:	4b1e      	ldr	r3, [pc, #120]	; (8003350 <HAL_RCC_OscConfig+0x4f8>)
 80032d6:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80032d8:	4a1d      	ldr	r2, [pc, #116]	; (8003350 <HAL_RCC_OscConfig+0x4f8>)
 80032da:	f023 0301 	bic.w	r3, r3, #1
 80032de:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80032e0:	f7fd fd26 	bl	8000d30 <HAL_GetTick>
 80032e4:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 80032e6:	e008      	b.n	80032fa <HAL_RCC_OscConfig+0x4a2>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80032e8:	f7fd fd22 	bl	8000d30 <HAL_GetTick>
 80032ec:	4602      	mov	r2, r0
 80032ee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80032f0:	1ad3      	subs	r3, r2, r3
 80032f2:	2b02      	cmp	r3, #2
 80032f4:	d901      	bls.n	80032fa <HAL_RCC_OscConfig+0x4a2>
        {
          return HAL_TIMEOUT;
 80032f6:	2303      	movs	r3, #3
 80032f8:	e1d5      	b.n	80036a6 <HAL_RCC_OscConfig+0x84e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 80032fa:	4b15      	ldr	r3, [pc, #84]	; (8003350 <HAL_RCC_OscConfig+0x4f8>)
 80032fc:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80032fe:	f003 0302 	and.w	r3, r3, #2
 8003302:	2b00      	cmp	r3, #0
 8003304:	d1f0      	bne.n	80032e8 <HAL_RCC_OscConfig+0x490>
      }
    }
  }

  /*------------------------------ HSI48 Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8003306:	687b      	ldr	r3, [r7, #4]
 8003308:	681b      	ldr	r3, [r3, #0]
 800330a:	f003 0320 	and.w	r3, r3, #32
 800330e:	2b00      	cmp	r3, #0
 8003310:	d039      	beq.n	8003386 <HAL_RCC_OscConfig+0x52e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if((RCC_OscInitStruct->HSI48State)!= RCC_HSI48_OFF)
 8003312:	687b      	ldr	r3, [r7, #4]
 8003314:	699b      	ldr	r3, [r3, #24]
 8003316:	2b00      	cmp	r3, #0
 8003318:	d01c      	beq.n	8003354 <HAL_RCC_OscConfig+0x4fc>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 800331a:	4b0d      	ldr	r3, [pc, #52]	; (8003350 <HAL_RCC_OscConfig+0x4f8>)
 800331c:	681b      	ldr	r3, [r3, #0]
 800331e:	4a0c      	ldr	r2, [pc, #48]	; (8003350 <HAL_RCC_OscConfig+0x4f8>)
 8003320:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8003324:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 8003326:	f7fd fd03 	bl	8000d30 <HAL_GetTick>
 800332a:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till HSI48 is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 800332c:	e008      	b.n	8003340 <HAL_RCC_OscConfig+0x4e8>
      {
        if((HAL_GetTick() - tickstart ) > HSI48_TIMEOUT_VALUE)
 800332e:	f7fd fcff 	bl	8000d30 <HAL_GetTick>
 8003332:	4602      	mov	r2, r0
 8003334:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003336:	1ad3      	subs	r3, r2, r3
 8003338:	2b02      	cmp	r3, #2
 800333a:	d901      	bls.n	8003340 <HAL_RCC_OscConfig+0x4e8>
        {
          return HAL_TIMEOUT;
 800333c:	2303      	movs	r3, #3
 800333e:	e1b2      	b.n	80036a6 <HAL_RCC_OscConfig+0x84e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 8003340:	4b03      	ldr	r3, [pc, #12]	; (8003350 <HAL_RCC_OscConfig+0x4f8>)
 8003342:	681b      	ldr	r3, [r3, #0]
 8003344:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8003348:	2b00      	cmp	r3, #0
 800334a:	d0f0      	beq.n	800332e <HAL_RCC_OscConfig+0x4d6>
 800334c:	e01b      	b.n	8003386 <HAL_RCC_OscConfig+0x52e>
 800334e:	bf00      	nop
 8003350:	58024400 	.word	0x58024400
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 8003354:	4b9b      	ldr	r3, [pc, #620]	; (80035c4 <HAL_RCC_OscConfig+0x76c>)
 8003356:	681b      	ldr	r3, [r3, #0]
 8003358:	4a9a      	ldr	r2, [pc, #616]	; (80035c4 <HAL_RCC_OscConfig+0x76c>)
 800335a:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800335e:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 8003360:	f7fd fce6 	bl	8000d30 <HAL_GetTick>
 8003364:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till HSI48 is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 8003366:	e008      	b.n	800337a <HAL_RCC_OscConfig+0x522>
      {
        if((HAL_GetTick() - tickstart ) > HSI48_TIMEOUT_VALUE)
 8003368:	f7fd fce2 	bl	8000d30 <HAL_GetTick>
 800336c:	4602      	mov	r2, r0
 800336e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003370:	1ad3      	subs	r3, r2, r3
 8003372:	2b02      	cmp	r3, #2
 8003374:	d901      	bls.n	800337a <HAL_RCC_OscConfig+0x522>
        {
          return HAL_TIMEOUT;
 8003376:	2303      	movs	r3, #3
 8003378:	e195      	b.n	80036a6 <HAL_RCC_OscConfig+0x84e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 800337a:	4b92      	ldr	r3, [pc, #584]	; (80035c4 <HAL_RCC_OscConfig+0x76c>)
 800337c:	681b      	ldr	r3, [r3, #0]
 800337e:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8003382:	2b00      	cmp	r3, #0
 8003384:	d1f0      	bne.n	8003368 <HAL_RCC_OscConfig+0x510>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8003386:	687b      	ldr	r3, [r7, #4]
 8003388:	681b      	ldr	r3, [r3, #0]
 800338a:	f003 0304 	and.w	r3, r3, #4
 800338e:	2b00      	cmp	r3, #0
 8003390:	f000 8081 	beq.w	8003496 <HAL_RCC_OscConfig+0x63e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 8003394:	4b8c      	ldr	r3, [pc, #560]	; (80035c8 <HAL_RCC_OscConfig+0x770>)
 8003396:	681b      	ldr	r3, [r3, #0]
 8003398:	4a8b      	ldr	r2, [pc, #556]	; (80035c8 <HAL_RCC_OscConfig+0x770>)
 800339a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800339e:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 80033a0:	f7fd fcc6 	bl	8000d30 <HAL_GetTick>
 80033a4:	6278      	str	r0, [r7, #36]	; 0x24

    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 80033a6:	e008      	b.n	80033ba <HAL_RCC_OscConfig+0x562>
    {
      if((HAL_GetTick() - tickstart ) > RCC_DBP_TIMEOUT_VALUE)
 80033a8:	f7fd fcc2 	bl	8000d30 <HAL_GetTick>
 80033ac:	4602      	mov	r2, r0
 80033ae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80033b0:	1ad3      	subs	r3, r2, r3
 80033b2:	2b64      	cmp	r3, #100	; 0x64
 80033b4:	d901      	bls.n	80033ba <HAL_RCC_OscConfig+0x562>
      {
        return HAL_TIMEOUT;
 80033b6:	2303      	movs	r3, #3
 80033b8:	e175      	b.n	80036a6 <HAL_RCC_OscConfig+0x84e>
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 80033ba:	4b83      	ldr	r3, [pc, #524]	; (80035c8 <HAL_RCC_OscConfig+0x770>)
 80033bc:	681b      	ldr	r3, [r3, #0]
 80033be:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80033c2:	2b00      	cmp	r3, #0
 80033c4:	d0f0      	beq.n	80033a8 <HAL_RCC_OscConfig+0x550>
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80033c6:	687b      	ldr	r3, [r7, #4]
 80033c8:	689b      	ldr	r3, [r3, #8]
 80033ca:	2b01      	cmp	r3, #1
 80033cc:	d106      	bne.n	80033dc <HAL_RCC_OscConfig+0x584>
 80033ce:	4b7d      	ldr	r3, [pc, #500]	; (80035c4 <HAL_RCC_OscConfig+0x76c>)
 80033d0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80033d2:	4a7c      	ldr	r2, [pc, #496]	; (80035c4 <HAL_RCC_OscConfig+0x76c>)
 80033d4:	f043 0301 	orr.w	r3, r3, #1
 80033d8:	6713      	str	r3, [r2, #112]	; 0x70
 80033da:	e02d      	b.n	8003438 <HAL_RCC_OscConfig+0x5e0>
 80033dc:	687b      	ldr	r3, [r7, #4]
 80033de:	689b      	ldr	r3, [r3, #8]
 80033e0:	2b00      	cmp	r3, #0
 80033e2:	d10c      	bne.n	80033fe <HAL_RCC_OscConfig+0x5a6>
 80033e4:	4b77      	ldr	r3, [pc, #476]	; (80035c4 <HAL_RCC_OscConfig+0x76c>)
 80033e6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80033e8:	4a76      	ldr	r2, [pc, #472]	; (80035c4 <HAL_RCC_OscConfig+0x76c>)
 80033ea:	f023 0301 	bic.w	r3, r3, #1
 80033ee:	6713      	str	r3, [r2, #112]	; 0x70
 80033f0:	4b74      	ldr	r3, [pc, #464]	; (80035c4 <HAL_RCC_OscConfig+0x76c>)
 80033f2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80033f4:	4a73      	ldr	r2, [pc, #460]	; (80035c4 <HAL_RCC_OscConfig+0x76c>)
 80033f6:	f023 0304 	bic.w	r3, r3, #4
 80033fa:	6713      	str	r3, [r2, #112]	; 0x70
 80033fc:	e01c      	b.n	8003438 <HAL_RCC_OscConfig+0x5e0>
 80033fe:	687b      	ldr	r3, [r7, #4]
 8003400:	689b      	ldr	r3, [r3, #8]
 8003402:	2b05      	cmp	r3, #5
 8003404:	d10c      	bne.n	8003420 <HAL_RCC_OscConfig+0x5c8>
 8003406:	4b6f      	ldr	r3, [pc, #444]	; (80035c4 <HAL_RCC_OscConfig+0x76c>)
 8003408:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800340a:	4a6e      	ldr	r2, [pc, #440]	; (80035c4 <HAL_RCC_OscConfig+0x76c>)
 800340c:	f043 0304 	orr.w	r3, r3, #4
 8003410:	6713      	str	r3, [r2, #112]	; 0x70
 8003412:	4b6c      	ldr	r3, [pc, #432]	; (80035c4 <HAL_RCC_OscConfig+0x76c>)
 8003414:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003416:	4a6b      	ldr	r2, [pc, #428]	; (80035c4 <HAL_RCC_OscConfig+0x76c>)
 8003418:	f043 0301 	orr.w	r3, r3, #1
 800341c:	6713      	str	r3, [r2, #112]	; 0x70
 800341e:	e00b      	b.n	8003438 <HAL_RCC_OscConfig+0x5e0>
 8003420:	4b68      	ldr	r3, [pc, #416]	; (80035c4 <HAL_RCC_OscConfig+0x76c>)
 8003422:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003424:	4a67      	ldr	r2, [pc, #412]	; (80035c4 <HAL_RCC_OscConfig+0x76c>)
 8003426:	f023 0301 	bic.w	r3, r3, #1
 800342a:	6713      	str	r3, [r2, #112]	; 0x70
 800342c:	4b65      	ldr	r3, [pc, #404]	; (80035c4 <HAL_RCC_OscConfig+0x76c>)
 800342e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003430:	4a64      	ldr	r2, [pc, #400]	; (80035c4 <HAL_RCC_OscConfig+0x76c>)
 8003432:	f023 0304 	bic.w	r3, r3, #4
 8003436:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8003438:	687b      	ldr	r3, [r7, #4]
 800343a:	689b      	ldr	r3, [r3, #8]
 800343c:	2b00      	cmp	r3, #0
 800343e:	d015      	beq.n	800346c <HAL_RCC_OscConfig+0x614>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003440:	f7fd fc76 	bl	8000d30 <HAL_GetTick>
 8003444:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8003446:	e00a      	b.n	800345e <HAL_RCC_OscConfig+0x606>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8003448:	f7fd fc72 	bl	8000d30 <HAL_GetTick>
 800344c:	4602      	mov	r2, r0
 800344e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003450:	1ad3      	subs	r3, r2, r3
 8003452:	f241 3288 	movw	r2, #5000	; 0x1388
 8003456:	4293      	cmp	r3, r2
 8003458:	d901      	bls.n	800345e <HAL_RCC_OscConfig+0x606>
        {
          return HAL_TIMEOUT;
 800345a:	2303      	movs	r3, #3
 800345c:	e123      	b.n	80036a6 <HAL_RCC_OscConfig+0x84e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 800345e:	4b59      	ldr	r3, [pc, #356]	; (80035c4 <HAL_RCC_OscConfig+0x76c>)
 8003460:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003462:	f003 0302 	and.w	r3, r3, #2
 8003466:	2b00      	cmp	r3, #0
 8003468:	d0ee      	beq.n	8003448 <HAL_RCC_OscConfig+0x5f0>
 800346a:	e014      	b.n	8003496 <HAL_RCC_OscConfig+0x63e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800346c:	f7fd fc60 	bl	8000d30 <HAL_GetTick>
 8003470:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSE is disabled */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8003472:	e00a      	b.n	800348a <HAL_RCC_OscConfig+0x632>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8003474:	f7fd fc5c 	bl	8000d30 <HAL_GetTick>
 8003478:	4602      	mov	r2, r0
 800347a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800347c:	1ad3      	subs	r3, r2, r3
 800347e:	f241 3288 	movw	r2, #5000	; 0x1388
 8003482:	4293      	cmp	r3, r2
 8003484:	d901      	bls.n	800348a <HAL_RCC_OscConfig+0x632>
        {
          return HAL_TIMEOUT;
 8003486:	2303      	movs	r3, #3
 8003488:	e10d      	b.n	80036a6 <HAL_RCC_OscConfig+0x84e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 800348a:	4b4e      	ldr	r3, [pc, #312]	; (80035c4 <HAL_RCC_OscConfig+0x76c>)
 800348c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800348e:	f003 0302 	and.w	r3, r3, #2
 8003492:	2b00      	cmp	r3, #0
 8003494:	d1ee      	bne.n	8003474 <HAL_RCC_OscConfig+0x61c>
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8003496:	687b      	ldr	r3, [r7, #4]
 8003498:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800349a:	2b00      	cmp	r3, #0
 800349c:	f000 8102 	beq.w	80036a4 <HAL_RCC_OscConfig+0x84c>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL1)
 80034a0:	4b48      	ldr	r3, [pc, #288]	; (80035c4 <HAL_RCC_OscConfig+0x76c>)
 80034a2:	691b      	ldr	r3, [r3, #16]
 80034a4:	f003 0338 	and.w	r3, r3, #56	; 0x38
 80034a8:	2b18      	cmp	r3, #24
 80034aa:	f000 80bd 	beq.w	8003628 <HAL_RCC_OscConfig+0x7d0>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80034ae:	687b      	ldr	r3, [r7, #4]
 80034b0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80034b2:	2b02      	cmp	r3, #2
 80034b4:	f040 809e 	bne.w	80035f4 <HAL_RCC_OscConfig+0x79c>
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
        assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80034b8:	4b42      	ldr	r3, [pc, #264]	; (80035c4 <HAL_RCC_OscConfig+0x76c>)
 80034ba:	681b      	ldr	r3, [r3, #0]
 80034bc:	4a41      	ldr	r2, [pc, #260]	; (80035c4 <HAL_RCC_OscConfig+0x76c>)
 80034be:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80034c2:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80034c4:	f7fd fc34 	bl	8000d30 <HAL_GetTick>
 80034c8:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 80034ca:	e008      	b.n	80034de <HAL_RCC_OscConfig+0x686>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80034cc:	f7fd fc30 	bl	8000d30 <HAL_GetTick>
 80034d0:	4602      	mov	r2, r0
 80034d2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80034d4:	1ad3      	subs	r3, r2, r3
 80034d6:	2b02      	cmp	r3, #2
 80034d8:	d901      	bls.n	80034de <HAL_RCC_OscConfig+0x686>
          {
            return HAL_TIMEOUT;
 80034da:	2303      	movs	r3, #3
 80034dc:	e0e3      	b.n	80036a6 <HAL_RCC_OscConfig+0x84e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 80034de:	4b39      	ldr	r3, [pc, #228]	; (80035c4 <HAL_RCC_OscConfig+0x76c>)
 80034e0:	681b      	ldr	r3, [r3, #0]
 80034e2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80034e6:	2b00      	cmp	r3, #0
 80034e8:	d1f0      	bne.n	80034cc <HAL_RCC_OscConfig+0x674>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80034ea:	4b36      	ldr	r3, [pc, #216]	; (80035c4 <HAL_RCC_OscConfig+0x76c>)
 80034ec:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80034ee:	4b37      	ldr	r3, [pc, #220]	; (80035cc <HAL_RCC_OscConfig+0x774>)
 80034f0:	4013      	ands	r3, r2
 80034f2:	687a      	ldr	r2, [r7, #4]
 80034f4:	6a91      	ldr	r1, [r2, #40]	; 0x28
 80034f6:	687a      	ldr	r2, [r7, #4]
 80034f8:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 80034fa:	0112      	lsls	r2, r2, #4
 80034fc:	430a      	orrs	r2, r1
 80034fe:	4931      	ldr	r1, [pc, #196]	; (80035c4 <HAL_RCC_OscConfig+0x76c>)
 8003500:	4313      	orrs	r3, r2
 8003502:	628b      	str	r3, [r1, #40]	; 0x28
 8003504:	687b      	ldr	r3, [r7, #4]
 8003506:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003508:	3b01      	subs	r3, #1
 800350a:	f3c3 0208 	ubfx	r2, r3, #0, #9
 800350e:	687b      	ldr	r3, [r7, #4]
 8003510:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003512:	3b01      	subs	r3, #1
 8003514:	025b      	lsls	r3, r3, #9
 8003516:	b29b      	uxth	r3, r3
 8003518:	431a      	orrs	r2, r3
 800351a:	687b      	ldr	r3, [r7, #4]
 800351c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800351e:	3b01      	subs	r3, #1
 8003520:	041b      	lsls	r3, r3, #16
 8003522:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 8003526:	431a      	orrs	r2, r3
 8003528:	687b      	ldr	r3, [r7, #4]
 800352a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800352c:	3b01      	subs	r3, #1
 800352e:	061b      	lsls	r3, r3, #24
 8003530:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 8003534:	4923      	ldr	r1, [pc, #140]	; (80035c4 <HAL_RCC_OscConfig+0x76c>)
 8003536:	4313      	orrs	r3, r2
 8003538:	630b      	str	r3, [r1, #48]	; 0x30
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

         /* Disable PLLFRACN . */
         __HAL_RCC_PLLFRACN_DISABLE();
 800353a:	4b22      	ldr	r3, [pc, #136]	; (80035c4 <HAL_RCC_OscConfig+0x76c>)
 800353c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800353e:	4a21      	ldr	r2, [pc, #132]	; (80035c4 <HAL_RCC_OscConfig+0x76c>)
 8003540:	f023 0301 	bic.w	r3, r3, #1
 8003544:	62d3      	str	r3, [r2, #44]	; 0x2c

         /* Configure PLL PLL1FRACN */
         __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 8003546:	4b1f      	ldr	r3, [pc, #124]	; (80035c4 <HAL_RCC_OscConfig+0x76c>)
 8003548:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800354a:	4b21      	ldr	r3, [pc, #132]	; (80035d0 <HAL_RCC_OscConfig+0x778>)
 800354c:	4013      	ands	r3, r2
 800354e:	687a      	ldr	r2, [r7, #4]
 8003550:	6c92      	ldr	r2, [r2, #72]	; 0x48
 8003552:	00d2      	lsls	r2, r2, #3
 8003554:	491b      	ldr	r1, [pc, #108]	; (80035c4 <HAL_RCC_OscConfig+0x76c>)
 8003556:	4313      	orrs	r3, r2
 8003558:	634b      	str	r3, [r1, #52]	; 0x34

        /* Select PLL1 input reference frequency range: VCI */
        __HAL_RCC_PLL_VCIRANGE(RCC_OscInitStruct->PLL.PLLRGE) ;
 800355a:	4b1a      	ldr	r3, [pc, #104]	; (80035c4 <HAL_RCC_OscConfig+0x76c>)
 800355c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800355e:	f023 020c 	bic.w	r2, r3, #12
 8003562:	687b      	ldr	r3, [r7, #4]
 8003564:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003566:	4917      	ldr	r1, [pc, #92]	; (80035c4 <HAL_RCC_OscConfig+0x76c>)
 8003568:	4313      	orrs	r3, r2
 800356a:	62cb      	str	r3, [r1, #44]	; 0x2c

        /* Select PLL1 output frequency range : VCO */
        __HAL_RCC_PLL_VCORANGE(RCC_OscInitStruct->PLL.PLLVCOSEL) ;
 800356c:	4b15      	ldr	r3, [pc, #84]	; (80035c4 <HAL_RCC_OscConfig+0x76c>)
 800356e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003570:	f023 0202 	bic.w	r2, r3, #2
 8003574:	687b      	ldr	r3, [r7, #4]
 8003576:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003578:	4912      	ldr	r1, [pc, #72]	; (80035c4 <HAL_RCC_OscConfig+0x76c>)
 800357a:	4313      	orrs	r3, r2
 800357c:	62cb      	str	r3, [r1, #44]	; 0x2c

        /* Enable PLL System Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVP);
 800357e:	4b11      	ldr	r3, [pc, #68]	; (80035c4 <HAL_RCC_OscConfig+0x76c>)
 8003580:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003582:	4a10      	ldr	r2, [pc, #64]	; (80035c4 <HAL_RCC_OscConfig+0x76c>)
 8003584:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003588:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1Q Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800358a:	4b0e      	ldr	r3, [pc, #56]	; (80035c4 <HAL_RCC_OscConfig+0x76c>)
 800358c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800358e:	4a0d      	ldr	r2, [pc, #52]	; (80035c4 <HAL_RCC_OscConfig+0x76c>)
 8003590:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8003594:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1R  Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVR);
 8003596:	4b0b      	ldr	r3, [pc, #44]	; (80035c4 <HAL_RCC_OscConfig+0x76c>)
 8003598:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800359a:	4a0a      	ldr	r2, [pc, #40]	; (80035c4 <HAL_RCC_OscConfig+0x76c>)
 800359c:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80035a0:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1FRACN . */
         __HAL_RCC_PLLFRACN_ENABLE();
 80035a2:	4b08      	ldr	r3, [pc, #32]	; (80035c4 <HAL_RCC_OscConfig+0x76c>)
 80035a4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80035a6:	4a07      	ldr	r2, [pc, #28]	; (80035c4 <HAL_RCC_OscConfig+0x76c>)
 80035a8:	f043 0301 	orr.w	r3, r3, #1
 80035ac:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80035ae:	4b05      	ldr	r3, [pc, #20]	; (80035c4 <HAL_RCC_OscConfig+0x76c>)
 80035b0:	681b      	ldr	r3, [r3, #0]
 80035b2:	4a04      	ldr	r2, [pc, #16]	; (80035c4 <HAL_RCC_OscConfig+0x76c>)
 80035b4:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80035b8:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80035ba:	f7fd fbb9 	bl	8000d30 <HAL_GetTick>
 80035be:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 80035c0:	e011      	b.n	80035e6 <HAL_RCC_OscConfig+0x78e>
 80035c2:	bf00      	nop
 80035c4:	58024400 	.word	0x58024400
 80035c8:	58024800 	.word	0x58024800
 80035cc:	fffffc0c 	.word	0xfffffc0c
 80035d0:	ffff0007 	.word	0xffff0007
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80035d4:	f7fd fbac 	bl	8000d30 <HAL_GetTick>
 80035d8:	4602      	mov	r2, r0
 80035da:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80035dc:	1ad3      	subs	r3, r2, r3
 80035de:	2b02      	cmp	r3, #2
 80035e0:	d901      	bls.n	80035e6 <HAL_RCC_OscConfig+0x78e>
          {
            return HAL_TIMEOUT;
 80035e2:	2303      	movs	r3, #3
 80035e4:	e05f      	b.n	80036a6 <HAL_RCC_OscConfig+0x84e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 80035e6:	4b32      	ldr	r3, [pc, #200]	; (80036b0 <HAL_RCC_OscConfig+0x858>)
 80035e8:	681b      	ldr	r3, [r3, #0]
 80035ea:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80035ee:	2b00      	cmp	r3, #0
 80035f0:	d0f0      	beq.n	80035d4 <HAL_RCC_OscConfig+0x77c>
 80035f2:	e057      	b.n	80036a4 <HAL_RCC_OscConfig+0x84c>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80035f4:	4b2e      	ldr	r3, [pc, #184]	; (80036b0 <HAL_RCC_OscConfig+0x858>)
 80035f6:	681b      	ldr	r3, [r3, #0]
 80035f8:	4a2d      	ldr	r2, [pc, #180]	; (80036b0 <HAL_RCC_OscConfig+0x858>)
 80035fa:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80035fe:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003600:	f7fd fb96 	bl	8000d30 <HAL_GetTick>
 8003604:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8003606:	e008      	b.n	800361a <HAL_RCC_OscConfig+0x7c2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003608:	f7fd fb92 	bl	8000d30 <HAL_GetTick>
 800360c:	4602      	mov	r2, r0
 800360e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003610:	1ad3      	subs	r3, r2, r3
 8003612:	2b02      	cmp	r3, #2
 8003614:	d901      	bls.n	800361a <HAL_RCC_OscConfig+0x7c2>
          {
            return HAL_TIMEOUT;
 8003616:	2303      	movs	r3, #3
 8003618:	e045      	b.n	80036a6 <HAL_RCC_OscConfig+0x84e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 800361a:	4b25      	ldr	r3, [pc, #148]	; (80036b0 <HAL_RCC_OscConfig+0x858>)
 800361c:	681b      	ldr	r3, [r3, #0]
 800361e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003622:	2b00      	cmp	r3, #0
 8003624:	d1f0      	bne.n	8003608 <HAL_RCC_OscConfig+0x7b0>
 8003626:	e03d      	b.n	80036a4 <HAL_RCC_OscConfig+0x84c>
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp1_pllckcfg = RCC->PLLCKSELR;
 8003628:	4b21      	ldr	r3, [pc, #132]	; (80036b0 <HAL_RCC_OscConfig+0x858>)
 800362a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800362c:	613b      	str	r3, [r7, #16]
      temp2_pllckcfg = RCC->PLL1DIVR;
 800362e:	4b20      	ldr	r3, [pc, #128]	; (80036b0 <HAL_RCC_OscConfig+0x858>)
 8003630:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003632:	60fb      	str	r3, [r7, #12]
      if(((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8003634:	687b      	ldr	r3, [r7, #4]
 8003636:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003638:	2b01      	cmp	r3, #1
 800363a:	d031      	beq.n	80036a0 <HAL_RCC_OscConfig+0x848>
	 (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800363c:	693b      	ldr	r3, [r7, #16]
 800363e:	f003 0203 	and.w	r2, r3, #3
 8003642:	687b      	ldr	r3, [r7, #4]
 8003644:	6a9b      	ldr	r3, [r3, #40]	; 0x28
      if(((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8003646:	429a      	cmp	r2, r3
 8003648:	d12a      	bne.n	80036a0 <HAL_RCC_OscConfig+0x848>
         ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 800364a:	693b      	ldr	r3, [r7, #16]
 800364c:	091b      	lsrs	r3, r3, #4
 800364e:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8003652:	687b      	ldr	r3, [r7, #4]
 8003654:	6adb      	ldr	r3, [r3, #44]	; 0x2c
	 (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003656:	429a      	cmp	r2, r3
 8003658:	d122      	bne.n	80036a0 <HAL_RCC_OscConfig+0x848>
         (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 800365a:	68fb      	ldr	r3, [r7, #12]
 800365c:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8003660:	687b      	ldr	r3, [r7, #4]
 8003662:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003664:	3b01      	subs	r3, #1
         ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 8003666:	429a      	cmp	r2, r3
 8003668:	d11a      	bne.n	80036a0 <HAL_RCC_OscConfig+0x848>
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 800366a:	68fb      	ldr	r3, [r7, #12]
 800366c:	0a5b      	lsrs	r3, r3, #9
 800366e:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8003672:	687b      	ldr	r3, [r7, #4]
 8003674:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003676:	3b01      	subs	r3, #1
         (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 8003678:	429a      	cmp	r2, r3
 800367a:	d111      	bne.n	80036a0 <HAL_RCC_OscConfig+0x848>
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 800367c:	68fb      	ldr	r3, [r7, #12]
 800367e:	0c1b      	lsrs	r3, r3, #16
 8003680:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8003684:	687b      	ldr	r3, [r7, #4]
 8003686:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003688:	3b01      	subs	r3, #1
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 800368a:	429a      	cmp	r2, r3
 800368c:	d108      	bne.n	80036a0 <HAL_RCC_OscConfig+0x848>
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_R1) >> RCC_PLL1DIVR_R1_Pos) != (RCC_OscInitStruct->PLL.PLLR - 1U)))
 800368e:	68fb      	ldr	r3, [r7, #12]
 8003690:	0e1b      	lsrs	r3, r3, #24
 8003692:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8003696:	687b      	ldr	r3, [r7, #4]
 8003698:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800369a:	3b01      	subs	r3, #1
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 800369c:	429a      	cmp	r2, r3
 800369e:	d001      	beq.n	80036a4 <HAL_RCC_OscConfig+0x84c>
      {
        return HAL_ERROR;
 80036a0:	2301      	movs	r3, #1
 80036a2:	e000      	b.n	80036a6 <HAL_RCC_OscConfig+0x84e>
      }
    }
  }
  return HAL_OK;
 80036a4:	2300      	movs	r3, #0
}
 80036a6:	4618      	mov	r0, r3
 80036a8:	3730      	adds	r7, #48	; 0x30
 80036aa:	46bd      	mov	sp, r7
 80036ac:	bd80      	pop	{r7, pc}
 80036ae:	bf00      	nop
 80036b0:	58024400 	.word	0x58024400

080036b4 <HAL_RCC_ClockConfig>:
  *         D1CPRE[3:0] bits to ensure that  Domain1 core clock not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80036b4:	b580      	push	{r7, lr}
 80036b6:	b086      	sub	sp, #24
 80036b8:	af00      	add	r7, sp, #0
 80036ba:	6078      	str	r0, [r7, #4]
 80036bc:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef halstatus;
  uint32_t tickstart;
  uint32_t common_system_clock;

   /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 80036be:	687b      	ldr	r3, [r7, #4]
 80036c0:	2b00      	cmp	r3, #0
 80036c2:	d101      	bne.n	80036c8 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80036c4:	2301      	movs	r3, #1
 80036c6:	e19c      	b.n	8003a02 <HAL_RCC_ClockConfig+0x34e>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80036c8:	4b8a      	ldr	r3, [pc, #552]	; (80038f4 <HAL_RCC_ClockConfig+0x240>)
 80036ca:	681b      	ldr	r3, [r3, #0]
 80036cc:	f003 030f 	and.w	r3, r3, #15
 80036d0:	683a      	ldr	r2, [r7, #0]
 80036d2:	429a      	cmp	r2, r3
 80036d4:	d910      	bls.n	80036f8 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80036d6:	4b87      	ldr	r3, [pc, #540]	; (80038f4 <HAL_RCC_ClockConfig+0x240>)
 80036d8:	681b      	ldr	r3, [r3, #0]
 80036da:	f023 020f 	bic.w	r2, r3, #15
 80036de:	4985      	ldr	r1, [pc, #532]	; (80038f4 <HAL_RCC_ClockConfig+0x240>)
 80036e0:	683b      	ldr	r3, [r7, #0]
 80036e2:	4313      	orrs	r3, r2
 80036e4:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80036e6:	4b83      	ldr	r3, [pc, #524]	; (80038f4 <HAL_RCC_ClockConfig+0x240>)
 80036e8:	681b      	ldr	r3, [r3, #0]
 80036ea:	f003 030f 	and.w	r3, r3, #15
 80036ee:	683a      	ldr	r2, [r7, #0]
 80036f0:	429a      	cmp	r2, r3
 80036f2:	d001      	beq.n	80036f8 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 80036f4:	2301      	movs	r3, #1
 80036f6:	e184      	b.n	8003a02 <HAL_RCC_ClockConfig+0x34e>

  }

  /* Increasing the BUS frequency divider */
  /*-------------------------- D1PCLK1/CDPCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 80036f8:	687b      	ldr	r3, [r7, #4]
 80036fa:	681b      	ldr	r3, [r3, #0]
 80036fc:	f003 0304 	and.w	r3, r3, #4
 8003700:	2b00      	cmp	r3, #0
 8003702:	d010      	beq.n	8003726 <HAL_RCC_ClockConfig+0x72>
  {
#if defined (RCC_D1CFGR_D1PPRE)
    if((RCC_ClkInitStruct->APB3CLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 8003704:	687b      	ldr	r3, [r7, #4]
 8003706:	691a      	ldr	r2, [r3, #16]
 8003708:	4b7b      	ldr	r3, [pc, #492]	; (80038f8 <HAL_RCC_ClockConfig+0x244>)
 800370a:	699b      	ldr	r3, [r3, #24]
 800370c:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8003710:	429a      	cmp	r2, r3
 8003712:	d908      	bls.n	8003726 <HAL_RCC_ClockConfig+0x72>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 8003714:	4b78      	ldr	r3, [pc, #480]	; (80038f8 <HAL_RCC_ClockConfig+0x244>)
 8003716:	699b      	ldr	r3, [r3, #24]
 8003718:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 800371c:	687b      	ldr	r3, [r7, #4]
 800371e:	691b      	ldr	r3, [r3, #16]
 8003720:	4975      	ldr	r1, [pc, #468]	; (80038f8 <HAL_RCC_ClockConfig+0x244>)
 8003722:	4313      	orrs	r3, r2
 8003724:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003726:	687b      	ldr	r3, [r7, #4]
 8003728:	681b      	ldr	r3, [r3, #0]
 800372a:	f003 0308 	and.w	r3, r3, #8
 800372e:	2b00      	cmp	r3, #0
 8003730:	d010      	beq.n	8003754 <HAL_RCC_ClockConfig+0xa0>
  {
#if defined (RCC_D2CFGR_D2PPRE1)
    if((RCC_ClkInitStruct->APB1CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 8003732:	687b      	ldr	r3, [r7, #4]
 8003734:	695a      	ldr	r2, [r3, #20]
 8003736:	4b70      	ldr	r3, [pc, #448]	; (80038f8 <HAL_RCC_ClockConfig+0x244>)
 8003738:	69db      	ldr	r3, [r3, #28]
 800373a:	f003 0370 	and.w	r3, r3, #112	; 0x70
 800373e:	429a      	cmp	r2, r3
 8003740:	d908      	bls.n	8003754 <HAL_RCC_ClockConfig+0xa0>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 8003742:	4b6d      	ldr	r3, [pc, #436]	; (80038f8 <HAL_RCC_ClockConfig+0x244>)
 8003744:	69db      	ldr	r3, [r3, #28]
 8003746:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 800374a:	687b      	ldr	r3, [r7, #4]
 800374c:	695b      	ldr	r3, [r3, #20]
 800374e:	496a      	ldr	r1, [pc, #424]	; (80038f8 <HAL_RCC_ClockConfig+0x244>)
 8003750:	4313      	orrs	r3, r2
 8003752:	61cb      	str	r3, [r1, #28]
      MODIFY_REG(RCC->CDCFGR2, RCC_CDCFGR2_CDPPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
  }
#endif
    }
  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003754:	687b      	ldr	r3, [r7, #4]
 8003756:	681b      	ldr	r3, [r3, #0]
 8003758:	f003 0310 	and.w	r3, r3, #16
 800375c:	2b00      	cmp	r3, #0
 800375e:	d010      	beq.n	8003782 <HAL_RCC_ClockConfig+0xce>
  {
#if defined(RCC_D2CFGR_D2PPRE2)
    if((RCC_ClkInitStruct->APB2CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 8003760:	687b      	ldr	r3, [r7, #4]
 8003762:	699a      	ldr	r2, [r3, #24]
 8003764:	4b64      	ldr	r3, [pc, #400]	; (80038f8 <HAL_RCC_ClockConfig+0x244>)
 8003766:	69db      	ldr	r3, [r3, #28]
 8003768:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 800376c:	429a      	cmp	r2, r3
 800376e:	d908      	bls.n	8003782 <HAL_RCC_ClockConfig+0xce>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 8003770:	4b61      	ldr	r3, [pc, #388]	; (80038f8 <HAL_RCC_ClockConfig+0x244>)
 8003772:	69db      	ldr	r3, [r3, #28]
 8003774:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8003778:	687b      	ldr	r3, [r7, #4]
 800377a:	699b      	ldr	r3, [r3, #24]
 800377c:	495e      	ldr	r1, [pc, #376]	; (80038f8 <HAL_RCC_ClockConfig+0x244>)
 800377e:	4313      	orrs	r3, r2
 8003780:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- D3PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 8003782:	687b      	ldr	r3, [r7, #4]
 8003784:	681b      	ldr	r3, [r3, #0]
 8003786:	f003 0320 	and.w	r3, r3, #32
 800378a:	2b00      	cmp	r3, #0
 800378c:	d010      	beq.n	80037b0 <HAL_RCC_ClockConfig+0xfc>
  {
#if defined(RCC_D3CFGR_D3PPRE)
    if((RCC_ClkInitStruct->APB4CLKDivider) > (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 800378e:	687b      	ldr	r3, [r7, #4]
 8003790:	69da      	ldr	r2, [r3, #28]
 8003792:	4b59      	ldr	r3, [pc, #356]	; (80038f8 <HAL_RCC_ClockConfig+0x244>)
 8003794:	6a1b      	ldr	r3, [r3, #32]
 8003796:	f003 0370 	and.w	r3, r3, #112	; 0x70
 800379a:	429a      	cmp	r2, r3
 800379c:	d908      	bls.n	80037b0 <HAL_RCC_ClockConfig+0xfc>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider) );
 800379e:	4b56      	ldr	r3, [pc, #344]	; (80038f8 <HAL_RCC_ClockConfig+0x244>)
 80037a0:	6a1b      	ldr	r3, [r3, #32]
 80037a2:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 80037a6:	687b      	ldr	r3, [r7, #4]
 80037a8:	69db      	ldr	r3, [r3, #28]
 80037aa:	4953      	ldr	r1, [pc, #332]	; (80038f8 <HAL_RCC_ClockConfig+0x244>)
 80037ac:	4313      	orrs	r3, r2
 80037ae:	620b      	str	r3, [r1, #32]
    }
#endif
  }

   /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80037b0:	687b      	ldr	r3, [r7, #4]
 80037b2:	681b      	ldr	r3, [r3, #0]
 80037b4:	f003 0302 	and.w	r3, r3, #2
 80037b8:	2b00      	cmp	r3, #0
 80037ba:	d010      	beq.n	80037de <HAL_RCC_ClockConfig+0x12a>
  {
#if defined (RCC_D1CFGR_HPRE)
    if((RCC_ClkInitStruct->AHBCLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 80037bc:	687b      	ldr	r3, [r7, #4]
 80037be:	68da      	ldr	r2, [r3, #12]
 80037c0:	4b4d      	ldr	r3, [pc, #308]	; (80038f8 <HAL_RCC_ClockConfig+0x244>)
 80037c2:	699b      	ldr	r3, [r3, #24]
 80037c4:	f003 030f 	and.w	r3, r3, #15
 80037c8:	429a      	cmp	r2, r3
 80037ca:	d908      	bls.n	80037de <HAL_RCC_ClockConfig+0x12a>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80037cc:	4b4a      	ldr	r3, [pc, #296]	; (80038f8 <HAL_RCC_ClockConfig+0x244>)
 80037ce:	699b      	ldr	r3, [r3, #24]
 80037d0:	f023 020f 	bic.w	r2, r3, #15
 80037d4:	687b      	ldr	r3, [r7, #4]
 80037d6:	68db      	ldr	r3, [r3, #12]
 80037d8:	4947      	ldr	r1, [pc, #284]	; (80038f8 <HAL_RCC_ClockConfig+0x244>)
 80037da:	4313      	orrs	r3, r2
 80037dc:	618b      	str	r3, [r1, #24]
    }
#endif
  }

    /*------------------------- SYSCLK Configuration -------------------------*/
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80037de:	687b      	ldr	r3, [r7, #4]
 80037e0:	681b      	ldr	r3, [r3, #0]
 80037e2:	f003 0301 	and.w	r3, r3, #1
 80037e6:	2b00      	cmp	r3, #0
 80037e8:	d055      	beq.n	8003896 <HAL_RCC_ClockConfig+0x1e2>
    {
      assert_param(IS_RCC_SYSCLK(RCC_ClkInitStruct->SYSCLKDivider));
      assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
#if defined(RCC_D1CFGR_D1CPRE)
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1CPRE, RCC_ClkInitStruct->SYSCLKDivider);
 80037ea:	4b43      	ldr	r3, [pc, #268]	; (80038f8 <HAL_RCC_ClockConfig+0x244>)
 80037ec:	699b      	ldr	r3, [r3, #24]
 80037ee:	f423 6270 	bic.w	r2, r3, #3840	; 0xf00
 80037f2:	687b      	ldr	r3, [r7, #4]
 80037f4:	689b      	ldr	r3, [r3, #8]
 80037f6:	4940      	ldr	r1, [pc, #256]	; (80038f8 <HAL_RCC_ClockConfig+0x244>)
 80037f8:	4313      	orrs	r3, r2
 80037fa:	618b      	str	r3, [r1, #24]
#else
      MODIFY_REG(RCC->CDCFGR1, RCC_CDCFGR1_CDCPRE, RCC_ClkInitStruct->SYSCLKDivider);
#endif
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80037fc:	687b      	ldr	r3, [r7, #4]
 80037fe:	685b      	ldr	r3, [r3, #4]
 8003800:	2b02      	cmp	r3, #2
 8003802:	d107      	bne.n	8003814 <HAL_RCC_ClockConfig+0x160>
      {
        /* Check the HSE ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8003804:	4b3c      	ldr	r3, [pc, #240]	; (80038f8 <HAL_RCC_ClockConfig+0x244>)
 8003806:	681b      	ldr	r3, [r3, #0]
 8003808:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800380c:	2b00      	cmp	r3, #0
 800380e:	d121      	bne.n	8003854 <HAL_RCC_ClockConfig+0x1a0>
        {
          return HAL_ERROR;
 8003810:	2301      	movs	r3, #1
 8003812:	e0f6      	b.n	8003a02 <HAL_RCC_ClockConfig+0x34e>
        }
      }
      /* PLL is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8003814:	687b      	ldr	r3, [r7, #4]
 8003816:	685b      	ldr	r3, [r3, #4]
 8003818:	2b03      	cmp	r3, #3
 800381a:	d107      	bne.n	800382c <HAL_RCC_ClockConfig+0x178>
      {
        /* Check the PLL ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 800381c:	4b36      	ldr	r3, [pc, #216]	; (80038f8 <HAL_RCC_ClockConfig+0x244>)
 800381e:	681b      	ldr	r3, [r3, #0]
 8003820:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003824:	2b00      	cmp	r3, #0
 8003826:	d115      	bne.n	8003854 <HAL_RCC_ClockConfig+0x1a0>
        {
          return HAL_ERROR;
 8003828:	2301      	movs	r3, #1
 800382a:	e0ea      	b.n	8003a02 <HAL_RCC_ClockConfig+0x34e>
        }
      }
      /* CSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_CSI)
 800382c:	687b      	ldr	r3, [r7, #4]
 800382e:	685b      	ldr	r3, [r3, #4]
 8003830:	2b01      	cmp	r3, #1
 8003832:	d107      	bne.n	8003844 <HAL_RCC_ClockConfig+0x190>
      {
        /* Check the PLL ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8003834:	4b30      	ldr	r3, [pc, #192]	; (80038f8 <HAL_RCC_ClockConfig+0x244>)
 8003836:	681b      	ldr	r3, [r3, #0]
 8003838:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800383c:	2b00      	cmp	r3, #0
 800383e:	d109      	bne.n	8003854 <HAL_RCC_ClockConfig+0x1a0>
        {
          return HAL_ERROR;
 8003840:	2301      	movs	r3, #1
 8003842:	e0de      	b.n	8003a02 <HAL_RCC_ClockConfig+0x34e>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8003844:	4b2c      	ldr	r3, [pc, #176]	; (80038f8 <HAL_RCC_ClockConfig+0x244>)
 8003846:	681b      	ldr	r3, [r3, #0]
 8003848:	f003 0304 	and.w	r3, r3, #4
 800384c:	2b00      	cmp	r3, #0
 800384e:	d101      	bne.n	8003854 <HAL_RCC_ClockConfig+0x1a0>
        {
          return HAL_ERROR;
 8003850:	2301      	movs	r3, #1
 8003852:	e0d6      	b.n	8003a02 <HAL_RCC_ClockConfig+0x34e>
        }
      }
      MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8003854:	4b28      	ldr	r3, [pc, #160]	; (80038f8 <HAL_RCC_ClockConfig+0x244>)
 8003856:	691b      	ldr	r3, [r3, #16]
 8003858:	f023 0207 	bic.w	r2, r3, #7
 800385c:	687b      	ldr	r3, [r7, #4]
 800385e:	685b      	ldr	r3, [r3, #4]
 8003860:	4925      	ldr	r1, [pc, #148]	; (80038f8 <HAL_RCC_ClockConfig+0x244>)
 8003862:	4313      	orrs	r3, r2
 8003864:	610b      	str	r3, [r1, #16]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003866:	f7fd fa63 	bl	8000d30 <HAL_GetTick>
 800386a:	6178      	str	r0, [r7, #20]

        while (__HAL_RCC_GET_SYSCLK_SOURCE() !=  (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800386c:	e00a      	b.n	8003884 <HAL_RCC_ClockConfig+0x1d0>
        {
          if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 800386e:	f7fd fa5f 	bl	8000d30 <HAL_GetTick>
 8003872:	4602      	mov	r2, r0
 8003874:	697b      	ldr	r3, [r7, #20]
 8003876:	1ad3      	subs	r3, r2, r3
 8003878:	f241 3288 	movw	r2, #5000	; 0x1388
 800387c:	4293      	cmp	r3, r2
 800387e:	d901      	bls.n	8003884 <HAL_RCC_ClockConfig+0x1d0>
          {
            return HAL_TIMEOUT;
 8003880:	2303      	movs	r3, #3
 8003882:	e0be      	b.n	8003a02 <HAL_RCC_ClockConfig+0x34e>
        while (__HAL_RCC_GET_SYSCLK_SOURCE() !=  (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003884:	4b1c      	ldr	r3, [pc, #112]	; (80038f8 <HAL_RCC_ClockConfig+0x244>)
 8003886:	691b      	ldr	r3, [r3, #16]
 8003888:	f003 0238 	and.w	r2, r3, #56	; 0x38
 800388c:	687b      	ldr	r3, [r7, #4]
 800388e:	685b      	ldr	r3, [r3, #4]
 8003890:	00db      	lsls	r3, r3, #3
 8003892:	429a      	cmp	r2, r3
 8003894:	d1eb      	bne.n	800386e <HAL_RCC_ClockConfig+0x1ba>

    }

    /* Decreasing the BUS frequency divider */
   /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003896:	687b      	ldr	r3, [r7, #4]
 8003898:	681b      	ldr	r3, [r3, #0]
 800389a:	f003 0302 	and.w	r3, r3, #2
 800389e:	2b00      	cmp	r3, #0
 80038a0:	d010      	beq.n	80038c4 <HAL_RCC_ClockConfig+0x210>
  {
#if defined(RCC_D1CFGR_HPRE)
    if((RCC_ClkInitStruct->AHBCLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 80038a2:	687b      	ldr	r3, [r7, #4]
 80038a4:	68da      	ldr	r2, [r3, #12]
 80038a6:	4b14      	ldr	r3, [pc, #80]	; (80038f8 <HAL_RCC_ClockConfig+0x244>)
 80038a8:	699b      	ldr	r3, [r3, #24]
 80038aa:	f003 030f 	and.w	r3, r3, #15
 80038ae:	429a      	cmp	r2, r3
 80038b0:	d208      	bcs.n	80038c4 <HAL_RCC_ClockConfig+0x210>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80038b2:	4b11      	ldr	r3, [pc, #68]	; (80038f8 <HAL_RCC_ClockConfig+0x244>)
 80038b4:	699b      	ldr	r3, [r3, #24]
 80038b6:	f023 020f 	bic.w	r2, r3, #15
 80038ba:	687b      	ldr	r3, [r7, #4]
 80038bc:	68db      	ldr	r3, [r3, #12]
 80038be:	490e      	ldr	r1, [pc, #56]	; (80038f8 <HAL_RCC_ClockConfig+0x244>)
 80038c0:	4313      	orrs	r3, r2
 80038c2:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80038c4:	4b0b      	ldr	r3, [pc, #44]	; (80038f4 <HAL_RCC_ClockConfig+0x240>)
 80038c6:	681b      	ldr	r3, [r3, #0]
 80038c8:	f003 030f 	and.w	r3, r3, #15
 80038cc:	683a      	ldr	r2, [r7, #0]
 80038ce:	429a      	cmp	r2, r3
 80038d0:	d214      	bcs.n	80038fc <HAL_RCC_ClockConfig+0x248>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80038d2:	4b08      	ldr	r3, [pc, #32]	; (80038f4 <HAL_RCC_ClockConfig+0x240>)
 80038d4:	681b      	ldr	r3, [r3, #0]
 80038d6:	f023 020f 	bic.w	r2, r3, #15
 80038da:	4906      	ldr	r1, [pc, #24]	; (80038f4 <HAL_RCC_ClockConfig+0x240>)
 80038dc:	683b      	ldr	r3, [r7, #0]
 80038de:	4313      	orrs	r3, r2
 80038e0:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80038e2:	4b04      	ldr	r3, [pc, #16]	; (80038f4 <HAL_RCC_ClockConfig+0x240>)
 80038e4:	681b      	ldr	r3, [r3, #0]
 80038e6:	f003 030f 	and.w	r3, r3, #15
 80038ea:	683a      	ldr	r2, [r7, #0]
 80038ec:	429a      	cmp	r2, r3
 80038ee:	d005      	beq.n	80038fc <HAL_RCC_ClockConfig+0x248>
    {
      return HAL_ERROR;
 80038f0:	2301      	movs	r3, #1
 80038f2:	e086      	b.n	8003a02 <HAL_RCC_ClockConfig+0x34e>
 80038f4:	52002000 	.word	0x52002000
 80038f8:	58024400 	.word	0x58024400
    }
 }

  /*-------------------------- D1PCLK1/CDPCLK Configuration ---------------------------*/
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 80038fc:	687b      	ldr	r3, [r7, #4]
 80038fe:	681b      	ldr	r3, [r3, #0]
 8003900:	f003 0304 	and.w	r3, r3, #4
 8003904:	2b00      	cmp	r3, #0
 8003906:	d010      	beq.n	800392a <HAL_RCC_ClockConfig+0x276>
 {
#if defined(RCC_D1CFGR_D1PPRE)
   if((RCC_ClkInitStruct->APB3CLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 8003908:	687b      	ldr	r3, [r7, #4]
 800390a:	691a      	ldr	r2, [r3, #16]
 800390c:	4b3f      	ldr	r3, [pc, #252]	; (8003a0c <HAL_RCC_ClockConfig+0x358>)
 800390e:	699b      	ldr	r3, [r3, #24]
 8003910:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8003914:	429a      	cmp	r2, r3
 8003916:	d208      	bcs.n	800392a <HAL_RCC_ClockConfig+0x276>
   {
     assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
     MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 8003918:	4b3c      	ldr	r3, [pc, #240]	; (8003a0c <HAL_RCC_ClockConfig+0x358>)
 800391a:	699b      	ldr	r3, [r3, #24]
 800391c:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8003920:	687b      	ldr	r3, [r7, #4]
 8003922:	691b      	ldr	r3, [r3, #16]
 8003924:	4939      	ldr	r1, [pc, #228]	; (8003a0c <HAL_RCC_ClockConfig+0x358>)
 8003926:	4313      	orrs	r3, r2
 8003928:	618b      	str	r3, [r1, #24]
   }
#endif
 }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800392a:	687b      	ldr	r3, [r7, #4]
 800392c:	681b      	ldr	r3, [r3, #0]
 800392e:	f003 0308 	and.w	r3, r3, #8
 8003932:	2b00      	cmp	r3, #0
 8003934:	d010      	beq.n	8003958 <HAL_RCC_ClockConfig+0x2a4>
 {
#if defined(RCC_D2CFGR_D2PPRE1)
   if((RCC_ClkInitStruct->APB1CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 8003936:	687b      	ldr	r3, [r7, #4]
 8003938:	695a      	ldr	r2, [r3, #20]
 800393a:	4b34      	ldr	r3, [pc, #208]	; (8003a0c <HAL_RCC_ClockConfig+0x358>)
 800393c:	69db      	ldr	r3, [r3, #28]
 800393e:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8003942:	429a      	cmp	r2, r3
 8003944:	d208      	bcs.n	8003958 <HAL_RCC_ClockConfig+0x2a4>
   {
     assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
     MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 8003946:	4b31      	ldr	r3, [pc, #196]	; (8003a0c <HAL_RCC_ClockConfig+0x358>)
 8003948:	69db      	ldr	r3, [r3, #28]
 800394a:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 800394e:	687b      	ldr	r3, [r7, #4]
 8003950:	695b      	ldr	r3, [r3, #20]
 8003952:	492e      	ldr	r1, [pc, #184]	; (8003a0c <HAL_RCC_ClockConfig+0x358>)
 8003954:	4313      	orrs	r3, r2
 8003956:	61cb      	str	r3, [r1, #28]
   }
#endif
 }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003958:	687b      	ldr	r3, [r7, #4]
 800395a:	681b      	ldr	r3, [r3, #0]
 800395c:	f003 0310 	and.w	r3, r3, #16
 8003960:	2b00      	cmp	r3, #0
 8003962:	d010      	beq.n	8003986 <HAL_RCC_ClockConfig+0x2d2>
 {
#if defined (RCC_D2CFGR_D2PPRE2)
   if((RCC_ClkInitStruct->APB2CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 8003964:	687b      	ldr	r3, [r7, #4]
 8003966:	699a      	ldr	r2, [r3, #24]
 8003968:	4b28      	ldr	r3, [pc, #160]	; (8003a0c <HAL_RCC_ClockConfig+0x358>)
 800396a:	69db      	ldr	r3, [r3, #28]
 800396c:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8003970:	429a      	cmp	r2, r3
 8003972:	d208      	bcs.n	8003986 <HAL_RCC_ClockConfig+0x2d2>
   {
     assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
     MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 8003974:	4b25      	ldr	r3, [pc, #148]	; (8003a0c <HAL_RCC_ClockConfig+0x358>)
 8003976:	69db      	ldr	r3, [r3, #28]
 8003978:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 800397c:	687b      	ldr	r3, [r7, #4]
 800397e:	699b      	ldr	r3, [r3, #24]
 8003980:	4922      	ldr	r1, [pc, #136]	; (8003a0c <HAL_RCC_ClockConfig+0x358>)
 8003982:	4313      	orrs	r3, r2
 8003984:	61cb      	str	r3, [r1, #28]
   }
#endif
 }

  /*-------------------------- D3PCLK1/SRDPCLK1 Configuration ---------------------------*/
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 8003986:	687b      	ldr	r3, [r7, #4]
 8003988:	681b      	ldr	r3, [r3, #0]
 800398a:	f003 0320 	and.w	r3, r3, #32
 800398e:	2b00      	cmp	r3, #0
 8003990:	d010      	beq.n	80039b4 <HAL_RCC_ClockConfig+0x300>
 {
#if defined(RCC_D3CFGR_D3PPRE)
   if((RCC_ClkInitStruct->APB4CLKDivider) < (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 8003992:	687b      	ldr	r3, [r7, #4]
 8003994:	69da      	ldr	r2, [r3, #28]
 8003996:	4b1d      	ldr	r3, [pc, #116]	; (8003a0c <HAL_RCC_ClockConfig+0x358>)
 8003998:	6a1b      	ldr	r3, [r3, #32]
 800399a:	f003 0370 	and.w	r3, r3, #112	; 0x70
 800399e:	429a      	cmp	r2, r3
 80039a0:	d208      	bcs.n	80039b4 <HAL_RCC_ClockConfig+0x300>
   {
     assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
     MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider) );
 80039a2:	4b1a      	ldr	r3, [pc, #104]	; (8003a0c <HAL_RCC_ClockConfig+0x358>)
 80039a4:	6a1b      	ldr	r3, [r3, #32]
 80039a6:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 80039aa:	687b      	ldr	r3, [r7, #4]
 80039ac:	69db      	ldr	r3, [r3, #28]
 80039ae:	4917      	ldr	r1, [pc, #92]	; (8003a0c <HAL_RCC_ClockConfig+0x358>)
 80039b0:	4313      	orrs	r3, r2
 80039b2:	620b      	str	r3, [r1, #32]
#endif
 }

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 80039b4:	f000 f834 	bl	8003a20 <HAL_RCC_GetSysClockFreq>
 80039b8:	4602      	mov	r2, r0
 80039ba:	4b14      	ldr	r3, [pc, #80]	; (8003a0c <HAL_RCC_ClockConfig+0x358>)
 80039bc:	699b      	ldr	r3, [r3, #24]
 80039be:	0a1b      	lsrs	r3, r3, #8
 80039c0:	f003 030f 	and.w	r3, r3, #15
 80039c4:	4912      	ldr	r1, [pc, #72]	; (8003a10 <HAL_RCC_ClockConfig+0x35c>)
 80039c6:	5ccb      	ldrb	r3, [r1, r3]
 80039c8:	f003 031f 	and.w	r3, r3, #31
 80039cc:	fa22 f303 	lsr.w	r3, r2, r3
 80039d0:	613b      	str	r3, [r7, #16]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 80039d2:	4b0e      	ldr	r3, [pc, #56]	; (8003a0c <HAL_RCC_ClockConfig+0x358>)
 80039d4:	699b      	ldr	r3, [r3, #24]
 80039d6:	f003 030f 	and.w	r3, r3, #15
 80039da:	4a0d      	ldr	r2, [pc, #52]	; (8003a10 <HAL_RCC_ClockConfig+0x35c>)
 80039dc:	5cd3      	ldrb	r3, [r2, r3]
 80039de:	f003 031f 	and.w	r3, r3, #31
 80039e2:	693a      	ldr	r2, [r7, #16]
 80039e4:	fa22 f303 	lsr.w	r3, r2, r3
 80039e8:	4a0a      	ldr	r2, [pc, #40]	; (8003a14 <HAL_RCC_ClockConfig+0x360>)
 80039ea:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 80039ec:	4a0a      	ldr	r2, [pc, #40]	; (8003a18 <HAL_RCC_ClockConfig+0x364>)
 80039ee:	693b      	ldr	r3, [r7, #16]
 80039f0:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Configure the source of time base considering new system clocks settings*/
  halstatus = HAL_InitTick (uwTickPrio);
 80039f2:	4b0a      	ldr	r3, [pc, #40]	; (8003a1c <HAL_RCC_ClockConfig+0x368>)
 80039f4:	681b      	ldr	r3, [r3, #0]
 80039f6:	4618      	mov	r0, r3
 80039f8:	f7fd f950 	bl	8000c9c <HAL_InitTick>
 80039fc:	4603      	mov	r3, r0
 80039fe:	73fb      	strb	r3, [r7, #15]

  return halstatus;
 8003a00:	7bfb      	ldrb	r3, [r7, #15]
}
 8003a02:	4618      	mov	r0, r3
 8003a04:	3718      	adds	r7, #24
 8003a06:	46bd      	mov	sp, r7
 8003a08:	bd80      	pop	{r7, pc}
 8003a0a:	bf00      	nop
 8003a0c:	58024400 	.word	0x58024400
 8003a10:	0800ad68 	.word	0x0800ad68
 8003a14:	24000004 	.word	0x24000004
 8003a18:	24000000 	.word	0x24000000
 8003a1c:	24000008 	.word	0x24000008

08003a20 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003a20:	b480      	push	{r7}
 8003a22:	b089      	sub	sp, #36	; 0x24
 8003a24:	af00      	add	r7, sp, #0
  float_t fracn1, pllvco;
  uint32_t sysclockfreq;

  /* Get SYSCLK source -------------------------------------------------------*/

  switch (RCC->CFGR & RCC_CFGR_SWS)
 8003a26:	4bb3      	ldr	r3, [pc, #716]	; (8003cf4 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8003a28:	691b      	ldr	r3, [r3, #16]
 8003a2a:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8003a2e:	2b18      	cmp	r3, #24
 8003a30:	f200 8155 	bhi.w	8003cde <HAL_RCC_GetSysClockFreq+0x2be>
 8003a34:	a201      	add	r2, pc, #4	; (adr r2, 8003a3c <HAL_RCC_GetSysClockFreq+0x1c>)
 8003a36:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003a3a:	bf00      	nop
 8003a3c:	08003aa1 	.word	0x08003aa1
 8003a40:	08003cdf 	.word	0x08003cdf
 8003a44:	08003cdf 	.word	0x08003cdf
 8003a48:	08003cdf 	.word	0x08003cdf
 8003a4c:	08003cdf 	.word	0x08003cdf
 8003a50:	08003cdf 	.word	0x08003cdf
 8003a54:	08003cdf 	.word	0x08003cdf
 8003a58:	08003cdf 	.word	0x08003cdf
 8003a5c:	08003ac7 	.word	0x08003ac7
 8003a60:	08003cdf 	.word	0x08003cdf
 8003a64:	08003cdf 	.word	0x08003cdf
 8003a68:	08003cdf 	.word	0x08003cdf
 8003a6c:	08003cdf 	.word	0x08003cdf
 8003a70:	08003cdf 	.word	0x08003cdf
 8003a74:	08003cdf 	.word	0x08003cdf
 8003a78:	08003cdf 	.word	0x08003cdf
 8003a7c:	08003acd 	.word	0x08003acd
 8003a80:	08003cdf 	.word	0x08003cdf
 8003a84:	08003cdf 	.word	0x08003cdf
 8003a88:	08003cdf 	.word	0x08003cdf
 8003a8c:	08003cdf 	.word	0x08003cdf
 8003a90:	08003cdf 	.word	0x08003cdf
 8003a94:	08003cdf 	.word	0x08003cdf
 8003a98:	08003cdf 	.word	0x08003cdf
 8003a9c:	08003ad3 	.word	0x08003ad3
  {
  case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */

   if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8003aa0:	4b94      	ldr	r3, [pc, #592]	; (8003cf4 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8003aa2:	681b      	ldr	r3, [r3, #0]
 8003aa4:	f003 0320 	and.w	r3, r3, #32
 8003aa8:	2b00      	cmp	r3, #0
 8003aaa:	d009      	beq.n	8003ac0 <HAL_RCC_GetSysClockFreq+0xa0>
      {
        sysclockfreq = (uint32_t) (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 8003aac:	4b91      	ldr	r3, [pc, #580]	; (8003cf4 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8003aae:	681b      	ldr	r3, [r3, #0]
 8003ab0:	08db      	lsrs	r3, r3, #3
 8003ab2:	f003 0303 	and.w	r3, r3, #3
 8003ab6:	4a90      	ldr	r2, [pc, #576]	; (8003cf8 <HAL_RCC_GetSysClockFreq+0x2d8>)
 8003ab8:	fa22 f303 	lsr.w	r3, r2, r3
 8003abc:	61bb      	str	r3, [r7, #24]
      else
      {
        sysclockfreq = (uint32_t) HSI_VALUE;
      }

    break;
 8003abe:	e111      	b.n	8003ce4 <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = (uint32_t) HSI_VALUE;
 8003ac0:	4b8d      	ldr	r3, [pc, #564]	; (8003cf8 <HAL_RCC_GetSysClockFreq+0x2d8>)
 8003ac2:	61bb      	str	r3, [r7, #24]
    break;
 8003ac4:	e10e      	b.n	8003ce4 <HAL_RCC_GetSysClockFreq+0x2c4>

  case RCC_CFGR_SWS_CSI:  /* CSI used as system clock  source */
    sysclockfreq = CSI_VALUE;
 8003ac6:	4b8d      	ldr	r3, [pc, #564]	; (8003cfc <HAL_RCC_GetSysClockFreq+0x2dc>)
 8003ac8:	61bb      	str	r3, [r7, #24]
    break;
 8003aca:	e10b      	b.n	8003ce4 <HAL_RCC_GetSysClockFreq+0x2c4>

  case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    sysclockfreq = HSE_VALUE;
 8003acc:	4b8c      	ldr	r3, [pc, #560]	; (8003d00 <HAL_RCC_GetSysClockFreq+0x2e0>)
 8003ace:	61bb      	str	r3, [r7, #24]
    break;
 8003ad0:	e108      	b.n	8003ce4 <HAL_RCC_GetSysClockFreq+0x2c4>
  case RCC_CFGR_SWS_PLL1:  /* PLL1 used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8003ad2:	4b88      	ldr	r3, [pc, #544]	; (8003cf4 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8003ad4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003ad6:	f003 0303 	and.w	r3, r3, #3
 8003ada:	617b      	str	r3, [r7, #20]
    pllm = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1)>> 4)  ;
 8003adc:	4b85      	ldr	r3, [pc, #532]	; (8003cf4 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8003ade:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003ae0:	091b      	lsrs	r3, r3, #4
 8003ae2:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8003ae6:	613b      	str	r3, [r7, #16]
    pllfracen = ((RCC-> PLLCFGR & RCC_PLLCFGR_PLL1FRACEN)>>RCC_PLLCFGR_PLL1FRACEN_Pos);
 8003ae8:	4b82      	ldr	r3, [pc, #520]	; (8003cf4 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8003aea:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003aec:	f003 0301 	and.w	r3, r3, #1
 8003af0:	60fb      	str	r3, [r7, #12]
    fracn1 = (float_t)(uint32_t)(pllfracen* ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1)>> 3));
 8003af2:	4b80      	ldr	r3, [pc, #512]	; (8003cf4 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8003af4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003af6:	08db      	lsrs	r3, r3, #3
 8003af8:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8003afc:	68fa      	ldr	r2, [r7, #12]
 8003afe:	fb02 f303 	mul.w	r3, r2, r3
 8003b02:	ee07 3a90 	vmov	s15, r3
 8003b06:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003b0a:	edc7 7a02 	vstr	s15, [r7, #8]

    if (pllm != 0U)
 8003b0e:	693b      	ldr	r3, [r7, #16]
 8003b10:	2b00      	cmp	r3, #0
 8003b12:	f000 80e1 	beq.w	8003cd8 <HAL_RCC_GetSysClockFreq+0x2b8>
 8003b16:	697b      	ldr	r3, [r7, #20]
 8003b18:	2b02      	cmp	r3, #2
 8003b1a:	f000 8083 	beq.w	8003c24 <HAL_RCC_GetSysClockFreq+0x204>
 8003b1e:	697b      	ldr	r3, [r7, #20]
 8003b20:	2b02      	cmp	r3, #2
 8003b22:	f200 80a1 	bhi.w	8003c68 <HAL_RCC_GetSysClockFreq+0x248>
 8003b26:	697b      	ldr	r3, [r7, #20]
 8003b28:	2b00      	cmp	r3, #0
 8003b2a:	d003      	beq.n	8003b34 <HAL_RCC_GetSysClockFreq+0x114>
 8003b2c:	697b      	ldr	r3, [r7, #20]
 8003b2e:	2b01      	cmp	r3, #1
 8003b30:	d056      	beq.n	8003be0 <HAL_RCC_GetSysClockFreq+0x1c0>
 8003b32:	e099      	b.n	8003c68 <HAL_RCC_GetSysClockFreq+0x248>
    {
      switch (pllsource)
      {
      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

       if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8003b34:	4b6f      	ldr	r3, [pc, #444]	; (8003cf4 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8003b36:	681b      	ldr	r3, [r3, #0]
 8003b38:	f003 0320 	and.w	r3, r3, #32
 8003b3c:	2b00      	cmp	r3, #0
 8003b3e:	d02d      	beq.n	8003b9c <HAL_RCC_GetSysClockFreq+0x17c>
        {
          hsivalue= (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 8003b40:	4b6c      	ldr	r3, [pc, #432]	; (8003cf4 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8003b42:	681b      	ldr	r3, [r3, #0]
 8003b44:	08db      	lsrs	r3, r3, #3
 8003b46:	f003 0303 	and.w	r3, r3, #3
 8003b4a:	4a6b      	ldr	r2, [pc, #428]	; (8003cf8 <HAL_RCC_GetSysClockFreq+0x2d8>)
 8003b4c:	fa22 f303 	lsr.w	r3, r2, r3
 8003b50:	607b      	str	r3, [r7, #4]
          pllvco = ( (float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8003b52:	687b      	ldr	r3, [r7, #4]
 8003b54:	ee07 3a90 	vmov	s15, r3
 8003b58:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8003b5c:	693b      	ldr	r3, [r7, #16]
 8003b5e:	ee07 3a90 	vmov	s15, r3
 8003b62:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003b66:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8003b6a:	4b62      	ldr	r3, [pc, #392]	; (8003cf4 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8003b6c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003b6e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003b72:	ee07 3a90 	vmov	s15, r3
 8003b76:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8003b7a:	ed97 6a02 	vldr	s12, [r7, #8]
 8003b7e:	eddf 5a61 	vldr	s11, [pc, #388]	; 8003d04 <HAL_RCC_GetSysClockFreq+0x2e4>
 8003b82:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8003b86:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8003b8a:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8003b8e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8003b92:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003b96:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
        }
        break;
 8003b9a:	e087      	b.n	8003cac <HAL_RCC_GetSysClockFreq+0x28c>
          pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8003b9c:	693b      	ldr	r3, [r7, #16]
 8003b9e:	ee07 3a90 	vmov	s15, r3
 8003ba2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003ba6:	eddf 6a58 	vldr	s13, [pc, #352]	; 8003d08 <HAL_RCC_GetSysClockFreq+0x2e8>
 8003baa:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8003bae:	4b51      	ldr	r3, [pc, #324]	; (8003cf4 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8003bb0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003bb2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003bb6:	ee07 3a90 	vmov	s15, r3
 8003bba:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8003bbe:	ed97 6a02 	vldr	s12, [r7, #8]
 8003bc2:	eddf 5a50 	vldr	s11, [pc, #320]	; 8003d04 <HAL_RCC_GetSysClockFreq+0x2e4>
 8003bc6:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8003bca:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8003bce:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8003bd2:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8003bd6:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003bda:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8003bde:	e065      	b.n	8003cac <HAL_RCC_GetSysClockFreq+0x28c>

      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8003be0:	693b      	ldr	r3, [r7, #16]
 8003be2:	ee07 3a90 	vmov	s15, r3
 8003be6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003bea:	eddf 6a48 	vldr	s13, [pc, #288]	; 8003d0c <HAL_RCC_GetSysClockFreq+0x2ec>
 8003bee:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8003bf2:	4b40      	ldr	r3, [pc, #256]	; (8003cf4 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8003bf4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003bf6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003bfa:	ee07 3a90 	vmov	s15, r3
 8003bfe:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8003c02:	ed97 6a02 	vldr	s12, [r7, #8]
 8003c06:	eddf 5a3f 	vldr	s11, [pc, #252]	; 8003d04 <HAL_RCC_GetSysClockFreq+0x2e4>
 8003c0a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8003c0e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8003c12:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8003c16:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8003c1a:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003c1e:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8003c22:	e043      	b.n	8003cac <HAL_RCC_GetSysClockFreq+0x28c>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8003c24:	693b      	ldr	r3, [r7, #16]
 8003c26:	ee07 3a90 	vmov	s15, r3
 8003c2a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003c2e:	eddf 6a38 	vldr	s13, [pc, #224]	; 8003d10 <HAL_RCC_GetSysClockFreq+0x2f0>
 8003c32:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8003c36:	4b2f      	ldr	r3, [pc, #188]	; (8003cf4 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8003c38:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003c3a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003c3e:	ee07 3a90 	vmov	s15, r3
 8003c42:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8003c46:	ed97 6a02 	vldr	s12, [r7, #8]
 8003c4a:	eddf 5a2e 	vldr	s11, [pc, #184]	; 8003d04 <HAL_RCC_GetSysClockFreq+0x2e4>
 8003c4e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8003c52:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8003c56:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8003c5a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8003c5e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003c62:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8003c66:	e021      	b.n	8003cac <HAL_RCC_GetSysClockFreq+0x28c>

      default:
        pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8003c68:	693b      	ldr	r3, [r7, #16]
 8003c6a:	ee07 3a90 	vmov	s15, r3
 8003c6e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003c72:	eddf 6a26 	vldr	s13, [pc, #152]	; 8003d0c <HAL_RCC_GetSysClockFreq+0x2ec>
 8003c76:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8003c7a:	4b1e      	ldr	r3, [pc, #120]	; (8003cf4 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8003c7c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003c7e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003c82:	ee07 3a90 	vmov	s15, r3
 8003c86:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8003c8a:	ed97 6a02 	vldr	s12, [r7, #8]
 8003c8e:	eddf 5a1d 	vldr	s11, [pc, #116]	; 8003d04 <HAL_RCC_GetSysClockFreq+0x2e4>
 8003c92:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8003c96:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8003c9a:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8003c9e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8003ca2:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003ca6:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8003caa:	bf00      	nop
      }
      pllp = (((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >>9) + 1U ) ;
 8003cac:	4b11      	ldr	r3, [pc, #68]	; (8003cf4 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8003cae:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003cb0:	0a5b      	lsrs	r3, r3, #9
 8003cb2:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8003cb6:	3301      	adds	r3, #1
 8003cb8:	603b      	str	r3, [r7, #0]
      sysclockfreq =  (uint32_t)(float_t)(pllvco/(float_t)pllp);
 8003cba:	683b      	ldr	r3, [r7, #0]
 8003cbc:	ee07 3a90 	vmov	s15, r3
 8003cc0:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8003cc4:	edd7 6a07 	vldr	s13, [r7, #28]
 8003cc8:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8003ccc:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8003cd0:	ee17 3a90 	vmov	r3, s15
 8003cd4:	61bb      	str	r3, [r7, #24]
    }
    else
    {
      sysclockfreq = 0U;
    }
    break;
 8003cd6:	e005      	b.n	8003ce4 <HAL_RCC_GetSysClockFreq+0x2c4>
      sysclockfreq = 0U;
 8003cd8:	2300      	movs	r3, #0
 8003cda:	61bb      	str	r3, [r7, #24]
    break;
 8003cdc:	e002      	b.n	8003ce4 <HAL_RCC_GetSysClockFreq+0x2c4>

  default:
    sysclockfreq = CSI_VALUE;
 8003cde:	4b07      	ldr	r3, [pc, #28]	; (8003cfc <HAL_RCC_GetSysClockFreq+0x2dc>)
 8003ce0:	61bb      	str	r3, [r7, #24]
    break;
 8003ce2:	bf00      	nop
  }

  return sysclockfreq;
 8003ce4:	69bb      	ldr	r3, [r7, #24]
}
 8003ce6:	4618      	mov	r0, r3
 8003ce8:	3724      	adds	r7, #36	; 0x24
 8003cea:	46bd      	mov	sp, r7
 8003cec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003cf0:	4770      	bx	lr
 8003cf2:	bf00      	nop
 8003cf4:	58024400 	.word	0x58024400
 8003cf8:	03d09000 	.word	0x03d09000
 8003cfc:	003d0900 	.word	0x003d0900
 8003d00:	017d7840 	.word	0x017d7840
 8003d04:	46000000 	.word	0x46000000
 8003d08:	4c742400 	.word	0x4c742400
 8003d0c:	4a742400 	.word	0x4a742400
 8003d10:	4bbebc20 	.word	0x4bbebc20

08003d14 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemD2Clock CMSIS variable is used to store System domain2 Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8003d14:	b580      	push	{r7, lr}
 8003d16:	b082      	sub	sp, #8
 8003d18:	af00      	add	r7, sp, #0
uint32_t common_system_clock;

#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos] & 0x1FU);
 8003d1a:	f7ff fe81 	bl	8003a20 <HAL_RCC_GetSysClockFreq>
 8003d1e:	4602      	mov	r2, r0
 8003d20:	4b10      	ldr	r3, [pc, #64]	; (8003d64 <HAL_RCC_GetHCLKFreq+0x50>)
 8003d22:	699b      	ldr	r3, [r3, #24]
 8003d24:	0a1b      	lsrs	r3, r3, #8
 8003d26:	f003 030f 	and.w	r3, r3, #15
 8003d2a:	490f      	ldr	r1, [pc, #60]	; (8003d68 <HAL_RCC_GetHCLKFreq+0x54>)
 8003d2c:	5ccb      	ldrb	r3, [r1, r3]
 8003d2e:	f003 031f 	and.w	r3, r3, #31
 8003d32:	fa22 f303 	lsr.w	r3, r2, r3
 8003d36:	607b      	str	r3, [r7, #4]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos] & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8003d38:	4b0a      	ldr	r3, [pc, #40]	; (8003d64 <HAL_RCC_GetHCLKFreq+0x50>)
 8003d3a:	699b      	ldr	r3, [r3, #24]
 8003d3c:	f003 030f 	and.w	r3, r3, #15
 8003d40:	4a09      	ldr	r2, [pc, #36]	; (8003d68 <HAL_RCC_GetHCLKFreq+0x54>)
 8003d42:	5cd3      	ldrb	r3, [r2, r3]
 8003d44:	f003 031f 	and.w	r3, r3, #31
 8003d48:	687a      	ldr	r2, [r7, #4]
 8003d4a:	fa22 f303 	lsr.w	r3, r2, r3
 8003d4e:	4a07      	ldr	r2, [pc, #28]	; (8003d6c <HAL_RCC_GetHCLKFreq+0x58>)
 8003d50:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8003d52:	4a07      	ldr	r2, [pc, #28]	; (8003d70 <HAL_RCC_GetHCLKFreq+0x5c>)
 8003d54:	687b      	ldr	r3, [r7, #4]
 8003d56:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  return SystemD2Clock;
 8003d58:	4b04      	ldr	r3, [pc, #16]	; (8003d6c <HAL_RCC_GetHCLKFreq+0x58>)
 8003d5a:	681b      	ldr	r3, [r3, #0]
}
 8003d5c:	4618      	mov	r0, r3
 8003d5e:	3708      	adds	r7, #8
 8003d60:	46bd      	mov	sp, r7
 8003d62:	bd80      	pop	{r7, pc}
 8003d64:	58024400 	.word	0x58024400
 8003d68:	0800ad68 	.word	0x0800ad68
 8003d6c:	24000004 	.word	0x24000004
 8003d70:	24000000 	.word	0x24000000

08003d74 <HAL_RCCEx_PeriphCLKConfig>:
  * (*) : Available on some STM32H7 lines only.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8003d74:	b580      	push	{r7, lr}
 8003d76:	b086      	sub	sp, #24
 8003d78:	af00      	add	r7, sp, #0
 8003d7a:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8003d7c:	2300      	movs	r3, #0
 8003d7e:	75fb      	strb	r3, [r7, #23]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8003d80:	2300      	movs	r3, #0
 8003d82:	75bb      	strb	r3, [r7, #22]

  /*---------------------------- SPDIFRX configuration -------------------------------*/

  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8003d84:	687b      	ldr	r3, [r7, #4]
 8003d86:	681b      	ldr	r3, [r3, #0]
 8003d88:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8003d8c:	2b00      	cmp	r3, #0
 8003d8e:	d03f      	beq.n	8003e10 <HAL_RCCEx_PeriphCLKConfig+0x9c>
  {

    switch(PeriphClkInit->SpdifrxClockSelection)
 8003d90:	687b      	ldr	r3, [r7, #4]
 8003d92:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8003d94:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8003d98:	d02a      	beq.n	8003df0 <HAL_RCCEx_PeriphCLKConfig+0x7c>
 8003d9a:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8003d9e:	d824      	bhi.n	8003dea <HAL_RCCEx_PeriphCLKConfig+0x76>
 8003da0:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8003da4:	d018      	beq.n	8003dd8 <HAL_RCCEx_PeriphCLKConfig+0x64>
 8003da6:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8003daa:	d81e      	bhi.n	8003dea <HAL_RCCEx_PeriphCLKConfig+0x76>
 8003dac:	2b00      	cmp	r3, #0
 8003dae:	d003      	beq.n	8003db8 <HAL_RCCEx_PeriphCLKConfig+0x44>
 8003db0:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8003db4:	d007      	beq.n	8003dc6 <HAL_RCCEx_PeriphCLKConfig+0x52>
 8003db6:	e018      	b.n	8003dea <HAL_RCCEx_PeriphCLKConfig+0x76>
    {
    case RCC_SPDIFRXCLKSOURCE_PLL:      /* PLL is used as clock source for SPDIFRX*/
      /* Enable PLL1Q Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8003db8:	4ba3      	ldr	r3, [pc, #652]	; (8004048 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 8003dba:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003dbc:	4aa2      	ldr	r2, [pc, #648]	; (8004048 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 8003dbe:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8003dc2:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SPDIFRX clock source configuration done later after clock selection check */
      break;
 8003dc4:	e015      	b.n	8003df2 <HAL_RCCEx_PeriphCLKConfig+0x7e>

    case RCC_SPDIFRXCLKSOURCE_PLL2: /* PLL2 is used as clock source for SPDIFRX*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 8003dc6:	687b      	ldr	r3, [r7, #4]
 8003dc8:	3304      	adds	r3, #4
 8003dca:	2102      	movs	r1, #2
 8003dcc:	4618      	mov	r0, r3
 8003dce:	f000 ff17 	bl	8004c00 <RCCEx_PLL2_Config>
 8003dd2:	4603      	mov	r3, r0
 8003dd4:	75fb      	strb	r3, [r7, #23]

      /* SPDIFRX clock source configuration done later after clock selection check */
      break;
 8003dd6:	e00c      	b.n	8003df2 <HAL_RCCEx_PeriphCLKConfig+0x7e>

    case RCC_SPDIFRXCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPDIFRX*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 8003dd8:	687b      	ldr	r3, [r7, #4]
 8003dda:	3324      	adds	r3, #36	; 0x24
 8003ddc:	2102      	movs	r1, #2
 8003dde:	4618      	mov	r0, r3
 8003de0:	f000 ffc0 	bl	8004d64 <RCCEx_PLL3_Config>
 8003de4:	4603      	mov	r3, r0
 8003de6:	75fb      	strb	r3, [r7, #23]

      /* SPDIFRX clock source configuration done later after clock selection check */
      break;
 8003de8:	e003      	b.n	8003df2 <HAL_RCCEx_PeriphCLKConfig+0x7e>
      /* Internal OSC clock is used as source of SPDIFRX clock*/
      /* SPDIFRX clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8003dea:	2301      	movs	r3, #1
 8003dec:	75fb      	strb	r3, [r7, #23]
      break;
 8003dee:	e000      	b.n	8003df2 <HAL_RCCEx_PeriphCLKConfig+0x7e>
      break;
 8003df0:	bf00      	nop
    }

    if(ret == HAL_OK)
 8003df2:	7dfb      	ldrb	r3, [r7, #23]
 8003df4:	2b00      	cmp	r3, #0
 8003df6:	d109      	bne.n	8003e0c <HAL_RCCEx_PeriphCLKConfig+0x98>
    {
      /* Set the source of SPDIFRX clock*/
      __HAL_RCC_SPDIFRX_CONFIG(PeriphClkInit->SpdifrxClockSelection);
 8003df8:	4b93      	ldr	r3, [pc, #588]	; (8004048 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 8003dfa:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003dfc:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8003e00:	687b      	ldr	r3, [r7, #4]
 8003e02:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8003e04:	4990      	ldr	r1, [pc, #576]	; (8004048 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 8003e06:	4313      	orrs	r3, r2
 8003e08:	650b      	str	r3, [r1, #80]	; 0x50
 8003e0a:	e001      	b.n	8003e10 <HAL_RCCEx_PeriphCLKConfig+0x9c>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003e0c:	7dfb      	ldrb	r3, [r7, #23]
 8003e0e:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- SAI1 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 8003e10:	687b      	ldr	r3, [r7, #4]
 8003e12:	681b      	ldr	r3, [r3, #0]
 8003e14:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003e18:	2b00      	cmp	r3, #0
 8003e1a:	d03d      	beq.n	8003e98 <HAL_RCCEx_PeriphCLKConfig+0x124>
  {
    switch(PeriphClkInit->Sai1ClockSelection)
 8003e1c:	687b      	ldr	r3, [r7, #4]
 8003e1e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003e20:	2b04      	cmp	r3, #4
 8003e22:	d826      	bhi.n	8003e72 <HAL_RCCEx_PeriphCLKConfig+0xfe>
 8003e24:	a201      	add	r2, pc, #4	; (adr r2, 8003e2c <HAL_RCCEx_PeriphCLKConfig+0xb8>)
 8003e26:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003e2a:	bf00      	nop
 8003e2c:	08003e41 	.word	0x08003e41
 8003e30:	08003e4f 	.word	0x08003e4f
 8003e34:	08003e61 	.word	0x08003e61
 8003e38:	08003e79 	.word	0x08003e79
 8003e3c:	08003e79 	.word	0x08003e79
    {
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8003e40:	4b81      	ldr	r3, [pc, #516]	; (8004048 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 8003e42:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003e44:	4a80      	ldr	r2, [pc, #512]	; (8004048 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 8003e46:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8003e4a:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 8003e4c:	e015      	b.n	8003e7a <HAL_RCCEx_PeriphCLKConfig+0x106>

    case RCC_SAI1CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI1*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8003e4e:	687b      	ldr	r3, [r7, #4]
 8003e50:	3304      	adds	r3, #4
 8003e52:	2100      	movs	r1, #0
 8003e54:	4618      	mov	r0, r3
 8003e56:	f000 fed3 	bl	8004c00 <RCCEx_PLL2_Config>
 8003e5a:	4603      	mov	r3, r0
 8003e5c:	75fb      	strb	r3, [r7, #23]

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 8003e5e:	e00c      	b.n	8003e7a <HAL_RCCEx_PeriphCLKConfig+0x106>

    case RCC_SAI1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI1*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 8003e60:	687b      	ldr	r3, [r7, #4]
 8003e62:	3324      	adds	r3, #36	; 0x24
 8003e64:	2100      	movs	r1, #0
 8003e66:	4618      	mov	r0, r3
 8003e68:	f000 ff7c 	bl	8004d64 <RCCEx_PLL3_Config>
 8003e6c:	4603      	mov	r3, r0
 8003e6e:	75fb      	strb	r3, [r7, #23]

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 8003e70:	e003      	b.n	8003e7a <HAL_RCCEx_PeriphCLKConfig+0x106>
      /* HSI, HSE, or CSI oscillator is used as source of SAI1 clock */
      /* SAI1 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8003e72:	2301      	movs	r3, #1
 8003e74:	75fb      	strb	r3, [r7, #23]
      break;
 8003e76:	e000      	b.n	8003e7a <HAL_RCCEx_PeriphCLKConfig+0x106>
      break;
 8003e78:	bf00      	nop
    }

    if(ret == HAL_OK)
 8003e7a:	7dfb      	ldrb	r3, [r7, #23]
 8003e7c:	2b00      	cmp	r3, #0
 8003e7e:	d109      	bne.n	8003e94 <HAL_RCCEx_PeriphCLKConfig+0x120>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8003e80:	4b71      	ldr	r3, [pc, #452]	; (8004048 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 8003e82:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003e84:	f023 0207 	bic.w	r2, r3, #7
 8003e88:	687b      	ldr	r3, [r7, #4]
 8003e8a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003e8c:	496e      	ldr	r1, [pc, #440]	; (8004048 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 8003e8e:	4313      	orrs	r3, r2
 8003e90:	650b      	str	r3, [r1, #80]	; 0x50
 8003e92:	e001      	b.n	8003e98 <HAL_RCCEx_PeriphCLKConfig+0x124>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003e94:	7dfb      	ldrb	r3, [r7, #23]
 8003e96:	75bb      	strb	r3, [r7, #22]
    }
  }

#if defined(SAI3)
  /*---------------------------- SAI2/3 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI23) == RCC_PERIPHCLK_SAI23)
 8003e98:	687b      	ldr	r3, [r7, #4]
 8003e9a:	681b      	ldr	r3, [r3, #0]
 8003e9c:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8003ea0:	2b00      	cmp	r3, #0
 8003ea2:	d042      	beq.n	8003f2a <HAL_RCCEx_PeriphCLKConfig+0x1b6>
  {
    switch(PeriphClkInit->Sai23ClockSelection)
 8003ea4:	687b      	ldr	r3, [r7, #4]
 8003ea6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003ea8:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8003eac:	d02b      	beq.n	8003f06 <HAL_RCCEx_PeriphCLKConfig+0x192>
 8003eae:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8003eb2:	d825      	bhi.n	8003f00 <HAL_RCCEx_PeriphCLKConfig+0x18c>
 8003eb4:	2bc0      	cmp	r3, #192	; 0xc0
 8003eb6:	d028      	beq.n	8003f0a <HAL_RCCEx_PeriphCLKConfig+0x196>
 8003eb8:	2bc0      	cmp	r3, #192	; 0xc0
 8003eba:	d821      	bhi.n	8003f00 <HAL_RCCEx_PeriphCLKConfig+0x18c>
 8003ebc:	2b80      	cmp	r3, #128	; 0x80
 8003ebe:	d016      	beq.n	8003eee <HAL_RCCEx_PeriphCLKConfig+0x17a>
 8003ec0:	2b80      	cmp	r3, #128	; 0x80
 8003ec2:	d81d      	bhi.n	8003f00 <HAL_RCCEx_PeriphCLKConfig+0x18c>
 8003ec4:	2b00      	cmp	r3, #0
 8003ec6:	d002      	beq.n	8003ece <HAL_RCCEx_PeriphCLKConfig+0x15a>
 8003ec8:	2b40      	cmp	r3, #64	; 0x40
 8003eca:	d007      	beq.n	8003edc <HAL_RCCEx_PeriphCLKConfig+0x168>
 8003ecc:	e018      	b.n	8003f00 <HAL_RCCEx_PeriphCLKConfig+0x18c>
    {
    case RCC_SAI23CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2/3 */
      /* Enable SAI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8003ece:	4b5e      	ldr	r3, [pc, #376]	; (8004048 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 8003ed0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003ed2:	4a5d      	ldr	r2, [pc, #372]	; (8004048 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 8003ed4:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8003ed8:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SAI2/3 clock source configuration done later after clock selection check */
      break;
 8003eda:	e017      	b.n	8003f0c <HAL_RCCEx_PeriphCLKConfig+0x198>

    case RCC_SAI23CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2/3 */

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8003edc:	687b      	ldr	r3, [r7, #4]
 8003ede:	3304      	adds	r3, #4
 8003ee0:	2100      	movs	r1, #0
 8003ee2:	4618      	mov	r0, r3
 8003ee4:	f000 fe8c 	bl	8004c00 <RCCEx_PLL2_Config>
 8003ee8:	4603      	mov	r3, r0
 8003eea:	75fb      	strb	r3, [r7, #23]

      /* SAI2/3 clock source configuration done later after clock selection check */
      break;
 8003eec:	e00e      	b.n	8003f0c <HAL_RCCEx_PeriphCLKConfig+0x198>

    case RCC_SAI23CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2/3 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 8003eee:	687b      	ldr	r3, [r7, #4]
 8003ef0:	3324      	adds	r3, #36	; 0x24
 8003ef2:	2100      	movs	r1, #0
 8003ef4:	4618      	mov	r0, r3
 8003ef6:	f000 ff35 	bl	8004d64 <RCCEx_PLL3_Config>
 8003efa:	4603      	mov	r3, r0
 8003efc:	75fb      	strb	r3, [r7, #23]

      /* SAI2/3 clock source configuration done later after clock selection check */
      break;
 8003efe:	e005      	b.n	8003f0c <HAL_RCCEx_PeriphCLKConfig+0x198>
      /* HSI, HSE, or CSI oscillator is used as source of SAI2/3 clock */
      /* SAI2/3 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8003f00:	2301      	movs	r3, #1
 8003f02:	75fb      	strb	r3, [r7, #23]
      break;
 8003f04:	e002      	b.n	8003f0c <HAL_RCCEx_PeriphCLKConfig+0x198>
      break;
 8003f06:	bf00      	nop
 8003f08:	e000      	b.n	8003f0c <HAL_RCCEx_PeriphCLKConfig+0x198>
      break;
 8003f0a:	bf00      	nop
    }

    if(ret == HAL_OK)
 8003f0c:	7dfb      	ldrb	r3, [r7, #23]
 8003f0e:	2b00      	cmp	r3, #0
 8003f10:	d109      	bne.n	8003f26 <HAL_RCCEx_PeriphCLKConfig+0x1b2>
    {
      /* Set the source of SAI2/3 clock*/
      __HAL_RCC_SAI23_CONFIG(PeriphClkInit->Sai23ClockSelection);
 8003f12:	4b4d      	ldr	r3, [pc, #308]	; (8004048 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 8003f14:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003f16:	f423 72e0 	bic.w	r2, r3, #448	; 0x1c0
 8003f1a:	687b      	ldr	r3, [r7, #4]
 8003f1c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003f1e:	494a      	ldr	r1, [pc, #296]	; (8004048 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 8003f20:	4313      	orrs	r3, r2
 8003f22:	650b      	str	r3, [r1, #80]	; 0x50
 8003f24:	e001      	b.n	8003f2a <HAL_RCCEx_PeriphCLKConfig+0x1b6>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003f26:	7dfb      	ldrb	r3, [r7, #23]
 8003f28:	75bb      	strb	r3, [r7, #22]
  }
#endif  /*SAI2B*/

#if defined(SAI4)
  /*---------------------------- SAI4A configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4A) == RCC_PERIPHCLK_SAI4A)
 8003f2a:	687b      	ldr	r3, [r7, #4]
 8003f2c:	681b      	ldr	r3, [r3, #0]
 8003f2e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003f32:	2b00      	cmp	r3, #0
 8003f34:	d049      	beq.n	8003fca <HAL_RCCEx_PeriphCLKConfig+0x256>
  {
    switch(PeriphClkInit->Sai4AClockSelection)
 8003f36:	687b      	ldr	r3, [r7, #4]
 8003f38:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 8003f3c:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8003f40:	d030      	beq.n	8003fa4 <HAL_RCCEx_PeriphCLKConfig+0x230>
 8003f42:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8003f46:	d82a      	bhi.n	8003f9e <HAL_RCCEx_PeriphCLKConfig+0x22a>
 8003f48:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 8003f4c:	d02c      	beq.n	8003fa8 <HAL_RCCEx_PeriphCLKConfig+0x234>
 8003f4e:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 8003f52:	d824      	bhi.n	8003f9e <HAL_RCCEx_PeriphCLKConfig+0x22a>
 8003f54:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8003f58:	d018      	beq.n	8003f8c <HAL_RCCEx_PeriphCLKConfig+0x218>
 8003f5a:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8003f5e:	d81e      	bhi.n	8003f9e <HAL_RCCEx_PeriphCLKConfig+0x22a>
 8003f60:	2b00      	cmp	r3, #0
 8003f62:	d003      	beq.n	8003f6c <HAL_RCCEx_PeriphCLKConfig+0x1f8>
 8003f64:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8003f68:	d007      	beq.n	8003f7a <HAL_RCCEx_PeriphCLKConfig+0x206>
 8003f6a:	e018      	b.n	8003f9e <HAL_RCCEx_PeriphCLKConfig+0x22a>
    {
    case RCC_SAI4ACLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8003f6c:	4b36      	ldr	r3, [pc, #216]	; (8004048 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 8003f6e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003f70:	4a35      	ldr	r2, [pc, #212]	; (8004048 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 8003f72:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8003f76:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 8003f78:	e017      	b.n	8003faa <HAL_RCCEx_PeriphCLKConfig+0x236>

    case RCC_SAI4ACLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8003f7a:	687b      	ldr	r3, [r7, #4]
 8003f7c:	3304      	adds	r3, #4
 8003f7e:	2100      	movs	r1, #0
 8003f80:	4618      	mov	r0, r3
 8003f82:	f000 fe3d 	bl	8004c00 <RCCEx_PLL2_Config>
 8003f86:	4603      	mov	r3, r0
 8003f88:	75fb      	strb	r3, [r7, #23]

      /* SAI2 clock source configuration done later after clock selection check */
      break;
 8003f8a:	e00e      	b.n	8003faa <HAL_RCCEx_PeriphCLKConfig+0x236>

    case RCC_SAI4ACLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 8003f8c:	687b      	ldr	r3, [r7, #4]
 8003f8e:	3324      	adds	r3, #36	; 0x24
 8003f90:	2100      	movs	r1, #0
 8003f92:	4618      	mov	r0, r3
 8003f94:	f000 fee6 	bl	8004d64 <RCCEx_PLL3_Config>
 8003f98:	4603      	mov	r3, r0
 8003f9a:	75fb      	strb	r3, [r7, #23]

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 8003f9c:	e005      	b.n	8003faa <HAL_RCCEx_PeriphCLKConfig+0x236>
      /* SAI4A clock source configuration done later after clock selection check */
      break;
#endif /* RCC_VER_3_0 */

    default:
      ret = HAL_ERROR;
 8003f9e:	2301      	movs	r3, #1
 8003fa0:	75fb      	strb	r3, [r7, #23]
      break;
 8003fa2:	e002      	b.n	8003faa <HAL_RCCEx_PeriphCLKConfig+0x236>
      break;
 8003fa4:	bf00      	nop
 8003fa6:	e000      	b.n	8003faa <HAL_RCCEx_PeriphCLKConfig+0x236>
      break;
 8003fa8:	bf00      	nop
    }

    if(ret == HAL_OK)
 8003faa:	7dfb      	ldrb	r3, [r7, #23]
 8003fac:	2b00      	cmp	r3, #0
 8003fae:	d10a      	bne.n	8003fc6 <HAL_RCCEx_PeriphCLKConfig+0x252>
    {
      /* Set the source of SAI4A clock*/
      __HAL_RCC_SAI4A_CONFIG(PeriphClkInit->Sai4AClockSelection);
 8003fb0:	4b25      	ldr	r3, [pc, #148]	; (8004048 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 8003fb2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003fb4:	f423 0260 	bic.w	r2, r3, #14680064	; 0xe00000
 8003fb8:	687b      	ldr	r3, [r7, #4]
 8003fba:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 8003fbe:	4922      	ldr	r1, [pc, #136]	; (8004048 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 8003fc0:	4313      	orrs	r3, r2
 8003fc2:	658b      	str	r3, [r1, #88]	; 0x58
 8003fc4:	e001      	b.n	8003fca <HAL_RCCEx_PeriphCLKConfig+0x256>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003fc6:	7dfb      	ldrb	r3, [r7, #23]
 8003fc8:	75bb      	strb	r3, [r7, #22]
    }
  }
  /*---------------------------- SAI4B configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4B) == RCC_PERIPHCLK_SAI4B)
 8003fca:	687b      	ldr	r3, [r7, #4]
 8003fcc:	681b      	ldr	r3, [r3, #0]
 8003fce:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8003fd2:	2b00      	cmp	r3, #0
 8003fd4:	d04b      	beq.n	800406e <HAL_RCCEx_PeriphCLKConfig+0x2fa>
  {
    switch(PeriphClkInit->Sai4BClockSelection)
 8003fd6:	687b      	ldr	r3, [r7, #4]
 8003fd8:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 8003fdc:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8003fe0:	d030      	beq.n	8004044 <HAL_RCCEx_PeriphCLKConfig+0x2d0>
 8003fe2:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8003fe6:	d82a      	bhi.n	800403e <HAL_RCCEx_PeriphCLKConfig+0x2ca>
 8003fe8:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 8003fec:	d02e      	beq.n	800404c <HAL_RCCEx_PeriphCLKConfig+0x2d8>
 8003fee:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 8003ff2:	d824      	bhi.n	800403e <HAL_RCCEx_PeriphCLKConfig+0x2ca>
 8003ff4:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8003ff8:	d018      	beq.n	800402c <HAL_RCCEx_PeriphCLKConfig+0x2b8>
 8003ffa:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8003ffe:	d81e      	bhi.n	800403e <HAL_RCCEx_PeriphCLKConfig+0x2ca>
 8004000:	2b00      	cmp	r3, #0
 8004002:	d003      	beq.n	800400c <HAL_RCCEx_PeriphCLKConfig+0x298>
 8004004:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8004008:	d007      	beq.n	800401a <HAL_RCCEx_PeriphCLKConfig+0x2a6>
 800400a:	e018      	b.n	800403e <HAL_RCCEx_PeriphCLKConfig+0x2ca>
    {
    case RCC_SAI4BCLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800400c:	4b0e      	ldr	r3, [pc, #56]	; (8004048 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 800400e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004010:	4a0d      	ldr	r2, [pc, #52]	; (8004048 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 8004012:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8004016:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 8004018:	e019      	b.n	800404e <HAL_RCCEx_PeriphCLKConfig+0x2da>

    case RCC_SAI4BCLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 800401a:	687b      	ldr	r3, [r7, #4]
 800401c:	3304      	adds	r3, #4
 800401e:	2100      	movs	r1, #0
 8004020:	4618      	mov	r0, r3
 8004022:	f000 fded 	bl	8004c00 <RCCEx_PLL2_Config>
 8004026:	4603      	mov	r3, r0
 8004028:	75fb      	strb	r3, [r7, #23]

      /* SAI2 clock source configuration done later after clock selection check */
      break;
 800402a:	e010      	b.n	800404e <HAL_RCCEx_PeriphCLKConfig+0x2da>

    case RCC_SAI4BCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 800402c:	687b      	ldr	r3, [r7, #4]
 800402e:	3324      	adds	r3, #36	; 0x24
 8004030:	2100      	movs	r1, #0
 8004032:	4618      	mov	r0, r3
 8004034:	f000 fe96 	bl	8004d64 <RCCEx_PLL3_Config>
 8004038:	4603      	mov	r3, r0
 800403a:	75fb      	strb	r3, [r7, #23]

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 800403c:	e007      	b.n	800404e <HAL_RCCEx_PeriphCLKConfig+0x2da>
      /* SAI4B clock source configuration done later after clock selection check */
      break;
#endif /* RCC_VER_3_0 */

    default:
      ret = HAL_ERROR;
 800403e:	2301      	movs	r3, #1
 8004040:	75fb      	strb	r3, [r7, #23]
      break;
 8004042:	e004      	b.n	800404e <HAL_RCCEx_PeriphCLKConfig+0x2da>
      break;
 8004044:	bf00      	nop
 8004046:	e002      	b.n	800404e <HAL_RCCEx_PeriphCLKConfig+0x2da>
 8004048:	58024400 	.word	0x58024400
      break;
 800404c:	bf00      	nop
    }

    if(ret == HAL_OK)
 800404e:	7dfb      	ldrb	r3, [r7, #23]
 8004050:	2b00      	cmp	r3, #0
 8004052:	d10a      	bne.n	800406a <HAL_RCCEx_PeriphCLKConfig+0x2f6>
    {
      /* Set the source of SAI4B clock*/
      __HAL_RCC_SAI4B_CONFIG(PeriphClkInit->Sai4BClockSelection);
 8004054:	4b99      	ldr	r3, [pc, #612]	; (80042bc <HAL_RCCEx_PeriphCLKConfig+0x548>)
 8004056:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004058:	f023 62e0 	bic.w	r2, r3, #117440512	; 0x7000000
 800405c:	687b      	ldr	r3, [r7, #4]
 800405e:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 8004062:	4996      	ldr	r1, [pc, #600]	; (80042bc <HAL_RCCEx_PeriphCLKConfig+0x548>)
 8004064:	4313      	orrs	r3, r2
 8004066:	658b      	str	r3, [r1, #88]	; 0x58
 8004068:	e001      	b.n	800406e <HAL_RCCEx_PeriphCLKConfig+0x2fa>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800406a:	7dfb      	ldrb	r3, [r7, #23]
 800406c:	75bb      	strb	r3, [r7, #22]
  }
#endif  /*SAI4*/

#if defined(QUADSPI)
  /*---------------------------- QSPI configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_QSPI) == RCC_PERIPHCLK_QSPI)
 800406e:	687b      	ldr	r3, [r7, #4]
 8004070:	681b      	ldr	r3, [r3, #0]
 8004072:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004076:	2b00      	cmp	r3, #0
 8004078:	d032      	beq.n	80040e0 <HAL_RCCEx_PeriphCLKConfig+0x36c>
  {
    switch(PeriphClkInit->QspiClockSelection)
 800407a:	687b      	ldr	r3, [r7, #4]
 800407c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800407e:	2b30      	cmp	r3, #48	; 0x30
 8004080:	d01c      	beq.n	80040bc <HAL_RCCEx_PeriphCLKConfig+0x348>
 8004082:	2b30      	cmp	r3, #48	; 0x30
 8004084:	d817      	bhi.n	80040b6 <HAL_RCCEx_PeriphCLKConfig+0x342>
 8004086:	2b20      	cmp	r3, #32
 8004088:	d00c      	beq.n	80040a4 <HAL_RCCEx_PeriphCLKConfig+0x330>
 800408a:	2b20      	cmp	r3, #32
 800408c:	d813      	bhi.n	80040b6 <HAL_RCCEx_PeriphCLKConfig+0x342>
 800408e:	2b00      	cmp	r3, #0
 8004090:	d016      	beq.n	80040c0 <HAL_RCCEx_PeriphCLKConfig+0x34c>
 8004092:	2b10      	cmp	r3, #16
 8004094:	d10f      	bne.n	80040b6 <HAL_RCCEx_PeriphCLKConfig+0x342>
    {
    case RCC_QSPICLKSOURCE_PLL:      /* PLL is used as clock source for QSPI*/
      /* Enable QSPI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8004096:	4b89      	ldr	r3, [pc, #548]	; (80042bc <HAL_RCCEx_PeriphCLKConfig+0x548>)
 8004098:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800409a:	4a88      	ldr	r2, [pc, #544]	; (80042bc <HAL_RCCEx_PeriphCLKConfig+0x548>)
 800409c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80040a0:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* QSPI clock source configuration done later after clock selection check */
      break;
 80040a2:	e00e      	b.n	80040c2 <HAL_RCCEx_PeriphCLKConfig+0x34e>

    case RCC_QSPICLKSOURCE_PLL2: /* PLL2 is used as clock source for QSPI*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 80040a4:	687b      	ldr	r3, [r7, #4]
 80040a6:	3304      	adds	r3, #4
 80040a8:	2102      	movs	r1, #2
 80040aa:	4618      	mov	r0, r3
 80040ac:	f000 fda8 	bl	8004c00 <RCCEx_PLL2_Config>
 80040b0:	4603      	mov	r3, r0
 80040b2:	75fb      	strb	r3, [r7, #23]

      /* QSPI clock source configuration done later after clock selection check */
      break;
 80040b4:	e005      	b.n	80040c2 <HAL_RCCEx_PeriphCLKConfig+0x34e>
    case RCC_QSPICLKSOURCE_D1HCLK:
      /* Domain1 HCLK  clock selected as QSPI kernel peripheral clock */
      break;

    default:
      ret = HAL_ERROR;
 80040b6:	2301      	movs	r3, #1
 80040b8:	75fb      	strb	r3, [r7, #23]
      break;
 80040ba:	e002      	b.n	80040c2 <HAL_RCCEx_PeriphCLKConfig+0x34e>
      break;
 80040bc:	bf00      	nop
 80040be:	e000      	b.n	80040c2 <HAL_RCCEx_PeriphCLKConfig+0x34e>
      break;
 80040c0:	bf00      	nop
    }

    if(ret == HAL_OK)
 80040c2:	7dfb      	ldrb	r3, [r7, #23]
 80040c4:	2b00      	cmp	r3, #0
 80040c6:	d109      	bne.n	80040dc <HAL_RCCEx_PeriphCLKConfig+0x368>
    {
      /* Set the source of QSPI clock*/
      __HAL_RCC_QSPI_CONFIG(PeriphClkInit->QspiClockSelection);
 80040c8:	4b7c      	ldr	r3, [pc, #496]	; (80042bc <HAL_RCCEx_PeriphCLKConfig+0x548>)
 80040ca:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80040cc:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 80040d0:	687b      	ldr	r3, [r7, #4]
 80040d2:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80040d4:	4979      	ldr	r1, [pc, #484]	; (80042bc <HAL_RCCEx_PeriphCLKConfig+0x548>)
 80040d6:	4313      	orrs	r3, r2
 80040d8:	64cb      	str	r3, [r1, #76]	; 0x4c
 80040da:	e001      	b.n	80040e0 <HAL_RCCEx_PeriphCLKConfig+0x36c>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80040dc:	7dfb      	ldrb	r3, [r7, #23]
 80040de:	75bb      	strb	r3, [r7, #22]
    }
  }
#endif  /*OCTOSPI*/

  /*---------------------------- SPI1/2/3 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI123) == RCC_PERIPHCLK_SPI123)
 80040e0:	687b      	ldr	r3, [r7, #4]
 80040e2:	681b      	ldr	r3, [r3, #0]
 80040e4:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80040e8:	2b00      	cmp	r3, #0
 80040ea:	d047      	beq.n	800417c <HAL_RCCEx_PeriphCLKConfig+0x408>
  {
    switch(PeriphClkInit->Spi123ClockSelection)
 80040ec:	687b      	ldr	r3, [r7, #4]
 80040ee:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80040f0:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80040f4:	d030      	beq.n	8004158 <HAL_RCCEx_PeriphCLKConfig+0x3e4>
 80040f6:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80040fa:	d82a      	bhi.n	8004152 <HAL_RCCEx_PeriphCLKConfig+0x3de>
 80040fc:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8004100:	d02c      	beq.n	800415c <HAL_RCCEx_PeriphCLKConfig+0x3e8>
 8004102:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8004106:	d824      	bhi.n	8004152 <HAL_RCCEx_PeriphCLKConfig+0x3de>
 8004108:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800410c:	d018      	beq.n	8004140 <HAL_RCCEx_PeriphCLKConfig+0x3cc>
 800410e:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8004112:	d81e      	bhi.n	8004152 <HAL_RCCEx_PeriphCLKConfig+0x3de>
 8004114:	2b00      	cmp	r3, #0
 8004116:	d003      	beq.n	8004120 <HAL_RCCEx_PeriphCLKConfig+0x3ac>
 8004118:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800411c:	d007      	beq.n	800412e <HAL_RCCEx_PeriphCLKConfig+0x3ba>
 800411e:	e018      	b.n	8004152 <HAL_RCCEx_PeriphCLKConfig+0x3de>
    {
    case RCC_SPI123CLKSOURCE_PLL:      /* PLL is used as clock source for SPI1/2/3 */
      /* Enable SPI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8004120:	4b66      	ldr	r3, [pc, #408]	; (80042bc <HAL_RCCEx_PeriphCLKConfig+0x548>)
 8004122:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004124:	4a65      	ldr	r2, [pc, #404]	; (80042bc <HAL_RCCEx_PeriphCLKConfig+0x548>)
 8004126:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800412a:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SPI1/2/3 clock source configuration done later after clock selection check */
      break;
 800412c:	e017      	b.n	800415e <HAL_RCCEx_PeriphCLKConfig+0x3ea>

    case RCC_SPI123CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI1/2/3 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 800412e:	687b      	ldr	r3, [r7, #4]
 8004130:	3304      	adds	r3, #4
 8004132:	2100      	movs	r1, #0
 8004134:	4618      	mov	r0, r3
 8004136:	f000 fd63 	bl	8004c00 <RCCEx_PLL2_Config>
 800413a:	4603      	mov	r3, r0
 800413c:	75fb      	strb	r3, [r7, #23]

      /* SPI1/2/3 clock source configuration done later after clock selection check */
      break;
 800413e:	e00e      	b.n	800415e <HAL_RCCEx_PeriphCLKConfig+0x3ea>

    case RCC_SPI123CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI1/2/3 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 8004140:	687b      	ldr	r3, [r7, #4]
 8004142:	3324      	adds	r3, #36	; 0x24
 8004144:	2100      	movs	r1, #0
 8004146:	4618      	mov	r0, r3
 8004148:	f000 fe0c 	bl	8004d64 <RCCEx_PLL3_Config>
 800414c:	4603      	mov	r3, r0
 800414e:	75fb      	strb	r3, [r7, #23]

      /* SPI1/2/3 clock source configuration done later after clock selection check */
      break;
 8004150:	e005      	b.n	800415e <HAL_RCCEx_PeriphCLKConfig+0x3ea>
      /* HSI, HSE, or CSI oscillator is used as source of SPI1/2/3 clock */
      /* SPI1/2/3 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8004152:	2301      	movs	r3, #1
 8004154:	75fb      	strb	r3, [r7, #23]
      break;
 8004156:	e002      	b.n	800415e <HAL_RCCEx_PeriphCLKConfig+0x3ea>
      break;
 8004158:	bf00      	nop
 800415a:	e000      	b.n	800415e <HAL_RCCEx_PeriphCLKConfig+0x3ea>
      break;
 800415c:	bf00      	nop
    }

    if(ret == HAL_OK)
 800415e:	7dfb      	ldrb	r3, [r7, #23]
 8004160:	2b00      	cmp	r3, #0
 8004162:	d109      	bne.n	8004178 <HAL_RCCEx_PeriphCLKConfig+0x404>
    {
      /* Set the source of SPI1/2/3 clock*/
      __HAL_RCC_SPI123_CONFIG(PeriphClkInit->Spi123ClockSelection);
 8004164:	4b55      	ldr	r3, [pc, #340]	; (80042bc <HAL_RCCEx_PeriphCLKConfig+0x548>)
 8004166:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004168:	f423 42e0 	bic.w	r2, r3, #28672	; 0x7000
 800416c:	687b      	ldr	r3, [r7, #4]
 800416e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004170:	4952      	ldr	r1, [pc, #328]	; (80042bc <HAL_RCCEx_PeriphCLKConfig+0x548>)
 8004172:	4313      	orrs	r3, r2
 8004174:	650b      	str	r3, [r1, #80]	; 0x50
 8004176:	e001      	b.n	800417c <HAL_RCCEx_PeriphCLKConfig+0x408>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004178:	7dfb      	ldrb	r3, [r7, #23]
 800417a:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- SPI4/5 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI45) == RCC_PERIPHCLK_SPI45)
 800417c:	687b      	ldr	r3, [r7, #4]
 800417e:	681b      	ldr	r3, [r3, #0]
 8004180:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8004184:	2b00      	cmp	r3, #0
 8004186:	d049      	beq.n	800421c <HAL_RCCEx_PeriphCLKConfig+0x4a8>
  {
    switch(PeriphClkInit->Spi45ClockSelection)
 8004188:	687b      	ldr	r3, [r7, #4]
 800418a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800418c:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8004190:	d02e      	beq.n	80041f0 <HAL_RCCEx_PeriphCLKConfig+0x47c>
 8004192:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8004196:	d828      	bhi.n	80041ea <HAL_RCCEx_PeriphCLKConfig+0x476>
 8004198:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 800419c:	d02a      	beq.n	80041f4 <HAL_RCCEx_PeriphCLKConfig+0x480>
 800419e:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 80041a2:	d822      	bhi.n	80041ea <HAL_RCCEx_PeriphCLKConfig+0x476>
 80041a4:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 80041a8:	d026      	beq.n	80041f8 <HAL_RCCEx_PeriphCLKConfig+0x484>
 80041aa:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 80041ae:	d81c      	bhi.n	80041ea <HAL_RCCEx_PeriphCLKConfig+0x476>
 80041b0:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 80041b4:	d010      	beq.n	80041d8 <HAL_RCCEx_PeriphCLKConfig+0x464>
 80041b6:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 80041ba:	d816      	bhi.n	80041ea <HAL_RCCEx_PeriphCLKConfig+0x476>
 80041bc:	2b00      	cmp	r3, #0
 80041be:	d01d      	beq.n	80041fc <HAL_RCCEx_PeriphCLKConfig+0x488>
 80041c0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80041c4:	d111      	bne.n	80041ea <HAL_RCCEx_PeriphCLKConfig+0x476>
      /* SPI4/5 clock source configuration done later after clock selection check */
      break;

    case RCC_SPI45CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI4/5 */

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 80041c6:	687b      	ldr	r3, [r7, #4]
 80041c8:	3304      	adds	r3, #4
 80041ca:	2101      	movs	r1, #1
 80041cc:	4618      	mov	r0, r3
 80041ce:	f000 fd17 	bl	8004c00 <RCCEx_PLL2_Config>
 80041d2:	4603      	mov	r3, r0
 80041d4:	75fb      	strb	r3, [r7, #23]

      /* SPI4/5 clock source configuration done later after clock selection check */
      break;
 80041d6:	e012      	b.n	80041fe <HAL_RCCEx_PeriphCLKConfig+0x48a>
    case RCC_SPI45CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI4/5 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 80041d8:	687b      	ldr	r3, [r7, #4]
 80041da:	3324      	adds	r3, #36	; 0x24
 80041dc:	2101      	movs	r1, #1
 80041de:	4618      	mov	r0, r3
 80041e0:	f000 fdc0 	bl	8004d64 <RCCEx_PLL3_Config>
 80041e4:	4603      	mov	r3, r0
 80041e6:	75fb      	strb	r3, [r7, #23]
      /* SPI4/5 clock source configuration done later after clock selection check */
      break;
 80041e8:	e009      	b.n	80041fe <HAL_RCCEx_PeriphCLKConfig+0x48a>
      /* HSE,  oscillator is used as source of SPI4/5 clock */
      /* SPI4/5 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80041ea:	2301      	movs	r3, #1
 80041ec:	75fb      	strb	r3, [r7, #23]
      break;
 80041ee:	e006      	b.n	80041fe <HAL_RCCEx_PeriphCLKConfig+0x48a>
      break;
 80041f0:	bf00      	nop
 80041f2:	e004      	b.n	80041fe <HAL_RCCEx_PeriphCLKConfig+0x48a>
      break;
 80041f4:	bf00      	nop
 80041f6:	e002      	b.n	80041fe <HAL_RCCEx_PeriphCLKConfig+0x48a>
      break;
 80041f8:	bf00      	nop
 80041fa:	e000      	b.n	80041fe <HAL_RCCEx_PeriphCLKConfig+0x48a>
      break;
 80041fc:	bf00      	nop
    }

    if(ret == HAL_OK)
 80041fe:	7dfb      	ldrb	r3, [r7, #23]
 8004200:	2b00      	cmp	r3, #0
 8004202:	d109      	bne.n	8004218 <HAL_RCCEx_PeriphCLKConfig+0x4a4>
    {
      /* Set the source of SPI4/5 clock*/
      __HAL_RCC_SPI45_CONFIG(PeriphClkInit->Spi45ClockSelection);
 8004204:	4b2d      	ldr	r3, [pc, #180]	; (80042bc <HAL_RCCEx_PeriphCLKConfig+0x548>)
 8004206:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004208:	f423 22e0 	bic.w	r2, r3, #458752	; 0x70000
 800420c:	687b      	ldr	r3, [r7, #4]
 800420e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004210:	492a      	ldr	r1, [pc, #168]	; (80042bc <HAL_RCCEx_PeriphCLKConfig+0x548>)
 8004212:	4313      	orrs	r3, r2
 8004214:	650b      	str	r3, [r1, #80]	; 0x50
 8004216:	e001      	b.n	800421c <HAL_RCCEx_PeriphCLKConfig+0x4a8>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004218:	7dfb      	ldrb	r3, [r7, #23]
 800421a:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- SPI6 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI6) == RCC_PERIPHCLK_SPI6)
 800421c:	687b      	ldr	r3, [r7, #4]
 800421e:	681b      	ldr	r3, [r3, #0]
 8004220:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8004224:	2b00      	cmp	r3, #0
 8004226:	d04d      	beq.n	80042c4 <HAL_RCCEx_PeriphCLKConfig+0x550>
  {
    switch(PeriphClkInit->Spi6ClockSelection)
 8004228:	687b      	ldr	r3, [r7, #4]
 800422a:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 800422e:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8004232:	d02e      	beq.n	8004292 <HAL_RCCEx_PeriphCLKConfig+0x51e>
 8004234:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8004238:	d828      	bhi.n	800428c <HAL_RCCEx_PeriphCLKConfig+0x518>
 800423a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800423e:	d02a      	beq.n	8004296 <HAL_RCCEx_PeriphCLKConfig+0x522>
 8004240:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004244:	d822      	bhi.n	800428c <HAL_RCCEx_PeriphCLKConfig+0x518>
 8004246:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 800424a:	d026      	beq.n	800429a <HAL_RCCEx_PeriphCLKConfig+0x526>
 800424c:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 8004250:	d81c      	bhi.n	800428c <HAL_RCCEx_PeriphCLKConfig+0x518>
 8004252:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8004256:	d010      	beq.n	800427a <HAL_RCCEx_PeriphCLKConfig+0x506>
 8004258:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800425c:	d816      	bhi.n	800428c <HAL_RCCEx_PeriphCLKConfig+0x518>
 800425e:	2b00      	cmp	r3, #0
 8004260:	d01d      	beq.n	800429e <HAL_RCCEx_PeriphCLKConfig+0x52a>
 8004262:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8004266:	d111      	bne.n	800428c <HAL_RCCEx_PeriphCLKConfig+0x518>
      /* SPI6 clock source configuration done later after clock selection check */
      break;

    case RCC_SPI6CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI6*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 8004268:	687b      	ldr	r3, [r7, #4]
 800426a:	3304      	adds	r3, #4
 800426c:	2101      	movs	r1, #1
 800426e:	4618      	mov	r0, r3
 8004270:	f000 fcc6 	bl	8004c00 <RCCEx_PLL2_Config>
 8004274:	4603      	mov	r3, r0
 8004276:	75fb      	strb	r3, [r7, #23]

      /* SPI6 clock source configuration done later after clock selection check */
      break;
 8004278:	e012      	b.n	80042a0 <HAL_RCCEx_PeriphCLKConfig+0x52c>
    case RCC_SPI6CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI6*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 800427a:	687b      	ldr	r3, [r7, #4]
 800427c:	3324      	adds	r3, #36	; 0x24
 800427e:	2101      	movs	r1, #1
 8004280:	4618      	mov	r0, r3
 8004282:	f000 fd6f 	bl	8004d64 <RCCEx_PLL3_Config>
 8004286:	4603      	mov	r3, r0
 8004288:	75fb      	strb	r3, [r7, #23]
      /* SPI6 clock source configuration done later after clock selection check */
      break;
 800428a:	e009      	b.n	80042a0 <HAL_RCCEx_PeriphCLKConfig+0x52c>
      /* SPI6 clock source configuration done later after clock selection check */
      break;
#endif

    default:
      ret = HAL_ERROR;
 800428c:	2301      	movs	r3, #1
 800428e:	75fb      	strb	r3, [r7, #23]
      break;
 8004290:	e006      	b.n	80042a0 <HAL_RCCEx_PeriphCLKConfig+0x52c>
      break;
 8004292:	bf00      	nop
 8004294:	e004      	b.n	80042a0 <HAL_RCCEx_PeriphCLKConfig+0x52c>
      break;
 8004296:	bf00      	nop
 8004298:	e002      	b.n	80042a0 <HAL_RCCEx_PeriphCLKConfig+0x52c>
      break;
 800429a:	bf00      	nop
 800429c:	e000      	b.n	80042a0 <HAL_RCCEx_PeriphCLKConfig+0x52c>
      break;
 800429e:	bf00      	nop
    }

    if(ret == HAL_OK)
 80042a0:	7dfb      	ldrb	r3, [r7, #23]
 80042a2:	2b00      	cmp	r3, #0
 80042a4:	d10c      	bne.n	80042c0 <HAL_RCCEx_PeriphCLKConfig+0x54c>
    {
      /* Set the source of SPI6 clock*/
      __HAL_RCC_SPI6_CONFIG(PeriphClkInit->Spi6ClockSelection);
 80042a6:	4b05      	ldr	r3, [pc, #20]	; (80042bc <HAL_RCCEx_PeriphCLKConfig+0x548>)
 80042a8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80042aa:	f023 42e0 	bic.w	r2, r3, #1879048192	; 0x70000000
 80042ae:	687b      	ldr	r3, [r7, #4]
 80042b0:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 80042b4:	4901      	ldr	r1, [pc, #4]	; (80042bc <HAL_RCCEx_PeriphCLKConfig+0x548>)
 80042b6:	4313      	orrs	r3, r2
 80042b8:	658b      	str	r3, [r1, #88]	; 0x58
 80042ba:	e003      	b.n	80042c4 <HAL_RCCEx_PeriphCLKConfig+0x550>
 80042bc:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 80042c0:	7dfb      	ldrb	r3, [r7, #23]
 80042c2:	75bb      	strb	r3, [r7, #22]
  }
#endif /*DSI*/

#if defined(FDCAN1) || defined(FDCAN2)
  /*---------------------------- FDCAN configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 80042c4:	687b      	ldr	r3, [r7, #4]
 80042c6:	681b      	ldr	r3, [r3, #0]
 80042c8:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80042cc:	2b00      	cmp	r3, #0
 80042ce:	d02f      	beq.n	8004330 <HAL_RCCEx_PeriphCLKConfig+0x5bc>
  {
    switch(PeriphClkInit->FdcanClockSelection)
 80042d0:	687b      	ldr	r3, [r7, #4]
 80042d2:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80042d4:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80042d8:	d00e      	beq.n	80042f8 <HAL_RCCEx_PeriphCLKConfig+0x584>
 80042da:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80042de:	d814      	bhi.n	800430a <HAL_RCCEx_PeriphCLKConfig+0x596>
 80042e0:	2b00      	cmp	r3, #0
 80042e2:	d015      	beq.n	8004310 <HAL_RCCEx_PeriphCLKConfig+0x59c>
 80042e4:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 80042e8:	d10f      	bne.n	800430a <HAL_RCCEx_PeriphCLKConfig+0x596>
    {
    case RCC_FDCANCLKSOURCE_PLL:      /* PLL is used as clock source for FDCAN*/
      /* Enable FDCAN Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80042ea:	4baf      	ldr	r3, [pc, #700]	; (80045a8 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 80042ec:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80042ee:	4aae      	ldr	r2, [pc, #696]	; (80045a8 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 80042f0:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80042f4:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* FDCAN clock source configuration done later after clock selection check */
      break;
 80042f6:	e00c      	b.n	8004312 <HAL_RCCEx_PeriphCLKConfig+0x59e>

    case RCC_FDCANCLKSOURCE_PLL2: /* PLL2 is used as clock source for FDCAN*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 80042f8:	687b      	ldr	r3, [r7, #4]
 80042fa:	3304      	adds	r3, #4
 80042fc:	2101      	movs	r1, #1
 80042fe:	4618      	mov	r0, r3
 8004300:	f000 fc7e 	bl	8004c00 <RCCEx_PLL2_Config>
 8004304:	4603      	mov	r3, r0
 8004306:	75fb      	strb	r3, [r7, #23]

      /* FDCAN clock source configuration done later after clock selection check */
      break;
 8004308:	e003      	b.n	8004312 <HAL_RCCEx_PeriphCLKConfig+0x59e>
      /* HSE is used as clock source for FDCAN*/
      /* FDCAN clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800430a:	2301      	movs	r3, #1
 800430c:	75fb      	strb	r3, [r7, #23]
      break;
 800430e:	e000      	b.n	8004312 <HAL_RCCEx_PeriphCLKConfig+0x59e>
      break;
 8004310:	bf00      	nop
    }

    if(ret == HAL_OK)
 8004312:	7dfb      	ldrb	r3, [r7, #23]
 8004314:	2b00      	cmp	r3, #0
 8004316:	d109      	bne.n	800432c <HAL_RCCEx_PeriphCLKConfig+0x5b8>
    {
      /* Set the source of FDCAN clock*/
      __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 8004318:	4ba3      	ldr	r3, [pc, #652]	; (80045a8 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 800431a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800431c:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 8004320:	687b      	ldr	r3, [r7, #4]
 8004322:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8004324:	49a0      	ldr	r1, [pc, #640]	; (80045a8 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 8004326:	4313      	orrs	r3, r2
 8004328:	650b      	str	r3, [r1, #80]	; 0x50
 800432a:	e001      	b.n	8004330 <HAL_RCCEx_PeriphCLKConfig+0x5bc>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800432c:	7dfb      	ldrb	r3, [r7, #23]
 800432e:	75bb      	strb	r3, [r7, #22]
    }
  }
#endif /*FDCAN1 || FDCAN2*/

  /*---------------------------- FMC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FMC) == RCC_PERIPHCLK_FMC)
 8004330:	687b      	ldr	r3, [r7, #4]
 8004332:	681b      	ldr	r3, [r3, #0]
 8004334:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8004338:	2b00      	cmp	r3, #0
 800433a:	d032      	beq.n	80043a2 <HAL_RCCEx_PeriphCLKConfig+0x62e>
  {
    switch(PeriphClkInit->FmcClockSelection)
 800433c:	687b      	ldr	r3, [r7, #4]
 800433e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004340:	2b03      	cmp	r3, #3
 8004342:	d81b      	bhi.n	800437c <HAL_RCCEx_PeriphCLKConfig+0x608>
 8004344:	a201      	add	r2, pc, #4	; (adr r2, 800434c <HAL_RCCEx_PeriphCLKConfig+0x5d8>)
 8004346:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800434a:	bf00      	nop
 800434c:	08004383 	.word	0x08004383
 8004350:	0800435d 	.word	0x0800435d
 8004354:	0800436b 	.word	0x0800436b
 8004358:	08004383 	.word	0x08004383
    {
    case RCC_FMCCLKSOURCE_PLL:      /* PLL is used as clock source for FMC*/
      /* Enable FMC Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800435c:	4b92      	ldr	r3, [pc, #584]	; (80045a8 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 800435e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004360:	4a91      	ldr	r2, [pc, #580]	; (80045a8 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 8004362:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8004366:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* FMC clock source configuration done later after clock selection check */
      break;
 8004368:	e00c      	b.n	8004384 <HAL_RCCEx_PeriphCLKConfig+0x610>

    case RCC_FMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for FMC*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 800436a:	687b      	ldr	r3, [r7, #4]
 800436c:	3304      	adds	r3, #4
 800436e:	2102      	movs	r1, #2
 8004370:	4618      	mov	r0, r3
 8004372:	f000 fc45 	bl	8004c00 <RCCEx_PLL2_Config>
 8004376:	4603      	mov	r3, r0
 8004378:	75fb      	strb	r3, [r7, #23]

      /* FMC clock source configuration done later after clock selection check */
      break;
 800437a:	e003      	b.n	8004384 <HAL_RCCEx_PeriphCLKConfig+0x610>
    case RCC_FMCCLKSOURCE_HCLK:
      /* D1/CD HCLK  clock selected as FMC kernel peripheral clock */
      break;

    default:
      ret = HAL_ERROR;
 800437c:	2301      	movs	r3, #1
 800437e:	75fb      	strb	r3, [r7, #23]
      break;
 8004380:	e000      	b.n	8004384 <HAL_RCCEx_PeriphCLKConfig+0x610>
      break;
 8004382:	bf00      	nop
    }

    if(ret == HAL_OK)
 8004384:	7dfb      	ldrb	r3, [r7, #23]
 8004386:	2b00      	cmp	r3, #0
 8004388:	d109      	bne.n	800439e <HAL_RCCEx_PeriphCLKConfig+0x62a>
    {
      /* Set the source of FMC clock*/
      __HAL_RCC_FMC_CONFIG(PeriphClkInit->FmcClockSelection);
 800438a:	4b87      	ldr	r3, [pc, #540]	; (80045a8 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 800438c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800438e:	f023 0203 	bic.w	r2, r3, #3
 8004392:	687b      	ldr	r3, [r7, #4]
 8004394:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004396:	4984      	ldr	r1, [pc, #528]	; (80045a8 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 8004398:	4313      	orrs	r3, r2
 800439a:	64cb      	str	r3, [r1, #76]	; 0x4c
 800439c:	e001      	b.n	80043a2 <HAL_RCCEx_PeriphCLKConfig+0x62e>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800439e:	7dfb      	ldrb	r3, [r7, #23]
 80043a0:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- RTC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 80043a2:	687b      	ldr	r3, [r7, #4]
 80043a4:	681b      	ldr	r3, [r3, #0]
 80043a6:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80043aa:	2b00      	cmp	r3, #0
 80043ac:	f000 8086 	beq.w	80044bc <HAL_RCCEx_PeriphCLKConfig+0x748>
  {
    /* check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80043b0:	4b7e      	ldr	r3, [pc, #504]	; (80045ac <HAL_RCCEx_PeriphCLKConfig+0x838>)
 80043b2:	681b      	ldr	r3, [r3, #0]
 80043b4:	4a7d      	ldr	r2, [pc, #500]	; (80045ac <HAL_RCCEx_PeriphCLKConfig+0x838>)
 80043b6:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80043ba:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 80043bc:	f7fc fcb8 	bl	8000d30 <HAL_GetTick>
 80043c0:	6138      	str	r0, [r7, #16]

    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 80043c2:	e009      	b.n	80043d8 <HAL_RCCEx_PeriphCLKConfig+0x664>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80043c4:	f7fc fcb4 	bl	8000d30 <HAL_GetTick>
 80043c8:	4602      	mov	r2, r0
 80043ca:	693b      	ldr	r3, [r7, #16]
 80043cc:	1ad3      	subs	r3, r2, r3
 80043ce:	2b64      	cmp	r3, #100	; 0x64
 80043d0:	d902      	bls.n	80043d8 <HAL_RCCEx_PeriphCLKConfig+0x664>
      {
        ret = HAL_TIMEOUT;
 80043d2:	2303      	movs	r3, #3
 80043d4:	75fb      	strb	r3, [r7, #23]
        break;
 80043d6:	e005      	b.n	80043e4 <HAL_RCCEx_PeriphCLKConfig+0x670>
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 80043d8:	4b74      	ldr	r3, [pc, #464]	; (80045ac <HAL_RCCEx_PeriphCLKConfig+0x838>)
 80043da:	681b      	ldr	r3, [r3, #0]
 80043dc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80043e0:	2b00      	cmp	r3, #0
 80043e2:	d0ef      	beq.n	80043c4 <HAL_RCCEx_PeriphCLKConfig+0x650>
      }
    }

    if(ret == HAL_OK)
 80043e4:	7dfb      	ldrb	r3, [r7, #23]
 80043e6:	2b00      	cmp	r3, #0
 80043e8:	d166      	bne.n	80044b8 <HAL_RCCEx_PeriphCLKConfig+0x744>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified */
      if((RCC->BDCR & RCC_BDCR_RTCSEL) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL))
 80043ea:	4b6f      	ldr	r3, [pc, #444]	; (80045a8 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 80043ec:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 80043ee:	687b      	ldr	r3, [r7, #4]
 80043f0:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 80043f4:	4053      	eors	r3, r2
 80043f6:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80043fa:	2b00      	cmp	r3, #0
 80043fc:	d013      	beq.n	8004426 <HAL_RCCEx_PeriphCLKConfig+0x6b2>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpreg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 80043fe:	4b6a      	ldr	r3, [pc, #424]	; (80045a8 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 8004400:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004402:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004406:	60fb      	str	r3, [r7, #12]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8004408:	4b67      	ldr	r3, [pc, #412]	; (80045a8 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 800440a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800440c:	4a66      	ldr	r2, [pc, #408]	; (80045a8 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 800440e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004412:	6713      	str	r3, [r2, #112]	; 0x70
        __HAL_RCC_BACKUPRESET_RELEASE();
 8004414:	4b64      	ldr	r3, [pc, #400]	; (80045a8 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 8004416:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004418:	4a63      	ldr	r2, [pc, #396]	; (80045a8 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 800441a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800441e:	6713      	str	r3, [r2, #112]	; 0x70
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpreg;
 8004420:	4a61      	ldr	r2, [pc, #388]	; (80045a8 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 8004422:	68fb      	ldr	r3, [r7, #12]
 8004424:	6713      	str	r3, [r2, #112]	; 0x70
      }

      /* If LSE is selected as RTC clock source (and enabled prior to Backup Domain reset), wait for LSE reactivation */
      if(PeriphClkInit->RTCClockSelection == RCC_RTCCLKSOURCE_LSE)
 8004426:	687b      	ldr	r3, [r7, #4]
 8004428:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 800442c:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8004430:	d115      	bne.n	800445e <HAL_RCCEx_PeriphCLKConfig+0x6ea>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004432:	f7fc fc7d 	bl	8000d30 <HAL_GetTick>
 8004436:	6138      	str	r0, [r7, #16]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8004438:	e00b      	b.n	8004452 <HAL_RCCEx_PeriphCLKConfig+0x6de>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800443a:	f7fc fc79 	bl	8000d30 <HAL_GetTick>
 800443e:	4602      	mov	r2, r0
 8004440:	693b      	ldr	r3, [r7, #16]
 8004442:	1ad3      	subs	r3, r2, r3
 8004444:	f241 3288 	movw	r2, #5000	; 0x1388
 8004448:	4293      	cmp	r3, r2
 800444a:	d902      	bls.n	8004452 <HAL_RCCEx_PeriphCLKConfig+0x6de>
          {
            ret = HAL_TIMEOUT;
 800444c:	2303      	movs	r3, #3
 800444e:	75fb      	strb	r3, [r7, #23]
            break;
 8004450:	e005      	b.n	800445e <HAL_RCCEx_PeriphCLKConfig+0x6ea>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8004452:	4b55      	ldr	r3, [pc, #340]	; (80045a8 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 8004454:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004456:	f003 0302 	and.w	r3, r3, #2
 800445a:	2b00      	cmp	r3, #0
 800445c:	d0ed      	beq.n	800443a <HAL_RCCEx_PeriphCLKConfig+0x6c6>
          }
        }
      }

      if(ret == HAL_OK)
 800445e:	7dfb      	ldrb	r3, [r7, #23]
 8004460:	2b00      	cmp	r3, #0
 8004462:	d126      	bne.n	80044b2 <HAL_RCCEx_PeriphCLKConfig+0x73e>
      {
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8004464:	687b      	ldr	r3, [r7, #4]
 8004466:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 800446a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800446e:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8004472:	d10d      	bne.n	8004490 <HAL_RCCEx_PeriphCLKConfig+0x71c>
 8004474:	4b4c      	ldr	r3, [pc, #304]	; (80045a8 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 8004476:	691b      	ldr	r3, [r3, #16]
 8004478:	f423 527c 	bic.w	r2, r3, #16128	; 0x3f00
 800447c:	687b      	ldr	r3, [r7, #4]
 800447e:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8004482:	0919      	lsrs	r1, r3, #4
 8004484:	4b4a      	ldr	r3, [pc, #296]	; (80045b0 <HAL_RCCEx_PeriphCLKConfig+0x83c>)
 8004486:	400b      	ands	r3, r1
 8004488:	4947      	ldr	r1, [pc, #284]	; (80045a8 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 800448a:	4313      	orrs	r3, r2
 800448c:	610b      	str	r3, [r1, #16]
 800448e:	e005      	b.n	800449c <HAL_RCCEx_PeriphCLKConfig+0x728>
 8004490:	4b45      	ldr	r3, [pc, #276]	; (80045a8 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 8004492:	691b      	ldr	r3, [r3, #16]
 8004494:	4a44      	ldr	r2, [pc, #272]	; (80045a8 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 8004496:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 800449a:	6113      	str	r3, [r2, #16]
 800449c:	4b42      	ldr	r3, [pc, #264]	; (80045a8 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 800449e:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 80044a0:	687b      	ldr	r3, [r7, #4]
 80044a2:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 80044a6:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80044aa:	493f      	ldr	r1, [pc, #252]	; (80045a8 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 80044ac:	4313      	orrs	r3, r2
 80044ae:	670b      	str	r3, [r1, #112]	; 0x70
 80044b0:	e004      	b.n	80044bc <HAL_RCCEx_PeriphCLKConfig+0x748>
      }
      else
      {
        /* set overall return value */
        status = ret;
 80044b2:	7dfb      	ldrb	r3, [r7, #23]
 80044b4:	75bb      	strb	r3, [r7, #22]
 80044b6:	e001      	b.n	80044bc <HAL_RCCEx_PeriphCLKConfig+0x748>
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 80044b8:	7dfb      	ldrb	r3, [r7, #23]
 80044ba:	75bb      	strb	r3, [r7, #22]
    }
  }


  /*-------------------------- USART1/6 configuration --------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART16) == RCC_PERIPHCLK_USART16)
 80044bc:	687b      	ldr	r3, [r7, #4]
 80044be:	681b      	ldr	r3, [r3, #0]
 80044c0:	f003 0301 	and.w	r3, r3, #1
 80044c4:	2b00      	cmp	r3, #0
 80044c6:	f000 8085 	beq.w	80045d4 <HAL_RCCEx_PeriphCLKConfig+0x860>
  {
    switch(PeriphClkInit->Usart16ClockSelection)
 80044ca:	687b      	ldr	r3, [r7, #4]
 80044cc:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80044ce:	2b28      	cmp	r3, #40	; 0x28
 80044d0:	d866      	bhi.n	80045a0 <HAL_RCCEx_PeriphCLKConfig+0x82c>
 80044d2:	a201      	add	r2, pc, #4	; (adr r2, 80044d8 <HAL_RCCEx_PeriphCLKConfig+0x764>)
 80044d4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80044d8:	080045b5 	.word	0x080045b5
 80044dc:	080045a1 	.word	0x080045a1
 80044e0:	080045a1 	.word	0x080045a1
 80044e4:	080045a1 	.word	0x080045a1
 80044e8:	080045a1 	.word	0x080045a1
 80044ec:	080045a1 	.word	0x080045a1
 80044f0:	080045a1 	.word	0x080045a1
 80044f4:	080045a1 	.word	0x080045a1
 80044f8:	0800457d 	.word	0x0800457d
 80044fc:	080045a1 	.word	0x080045a1
 8004500:	080045a1 	.word	0x080045a1
 8004504:	080045a1 	.word	0x080045a1
 8004508:	080045a1 	.word	0x080045a1
 800450c:	080045a1 	.word	0x080045a1
 8004510:	080045a1 	.word	0x080045a1
 8004514:	080045a1 	.word	0x080045a1
 8004518:	0800458f 	.word	0x0800458f
 800451c:	080045a1 	.word	0x080045a1
 8004520:	080045a1 	.word	0x080045a1
 8004524:	080045a1 	.word	0x080045a1
 8004528:	080045a1 	.word	0x080045a1
 800452c:	080045a1 	.word	0x080045a1
 8004530:	080045a1 	.word	0x080045a1
 8004534:	080045a1 	.word	0x080045a1
 8004538:	080045b5 	.word	0x080045b5
 800453c:	080045a1 	.word	0x080045a1
 8004540:	080045a1 	.word	0x080045a1
 8004544:	080045a1 	.word	0x080045a1
 8004548:	080045a1 	.word	0x080045a1
 800454c:	080045a1 	.word	0x080045a1
 8004550:	080045a1 	.word	0x080045a1
 8004554:	080045a1 	.word	0x080045a1
 8004558:	080045b5 	.word	0x080045b5
 800455c:	080045a1 	.word	0x080045a1
 8004560:	080045a1 	.word	0x080045a1
 8004564:	080045a1 	.word	0x080045a1
 8004568:	080045a1 	.word	0x080045a1
 800456c:	080045a1 	.word	0x080045a1
 8004570:	080045a1 	.word	0x080045a1
 8004574:	080045a1 	.word	0x080045a1
 8004578:	080045b5 	.word	0x080045b5
    case RCC_USART16CLKSOURCE_PCLK2: /* CD/D2 PCLK2 as clock source for USART1/6 */
      /* USART1/6 clock source configuration done later after clock selection check */
      break;

    case RCC_USART16CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART1/6 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 800457c:	687b      	ldr	r3, [r7, #4]
 800457e:	3304      	adds	r3, #4
 8004580:	2101      	movs	r1, #1
 8004582:	4618      	mov	r0, r3
 8004584:	f000 fb3c 	bl	8004c00 <RCCEx_PLL2_Config>
 8004588:	4603      	mov	r3, r0
 800458a:	75fb      	strb	r3, [r7, #23]
      /* USART1/6 clock source configuration done later after clock selection check */
      break;
 800458c:	e013      	b.n	80045b6 <HAL_RCCEx_PeriphCLKConfig+0x842>

    case RCC_USART16CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART1/6 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 800458e:	687b      	ldr	r3, [r7, #4]
 8004590:	3324      	adds	r3, #36	; 0x24
 8004592:	2101      	movs	r1, #1
 8004594:	4618      	mov	r0, r3
 8004596:	f000 fbe5 	bl	8004d64 <RCCEx_PLL3_Config>
 800459a:	4603      	mov	r3, r0
 800459c:	75fb      	strb	r3, [r7, #23]
      /* USART1/6 clock source configuration done later after clock selection check */
      break;
 800459e:	e00a      	b.n	80045b6 <HAL_RCCEx_PeriphCLKConfig+0x842>
      /* LSE,  oscillator is used as source of USART1/6 clock */
      /* USART1/6 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80045a0:	2301      	movs	r3, #1
 80045a2:	75fb      	strb	r3, [r7, #23]
      break;
 80045a4:	e007      	b.n	80045b6 <HAL_RCCEx_PeriphCLKConfig+0x842>
 80045a6:	bf00      	nop
 80045a8:	58024400 	.word	0x58024400
 80045ac:	58024800 	.word	0x58024800
 80045b0:	00ffffcf 	.word	0x00ffffcf
      break;
 80045b4:	bf00      	nop
    }

    if(ret == HAL_OK)
 80045b6:	7dfb      	ldrb	r3, [r7, #23]
 80045b8:	2b00      	cmp	r3, #0
 80045ba:	d109      	bne.n	80045d0 <HAL_RCCEx_PeriphCLKConfig+0x85c>
    {
      /* Set the source of USART1/6 clock */
      __HAL_RCC_USART16_CONFIG(PeriphClkInit->Usart16ClockSelection);
 80045bc:	4b96      	ldr	r3, [pc, #600]	; (8004818 <HAL_RCCEx_PeriphCLKConfig+0xaa4>)
 80045be:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80045c0:	f023 0238 	bic.w	r2, r3, #56	; 0x38
 80045c4:	687b      	ldr	r3, [r7, #4]
 80045c6:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80045c8:	4993      	ldr	r1, [pc, #588]	; (8004818 <HAL_RCCEx_PeriphCLKConfig+0xaa4>)
 80045ca:	4313      	orrs	r3, r2
 80045cc:	654b      	str	r3, [r1, #84]	; 0x54
 80045ce:	e001      	b.n	80045d4 <HAL_RCCEx_PeriphCLKConfig+0x860>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80045d0:	7dfb      	ldrb	r3, [r7, #23]
 80045d2:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*-------------------------- USART2/3/4/5/7/8 Configuration --------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART234578) == RCC_PERIPHCLK_USART234578)
 80045d4:	687b      	ldr	r3, [r7, #4]
 80045d6:	681b      	ldr	r3, [r3, #0]
 80045d8:	f003 0302 	and.w	r3, r3, #2
 80045dc:	2b00      	cmp	r3, #0
 80045de:	d038      	beq.n	8004652 <HAL_RCCEx_PeriphCLKConfig+0x8de>
  {
    switch(PeriphClkInit->Usart234578ClockSelection)
 80045e0:	687b      	ldr	r3, [r7, #4]
 80045e2:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80045e4:	2b05      	cmp	r3, #5
 80045e6:	d821      	bhi.n	800462c <HAL_RCCEx_PeriphCLKConfig+0x8b8>
 80045e8:	a201      	add	r2, pc, #4	; (adr r2, 80045f0 <HAL_RCCEx_PeriphCLKConfig+0x87c>)
 80045ea:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80045ee:	bf00      	nop
 80045f0:	08004633 	.word	0x08004633
 80045f4:	08004609 	.word	0x08004609
 80045f8:	0800461b 	.word	0x0800461b
 80045fc:	08004633 	.word	0x08004633
 8004600:	08004633 	.word	0x08004633
 8004604:	08004633 	.word	0x08004633
    case RCC_USART234578CLKSOURCE_PCLK1: /* CD/D2 PCLK1 as clock source for USART2/3/4/5/7/8 */
      /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
      break;

    case RCC_USART234578CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART2/3/4/5/7/8 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 8004608:	687b      	ldr	r3, [r7, #4]
 800460a:	3304      	adds	r3, #4
 800460c:	2101      	movs	r1, #1
 800460e:	4618      	mov	r0, r3
 8004610:	f000 faf6 	bl	8004c00 <RCCEx_PLL2_Config>
 8004614:	4603      	mov	r3, r0
 8004616:	75fb      	strb	r3, [r7, #23]
      /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
      break;
 8004618:	e00c      	b.n	8004634 <HAL_RCCEx_PeriphCLKConfig+0x8c0>

    case RCC_USART234578CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART2/3/4/5/7/8 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 800461a:	687b      	ldr	r3, [r7, #4]
 800461c:	3324      	adds	r3, #36	; 0x24
 800461e:	2101      	movs	r1, #1
 8004620:	4618      	mov	r0, r3
 8004622:	f000 fb9f 	bl	8004d64 <RCCEx_PLL3_Config>
 8004626:	4603      	mov	r3, r0
 8004628:	75fb      	strb	r3, [r7, #23]
      /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
      break;
 800462a:	e003      	b.n	8004634 <HAL_RCCEx_PeriphCLKConfig+0x8c0>
      /* LSE,  oscillator is used as source of USART2/3/4/5/7/8 clock */
      /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800462c:	2301      	movs	r3, #1
 800462e:	75fb      	strb	r3, [r7, #23]
      break;
 8004630:	e000      	b.n	8004634 <HAL_RCCEx_PeriphCLKConfig+0x8c0>
      break;
 8004632:	bf00      	nop
    }

    if(ret == HAL_OK)
 8004634:	7dfb      	ldrb	r3, [r7, #23]
 8004636:	2b00      	cmp	r3, #0
 8004638:	d109      	bne.n	800464e <HAL_RCCEx_PeriphCLKConfig+0x8da>
    {
      /* Set the source of USART2/3/4/5/7/8 clock */
      __HAL_RCC_USART234578_CONFIG(PeriphClkInit->Usart234578ClockSelection);
 800463a:	4b77      	ldr	r3, [pc, #476]	; (8004818 <HAL_RCCEx_PeriphCLKConfig+0xaa4>)
 800463c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800463e:	f023 0207 	bic.w	r2, r3, #7
 8004642:	687b      	ldr	r3, [r7, #4]
 8004644:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004646:	4974      	ldr	r1, [pc, #464]	; (8004818 <HAL_RCCEx_PeriphCLKConfig+0xaa4>)
 8004648:	4313      	orrs	r3, r2
 800464a:	654b      	str	r3, [r1, #84]	; 0x54
 800464c:	e001      	b.n	8004652 <HAL_RCCEx_PeriphCLKConfig+0x8de>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800464e:	7dfb      	ldrb	r3, [r7, #23]
 8004650:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*-------------------------- LPUART1 Configuration -------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8004652:	687b      	ldr	r3, [r7, #4]
 8004654:	681b      	ldr	r3, [r3, #0]
 8004656:	f003 0304 	and.w	r3, r3, #4
 800465a:	2b00      	cmp	r3, #0
 800465c:	d03a      	beq.n	80046d4 <HAL_RCCEx_PeriphCLKConfig+0x960>
  {
    switch(PeriphClkInit->Lpuart1ClockSelection)
 800465e:	687b      	ldr	r3, [r7, #4]
 8004660:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004664:	2b05      	cmp	r3, #5
 8004666:	d821      	bhi.n	80046ac <HAL_RCCEx_PeriphCLKConfig+0x938>
 8004668:	a201      	add	r2, pc, #4	; (adr r2, 8004670 <HAL_RCCEx_PeriphCLKConfig+0x8fc>)
 800466a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800466e:	bf00      	nop
 8004670:	080046b3 	.word	0x080046b3
 8004674:	08004689 	.word	0x08004689
 8004678:	0800469b 	.word	0x0800469b
 800467c:	080046b3 	.word	0x080046b3
 8004680:	080046b3 	.word	0x080046b3
 8004684:	080046b3 	.word	0x080046b3
    case RCC_LPUART1CLKSOURCE_PCLK4: /* SRD/D3 PCLK1 (PCLK4) as clock source for LPUART1 */
      /* LPUART1 clock source configuration done later after clock selection check */
      break;

    case RCC_LPUART1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPUART1 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 8004688:	687b      	ldr	r3, [r7, #4]
 800468a:	3304      	adds	r3, #4
 800468c:	2101      	movs	r1, #1
 800468e:	4618      	mov	r0, r3
 8004690:	f000 fab6 	bl	8004c00 <RCCEx_PLL2_Config>
 8004694:	4603      	mov	r3, r0
 8004696:	75fb      	strb	r3, [r7, #23]
      /* LPUART1 clock source configuration done later after clock selection check */
      break;
 8004698:	e00c      	b.n	80046b4 <HAL_RCCEx_PeriphCLKConfig+0x940>

    case RCC_LPUART1CLKSOURCE_PLL3: /* PLL3 is used as clock source for LPUART1 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 800469a:	687b      	ldr	r3, [r7, #4]
 800469c:	3324      	adds	r3, #36	; 0x24
 800469e:	2101      	movs	r1, #1
 80046a0:	4618      	mov	r0, r3
 80046a2:	f000 fb5f 	bl	8004d64 <RCCEx_PLL3_Config>
 80046a6:	4603      	mov	r3, r0
 80046a8:	75fb      	strb	r3, [r7, #23]
      /* LPUART1 clock source configuration done later after clock selection check */
      break;
 80046aa:	e003      	b.n	80046b4 <HAL_RCCEx_PeriphCLKConfig+0x940>
      /* LSE,  oscillator is used as source of LPUART1 clock */
      /* LPUART1 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80046ac:	2301      	movs	r3, #1
 80046ae:	75fb      	strb	r3, [r7, #23]
      break;
 80046b0:	e000      	b.n	80046b4 <HAL_RCCEx_PeriphCLKConfig+0x940>
      break;
 80046b2:	bf00      	nop
    }

    if(ret == HAL_OK)
 80046b4:	7dfb      	ldrb	r3, [r7, #23]
 80046b6:	2b00      	cmp	r3, #0
 80046b8:	d10a      	bne.n	80046d0 <HAL_RCCEx_PeriphCLKConfig+0x95c>
    {
      /* Set the source of LPUART1 clock */
      __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 80046ba:	4b57      	ldr	r3, [pc, #348]	; (8004818 <HAL_RCCEx_PeriphCLKConfig+0xaa4>)
 80046bc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80046be:	f023 0207 	bic.w	r2, r3, #7
 80046c2:	687b      	ldr	r3, [r7, #4]
 80046c4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80046c8:	4953      	ldr	r1, [pc, #332]	; (8004818 <HAL_RCCEx_PeriphCLKConfig+0xaa4>)
 80046ca:	4313      	orrs	r3, r2
 80046cc:	658b      	str	r3, [r1, #88]	; 0x58
 80046ce:	e001      	b.n	80046d4 <HAL_RCCEx_PeriphCLKConfig+0x960>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80046d0:	7dfb      	ldrb	r3, [r7, #23]
 80046d2:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- LPTIM1 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 80046d4:	687b      	ldr	r3, [r7, #4]
 80046d6:	681b      	ldr	r3, [r3, #0]
 80046d8:	f003 0320 	and.w	r3, r3, #32
 80046dc:	2b00      	cmp	r3, #0
 80046de:	d04b      	beq.n	8004778 <HAL_RCCEx_PeriphCLKConfig+0xa04>
  {
    switch(PeriphClkInit->Lptim1ClockSelection)
 80046e0:	687b      	ldr	r3, [r7, #4]
 80046e2:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80046e6:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80046ea:	d02e      	beq.n	800474a <HAL_RCCEx_PeriphCLKConfig+0x9d6>
 80046ec:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80046f0:	d828      	bhi.n	8004744 <HAL_RCCEx_PeriphCLKConfig+0x9d0>
 80046f2:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80046f6:	d02a      	beq.n	800474e <HAL_RCCEx_PeriphCLKConfig+0x9da>
 80046f8:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80046fc:	d822      	bhi.n	8004744 <HAL_RCCEx_PeriphCLKConfig+0x9d0>
 80046fe:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 8004702:	d026      	beq.n	8004752 <HAL_RCCEx_PeriphCLKConfig+0x9de>
 8004704:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 8004708:	d81c      	bhi.n	8004744 <HAL_RCCEx_PeriphCLKConfig+0x9d0>
 800470a:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800470e:	d010      	beq.n	8004732 <HAL_RCCEx_PeriphCLKConfig+0x9be>
 8004710:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8004714:	d816      	bhi.n	8004744 <HAL_RCCEx_PeriphCLKConfig+0x9d0>
 8004716:	2b00      	cmp	r3, #0
 8004718:	d01d      	beq.n	8004756 <HAL_RCCEx_PeriphCLKConfig+0x9e2>
 800471a:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800471e:	d111      	bne.n	8004744 <HAL_RCCEx_PeriphCLKConfig+0x9d0>
      /* LPTIM1 clock source configuration done later after clock selection check */
      break;

    case RCC_LPTIM1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM1*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8004720:	687b      	ldr	r3, [r7, #4]
 8004722:	3304      	adds	r3, #4
 8004724:	2100      	movs	r1, #0
 8004726:	4618      	mov	r0, r3
 8004728:	f000 fa6a 	bl	8004c00 <RCCEx_PLL2_Config>
 800472c:	4603      	mov	r3, r0
 800472e:	75fb      	strb	r3, [r7, #23]

      /* LPTIM1 clock source configuration done later after clock selection check */
      break;
 8004730:	e012      	b.n	8004758 <HAL_RCCEx_PeriphCLKConfig+0x9e4>

    case RCC_LPTIM1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM1*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 8004732:	687b      	ldr	r3, [r7, #4]
 8004734:	3324      	adds	r3, #36	; 0x24
 8004736:	2102      	movs	r1, #2
 8004738:	4618      	mov	r0, r3
 800473a:	f000 fb13 	bl	8004d64 <RCCEx_PLL3_Config>
 800473e:	4603      	mov	r3, r0
 8004740:	75fb      	strb	r3, [r7, #23]

      /* LPTIM1 clock source configuration done later after clock selection check */
      break;
 8004742:	e009      	b.n	8004758 <HAL_RCCEx_PeriphCLKConfig+0x9e4>
      /* HSI, HSE, or CSI oscillator is used as source of LPTIM1 clock */
      /* LPTIM1 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8004744:	2301      	movs	r3, #1
 8004746:	75fb      	strb	r3, [r7, #23]
      break;
 8004748:	e006      	b.n	8004758 <HAL_RCCEx_PeriphCLKConfig+0x9e4>
      break;
 800474a:	bf00      	nop
 800474c:	e004      	b.n	8004758 <HAL_RCCEx_PeriphCLKConfig+0x9e4>
      break;
 800474e:	bf00      	nop
 8004750:	e002      	b.n	8004758 <HAL_RCCEx_PeriphCLKConfig+0x9e4>
      break;
 8004752:	bf00      	nop
 8004754:	e000      	b.n	8004758 <HAL_RCCEx_PeriphCLKConfig+0x9e4>
      break;
 8004756:	bf00      	nop
    }

    if(ret == HAL_OK)
 8004758:	7dfb      	ldrb	r3, [r7, #23]
 800475a:	2b00      	cmp	r3, #0
 800475c:	d10a      	bne.n	8004774 <HAL_RCCEx_PeriphCLKConfig+0xa00>
    {
      /* Set the source of LPTIM1 clock*/
      __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 800475e:	4b2e      	ldr	r3, [pc, #184]	; (8004818 <HAL_RCCEx_PeriphCLKConfig+0xaa4>)
 8004760:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004762:	f023 42e0 	bic.w	r2, r3, #1879048192	; 0x70000000
 8004766:	687b      	ldr	r3, [r7, #4]
 8004768:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800476c:	492a      	ldr	r1, [pc, #168]	; (8004818 <HAL_RCCEx_PeriphCLKConfig+0xaa4>)
 800476e:	4313      	orrs	r3, r2
 8004770:	654b      	str	r3, [r1, #84]	; 0x54
 8004772:	e001      	b.n	8004778 <HAL_RCCEx_PeriphCLKConfig+0xa04>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004774:	7dfb      	ldrb	r3, [r7, #23]
 8004776:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- LPTIM2 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == RCC_PERIPHCLK_LPTIM2)
 8004778:	687b      	ldr	r3, [r7, #4]
 800477a:	681b      	ldr	r3, [r3, #0]
 800477c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004780:	2b00      	cmp	r3, #0
 8004782:	d04d      	beq.n	8004820 <HAL_RCCEx_PeriphCLKConfig+0xaac>
  {
    switch(PeriphClkInit->Lptim2ClockSelection)
 8004784:	687b      	ldr	r3, [r7, #4]
 8004786:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 800478a:	f5b3 5fa0 	cmp.w	r3, #5120	; 0x1400
 800478e:	d02e      	beq.n	80047ee <HAL_RCCEx_PeriphCLKConfig+0xa7a>
 8004790:	f5b3 5fa0 	cmp.w	r3, #5120	; 0x1400
 8004794:	d828      	bhi.n	80047e8 <HAL_RCCEx_PeriphCLKConfig+0xa74>
 8004796:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800479a:	d02a      	beq.n	80047f2 <HAL_RCCEx_PeriphCLKConfig+0xa7e>
 800479c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80047a0:	d822      	bhi.n	80047e8 <HAL_RCCEx_PeriphCLKConfig+0xa74>
 80047a2:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 80047a6:	d026      	beq.n	80047f6 <HAL_RCCEx_PeriphCLKConfig+0xa82>
 80047a8:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 80047ac:	d81c      	bhi.n	80047e8 <HAL_RCCEx_PeriphCLKConfig+0xa74>
 80047ae:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80047b2:	d010      	beq.n	80047d6 <HAL_RCCEx_PeriphCLKConfig+0xa62>
 80047b4:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80047b8:	d816      	bhi.n	80047e8 <HAL_RCCEx_PeriphCLKConfig+0xa74>
 80047ba:	2b00      	cmp	r3, #0
 80047bc:	d01d      	beq.n	80047fa <HAL_RCCEx_PeriphCLKConfig+0xa86>
 80047be:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80047c2:	d111      	bne.n	80047e8 <HAL_RCCEx_PeriphCLKConfig+0xa74>
      /* LPTIM2 clock source configuration done later after clock selection check */
      break;

    case RCC_LPTIM2CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM2*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 80047c4:	687b      	ldr	r3, [r7, #4]
 80047c6:	3304      	adds	r3, #4
 80047c8:	2100      	movs	r1, #0
 80047ca:	4618      	mov	r0, r3
 80047cc:	f000 fa18 	bl	8004c00 <RCCEx_PLL2_Config>
 80047d0:	4603      	mov	r3, r0
 80047d2:	75fb      	strb	r3, [r7, #23]

      /* LPTIM2 clock source configuration done later after clock selection check */
      break;
 80047d4:	e012      	b.n	80047fc <HAL_RCCEx_PeriphCLKConfig+0xa88>

    case RCC_LPTIM2CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM2*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 80047d6:	687b      	ldr	r3, [r7, #4]
 80047d8:	3324      	adds	r3, #36	; 0x24
 80047da:	2102      	movs	r1, #2
 80047dc:	4618      	mov	r0, r3
 80047de:	f000 fac1 	bl	8004d64 <RCCEx_PLL3_Config>
 80047e2:	4603      	mov	r3, r0
 80047e4:	75fb      	strb	r3, [r7, #23]

      /* LPTIM2 clock source configuration done later after clock selection check */
      break;
 80047e6:	e009      	b.n	80047fc <HAL_RCCEx_PeriphCLKConfig+0xa88>
      /* HSI, HSE, or CSI oscillator is used as source of LPTIM2 clock */
      /* LPTIM2 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80047e8:	2301      	movs	r3, #1
 80047ea:	75fb      	strb	r3, [r7, #23]
      break;
 80047ec:	e006      	b.n	80047fc <HAL_RCCEx_PeriphCLKConfig+0xa88>
      break;
 80047ee:	bf00      	nop
 80047f0:	e004      	b.n	80047fc <HAL_RCCEx_PeriphCLKConfig+0xa88>
      break;
 80047f2:	bf00      	nop
 80047f4:	e002      	b.n	80047fc <HAL_RCCEx_PeriphCLKConfig+0xa88>
      break;
 80047f6:	bf00      	nop
 80047f8:	e000      	b.n	80047fc <HAL_RCCEx_PeriphCLKConfig+0xa88>
      break;
 80047fa:	bf00      	nop
    }

    if(ret == HAL_OK)
 80047fc:	7dfb      	ldrb	r3, [r7, #23]
 80047fe:	2b00      	cmp	r3, #0
 8004800:	d10c      	bne.n	800481c <HAL_RCCEx_PeriphCLKConfig+0xaa8>
    {
      /* Set the source of LPTIM2 clock*/
      __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8004802:	4b05      	ldr	r3, [pc, #20]	; (8004818 <HAL_RCCEx_PeriphCLKConfig+0xaa4>)
 8004804:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004806:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 800480a:	687b      	ldr	r3, [r7, #4]
 800480c:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8004810:	4901      	ldr	r1, [pc, #4]	; (8004818 <HAL_RCCEx_PeriphCLKConfig+0xaa4>)
 8004812:	4313      	orrs	r3, r2
 8004814:	658b      	str	r3, [r1, #88]	; 0x58
 8004816:	e003      	b.n	8004820 <HAL_RCCEx_PeriphCLKConfig+0xaac>
 8004818:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 800481c:	7dfb      	ldrb	r3, [r7, #23]
 800481e:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- LPTIM345 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM345) == RCC_PERIPHCLK_LPTIM345)
 8004820:	687b      	ldr	r3, [r7, #4]
 8004822:	681b      	ldr	r3, [r3, #0]
 8004824:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004828:	2b00      	cmp	r3, #0
 800482a:	d04b      	beq.n	80048c4 <HAL_RCCEx_PeriphCLKConfig+0xb50>
  {
    switch(PeriphClkInit->Lptim345ClockSelection)
 800482c:	687b      	ldr	r3, [r7, #4]
 800482e:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8004832:	f5b3 4f20 	cmp.w	r3, #40960	; 0xa000
 8004836:	d02e      	beq.n	8004896 <HAL_RCCEx_PeriphCLKConfig+0xb22>
 8004838:	f5b3 4f20 	cmp.w	r3, #40960	; 0xa000
 800483c:	d828      	bhi.n	8004890 <HAL_RCCEx_PeriphCLKConfig+0xb1c>
 800483e:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8004842:	d02a      	beq.n	800489a <HAL_RCCEx_PeriphCLKConfig+0xb26>
 8004844:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8004848:	d822      	bhi.n	8004890 <HAL_RCCEx_PeriphCLKConfig+0xb1c>
 800484a:	f5b3 4fc0 	cmp.w	r3, #24576	; 0x6000
 800484e:	d026      	beq.n	800489e <HAL_RCCEx_PeriphCLKConfig+0xb2a>
 8004850:	f5b3 4fc0 	cmp.w	r3, #24576	; 0x6000
 8004854:	d81c      	bhi.n	8004890 <HAL_RCCEx_PeriphCLKConfig+0xb1c>
 8004856:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800485a:	d010      	beq.n	800487e <HAL_RCCEx_PeriphCLKConfig+0xb0a>
 800485c:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8004860:	d816      	bhi.n	8004890 <HAL_RCCEx_PeriphCLKConfig+0xb1c>
 8004862:	2b00      	cmp	r3, #0
 8004864:	d01d      	beq.n	80048a2 <HAL_RCCEx_PeriphCLKConfig+0xb2e>
 8004866:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800486a:	d111      	bne.n	8004890 <HAL_RCCEx_PeriphCLKConfig+0xb1c>
    case RCC_LPTIM345CLKSOURCE_PCLK4:      /* SRD/D3 PCLK1 (PCLK4) as clock source for LPTIM3/4/5 */
      /* LPTIM3/4/5 clock source configuration done later after clock selection check */
      break;

    case RCC_LPTIM345CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM3/4/5 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 800486c:	687b      	ldr	r3, [r7, #4]
 800486e:	3304      	adds	r3, #4
 8004870:	2100      	movs	r1, #0
 8004872:	4618      	mov	r0, r3
 8004874:	f000 f9c4 	bl	8004c00 <RCCEx_PLL2_Config>
 8004878:	4603      	mov	r3, r0
 800487a:	75fb      	strb	r3, [r7, #23]

      /* LPTIM3/4/5 clock source configuration done later after clock selection check */
      break;
 800487c:	e012      	b.n	80048a4 <HAL_RCCEx_PeriphCLKConfig+0xb30>

    case RCC_LPTIM345CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM3/4/5 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 800487e:	687b      	ldr	r3, [r7, #4]
 8004880:	3324      	adds	r3, #36	; 0x24
 8004882:	2102      	movs	r1, #2
 8004884:	4618      	mov	r0, r3
 8004886:	f000 fa6d 	bl	8004d64 <RCCEx_PLL3_Config>
 800488a:	4603      	mov	r3, r0
 800488c:	75fb      	strb	r3, [r7, #23]

      /* LPTIM3/4/5 clock source configuration done later after clock selection check */
      break;
 800488e:	e009      	b.n	80048a4 <HAL_RCCEx_PeriphCLKConfig+0xb30>
      /* HSI, HSE, or CSI oscillator is used as source of LPTIM3/4/5 clock */
      /* LPTIM3/4/5 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8004890:	2301      	movs	r3, #1
 8004892:	75fb      	strb	r3, [r7, #23]
      break;
 8004894:	e006      	b.n	80048a4 <HAL_RCCEx_PeriphCLKConfig+0xb30>
      break;
 8004896:	bf00      	nop
 8004898:	e004      	b.n	80048a4 <HAL_RCCEx_PeriphCLKConfig+0xb30>
      break;
 800489a:	bf00      	nop
 800489c:	e002      	b.n	80048a4 <HAL_RCCEx_PeriphCLKConfig+0xb30>
      break;
 800489e:	bf00      	nop
 80048a0:	e000      	b.n	80048a4 <HAL_RCCEx_PeriphCLKConfig+0xb30>
      break;
 80048a2:	bf00      	nop
    }

    if(ret == HAL_OK)
 80048a4:	7dfb      	ldrb	r3, [r7, #23]
 80048a6:	2b00      	cmp	r3, #0
 80048a8:	d10a      	bne.n	80048c0 <HAL_RCCEx_PeriphCLKConfig+0xb4c>
    {
      /* Set the source of LPTIM3/4/5 clock */
      __HAL_RCC_LPTIM345_CONFIG(PeriphClkInit->Lptim345ClockSelection);
 80048aa:	4b9d      	ldr	r3, [pc, #628]	; (8004b20 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 80048ac:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80048ae:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 80048b2:	687b      	ldr	r3, [r7, #4]
 80048b4:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 80048b8:	4999      	ldr	r1, [pc, #612]	; (8004b20 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 80048ba:	4313      	orrs	r3, r2
 80048bc:	658b      	str	r3, [r1, #88]	; 0x58
 80048be:	e001      	b.n	80048c4 <HAL_RCCEx_PeriphCLKConfig+0xb50>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80048c0:	7dfb      	ldrb	r3, [r7, #23]
 80048c2:	75bb      	strb	r3, [r7, #22]

      __HAL_RCC_I2C1235_CONFIG(PeriphClkInit->I2c1235ClockSelection);

  }
#else
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C123) == RCC_PERIPHCLK_I2C123)
 80048c4:	687b      	ldr	r3, [r7, #4]
 80048c6:	681b      	ldr	r3, [r3, #0]
 80048c8:	f003 0308 	and.w	r3, r3, #8
 80048cc:	2b00      	cmp	r3, #0
 80048ce:	d01a      	beq.n	8004906 <HAL_RCCEx_PeriphCLKConfig+0xb92>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C123CLKSOURCE(PeriphClkInit->I2c123ClockSelection));

    if ((PeriphClkInit->I2c123ClockSelection )== RCC_I2C123CLKSOURCE_PLL3 )
 80048d0:	687b      	ldr	r3, [r7, #4]
 80048d2:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80048d6:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80048da:	d10a      	bne.n	80048f2 <HAL_RCCEx_PeriphCLKConfig+0xb7e>
    {
        if(RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE)!= HAL_OK)
 80048dc:	687b      	ldr	r3, [r7, #4]
 80048de:	3324      	adds	r3, #36	; 0x24
 80048e0:	2102      	movs	r1, #2
 80048e2:	4618      	mov	r0, r3
 80048e4:	f000 fa3e 	bl	8004d64 <RCCEx_PLL3_Config>
 80048e8:	4603      	mov	r3, r0
 80048ea:	2b00      	cmp	r3, #0
 80048ec:	d001      	beq.n	80048f2 <HAL_RCCEx_PeriphCLKConfig+0xb7e>
        {
          status = HAL_ERROR;
 80048ee:	2301      	movs	r3, #1
 80048f0:	75bb      	strb	r3, [r7, #22]
        }
    }

      __HAL_RCC_I2C123_CONFIG(PeriphClkInit->I2c123ClockSelection);
 80048f2:	4b8b      	ldr	r3, [pc, #556]	; (8004b20 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 80048f4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80048f6:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 80048fa:	687b      	ldr	r3, [r7, #4]
 80048fc:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8004900:	4987      	ldr	r1, [pc, #540]	; (8004b20 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 8004902:	4313      	orrs	r3, r2
 8004904:	654b      	str	r3, [r1, #84]	; 0x54

  }
#endif /* I2C5 */

  /*------------------------------ I2C4 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 8004906:	687b      	ldr	r3, [r7, #4]
 8004908:	681b      	ldr	r3, [r3, #0]
 800490a:	f003 0310 	and.w	r3, r3, #16
 800490e:	2b00      	cmp	r3, #0
 8004910:	d01a      	beq.n	8004948 <HAL_RCCEx_PeriphCLKConfig+0xbd4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    if ((PeriphClkInit->I2c4ClockSelection) == RCC_I2C4CLKSOURCE_PLL3 )
 8004912:	687b      	ldr	r3, [r7, #4]
 8004914:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8004918:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800491c:	d10a      	bne.n	8004934 <HAL_RCCEx_PeriphCLKConfig+0xbc0>
    {
      if(RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE)!= HAL_OK)
 800491e:	687b      	ldr	r3, [r7, #4]
 8004920:	3324      	adds	r3, #36	; 0x24
 8004922:	2102      	movs	r1, #2
 8004924:	4618      	mov	r0, r3
 8004926:	f000 fa1d 	bl	8004d64 <RCCEx_PLL3_Config>
 800492a:	4603      	mov	r3, r0
 800492c:	2b00      	cmp	r3, #0
 800492e:	d001      	beq.n	8004934 <HAL_RCCEx_PeriphCLKConfig+0xbc0>
      {
        status = HAL_ERROR;
 8004930:	2301      	movs	r3, #1
 8004932:	75bb      	strb	r3, [r7, #22]
      }
    }

      __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 8004934:	4b7a      	ldr	r3, [pc, #488]	; (8004b20 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 8004936:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004938:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 800493c:	687b      	ldr	r3, [r7, #4]
 800493e:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8004942:	4977      	ldr	r1, [pc, #476]	; (8004b20 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 8004944:	4313      	orrs	r3, r2
 8004946:	658b      	str	r3, [r1, #88]	; 0x58

  }

  /*---------------------------- ADC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8004948:	687b      	ldr	r3, [r7, #4]
 800494a:	681b      	ldr	r3, [r3, #0]
 800494c:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8004950:	2b00      	cmp	r3, #0
 8004952:	d034      	beq.n	80049be <HAL_RCCEx_PeriphCLKConfig+0xc4a>
  {
    switch(PeriphClkInit->AdcClockSelection)
 8004954:	687b      	ldr	r3, [r7, #4]
 8004956:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 800495a:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800495e:	d01d      	beq.n	800499c <HAL_RCCEx_PeriphCLKConfig+0xc28>
 8004960:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8004964:	d817      	bhi.n	8004996 <HAL_RCCEx_PeriphCLKConfig+0xc22>
 8004966:	2b00      	cmp	r3, #0
 8004968:	d003      	beq.n	8004972 <HAL_RCCEx_PeriphCLKConfig+0xbfe>
 800496a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800496e:	d009      	beq.n	8004984 <HAL_RCCEx_PeriphCLKConfig+0xc10>
 8004970:	e011      	b.n	8004996 <HAL_RCCEx_PeriphCLKConfig+0xc22>
    {

    case RCC_ADCCLKSOURCE_PLL2: /* PLL2 is used as clock source for ADC*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8004972:	687b      	ldr	r3, [r7, #4]
 8004974:	3304      	adds	r3, #4
 8004976:	2100      	movs	r1, #0
 8004978:	4618      	mov	r0, r3
 800497a:	f000 f941 	bl	8004c00 <RCCEx_PLL2_Config>
 800497e:	4603      	mov	r3, r0
 8004980:	75fb      	strb	r3, [r7, #23]

      /* ADC clock source configuration done later after clock selection check */
      break;
 8004982:	e00c      	b.n	800499e <HAL_RCCEx_PeriphCLKConfig+0xc2a>

    case RCC_ADCCLKSOURCE_PLL3:  /* PLL3 is used as clock source for ADC*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 8004984:	687b      	ldr	r3, [r7, #4]
 8004986:	3324      	adds	r3, #36	; 0x24
 8004988:	2102      	movs	r1, #2
 800498a:	4618      	mov	r0, r3
 800498c:	f000 f9ea 	bl	8004d64 <RCCEx_PLL3_Config>
 8004990:	4603      	mov	r3, r0
 8004992:	75fb      	strb	r3, [r7, #23]

      /* ADC clock source configuration done later after clock selection check */
      break;
 8004994:	e003      	b.n	800499e <HAL_RCCEx_PeriphCLKConfig+0xc2a>
      /* HSI, HSE, or CSI oscillator is used as source of ADC clock */
      /* ADC clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8004996:	2301      	movs	r3, #1
 8004998:	75fb      	strb	r3, [r7, #23]
      break;
 800499a:	e000      	b.n	800499e <HAL_RCCEx_PeriphCLKConfig+0xc2a>
      break;
 800499c:	bf00      	nop
    }

    if(ret == HAL_OK)
 800499e:	7dfb      	ldrb	r3, [r7, #23]
 80049a0:	2b00      	cmp	r3, #0
 80049a2:	d10a      	bne.n	80049ba <HAL_RCCEx_PeriphCLKConfig+0xc46>
    {
      /* Set the source of ADC clock*/
      __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 80049a4:	4b5e      	ldr	r3, [pc, #376]	; (8004b20 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 80049a6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80049a8:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 80049ac:	687b      	ldr	r3, [r7, #4]
 80049ae:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 80049b2:	495b      	ldr	r1, [pc, #364]	; (8004b20 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 80049b4:	4313      	orrs	r3, r2
 80049b6:	658b      	str	r3, [r1, #88]	; 0x58
 80049b8:	e001      	b.n	80049be <HAL_RCCEx_PeriphCLKConfig+0xc4a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80049ba:	7dfb      	ldrb	r3, [r7, #23]
 80049bc:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*------------------------------ USB Configuration -------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 80049be:	687b      	ldr	r3, [r7, #4]
 80049c0:	681b      	ldr	r3, [r3, #0]
 80049c2:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80049c6:	2b00      	cmp	r3, #0
 80049c8:	d033      	beq.n	8004a32 <HAL_RCCEx_PeriphCLKConfig+0xcbe>
  {

    switch(PeriphClkInit->UsbClockSelection)
 80049ca:	687b      	ldr	r3, [r7, #4]
 80049cc:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80049d0:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 80049d4:	d01c      	beq.n	8004a10 <HAL_RCCEx_PeriphCLKConfig+0xc9c>
 80049d6:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 80049da:	d816      	bhi.n	8004a0a <HAL_RCCEx_PeriphCLKConfig+0xc96>
 80049dc:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80049e0:	d003      	beq.n	80049ea <HAL_RCCEx_PeriphCLKConfig+0xc76>
 80049e2:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 80049e6:	d007      	beq.n	80049f8 <HAL_RCCEx_PeriphCLKConfig+0xc84>
 80049e8:	e00f      	b.n	8004a0a <HAL_RCCEx_PeriphCLKConfig+0xc96>
    {
    case RCC_USBCLKSOURCE_PLL:      /* PLL is used as clock source for USB*/
      /* Enable USB Clock output generated form System USB . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80049ea:	4b4d      	ldr	r3, [pc, #308]	; (8004b20 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 80049ec:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80049ee:	4a4c      	ldr	r2, [pc, #304]	; (8004b20 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 80049f0:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80049f4:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* USB clock source configuration done later after clock selection check */
      break;
 80049f6:	e00c      	b.n	8004a12 <HAL_RCCEx_PeriphCLKConfig+0xc9e>

    case RCC_USBCLKSOURCE_PLL3: /* PLL3 is used as clock source for USB*/

      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 80049f8:	687b      	ldr	r3, [r7, #4]
 80049fa:	3324      	adds	r3, #36	; 0x24
 80049fc:	2101      	movs	r1, #1
 80049fe:	4618      	mov	r0, r3
 8004a00:	f000 f9b0 	bl	8004d64 <RCCEx_PLL3_Config>
 8004a04:	4603      	mov	r3, r0
 8004a06:	75fb      	strb	r3, [r7, #23]

      /* USB clock source configuration done later after clock selection check */
      break;
 8004a08:	e003      	b.n	8004a12 <HAL_RCCEx_PeriphCLKConfig+0xc9e>
      /* HSI48 oscillator is used as source of USB clock */
      /* USB clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8004a0a:	2301      	movs	r3, #1
 8004a0c:	75fb      	strb	r3, [r7, #23]
      break;
 8004a0e:	e000      	b.n	8004a12 <HAL_RCCEx_PeriphCLKConfig+0xc9e>
      break;
 8004a10:	bf00      	nop
    }

    if(ret == HAL_OK)
 8004a12:	7dfb      	ldrb	r3, [r7, #23]
 8004a14:	2b00      	cmp	r3, #0
 8004a16:	d10a      	bne.n	8004a2e <HAL_RCCEx_PeriphCLKConfig+0xcba>
    {
      /* Set the source of USB clock*/
      __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8004a18:	4b41      	ldr	r3, [pc, #260]	; (8004b20 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 8004a1a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004a1c:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8004a20:	687b      	ldr	r3, [r7, #4]
 8004a22:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8004a26:	493e      	ldr	r1, [pc, #248]	; (8004b20 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 8004a28:	4313      	orrs	r3, r2
 8004a2a:	654b      	str	r3, [r1, #84]	; 0x54
 8004a2c:	e001      	b.n	8004a32 <HAL_RCCEx_PeriphCLKConfig+0xcbe>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004a2e:	7dfb      	ldrb	r3, [r7, #23]
 8004a30:	75bb      	strb	r3, [r7, #22]
    }

  }

  /*------------------------------------- SDMMC Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC) == RCC_PERIPHCLK_SDMMC)
 8004a32:	687b      	ldr	r3, [r7, #4]
 8004a34:	681b      	ldr	r3, [r3, #0]
 8004a36:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8004a3a:	2b00      	cmp	r3, #0
 8004a3c:	d029      	beq.n	8004a92 <HAL_RCCEx_PeriphCLKConfig+0xd1e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC(PeriphClkInit->SdmmcClockSelection));

    switch(PeriphClkInit->SdmmcClockSelection)
 8004a3e:	687b      	ldr	r3, [r7, #4]
 8004a40:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004a42:	2b00      	cmp	r3, #0
 8004a44:	d003      	beq.n	8004a4e <HAL_RCCEx_PeriphCLKConfig+0xcda>
 8004a46:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004a4a:	d007      	beq.n	8004a5c <HAL_RCCEx_PeriphCLKConfig+0xce8>
 8004a4c:	e00f      	b.n	8004a6e <HAL_RCCEx_PeriphCLKConfig+0xcfa>
    {
    case RCC_SDMMCCLKSOURCE_PLL:      /* PLL is used as clock source for SDMMC*/
      /* Enable SDMMC Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8004a4e:	4b34      	ldr	r3, [pc, #208]	; (8004b20 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 8004a50:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004a52:	4a33      	ldr	r2, [pc, #204]	; (8004b20 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 8004a54:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8004a58:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SDMMC clock source configuration done later after clock selection check */
      break;
 8004a5a:	e00b      	b.n	8004a74 <HAL_RCCEx_PeriphCLKConfig+0xd00>

    case RCC_SDMMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for SDMMC*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 8004a5c:	687b      	ldr	r3, [r7, #4]
 8004a5e:	3304      	adds	r3, #4
 8004a60:	2102      	movs	r1, #2
 8004a62:	4618      	mov	r0, r3
 8004a64:	f000 f8cc 	bl	8004c00 <RCCEx_PLL2_Config>
 8004a68:	4603      	mov	r3, r0
 8004a6a:	75fb      	strb	r3, [r7, #23]

      /* SDMMC clock source configuration done later after clock selection check */
      break;
 8004a6c:	e002      	b.n	8004a74 <HAL_RCCEx_PeriphCLKConfig+0xd00>

    default:
      ret = HAL_ERROR;
 8004a6e:	2301      	movs	r3, #1
 8004a70:	75fb      	strb	r3, [r7, #23]
      break;
 8004a72:	bf00      	nop
    }

    if(ret == HAL_OK)
 8004a74:	7dfb      	ldrb	r3, [r7, #23]
 8004a76:	2b00      	cmp	r3, #0
 8004a78:	d109      	bne.n	8004a8e <HAL_RCCEx_PeriphCLKConfig+0xd1a>
    {
      /* Set the source of SDMMC clock*/
      __HAL_RCC_SDMMC_CONFIG(PeriphClkInit->SdmmcClockSelection);
 8004a7a:	4b29      	ldr	r3, [pc, #164]	; (8004b20 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 8004a7c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004a7e:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8004a82:	687b      	ldr	r3, [r7, #4]
 8004a84:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004a86:	4926      	ldr	r1, [pc, #152]	; (8004b20 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 8004a88:	4313      	orrs	r3, r2
 8004a8a:	64cb      	str	r3, [r1, #76]	; 0x4c
 8004a8c:	e001      	b.n	8004a92 <HAL_RCCEx_PeriphCLKConfig+0xd1e>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004a8e:	7dfb      	ldrb	r3, [r7, #23]
 8004a90:	75bb      	strb	r3, [r7, #22]
    }
  }

#if defined(LTDC)
  /*-------------------------------------- LTDC Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 8004a92:	687b      	ldr	r3, [r7, #4]
 8004a94:	681b      	ldr	r3, [r3, #0]
 8004a96:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8004a9a:	2b00      	cmp	r3, #0
 8004a9c:	d00a      	beq.n	8004ab4 <HAL_RCCEx_PeriphCLKConfig+0xd40>
  {
    if(RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE)!=HAL_OK)
 8004a9e:	687b      	ldr	r3, [r7, #4]
 8004aa0:	3324      	adds	r3, #36	; 0x24
 8004aa2:	2102      	movs	r1, #2
 8004aa4:	4618      	mov	r0, r3
 8004aa6:	f000 f95d 	bl	8004d64 <RCCEx_PLL3_Config>
 8004aaa:	4603      	mov	r3, r0
 8004aac:	2b00      	cmp	r3, #0
 8004aae:	d001      	beq.n	8004ab4 <HAL_RCCEx_PeriphCLKConfig+0xd40>
    {
      status=HAL_ERROR;
 8004ab0:	2301      	movs	r3, #1
 8004ab2:	75bb      	strb	r3, [r7, #22]
    }
  }
#endif /* LTDC */

  /*------------------------------ RNG Configuration -------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == RCC_PERIPHCLK_RNG)
 8004ab4:	687b      	ldr	r3, [r7, #4]
 8004ab6:	681b      	ldr	r3, [r3, #0]
 8004ab8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004abc:	2b00      	cmp	r3, #0
 8004abe:	d033      	beq.n	8004b28 <HAL_RCCEx_PeriphCLKConfig+0xdb4>
  {

    switch(PeriphClkInit->RngClockSelection)
 8004ac0:	687b      	ldr	r3, [r7, #4]
 8004ac2:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8004ac4:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8004ac8:	d017      	beq.n	8004afa <HAL_RCCEx_PeriphCLKConfig+0xd86>
 8004aca:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8004ace:	d811      	bhi.n	8004af4 <HAL_RCCEx_PeriphCLKConfig+0xd80>
 8004ad0:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8004ad4:	d013      	beq.n	8004afe <HAL_RCCEx_PeriphCLKConfig+0xd8a>
 8004ad6:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8004ada:	d80b      	bhi.n	8004af4 <HAL_RCCEx_PeriphCLKConfig+0xd80>
 8004adc:	2b00      	cmp	r3, #0
 8004ade:	d010      	beq.n	8004b02 <HAL_RCCEx_PeriphCLKConfig+0xd8e>
 8004ae0:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8004ae4:	d106      	bne.n	8004af4 <HAL_RCCEx_PeriphCLKConfig+0xd80>
    {
    case RCC_RNGCLKSOURCE_PLL:     /* PLL is used as clock source for RNG*/
      /* Enable RNG Clock output generated form System RNG . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8004ae6:	4b0e      	ldr	r3, [pc, #56]	; (8004b20 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 8004ae8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004aea:	4a0d      	ldr	r2, [pc, #52]	; (8004b20 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 8004aec:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8004af0:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* RNG clock source configuration done later after clock selection check */
      break;
 8004af2:	e007      	b.n	8004b04 <HAL_RCCEx_PeriphCLKConfig+0xd90>
      /* HSI48 oscillator is used as source of RNG clock */
      /* RNG clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8004af4:	2301      	movs	r3, #1
 8004af6:	75fb      	strb	r3, [r7, #23]
      break;
 8004af8:	e004      	b.n	8004b04 <HAL_RCCEx_PeriphCLKConfig+0xd90>
      break;
 8004afa:	bf00      	nop
 8004afc:	e002      	b.n	8004b04 <HAL_RCCEx_PeriphCLKConfig+0xd90>
      break;
 8004afe:	bf00      	nop
 8004b00:	e000      	b.n	8004b04 <HAL_RCCEx_PeriphCLKConfig+0xd90>
      break;
 8004b02:	bf00      	nop
    }

    if(ret == HAL_OK)
 8004b04:	7dfb      	ldrb	r3, [r7, #23]
 8004b06:	2b00      	cmp	r3, #0
 8004b08:	d10c      	bne.n	8004b24 <HAL_RCCEx_PeriphCLKConfig+0xdb0>
    {
      /* Set the source of RNG clock*/
      __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8004b0a:	4b05      	ldr	r3, [pc, #20]	; (8004b20 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 8004b0c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004b0e:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8004b12:	687b      	ldr	r3, [r7, #4]
 8004b14:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8004b16:	4902      	ldr	r1, [pc, #8]	; (8004b20 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 8004b18:	4313      	orrs	r3, r2
 8004b1a:	654b      	str	r3, [r1, #84]	; 0x54
 8004b1c:	e004      	b.n	8004b28 <HAL_RCCEx_PeriphCLKConfig+0xdb4>
 8004b1e:	bf00      	nop
 8004b20:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004b24:	7dfb      	ldrb	r3, [r7, #23]
 8004b26:	75bb      	strb	r3, [r7, #22]
    }

  }

  /*------------------------------ SWPMI1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 8004b28:	687b      	ldr	r3, [r7, #4]
 8004b2a:	681b      	ldr	r3, [r3, #0]
 8004b2c:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8004b30:	2b00      	cmp	r3, #0
 8004b32:	d008      	beq.n	8004b46 <HAL_RCCEx_PeriphCLKConfig+0xdd2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 interface clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 8004b34:	4b31      	ldr	r3, [pc, #196]	; (8004bfc <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 8004b36:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004b38:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8004b3c:	687b      	ldr	r3, [r7, #4]
 8004b3e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004b40:	492e      	ldr	r1, [pc, #184]	; (8004bfc <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 8004b42:	4313      	orrs	r3, r2
 8004b44:	650b      	str	r3, [r1, #80]	; 0x50
  }
#if defined(HRTIM1)
  /*------------------------------ HRTIM1 clock Configuration ----------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_HRTIM1) == RCC_PERIPHCLK_HRTIM1)
 8004b46:	687b      	ldr	r3, [r7, #4]
 8004b48:	681b      	ldr	r3, [r3, #0]
 8004b4a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004b4e:	2b00      	cmp	r3, #0
 8004b50:	d009      	beq.n	8004b66 <HAL_RCCEx_PeriphCLKConfig+0xdf2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HRTIM1CLKSOURCE(PeriphClkInit->Hrtim1ClockSelection));

    /* Configure the HRTIM1 clock source */
    __HAL_RCC_HRTIM1_CONFIG(PeriphClkInit->Hrtim1ClockSelection);
 8004b52:	4b2a      	ldr	r3, [pc, #168]	; (8004bfc <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 8004b54:	691b      	ldr	r3, [r3, #16]
 8004b56:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 8004b5a:	687b      	ldr	r3, [r7, #4]
 8004b5c:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 8004b60:	4926      	ldr	r1, [pc, #152]	; (8004bfc <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 8004b62:	4313      	orrs	r3, r2
 8004b64:	610b      	str	r3, [r1, #16]
  }
#endif  /*HRTIM1*/
  /*------------------------------ DFSDM1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 8004b66:	687b      	ldr	r3, [r7, #4]
 8004b68:	681b      	ldr	r3, [r3, #0]
 8004b6a:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8004b6e:	2b00      	cmp	r3, #0
 8004b70:	d008      	beq.n	8004b84 <HAL_RCCEx_PeriphCLKConfig+0xe10>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 8004b72:	4b22      	ldr	r3, [pc, #136]	; (8004bfc <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 8004b74:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004b76:	f023 7280 	bic.w	r2, r3, #16777216	; 0x1000000
 8004b7a:	687b      	ldr	r3, [r7, #4]
 8004b7c:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8004b7e:	491f      	ldr	r1, [pc, #124]	; (8004bfc <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 8004b80:	4313      	orrs	r3, r2
 8004b82:	650b      	str	r3, [r1, #80]	; 0x50
    __HAL_RCC_DFSDM2_CONFIG(PeriphClkInit->Dfsdm2ClockSelection);
  }
#endif  /* DFSDM2 */

  /*------------------------------------ TIM configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == RCC_PERIPHCLK_TIM)
 8004b84:	687b      	ldr	r3, [r7, #4]
 8004b86:	681b      	ldr	r3, [r3, #0]
 8004b88:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 8004b8c:	2b00      	cmp	r3, #0
 8004b8e:	d00d      	beq.n	8004bac <HAL_RCCEx_PeriphCLKConfig+0xe38>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 8004b90:	4b1a      	ldr	r3, [pc, #104]	; (8004bfc <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 8004b92:	691b      	ldr	r3, [r3, #16]
 8004b94:	4a19      	ldr	r2, [pc, #100]	; (8004bfc <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 8004b96:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8004b9a:	6113      	str	r3, [r2, #16]
 8004b9c:	4b17      	ldr	r3, [pc, #92]	; (8004bfc <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 8004b9e:	691a      	ldr	r2, [r3, #16]
 8004ba0:	687b      	ldr	r3, [r7, #4]
 8004ba2:	f8d3 30b8 	ldr.w	r3, [r3, #184]	; 0xb8
 8004ba6:	4915      	ldr	r1, [pc, #84]	; (8004bfc <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 8004ba8:	4313      	orrs	r3, r2
 8004baa:	610b      	str	r3, [r1, #16]
  }

  /*------------------------------------ CKPER configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CKPER) == RCC_PERIPHCLK_CKPER)
 8004bac:	687b      	ldr	r3, [r7, #4]
 8004bae:	681b      	ldr	r3, [r3, #0]
 8004bb0:	2b00      	cmp	r3, #0
 8004bb2:	da08      	bge.n	8004bc6 <HAL_RCCEx_PeriphCLKConfig+0xe52>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLKPSOURCE(PeriphClkInit->CkperClockSelection));

    /* Configure the CKPER clock source */
    __HAL_RCC_CLKP_CONFIG(PeriphClkInit->CkperClockSelection);
 8004bb4:	4b11      	ldr	r3, [pc, #68]	; (8004bfc <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 8004bb6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004bb8:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 8004bbc:	687b      	ldr	r3, [r7, #4]
 8004bbe:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004bc0:	490e      	ldr	r1, [pc, #56]	; (8004bfc <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 8004bc2:	4313      	orrs	r3, r2
 8004bc4:	64cb      	str	r3, [r1, #76]	; 0x4c
  }

  /*------------------------------ CEC Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 8004bc6:	687b      	ldr	r3, [r7, #4]
 8004bc8:	681b      	ldr	r3, [r3, #0]
 8004bca:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8004bce:	2b00      	cmp	r3, #0
 8004bd0:	d009      	beq.n	8004be6 <HAL_RCCEx_PeriphCLKConfig+0xe72>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC interface clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 8004bd2:	4b0a      	ldr	r3, [pc, #40]	; (8004bfc <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 8004bd4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004bd6:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8004bda:	687b      	ldr	r3, [r7, #4]
 8004bdc:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004be0:	4906      	ldr	r1, [pc, #24]	; (8004bfc <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 8004be2:	4313      	orrs	r3, r2
 8004be4:	654b      	str	r3, [r1, #84]	; 0x54
  }

  if (status == HAL_OK)
 8004be6:	7dbb      	ldrb	r3, [r7, #22]
 8004be8:	2b00      	cmp	r3, #0
 8004bea:	d101      	bne.n	8004bf0 <HAL_RCCEx_PeriphCLKConfig+0xe7c>
  {
    return HAL_OK;
 8004bec:	2300      	movs	r3, #0
 8004bee:	e000      	b.n	8004bf2 <HAL_RCCEx_PeriphCLKConfig+0xe7e>
  }
  return HAL_ERROR;
 8004bf0:	2301      	movs	r3, #1
}
 8004bf2:	4618      	mov	r0, r3
 8004bf4:	3718      	adds	r7, #24
 8004bf6:	46bd      	mov	sp, r7
 8004bf8:	bd80      	pop	{r7, pc}
 8004bfa:	bf00      	nop
 8004bfc:	58024400 	.word	0x58024400

08004c00 <RCCEx_PLL2_Config>:
  * @note   PLL2 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL2_Config(RCC_PLL2InitTypeDef *pll2, uint32_t Divider)
{
 8004c00:	b580      	push	{r7, lr}
 8004c02:	b084      	sub	sp, #16
 8004c04:	af00      	add	r7, sp, #0
 8004c06:	6078      	str	r0, [r7, #4]
 8004c08:	6039      	str	r1, [r7, #0]

  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8004c0a:	2300      	movs	r3, #0
 8004c0c:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL2RGE_VALUE(pll2->PLL2RGE));
  assert_param(IS_RCC_PLL2VCO_VALUE(pll2->PLL2VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll2->PLL2FRACN));

  /* Check that PLL2 OSC clock source is already set */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 8004c0e:	4b53      	ldr	r3, [pc, #332]	; (8004d5c <RCCEx_PLL2_Config+0x15c>)
 8004c10:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004c12:	f003 0303 	and.w	r3, r3, #3
 8004c16:	2b03      	cmp	r3, #3
 8004c18:	d101      	bne.n	8004c1e <RCCEx_PLL2_Config+0x1e>
  {
    return HAL_ERROR;
 8004c1a:	2301      	movs	r3, #1
 8004c1c:	e099      	b.n	8004d52 <RCCEx_PLL2_Config+0x152>


  else
  {
    /* Disable  PLL2. */
    __HAL_RCC_PLL2_DISABLE();
 8004c1e:	4b4f      	ldr	r3, [pc, #316]	; (8004d5c <RCCEx_PLL2_Config+0x15c>)
 8004c20:	681b      	ldr	r3, [r3, #0]
 8004c22:	4a4e      	ldr	r2, [pc, #312]	; (8004d5c <RCCEx_PLL2_Config+0x15c>)
 8004c24:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8004c28:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004c2a:	f7fc f881 	bl	8000d30 <HAL_GetTick>
 8004c2e:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 8004c30:	e008      	b.n	8004c44 <RCCEx_PLL2_Config+0x44>
    {
      if( (HAL_GetTick() - tickstart ) > PLL2_TIMEOUT_VALUE)
 8004c32:	f7fc f87d 	bl	8000d30 <HAL_GetTick>
 8004c36:	4602      	mov	r2, r0
 8004c38:	68bb      	ldr	r3, [r7, #8]
 8004c3a:	1ad3      	subs	r3, r2, r3
 8004c3c:	2b02      	cmp	r3, #2
 8004c3e:	d901      	bls.n	8004c44 <RCCEx_PLL2_Config+0x44>
      {
        return HAL_TIMEOUT;
 8004c40:	2303      	movs	r3, #3
 8004c42:	e086      	b.n	8004d52 <RCCEx_PLL2_Config+0x152>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 8004c44:	4b45      	ldr	r3, [pc, #276]	; (8004d5c <RCCEx_PLL2_Config+0x15c>)
 8004c46:	681b      	ldr	r3, [r3, #0]
 8004c48:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8004c4c:	2b00      	cmp	r3, #0
 8004c4e:	d1f0      	bne.n	8004c32 <RCCEx_PLL2_Config+0x32>
      }
    }

    /* Configure PLL2 multiplication and division factors. */
    __HAL_RCC_PLL2_CONFIG(pll2->PLL2M,
 8004c50:	4b42      	ldr	r3, [pc, #264]	; (8004d5c <RCCEx_PLL2_Config+0x15c>)
 8004c52:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004c54:	f423 327c 	bic.w	r2, r3, #258048	; 0x3f000
 8004c58:	687b      	ldr	r3, [r7, #4]
 8004c5a:	681b      	ldr	r3, [r3, #0]
 8004c5c:	031b      	lsls	r3, r3, #12
 8004c5e:	493f      	ldr	r1, [pc, #252]	; (8004d5c <RCCEx_PLL2_Config+0x15c>)
 8004c60:	4313      	orrs	r3, r2
 8004c62:	628b      	str	r3, [r1, #40]	; 0x28
 8004c64:	687b      	ldr	r3, [r7, #4]
 8004c66:	685b      	ldr	r3, [r3, #4]
 8004c68:	3b01      	subs	r3, #1
 8004c6a:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8004c6e:	687b      	ldr	r3, [r7, #4]
 8004c70:	689b      	ldr	r3, [r3, #8]
 8004c72:	3b01      	subs	r3, #1
 8004c74:	025b      	lsls	r3, r3, #9
 8004c76:	b29b      	uxth	r3, r3
 8004c78:	431a      	orrs	r2, r3
 8004c7a:	687b      	ldr	r3, [r7, #4]
 8004c7c:	68db      	ldr	r3, [r3, #12]
 8004c7e:	3b01      	subs	r3, #1
 8004c80:	041b      	lsls	r3, r3, #16
 8004c82:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 8004c86:	431a      	orrs	r2, r3
 8004c88:	687b      	ldr	r3, [r7, #4]
 8004c8a:	691b      	ldr	r3, [r3, #16]
 8004c8c:	3b01      	subs	r3, #1
 8004c8e:	061b      	lsls	r3, r3, #24
 8004c90:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 8004c94:	4931      	ldr	r1, [pc, #196]	; (8004d5c <RCCEx_PLL2_Config+0x15c>)
 8004c96:	4313      	orrs	r3, r2
 8004c98:	638b      	str	r3, [r1, #56]	; 0x38
                          pll2->PLL2P,
                          pll2->PLL2Q,
                          pll2->PLL2R);

    /* Select PLL2 input reference frequency range: VCI */
    __HAL_RCC_PLL2_VCIRANGE(pll2->PLL2RGE) ;
 8004c9a:	4b30      	ldr	r3, [pc, #192]	; (8004d5c <RCCEx_PLL2_Config+0x15c>)
 8004c9c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004c9e:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 8004ca2:	687b      	ldr	r3, [r7, #4]
 8004ca4:	695b      	ldr	r3, [r3, #20]
 8004ca6:	492d      	ldr	r1, [pc, #180]	; (8004d5c <RCCEx_PLL2_Config+0x15c>)
 8004ca8:	4313      	orrs	r3, r2
 8004caa:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Select PLL2 output frequency range : VCO */
    __HAL_RCC_PLL2_VCORANGE(pll2->PLL2VCOSEL) ;
 8004cac:	4b2b      	ldr	r3, [pc, #172]	; (8004d5c <RCCEx_PLL2_Config+0x15c>)
 8004cae:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004cb0:	f023 0220 	bic.w	r2, r3, #32
 8004cb4:	687b      	ldr	r3, [r7, #4]
 8004cb6:	699b      	ldr	r3, [r3, #24]
 8004cb8:	4928      	ldr	r1, [pc, #160]	; (8004d5c <RCCEx_PLL2_Config+0x15c>)
 8004cba:	4313      	orrs	r3, r2
 8004cbc:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Disable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_DISABLE();
 8004cbe:	4b27      	ldr	r3, [pc, #156]	; (8004d5c <RCCEx_PLL2_Config+0x15c>)
 8004cc0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004cc2:	4a26      	ldr	r2, [pc, #152]	; (8004d5c <RCCEx_PLL2_Config+0x15c>)
 8004cc4:	f023 0310 	bic.w	r3, r3, #16
 8004cc8:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Configures PLL2 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL2FRACN_CONFIG(pll2->PLL2FRACN);
 8004cca:	4b24      	ldr	r3, [pc, #144]	; (8004d5c <RCCEx_PLL2_Config+0x15c>)
 8004ccc:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8004cce:	4b24      	ldr	r3, [pc, #144]	; (8004d60 <RCCEx_PLL2_Config+0x160>)
 8004cd0:	4013      	ands	r3, r2
 8004cd2:	687a      	ldr	r2, [r7, #4]
 8004cd4:	69d2      	ldr	r2, [r2, #28]
 8004cd6:	00d2      	lsls	r2, r2, #3
 8004cd8:	4920      	ldr	r1, [pc, #128]	; (8004d5c <RCCEx_PLL2_Config+0x15c>)
 8004cda:	4313      	orrs	r3, r2
 8004cdc:	63cb      	str	r3, [r1, #60]	; 0x3c

    /* Enable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_ENABLE();
 8004cde:	4b1f      	ldr	r3, [pc, #124]	; (8004d5c <RCCEx_PLL2_Config+0x15c>)
 8004ce0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004ce2:	4a1e      	ldr	r2, [pc, #120]	; (8004d5c <RCCEx_PLL2_Config+0x15c>)
 8004ce4:	f043 0310 	orr.w	r3, r3, #16
 8004ce8:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Enable the PLL2 clock output */
    if(Divider == DIVIDER_P_UPDATE)
 8004cea:	683b      	ldr	r3, [r7, #0]
 8004cec:	2b00      	cmp	r3, #0
 8004cee:	d106      	bne.n	8004cfe <RCCEx_PLL2_Config+0xfe>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVP);
 8004cf0:	4b1a      	ldr	r3, [pc, #104]	; (8004d5c <RCCEx_PLL2_Config+0x15c>)
 8004cf2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004cf4:	4a19      	ldr	r2, [pc, #100]	; (8004d5c <RCCEx_PLL2_Config+0x15c>)
 8004cf6:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8004cfa:	62d3      	str	r3, [r2, #44]	; 0x2c
 8004cfc:	e00f      	b.n	8004d1e <RCCEx_PLL2_Config+0x11e>
    }
    else if(Divider == DIVIDER_Q_UPDATE)
 8004cfe:	683b      	ldr	r3, [r7, #0]
 8004d00:	2b01      	cmp	r3, #1
 8004d02:	d106      	bne.n	8004d12 <RCCEx_PLL2_Config+0x112>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVQ);
 8004d04:	4b15      	ldr	r3, [pc, #84]	; (8004d5c <RCCEx_PLL2_Config+0x15c>)
 8004d06:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004d08:	4a14      	ldr	r2, [pc, #80]	; (8004d5c <RCCEx_PLL2_Config+0x15c>)
 8004d0a:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8004d0e:	62d3      	str	r3, [r2, #44]	; 0x2c
 8004d10:	e005      	b.n	8004d1e <RCCEx_PLL2_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVR);
 8004d12:	4b12      	ldr	r3, [pc, #72]	; (8004d5c <RCCEx_PLL2_Config+0x15c>)
 8004d14:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004d16:	4a11      	ldr	r2, [pc, #68]	; (8004d5c <RCCEx_PLL2_Config+0x15c>)
 8004d18:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8004d1c:	62d3      	str	r3, [r2, #44]	; 0x2c
    }

    /* Enable  PLL2. */
    __HAL_RCC_PLL2_ENABLE();
 8004d1e:	4b0f      	ldr	r3, [pc, #60]	; (8004d5c <RCCEx_PLL2_Config+0x15c>)
 8004d20:	681b      	ldr	r3, [r3, #0]
 8004d22:	4a0e      	ldr	r2, [pc, #56]	; (8004d5c <RCCEx_PLL2_Config+0x15c>)
 8004d24:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8004d28:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004d2a:	f7fc f801 	bl	8000d30 <HAL_GetTick>
 8004d2e:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL2 is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 8004d30:	e008      	b.n	8004d44 <RCCEx_PLL2_Config+0x144>
    {
      if( (HAL_GetTick() - tickstart ) > PLL2_TIMEOUT_VALUE)
 8004d32:	f7fb fffd 	bl	8000d30 <HAL_GetTick>
 8004d36:	4602      	mov	r2, r0
 8004d38:	68bb      	ldr	r3, [r7, #8]
 8004d3a:	1ad3      	subs	r3, r2, r3
 8004d3c:	2b02      	cmp	r3, #2
 8004d3e:	d901      	bls.n	8004d44 <RCCEx_PLL2_Config+0x144>
      {
        return HAL_TIMEOUT;
 8004d40:	2303      	movs	r3, #3
 8004d42:	e006      	b.n	8004d52 <RCCEx_PLL2_Config+0x152>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 8004d44:	4b05      	ldr	r3, [pc, #20]	; (8004d5c <RCCEx_PLL2_Config+0x15c>)
 8004d46:	681b      	ldr	r3, [r3, #0]
 8004d48:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8004d4c:	2b00      	cmp	r3, #0
 8004d4e:	d0f0      	beq.n	8004d32 <RCCEx_PLL2_Config+0x132>
    }

  }


  return status;
 8004d50:	7bfb      	ldrb	r3, [r7, #15]
}
 8004d52:	4618      	mov	r0, r3
 8004d54:	3710      	adds	r7, #16
 8004d56:	46bd      	mov	sp, r7
 8004d58:	bd80      	pop	{r7, pc}
 8004d5a:	bf00      	nop
 8004d5c:	58024400 	.word	0x58024400
 8004d60:	ffff0007 	.word	0xffff0007

08004d64 <RCCEx_PLL3_Config>:
  * @note   PLL3 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL3_Config(RCC_PLL3InitTypeDef *pll3, uint32_t Divider)
{
 8004d64:	b580      	push	{r7, lr}
 8004d66:	b084      	sub	sp, #16
 8004d68:	af00      	add	r7, sp, #0
 8004d6a:	6078      	str	r0, [r7, #4]
 8004d6c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8004d6e:	2300      	movs	r3, #0
 8004d70:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL3RGE_VALUE(pll3->PLL3RGE));
  assert_param(IS_RCC_PLL3VCO_VALUE(pll3->PLL3VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll3->PLL3FRACN));

  /* Check that PLL3 OSC clock source is already set */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 8004d72:	4b53      	ldr	r3, [pc, #332]	; (8004ec0 <RCCEx_PLL3_Config+0x15c>)
 8004d74:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004d76:	f003 0303 	and.w	r3, r3, #3
 8004d7a:	2b03      	cmp	r3, #3
 8004d7c:	d101      	bne.n	8004d82 <RCCEx_PLL3_Config+0x1e>
  {
    return HAL_ERROR;
 8004d7e:	2301      	movs	r3, #1
 8004d80:	e099      	b.n	8004eb6 <RCCEx_PLL3_Config+0x152>


  else
  {
    /* Disable  PLL3. */
    __HAL_RCC_PLL3_DISABLE();
 8004d82:	4b4f      	ldr	r3, [pc, #316]	; (8004ec0 <RCCEx_PLL3_Config+0x15c>)
 8004d84:	681b      	ldr	r3, [r3, #0]
 8004d86:	4a4e      	ldr	r2, [pc, #312]	; (8004ec0 <RCCEx_PLL3_Config+0x15c>)
 8004d88:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8004d8c:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004d8e:	f7fb ffcf 	bl	8000d30 <HAL_GetTick>
 8004d92:	60b8      	str	r0, [r7, #8]
    /* Wait till PLL3 is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 8004d94:	e008      	b.n	8004da8 <RCCEx_PLL3_Config+0x44>
    {
      if( (HAL_GetTick() - tickstart ) > PLL3_TIMEOUT_VALUE)
 8004d96:	f7fb ffcb 	bl	8000d30 <HAL_GetTick>
 8004d9a:	4602      	mov	r2, r0
 8004d9c:	68bb      	ldr	r3, [r7, #8]
 8004d9e:	1ad3      	subs	r3, r2, r3
 8004da0:	2b02      	cmp	r3, #2
 8004da2:	d901      	bls.n	8004da8 <RCCEx_PLL3_Config+0x44>
      {
        return HAL_TIMEOUT;
 8004da4:	2303      	movs	r3, #3
 8004da6:	e086      	b.n	8004eb6 <RCCEx_PLL3_Config+0x152>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 8004da8:	4b45      	ldr	r3, [pc, #276]	; (8004ec0 <RCCEx_PLL3_Config+0x15c>)
 8004daa:	681b      	ldr	r3, [r3, #0]
 8004dac:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8004db0:	2b00      	cmp	r3, #0
 8004db2:	d1f0      	bne.n	8004d96 <RCCEx_PLL3_Config+0x32>
      }
    }

    /* Configure the PLL3  multiplication and division factors. */
    __HAL_RCC_PLL3_CONFIG(pll3->PLL3M,
 8004db4:	4b42      	ldr	r3, [pc, #264]	; (8004ec0 <RCCEx_PLL3_Config+0x15c>)
 8004db6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004db8:	f023 727c 	bic.w	r2, r3, #66060288	; 0x3f00000
 8004dbc:	687b      	ldr	r3, [r7, #4]
 8004dbe:	681b      	ldr	r3, [r3, #0]
 8004dc0:	051b      	lsls	r3, r3, #20
 8004dc2:	493f      	ldr	r1, [pc, #252]	; (8004ec0 <RCCEx_PLL3_Config+0x15c>)
 8004dc4:	4313      	orrs	r3, r2
 8004dc6:	628b      	str	r3, [r1, #40]	; 0x28
 8004dc8:	687b      	ldr	r3, [r7, #4]
 8004dca:	685b      	ldr	r3, [r3, #4]
 8004dcc:	3b01      	subs	r3, #1
 8004dce:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8004dd2:	687b      	ldr	r3, [r7, #4]
 8004dd4:	689b      	ldr	r3, [r3, #8]
 8004dd6:	3b01      	subs	r3, #1
 8004dd8:	025b      	lsls	r3, r3, #9
 8004dda:	b29b      	uxth	r3, r3
 8004ddc:	431a      	orrs	r2, r3
 8004dde:	687b      	ldr	r3, [r7, #4]
 8004de0:	68db      	ldr	r3, [r3, #12]
 8004de2:	3b01      	subs	r3, #1
 8004de4:	041b      	lsls	r3, r3, #16
 8004de6:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 8004dea:	431a      	orrs	r2, r3
 8004dec:	687b      	ldr	r3, [r7, #4]
 8004dee:	691b      	ldr	r3, [r3, #16]
 8004df0:	3b01      	subs	r3, #1
 8004df2:	061b      	lsls	r3, r3, #24
 8004df4:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 8004df8:	4931      	ldr	r1, [pc, #196]	; (8004ec0 <RCCEx_PLL3_Config+0x15c>)
 8004dfa:	4313      	orrs	r3, r2
 8004dfc:	640b      	str	r3, [r1, #64]	; 0x40
                          pll3->PLL3P,
                          pll3->PLL3Q,
                          pll3->PLL3R);

    /* Select PLL3 input reference frequency range: VCI */
    __HAL_RCC_PLL3_VCIRANGE(pll3->PLL3RGE) ;
 8004dfe:	4b30      	ldr	r3, [pc, #192]	; (8004ec0 <RCCEx_PLL3_Config+0x15c>)
 8004e00:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004e02:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 8004e06:	687b      	ldr	r3, [r7, #4]
 8004e08:	695b      	ldr	r3, [r3, #20]
 8004e0a:	492d      	ldr	r1, [pc, #180]	; (8004ec0 <RCCEx_PLL3_Config+0x15c>)
 8004e0c:	4313      	orrs	r3, r2
 8004e0e:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Select PLL3 output frequency range : VCO */
    __HAL_RCC_PLL3_VCORANGE(pll3->PLL3VCOSEL) ;
 8004e10:	4b2b      	ldr	r3, [pc, #172]	; (8004ec0 <RCCEx_PLL3_Config+0x15c>)
 8004e12:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004e14:	f423 7200 	bic.w	r2, r3, #512	; 0x200
 8004e18:	687b      	ldr	r3, [r7, #4]
 8004e1a:	699b      	ldr	r3, [r3, #24]
 8004e1c:	4928      	ldr	r1, [pc, #160]	; (8004ec0 <RCCEx_PLL3_Config+0x15c>)
 8004e1e:	4313      	orrs	r3, r2
 8004e20:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Disable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_DISABLE();
 8004e22:	4b27      	ldr	r3, [pc, #156]	; (8004ec0 <RCCEx_PLL3_Config+0x15c>)
 8004e24:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004e26:	4a26      	ldr	r2, [pc, #152]	; (8004ec0 <RCCEx_PLL3_Config+0x15c>)
 8004e28:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8004e2c:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Configures PLL3 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL3FRACN_CONFIG(pll3->PLL3FRACN);
 8004e2e:	4b24      	ldr	r3, [pc, #144]	; (8004ec0 <RCCEx_PLL3_Config+0x15c>)
 8004e30:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8004e32:	4b24      	ldr	r3, [pc, #144]	; (8004ec4 <RCCEx_PLL3_Config+0x160>)
 8004e34:	4013      	ands	r3, r2
 8004e36:	687a      	ldr	r2, [r7, #4]
 8004e38:	69d2      	ldr	r2, [r2, #28]
 8004e3a:	00d2      	lsls	r2, r2, #3
 8004e3c:	4920      	ldr	r1, [pc, #128]	; (8004ec0 <RCCEx_PLL3_Config+0x15c>)
 8004e3e:	4313      	orrs	r3, r2
 8004e40:	644b      	str	r3, [r1, #68]	; 0x44

    /* Enable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_ENABLE();
 8004e42:	4b1f      	ldr	r3, [pc, #124]	; (8004ec0 <RCCEx_PLL3_Config+0x15c>)
 8004e44:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004e46:	4a1e      	ldr	r2, [pc, #120]	; (8004ec0 <RCCEx_PLL3_Config+0x15c>)
 8004e48:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004e4c:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Enable the PLL3 clock output */
    if(Divider == DIVIDER_P_UPDATE)
 8004e4e:	683b      	ldr	r3, [r7, #0]
 8004e50:	2b00      	cmp	r3, #0
 8004e52:	d106      	bne.n	8004e62 <RCCEx_PLL3_Config+0xfe>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVP);
 8004e54:	4b1a      	ldr	r3, [pc, #104]	; (8004ec0 <RCCEx_PLL3_Config+0x15c>)
 8004e56:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004e58:	4a19      	ldr	r2, [pc, #100]	; (8004ec0 <RCCEx_PLL3_Config+0x15c>)
 8004e5a:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8004e5e:	62d3      	str	r3, [r2, #44]	; 0x2c
 8004e60:	e00f      	b.n	8004e82 <RCCEx_PLL3_Config+0x11e>
    }
    else if(Divider == DIVIDER_Q_UPDATE)
 8004e62:	683b      	ldr	r3, [r7, #0]
 8004e64:	2b01      	cmp	r3, #1
 8004e66:	d106      	bne.n	8004e76 <RCCEx_PLL3_Config+0x112>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVQ);
 8004e68:	4b15      	ldr	r3, [pc, #84]	; (8004ec0 <RCCEx_PLL3_Config+0x15c>)
 8004e6a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004e6c:	4a14      	ldr	r2, [pc, #80]	; (8004ec0 <RCCEx_PLL3_Config+0x15c>)
 8004e6e:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8004e72:	62d3      	str	r3, [r2, #44]	; 0x2c
 8004e74:	e005      	b.n	8004e82 <RCCEx_PLL3_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVR);
 8004e76:	4b12      	ldr	r3, [pc, #72]	; (8004ec0 <RCCEx_PLL3_Config+0x15c>)
 8004e78:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004e7a:	4a11      	ldr	r2, [pc, #68]	; (8004ec0 <RCCEx_PLL3_Config+0x15c>)
 8004e7c:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8004e80:	62d3      	str	r3, [r2, #44]	; 0x2c
    }

    /* Enable  PLL3. */
    __HAL_RCC_PLL3_ENABLE();
 8004e82:	4b0f      	ldr	r3, [pc, #60]	; (8004ec0 <RCCEx_PLL3_Config+0x15c>)
 8004e84:	681b      	ldr	r3, [r3, #0]
 8004e86:	4a0e      	ldr	r2, [pc, #56]	; (8004ec0 <RCCEx_PLL3_Config+0x15c>)
 8004e88:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004e8c:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004e8e:	f7fb ff4f 	bl	8000d30 <HAL_GetTick>
 8004e92:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL3 is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 8004e94:	e008      	b.n	8004ea8 <RCCEx_PLL3_Config+0x144>
    {
      if( (HAL_GetTick() - tickstart ) > PLL3_TIMEOUT_VALUE)
 8004e96:	f7fb ff4b 	bl	8000d30 <HAL_GetTick>
 8004e9a:	4602      	mov	r2, r0
 8004e9c:	68bb      	ldr	r3, [r7, #8]
 8004e9e:	1ad3      	subs	r3, r2, r3
 8004ea0:	2b02      	cmp	r3, #2
 8004ea2:	d901      	bls.n	8004ea8 <RCCEx_PLL3_Config+0x144>
      {
        return HAL_TIMEOUT;
 8004ea4:	2303      	movs	r3, #3
 8004ea6:	e006      	b.n	8004eb6 <RCCEx_PLL3_Config+0x152>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 8004ea8:	4b05      	ldr	r3, [pc, #20]	; (8004ec0 <RCCEx_PLL3_Config+0x15c>)
 8004eaa:	681b      	ldr	r3, [r3, #0]
 8004eac:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8004eb0:	2b00      	cmp	r3, #0
 8004eb2:	d0f0      	beq.n	8004e96 <RCCEx_PLL3_Config+0x132>
    }

  }


  return status;
 8004eb4:	7bfb      	ldrb	r3, [r7, #15]
}
 8004eb6:	4618      	mov	r0, r3
 8004eb8:	3710      	adds	r7, #16
 8004eba:	46bd      	mov	sp, r7
 8004ebc:	bd80      	pop	{r7, pc}
 8004ebe:	bf00      	nop
 8004ec0:	58024400 	.word	0x58024400
 8004ec4:	ffff0007 	.word	0xffff0007

08004ec8 <HAL_SPI_Init>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8004ec8:	b580      	push	{r7, lr}
 8004eca:	b084      	sub	sp, #16
 8004ecc:	af00      	add	r7, sp, #0
 8004ece:	6078      	str	r0, [r7, #4]
  uint32_t crc_length;
  uint32_t packet_length;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8004ed0:	687b      	ldr	r3, [r7, #4]
 8004ed2:	2b00      	cmp	r3, #0
 8004ed4:	d101      	bne.n	8004eda <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8004ed6:	2301      	movs	r3, #1
 8004ed8:	e0f1      	b.n	80050be <HAL_SPI_Init+0x1f6>
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_INITIALIZATION_PATTERN(hspi->Init.TxCRCInitializationPattern));
    assert_param(IS_SPI_CRC_INITIALIZATION_PATTERN(hspi->Init.RxCRCInitializationPattern));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8004eda:	687b      	ldr	r3, [r7, #4]
 8004edc:	2200      	movs	r2, #0
 8004ede:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  /* Verify that the SPI instance supports Data Size higher than 16bits */
  if ((!IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (hspi->Init.DataSize > SPI_DATASIZE_16BIT))
 8004ee0:	687b      	ldr	r3, [r7, #4]
 8004ee2:	681b      	ldr	r3, [r3, #0]
 8004ee4:	4a78      	ldr	r2, [pc, #480]	; (80050c8 <HAL_SPI_Init+0x200>)
 8004ee6:	4293      	cmp	r3, r2
 8004ee8:	d00f      	beq.n	8004f0a <HAL_SPI_Init+0x42>
 8004eea:	687b      	ldr	r3, [r7, #4]
 8004eec:	681b      	ldr	r3, [r3, #0]
 8004eee:	4a77      	ldr	r2, [pc, #476]	; (80050cc <HAL_SPI_Init+0x204>)
 8004ef0:	4293      	cmp	r3, r2
 8004ef2:	d00a      	beq.n	8004f0a <HAL_SPI_Init+0x42>
 8004ef4:	687b      	ldr	r3, [r7, #4]
 8004ef6:	681b      	ldr	r3, [r3, #0]
 8004ef8:	4a75      	ldr	r2, [pc, #468]	; (80050d0 <HAL_SPI_Init+0x208>)
 8004efa:	4293      	cmp	r3, r2
 8004efc:	d005      	beq.n	8004f0a <HAL_SPI_Init+0x42>
 8004efe:	687b      	ldr	r3, [r7, #4]
 8004f00:	68db      	ldr	r3, [r3, #12]
 8004f02:	2b0f      	cmp	r3, #15
 8004f04:	d901      	bls.n	8004f0a <HAL_SPI_Init+0x42>
  {
    return HAL_ERROR;
 8004f06:	2301      	movs	r3, #1
 8004f08:	e0d9      	b.n	80050be <HAL_SPI_Init+0x1f6>
  }

  /* Verify that the SPI instance supports requested data packing */
  packet_length = SPI_GetPacketSize(hspi);
 8004f0a:	6878      	ldr	r0, [r7, #4]
 8004f0c:	f001 f864 	bl	8005fd8 <SPI_GetPacketSize>
 8004f10:	60f8      	str	r0, [r7, #12]
  if (((!IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_LOWEND_FIFO_SIZE)) ||
 8004f12:	687b      	ldr	r3, [r7, #4]
 8004f14:	681b      	ldr	r3, [r3, #0]
 8004f16:	4a6c      	ldr	r2, [pc, #432]	; (80050c8 <HAL_SPI_Init+0x200>)
 8004f18:	4293      	cmp	r3, r2
 8004f1a:	d00c      	beq.n	8004f36 <HAL_SPI_Init+0x6e>
 8004f1c:	687b      	ldr	r3, [r7, #4]
 8004f1e:	681b      	ldr	r3, [r3, #0]
 8004f20:	4a6a      	ldr	r2, [pc, #424]	; (80050cc <HAL_SPI_Init+0x204>)
 8004f22:	4293      	cmp	r3, r2
 8004f24:	d007      	beq.n	8004f36 <HAL_SPI_Init+0x6e>
 8004f26:	687b      	ldr	r3, [r7, #4]
 8004f28:	681b      	ldr	r3, [r3, #0]
 8004f2a:	4a69      	ldr	r2, [pc, #420]	; (80050d0 <HAL_SPI_Init+0x208>)
 8004f2c:	4293      	cmp	r3, r2
 8004f2e:	d002      	beq.n	8004f36 <HAL_SPI_Init+0x6e>
 8004f30:	68fb      	ldr	r3, [r7, #12]
 8004f32:	2b08      	cmp	r3, #8
 8004f34:	d811      	bhi.n	8004f5a <HAL_SPI_Init+0x92>
      ((IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_HIGHEND_FIFO_SIZE)))
 8004f36:	687b      	ldr	r3, [r7, #4]
 8004f38:	681b      	ldr	r3, [r3, #0]
  if (((!IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_LOWEND_FIFO_SIZE)) ||
 8004f3a:	4a63      	ldr	r2, [pc, #396]	; (80050c8 <HAL_SPI_Init+0x200>)
 8004f3c:	4293      	cmp	r3, r2
 8004f3e:	d009      	beq.n	8004f54 <HAL_SPI_Init+0x8c>
      ((IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_HIGHEND_FIFO_SIZE)))
 8004f40:	687b      	ldr	r3, [r7, #4]
 8004f42:	681b      	ldr	r3, [r3, #0]
 8004f44:	4a61      	ldr	r2, [pc, #388]	; (80050cc <HAL_SPI_Init+0x204>)
 8004f46:	4293      	cmp	r3, r2
 8004f48:	d004      	beq.n	8004f54 <HAL_SPI_Init+0x8c>
 8004f4a:	687b      	ldr	r3, [r7, #4]
 8004f4c:	681b      	ldr	r3, [r3, #0]
 8004f4e:	4a60      	ldr	r2, [pc, #384]	; (80050d0 <HAL_SPI_Init+0x208>)
 8004f50:	4293      	cmp	r3, r2
 8004f52:	d104      	bne.n	8004f5e <HAL_SPI_Init+0x96>
 8004f54:	68fb      	ldr	r3, [r7, #12]
 8004f56:	2b10      	cmp	r3, #16
 8004f58:	d901      	bls.n	8004f5e <HAL_SPI_Init+0x96>
  {
    return HAL_ERROR;
 8004f5a:	2301      	movs	r3, #1
 8004f5c:	e0af      	b.n	80050be <HAL_SPI_Init+0x1f6>
  {
    crc_length = hspi->Init.DataSize << SPI_CFG1_CRCSIZE_Pos;
  }
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8004f5e:	687b      	ldr	r3, [r7, #4]
 8004f60:	f893 3081 	ldrb.w	r3, [r3, #129]	; 0x81
 8004f64:	b2db      	uxtb	r3, r3
 8004f66:	2b00      	cmp	r3, #0
 8004f68:	d106      	bne.n	8004f78 <HAL_SPI_Init+0xb0>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8004f6a:	687b      	ldr	r3, [r7, #4]
 8004f6c:	2200      	movs	r2, #0
 8004f6e:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8004f72:	6878      	ldr	r0, [r7, #4]
 8004f74:	f7fb fca0 	bl	80008b8 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8004f78:	687b      	ldr	r3, [r7, #4]
 8004f7a:	2202      	movs	r2, #2
 8004f7c:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8004f80:	687b      	ldr	r3, [r7, #4]
 8004f82:	681b      	ldr	r3, [r3, #0]
 8004f84:	681a      	ldr	r2, [r3, #0]
 8004f86:	687b      	ldr	r3, [r7, #4]
 8004f88:	681b      	ldr	r3, [r3, #0]
 8004f8a:	f022 0201 	bic.w	r2, r2, #1
 8004f8e:	601a      	str	r2, [r3, #0]

#if (USE_SPI_CRC == 0)
  /* Keep the default value of CRCSIZE in case of CRC is not used */
  crc_length = hspi->Instance->CFG1 & SPI_CFG1_CRCSIZE;
 8004f90:	687b      	ldr	r3, [r7, #4]
 8004f92:	681b      	ldr	r3, [r3, #0]
 8004f94:	689b      	ldr	r3, [r3, #8]
 8004f96:	f403 13f8 	and.w	r3, r3, #2031616	; 0x1f0000
 8004f9a:	60bb      	str	r3, [r7, #8]
  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit, CRC calculation state, CRC Length */

  /* SPIx NSS Software Management Configuration */
  if ((hspi->Init.NSS == SPI_NSS_SOFT) && (((hspi->Init.Mode == SPI_MODE_MASTER) &&  \
 8004f9c:	687b      	ldr	r3, [r7, #4]
 8004f9e:	699b      	ldr	r3, [r3, #24]
 8004fa0:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8004fa4:	d119      	bne.n	8004fda <HAL_SPI_Init+0x112>
 8004fa6:	687b      	ldr	r3, [r7, #4]
 8004fa8:	685b      	ldr	r3, [r3, #4]
 8004faa:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8004fae:	d103      	bne.n	8004fb8 <HAL_SPI_Init+0xf0>
                                            (hspi->Init.NSSPolarity == SPI_NSS_POLARITY_LOW)) || \
 8004fb0:	687b      	ldr	r3, [r7, #4]
 8004fb2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
  if ((hspi->Init.NSS == SPI_NSS_SOFT) && (((hspi->Init.Mode == SPI_MODE_MASTER) &&  \
 8004fb4:	2b00      	cmp	r3, #0
 8004fb6:	d008      	beq.n	8004fca <HAL_SPI_Init+0x102>
                                           ((hspi->Init.Mode == SPI_MODE_SLAVE) && \
 8004fb8:	687b      	ldr	r3, [r7, #4]
 8004fba:	685b      	ldr	r3, [r3, #4]
                                            (hspi->Init.NSSPolarity == SPI_NSS_POLARITY_LOW)) || \
 8004fbc:	2b00      	cmp	r3, #0
 8004fbe:	d10c      	bne.n	8004fda <HAL_SPI_Init+0x112>
                                            (hspi->Init.NSSPolarity == SPI_NSS_POLARITY_HIGH))))
 8004fc0:	687b      	ldr	r3, [r7, #4]
 8004fc2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
                                           ((hspi->Init.Mode == SPI_MODE_SLAVE) && \
 8004fc4:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8004fc8:	d107      	bne.n	8004fda <HAL_SPI_Init+0x112>
  {
    SET_BIT(hspi->Instance->CR1, SPI_CR1_SSI);
 8004fca:	687b      	ldr	r3, [r7, #4]
 8004fcc:	681b      	ldr	r3, [r3, #0]
 8004fce:	681a      	ldr	r2, [r3, #0]
 8004fd0:	687b      	ldr	r3, [r7, #4]
 8004fd2:	681b      	ldr	r3, [r3, #0]
 8004fd4:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8004fd8:	601a      	str	r2, [r3, #0]
  }

  /* SPIx CFG1 Configuration */
  WRITE_REG(hspi->Instance->CFG1, (hspi->Init.BaudRatePrescaler | hspi->Init.CRCCalculation | crc_length |
 8004fda:	687b      	ldr	r3, [r7, #4]
 8004fdc:	69da      	ldr	r2, [r3, #28]
 8004fde:	687b      	ldr	r3, [r7, #4]
 8004fe0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004fe2:	431a      	orrs	r2, r3
 8004fe4:	68bb      	ldr	r3, [r7, #8]
 8004fe6:	431a      	orrs	r2, r3
 8004fe8:	687b      	ldr	r3, [r7, #4]
 8004fea:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004fec:	ea42 0103 	orr.w	r1, r2, r3
 8004ff0:	687b      	ldr	r3, [r7, #4]
 8004ff2:	68da      	ldr	r2, [r3, #12]
 8004ff4:	687b      	ldr	r3, [r7, #4]
 8004ff6:	681b      	ldr	r3, [r3, #0]
 8004ff8:	430a      	orrs	r2, r1
 8004ffa:	609a      	str	r2, [r3, #8]
                                   hspi->Init.FifoThreshold     | hspi->Init.DataSize));

  /* SPIx CFG2 Configuration */
  WRITE_REG(hspi->Instance->CFG2, (hspi->Init.NSSPMode                | hspi->Init.TIMode    |
 8004ffc:	687b      	ldr	r3, [r7, #4]
 8004ffe:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8005000:	687b      	ldr	r3, [r7, #4]
 8005002:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005004:	431a      	orrs	r2, r3
 8005006:	687b      	ldr	r3, [r7, #4]
 8005008:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800500a:	431a      	orrs	r2, r3
 800500c:	687b      	ldr	r3, [r7, #4]
 800500e:	699b      	ldr	r3, [r3, #24]
 8005010:	431a      	orrs	r2, r3
 8005012:	687b      	ldr	r3, [r7, #4]
 8005014:	691b      	ldr	r3, [r3, #16]
 8005016:	431a      	orrs	r2, r3
 8005018:	687b      	ldr	r3, [r7, #4]
 800501a:	695b      	ldr	r3, [r3, #20]
 800501c:	431a      	orrs	r2, r3
 800501e:	687b      	ldr	r3, [r7, #4]
 8005020:	6a1b      	ldr	r3, [r3, #32]
 8005022:	431a      	orrs	r2, r3
 8005024:	687b      	ldr	r3, [r7, #4]
 8005026:	685b      	ldr	r3, [r3, #4]
 8005028:	431a      	orrs	r2, r3
 800502a:	687b      	ldr	r3, [r7, #4]
 800502c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800502e:	431a      	orrs	r2, r3
 8005030:	687b      	ldr	r3, [r7, #4]
 8005032:	689b      	ldr	r3, [r3, #8]
 8005034:	431a      	orrs	r2, r3
 8005036:	687b      	ldr	r3, [r7, #4]
 8005038:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800503a:	ea42 0103 	orr.w	r1, r2, r3
 800503e:	687b      	ldr	r3, [r7, #4]
 8005040:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 8005042:	687b      	ldr	r3, [r7, #4]
 8005044:	681b      	ldr	r3, [r3, #0]
 8005046:	430a      	orrs	r2, r1
 8005048:	60da      	str	r2, [r3, #12]
    WRITE_REG(hspi->Instance->CRCPOLY, hspi->Init.CRCPolynomial);
  }
#endif /* USE_SPI_CRC */

  /* Insure that Underrun configuration is managed only by Salve */
  if (hspi->Init.Mode == SPI_MODE_SLAVE)
 800504a:	687b      	ldr	r3, [r7, #4]
 800504c:	685b      	ldr	r3, [r3, #4]
 800504e:	2b00      	cmp	r3, #0
 8005050:	d113      	bne.n	800507a <HAL_SPI_Init+0x1b2>
    /* Set Default Underrun configuration */
#if (USE_SPI_CRC != 0UL)
    if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_DISABLE)
#endif /* USE_SPI_CRC */
    {
      MODIFY_REG(hspi->Instance->CFG1, SPI_CFG1_UDRDET, SPI_CFG1_UDRDET_0);
 8005052:	687b      	ldr	r3, [r7, #4]
 8005054:	681b      	ldr	r3, [r3, #0]
 8005056:	689b      	ldr	r3, [r3, #8]
 8005058:	f423 52c0 	bic.w	r2, r3, #6144	; 0x1800
 800505c:	687b      	ldr	r3, [r7, #4]
 800505e:	681b      	ldr	r3, [r3, #0]
 8005060:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8005064:	609a      	str	r2, [r3, #8]
    }
    MODIFY_REG(hspi->Instance->CFG1, SPI_CFG1_UDRCFG, SPI_CFG1_UDRCFG_1);
 8005066:	687b      	ldr	r3, [r7, #4]
 8005068:	681b      	ldr	r3, [r3, #0]
 800506a:	689b      	ldr	r3, [r3, #8]
 800506c:	f423 62c0 	bic.w	r2, r3, #1536	; 0x600
 8005070:	687b      	ldr	r3, [r7, #4]
 8005072:	681b      	ldr	r3, [r3, #0]
 8005074:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8005078:	609a      	str	r2, [r3, #8]
  }

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 800507a:	687b      	ldr	r3, [r7, #4]
 800507c:	681b      	ldr	r3, [r3, #0]
 800507e:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8005080:	687b      	ldr	r3, [r7, #4]
 8005082:	681b      	ldr	r3, [r3, #0]
 8005084:	f022 0201 	bic.w	r2, r2, #1
 8005088:	651a      	str	r2, [r3, #80]	; 0x50
#endif /* SPI_I2SCFGR_I2SMOD */

  /* Insure that AFCNTR is managed only by Master */
  if ((hspi->Init.Mode & SPI_MODE_MASTER) == SPI_MODE_MASTER)
 800508a:	687b      	ldr	r3, [r7, #4]
 800508c:	685b      	ldr	r3, [r3, #4]
 800508e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8005092:	2b00      	cmp	r3, #0
 8005094:	d00a      	beq.n	80050ac <HAL_SPI_Init+0x1e4>
  {
    /* Alternate function GPIOs control */
    MODIFY_REG(hspi->Instance->CFG2, SPI_CFG2_AFCNTR, (hspi->Init.MasterKeepIOState));
 8005096:	687b      	ldr	r3, [r7, #4]
 8005098:	681b      	ldr	r3, [r3, #0]
 800509a:	68db      	ldr	r3, [r3, #12]
 800509c:	f023 4100 	bic.w	r1, r3, #2147483648	; 0x80000000
 80050a0:	687b      	ldr	r3, [r7, #4]
 80050a2:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 80050a4:	687b      	ldr	r3, [r7, #4]
 80050a6:	681b      	ldr	r3, [r3, #0]
 80050a8:	430a      	orrs	r2, r1
 80050aa:	60da      	str	r2, [r3, #12]
  }

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 80050ac:	687b      	ldr	r3, [r7, #4]
 80050ae:	2200      	movs	r2, #0
 80050b0:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  hspi->State     = HAL_SPI_STATE_READY;
 80050b4:	687b      	ldr	r3, [r7, #4]
 80050b6:	2201      	movs	r2, #1
 80050b8:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81

  return HAL_OK;
 80050bc:	2300      	movs	r3, #0
}
 80050be:	4618      	mov	r0, r3
 80050c0:	3710      	adds	r7, #16
 80050c2:	46bd      	mov	sp, r7
 80050c4:	bd80      	pop	{r7, pc}
 80050c6:	bf00      	nop
 80050c8:	40013000 	.word	0x40013000
 80050cc:	40003800 	.word	0x40003800
 80050d0:	40003c00 	.word	0x40003c00

080050d4 <HAL_SPI_Transmit>:
  * @param  Size   : amount of data to be sent
  * @param  Timeout: Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80050d4:	b580      	push	{r7, lr}
 80050d6:	b08a      	sub	sp, #40	; 0x28
 80050d8:	af02      	add	r7, sp, #8
 80050da:	60f8      	str	r0, [r7, #12]
 80050dc:	60b9      	str	r1, [r7, #8]
 80050de:	603b      	str	r3, [r7, #0]
 80050e0:	4613      	mov	r3, r2
 80050e2:	80fb      	strh	r3, [r7, #6]
#if defined (__GNUC__)
  __IO uint16_t *ptxdr_16bits = (__IO uint16_t *)(&(hspi->Instance->TXDR));
 80050e4:	68fb      	ldr	r3, [r7, #12]
 80050e6:	681b      	ldr	r3, [r3, #0]
 80050e8:	3320      	adds	r3, #32
 80050ea:	61fb      	str	r3, [r7, #28]
#endif /* __GNUC__ */

  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 80050ec:	2300      	movs	r3, #0
 80050ee:	76fb      	strb	r3, [r7, #27]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE_2LINES_TXONLY(hspi->Init.Direction));

  /* Lock the process */
  __HAL_LOCK(hspi);
 80050f0:	68fb      	ldr	r3, [r7, #12]
 80050f2:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 80050f6:	2b01      	cmp	r3, #1
 80050f8:	d101      	bne.n	80050fe <HAL_SPI_Transmit+0x2a>
 80050fa:	2302      	movs	r3, #2
 80050fc:	e1d7      	b.n	80054ae <HAL_SPI_Transmit+0x3da>
 80050fe:	68fb      	ldr	r3, [r7, #12]
 8005100:	2201      	movs	r2, #1
 8005102:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8005106:	f7fb fe13 	bl	8000d30 <HAL_GetTick>
 800510a:	6178      	str	r0, [r7, #20]

  if (hspi->State != HAL_SPI_STATE_READY)
 800510c:	68fb      	ldr	r3, [r7, #12]
 800510e:	f893 3081 	ldrb.w	r3, [r3, #129]	; 0x81
 8005112:	b2db      	uxtb	r3, r3
 8005114:	2b01      	cmp	r3, #1
 8005116:	d007      	beq.n	8005128 <HAL_SPI_Transmit+0x54>
  {
    errorcode = HAL_BUSY;
 8005118:	2302      	movs	r3, #2
 800511a:	76fb      	strb	r3, [r7, #27]
    __HAL_UNLOCK(hspi);
 800511c:	68fb      	ldr	r3, [r7, #12]
 800511e:	2200      	movs	r2, #0
 8005120:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80
    return errorcode;
 8005124:	7efb      	ldrb	r3, [r7, #27]
 8005126:	e1c2      	b.n	80054ae <HAL_SPI_Transmit+0x3da>
  }

  if ((pData == NULL) || (Size == 0UL))
 8005128:	68bb      	ldr	r3, [r7, #8]
 800512a:	2b00      	cmp	r3, #0
 800512c:	d002      	beq.n	8005134 <HAL_SPI_Transmit+0x60>
 800512e:	88fb      	ldrh	r3, [r7, #6]
 8005130:	2b00      	cmp	r3, #0
 8005132:	d107      	bne.n	8005144 <HAL_SPI_Transmit+0x70>
  {
    errorcode = HAL_ERROR;
 8005134:	2301      	movs	r3, #1
 8005136:	76fb      	strb	r3, [r7, #27]
    __HAL_UNLOCK(hspi);
 8005138:	68fb      	ldr	r3, [r7, #12]
 800513a:	2200      	movs	r2, #0
 800513c:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80
    return errorcode;
 8005140:	7efb      	ldrb	r3, [r7, #27]
 8005142:	e1b4      	b.n	80054ae <HAL_SPI_Transmit+0x3da>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 8005144:	68fb      	ldr	r3, [r7, #12]
 8005146:	2203      	movs	r2, #3
 8005148:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 800514c:	68fb      	ldr	r3, [r7, #12]
 800514e:	2200      	movs	r2, #0
 8005150:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 8005154:	68fb      	ldr	r3, [r7, #12]
 8005156:	68ba      	ldr	r2, [r7, #8]
 8005158:	65da      	str	r2, [r3, #92]	; 0x5c
  hspi->TxXferSize  = Size;
 800515a:	68fb      	ldr	r3, [r7, #12]
 800515c:	88fa      	ldrh	r2, [r7, #6]
 800515e:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
  hspi->TxXferCount = Size;
 8005162:	68fb      	ldr	r3, [r7, #12]
 8005164:	88fa      	ldrh	r2, [r7, #6]
 8005166:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = NULL;
 800516a:	68fb      	ldr	r3, [r7, #12]
 800516c:	2200      	movs	r2, #0
 800516e:	665a      	str	r2, [r3, #100]	; 0x64
  hspi->RxXferSize  = (uint16_t) 0UL;
 8005170:	68fb      	ldr	r3, [r7, #12]
 8005172:	2200      	movs	r2, #0
 8005174:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
  hspi->RxXferCount = (uint16_t) 0UL;
 8005178:	68fb      	ldr	r3, [r7, #12]
 800517a:	2200      	movs	r2, #0
 800517c:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
  hspi->TxISR       = NULL;
 8005180:	68fb      	ldr	r3, [r7, #12]
 8005182:	2200      	movs	r2, #0
 8005184:	675a      	str	r2, [r3, #116]	; 0x74
  hspi->RxISR       = NULL;
 8005186:	68fb      	ldr	r3, [r7, #12]
 8005188:	2200      	movs	r2, #0
 800518a:	671a      	str	r2, [r3, #112]	; 0x70

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800518c:	68fb      	ldr	r3, [r7, #12]
 800518e:	689b      	ldr	r3, [r3, #8]
 8005190:	f5b3 2fc0 	cmp.w	r3, #393216	; 0x60000
 8005194:	d107      	bne.n	80051a6 <HAL_SPI_Transmit+0xd2>
  {
    SPI_1LINE_TX(hspi);
 8005196:	68fb      	ldr	r3, [r7, #12]
 8005198:	681b      	ldr	r3, [r3, #0]
 800519a:	681a      	ldr	r2, [r3, #0]
 800519c:	68fb      	ldr	r3, [r7, #12]
 800519e:	681b      	ldr	r3, [r3, #0]
 80051a0:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80051a4:	601a      	str	r2, [r3, #0]
  }

  /* Set the number of data at current transfer */
  MODIFY_REG(hspi->Instance->CR2, SPI_CR2_TSIZE, Size);
 80051a6:	68fb      	ldr	r3, [r7, #12]
 80051a8:	681b      	ldr	r3, [r3, #0]
 80051aa:	685a      	ldr	r2, [r3, #4]
 80051ac:	4b96      	ldr	r3, [pc, #600]	; (8005408 <HAL_SPI_Transmit+0x334>)
 80051ae:	4013      	ands	r3, r2
 80051b0:	88f9      	ldrh	r1, [r7, #6]
 80051b2:	68fa      	ldr	r2, [r7, #12]
 80051b4:	6812      	ldr	r2, [r2, #0]
 80051b6:	430b      	orrs	r3, r1
 80051b8:	6053      	str	r3, [r2, #4]

  /* Enable SPI peripheral */
  __HAL_SPI_ENABLE(hspi);
 80051ba:	68fb      	ldr	r3, [r7, #12]
 80051bc:	681b      	ldr	r3, [r3, #0]
 80051be:	681a      	ldr	r2, [r3, #0]
 80051c0:	68fb      	ldr	r3, [r7, #12]
 80051c2:	681b      	ldr	r3, [r3, #0]
 80051c4:	f042 0201 	orr.w	r2, r2, #1
 80051c8:	601a      	str	r2, [r3, #0]

  if (hspi->Init.Mode == SPI_MODE_MASTER)
 80051ca:	68fb      	ldr	r3, [r7, #12]
 80051cc:	685b      	ldr	r3, [r3, #4]
 80051ce:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80051d2:	d107      	bne.n	80051e4 <HAL_SPI_Transmit+0x110>
  {
    /* Master transfer start */
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CSTART);
 80051d4:	68fb      	ldr	r3, [r7, #12]
 80051d6:	681b      	ldr	r3, [r3, #0]
 80051d8:	681a      	ldr	r2, [r3, #0]
 80051da:	68fb      	ldr	r3, [r7, #12]
 80051dc:	681b      	ldr	r3, [r3, #0]
 80051de:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80051e2:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 32 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_16BIT)
 80051e4:	68fb      	ldr	r3, [r7, #12]
 80051e6:	68db      	ldr	r3, [r3, #12]
 80051e8:	2b0f      	cmp	r3, #15
 80051ea:	d947      	bls.n	800527c <HAL_SPI_Transmit+0x1a8>
  {
    /* Transmit data in 32 Bit mode */
    while (hspi->TxXferCount > 0UL)
 80051ec:	e03f      	b.n	800526e <HAL_SPI_Transmit+0x19a>
    {
      /* Wait until TXP flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXP))
 80051ee:	68fb      	ldr	r3, [r7, #12]
 80051f0:	681b      	ldr	r3, [r3, #0]
 80051f2:	695b      	ldr	r3, [r3, #20]
 80051f4:	f003 0302 	and.w	r3, r3, #2
 80051f8:	2b02      	cmp	r3, #2
 80051fa:	d114      	bne.n	8005226 <HAL_SPI_Transmit+0x152>
      {
        *((__IO uint32_t *)&hspi->Instance->TXDR) = *((uint32_t *)hspi->pTxBuffPtr);
 80051fc:	68fb      	ldr	r3, [r7, #12]
 80051fe:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8005200:	68fb      	ldr	r3, [r7, #12]
 8005202:	681b      	ldr	r3, [r3, #0]
 8005204:	6812      	ldr	r2, [r2, #0]
 8005206:	621a      	str	r2, [r3, #32]
        hspi->pTxBuffPtr += sizeof(uint32_t);
 8005208:	68fb      	ldr	r3, [r7, #12]
 800520a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800520c:	1d1a      	adds	r2, r3, #4
 800520e:	68fb      	ldr	r3, [r7, #12]
 8005210:	65da      	str	r2, [r3, #92]	; 0x5c
        hspi->TxXferCount--;
 8005212:	68fb      	ldr	r3, [r7, #12]
 8005214:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 8005218:	b29b      	uxth	r3, r3
 800521a:	3b01      	subs	r3, #1
 800521c:	b29a      	uxth	r2, r3
 800521e:	68fb      	ldr	r3, [r7, #12]
 8005220:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
 8005224:	e023      	b.n	800526e <HAL_SPI_Transmit+0x19a>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8005226:	f7fb fd83 	bl	8000d30 <HAL_GetTick>
 800522a:	4602      	mov	r2, r0
 800522c:	697b      	ldr	r3, [r7, #20]
 800522e:	1ad3      	subs	r3, r2, r3
 8005230:	683a      	ldr	r2, [r7, #0]
 8005232:	429a      	cmp	r2, r3
 8005234:	d803      	bhi.n	800523e <HAL_SPI_Transmit+0x16a>
 8005236:	683b      	ldr	r3, [r7, #0]
 8005238:	f1b3 3fff 	cmp.w	r3, #4294967295
 800523c:	d102      	bne.n	8005244 <HAL_SPI_Transmit+0x170>
 800523e:	683b      	ldr	r3, [r7, #0]
 8005240:	2b00      	cmp	r3, #0
 8005242:	d114      	bne.n	800526e <HAL_SPI_Transmit+0x19a>
        {
          /* Call standard close procedure with error check */
          SPI_CloseTransfer(hspi);
 8005244:	68f8      	ldr	r0, [r7, #12]
 8005246:	f000 fdf9 	bl	8005e3c <SPI_CloseTransfer>

          /* Unlock the process */
          __HAL_UNLOCK(hspi);
 800524a:	68fb      	ldr	r3, [r7, #12]
 800524c:	2200      	movs	r2, #0
 800524e:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

          SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_TIMEOUT);
 8005252:	68fb      	ldr	r3, [r7, #12]
 8005254:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8005258:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 800525c:	68fb      	ldr	r3, [r7, #12]
 800525e:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
          hspi->State = HAL_SPI_STATE_READY;
 8005262:	68fb      	ldr	r3, [r7, #12]
 8005264:	2201      	movs	r2, #1
 8005266:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81
          return HAL_TIMEOUT;
 800526a:	2303      	movs	r3, #3
 800526c:	e11f      	b.n	80054ae <HAL_SPI_Transmit+0x3da>
    while (hspi->TxXferCount > 0UL)
 800526e:	68fb      	ldr	r3, [r7, #12]
 8005270:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 8005274:	b29b      	uxth	r3, r3
 8005276:	2b00      	cmp	r3, #0
 8005278:	d1b9      	bne.n	80051ee <HAL_SPI_Transmit+0x11a>
 800527a:	e0f2      	b.n	8005462 <HAL_SPI_Transmit+0x38e>
        }
      }
    }
  }
  /* Transmit data in 16 Bit mode */
  else if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 800527c:	68fb      	ldr	r3, [r7, #12]
 800527e:	68db      	ldr	r3, [r3, #12]
 8005280:	2b07      	cmp	r3, #7
 8005282:	f240 80e7 	bls.w	8005454 <HAL_SPI_Transmit+0x380>
  {
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0UL)
 8005286:	e05d      	b.n	8005344 <HAL_SPI_Transmit+0x270>
    {
      /* Wait until TXP flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXP))
 8005288:	68fb      	ldr	r3, [r7, #12]
 800528a:	681b      	ldr	r3, [r3, #0]
 800528c:	695b      	ldr	r3, [r3, #20]
 800528e:	f003 0302 	and.w	r3, r3, #2
 8005292:	2b02      	cmp	r3, #2
 8005294:	d132      	bne.n	80052fc <HAL_SPI_Transmit+0x228>
      {
        if ((hspi->TxXferCount > 1UL) && (hspi->Init.FifoThreshold > SPI_FIFO_THRESHOLD_01DATA))
 8005296:	68fb      	ldr	r3, [r7, #12]
 8005298:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 800529c:	b29b      	uxth	r3, r3
 800529e:	2b01      	cmp	r3, #1
 80052a0:	d918      	bls.n	80052d4 <HAL_SPI_Transmit+0x200>
 80052a2:	68fb      	ldr	r3, [r7, #12]
 80052a4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80052a6:	2b00      	cmp	r3, #0
 80052a8:	d014      	beq.n	80052d4 <HAL_SPI_Transmit+0x200>
        {
          *((__IO uint32_t *)&hspi->Instance->TXDR) = *((uint32_t *)hspi->pTxBuffPtr);
 80052aa:	68fb      	ldr	r3, [r7, #12]
 80052ac:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 80052ae:	68fb      	ldr	r3, [r7, #12]
 80052b0:	681b      	ldr	r3, [r3, #0]
 80052b2:	6812      	ldr	r2, [r2, #0]
 80052b4:	621a      	str	r2, [r3, #32]
          hspi->pTxBuffPtr += sizeof(uint32_t);
 80052b6:	68fb      	ldr	r3, [r7, #12]
 80052b8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80052ba:	1d1a      	adds	r2, r3, #4
 80052bc:	68fb      	ldr	r3, [r7, #12]
 80052be:	65da      	str	r2, [r3, #92]	; 0x5c
          hspi->TxXferCount -= (uint16_t)2UL;
 80052c0:	68fb      	ldr	r3, [r7, #12]
 80052c2:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 80052c6:	b29b      	uxth	r3, r3
 80052c8:	3b02      	subs	r3, #2
 80052ca:	b29a      	uxth	r2, r3
 80052cc:	68fb      	ldr	r3, [r7, #12]
 80052ce:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
 80052d2:	e037      	b.n	8005344 <HAL_SPI_Transmit+0x270>
        }
        else
        {
#if defined (__GNUC__)
          *ptxdr_16bits = *((uint16_t *)hspi->pTxBuffPtr);
 80052d4:	68fb      	ldr	r3, [r7, #12]
 80052d6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80052d8:	881a      	ldrh	r2, [r3, #0]
 80052da:	69fb      	ldr	r3, [r7, #28]
 80052dc:	801a      	strh	r2, [r3, #0]
#else
          *((__IO uint16_t *)&hspi->Instance->TXDR) = *((uint16_t *)hspi->pTxBuffPtr);
#endif /* __GNUC__ */
          hspi->pTxBuffPtr += sizeof(uint16_t);
 80052de:	68fb      	ldr	r3, [r7, #12]
 80052e0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80052e2:	1c9a      	adds	r2, r3, #2
 80052e4:	68fb      	ldr	r3, [r7, #12]
 80052e6:	65da      	str	r2, [r3, #92]	; 0x5c
          hspi->TxXferCount--;
 80052e8:	68fb      	ldr	r3, [r7, #12]
 80052ea:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 80052ee:	b29b      	uxth	r3, r3
 80052f0:	3b01      	subs	r3, #1
 80052f2:	b29a      	uxth	r2, r3
 80052f4:	68fb      	ldr	r3, [r7, #12]
 80052f6:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
 80052fa:	e023      	b.n	8005344 <HAL_SPI_Transmit+0x270>
        }
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 80052fc:	f7fb fd18 	bl	8000d30 <HAL_GetTick>
 8005300:	4602      	mov	r2, r0
 8005302:	697b      	ldr	r3, [r7, #20]
 8005304:	1ad3      	subs	r3, r2, r3
 8005306:	683a      	ldr	r2, [r7, #0]
 8005308:	429a      	cmp	r2, r3
 800530a:	d803      	bhi.n	8005314 <HAL_SPI_Transmit+0x240>
 800530c:	683b      	ldr	r3, [r7, #0]
 800530e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005312:	d102      	bne.n	800531a <HAL_SPI_Transmit+0x246>
 8005314:	683b      	ldr	r3, [r7, #0]
 8005316:	2b00      	cmp	r3, #0
 8005318:	d114      	bne.n	8005344 <HAL_SPI_Transmit+0x270>
        {
          /* Call standard close procedure with error check */
          SPI_CloseTransfer(hspi);
 800531a:	68f8      	ldr	r0, [r7, #12]
 800531c:	f000 fd8e 	bl	8005e3c <SPI_CloseTransfer>

          /* Unlock the process */
          __HAL_UNLOCK(hspi);
 8005320:	68fb      	ldr	r3, [r7, #12]
 8005322:	2200      	movs	r2, #0
 8005324:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

          SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_TIMEOUT);
 8005328:	68fb      	ldr	r3, [r7, #12]
 800532a:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800532e:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8005332:	68fb      	ldr	r3, [r7, #12]
 8005334:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
          hspi->State = HAL_SPI_STATE_READY;
 8005338:	68fb      	ldr	r3, [r7, #12]
 800533a:	2201      	movs	r2, #1
 800533c:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81
          return HAL_TIMEOUT;
 8005340:	2303      	movs	r3, #3
 8005342:	e0b4      	b.n	80054ae <HAL_SPI_Transmit+0x3da>
    while (hspi->TxXferCount > 0UL)
 8005344:	68fb      	ldr	r3, [r7, #12]
 8005346:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 800534a:	b29b      	uxth	r3, r3
 800534c:	2b00      	cmp	r3, #0
 800534e:	d19b      	bne.n	8005288 <HAL_SPI_Transmit+0x1b4>
 8005350:	e087      	b.n	8005462 <HAL_SPI_Transmit+0x38e>
  else
  {
    while (hspi->TxXferCount > 0UL)
    {
      /* Wait until TXP flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXP))
 8005352:	68fb      	ldr	r3, [r7, #12]
 8005354:	681b      	ldr	r3, [r3, #0]
 8005356:	695b      	ldr	r3, [r3, #20]
 8005358:	f003 0302 	and.w	r3, r3, #2
 800535c:	2b02      	cmp	r3, #2
 800535e:	d155      	bne.n	800540c <HAL_SPI_Transmit+0x338>
      {
        if ((hspi->TxXferCount > 3UL) && (hspi->Init.FifoThreshold > SPI_FIFO_THRESHOLD_03DATA))
 8005360:	68fb      	ldr	r3, [r7, #12]
 8005362:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 8005366:	b29b      	uxth	r3, r3
 8005368:	2b03      	cmp	r3, #3
 800536a:	d918      	bls.n	800539e <HAL_SPI_Transmit+0x2ca>
 800536c:	68fb      	ldr	r3, [r7, #12]
 800536e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005370:	2b40      	cmp	r3, #64	; 0x40
 8005372:	d914      	bls.n	800539e <HAL_SPI_Transmit+0x2ca>
        {
          *((__IO uint32_t *)&hspi->Instance->TXDR) = *((uint32_t *)hspi->pTxBuffPtr);
 8005374:	68fb      	ldr	r3, [r7, #12]
 8005376:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8005378:	68fb      	ldr	r3, [r7, #12]
 800537a:	681b      	ldr	r3, [r3, #0]
 800537c:	6812      	ldr	r2, [r2, #0]
 800537e:	621a      	str	r2, [r3, #32]
          hspi->pTxBuffPtr += sizeof(uint32_t);
 8005380:	68fb      	ldr	r3, [r7, #12]
 8005382:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005384:	1d1a      	adds	r2, r3, #4
 8005386:	68fb      	ldr	r3, [r7, #12]
 8005388:	65da      	str	r2, [r3, #92]	; 0x5c
          hspi->TxXferCount -= (uint16_t)4UL;
 800538a:	68fb      	ldr	r3, [r7, #12]
 800538c:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 8005390:	b29b      	uxth	r3, r3
 8005392:	3b04      	subs	r3, #4
 8005394:	b29a      	uxth	r2, r3
 8005396:	68fb      	ldr	r3, [r7, #12]
 8005398:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
 800539c:	e05a      	b.n	8005454 <HAL_SPI_Transmit+0x380>
        }
        else if ((hspi->TxXferCount > 1UL) && (hspi->Init.FifoThreshold > SPI_FIFO_THRESHOLD_01DATA))
 800539e:	68fb      	ldr	r3, [r7, #12]
 80053a0:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 80053a4:	b29b      	uxth	r3, r3
 80053a6:	2b01      	cmp	r3, #1
 80053a8:	d917      	bls.n	80053da <HAL_SPI_Transmit+0x306>
 80053aa:	68fb      	ldr	r3, [r7, #12]
 80053ac:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80053ae:	2b00      	cmp	r3, #0
 80053b0:	d013      	beq.n	80053da <HAL_SPI_Transmit+0x306>
        {
#if defined (__GNUC__)
          *ptxdr_16bits = *((uint16_t *)hspi->pTxBuffPtr);
 80053b2:	68fb      	ldr	r3, [r7, #12]
 80053b4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80053b6:	881a      	ldrh	r2, [r3, #0]
 80053b8:	69fb      	ldr	r3, [r7, #28]
 80053ba:	801a      	strh	r2, [r3, #0]
#else
          *((__IO uint16_t *)&hspi->Instance->TXDR) = *((uint16_t *)hspi->pTxBuffPtr);
#endif /* __GNUC__ */
          hspi->pTxBuffPtr += sizeof(uint16_t);
 80053bc:	68fb      	ldr	r3, [r7, #12]
 80053be:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80053c0:	1c9a      	adds	r2, r3, #2
 80053c2:	68fb      	ldr	r3, [r7, #12]
 80053c4:	65da      	str	r2, [r3, #92]	; 0x5c
          hspi->TxXferCount -= (uint16_t)2UL;
 80053c6:	68fb      	ldr	r3, [r7, #12]
 80053c8:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 80053cc:	b29b      	uxth	r3, r3
 80053ce:	3b02      	subs	r3, #2
 80053d0:	b29a      	uxth	r2, r3
 80053d2:	68fb      	ldr	r3, [r7, #12]
 80053d4:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
 80053d8:	e03c      	b.n	8005454 <HAL_SPI_Transmit+0x380>
        }
        else
        {
          *((__IO uint8_t *)&hspi->Instance->TXDR) = *((uint8_t *)hspi->pTxBuffPtr);
 80053da:	68fb      	ldr	r3, [r7, #12]
 80053dc:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 80053de:	68fb      	ldr	r3, [r7, #12]
 80053e0:	681b      	ldr	r3, [r3, #0]
 80053e2:	3320      	adds	r3, #32
 80053e4:	7812      	ldrb	r2, [r2, #0]
 80053e6:	701a      	strb	r2, [r3, #0]
          hspi->pTxBuffPtr += sizeof(uint8_t);
 80053e8:	68fb      	ldr	r3, [r7, #12]
 80053ea:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80053ec:	1c5a      	adds	r2, r3, #1
 80053ee:	68fb      	ldr	r3, [r7, #12]
 80053f0:	65da      	str	r2, [r3, #92]	; 0x5c
          hspi->TxXferCount--;
 80053f2:	68fb      	ldr	r3, [r7, #12]
 80053f4:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 80053f8:	b29b      	uxth	r3, r3
 80053fa:	3b01      	subs	r3, #1
 80053fc:	b29a      	uxth	r2, r3
 80053fe:	68fb      	ldr	r3, [r7, #12]
 8005400:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
 8005404:	e026      	b.n	8005454 <HAL_SPI_Transmit+0x380>
 8005406:	bf00      	nop
 8005408:	ffff0000 	.word	0xffff0000
        }
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800540c:	f7fb fc90 	bl	8000d30 <HAL_GetTick>
 8005410:	4602      	mov	r2, r0
 8005412:	697b      	ldr	r3, [r7, #20]
 8005414:	1ad3      	subs	r3, r2, r3
 8005416:	683a      	ldr	r2, [r7, #0]
 8005418:	429a      	cmp	r2, r3
 800541a:	d803      	bhi.n	8005424 <HAL_SPI_Transmit+0x350>
 800541c:	683b      	ldr	r3, [r7, #0]
 800541e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005422:	d102      	bne.n	800542a <HAL_SPI_Transmit+0x356>
 8005424:	683b      	ldr	r3, [r7, #0]
 8005426:	2b00      	cmp	r3, #0
 8005428:	d114      	bne.n	8005454 <HAL_SPI_Transmit+0x380>
        {
          /* Call standard close procedure with error check */
          SPI_CloseTransfer(hspi);
 800542a:	68f8      	ldr	r0, [r7, #12]
 800542c:	f000 fd06 	bl	8005e3c <SPI_CloseTransfer>

          /* Unlock the process */
          __HAL_UNLOCK(hspi);
 8005430:	68fb      	ldr	r3, [r7, #12]
 8005432:	2200      	movs	r2, #0
 8005434:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

          SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_TIMEOUT);
 8005438:	68fb      	ldr	r3, [r7, #12]
 800543a:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800543e:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8005442:	68fb      	ldr	r3, [r7, #12]
 8005444:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
          hspi->State = HAL_SPI_STATE_READY;
 8005448:	68fb      	ldr	r3, [r7, #12]
 800544a:	2201      	movs	r2, #1
 800544c:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81
          return HAL_TIMEOUT;
 8005450:	2303      	movs	r3, #3
 8005452:	e02c      	b.n	80054ae <HAL_SPI_Transmit+0x3da>
    while (hspi->TxXferCount > 0UL)
 8005454:	68fb      	ldr	r3, [r7, #12]
 8005456:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 800545a:	b29b      	uxth	r3, r3
 800545c:	2b00      	cmp	r3, #0
 800545e:	f47f af78 	bne.w	8005352 <HAL_SPI_Transmit+0x27e>
      }
    }
  }

  /* Wait for Tx (and CRC) data to be sent */
  if (SPI_WaitOnFlagUntilTimeout(hspi, SPI_FLAG_EOT, RESET, tickstart, Timeout) != HAL_OK)
 8005462:	683b      	ldr	r3, [r7, #0]
 8005464:	9300      	str	r3, [sp, #0]
 8005466:	697b      	ldr	r3, [r7, #20]
 8005468:	2200      	movs	r2, #0
 800546a:	2108      	movs	r1, #8
 800546c:	68f8      	ldr	r0, [r7, #12]
 800546e:	f000 fd85 	bl	8005f7c <SPI_WaitOnFlagUntilTimeout>
 8005472:	4603      	mov	r3, r0
 8005474:	2b00      	cmp	r3, #0
 8005476:	d007      	beq.n	8005488 <HAL_SPI_Transmit+0x3b4>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8005478:	68fb      	ldr	r3, [r7, #12]
 800547a:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800547e:	f043 0220 	orr.w	r2, r3, #32
 8005482:	68fb      	ldr	r3, [r7, #12]
 8005484:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  }

  /* Call standard close procedure with error check */
  SPI_CloseTransfer(hspi);
 8005488:	68f8      	ldr	r0, [r7, #12]
 800548a:	f000 fcd7 	bl	8005e3c <SPI_CloseTransfer>

  /* Unlock the process */
  __HAL_UNLOCK(hspi);
 800548e:	68fb      	ldr	r3, [r7, #12]
 8005490:	2200      	movs	r2, #0
 8005492:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  hspi->State = HAL_SPI_STATE_READY;
 8005496:	68fb      	ldr	r3, [r7, #12]
 8005498:	2201      	movs	r2, #1
 800549a:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 800549e:	68fb      	ldr	r3, [r7, #12]
 80054a0:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80054a4:	2b00      	cmp	r3, #0
 80054a6:	d001      	beq.n	80054ac <HAL_SPI_Transmit+0x3d8>
  {
    return HAL_ERROR;
 80054a8:	2301      	movs	r3, #1
 80054aa:	e000      	b.n	80054ae <HAL_SPI_Transmit+0x3da>
  }
  return errorcode;
 80054ac:	7efb      	ldrb	r3, [r7, #27]
}
 80054ae:	4618      	mov	r0, r3
 80054b0:	3720      	adds	r7, #32
 80054b2:	46bd      	mov	sp, r7
 80054b4:	bd80      	pop	{r7, pc}
 80054b6:	bf00      	nop

080054b8 <HAL_SPI_TransmitReceive_IT>:
  * @param  pRxData: pointer to reception data buffer
  * @param  Size   : amount of data to be sent and received
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive_IT(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size)
{
 80054b8:	b480      	push	{r7}
 80054ba:	b08b      	sub	sp, #44	; 0x2c
 80054bc:	af00      	add	r7, sp, #0
 80054be:	60f8      	str	r0, [r7, #12]
 80054c0:	60b9      	str	r1, [r7, #8]
 80054c2:	607a      	str	r2, [r7, #4]
 80054c4:	807b      	strh	r3, [r7, #2]
  HAL_SPI_StateTypeDef  tmp_state;
  HAL_StatusTypeDef errorcode = HAL_OK;
 80054c6:	2300      	movs	r3, #0
 80054c8:	77fb      	strb	r3, [r7, #31]
  uint32_t max_fifo_length = 0UL;
 80054ca:	2300      	movs	r3, #0
 80054cc:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t tmp_TxXferCount;

#if defined (__GNUC__)
  __IO uint16_t *ptxdr_16bits = (__IO uint16_t *)(&(hspi->Instance->TXDR));
 80054ce:	68fb      	ldr	r3, [r7, #12]
 80054d0:	681b      	ldr	r3, [r3, #0]
 80054d2:	3320      	adds	r3, #32
 80054d4:	61bb      	str	r3, [r7, #24]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Lock the process */
  __HAL_LOCK(hspi);
 80054d6:	68fb      	ldr	r3, [r7, #12]
 80054d8:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 80054dc:	2b01      	cmp	r3, #1
 80054de:	d101      	bne.n	80054e4 <HAL_SPI_TransmitReceive_IT+0x2c>
 80054e0:	2302      	movs	r3, #2
 80054e2:	e17f      	b.n	80057e4 <HAL_SPI_TransmitReceive_IT+0x32c>
 80054e4:	68fb      	ldr	r3, [r7, #12]
 80054e6:	2201      	movs	r2, #1
 80054e8:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  /* Init temporary variables */
  tmp_state  = hspi->State;
 80054ec:	68fb      	ldr	r3, [r7, #12]
 80054ee:	f893 3081 	ldrb.w	r3, [r3, #129]	; 0x81
 80054f2:	75fb      	strb	r3, [r7, #23]
  tmp_mode   = hspi->Init.Mode;
 80054f4:	68fb      	ldr	r3, [r7, #12]
 80054f6:	685b      	ldr	r3, [r3, #4]
 80054f8:	613b      	str	r3, [r7, #16]

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 80054fa:	7dfb      	ldrb	r3, [r7, #23]
 80054fc:	2b01      	cmp	r3, #1
 80054fe:	d012      	beq.n	8005526 <HAL_SPI_TransmitReceive_IT+0x6e>
 8005500:	693b      	ldr	r3, [r7, #16]
 8005502:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8005506:	d106      	bne.n	8005516 <HAL_SPI_TransmitReceive_IT+0x5e>
        ((tmp_mode == SPI_MODE_MASTER) && \
         (hspi->Init.Direction == SPI_DIRECTION_2LINES) && \
 8005508:	68fb      	ldr	r3, [r7, #12]
 800550a:	689b      	ldr	r3, [r3, #8]
        ((tmp_mode == SPI_MODE_MASTER) && \
 800550c:	2b00      	cmp	r3, #0
 800550e:	d102      	bne.n	8005516 <HAL_SPI_TransmitReceive_IT+0x5e>
         (hspi->Init.Direction == SPI_DIRECTION_2LINES) && \
 8005510:	7dfb      	ldrb	r3, [r7, #23]
 8005512:	2b04      	cmp	r3, #4
 8005514:	d007      	beq.n	8005526 <HAL_SPI_TransmitReceive_IT+0x6e>
         (tmp_state == HAL_SPI_STATE_BUSY_RX))))
  {
    errorcode = HAL_BUSY;
 8005516:	2302      	movs	r3, #2
 8005518:	77fb      	strb	r3, [r7, #31]
    __HAL_UNLOCK(hspi);
 800551a:	68fb      	ldr	r3, [r7, #12]
 800551c:	2200      	movs	r2, #0
 800551e:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80
    return errorcode;
 8005522:	7ffb      	ldrb	r3, [r7, #31]
 8005524:	e15e      	b.n	80057e4 <HAL_SPI_TransmitReceive_IT+0x32c>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0UL))
 8005526:	68bb      	ldr	r3, [r7, #8]
 8005528:	2b00      	cmp	r3, #0
 800552a:	d005      	beq.n	8005538 <HAL_SPI_TransmitReceive_IT+0x80>
 800552c:	687b      	ldr	r3, [r7, #4]
 800552e:	2b00      	cmp	r3, #0
 8005530:	d002      	beq.n	8005538 <HAL_SPI_TransmitReceive_IT+0x80>
 8005532:	887b      	ldrh	r3, [r7, #2]
 8005534:	2b00      	cmp	r3, #0
 8005536:	d107      	bne.n	8005548 <HAL_SPI_TransmitReceive_IT+0x90>
  {
    errorcode = HAL_ERROR;
 8005538:	2301      	movs	r3, #1
 800553a:	77fb      	strb	r3, [r7, #31]
    __HAL_UNLOCK(hspi);
 800553c:	68fb      	ldr	r3, [r7, #12]
 800553e:	2200      	movs	r2, #0
 8005540:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80
    return errorcode;
 8005544:	7ffb      	ldrb	r3, [r7, #31]
 8005546:	e14d      	b.n	80057e4 <HAL_SPI_TransmitReceive_IT+0x32c>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 8005548:	68fb      	ldr	r3, [r7, #12]
 800554a:	f893 3081 	ldrb.w	r3, [r3, #129]	; 0x81
 800554e:	b2db      	uxtb	r3, r3
 8005550:	2b04      	cmp	r3, #4
 8005552:	d003      	beq.n	800555c <HAL_SPI_TransmitReceive_IT+0xa4>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 8005554:	68fb      	ldr	r3, [r7, #12]
 8005556:	2205      	movs	r2, #5
 8005558:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 800555c:	68fb      	ldr	r3, [r7, #12]
 800555e:	2200      	movs	r2, #0
 8005560:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 8005564:	68fb      	ldr	r3, [r7, #12]
 8005566:	68ba      	ldr	r2, [r7, #8]
 8005568:	65da      	str	r2, [r3, #92]	; 0x5c
  hspi->TxXferSize  = Size;
 800556a:	68fb      	ldr	r3, [r7, #12]
 800556c:	887a      	ldrh	r2, [r7, #2]
 800556e:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
  hspi->TxXferCount = Size;
 8005572:	68fb      	ldr	r3, [r7, #12]
 8005574:	887a      	ldrh	r2, [r7, #2]
 8005576:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 800557a:	68fb      	ldr	r3, [r7, #12]
 800557c:	687a      	ldr	r2, [r7, #4]
 800557e:	665a      	str	r2, [r3, #100]	; 0x64
  hspi->RxXferSize  = Size;
 8005580:	68fb      	ldr	r3, [r7, #12]
 8005582:	887a      	ldrh	r2, [r7, #2]
 8005584:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
  hspi->RxXferCount = Size;
 8005588:	68fb      	ldr	r3, [r7, #12]
 800558a:	887a      	ldrh	r2, [r7, #2]
 800558c:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
  tmp_TxXferCount   = hspi->TxXferCount;
 8005590:	68fb      	ldr	r3, [r7, #12]
 8005592:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 8005596:	b29b      	uxth	r3, r3
 8005598:	623b      	str	r3, [r7, #32]

  /* Set the function for IT treatment */
  if (hspi->Init.DataSize > SPI_DATASIZE_16BIT)
 800559a:	68fb      	ldr	r3, [r7, #12]
 800559c:	68db      	ldr	r3, [r3, #12]
 800559e:	2b0f      	cmp	r3, #15
 80055a0:	d906      	bls.n	80055b0 <HAL_SPI_TransmitReceive_IT+0xf8>
  {
    hspi->TxISR     = SPI_TxISR_32BIT;
 80055a2:	68fb      	ldr	r3, [r7, #12]
 80055a4:	4a92      	ldr	r2, [pc, #584]	; (80057f0 <HAL_SPI_TransmitReceive_IT+0x338>)
 80055a6:	675a      	str	r2, [r3, #116]	; 0x74
    hspi->RxISR     = SPI_RxISR_32BIT;
 80055a8:	68fb      	ldr	r3, [r7, #12]
 80055aa:	4a92      	ldr	r2, [pc, #584]	; (80057f4 <HAL_SPI_TransmitReceive_IT+0x33c>)
 80055ac:	671a      	str	r2, [r3, #112]	; 0x70
 80055ae:	e010      	b.n	80055d2 <HAL_SPI_TransmitReceive_IT+0x11a>
  }
  else if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 80055b0:	68fb      	ldr	r3, [r7, #12]
 80055b2:	68db      	ldr	r3, [r3, #12]
 80055b4:	2b07      	cmp	r3, #7
 80055b6:	d906      	bls.n	80055c6 <HAL_SPI_TransmitReceive_IT+0x10e>
  {
    hspi->RxISR     = SPI_RxISR_16BIT;
 80055b8:	68fb      	ldr	r3, [r7, #12]
 80055ba:	4a8f      	ldr	r2, [pc, #572]	; (80057f8 <HAL_SPI_TransmitReceive_IT+0x340>)
 80055bc:	671a      	str	r2, [r3, #112]	; 0x70
    hspi->TxISR     = SPI_TxISR_16BIT;
 80055be:	68fb      	ldr	r3, [r7, #12]
 80055c0:	4a8e      	ldr	r2, [pc, #568]	; (80057fc <HAL_SPI_TransmitReceive_IT+0x344>)
 80055c2:	675a      	str	r2, [r3, #116]	; 0x74
 80055c4:	e005      	b.n	80055d2 <HAL_SPI_TransmitReceive_IT+0x11a>
  }
  else
  {
    hspi->RxISR     = SPI_RxISR_8BIT;
 80055c6:	68fb      	ldr	r3, [r7, #12]
 80055c8:	4a8d      	ldr	r2, [pc, #564]	; (8005800 <HAL_SPI_TransmitReceive_IT+0x348>)
 80055ca:	671a      	str	r2, [r3, #112]	; 0x70
    hspi->TxISR     = SPI_TxISR_8BIT;
 80055cc:	68fb      	ldr	r3, [r7, #12]
 80055ce:	4a8d      	ldr	r2, [pc, #564]	; (8005804 <HAL_SPI_TransmitReceive_IT+0x34c>)
 80055d0:	675a      	str	r2, [r3, #116]	; 0x74
  }

  /* Set the number of data at current transfer */
  MODIFY_REG(hspi->Instance->CR2, SPI_CR2_TSIZE, Size);
 80055d2:	68fb      	ldr	r3, [r7, #12]
 80055d4:	681b      	ldr	r3, [r3, #0]
 80055d6:	685a      	ldr	r2, [r3, #4]
 80055d8:	4b8b      	ldr	r3, [pc, #556]	; (8005808 <HAL_SPI_TransmitReceive_IT+0x350>)
 80055da:	4013      	ands	r3, r2
 80055dc:	8879      	ldrh	r1, [r7, #2]
 80055de:	68fa      	ldr	r2, [r7, #12]
 80055e0:	6812      	ldr	r2, [r2, #0]
 80055e2:	430b      	orrs	r3, r1
 80055e4:	6053      	str	r3, [r2, #4]

  /* Enable SPI peripheral */
  __HAL_SPI_ENABLE(hspi);
 80055e6:	68fb      	ldr	r3, [r7, #12]
 80055e8:	681b      	ldr	r3, [r3, #0]
 80055ea:	681a      	ldr	r2, [r3, #0]
 80055ec:	68fb      	ldr	r3, [r7, #12]
 80055ee:	681b      	ldr	r3, [r3, #0]
 80055f0:	f042 0201 	orr.w	r2, r2, #1
 80055f4:	601a      	str	r2, [r3, #0]

  /* Fill in the TxFIFO */
  while ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXP)) && (tmp_TxXferCount != 0UL))
 80055f6:	e0cf      	b.n	8005798 <HAL_SPI_TransmitReceive_IT+0x2e0>
  {
    if (max_fifo_length < MAX_FIFO_LENGTH)
 80055f8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80055fa:	2b0f      	cmp	r3, #15
 80055fc:	f200 80c4 	bhi.w	8005788 <HAL_SPI_TransmitReceive_IT+0x2d0>
    {
      /* Transmit data in 32 Bit mode */
      if (hspi->Init.DataSize > SPI_DATASIZE_16BIT)
 8005600:	68fb      	ldr	r3, [r7, #12]
 8005602:	68db      	ldr	r3, [r3, #12]
 8005604:	2b0f      	cmp	r3, #15
 8005606:	d919      	bls.n	800563c <HAL_SPI_TransmitReceive_IT+0x184>
      {
        *((__IO uint32_t *)&hspi->Instance->TXDR) = *((uint32_t *)hspi->pTxBuffPtr);
 8005608:	68fb      	ldr	r3, [r7, #12]
 800560a:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 800560c:	68fb      	ldr	r3, [r7, #12]
 800560e:	681b      	ldr	r3, [r3, #0]
 8005610:	6812      	ldr	r2, [r2, #0]
 8005612:	621a      	str	r2, [r3, #32]
        hspi->pTxBuffPtr += sizeof(uint32_t);
 8005614:	68fb      	ldr	r3, [r7, #12]
 8005616:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005618:	1d1a      	adds	r2, r3, #4
 800561a:	68fb      	ldr	r3, [r7, #12]
 800561c:	65da      	str	r2, [r3, #92]	; 0x5c
        hspi->TxXferCount--;
 800561e:	68fb      	ldr	r3, [r7, #12]
 8005620:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 8005624:	b29b      	uxth	r3, r3
 8005626:	3b01      	subs	r3, #1
 8005628:	b29a      	uxth	r2, r3
 800562a:	68fb      	ldr	r3, [r7, #12]
 800562c:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
        tmp_TxXferCount = hspi->TxXferCount;
 8005630:	68fb      	ldr	r3, [r7, #12]
 8005632:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 8005636:	b29b      	uxth	r3, r3
 8005638:	623b      	str	r3, [r7, #32]
 800563a:	e0a1      	b.n	8005780 <HAL_SPI_TransmitReceive_IT+0x2c8>
      }
      /* Transmit data in 16 Bit mode */
      else if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 800563c:	68fb      	ldr	r3, [r7, #12]
 800563e:	68db      	ldr	r3, [r3, #12]
 8005640:	2b07      	cmp	r3, #7
 8005642:	d93c      	bls.n	80056be <HAL_SPI_TransmitReceive_IT+0x206>
      {
        if ((hspi->TxXferCount > 1UL) && (hspi->Init.FifoThreshold > SPI_FIFO_THRESHOLD_01DATA))
 8005644:	68fb      	ldr	r3, [r7, #12]
 8005646:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 800564a:	b29b      	uxth	r3, r3
 800564c:	2b01      	cmp	r3, #1
 800564e:	d91d      	bls.n	800568c <HAL_SPI_TransmitReceive_IT+0x1d4>
 8005650:	68fb      	ldr	r3, [r7, #12]
 8005652:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005654:	2b00      	cmp	r3, #0
 8005656:	d019      	beq.n	800568c <HAL_SPI_TransmitReceive_IT+0x1d4>
        {
          *((__IO uint32_t *)&hspi->Instance->TXDR) = *((uint32_t *)hspi->pTxBuffPtr);
 8005658:	68fb      	ldr	r3, [r7, #12]
 800565a:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 800565c:	68fb      	ldr	r3, [r7, #12]
 800565e:	681b      	ldr	r3, [r3, #0]
 8005660:	6812      	ldr	r2, [r2, #0]
 8005662:	621a      	str	r2, [r3, #32]
          hspi->pTxBuffPtr += sizeof(uint32_t);
 8005664:	68fb      	ldr	r3, [r7, #12]
 8005666:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005668:	1d1a      	adds	r2, r3, #4
 800566a:	68fb      	ldr	r3, [r7, #12]
 800566c:	65da      	str	r2, [r3, #92]	; 0x5c
          hspi->TxXferCount -= (uint16_t)2UL;
 800566e:	68fb      	ldr	r3, [r7, #12]
 8005670:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 8005674:	b29b      	uxth	r3, r3
 8005676:	3b02      	subs	r3, #2
 8005678:	b29a      	uxth	r2, r3
 800567a:	68fb      	ldr	r3, [r7, #12]
 800567c:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
          tmp_TxXferCount = hspi->TxXferCount;
 8005680:	68fb      	ldr	r3, [r7, #12]
 8005682:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 8005686:	b29b      	uxth	r3, r3
 8005688:	623b      	str	r3, [r7, #32]
 800568a:	e079      	b.n	8005780 <HAL_SPI_TransmitReceive_IT+0x2c8>
        }
        else
        {
#if defined (__GNUC__)
          *ptxdr_16bits = *((uint16_t *)hspi->pTxBuffPtr);
 800568c:	68fb      	ldr	r3, [r7, #12]
 800568e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005690:	881a      	ldrh	r2, [r3, #0]
 8005692:	69bb      	ldr	r3, [r7, #24]
 8005694:	801a      	strh	r2, [r3, #0]
#else
          *((__IO uint16_t *)&hspi->Instance->TXDR) = *((uint16_t *)hspi->pTxBuffPtr);
#endif /* __GNUC__ */
          hspi->pTxBuffPtr += sizeof(uint16_t);
 8005696:	68fb      	ldr	r3, [r7, #12]
 8005698:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800569a:	1c9a      	adds	r2, r3, #2
 800569c:	68fb      	ldr	r3, [r7, #12]
 800569e:	65da      	str	r2, [r3, #92]	; 0x5c
          hspi->TxXferCount--;
 80056a0:	68fb      	ldr	r3, [r7, #12]
 80056a2:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 80056a6:	b29b      	uxth	r3, r3
 80056a8:	3b01      	subs	r3, #1
 80056aa:	b29a      	uxth	r2, r3
 80056ac:	68fb      	ldr	r3, [r7, #12]
 80056ae:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
          tmp_TxXferCount = hspi->TxXferCount;
 80056b2:	68fb      	ldr	r3, [r7, #12]
 80056b4:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 80056b8:	b29b      	uxth	r3, r3
 80056ba:	623b      	str	r3, [r7, #32]
 80056bc:	e060      	b.n	8005780 <HAL_SPI_TransmitReceive_IT+0x2c8>
        }
      }
      /* Transmit data in 8 Bit mode */
      else
      {
        if ((hspi->TxXferCount > 3UL) && (hspi->Init.FifoThreshold > SPI_FIFO_THRESHOLD_03DATA))
 80056be:	68fb      	ldr	r3, [r7, #12]
 80056c0:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 80056c4:	b29b      	uxth	r3, r3
 80056c6:	2b03      	cmp	r3, #3
 80056c8:	d91d      	bls.n	8005706 <HAL_SPI_TransmitReceive_IT+0x24e>
 80056ca:	68fb      	ldr	r3, [r7, #12]
 80056cc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80056ce:	2b40      	cmp	r3, #64	; 0x40
 80056d0:	d919      	bls.n	8005706 <HAL_SPI_TransmitReceive_IT+0x24e>
        {
          *((__IO uint32_t *)&hspi->Instance->TXDR) = *((uint32_t *)hspi->pTxBuffPtr);
 80056d2:	68fb      	ldr	r3, [r7, #12]
 80056d4:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 80056d6:	68fb      	ldr	r3, [r7, #12]
 80056d8:	681b      	ldr	r3, [r3, #0]
 80056da:	6812      	ldr	r2, [r2, #0]
 80056dc:	621a      	str	r2, [r3, #32]
          hspi->pTxBuffPtr += sizeof(uint32_t);
 80056de:	68fb      	ldr	r3, [r7, #12]
 80056e0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80056e2:	1d1a      	adds	r2, r3, #4
 80056e4:	68fb      	ldr	r3, [r7, #12]
 80056e6:	65da      	str	r2, [r3, #92]	; 0x5c
          hspi->TxXferCount -= (uint16_t)4UL;
 80056e8:	68fb      	ldr	r3, [r7, #12]
 80056ea:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 80056ee:	b29b      	uxth	r3, r3
 80056f0:	3b04      	subs	r3, #4
 80056f2:	b29a      	uxth	r2, r3
 80056f4:	68fb      	ldr	r3, [r7, #12]
 80056f6:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
          tmp_TxXferCount = hspi->TxXferCount;
 80056fa:	68fb      	ldr	r3, [r7, #12]
 80056fc:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 8005700:	b29b      	uxth	r3, r3
 8005702:	623b      	str	r3, [r7, #32]
 8005704:	e03c      	b.n	8005780 <HAL_SPI_TransmitReceive_IT+0x2c8>
        }
        else if ((hspi->TxXferCount > 1UL) && (hspi->Init.FifoThreshold > SPI_FIFO_THRESHOLD_01DATA))
 8005706:	68fb      	ldr	r3, [r7, #12]
 8005708:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 800570c:	b29b      	uxth	r3, r3
 800570e:	2b01      	cmp	r3, #1
 8005710:	d91c      	bls.n	800574c <HAL_SPI_TransmitReceive_IT+0x294>
 8005712:	68fb      	ldr	r3, [r7, #12]
 8005714:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005716:	2b00      	cmp	r3, #0
 8005718:	d018      	beq.n	800574c <HAL_SPI_TransmitReceive_IT+0x294>
        {
#if defined (__GNUC__)
          *ptxdr_16bits = *((uint16_t *)hspi->pTxBuffPtr);
 800571a:	68fb      	ldr	r3, [r7, #12]
 800571c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800571e:	881a      	ldrh	r2, [r3, #0]
 8005720:	69bb      	ldr	r3, [r7, #24]
 8005722:	801a      	strh	r2, [r3, #0]
#else
          *((__IO uint16_t *)&hspi->Instance->TXDR) = *((uint16_t *)hspi->pTxBuffPtr);
#endif /* __GNUC__ */
          hspi->pTxBuffPtr += sizeof(uint16_t);
 8005724:	68fb      	ldr	r3, [r7, #12]
 8005726:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005728:	1c9a      	adds	r2, r3, #2
 800572a:	68fb      	ldr	r3, [r7, #12]
 800572c:	65da      	str	r2, [r3, #92]	; 0x5c
          hspi->TxXferCount -= (uint16_t)2UL;
 800572e:	68fb      	ldr	r3, [r7, #12]
 8005730:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 8005734:	b29b      	uxth	r3, r3
 8005736:	3b02      	subs	r3, #2
 8005738:	b29a      	uxth	r2, r3
 800573a:	68fb      	ldr	r3, [r7, #12]
 800573c:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
          tmp_TxXferCount = hspi->TxXferCount;
 8005740:	68fb      	ldr	r3, [r7, #12]
 8005742:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 8005746:	b29b      	uxth	r3, r3
 8005748:	623b      	str	r3, [r7, #32]
 800574a:	e019      	b.n	8005780 <HAL_SPI_TransmitReceive_IT+0x2c8>
        }
        else
        {
          *((__IO uint8_t *)&hspi->Instance->TXDR) = *((uint8_t *)hspi->pTxBuffPtr);
 800574c:	68fb      	ldr	r3, [r7, #12]
 800574e:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8005750:	68fb      	ldr	r3, [r7, #12]
 8005752:	681b      	ldr	r3, [r3, #0]
 8005754:	3320      	adds	r3, #32
 8005756:	7812      	ldrb	r2, [r2, #0]
 8005758:	701a      	strb	r2, [r3, #0]
          hspi->pTxBuffPtr += sizeof(uint8_t);
 800575a:	68fb      	ldr	r3, [r7, #12]
 800575c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800575e:	1c5a      	adds	r2, r3, #1
 8005760:	68fb      	ldr	r3, [r7, #12]
 8005762:	65da      	str	r2, [r3, #92]	; 0x5c
          hspi->TxXferCount--;
 8005764:	68fb      	ldr	r3, [r7, #12]
 8005766:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 800576a:	b29b      	uxth	r3, r3
 800576c:	3b01      	subs	r3, #1
 800576e:	b29a      	uxth	r2, r3
 8005770:	68fb      	ldr	r3, [r7, #12]
 8005772:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
          tmp_TxXferCount = hspi->TxXferCount;
 8005776:	68fb      	ldr	r3, [r7, #12]
 8005778:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 800577c:	b29b      	uxth	r3, r3
 800577e:	623b      	str	r3, [r7, #32]
        }
      }

      max_fifo_length++;
 8005780:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005782:	3301      	adds	r3, #1
 8005784:	627b      	str	r3, [r7, #36]	; 0x24
 8005786:	e007      	b.n	8005798 <HAL_SPI_TransmitReceive_IT+0x2e0>
    }
    else
    {
      errorcode = HAL_BUSY;
 8005788:	2302      	movs	r3, #2
 800578a:	77fb      	strb	r3, [r7, #31]
      __HAL_UNLOCK(hspi);
 800578c:	68fb      	ldr	r3, [r7, #12]
 800578e:	2200      	movs	r2, #0
 8005790:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80
      return errorcode;
 8005794:	7ffb      	ldrb	r3, [r7, #31]
 8005796:	e025      	b.n	80057e4 <HAL_SPI_TransmitReceive_IT+0x32c>
  while ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXP)) && (tmp_TxXferCount != 0UL))
 8005798:	68fb      	ldr	r3, [r7, #12]
 800579a:	681b      	ldr	r3, [r3, #0]
 800579c:	695b      	ldr	r3, [r3, #20]
 800579e:	f003 0302 	and.w	r3, r3, #2
 80057a2:	2b02      	cmp	r3, #2
 80057a4:	d103      	bne.n	80057ae <HAL_SPI_TransmitReceive_IT+0x2f6>
 80057a6:	6a3b      	ldr	r3, [r7, #32]
 80057a8:	2b00      	cmp	r3, #0
 80057aa:	f47f af25 	bne.w	80055f8 <HAL_SPI_TransmitReceive_IT+0x140>
    }
  }

  /* Enable EOT, DXP, UDR, OVR, FRE, MODF and TSERF interrupts */
  __HAL_SPI_ENABLE_IT(hspi, (SPI_IT_EOT | SPI_IT_DXP | SPI_IT_UDR | SPI_IT_OVR |
 80057ae:	68fb      	ldr	r3, [r7, #12]
 80057b0:	681b      	ldr	r3, [r3, #0]
 80057b2:	6919      	ldr	r1, [r3, #16]
 80057b4:	68fb      	ldr	r3, [r7, #12]
 80057b6:	681a      	ldr	r2, [r3, #0]
 80057b8:	f240 736c 	movw	r3, #1900	; 0x76c
 80057bc:	430b      	orrs	r3, r1
 80057be:	6113      	str	r3, [r2, #16]
                             SPI_IT_FRE | SPI_IT_MODF | SPI_IT_TSERF));

  if (hspi->Init.Mode == SPI_MODE_MASTER)
 80057c0:	68fb      	ldr	r3, [r7, #12]
 80057c2:	685b      	ldr	r3, [r3, #4]
 80057c4:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80057c8:	d107      	bne.n	80057da <HAL_SPI_TransmitReceive_IT+0x322>
  {
    /* Start Master transfer */
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CSTART);
 80057ca:	68fb      	ldr	r3, [r7, #12]
 80057cc:	681b      	ldr	r3, [r3, #0]
 80057ce:	681a      	ldr	r2, [r3, #0]
 80057d0:	68fb      	ldr	r3, [r7, #12]
 80057d2:	681b      	ldr	r3, [r3, #0]
 80057d4:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80057d8:	601a      	str	r2, [r3, #0]
  }

  /* Unlock the process */
  __HAL_UNLOCK(hspi);
 80057da:	68fb      	ldr	r3, [r7, #12]
 80057dc:	2200      	movs	r2, #0
 80057de:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80
  return errorcode;
 80057e2:	7ffb      	ldrb	r3, [r7, #31]
}
 80057e4:	4618      	mov	r0, r3
 80057e6:	372c      	adds	r7, #44	; 0x2c
 80057e8:	46bd      	mov	sp, r7
 80057ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80057ee:	4770      	bx	lr
 80057f0:	08005de3 	.word	0x08005de3
 80057f4:	08005cd3 	.word	0x08005cd3
 80057f8:	08005c73 	.word	0x08005c73
 80057fc:	08005d85 	.word	0x08005d85
 8005800:	08005c15 	.word	0x08005c15
 8005804:	08005d2b 	.word	0x08005d2b
 8005808:	ffff0000 	.word	0xffff0000

0800580c <HAL_SPI_IRQHandler>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for the specified SPI module.
  * @retval None
  */
void HAL_SPI_IRQHandler(SPI_HandleTypeDef *hspi)
{
 800580c:	b580      	push	{r7, lr}
 800580e:	b08a      	sub	sp, #40	; 0x28
 8005810:	af00      	add	r7, sp, #0
 8005812:	6078      	str	r0, [r7, #4]
  uint32_t itsource = hspi->Instance->IER;
 8005814:	687b      	ldr	r3, [r7, #4]
 8005816:	681b      	ldr	r3, [r3, #0]
 8005818:	691b      	ldr	r3, [r3, #16]
 800581a:	623b      	str	r3, [r7, #32]
  uint32_t itflag   = hspi->Instance->SR;
 800581c:	687b      	ldr	r3, [r7, #4]
 800581e:	681b      	ldr	r3, [r3, #0]
 8005820:	695b      	ldr	r3, [r3, #20]
 8005822:	61fb      	str	r3, [r7, #28]
  uint32_t trigger  = itsource & itflag;
 8005824:	6a3a      	ldr	r2, [r7, #32]
 8005826:	69fb      	ldr	r3, [r7, #28]
 8005828:	4013      	ands	r3, r2
 800582a:	61bb      	str	r3, [r7, #24]
  uint32_t cfg1     = hspi->Instance->CFG1;
 800582c:	687b      	ldr	r3, [r7, #4]
 800582e:	681b      	ldr	r3, [r3, #0]
 8005830:	689b      	ldr	r3, [r3, #8]
 8005832:	617b      	str	r3, [r7, #20]
  uint32_t handled  = 0UL;
 8005834:	2300      	movs	r3, #0
 8005836:	627b      	str	r3, [r7, #36]	; 0x24

  HAL_SPI_StateTypeDef State = hspi->State;
 8005838:	687b      	ldr	r3, [r7, #4]
 800583a:	f893 3081 	ldrb.w	r3, [r3, #129]	; 0x81
 800583e:	74fb      	strb	r3, [r7, #19]
#if defined (__GNUC__)
  __IO uint16_t *prxdr_16bits = (__IO uint16_t *)(&(hspi->Instance->RXDR));
 8005840:	687b      	ldr	r3, [r7, #4]
 8005842:	681b      	ldr	r3, [r3, #0]
 8005844:	3330      	adds	r3, #48	; 0x30
 8005846:	60fb      	str	r3, [r7, #12]
#endif /* __GNUC__ */


  /* SPI in mode Transmitter and Receiver ------------------------------------*/
  if (HAL_IS_BIT_CLR(trigger, SPI_FLAG_OVR) && HAL_IS_BIT_CLR(trigger, SPI_FLAG_UDR) && \
 8005848:	69bb      	ldr	r3, [r7, #24]
 800584a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800584e:	2b00      	cmp	r3, #0
 8005850:	d113      	bne.n	800587a <HAL_SPI_IRQHandler+0x6e>
 8005852:	69bb      	ldr	r3, [r7, #24]
 8005854:	f003 0320 	and.w	r3, r3, #32
 8005858:	2b00      	cmp	r3, #0
 800585a:	d10e      	bne.n	800587a <HAL_SPI_IRQHandler+0x6e>
      HAL_IS_BIT_SET(trigger, SPI_FLAG_DXP))
 800585c:	69bb      	ldr	r3, [r7, #24]
 800585e:	f003 0304 	and.w	r3, r3, #4
  if (HAL_IS_BIT_CLR(trigger, SPI_FLAG_OVR) && HAL_IS_BIT_CLR(trigger, SPI_FLAG_UDR) && \
 8005862:	2b00      	cmp	r3, #0
 8005864:	d009      	beq.n	800587a <HAL_SPI_IRQHandler+0x6e>
  {
    hspi->TxISR(hspi);
 8005866:	687b      	ldr	r3, [r7, #4]
 8005868:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800586a:	6878      	ldr	r0, [r7, #4]
 800586c:	4798      	blx	r3
    hspi->RxISR(hspi);
 800586e:	687b      	ldr	r3, [r7, #4]
 8005870:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005872:	6878      	ldr	r0, [r7, #4]
 8005874:	4798      	blx	r3
    handled = 1UL;
 8005876:	2301      	movs	r3, #1
 8005878:	627b      	str	r3, [r7, #36]	; 0x24
  }

  /* SPI in mode Receiver ----------------------------------------------------*/
  if (HAL_IS_BIT_CLR(trigger, SPI_FLAG_OVR) && HAL_IS_BIT_SET(trigger, SPI_FLAG_RXP) && \
 800587a:	69bb      	ldr	r3, [r7, #24]
 800587c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005880:	2b00      	cmp	r3, #0
 8005882:	d10f      	bne.n	80058a4 <HAL_SPI_IRQHandler+0x98>
 8005884:	69bb      	ldr	r3, [r7, #24]
 8005886:	f003 0301 	and.w	r3, r3, #1
 800588a:	2b00      	cmp	r3, #0
 800588c:	d00a      	beq.n	80058a4 <HAL_SPI_IRQHandler+0x98>
      HAL_IS_BIT_CLR(trigger, SPI_FLAG_DXP))
 800588e:	69bb      	ldr	r3, [r7, #24]
 8005890:	f003 0304 	and.w	r3, r3, #4
  if (HAL_IS_BIT_CLR(trigger, SPI_FLAG_OVR) && HAL_IS_BIT_SET(trigger, SPI_FLAG_RXP) && \
 8005894:	2b00      	cmp	r3, #0
 8005896:	d105      	bne.n	80058a4 <HAL_SPI_IRQHandler+0x98>
  {
    hspi->RxISR(hspi);
 8005898:	687b      	ldr	r3, [r7, #4]
 800589a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800589c:	6878      	ldr	r0, [r7, #4]
 800589e:	4798      	blx	r3
    handled = 1UL;
 80058a0:	2301      	movs	r3, #1
 80058a2:	627b      	str	r3, [r7, #36]	; 0x24
  }

  /* SPI in mode Transmitter -------------------------------------------------*/
  if (HAL_IS_BIT_CLR(trigger, SPI_FLAG_UDR) && HAL_IS_BIT_SET(trigger, SPI_FLAG_TXP) && \
 80058a4:	69bb      	ldr	r3, [r7, #24]
 80058a6:	f003 0320 	and.w	r3, r3, #32
 80058aa:	2b00      	cmp	r3, #0
 80058ac:	d10f      	bne.n	80058ce <HAL_SPI_IRQHandler+0xc2>
 80058ae:	69bb      	ldr	r3, [r7, #24]
 80058b0:	f003 0302 	and.w	r3, r3, #2
 80058b4:	2b00      	cmp	r3, #0
 80058b6:	d00a      	beq.n	80058ce <HAL_SPI_IRQHandler+0xc2>
      HAL_IS_BIT_CLR(trigger, SPI_FLAG_DXP))
 80058b8:	69bb      	ldr	r3, [r7, #24]
 80058ba:	f003 0304 	and.w	r3, r3, #4
  if (HAL_IS_BIT_CLR(trigger, SPI_FLAG_UDR) && HAL_IS_BIT_SET(trigger, SPI_FLAG_TXP) && \
 80058be:	2b00      	cmp	r3, #0
 80058c0:	d105      	bne.n	80058ce <HAL_SPI_IRQHandler+0xc2>
  {
    hspi->TxISR(hspi);
 80058c2:	687b      	ldr	r3, [r7, #4]
 80058c4:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80058c6:	6878      	ldr	r0, [r7, #4]
 80058c8:	4798      	blx	r3
    handled = 1UL;
 80058ca:	2301      	movs	r3, #1
 80058cc:	627b      	str	r3, [r7, #36]	; 0x24
    hspi->Reload.Requested = 0UL;
    __HAL_SPI_CLEAR_TSERFFLAG(hspi);
  }
#endif /* USE_SPI_RELOAD_TRANSFER */

  if (handled != 0UL)
 80058ce:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80058d0:	2b00      	cmp	r3, #0
 80058d2:	f040 815a 	bne.w	8005b8a <HAL_SPI_IRQHandler+0x37e>
  {
    return;
  }

  /* SPI End Of Transfer: DMA or IT based transfer */
  if (HAL_IS_BIT_SET(trigger, SPI_FLAG_EOT))
 80058d6:	69bb      	ldr	r3, [r7, #24]
 80058d8:	f003 0308 	and.w	r3, r3, #8
 80058dc:	2b00      	cmp	r3, #0
 80058de:	f000 808b 	beq.w	80059f8 <HAL_SPI_IRQHandler+0x1ec>
  {
    /* Clear EOT/TXTF/SUSP flag */
    __HAL_SPI_CLEAR_EOTFLAG(hspi);
 80058e2:	687b      	ldr	r3, [r7, #4]
 80058e4:	681b      	ldr	r3, [r3, #0]
 80058e6:	699a      	ldr	r2, [r3, #24]
 80058e8:	687b      	ldr	r3, [r7, #4]
 80058ea:	681b      	ldr	r3, [r3, #0]
 80058ec:	f042 0208 	orr.w	r2, r2, #8
 80058f0:	619a      	str	r2, [r3, #24]
    __HAL_SPI_CLEAR_TXTFFLAG(hspi);
 80058f2:	687b      	ldr	r3, [r7, #4]
 80058f4:	681b      	ldr	r3, [r3, #0]
 80058f6:	699a      	ldr	r2, [r3, #24]
 80058f8:	687b      	ldr	r3, [r7, #4]
 80058fa:	681b      	ldr	r3, [r3, #0]
 80058fc:	f042 0210 	orr.w	r2, r2, #16
 8005900:	619a      	str	r2, [r3, #24]
    __HAL_SPI_CLEAR_SUSPFLAG(hspi);
 8005902:	687b      	ldr	r3, [r7, #4]
 8005904:	681b      	ldr	r3, [r3, #0]
 8005906:	699a      	ldr	r2, [r3, #24]
 8005908:	687b      	ldr	r3, [r7, #4]
 800590a:	681b      	ldr	r3, [r3, #0]
 800590c:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8005910:	619a      	str	r2, [r3, #24]

    /* Disable EOT interrupt */
    __HAL_SPI_DISABLE_IT(hspi, SPI_IT_EOT);
 8005912:	687b      	ldr	r3, [r7, #4]
 8005914:	681b      	ldr	r3, [r3, #0]
 8005916:	691a      	ldr	r2, [r3, #16]
 8005918:	687b      	ldr	r3, [r7, #4]
 800591a:	681b      	ldr	r3, [r3, #0]
 800591c:	f022 0208 	bic.w	r2, r2, #8
 8005920:	611a      	str	r2, [r3, #16]

    /* For the IT based receive extra polling maybe required for last packet */
    if (HAL_IS_BIT_CLR(hspi->Instance->CFG1, SPI_CFG1_TXDMAEN | SPI_CFG1_RXDMAEN))
 8005922:	687b      	ldr	r3, [r7, #4]
 8005924:	681b      	ldr	r3, [r3, #0]
 8005926:	689b      	ldr	r3, [r3, #8]
 8005928:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 800592c:	2b00      	cmp	r3, #0
 800592e:	d13d      	bne.n	80059ac <HAL_SPI_IRQHandler+0x1a0>
    {
      /* Pooling remaining data */
      while (hspi->RxXferCount != 0UL)
 8005930:	e036      	b.n	80059a0 <HAL_SPI_IRQHandler+0x194>
      {
        /* Receive data in 32 Bit mode */
        if (hspi->Init.DataSize > SPI_DATASIZE_16BIT)
 8005932:	687b      	ldr	r3, [r7, #4]
 8005934:	68db      	ldr	r3, [r3, #12]
 8005936:	2b0f      	cmp	r3, #15
 8005938:	d90b      	bls.n	8005952 <HAL_SPI_IRQHandler+0x146>
        {
          *((uint32_t *)hspi->pRxBuffPtr) = *((__IO uint32_t *)&hspi->Instance->RXDR);
 800593a:	687b      	ldr	r3, [r7, #4]
 800593c:	681a      	ldr	r2, [r3, #0]
 800593e:	687b      	ldr	r3, [r7, #4]
 8005940:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8005942:	6b12      	ldr	r2, [r2, #48]	; 0x30
 8005944:	601a      	str	r2, [r3, #0]
          hspi->pRxBuffPtr += sizeof(uint32_t);
 8005946:	687b      	ldr	r3, [r7, #4]
 8005948:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800594a:	1d1a      	adds	r2, r3, #4
 800594c:	687b      	ldr	r3, [r7, #4]
 800594e:	665a      	str	r2, [r3, #100]	; 0x64
 8005950:	e01d      	b.n	800598e <HAL_SPI_IRQHandler+0x182>
        }
        /* Receive data in 16 Bit mode */
        else if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8005952:	687b      	ldr	r3, [r7, #4]
 8005954:	68db      	ldr	r3, [r3, #12]
 8005956:	2b07      	cmp	r3, #7
 8005958:	d90b      	bls.n	8005972 <HAL_SPI_IRQHandler+0x166>
        {
#if defined (__GNUC__)
          *((uint16_t *)hspi->pRxBuffPtr) = *prxdr_16bits;
 800595a:	687b      	ldr	r3, [r7, #4]
 800595c:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800595e:	68fa      	ldr	r2, [r7, #12]
 8005960:	8812      	ldrh	r2, [r2, #0]
 8005962:	b292      	uxth	r2, r2
 8005964:	801a      	strh	r2, [r3, #0]
#else
          *((uint16_t *)hspi->pRxBuffPtr) = *((__IO uint16_t *)&hspi->Instance->RXDR);
#endif /* __GNUC__ */
          hspi->pRxBuffPtr += sizeof(uint16_t);
 8005966:	687b      	ldr	r3, [r7, #4]
 8005968:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800596a:	1c9a      	adds	r2, r3, #2
 800596c:	687b      	ldr	r3, [r7, #4]
 800596e:	665a      	str	r2, [r3, #100]	; 0x64
 8005970:	e00d      	b.n	800598e <HAL_SPI_IRQHandler+0x182>
        }
        /* Receive data in 8 Bit mode */
        else
        {
          *((uint8_t *)hspi->pRxBuffPtr) = *((__IO uint8_t *)&hspi->Instance->RXDR);
 8005972:	687b      	ldr	r3, [r7, #4]
 8005974:	681b      	ldr	r3, [r3, #0]
 8005976:	f103 0230 	add.w	r2, r3, #48	; 0x30
 800597a:	687b      	ldr	r3, [r7, #4]
 800597c:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800597e:	7812      	ldrb	r2, [r2, #0]
 8005980:	b2d2      	uxtb	r2, r2
 8005982:	701a      	strb	r2, [r3, #0]
          hspi->pRxBuffPtr += sizeof(uint8_t);
 8005984:	687b      	ldr	r3, [r7, #4]
 8005986:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8005988:	1c5a      	adds	r2, r3, #1
 800598a:	687b      	ldr	r3, [r7, #4]
 800598c:	665a      	str	r2, [r3, #100]	; 0x64
        }

        hspi->RxXferCount--;
 800598e:	687b      	ldr	r3, [r7, #4]
 8005990:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 8005994:	b29b      	uxth	r3, r3
 8005996:	3b01      	subs	r3, #1
 8005998:	b29a      	uxth	r2, r3
 800599a:	687b      	ldr	r3, [r7, #4]
 800599c:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
      while (hspi->RxXferCount != 0UL)
 80059a0:	687b      	ldr	r3, [r7, #4]
 80059a2:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 80059a6:	b29b      	uxth	r3, r3
 80059a8:	2b00      	cmp	r3, #0
 80059aa:	d1c2      	bne.n	8005932 <HAL_SPI_IRQHandler+0x126>
      }
    }

    /* Call SPI Standard close procedure */
    SPI_CloseTransfer(hspi);
 80059ac:	6878      	ldr	r0, [r7, #4]
 80059ae:	f000 fa45 	bl	8005e3c <SPI_CloseTransfer>

    hspi->State = HAL_SPI_STATE_READY;
 80059b2:	687b      	ldr	r3, [r7, #4]
 80059b4:	2201      	movs	r2, #1
 80059b6:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81
    if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 80059ba:	687b      	ldr	r3, [r7, #4]
 80059bc:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80059c0:	2b00      	cmp	r3, #0
 80059c2:	d003      	beq.n	80059cc <HAL_SPI_IRQHandler+0x1c0>
    {
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1UL)
      hspi->ErrorCallback(hspi);
#else
      HAL_SPI_ErrorCallback(hspi);
 80059c4:	6878      	ldr	r0, [r7, #4]
 80059c6:	f000 f901 	bl	8005bcc <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
      return;
 80059ca:	e0e3      	b.n	8005b94 <HAL_SPI_IRQHandler+0x388>
    {
      hspi->TxCpltCallback(hspi);
    }
#else
    /* Call appropriate user callback */
    if (State == HAL_SPI_STATE_BUSY_TX_RX)
 80059cc:	7cfb      	ldrb	r3, [r7, #19]
 80059ce:	2b05      	cmp	r3, #5
 80059d0:	d103      	bne.n	80059da <HAL_SPI_IRQHandler+0x1ce>
    {
      HAL_SPI_TxRxCpltCallback(hspi);
 80059d2:	6878      	ldr	r0, [r7, #4]
 80059d4:	f7fa fd56 	bl	8000484 <HAL_SPI_TxRxCpltCallback>
    else
    {
      /* End of the appropriate call */
    }

    return;
 80059d8:	e0d9      	b.n	8005b8e <HAL_SPI_IRQHandler+0x382>
    else if (State == HAL_SPI_STATE_BUSY_RX)
 80059da:	7cfb      	ldrb	r3, [r7, #19]
 80059dc:	2b04      	cmp	r3, #4
 80059de:	d103      	bne.n	80059e8 <HAL_SPI_IRQHandler+0x1dc>
      HAL_SPI_RxCpltCallback(hspi);
 80059e0:	6878      	ldr	r0, [r7, #4]
 80059e2:	f000 f8e9 	bl	8005bb8 <HAL_SPI_RxCpltCallback>
    return;
 80059e6:	e0d2      	b.n	8005b8e <HAL_SPI_IRQHandler+0x382>
    else if (State == HAL_SPI_STATE_BUSY_TX)
 80059e8:	7cfb      	ldrb	r3, [r7, #19]
 80059ea:	2b03      	cmp	r3, #3
 80059ec:	f040 80cf 	bne.w	8005b8e <HAL_SPI_IRQHandler+0x382>
      HAL_SPI_TxCpltCallback(hspi);
 80059f0:	6878      	ldr	r0, [r7, #4]
 80059f2:	f000 f8d7 	bl	8005ba4 <HAL_SPI_TxCpltCallback>
    return;
 80059f6:	e0ca      	b.n	8005b8e <HAL_SPI_IRQHandler+0x382>
  }

  if (HAL_IS_BIT_SET(itflag, SPI_FLAG_SUSP) && HAL_IS_BIT_SET(itsource, SPI_FLAG_EOT))
 80059f8:	69fb      	ldr	r3, [r7, #28]
 80059fa:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80059fe:	2b00      	cmp	r3, #0
 8005a00:	d00d      	beq.n	8005a1e <HAL_SPI_IRQHandler+0x212>
 8005a02:	6a3b      	ldr	r3, [r7, #32]
 8005a04:	f003 0308 	and.w	r3, r3, #8
 8005a08:	2b00      	cmp	r3, #0
 8005a0a:	d008      	beq.n	8005a1e <HAL_SPI_IRQHandler+0x212>
  {
    /* Abort on going, clear SUSP flag to avoid infinite looping */
    __HAL_SPI_CLEAR_SUSPFLAG(hspi);
 8005a0c:	687b      	ldr	r3, [r7, #4]
 8005a0e:	681b      	ldr	r3, [r3, #0]
 8005a10:	699a      	ldr	r2, [r3, #24]
 8005a12:	687b      	ldr	r3, [r7, #4]
 8005a14:	681b      	ldr	r3, [r3, #0]
 8005a16:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8005a1a:	619a      	str	r2, [r3, #24]

    return;
 8005a1c:	e0ba      	b.n	8005b94 <HAL_SPI_IRQHandler+0x388>
  }

  /* SPI in Error Treatment --------------------------------------------------*/
  if ((trigger & (SPI_FLAG_MODF | SPI_FLAG_OVR | SPI_FLAG_FRE | SPI_FLAG_UDR)) != 0UL)
 8005a1e:	69bb      	ldr	r3, [r7, #24]
 8005a20:	f403 7358 	and.w	r3, r3, #864	; 0x360
 8005a24:	2b00      	cmp	r3, #0
 8005a26:	f000 80b5 	beq.w	8005b94 <HAL_SPI_IRQHandler+0x388>
  {
    /* SPI Overrun error interrupt occurred ----------------------------------*/
    if ((trigger & SPI_FLAG_OVR) != 0UL)
 8005a2a:	69bb      	ldr	r3, [r7, #24]
 8005a2c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005a30:	2b00      	cmp	r3, #0
 8005a32:	d00f      	beq.n	8005a54 <HAL_SPI_IRQHandler+0x248>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_OVR);
 8005a34:	687b      	ldr	r3, [r7, #4]
 8005a36:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8005a3a:	f043 0204 	orr.w	r2, r3, #4
 8005a3e:	687b      	ldr	r3, [r7, #4]
 8005a40:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
      __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8005a44:	687b      	ldr	r3, [r7, #4]
 8005a46:	681b      	ldr	r3, [r3, #0]
 8005a48:	699a      	ldr	r2, [r3, #24]
 8005a4a:	687b      	ldr	r3, [r7, #4]
 8005a4c:	681b      	ldr	r3, [r3, #0]
 8005a4e:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8005a52:	619a      	str	r2, [r3, #24]
    }

    /* SPI Mode Fault error interrupt occurred -------------------------------*/
    if ((trigger & SPI_FLAG_MODF) != 0UL)
 8005a54:	69bb      	ldr	r3, [r7, #24]
 8005a56:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8005a5a:	2b00      	cmp	r3, #0
 8005a5c:	d00f      	beq.n	8005a7e <HAL_SPI_IRQHandler+0x272>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_MODF);
 8005a5e:	687b      	ldr	r3, [r7, #4]
 8005a60:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8005a64:	f043 0201 	orr.w	r2, r3, #1
 8005a68:	687b      	ldr	r3, [r7, #4]
 8005a6a:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
      __HAL_SPI_CLEAR_MODFFLAG(hspi);
 8005a6e:	687b      	ldr	r3, [r7, #4]
 8005a70:	681b      	ldr	r3, [r3, #0]
 8005a72:	699a      	ldr	r2, [r3, #24]
 8005a74:	687b      	ldr	r3, [r7, #4]
 8005a76:	681b      	ldr	r3, [r3, #0]
 8005a78:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8005a7c:	619a      	str	r2, [r3, #24]
    }

    /* SPI Frame error interrupt occurred ------------------------------------*/
    if ((trigger & SPI_FLAG_FRE) != 0UL)
 8005a7e:	69bb      	ldr	r3, [r7, #24]
 8005a80:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005a84:	2b00      	cmp	r3, #0
 8005a86:	d00f      	beq.n	8005aa8 <HAL_SPI_IRQHandler+0x29c>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FRE);
 8005a88:	687b      	ldr	r3, [r7, #4]
 8005a8a:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8005a8e:	f043 0208 	orr.w	r2, r3, #8
 8005a92:	687b      	ldr	r3, [r7, #4]
 8005a94:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
      __HAL_SPI_CLEAR_FREFLAG(hspi);
 8005a98:	687b      	ldr	r3, [r7, #4]
 8005a9a:	681b      	ldr	r3, [r3, #0]
 8005a9c:	699a      	ldr	r2, [r3, #24]
 8005a9e:	687b      	ldr	r3, [r7, #4]
 8005aa0:	681b      	ldr	r3, [r3, #0]
 8005aa2:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8005aa6:	619a      	str	r2, [r3, #24]
    }

    /* SPI Underrun error interrupt occurred ------------------------------------*/
    if ((trigger & SPI_FLAG_UDR) != 0UL)
 8005aa8:	69bb      	ldr	r3, [r7, #24]
 8005aaa:	f003 0320 	and.w	r3, r3, #32
 8005aae:	2b00      	cmp	r3, #0
 8005ab0:	d00f      	beq.n	8005ad2 <HAL_SPI_IRQHandler+0x2c6>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_UDR);
 8005ab2:	687b      	ldr	r3, [r7, #4]
 8005ab4:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8005ab8:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 8005abc:	687b      	ldr	r3, [r7, #4]
 8005abe:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
      __HAL_SPI_CLEAR_UDRFLAG(hspi);
 8005ac2:	687b      	ldr	r3, [r7, #4]
 8005ac4:	681b      	ldr	r3, [r3, #0]
 8005ac6:	699a      	ldr	r2, [r3, #24]
 8005ac8:	687b      	ldr	r3, [r7, #4]
 8005aca:	681b      	ldr	r3, [r3, #0]
 8005acc:	f042 0220 	orr.w	r2, r2, #32
 8005ad0:	619a      	str	r2, [r3, #24]
    }

    if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8005ad2:	687b      	ldr	r3, [r7, #4]
 8005ad4:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8005ad8:	2b00      	cmp	r3, #0
 8005ada:	d05a      	beq.n	8005b92 <HAL_SPI_IRQHandler+0x386>
    {
      /* Disable SPI peripheral */
      __HAL_SPI_DISABLE(hspi);
 8005adc:	687b      	ldr	r3, [r7, #4]
 8005ade:	681b      	ldr	r3, [r3, #0]
 8005ae0:	681a      	ldr	r2, [r3, #0]
 8005ae2:	687b      	ldr	r3, [r7, #4]
 8005ae4:	681b      	ldr	r3, [r3, #0]
 8005ae6:	f022 0201 	bic.w	r2, r2, #1
 8005aea:	601a      	str	r2, [r3, #0]

      /* Disable all interrupts */
      __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_EOT | SPI_IT_RXP | SPI_IT_TXP | SPI_IT_MODF |
 8005aec:	687b      	ldr	r3, [r7, #4]
 8005aee:	681b      	ldr	r3, [r3, #0]
 8005af0:	6919      	ldr	r1, [r3, #16]
 8005af2:	687b      	ldr	r3, [r7, #4]
 8005af4:	681a      	ldr	r2, [r3, #0]
 8005af6:	4b29      	ldr	r3, [pc, #164]	; (8005b9c <HAL_SPI_IRQHandler+0x390>)
 8005af8:	400b      	ands	r3, r1
 8005afa:	6113      	str	r3, [r2, #16]
                                  SPI_IT_OVR | SPI_IT_FRE | SPI_IT_UDR));

      /* Disable the SPI DMA requests if enabled */
      if (HAL_IS_BIT_SET(cfg1, SPI_CFG1_TXDMAEN | SPI_CFG1_RXDMAEN))
 8005afc:	697b      	ldr	r3, [r7, #20]
 8005afe:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8005b02:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
 8005b06:	d138      	bne.n	8005b7a <HAL_SPI_IRQHandler+0x36e>
      {
        /* Disable the SPI DMA requests */
        CLEAR_BIT(hspi->Instance->CFG1, SPI_CFG1_TXDMAEN | SPI_CFG1_RXDMAEN);
 8005b08:	687b      	ldr	r3, [r7, #4]
 8005b0a:	681b      	ldr	r3, [r3, #0]
 8005b0c:	689a      	ldr	r2, [r3, #8]
 8005b0e:	687b      	ldr	r3, [r7, #4]
 8005b10:	681b      	ldr	r3, [r3, #0]
 8005b12:	f422 4240 	bic.w	r2, r2, #49152	; 0xc000
 8005b16:	609a      	str	r2, [r3, #8]

        /* Abort the SPI DMA Rx channel */
        if (hspi->hdmarx != NULL)
 8005b18:	687b      	ldr	r3, [r7, #4]
 8005b1a:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8005b1c:	2b00      	cmp	r3, #0
 8005b1e:	d013      	beq.n	8005b48 <HAL_SPI_IRQHandler+0x33c>
        {
          /* Set the SPI DMA Abort callback :
          will lead to call HAL_SPI_ErrorCallback() at end of DMA abort procedure */
          hspi->hdmarx->XferAbortCallback = SPI_DMAAbortOnError;
 8005b20:	687b      	ldr	r3, [r7, #4]
 8005b22:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8005b24:	4a1e      	ldr	r2, [pc, #120]	; (8005ba0 <HAL_SPI_IRQHandler+0x394>)
 8005b26:	651a      	str	r2, [r3, #80]	; 0x50
          if (HAL_OK != HAL_DMA_Abort_IT(hspi->hdmarx))
 8005b28:	687b      	ldr	r3, [r7, #4]
 8005b2a:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8005b2c:	4618      	mov	r0, r3
 8005b2e:	f7fb fa4b 	bl	8000fc8 <HAL_DMA_Abort_IT>
 8005b32:	4603      	mov	r3, r0
 8005b34:	2b00      	cmp	r3, #0
 8005b36:	d007      	beq.n	8005b48 <HAL_SPI_IRQHandler+0x33c>
          {
            SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_ABORT);
 8005b38:	687b      	ldr	r3, [r7, #4]
 8005b3a:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8005b3e:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8005b42:	687b      	ldr	r3, [r7, #4]
 8005b44:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
          }
        }
        /* Abort the SPI DMA Tx channel */
        if (hspi->hdmatx != NULL)
 8005b48:	687b      	ldr	r3, [r7, #4]
 8005b4a:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8005b4c:	2b00      	cmp	r3, #0
 8005b4e:	d020      	beq.n	8005b92 <HAL_SPI_IRQHandler+0x386>
        {
          /* Set the SPI DMA Abort callback :
          will lead to call HAL_SPI_ErrorCallback() at end of DMA abort procedure */
          hspi->hdmatx->XferAbortCallback = SPI_DMAAbortOnError;
 8005b50:	687b      	ldr	r3, [r7, #4]
 8005b52:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8005b54:	4a12      	ldr	r2, [pc, #72]	; (8005ba0 <HAL_SPI_IRQHandler+0x394>)
 8005b56:	651a      	str	r2, [r3, #80]	; 0x50
          if (HAL_OK != HAL_DMA_Abort_IT(hspi->hdmatx))
 8005b58:	687b      	ldr	r3, [r7, #4]
 8005b5a:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8005b5c:	4618      	mov	r0, r3
 8005b5e:	f7fb fa33 	bl	8000fc8 <HAL_DMA_Abort_IT>
 8005b62:	4603      	mov	r3, r0
 8005b64:	2b00      	cmp	r3, #0
 8005b66:	d014      	beq.n	8005b92 <HAL_SPI_IRQHandler+0x386>
          {
            SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_ABORT);
 8005b68:	687b      	ldr	r3, [r7, #4]
 8005b6a:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8005b6e:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8005b72:	687b      	ldr	r3, [r7, #4]
 8005b74:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
#else
        HAL_SPI_ErrorCallback(hspi);
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
      }
    }
    return;
 8005b78:	e00b      	b.n	8005b92 <HAL_SPI_IRQHandler+0x386>
        hspi->State = HAL_SPI_STATE_READY;
 8005b7a:	687b      	ldr	r3, [r7, #4]
 8005b7c:	2201      	movs	r2, #1
 8005b7e:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81
        HAL_SPI_ErrorCallback(hspi);
 8005b82:	6878      	ldr	r0, [r7, #4]
 8005b84:	f000 f822 	bl	8005bcc <HAL_SPI_ErrorCallback>
    return;
 8005b88:	e003      	b.n	8005b92 <HAL_SPI_IRQHandler+0x386>
    return;
 8005b8a:	bf00      	nop
 8005b8c:	e002      	b.n	8005b94 <HAL_SPI_IRQHandler+0x388>
    return;
 8005b8e:	bf00      	nop
 8005b90:	e000      	b.n	8005b94 <HAL_SPI_IRQHandler+0x388>
    return;
 8005b92:	bf00      	nop
  }
}
 8005b94:	3728      	adds	r7, #40	; 0x28
 8005b96:	46bd      	mov	sp, r7
 8005b98:	bd80      	pop	{r7, pc}
 8005b9a:	bf00      	nop
 8005b9c:	fffffc94 	.word	0xfffffc94
 8005ba0:	08005be1 	.word	0x08005be1

08005ba4 <HAL_SPI_TxCpltCallback>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_TxCpltCallback(SPI_HandleTypeDef *hspi)
{
 8005ba4:	b480      	push	{r7}
 8005ba6:	b083      	sub	sp, #12
 8005ba8:	af00      	add	r7, sp, #0
 8005baa:	6078      	str	r0, [r7, #4]
  UNUSED(hspi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SPI_TxCpltCallback should be implemented in the user file
   */
}
 8005bac:	bf00      	nop
 8005bae:	370c      	adds	r7, #12
 8005bb0:	46bd      	mov	sp, r7
 8005bb2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005bb6:	4770      	bx	lr

08005bb8 <HAL_SPI_RxCpltCallback>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_RxCpltCallback(SPI_HandleTypeDef *hspi)
{
 8005bb8:	b480      	push	{r7}
 8005bba:	b083      	sub	sp, #12
 8005bbc:	af00      	add	r7, sp, #0
 8005bbe:	6078      	str	r0, [r7, #4]
  UNUSED(hspi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SPI_RxCpltCallback should be implemented in the user file
   */
}
 8005bc0:	bf00      	nop
 8005bc2:	370c      	adds	r7, #12
 8005bc4:	46bd      	mov	sp, r7
 8005bc6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005bca:	4770      	bx	lr

08005bcc <HAL_SPI_ErrorCallback>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_ErrorCallback(SPI_HandleTypeDef *hspi)
{
 8005bcc:	b480      	push	{r7}
 8005bce:	b083      	sub	sp, #12
 8005bd0:	af00      	add	r7, sp, #0
 8005bd2:	6078      	str	r0, [r7, #4]
            the HAL_SPI_ErrorCallback should be implemented in the user file
   */
  /* NOTE : The ErrorCode parameter in the hspi handle is updated by the SPI processes
            and user can use HAL_SPI_GetError() API to check the latest error occurred
   */
}
 8005bd4:	bf00      	nop
 8005bd6:	370c      	adds	r7, #12
 8005bd8:	46bd      	mov	sp, r7
 8005bda:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005bde:	4770      	bx	lr

08005be0 <SPI_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void SPI_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8005be0:	b580      	push	{r7, lr}
 8005be2:	b084      	sub	sp, #16
 8005be4:	af00      	add	r7, sp, #0
 8005be6:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8005be8:	687b      	ldr	r3, [r7, #4]
 8005bea:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005bec:	60fb      	str	r3, [r7, #12]
  hspi->RxXferCount = (uint16_t) 0UL;
 8005bee:	68fb      	ldr	r3, [r7, #12]
 8005bf0:	2200      	movs	r2, #0
 8005bf2:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
  hspi->TxXferCount = (uint16_t) 0UL;
 8005bf6:	68fb      	ldr	r3, [r7, #12]
 8005bf8:	2200      	movs	r2, #0
 8005bfa:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62

  /* Restore hspi->State to Ready */
  hspi->State = HAL_SPI_STATE_READY;
 8005bfe:	68fb      	ldr	r3, [r7, #12]
 8005c00:	2201      	movs	r2, #1
 8005c02:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81

#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1UL)
  hspi->ErrorCallback(hspi);
#else
  HAL_SPI_ErrorCallback(hspi);
 8005c06:	68f8      	ldr	r0, [r7, #12]
 8005c08:	f7ff ffe0 	bl	8005bcc <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 8005c0c:	bf00      	nop
 8005c0e:	3710      	adds	r7, #16
 8005c10:	46bd      	mov	sp, r7
 8005c12:	bd80      	pop	{r7, pc}

08005c14 <SPI_RxISR_8BIT>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
static void SPI_RxISR_8BIT(SPI_HandleTypeDef *hspi)
{
 8005c14:	b480      	push	{r7}
 8005c16:	b083      	sub	sp, #12
 8005c18:	af00      	add	r7, sp, #0
 8005c1a:	6078      	str	r0, [r7, #4]
  /* Receive data in 8 Bit mode */
  *((uint8_t *)hspi->pRxBuffPtr) = (*(__IO uint8_t *)&hspi->Instance->RXDR);
 8005c1c:	687b      	ldr	r3, [r7, #4]
 8005c1e:	681b      	ldr	r3, [r3, #0]
 8005c20:	f103 0230 	add.w	r2, r3, #48	; 0x30
 8005c24:	687b      	ldr	r3, [r7, #4]
 8005c26:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8005c28:	7812      	ldrb	r2, [r2, #0]
 8005c2a:	b2d2      	uxtb	r2, r2
 8005c2c:	701a      	strb	r2, [r3, #0]
  hspi->pRxBuffPtr += sizeof(uint8_t);
 8005c2e:	687b      	ldr	r3, [r7, #4]
 8005c30:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8005c32:	1c5a      	adds	r2, r3, #1
 8005c34:	687b      	ldr	r3, [r7, #4]
 8005c36:	665a      	str	r2, [r3, #100]	; 0x64
  hspi->RxXferCount--;
 8005c38:	687b      	ldr	r3, [r7, #4]
 8005c3a:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 8005c3e:	b29b      	uxth	r3, r3
 8005c40:	3b01      	subs	r3, #1
 8005c42:	b29a      	uxth	r2, r3
 8005c44:	687b      	ldr	r3, [r7, #4]
 8005c46:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a

  /* Disable IT if no more data excepted */
  if (hspi->RxXferCount == 0UL)
 8005c4a:	687b      	ldr	r3, [r7, #4]
 8005c4c:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 8005c50:	b29b      	uxth	r3, r3
 8005c52:	2b00      	cmp	r3, #0
 8005c54:	d107      	bne.n	8005c66 <SPI_RxISR_8BIT+0x52>
      /* Disable RXP interrupts */
      __HAL_SPI_DISABLE_IT(hspi, SPI_IT_RXP);
    }
#else
    /* Disable RXP interrupts */
    __HAL_SPI_DISABLE_IT(hspi, SPI_IT_RXP);
 8005c56:	687b      	ldr	r3, [r7, #4]
 8005c58:	681b      	ldr	r3, [r3, #0]
 8005c5a:	691a      	ldr	r2, [r3, #16]
 8005c5c:	687b      	ldr	r3, [r7, #4]
 8005c5e:	681b      	ldr	r3, [r3, #0]
 8005c60:	f022 0201 	bic.w	r2, r2, #1
 8005c64:	611a      	str	r2, [r3, #16]
#endif /* USE_SPI_RELOAD_TRANSFER */
  }
}
 8005c66:	bf00      	nop
 8005c68:	370c      	adds	r7, #12
 8005c6a:	46bd      	mov	sp, r7
 8005c6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c70:	4770      	bx	lr

08005c72 <SPI_RxISR_16BIT>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
static void SPI_RxISR_16BIT(SPI_HandleTypeDef *hspi)
{
 8005c72:	b480      	push	{r7}
 8005c74:	b085      	sub	sp, #20
 8005c76:	af00      	add	r7, sp, #0
 8005c78:	6078      	str	r0, [r7, #4]
  /* Receive data in 16 Bit mode */
#if defined (__GNUC__)
  __IO uint16_t *prxdr_16bits = (__IO uint16_t *)(&(hspi->Instance->RXDR));
 8005c7a:	687b      	ldr	r3, [r7, #4]
 8005c7c:	681b      	ldr	r3, [r3, #0]
 8005c7e:	3330      	adds	r3, #48	; 0x30
 8005c80:	60fb      	str	r3, [r7, #12]

  *((uint16_t *)hspi->pRxBuffPtr) = *prxdr_16bits;
 8005c82:	687b      	ldr	r3, [r7, #4]
 8005c84:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8005c86:	68fa      	ldr	r2, [r7, #12]
 8005c88:	8812      	ldrh	r2, [r2, #0]
 8005c8a:	b292      	uxth	r2, r2
 8005c8c:	801a      	strh	r2, [r3, #0]
#else
  *((uint16_t *)hspi->pRxBuffPtr) = (*(__IO uint16_t *)&hspi->Instance->RXDR);
#endif /* __GNUC__ */
  hspi->pRxBuffPtr += sizeof(uint16_t);
 8005c8e:	687b      	ldr	r3, [r7, #4]
 8005c90:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8005c92:	1c9a      	adds	r2, r3, #2
 8005c94:	687b      	ldr	r3, [r7, #4]
 8005c96:	665a      	str	r2, [r3, #100]	; 0x64
  hspi->RxXferCount--;
 8005c98:	687b      	ldr	r3, [r7, #4]
 8005c9a:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 8005c9e:	b29b      	uxth	r3, r3
 8005ca0:	3b01      	subs	r3, #1
 8005ca2:	b29a      	uxth	r2, r3
 8005ca4:	687b      	ldr	r3, [r7, #4]
 8005ca6:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a

  /* Disable IT if no more data excepted */
  if (hspi->RxXferCount == 0UL)
 8005caa:	687b      	ldr	r3, [r7, #4]
 8005cac:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 8005cb0:	b29b      	uxth	r3, r3
 8005cb2:	2b00      	cmp	r3, #0
 8005cb4:	d107      	bne.n	8005cc6 <SPI_RxISR_16BIT+0x54>
      /* Disable RXP interrupts */
      __HAL_SPI_DISABLE_IT(hspi, SPI_IT_RXP);
    }
#else
    /* Disable RXP interrupts */
    __HAL_SPI_DISABLE_IT(hspi, SPI_IT_RXP);
 8005cb6:	687b      	ldr	r3, [r7, #4]
 8005cb8:	681b      	ldr	r3, [r3, #0]
 8005cba:	691a      	ldr	r2, [r3, #16]
 8005cbc:	687b      	ldr	r3, [r7, #4]
 8005cbe:	681b      	ldr	r3, [r3, #0]
 8005cc0:	f022 0201 	bic.w	r2, r2, #1
 8005cc4:	611a      	str	r2, [r3, #16]
#endif /* USE_SPI_RELOAD_TRANSFER */
  }
}
 8005cc6:	bf00      	nop
 8005cc8:	3714      	adds	r7, #20
 8005cca:	46bd      	mov	sp, r7
 8005ccc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005cd0:	4770      	bx	lr

08005cd2 <SPI_RxISR_32BIT>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
static void SPI_RxISR_32BIT(SPI_HandleTypeDef *hspi)
{
 8005cd2:	b480      	push	{r7}
 8005cd4:	b083      	sub	sp, #12
 8005cd6:	af00      	add	r7, sp, #0
 8005cd8:	6078      	str	r0, [r7, #4]
  /* Receive data in 32 Bit mode */
  *((uint32_t *)hspi->pRxBuffPtr) = (*(__IO uint32_t *)&hspi->Instance->RXDR);
 8005cda:	687b      	ldr	r3, [r7, #4]
 8005cdc:	681a      	ldr	r2, [r3, #0]
 8005cde:	687b      	ldr	r3, [r7, #4]
 8005ce0:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8005ce2:	6b12      	ldr	r2, [r2, #48]	; 0x30
 8005ce4:	601a      	str	r2, [r3, #0]
  hspi->pRxBuffPtr += sizeof(uint32_t);
 8005ce6:	687b      	ldr	r3, [r7, #4]
 8005ce8:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8005cea:	1d1a      	adds	r2, r3, #4
 8005cec:	687b      	ldr	r3, [r7, #4]
 8005cee:	665a      	str	r2, [r3, #100]	; 0x64
  hspi->RxXferCount--;
 8005cf0:	687b      	ldr	r3, [r7, #4]
 8005cf2:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 8005cf6:	b29b      	uxth	r3, r3
 8005cf8:	3b01      	subs	r3, #1
 8005cfa:	b29a      	uxth	r2, r3
 8005cfc:	687b      	ldr	r3, [r7, #4]
 8005cfe:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a

  /* Disable IT if no more data excepted */
  if (hspi->RxXferCount == 0UL)
 8005d02:	687b      	ldr	r3, [r7, #4]
 8005d04:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 8005d08:	b29b      	uxth	r3, r3
 8005d0a:	2b00      	cmp	r3, #0
 8005d0c:	d107      	bne.n	8005d1e <SPI_RxISR_32BIT+0x4c>
      /* Disable RXP interrupts */
      __HAL_SPI_DISABLE_IT(hspi, SPI_IT_RXP);
    }
#else
    /* Disable RXP interrupts */
    __HAL_SPI_DISABLE_IT(hspi, SPI_IT_RXP);
 8005d0e:	687b      	ldr	r3, [r7, #4]
 8005d10:	681b      	ldr	r3, [r3, #0]
 8005d12:	691a      	ldr	r2, [r3, #16]
 8005d14:	687b      	ldr	r3, [r7, #4]
 8005d16:	681b      	ldr	r3, [r3, #0]
 8005d18:	f022 0201 	bic.w	r2, r2, #1
 8005d1c:	611a      	str	r2, [r3, #16]
#endif /* USE_SPI_RELOAD_TRANSFER */
  }
}
 8005d1e:	bf00      	nop
 8005d20:	370c      	adds	r7, #12
 8005d22:	46bd      	mov	sp, r7
 8005d24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d28:	4770      	bx	lr

08005d2a <SPI_TxISR_8BIT>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
static void SPI_TxISR_8BIT(SPI_HandleTypeDef *hspi)
{
 8005d2a:	b480      	push	{r7}
 8005d2c:	b083      	sub	sp, #12
 8005d2e:	af00      	add	r7, sp, #0
 8005d30:	6078      	str	r0, [r7, #4]
  /* Transmit data in 8 Bit mode */
  *(__IO uint8_t *)&hspi->Instance->TXDR = *((uint8_t *)hspi->pTxBuffPtr);
 8005d32:	687b      	ldr	r3, [r7, #4]
 8005d34:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8005d36:	687b      	ldr	r3, [r7, #4]
 8005d38:	681b      	ldr	r3, [r3, #0]
 8005d3a:	3320      	adds	r3, #32
 8005d3c:	7812      	ldrb	r2, [r2, #0]
 8005d3e:	701a      	strb	r2, [r3, #0]
  hspi->pTxBuffPtr += sizeof(uint8_t);
 8005d40:	687b      	ldr	r3, [r7, #4]
 8005d42:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005d44:	1c5a      	adds	r2, r3, #1
 8005d46:	687b      	ldr	r3, [r7, #4]
 8005d48:	65da      	str	r2, [r3, #92]	; 0x5c
  hspi->TxXferCount--;
 8005d4a:	687b      	ldr	r3, [r7, #4]
 8005d4c:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 8005d50:	b29b      	uxth	r3, r3
 8005d52:	3b01      	subs	r3, #1
 8005d54:	b29a      	uxth	r2, r3
 8005d56:	687b      	ldr	r3, [r7, #4]
 8005d58:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62

  /* Disable IT if no more data excepted */
  if (hspi->TxXferCount == 0UL)
 8005d5c:	687b      	ldr	r3, [r7, #4]
 8005d5e:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 8005d62:	b29b      	uxth	r3, r3
 8005d64:	2b00      	cmp	r3, #0
 8005d66:	d107      	bne.n	8005d78 <SPI_TxISR_8BIT+0x4e>
      /* Disable TXP interrupts */
      __HAL_SPI_DISABLE_IT(hspi, SPI_IT_TXP);
    }
#else
    /* Disable TXP interrupts */
    __HAL_SPI_DISABLE_IT(hspi, SPI_IT_TXP);
 8005d68:	687b      	ldr	r3, [r7, #4]
 8005d6a:	681b      	ldr	r3, [r3, #0]
 8005d6c:	691a      	ldr	r2, [r3, #16]
 8005d6e:	687b      	ldr	r3, [r7, #4]
 8005d70:	681b      	ldr	r3, [r3, #0]
 8005d72:	f022 0202 	bic.w	r2, r2, #2
 8005d76:	611a      	str	r2, [r3, #16]
#endif /* USE_SPI_RELOAD_TRANSFER */
  }
}
 8005d78:	bf00      	nop
 8005d7a:	370c      	adds	r7, #12
 8005d7c:	46bd      	mov	sp, r7
 8005d7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d82:	4770      	bx	lr

08005d84 <SPI_TxISR_16BIT>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
static void SPI_TxISR_16BIT(SPI_HandleTypeDef *hspi)
{
 8005d84:	b480      	push	{r7}
 8005d86:	b085      	sub	sp, #20
 8005d88:	af00      	add	r7, sp, #0
 8005d8a:	6078      	str	r0, [r7, #4]
  /* Transmit data in 16 Bit mode */
#if defined (__GNUC__)
  __IO uint16_t *ptxdr_16bits = (__IO uint16_t *)(&(hspi->Instance->TXDR));
 8005d8c:	687b      	ldr	r3, [r7, #4]
 8005d8e:	681b      	ldr	r3, [r3, #0]
 8005d90:	3320      	adds	r3, #32
 8005d92:	60fb      	str	r3, [r7, #12]

  *ptxdr_16bits = *((uint16_t *)hspi->pTxBuffPtr);
 8005d94:	687b      	ldr	r3, [r7, #4]
 8005d96:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005d98:	881a      	ldrh	r2, [r3, #0]
 8005d9a:	68fb      	ldr	r3, [r7, #12]
 8005d9c:	801a      	strh	r2, [r3, #0]
#else
  *((__IO uint16_t *)&hspi->Instance->TXDR) = *((uint16_t *)hspi->pTxBuffPtr);
#endif /* __GNUC__ */
  hspi->pTxBuffPtr += sizeof(uint16_t);
 8005d9e:	687b      	ldr	r3, [r7, #4]
 8005da0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005da2:	1c9a      	adds	r2, r3, #2
 8005da4:	687b      	ldr	r3, [r7, #4]
 8005da6:	65da      	str	r2, [r3, #92]	; 0x5c
  hspi->TxXferCount--;
 8005da8:	687b      	ldr	r3, [r7, #4]
 8005daa:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 8005dae:	b29b      	uxth	r3, r3
 8005db0:	3b01      	subs	r3, #1
 8005db2:	b29a      	uxth	r2, r3
 8005db4:	687b      	ldr	r3, [r7, #4]
 8005db6:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62

  /* Disable IT if no more data excepted */
  if (hspi->TxXferCount == 0UL)
 8005dba:	687b      	ldr	r3, [r7, #4]
 8005dbc:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 8005dc0:	b29b      	uxth	r3, r3
 8005dc2:	2b00      	cmp	r3, #0
 8005dc4:	d107      	bne.n	8005dd6 <SPI_TxISR_16BIT+0x52>
      /* Disable TXP interrupts */
      __HAL_SPI_DISABLE_IT(hspi, SPI_IT_TXP);
    }
#else
    /* Disable TXP interrupts */
    __HAL_SPI_DISABLE_IT(hspi, SPI_IT_TXP);
 8005dc6:	687b      	ldr	r3, [r7, #4]
 8005dc8:	681b      	ldr	r3, [r3, #0]
 8005dca:	691a      	ldr	r2, [r3, #16]
 8005dcc:	687b      	ldr	r3, [r7, #4]
 8005dce:	681b      	ldr	r3, [r3, #0]
 8005dd0:	f022 0202 	bic.w	r2, r2, #2
 8005dd4:	611a      	str	r2, [r3, #16]
#endif /* USE_SPI_RELOAD_TRANSFER */
  }
}
 8005dd6:	bf00      	nop
 8005dd8:	3714      	adds	r7, #20
 8005dda:	46bd      	mov	sp, r7
 8005ddc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005de0:	4770      	bx	lr

08005de2 <SPI_TxISR_32BIT>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
static void SPI_TxISR_32BIT(SPI_HandleTypeDef *hspi)
{
 8005de2:	b480      	push	{r7}
 8005de4:	b083      	sub	sp, #12
 8005de6:	af00      	add	r7, sp, #0
 8005de8:	6078      	str	r0, [r7, #4]
  /* Transmit data in 32 Bit mode */
  *((__IO uint32_t *)&hspi->Instance->TXDR) = *((uint32_t *)hspi->pTxBuffPtr);
 8005dea:	687b      	ldr	r3, [r7, #4]
 8005dec:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8005dee:	687b      	ldr	r3, [r7, #4]
 8005df0:	681b      	ldr	r3, [r3, #0]
 8005df2:	6812      	ldr	r2, [r2, #0]
 8005df4:	621a      	str	r2, [r3, #32]
  hspi->pTxBuffPtr += sizeof(uint32_t);
 8005df6:	687b      	ldr	r3, [r7, #4]
 8005df8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005dfa:	1d1a      	adds	r2, r3, #4
 8005dfc:	687b      	ldr	r3, [r7, #4]
 8005dfe:	65da      	str	r2, [r3, #92]	; 0x5c
  hspi->TxXferCount--;
 8005e00:	687b      	ldr	r3, [r7, #4]
 8005e02:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 8005e06:	b29b      	uxth	r3, r3
 8005e08:	3b01      	subs	r3, #1
 8005e0a:	b29a      	uxth	r2, r3
 8005e0c:	687b      	ldr	r3, [r7, #4]
 8005e0e:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62

  /* Disable IT if no more data excepted */
  if (hspi->TxXferCount == 0UL)
 8005e12:	687b      	ldr	r3, [r7, #4]
 8005e14:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 8005e18:	b29b      	uxth	r3, r3
 8005e1a:	2b00      	cmp	r3, #0
 8005e1c:	d107      	bne.n	8005e2e <SPI_TxISR_32BIT+0x4c>
      /* Disable TXP interrupts */
      __HAL_SPI_DISABLE_IT(hspi, SPI_IT_TXP);
    }
#else
    /* Disable TXP interrupts */
    __HAL_SPI_DISABLE_IT(hspi, SPI_IT_TXP);
 8005e1e:	687b      	ldr	r3, [r7, #4]
 8005e20:	681b      	ldr	r3, [r3, #0]
 8005e22:	691a      	ldr	r2, [r3, #16]
 8005e24:	687b      	ldr	r3, [r7, #4]
 8005e26:	681b      	ldr	r3, [r3, #0]
 8005e28:	f022 0202 	bic.w	r2, r2, #2
 8005e2c:	611a      	str	r2, [r3, #16]
#endif /* USE_SPI_RELOAD_TRANSFER */
  }
}
 8005e2e:	bf00      	nop
 8005e30:	370c      	adds	r7, #12
 8005e32:	46bd      	mov	sp, r7
 8005e34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e38:	4770      	bx	lr
	...

08005e3c <SPI_CloseTransfer>:
  *               the configuration information for SPI module.
  * @retval HAL_ERROR: if any error detected
  *         HAL_OK: if nothing detected
  */
static void SPI_CloseTransfer(SPI_HandleTypeDef *hspi)
{
 8005e3c:	b480      	push	{r7}
 8005e3e:	b085      	sub	sp, #20
 8005e40:	af00      	add	r7, sp, #0
 8005e42:	6078      	str	r0, [r7, #4]
  uint32_t itflag = hspi->Instance->SR;
 8005e44:	687b      	ldr	r3, [r7, #4]
 8005e46:	681b      	ldr	r3, [r3, #0]
 8005e48:	695b      	ldr	r3, [r3, #20]
 8005e4a:	60fb      	str	r3, [r7, #12]

  __HAL_SPI_CLEAR_EOTFLAG(hspi);
 8005e4c:	687b      	ldr	r3, [r7, #4]
 8005e4e:	681b      	ldr	r3, [r3, #0]
 8005e50:	699a      	ldr	r2, [r3, #24]
 8005e52:	687b      	ldr	r3, [r7, #4]
 8005e54:	681b      	ldr	r3, [r3, #0]
 8005e56:	f042 0208 	orr.w	r2, r2, #8
 8005e5a:	619a      	str	r2, [r3, #24]
  __HAL_SPI_CLEAR_TXTFFLAG(hspi);
 8005e5c:	687b      	ldr	r3, [r7, #4]
 8005e5e:	681b      	ldr	r3, [r3, #0]
 8005e60:	699a      	ldr	r2, [r3, #24]
 8005e62:	687b      	ldr	r3, [r7, #4]
 8005e64:	681b      	ldr	r3, [r3, #0]
 8005e66:	f042 0210 	orr.w	r2, r2, #16
 8005e6a:	619a      	str	r2, [r3, #24]

  /* Disable SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8005e6c:	687b      	ldr	r3, [r7, #4]
 8005e6e:	681b      	ldr	r3, [r3, #0]
 8005e70:	681a      	ldr	r2, [r3, #0]
 8005e72:	687b      	ldr	r3, [r7, #4]
 8005e74:	681b      	ldr	r3, [r3, #0]
 8005e76:	f022 0201 	bic.w	r2, r2, #1
 8005e7a:	601a      	str	r2, [r3, #0]

  /* Disable ITs */
  __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_EOT | SPI_IT_TXP | SPI_IT_RXP | SPI_IT_DXP | SPI_IT_UDR | SPI_IT_OVR | \
 8005e7c:	687b      	ldr	r3, [r7, #4]
 8005e7e:	681b      	ldr	r3, [r3, #0]
 8005e80:	6919      	ldr	r1, [r3, #16]
 8005e82:	687b      	ldr	r3, [r7, #4]
 8005e84:	681a      	ldr	r2, [r3, #0]
 8005e86:	4b3c      	ldr	r3, [pc, #240]	; (8005f78 <SPI_CloseTransfer+0x13c>)
 8005e88:	400b      	ands	r3, r1
 8005e8a:	6113      	str	r3, [r2, #16]
                              SPI_IT_FRE | SPI_IT_MODF));

  /* Disable Tx DMA Request */
  CLEAR_BIT(hspi->Instance->CFG1, SPI_CFG1_TXDMAEN | SPI_CFG1_RXDMAEN);
 8005e8c:	687b      	ldr	r3, [r7, #4]
 8005e8e:	681b      	ldr	r3, [r3, #0]
 8005e90:	689a      	ldr	r2, [r3, #8]
 8005e92:	687b      	ldr	r3, [r7, #4]
 8005e94:	681b      	ldr	r3, [r3, #0]
 8005e96:	f422 4240 	bic.w	r2, r2, #49152	; 0xc000
 8005e9a:	609a      	str	r2, [r3, #8]

  /* Report UnderRun error for non RX Only communication */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 8005e9c:	687b      	ldr	r3, [r7, #4]
 8005e9e:	f893 3081 	ldrb.w	r3, [r3, #129]	; 0x81
 8005ea2:	b2db      	uxtb	r3, r3
 8005ea4:	2b04      	cmp	r3, #4
 8005ea6:	d014      	beq.n	8005ed2 <SPI_CloseTransfer+0x96>
  {
    if ((itflag & SPI_FLAG_UDR) != 0UL)
 8005ea8:	68fb      	ldr	r3, [r7, #12]
 8005eaa:	f003 0320 	and.w	r3, r3, #32
 8005eae:	2b00      	cmp	r3, #0
 8005eb0:	d00f      	beq.n	8005ed2 <SPI_CloseTransfer+0x96>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_UDR);
 8005eb2:	687b      	ldr	r3, [r7, #4]
 8005eb4:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8005eb8:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 8005ebc:	687b      	ldr	r3, [r7, #4]
 8005ebe:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
      __HAL_SPI_CLEAR_UDRFLAG(hspi);
 8005ec2:	687b      	ldr	r3, [r7, #4]
 8005ec4:	681b      	ldr	r3, [r3, #0]
 8005ec6:	699a      	ldr	r2, [r3, #24]
 8005ec8:	687b      	ldr	r3, [r7, #4]
 8005eca:	681b      	ldr	r3, [r3, #0]
 8005ecc:	f042 0220 	orr.w	r2, r2, #32
 8005ed0:	619a      	str	r2, [r3, #24]
    }
  }

  /* Report OverRun error for non TX Only communication */
  if (hspi->State != HAL_SPI_STATE_BUSY_TX)
 8005ed2:	687b      	ldr	r3, [r7, #4]
 8005ed4:	f893 3081 	ldrb.w	r3, [r3, #129]	; 0x81
 8005ed8:	b2db      	uxtb	r3, r3
 8005eda:	2b03      	cmp	r3, #3
 8005edc:	d014      	beq.n	8005f08 <SPI_CloseTransfer+0xcc>
  {
    if ((itflag & SPI_FLAG_OVR) != 0UL)
 8005ede:	68fb      	ldr	r3, [r7, #12]
 8005ee0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005ee4:	2b00      	cmp	r3, #0
 8005ee6:	d00f      	beq.n	8005f08 <SPI_CloseTransfer+0xcc>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_OVR);
 8005ee8:	687b      	ldr	r3, [r7, #4]
 8005eea:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8005eee:	f043 0204 	orr.w	r2, r3, #4
 8005ef2:	687b      	ldr	r3, [r7, #4]
 8005ef4:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
      __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8005ef8:	687b      	ldr	r3, [r7, #4]
 8005efa:	681b      	ldr	r3, [r3, #0]
 8005efc:	699a      	ldr	r2, [r3, #24]
 8005efe:	687b      	ldr	r3, [r7, #4]
 8005f00:	681b      	ldr	r3, [r3, #0]
 8005f02:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8005f06:	619a      	str	r2, [r3, #24]
    }
#endif /* USE_SPI_CRC */
  }

  /* SPI Mode Fault error interrupt occurred -------------------------------*/
  if ((itflag & SPI_FLAG_MODF) != 0UL)
 8005f08:	68fb      	ldr	r3, [r7, #12]
 8005f0a:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8005f0e:	2b00      	cmp	r3, #0
 8005f10:	d00f      	beq.n	8005f32 <SPI_CloseTransfer+0xf6>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_MODF);
 8005f12:	687b      	ldr	r3, [r7, #4]
 8005f14:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8005f18:	f043 0201 	orr.w	r2, r3, #1
 8005f1c:	687b      	ldr	r3, [r7, #4]
 8005f1e:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    __HAL_SPI_CLEAR_MODFFLAG(hspi);
 8005f22:	687b      	ldr	r3, [r7, #4]
 8005f24:	681b      	ldr	r3, [r3, #0]
 8005f26:	699a      	ldr	r2, [r3, #24]
 8005f28:	687b      	ldr	r3, [r7, #4]
 8005f2a:	681b      	ldr	r3, [r3, #0]
 8005f2c:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8005f30:	619a      	str	r2, [r3, #24]
  }

  /* SPI Frame error interrupt occurred ------------------------------------*/
  if ((itflag & SPI_FLAG_FRE) != 0UL)
 8005f32:	68fb      	ldr	r3, [r7, #12]
 8005f34:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005f38:	2b00      	cmp	r3, #0
 8005f3a:	d00f      	beq.n	8005f5c <SPI_CloseTransfer+0x120>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FRE);
 8005f3c:	687b      	ldr	r3, [r7, #4]
 8005f3e:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8005f42:	f043 0208 	orr.w	r2, r3, #8
 8005f46:	687b      	ldr	r3, [r7, #4]
 8005f48:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    __HAL_SPI_CLEAR_FREFLAG(hspi);
 8005f4c:	687b      	ldr	r3, [r7, #4]
 8005f4e:	681b      	ldr	r3, [r3, #0]
 8005f50:	699a      	ldr	r2, [r3, #24]
 8005f52:	687b      	ldr	r3, [r7, #4]
 8005f54:	681b      	ldr	r3, [r3, #0]
 8005f56:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8005f5a:	619a      	str	r2, [r3, #24]
  }

  hspi->TxXferCount = (uint16_t)0UL;
 8005f5c:	687b      	ldr	r3, [r7, #4]
 8005f5e:	2200      	movs	r2, #0
 8005f60:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
  hspi->RxXferCount = (uint16_t)0UL;
 8005f64:	687b      	ldr	r3, [r7, #4]
 8005f66:	2200      	movs	r2, #0
 8005f68:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
}
 8005f6c:	bf00      	nop
 8005f6e:	3714      	adds	r7, #20
 8005f70:	46bd      	mov	sp, r7
 8005f72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f76:	4770      	bx	lr
 8005f78:	fffffc90 	.word	0xfffffc90

08005f7c <SPI_WaitOnFlagUntilTimeout>:
  * @param Tickstart: Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitOnFlagUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus Status,
                                                    uint32_t Tickstart, uint32_t Timeout)
{
 8005f7c:	b580      	push	{r7, lr}
 8005f7e:	b084      	sub	sp, #16
 8005f80:	af00      	add	r7, sp, #0
 8005f82:	60f8      	str	r0, [r7, #12]
 8005f84:	60b9      	str	r1, [r7, #8]
 8005f86:	603b      	str	r3, [r7, #0]
 8005f88:	4613      	mov	r3, r2
 8005f8a:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) == Status)
 8005f8c:	e010      	b.n	8005fb0 <SPI_WaitOnFlagUntilTimeout+0x34>
  {
    /* Check for the Timeout */
    if ((((HAL_GetTick() - Tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8005f8e:	f7fa fecf 	bl	8000d30 <HAL_GetTick>
 8005f92:	4602      	mov	r2, r0
 8005f94:	683b      	ldr	r3, [r7, #0]
 8005f96:	1ad3      	subs	r3, r2, r3
 8005f98:	69ba      	ldr	r2, [r7, #24]
 8005f9a:	429a      	cmp	r2, r3
 8005f9c:	d803      	bhi.n	8005fa6 <SPI_WaitOnFlagUntilTimeout+0x2a>
 8005f9e:	69bb      	ldr	r3, [r7, #24]
 8005fa0:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005fa4:	d102      	bne.n	8005fac <SPI_WaitOnFlagUntilTimeout+0x30>
 8005fa6:	69bb      	ldr	r3, [r7, #24]
 8005fa8:	2b00      	cmp	r3, #0
 8005faa:	d101      	bne.n	8005fb0 <SPI_WaitOnFlagUntilTimeout+0x34>
    {
      return HAL_TIMEOUT;
 8005fac:	2303      	movs	r3, #3
 8005fae:	e00f      	b.n	8005fd0 <SPI_WaitOnFlagUntilTimeout+0x54>
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) == Status)
 8005fb0:	68fb      	ldr	r3, [r7, #12]
 8005fb2:	681b      	ldr	r3, [r3, #0]
 8005fb4:	695a      	ldr	r2, [r3, #20]
 8005fb6:	68bb      	ldr	r3, [r7, #8]
 8005fb8:	4013      	ands	r3, r2
 8005fba:	68ba      	ldr	r2, [r7, #8]
 8005fbc:	429a      	cmp	r2, r3
 8005fbe:	bf0c      	ite	eq
 8005fc0:	2301      	moveq	r3, #1
 8005fc2:	2300      	movne	r3, #0
 8005fc4:	b2db      	uxtb	r3, r3
 8005fc6:	461a      	mov	r2, r3
 8005fc8:	79fb      	ldrb	r3, [r7, #7]
 8005fca:	429a      	cmp	r2, r3
 8005fcc:	d0df      	beq.n	8005f8e <SPI_WaitOnFlagUntilTimeout+0x12>
    }
  }
  return HAL_OK;
 8005fce:	2300      	movs	r3, #0
}
 8005fd0:	4618      	mov	r0, r3
 8005fd2:	3710      	adds	r7, #16
 8005fd4:	46bd      	mov	sp, r7
 8005fd6:	bd80      	pop	{r7, pc}

08005fd8 <SPI_GetPacketSize>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval Packet size occupied in the fifo
  */
static uint32_t SPI_GetPacketSize(SPI_HandleTypeDef *hspi)
{
 8005fd8:	b480      	push	{r7}
 8005fda:	b085      	sub	sp, #20
 8005fdc:	af00      	add	r7, sp, #0
 8005fde:	6078      	str	r0, [r7, #4]
  uint32_t fifo_threashold = (hspi->Init.FifoThreshold >> SPI_CFG1_FTHLV_Pos) + 1UL;
 8005fe0:	687b      	ldr	r3, [r7, #4]
 8005fe2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005fe4:	095b      	lsrs	r3, r3, #5
 8005fe6:	3301      	adds	r3, #1
 8005fe8:	60fb      	str	r3, [r7, #12]
  uint32_t data_size       = (hspi->Init.DataSize      >> SPI_CFG1_DSIZE_Pos) + 1UL;
 8005fea:	687b      	ldr	r3, [r7, #4]
 8005fec:	68db      	ldr	r3, [r3, #12]
 8005fee:	3301      	adds	r3, #1
 8005ff0:	60bb      	str	r3, [r7, #8]

  /* Convert data size to Byte */
  data_size = (data_size + 7UL) / 8UL;
 8005ff2:	68bb      	ldr	r3, [r7, #8]
 8005ff4:	3307      	adds	r3, #7
 8005ff6:	08db      	lsrs	r3, r3, #3
 8005ff8:	60bb      	str	r3, [r7, #8]

  return data_size * fifo_threashold;
 8005ffa:	68bb      	ldr	r3, [r7, #8]
 8005ffc:	68fa      	ldr	r2, [r7, #12]
 8005ffe:	fb02 f303 	mul.w	r3, r2, r3
}
 8006002:	4618      	mov	r0, r3
 8006004:	3714      	adds	r7, #20
 8006006:	46bd      	mov	sp, r7
 8006008:	f85d 7b04 	ldr.w	r7, [sp], #4
 800600c:	4770      	bx	lr
	...

08006010 <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8006010:	b084      	sub	sp, #16
 8006012:	b580      	push	{r7, lr}
 8006014:	b084      	sub	sp, #16
 8006016:	af00      	add	r7, sp, #0
 8006018:	6078      	str	r0, [r7, #4]
 800601a:	f107 001c 	add.w	r0, r7, #28
 800601e:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;
  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 8006022:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006024:	2b01      	cmp	r3, #1
 8006026:	d120      	bne.n	800606a <USB_CoreInit+0x5a>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8006028:	687b      	ldr	r3, [r7, #4]
 800602a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800602c:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8006030:	687b      	ldr	r3, [r7, #4]
 8006032:	639a      	str	r2, [r3, #56]	; 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 8006034:	687b      	ldr	r3, [r7, #4]
 8006036:	68da      	ldr	r2, [r3, #12]
 8006038:	4b2a      	ldr	r3, [pc, #168]	; (80060e4 <USB_CoreInit+0xd4>)
 800603a:	4013      	ands	r3, r2
 800603c:	687a      	ldr	r2, [r7, #4]
 800603e:	60d3      	str	r3, [r2, #12]

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 8006040:	687b      	ldr	r3, [r7, #4]
 8006042:	68db      	ldr	r3, [r3, #12]
 8006044:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8006048:	687b      	ldr	r3, [r7, #4]
 800604a:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 800604c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800604e:	2b01      	cmp	r3, #1
 8006050:	d105      	bne.n	800605e <USB_CoreInit+0x4e>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 8006052:	687b      	ldr	r3, [r7, #4]
 8006054:	68db      	ldr	r3, [r3, #12]
 8006056:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 800605a:	687b      	ldr	r3, [r7, #4]
 800605c:	60da      	str	r2, [r3, #12]
    }

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 800605e:	6878      	ldr	r0, [r7, #4]
 8006060:	f001 fc04 	bl	800786c <USB_CoreReset>
 8006064:	4603      	mov	r3, r0
 8006066:	73fb      	strb	r3, [r7, #15]
 8006068:	e01a      	b.n	80060a0 <USB_CoreInit+0x90>
  }
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 800606a:	687b      	ldr	r3, [r7, #4]
 800606c:	68db      	ldr	r3, [r3, #12]
 800606e:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8006072:	687b      	ldr	r3, [r7, #4]
 8006074:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 8006076:	6878      	ldr	r0, [r7, #4]
 8006078:	f001 fbf8 	bl	800786c <USB_CoreReset>
 800607c:	4603      	mov	r3, r0
 800607e:	73fb      	strb	r3, [r7, #15]

    if (cfg.battery_charging_enable == 0U)
 8006080:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8006082:	2b00      	cmp	r3, #0
 8006084:	d106      	bne.n	8006094 <USB_CoreInit+0x84>
    {
      /* Activate the USB Transceiver */
      USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 8006086:	687b      	ldr	r3, [r7, #4]
 8006088:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800608a:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 800608e:	687b      	ldr	r3, [r7, #4]
 8006090:	639a      	str	r2, [r3, #56]	; 0x38
 8006092:	e005      	b.n	80060a0 <USB_CoreInit+0x90>
    }
    else
    {
      /* Deactivate the USB Transceiver */
      USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8006094:	687b      	ldr	r3, [r7, #4]
 8006096:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006098:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 800609c:	687b      	ldr	r3, [r7, #4]
 800609e:	639a      	str	r2, [r3, #56]	; 0x38
    }
  }

  if (cfg.dma_enable == 1U)
 80060a0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80060a2:	2b01      	cmp	r3, #1
 80060a4:	d116      	bne.n	80060d4 <USB_CoreInit+0xc4>
  {
    /* make sure to reserve 18 fifo Locations for DMA buffers */
    USBx->GDFIFOCFG &= ~(0xFFFFU << 16);
 80060a6:	687b      	ldr	r3, [r7, #4]
 80060a8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80060aa:	b29a      	uxth	r2, r3
 80060ac:	687b      	ldr	r3, [r7, #4]
 80060ae:	65da      	str	r2, [r3, #92]	; 0x5c
    USBx->GDFIFOCFG |= 0x3EEU << 16;
 80060b0:	687b      	ldr	r3, [r7, #4]
 80060b2:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 80060b4:	4b0c      	ldr	r3, [pc, #48]	; (80060e8 <USB_CoreInit+0xd8>)
 80060b6:	4313      	orrs	r3, r2
 80060b8:	687a      	ldr	r2, [r7, #4]
 80060ba:	65d3      	str	r3, [r2, #92]	; 0x5c

    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 80060bc:	687b      	ldr	r3, [r7, #4]
 80060be:	689b      	ldr	r3, [r3, #8]
 80060c0:	f043 0206 	orr.w	r2, r3, #6
 80060c4:	687b      	ldr	r3, [r7, #4]
 80060c6:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 80060c8:	687b      	ldr	r3, [r7, #4]
 80060ca:	689b      	ldr	r3, [r3, #8]
 80060cc:	f043 0220 	orr.w	r2, r3, #32
 80060d0:	687b      	ldr	r3, [r7, #4]
 80060d2:	609a      	str	r2, [r3, #8]
  }

  return ret;
 80060d4:	7bfb      	ldrb	r3, [r7, #15]
}
 80060d6:	4618      	mov	r0, r3
 80060d8:	3710      	adds	r7, #16
 80060da:	46bd      	mov	sp, r7
 80060dc:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 80060e0:	b004      	add	sp, #16
 80060e2:	4770      	bx	lr
 80060e4:	ffbdffbf 	.word	0xffbdffbf
 80060e8:	03ee0000 	.word	0x03ee0000

080060ec <USB_SetTurnaroundTime>:
  * @param  hclk: AHB clock frequency
  * @retval USB turnaround time In PHY Clocks number
  */
HAL_StatusTypeDef USB_SetTurnaroundTime(USB_OTG_GlobalTypeDef *USBx,
                                        uint32_t hclk, uint8_t speed)
{
 80060ec:	b480      	push	{r7}
 80060ee:	b087      	sub	sp, #28
 80060f0:	af00      	add	r7, sp, #0
 80060f2:	60f8      	str	r0, [r7, #12]
 80060f4:	60b9      	str	r1, [r7, #8]
 80060f6:	4613      	mov	r3, r2
 80060f8:	71fb      	strb	r3, [r7, #7]

  /* The USBTRD is configured according to the tables below, depending on AHB frequency
  used by application. In the low AHB frequency range it is used to stretch enough the USB response
  time to IN tokens, the USB turnaround time, so to compensate for the longer AHB read access
  latency to the Data FIFO */
  if (speed == USBD_FS_SPEED)
 80060fa:	79fb      	ldrb	r3, [r7, #7]
 80060fc:	2b02      	cmp	r3, #2
 80060fe:	d165      	bne.n	80061cc <USB_SetTurnaroundTime+0xe0>
  {
    if ((hclk >= 14200000U) && (hclk < 15000000U))
 8006100:	68bb      	ldr	r3, [r7, #8]
 8006102:	4a41      	ldr	r2, [pc, #260]	; (8006208 <USB_SetTurnaroundTime+0x11c>)
 8006104:	4293      	cmp	r3, r2
 8006106:	d906      	bls.n	8006116 <USB_SetTurnaroundTime+0x2a>
 8006108:	68bb      	ldr	r3, [r7, #8]
 800610a:	4a40      	ldr	r2, [pc, #256]	; (800620c <USB_SetTurnaroundTime+0x120>)
 800610c:	4293      	cmp	r3, r2
 800610e:	d202      	bcs.n	8006116 <USB_SetTurnaroundTime+0x2a>
    {
      /* hclk Clock Range between 14.2-15 MHz */
      UsbTrd = 0xFU;
 8006110:	230f      	movs	r3, #15
 8006112:	617b      	str	r3, [r7, #20]
 8006114:	e062      	b.n	80061dc <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 15000000U) && (hclk < 16000000U))
 8006116:	68bb      	ldr	r3, [r7, #8]
 8006118:	4a3c      	ldr	r2, [pc, #240]	; (800620c <USB_SetTurnaroundTime+0x120>)
 800611a:	4293      	cmp	r3, r2
 800611c:	d306      	bcc.n	800612c <USB_SetTurnaroundTime+0x40>
 800611e:	68bb      	ldr	r3, [r7, #8]
 8006120:	4a3b      	ldr	r2, [pc, #236]	; (8006210 <USB_SetTurnaroundTime+0x124>)
 8006122:	4293      	cmp	r3, r2
 8006124:	d202      	bcs.n	800612c <USB_SetTurnaroundTime+0x40>
    {
      /* hclk Clock Range between 15-16 MHz */
      UsbTrd = 0xEU;
 8006126:	230e      	movs	r3, #14
 8006128:	617b      	str	r3, [r7, #20]
 800612a:	e057      	b.n	80061dc <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 16000000U) && (hclk < 17200000U))
 800612c:	68bb      	ldr	r3, [r7, #8]
 800612e:	4a38      	ldr	r2, [pc, #224]	; (8006210 <USB_SetTurnaroundTime+0x124>)
 8006130:	4293      	cmp	r3, r2
 8006132:	d306      	bcc.n	8006142 <USB_SetTurnaroundTime+0x56>
 8006134:	68bb      	ldr	r3, [r7, #8]
 8006136:	4a37      	ldr	r2, [pc, #220]	; (8006214 <USB_SetTurnaroundTime+0x128>)
 8006138:	4293      	cmp	r3, r2
 800613a:	d202      	bcs.n	8006142 <USB_SetTurnaroundTime+0x56>
    {
      /* hclk Clock Range between 16-17.2 MHz */
      UsbTrd = 0xDU;
 800613c:	230d      	movs	r3, #13
 800613e:	617b      	str	r3, [r7, #20]
 8006140:	e04c      	b.n	80061dc <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 17200000U) && (hclk < 18500000U))
 8006142:	68bb      	ldr	r3, [r7, #8]
 8006144:	4a33      	ldr	r2, [pc, #204]	; (8006214 <USB_SetTurnaroundTime+0x128>)
 8006146:	4293      	cmp	r3, r2
 8006148:	d306      	bcc.n	8006158 <USB_SetTurnaroundTime+0x6c>
 800614a:	68bb      	ldr	r3, [r7, #8]
 800614c:	4a32      	ldr	r2, [pc, #200]	; (8006218 <USB_SetTurnaroundTime+0x12c>)
 800614e:	4293      	cmp	r3, r2
 8006150:	d802      	bhi.n	8006158 <USB_SetTurnaroundTime+0x6c>
    {
      /* hclk Clock Range between 17.2-18.5 MHz */
      UsbTrd = 0xCU;
 8006152:	230c      	movs	r3, #12
 8006154:	617b      	str	r3, [r7, #20]
 8006156:	e041      	b.n	80061dc <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 18500000U) && (hclk < 20000000U))
 8006158:	68bb      	ldr	r3, [r7, #8]
 800615a:	4a2f      	ldr	r2, [pc, #188]	; (8006218 <USB_SetTurnaroundTime+0x12c>)
 800615c:	4293      	cmp	r3, r2
 800615e:	d906      	bls.n	800616e <USB_SetTurnaroundTime+0x82>
 8006160:	68bb      	ldr	r3, [r7, #8]
 8006162:	4a2e      	ldr	r2, [pc, #184]	; (800621c <USB_SetTurnaroundTime+0x130>)
 8006164:	4293      	cmp	r3, r2
 8006166:	d802      	bhi.n	800616e <USB_SetTurnaroundTime+0x82>
    {
      /* hclk Clock Range between 18.5-20 MHz */
      UsbTrd = 0xBU;
 8006168:	230b      	movs	r3, #11
 800616a:	617b      	str	r3, [r7, #20]
 800616c:	e036      	b.n	80061dc <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 20000000U) && (hclk < 21800000U))
 800616e:	68bb      	ldr	r3, [r7, #8]
 8006170:	4a2a      	ldr	r2, [pc, #168]	; (800621c <USB_SetTurnaroundTime+0x130>)
 8006172:	4293      	cmp	r3, r2
 8006174:	d906      	bls.n	8006184 <USB_SetTurnaroundTime+0x98>
 8006176:	68bb      	ldr	r3, [r7, #8]
 8006178:	4a29      	ldr	r2, [pc, #164]	; (8006220 <USB_SetTurnaroundTime+0x134>)
 800617a:	4293      	cmp	r3, r2
 800617c:	d802      	bhi.n	8006184 <USB_SetTurnaroundTime+0x98>
    {
      /* hclk Clock Range between 20-21.8 MHz */
      UsbTrd = 0xAU;
 800617e:	230a      	movs	r3, #10
 8006180:	617b      	str	r3, [r7, #20]
 8006182:	e02b      	b.n	80061dc <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 21800000U) && (hclk < 24000000U))
 8006184:	68bb      	ldr	r3, [r7, #8]
 8006186:	4a26      	ldr	r2, [pc, #152]	; (8006220 <USB_SetTurnaroundTime+0x134>)
 8006188:	4293      	cmp	r3, r2
 800618a:	d906      	bls.n	800619a <USB_SetTurnaroundTime+0xae>
 800618c:	68bb      	ldr	r3, [r7, #8]
 800618e:	4a25      	ldr	r2, [pc, #148]	; (8006224 <USB_SetTurnaroundTime+0x138>)
 8006190:	4293      	cmp	r3, r2
 8006192:	d202      	bcs.n	800619a <USB_SetTurnaroundTime+0xae>
    {
      /* hclk Clock Range between 21.8-24 MHz */
      UsbTrd = 0x9U;
 8006194:	2309      	movs	r3, #9
 8006196:	617b      	str	r3, [r7, #20]
 8006198:	e020      	b.n	80061dc <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 24000000U) && (hclk < 27700000U))
 800619a:	68bb      	ldr	r3, [r7, #8]
 800619c:	4a21      	ldr	r2, [pc, #132]	; (8006224 <USB_SetTurnaroundTime+0x138>)
 800619e:	4293      	cmp	r3, r2
 80061a0:	d306      	bcc.n	80061b0 <USB_SetTurnaroundTime+0xc4>
 80061a2:	68bb      	ldr	r3, [r7, #8]
 80061a4:	4a20      	ldr	r2, [pc, #128]	; (8006228 <USB_SetTurnaroundTime+0x13c>)
 80061a6:	4293      	cmp	r3, r2
 80061a8:	d802      	bhi.n	80061b0 <USB_SetTurnaroundTime+0xc4>
    {
      /* hclk Clock Range between 24-27.7 MHz */
      UsbTrd = 0x8U;
 80061aa:	2308      	movs	r3, #8
 80061ac:	617b      	str	r3, [r7, #20]
 80061ae:	e015      	b.n	80061dc <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 27700000U) && (hclk < 32000000U))
 80061b0:	68bb      	ldr	r3, [r7, #8]
 80061b2:	4a1d      	ldr	r2, [pc, #116]	; (8006228 <USB_SetTurnaroundTime+0x13c>)
 80061b4:	4293      	cmp	r3, r2
 80061b6:	d906      	bls.n	80061c6 <USB_SetTurnaroundTime+0xda>
 80061b8:	68bb      	ldr	r3, [r7, #8]
 80061ba:	4a1c      	ldr	r2, [pc, #112]	; (800622c <USB_SetTurnaroundTime+0x140>)
 80061bc:	4293      	cmp	r3, r2
 80061be:	d202      	bcs.n	80061c6 <USB_SetTurnaroundTime+0xda>
    {
      /* hclk Clock Range between 27.7-32 MHz */
      UsbTrd = 0x7U;
 80061c0:	2307      	movs	r3, #7
 80061c2:	617b      	str	r3, [r7, #20]
 80061c4:	e00a      	b.n	80061dc <USB_SetTurnaroundTime+0xf0>
    }
    else /* if(hclk >= 32000000) */
    {
      /* hclk Clock Range between 32-200 MHz */
      UsbTrd = 0x6U;
 80061c6:	2306      	movs	r3, #6
 80061c8:	617b      	str	r3, [r7, #20]
 80061ca:	e007      	b.n	80061dc <USB_SetTurnaroundTime+0xf0>
    }
  }
  else if (speed == USBD_HS_SPEED)
 80061cc:	79fb      	ldrb	r3, [r7, #7]
 80061ce:	2b00      	cmp	r3, #0
 80061d0:	d102      	bne.n	80061d8 <USB_SetTurnaroundTime+0xec>
  {
    UsbTrd = USBD_HS_TRDT_VALUE;
 80061d2:	2309      	movs	r3, #9
 80061d4:	617b      	str	r3, [r7, #20]
 80061d6:	e001      	b.n	80061dc <USB_SetTurnaroundTime+0xf0>
  }
  else
  {
    UsbTrd = USBD_DEFAULT_TRDT_VALUE;
 80061d8:	2309      	movs	r3, #9
 80061da:	617b      	str	r3, [r7, #20]
  }

  USBx->GUSBCFG &= ~USB_OTG_GUSBCFG_TRDT;
 80061dc:	68fb      	ldr	r3, [r7, #12]
 80061de:	68db      	ldr	r3, [r3, #12]
 80061e0:	f423 5270 	bic.w	r2, r3, #15360	; 0x3c00
 80061e4:	68fb      	ldr	r3, [r7, #12]
 80061e6:	60da      	str	r2, [r3, #12]
  USBx->GUSBCFG |= (uint32_t)((UsbTrd << 10) & USB_OTG_GUSBCFG_TRDT);
 80061e8:	68fb      	ldr	r3, [r7, #12]
 80061ea:	68da      	ldr	r2, [r3, #12]
 80061ec:	697b      	ldr	r3, [r7, #20]
 80061ee:	029b      	lsls	r3, r3, #10
 80061f0:	f403 5370 	and.w	r3, r3, #15360	; 0x3c00
 80061f4:	431a      	orrs	r2, r3
 80061f6:	68fb      	ldr	r3, [r7, #12]
 80061f8:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 80061fa:	2300      	movs	r3, #0
}
 80061fc:	4618      	mov	r0, r3
 80061fe:	371c      	adds	r7, #28
 8006200:	46bd      	mov	sp, r7
 8006202:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006206:	4770      	bx	lr
 8006208:	00d8acbf 	.word	0x00d8acbf
 800620c:	00e4e1c0 	.word	0x00e4e1c0
 8006210:	00f42400 	.word	0x00f42400
 8006214:	01067380 	.word	0x01067380
 8006218:	011a499f 	.word	0x011a499f
 800621c:	01312cff 	.word	0x01312cff
 8006220:	014ca43f 	.word	0x014ca43f
 8006224:	016e3600 	.word	0x016e3600
 8006228:	01a6ab1f 	.word	0x01a6ab1f
 800622c:	01e84800 	.word	0x01e84800

08006230 <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8006230:	b480      	push	{r7}
 8006232:	b083      	sub	sp, #12
 8006234:	af00      	add	r7, sp, #0
 8006236:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG |= USB_OTG_GAHBCFG_GINT;
 8006238:	687b      	ldr	r3, [r7, #4]
 800623a:	689b      	ldr	r3, [r3, #8]
 800623c:	f043 0201 	orr.w	r2, r3, #1
 8006240:	687b      	ldr	r3, [r7, #4]
 8006242:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8006244:	2300      	movs	r3, #0
}
 8006246:	4618      	mov	r0, r3
 8006248:	370c      	adds	r7, #12
 800624a:	46bd      	mov	sp, r7
 800624c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006250:	4770      	bx	lr

08006252 <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8006252:	b480      	push	{r7}
 8006254:	b083      	sub	sp, #12
 8006256:	af00      	add	r7, sp, #0
 8006258:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 800625a:	687b      	ldr	r3, [r7, #4]
 800625c:	689b      	ldr	r3, [r3, #8]
 800625e:	f023 0201 	bic.w	r2, r3, #1
 8006262:	687b      	ldr	r3, [r7, #4]
 8006264:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8006266:	2300      	movs	r3, #0
}
 8006268:	4618      	mov	r0, r3
 800626a:	370c      	adds	r7, #12
 800626c:	46bd      	mov	sp, r7
 800626e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006272:	4770      	bx	lr

08006274 <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 8006274:	b580      	push	{r7, lr}
 8006276:	b084      	sub	sp, #16
 8006278:	af00      	add	r7, sp, #0
 800627a:	6078      	str	r0, [r7, #4]
 800627c:	460b      	mov	r3, r1
 800627e:	70fb      	strb	r3, [r7, #3]
  uint32_t ms = 0U;
 8006280:	2300      	movs	r3, #0
 8006282:	60fb      	str	r3, [r7, #12]

  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 8006284:	687b      	ldr	r3, [r7, #4]
 8006286:	68db      	ldr	r3, [r3, #12]
 8006288:	f023 42c0 	bic.w	r2, r3, #1610612736	; 0x60000000
 800628c:	687b      	ldr	r3, [r7, #4]
 800628e:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 8006290:	78fb      	ldrb	r3, [r7, #3]
 8006292:	2b01      	cmp	r3, #1
 8006294:	d115      	bne.n	80062c2 <USB_SetCurrentMode+0x4e>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 8006296:	687b      	ldr	r3, [r7, #4]
 8006298:	68db      	ldr	r3, [r3, #12]
 800629a:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 800629e:	687b      	ldr	r3, [r7, #4]
 80062a0:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 80062a2:	2001      	movs	r0, #1
 80062a4:	f7fa fd50 	bl	8000d48 <HAL_Delay>
      ms++;
 80062a8:	68fb      	ldr	r3, [r7, #12]
 80062aa:	3301      	adds	r3, #1
 80062ac:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_HOST_MODE) && (ms < 50U));
 80062ae:	6878      	ldr	r0, [r7, #4]
 80062b0:	f001 fa4b 	bl	800774a <USB_GetMode>
 80062b4:	4603      	mov	r3, r0
 80062b6:	2b01      	cmp	r3, #1
 80062b8:	d01e      	beq.n	80062f8 <USB_SetCurrentMode+0x84>
 80062ba:	68fb      	ldr	r3, [r7, #12]
 80062bc:	2b31      	cmp	r3, #49	; 0x31
 80062be:	d9f0      	bls.n	80062a2 <USB_SetCurrentMode+0x2e>
 80062c0:	e01a      	b.n	80062f8 <USB_SetCurrentMode+0x84>
  }
  else if (mode == USB_DEVICE_MODE)
 80062c2:	78fb      	ldrb	r3, [r7, #3]
 80062c4:	2b00      	cmp	r3, #0
 80062c6:	d115      	bne.n	80062f4 <USB_SetCurrentMode+0x80>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 80062c8:	687b      	ldr	r3, [r7, #4]
 80062ca:	68db      	ldr	r3, [r3, #12]
 80062cc:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 80062d0:	687b      	ldr	r3, [r7, #4]
 80062d2:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 80062d4:	2001      	movs	r0, #1
 80062d6:	f7fa fd37 	bl	8000d48 <HAL_Delay>
      ms++;
 80062da:	68fb      	ldr	r3, [r7, #12]
 80062dc:	3301      	adds	r3, #1
 80062de:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_DEVICE_MODE) && (ms < 50U));
 80062e0:	6878      	ldr	r0, [r7, #4]
 80062e2:	f001 fa32 	bl	800774a <USB_GetMode>
 80062e6:	4603      	mov	r3, r0
 80062e8:	2b00      	cmp	r3, #0
 80062ea:	d005      	beq.n	80062f8 <USB_SetCurrentMode+0x84>
 80062ec:	68fb      	ldr	r3, [r7, #12]
 80062ee:	2b31      	cmp	r3, #49	; 0x31
 80062f0:	d9f0      	bls.n	80062d4 <USB_SetCurrentMode+0x60>
 80062f2:	e001      	b.n	80062f8 <USB_SetCurrentMode+0x84>
  }
  else
  {
    return HAL_ERROR;
 80062f4:	2301      	movs	r3, #1
 80062f6:	e005      	b.n	8006304 <USB_SetCurrentMode+0x90>
  }

  if (ms == 50U)
 80062f8:	68fb      	ldr	r3, [r7, #12]
 80062fa:	2b32      	cmp	r3, #50	; 0x32
 80062fc:	d101      	bne.n	8006302 <USB_SetCurrentMode+0x8e>
  {
    return HAL_ERROR;
 80062fe:	2301      	movs	r3, #1
 8006300:	e000      	b.n	8006304 <USB_SetCurrentMode+0x90>
  }

  return HAL_OK;
 8006302:	2300      	movs	r3, #0
}
 8006304:	4618      	mov	r0, r3
 8006306:	3710      	adds	r7, #16
 8006308:	46bd      	mov	sp, r7
 800630a:	bd80      	pop	{r7, pc}

0800630c <USB_DevInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 800630c:	b084      	sub	sp, #16
 800630e:	b580      	push	{r7, lr}
 8006310:	b086      	sub	sp, #24
 8006312:	af00      	add	r7, sp, #0
 8006314:	6078      	str	r0, [r7, #4]
 8006316:	f107 0024 	add.w	r0, r7, #36	; 0x24
 800631a:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 800631e:	2300      	movs	r3, #0
 8006320:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006322:	687b      	ldr	r3, [r7, #4]
 8006324:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  for (i = 0U; i < 15U; i++)
 8006326:	2300      	movs	r3, #0
 8006328:	613b      	str	r3, [r7, #16]
 800632a:	e009      	b.n	8006340 <USB_DevInit+0x34>
  {
    USBx->DIEPTXF[i] = 0U;
 800632c:	687a      	ldr	r2, [r7, #4]
 800632e:	693b      	ldr	r3, [r7, #16]
 8006330:	3340      	adds	r3, #64	; 0x40
 8006332:	009b      	lsls	r3, r3, #2
 8006334:	4413      	add	r3, r2
 8006336:	2200      	movs	r2, #0
 8006338:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < 15U; i++)
 800633a:	693b      	ldr	r3, [r7, #16]
 800633c:	3301      	adds	r3, #1
 800633e:	613b      	str	r3, [r7, #16]
 8006340:	693b      	ldr	r3, [r7, #16]
 8006342:	2b0e      	cmp	r3, #14
 8006344:	d9f2      	bls.n	800632c <USB_DevInit+0x20>
  }

  /* VBUS Sensing setup */
  if (cfg.vbus_sensing_enable == 0U)
 8006346:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8006348:	2b00      	cmp	r3, #0
 800634a:	d11c      	bne.n	8006386 <USB_DevInit+0x7a>
  {
    USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 800634c:	68fb      	ldr	r3, [r7, #12]
 800634e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006352:	685b      	ldr	r3, [r3, #4]
 8006354:	68fa      	ldr	r2, [r7, #12]
 8006356:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800635a:	f043 0302 	orr.w	r3, r3, #2
 800635e:	6053      	str	r3, [r2, #4]

    /* Deactivate VBUS Sensing B */
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBDEN;
 8006360:	687b      	ldr	r3, [r7, #4]
 8006362:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006364:	f423 1200 	bic.w	r2, r3, #2097152	; 0x200000
 8006368:	687b      	ldr	r3, [r7, #4]
 800636a:	639a      	str	r2, [r3, #56]	; 0x38

    /* B-peripheral session valid override enable */
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOEN;
 800636c:	687b      	ldr	r3, [r7, #4]
 800636e:	681b      	ldr	r3, [r3, #0]
 8006370:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8006374:	687b      	ldr	r3, [r7, #4]
 8006376:	601a      	str	r2, [r3, #0]
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOVAL;
 8006378:	687b      	ldr	r3, [r7, #4]
 800637a:	681b      	ldr	r3, [r3, #0]
 800637c:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 8006380:	687b      	ldr	r3, [r7, #4]
 8006382:	601a      	str	r2, [r3, #0]
 8006384:	e005      	b.n	8006392 <USB_DevInit+0x86>
  }
  else
  {
    /* Enable HW VBUS sensing */
    USBx->GCCFG |= USB_OTG_GCCFG_VBDEN;
 8006386:	687b      	ldr	r3, [r7, #4]
 8006388:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800638a:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 800638e:	687b      	ldr	r3, [r7, #4]
 8006390:	639a      	str	r2, [r3, #56]	; 0x38
  }

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 8006392:	68fb      	ldr	r3, [r7, #12]
 8006394:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8006398:	461a      	mov	r2, r3
 800639a:	2300      	movs	r3, #0
 800639c:	6013      	str	r3, [r2, #0]

  /* Device mode configuration */
  USBx_DEVICE->DCFG |= DCFG_FRAME_INTERVAL_80;
 800639e:	68fb      	ldr	r3, [r7, #12]
 80063a0:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80063a4:	4619      	mov	r1, r3
 80063a6:	68fb      	ldr	r3, [r7, #12]
 80063a8:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80063ac:	461a      	mov	r2, r3
 80063ae:	680b      	ldr	r3, [r1, #0]
 80063b0:	6013      	str	r3, [r2, #0]

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 80063b2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80063b4:	2b01      	cmp	r3, #1
 80063b6:	d10c      	bne.n	80063d2 <USB_DevInit+0xc6>
  {
    if (cfg.speed == USBD_HS_SPEED)
 80063b8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80063ba:	2b00      	cmp	r3, #0
 80063bc:	d104      	bne.n	80063c8 <USB_DevInit+0xbc>
    {
      /* Set Core speed to High speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH);
 80063be:	2100      	movs	r1, #0
 80063c0:	6878      	ldr	r0, [r7, #4]
 80063c2:	f000 f965 	bl	8006690 <USB_SetDevSpeed>
 80063c6:	e008      	b.n	80063da <USB_DevInit+0xce>
    }
    else
    {
      /* Set Core speed to Full speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH_IN_FULL);
 80063c8:	2101      	movs	r1, #1
 80063ca:	6878      	ldr	r0, [r7, #4]
 80063cc:	f000 f960 	bl	8006690 <USB_SetDevSpeed>
 80063d0:	e003      	b.n	80063da <USB_DevInit+0xce>
    }
  }
  else
  {
    /* Set Core speed to Full speed mode */
    (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_FULL);
 80063d2:	2103      	movs	r1, #3
 80063d4:	6878      	ldr	r0, [r7, #4]
 80063d6:	f000 f95b 	bl	8006690 <USB_SetDevSpeed>
  }

  /* Flush the FIFOs */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 80063da:	2110      	movs	r1, #16
 80063dc:	6878      	ldr	r0, [r7, #4]
 80063de:	f000 f8f3 	bl	80065c8 <USB_FlushTxFifo>
 80063e2:	4603      	mov	r3, r0
 80063e4:	2b00      	cmp	r3, #0
 80063e6:	d001      	beq.n	80063ec <USB_DevInit+0xe0>
  {
    ret = HAL_ERROR;
 80063e8:	2301      	movs	r3, #1
 80063ea:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 80063ec:	6878      	ldr	r0, [r7, #4]
 80063ee:	f000 f91f 	bl	8006630 <USB_FlushRxFifo>
 80063f2:	4603      	mov	r3, r0
 80063f4:	2b00      	cmp	r3, #0
 80063f6:	d001      	beq.n	80063fc <USB_DevInit+0xf0>
  {
    ret = HAL_ERROR;
 80063f8:	2301      	movs	r3, #1
 80063fa:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending Device Interrupts */
  USBx_DEVICE->DIEPMSK = 0U;
 80063fc:	68fb      	ldr	r3, [r7, #12]
 80063fe:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006402:	461a      	mov	r2, r3
 8006404:	2300      	movs	r3, #0
 8006406:	6113      	str	r3, [r2, #16]
  USBx_DEVICE->DOEPMSK = 0U;
 8006408:	68fb      	ldr	r3, [r7, #12]
 800640a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800640e:	461a      	mov	r2, r3
 8006410:	2300      	movs	r3, #0
 8006412:	6153      	str	r3, [r2, #20]
  USBx_DEVICE->DAINTMSK = 0U;
 8006414:	68fb      	ldr	r3, [r7, #12]
 8006416:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800641a:	461a      	mov	r2, r3
 800641c:	2300      	movs	r3, #0
 800641e:	61d3      	str	r3, [r2, #28]

  for (i = 0U; i < cfg.dev_endpoints; i++)
 8006420:	2300      	movs	r3, #0
 8006422:	613b      	str	r3, [r7, #16]
 8006424:	e043      	b.n	80064ae <USB_DevInit+0x1a2>
  {
    if ((USBx_INEP(i)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 8006426:	693b      	ldr	r3, [r7, #16]
 8006428:	015a      	lsls	r2, r3, #5
 800642a:	68fb      	ldr	r3, [r7, #12]
 800642c:	4413      	add	r3, r2
 800642e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006432:	681b      	ldr	r3, [r3, #0]
 8006434:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8006438:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800643c:	d118      	bne.n	8006470 <USB_DevInit+0x164>
    {
      if (i == 0U)
 800643e:	693b      	ldr	r3, [r7, #16]
 8006440:	2b00      	cmp	r3, #0
 8006442:	d10a      	bne.n	800645a <USB_DevInit+0x14e>
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_SNAK;
 8006444:	693b      	ldr	r3, [r7, #16]
 8006446:	015a      	lsls	r2, r3, #5
 8006448:	68fb      	ldr	r3, [r7, #12]
 800644a:	4413      	add	r3, r2
 800644c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006450:	461a      	mov	r2, r3
 8006452:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8006456:	6013      	str	r3, [r2, #0]
 8006458:	e013      	b.n	8006482 <USB_DevInit+0x176>
      }
      else
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK;
 800645a:	693b      	ldr	r3, [r7, #16]
 800645c:	015a      	lsls	r2, r3, #5
 800645e:	68fb      	ldr	r3, [r7, #12]
 8006460:	4413      	add	r3, r2
 8006462:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006466:	461a      	mov	r2, r3
 8006468:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 800646c:	6013      	str	r3, [r2, #0]
 800646e:	e008      	b.n	8006482 <USB_DevInit+0x176>
      }
    }
    else
    {
      USBx_INEP(i)->DIEPCTL = 0U;
 8006470:	693b      	ldr	r3, [r7, #16]
 8006472:	015a      	lsls	r2, r3, #5
 8006474:	68fb      	ldr	r3, [r7, #12]
 8006476:	4413      	add	r3, r2
 8006478:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800647c:	461a      	mov	r2, r3
 800647e:	2300      	movs	r3, #0
 8006480:	6013      	str	r3, [r2, #0]
    }

    USBx_INEP(i)->DIEPTSIZ = 0U;
 8006482:	693b      	ldr	r3, [r7, #16]
 8006484:	015a      	lsls	r2, r3, #5
 8006486:	68fb      	ldr	r3, [r7, #12]
 8006488:	4413      	add	r3, r2
 800648a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800648e:	461a      	mov	r2, r3
 8006490:	2300      	movs	r3, #0
 8006492:	6113      	str	r3, [r2, #16]
    USBx_INEP(i)->DIEPINT  = 0xFB7FU;
 8006494:	693b      	ldr	r3, [r7, #16]
 8006496:	015a      	lsls	r2, r3, #5
 8006498:	68fb      	ldr	r3, [r7, #12]
 800649a:	4413      	add	r3, r2
 800649c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80064a0:	461a      	mov	r2, r3
 80064a2:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 80064a6:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 80064a8:	693b      	ldr	r3, [r7, #16]
 80064aa:	3301      	adds	r3, #1
 80064ac:	613b      	str	r3, [r7, #16]
 80064ae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80064b0:	693a      	ldr	r2, [r7, #16]
 80064b2:	429a      	cmp	r2, r3
 80064b4:	d3b7      	bcc.n	8006426 <USB_DevInit+0x11a>
  }

  for (i = 0U; i < cfg.dev_endpoints; i++)
 80064b6:	2300      	movs	r3, #0
 80064b8:	613b      	str	r3, [r7, #16]
 80064ba:	e043      	b.n	8006544 <USB_DevInit+0x238>
  {
    if ((USBx_OUTEP(i)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 80064bc:	693b      	ldr	r3, [r7, #16]
 80064be:	015a      	lsls	r2, r3, #5
 80064c0:	68fb      	ldr	r3, [r7, #12]
 80064c2:	4413      	add	r3, r2
 80064c4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80064c8:	681b      	ldr	r3, [r3, #0]
 80064ca:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 80064ce:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80064d2:	d118      	bne.n	8006506 <USB_DevInit+0x1fa>
    {
      if (i == 0U)
 80064d4:	693b      	ldr	r3, [r7, #16]
 80064d6:	2b00      	cmp	r3, #0
 80064d8:	d10a      	bne.n	80064f0 <USB_DevInit+0x1e4>
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_SNAK;
 80064da:	693b      	ldr	r3, [r7, #16]
 80064dc:	015a      	lsls	r2, r3, #5
 80064de:	68fb      	ldr	r3, [r7, #12]
 80064e0:	4413      	add	r3, r2
 80064e2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80064e6:	461a      	mov	r2, r3
 80064e8:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 80064ec:	6013      	str	r3, [r2, #0]
 80064ee:	e013      	b.n	8006518 <USB_DevInit+0x20c>
      }
      else
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK;
 80064f0:	693b      	ldr	r3, [r7, #16]
 80064f2:	015a      	lsls	r2, r3, #5
 80064f4:	68fb      	ldr	r3, [r7, #12]
 80064f6:	4413      	add	r3, r2
 80064f8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80064fc:	461a      	mov	r2, r3
 80064fe:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8006502:	6013      	str	r3, [r2, #0]
 8006504:	e008      	b.n	8006518 <USB_DevInit+0x20c>
      }
    }
    else
    {
      USBx_OUTEP(i)->DOEPCTL = 0U;
 8006506:	693b      	ldr	r3, [r7, #16]
 8006508:	015a      	lsls	r2, r3, #5
 800650a:	68fb      	ldr	r3, [r7, #12]
 800650c:	4413      	add	r3, r2
 800650e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006512:	461a      	mov	r2, r3
 8006514:	2300      	movs	r3, #0
 8006516:	6013      	str	r3, [r2, #0]
    }

    USBx_OUTEP(i)->DOEPTSIZ = 0U;
 8006518:	693b      	ldr	r3, [r7, #16]
 800651a:	015a      	lsls	r2, r3, #5
 800651c:	68fb      	ldr	r3, [r7, #12]
 800651e:	4413      	add	r3, r2
 8006520:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006524:	461a      	mov	r2, r3
 8006526:	2300      	movs	r3, #0
 8006528:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(i)->DOEPINT  = 0xFB7FU;
 800652a:	693b      	ldr	r3, [r7, #16]
 800652c:	015a      	lsls	r2, r3, #5
 800652e:	68fb      	ldr	r3, [r7, #12]
 8006530:	4413      	add	r3, r2
 8006532:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006536:	461a      	mov	r2, r3
 8006538:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 800653c:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 800653e:	693b      	ldr	r3, [r7, #16]
 8006540:	3301      	adds	r3, #1
 8006542:	613b      	str	r3, [r7, #16]
 8006544:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006546:	693a      	ldr	r2, [r7, #16]
 8006548:	429a      	cmp	r2, r3
 800654a:	d3b7      	bcc.n	80064bc <USB_DevInit+0x1b0>
  }

  USBx_DEVICE->DIEPMSK &= ~(USB_OTG_DIEPMSK_TXFURM);
 800654c:	68fb      	ldr	r3, [r7, #12]
 800654e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006552:	691b      	ldr	r3, [r3, #16]
 8006554:	68fa      	ldr	r2, [r7, #12]
 8006556:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800655a:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800655e:	6113      	str	r3, [r2, #16]

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 8006560:	687b      	ldr	r3, [r7, #4]
 8006562:	2200      	movs	r2, #0
 8006564:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xBFFFFFFFU;
 8006566:	687b      	ldr	r3, [r7, #4]
 8006568:	f06f 4280 	mvn.w	r2, #1073741824	; 0x40000000
 800656c:	615a      	str	r2, [r3, #20]

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 800656e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006570:	2b00      	cmp	r3, #0
 8006572:	d105      	bne.n	8006580 <USB_DevInit+0x274>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 8006574:	687b      	ldr	r3, [r7, #4]
 8006576:	699b      	ldr	r3, [r3, #24]
 8006578:	f043 0210 	orr.w	r2, r3, #16
 800657c:	687b      	ldr	r3, [r7, #4]
 800657e:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Device mode ONLY */
  USBx->GINTMSK |= USB_OTG_GINTMSK_USBSUSPM | USB_OTG_GINTMSK_USBRST |
 8006580:	687b      	ldr	r3, [r7, #4]
 8006582:	699a      	ldr	r2, [r3, #24]
 8006584:	4b0e      	ldr	r3, [pc, #56]	; (80065c0 <USB_DevInit+0x2b4>)
 8006586:	4313      	orrs	r3, r2
 8006588:	687a      	ldr	r2, [r7, #4]
 800658a:	6193      	str	r3, [r2, #24]
                   USB_OTG_GINTMSK_ENUMDNEM | USB_OTG_GINTMSK_IEPINT |
                   USB_OTG_GINTMSK_OEPINT   | USB_OTG_GINTMSK_IISOIXFRM |
                   USB_OTG_GINTMSK_PXFRM_IISOOXFRM | USB_OTG_GINTMSK_WUIM;

  if (cfg.Sof_enable != 0U)
 800658c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800658e:	2b00      	cmp	r3, #0
 8006590:	d005      	beq.n	800659e <USB_DevInit+0x292>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_SOFM;
 8006592:	687b      	ldr	r3, [r7, #4]
 8006594:	699b      	ldr	r3, [r3, #24]
 8006596:	f043 0208 	orr.w	r2, r3, #8
 800659a:	687b      	ldr	r3, [r7, #4]
 800659c:	619a      	str	r2, [r3, #24]
  }

  if (cfg.vbus_sensing_enable == 1U)
 800659e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80065a0:	2b01      	cmp	r3, #1
 80065a2:	d105      	bne.n	80065b0 <USB_DevInit+0x2a4>
  {
    USBx->GINTMSK |= (USB_OTG_GINTMSK_SRQIM | USB_OTG_GINTMSK_OTGINT);
 80065a4:	687b      	ldr	r3, [r7, #4]
 80065a6:	699a      	ldr	r2, [r3, #24]
 80065a8:	4b06      	ldr	r3, [pc, #24]	; (80065c4 <USB_DevInit+0x2b8>)
 80065aa:	4313      	orrs	r3, r2
 80065ac:	687a      	ldr	r2, [r7, #4]
 80065ae:	6193      	str	r3, [r2, #24]
  }

  return ret;
 80065b0:	7dfb      	ldrb	r3, [r7, #23]
}
 80065b2:	4618      	mov	r0, r3
 80065b4:	3718      	adds	r7, #24
 80065b6:	46bd      	mov	sp, r7
 80065b8:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 80065bc:	b004      	add	sp, #16
 80065be:	4770      	bx	lr
 80065c0:	803c3800 	.word	0x803c3800
 80065c4:	40000004 	.word	0x40000004

080065c8 <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 80065c8:	b480      	push	{r7}
 80065ca:	b085      	sub	sp, #20
 80065cc:	af00      	add	r7, sp, #0
 80065ce:	6078      	str	r0, [r7, #4]
 80065d0:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 80065d2:	2300      	movs	r3, #0
 80065d4:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 80065d6:	68fb      	ldr	r3, [r7, #12]
 80065d8:	3301      	adds	r3, #1
 80065da:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 80065dc:	68fb      	ldr	r3, [r7, #12]
 80065de:	4a13      	ldr	r2, [pc, #76]	; (800662c <USB_FlushTxFifo+0x64>)
 80065e0:	4293      	cmp	r3, r2
 80065e2:	d901      	bls.n	80065e8 <USB_FlushTxFifo+0x20>
    {
      return HAL_TIMEOUT;
 80065e4:	2303      	movs	r3, #3
 80065e6:	e01b      	b.n	8006620 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 80065e8:	687b      	ldr	r3, [r7, #4]
 80065ea:	691b      	ldr	r3, [r3, #16]
 80065ec:	2b00      	cmp	r3, #0
 80065ee:	daf2      	bge.n	80065d6 <USB_FlushTxFifo+0xe>

  /* Flush TX Fifo */
  count = 0U;
 80065f0:	2300      	movs	r3, #0
 80065f2:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 80065f4:	683b      	ldr	r3, [r7, #0]
 80065f6:	019b      	lsls	r3, r3, #6
 80065f8:	f043 0220 	orr.w	r2, r3, #32
 80065fc:	687b      	ldr	r3, [r7, #4]
 80065fe:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8006600:	68fb      	ldr	r3, [r7, #12]
 8006602:	3301      	adds	r3, #1
 8006604:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8006606:	68fb      	ldr	r3, [r7, #12]
 8006608:	4a08      	ldr	r2, [pc, #32]	; (800662c <USB_FlushTxFifo+0x64>)
 800660a:	4293      	cmp	r3, r2
 800660c:	d901      	bls.n	8006612 <USB_FlushTxFifo+0x4a>
    {
      return HAL_TIMEOUT;
 800660e:	2303      	movs	r3, #3
 8006610:	e006      	b.n	8006620 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 8006612:	687b      	ldr	r3, [r7, #4]
 8006614:	691b      	ldr	r3, [r3, #16]
 8006616:	f003 0320 	and.w	r3, r3, #32
 800661a:	2b20      	cmp	r3, #32
 800661c:	d0f0      	beq.n	8006600 <USB_FlushTxFifo+0x38>

  return HAL_OK;
 800661e:	2300      	movs	r3, #0
}
 8006620:	4618      	mov	r0, r3
 8006622:	3714      	adds	r7, #20
 8006624:	46bd      	mov	sp, r7
 8006626:	f85d 7b04 	ldr.w	r7, [sp], #4
 800662a:	4770      	bx	lr
 800662c:	00030d40 	.word	0x00030d40

08006630 <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo  Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 8006630:	b480      	push	{r7}
 8006632:	b085      	sub	sp, #20
 8006634:	af00      	add	r7, sp, #0
 8006636:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8006638:	2300      	movs	r3, #0
 800663a:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 800663c:	68fb      	ldr	r3, [r7, #12]
 800663e:	3301      	adds	r3, #1
 8006640:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8006642:	68fb      	ldr	r3, [r7, #12]
 8006644:	4a11      	ldr	r2, [pc, #68]	; (800668c <USB_FlushRxFifo+0x5c>)
 8006646:	4293      	cmp	r3, r2
 8006648:	d901      	bls.n	800664e <USB_FlushRxFifo+0x1e>
    {
      return HAL_TIMEOUT;
 800664a:	2303      	movs	r3, #3
 800664c:	e018      	b.n	8006680 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 800664e:	687b      	ldr	r3, [r7, #4]
 8006650:	691b      	ldr	r3, [r3, #16]
 8006652:	2b00      	cmp	r3, #0
 8006654:	daf2      	bge.n	800663c <USB_FlushRxFifo+0xc>

  /* Flush RX Fifo */
  count = 0U;
 8006656:	2300      	movs	r3, #0
 8006658:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 800665a:	687b      	ldr	r3, [r7, #4]
 800665c:	2210      	movs	r2, #16
 800665e:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8006660:	68fb      	ldr	r3, [r7, #12]
 8006662:	3301      	adds	r3, #1
 8006664:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8006666:	68fb      	ldr	r3, [r7, #12]
 8006668:	4a08      	ldr	r2, [pc, #32]	; (800668c <USB_FlushRxFifo+0x5c>)
 800666a:	4293      	cmp	r3, r2
 800666c:	d901      	bls.n	8006672 <USB_FlushRxFifo+0x42>
    {
      return HAL_TIMEOUT;
 800666e:	2303      	movs	r3, #3
 8006670:	e006      	b.n	8006680 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 8006672:	687b      	ldr	r3, [r7, #4]
 8006674:	691b      	ldr	r3, [r3, #16]
 8006676:	f003 0310 	and.w	r3, r3, #16
 800667a:	2b10      	cmp	r3, #16
 800667c:	d0f0      	beq.n	8006660 <USB_FlushRxFifo+0x30>

  return HAL_OK;
 800667e:	2300      	movs	r3, #0
}
 8006680:	4618      	mov	r0, r3
 8006682:	3714      	adds	r7, #20
 8006684:	46bd      	mov	sp, r7
 8006686:	f85d 7b04 	ldr.w	r7, [sp], #4
 800668a:	4770      	bx	lr
 800668c:	00030d40 	.word	0x00030d40

08006690 <USB_SetDevSpeed>:
  *            @arg USB_OTG_SPEED_HIGH_IN_FULL: High speed core in Full Speed mode
  *            @arg USB_OTG_SPEED_FULL: Full speed mode
  * @retval  Hal status
  */
HAL_StatusTypeDef USB_SetDevSpeed(USB_OTG_GlobalTypeDef *USBx, uint8_t speed)
{
 8006690:	b480      	push	{r7}
 8006692:	b085      	sub	sp, #20
 8006694:	af00      	add	r7, sp, #0
 8006696:	6078      	str	r0, [r7, #4]
 8006698:	460b      	mov	r3, r1
 800669a:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800669c:	687b      	ldr	r3, [r7, #4]
 800669e:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG |= speed;
 80066a0:	68fb      	ldr	r3, [r7, #12]
 80066a2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80066a6:	681a      	ldr	r2, [r3, #0]
 80066a8:	78fb      	ldrb	r3, [r7, #3]
 80066aa:	68f9      	ldr	r1, [r7, #12]
 80066ac:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 80066b0:	4313      	orrs	r3, r2
 80066b2:	600b      	str	r3, [r1, #0]
  return HAL_OK;
 80066b4:	2300      	movs	r3, #0
}
 80066b6:	4618      	mov	r0, r3
 80066b8:	3714      	adds	r7, #20
 80066ba:	46bd      	mov	sp, r7
 80066bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80066c0:	4770      	bx	lr

080066c2 <USB_GetDevSpeed>:
  *          This parameter can be one of these values:
  *            @arg USBD_HS_SPEED: High speed mode
  *            @arg USBD_FS_SPEED: Full speed mode
  */
uint8_t USB_GetDevSpeed(USB_OTG_GlobalTypeDef *USBx)
{
 80066c2:	b480      	push	{r7}
 80066c4:	b087      	sub	sp, #28
 80066c6:	af00      	add	r7, sp, #0
 80066c8:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80066ca:	687b      	ldr	r3, [r7, #4]
 80066cc:	613b      	str	r3, [r7, #16]
  uint8_t speed;
  uint32_t DevEnumSpeed = USBx_DEVICE->DSTS & USB_OTG_DSTS_ENUMSPD;
 80066ce:	693b      	ldr	r3, [r7, #16]
 80066d0:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80066d4:	689b      	ldr	r3, [r3, #8]
 80066d6:	f003 0306 	and.w	r3, r3, #6
 80066da:	60fb      	str	r3, [r7, #12]

  if (DevEnumSpeed == DSTS_ENUMSPD_HS_PHY_30MHZ_OR_60MHZ)
 80066dc:	68fb      	ldr	r3, [r7, #12]
 80066de:	2b00      	cmp	r3, #0
 80066e0:	d102      	bne.n	80066e8 <USB_GetDevSpeed+0x26>
  {
    speed = USBD_HS_SPEED;
 80066e2:	2300      	movs	r3, #0
 80066e4:	75fb      	strb	r3, [r7, #23]
 80066e6:	e00a      	b.n	80066fe <USB_GetDevSpeed+0x3c>
  }
  else if ((DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_30MHZ_OR_60MHZ) ||
 80066e8:	68fb      	ldr	r3, [r7, #12]
 80066ea:	2b02      	cmp	r3, #2
 80066ec:	d002      	beq.n	80066f4 <USB_GetDevSpeed+0x32>
 80066ee:	68fb      	ldr	r3, [r7, #12]
 80066f0:	2b06      	cmp	r3, #6
 80066f2:	d102      	bne.n	80066fa <USB_GetDevSpeed+0x38>
           (DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_48MHZ))
  {
    speed = USBD_FS_SPEED;
 80066f4:	2302      	movs	r3, #2
 80066f6:	75fb      	strb	r3, [r7, #23]
 80066f8:	e001      	b.n	80066fe <USB_GetDevSpeed+0x3c>
  }
  else
  {
    speed = 0xFU;
 80066fa:	230f      	movs	r3, #15
 80066fc:	75fb      	strb	r3, [r7, #23]
  }

  return speed;
 80066fe:	7dfb      	ldrb	r3, [r7, #23]
}
 8006700:	4618      	mov	r0, r3
 8006702:	371c      	adds	r7, #28
 8006704:	46bd      	mov	sp, r7
 8006706:	f85d 7b04 	ldr.w	r7, [sp], #4
 800670a:	4770      	bx	lr

0800670c <USB_ActivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateEndpoint(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 800670c:	b480      	push	{r7}
 800670e:	b085      	sub	sp, #20
 8006710:	af00      	add	r7, sp, #0
 8006712:	6078      	str	r0, [r7, #4]
 8006714:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006716:	687b      	ldr	r3, [r7, #4]
 8006718:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 800671a:	683b      	ldr	r3, [r7, #0]
 800671c:	781b      	ldrb	r3, [r3, #0]
 800671e:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 8006720:	683b      	ldr	r3, [r7, #0]
 8006722:	785b      	ldrb	r3, [r3, #1]
 8006724:	2b01      	cmp	r3, #1
 8006726:	d139      	bne.n	800679c <USB_ActivateEndpoint+0x90>
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK));
 8006728:	68fb      	ldr	r3, [r7, #12]
 800672a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800672e:	69da      	ldr	r2, [r3, #28]
 8006730:	683b      	ldr	r3, [r7, #0]
 8006732:	781b      	ldrb	r3, [r3, #0]
 8006734:	f003 030f 	and.w	r3, r3, #15
 8006738:	2101      	movs	r1, #1
 800673a:	fa01 f303 	lsl.w	r3, r1, r3
 800673e:	b29b      	uxth	r3, r3
 8006740:	68f9      	ldr	r1, [r7, #12]
 8006742:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8006746:	4313      	orrs	r3, r2
 8006748:	61cb      	str	r3, [r1, #28]

    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_USBAEP) == 0U)
 800674a:	68bb      	ldr	r3, [r7, #8]
 800674c:	015a      	lsls	r2, r3, #5
 800674e:	68fb      	ldr	r3, [r7, #12]
 8006750:	4413      	add	r3, r2
 8006752:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006756:	681b      	ldr	r3, [r3, #0]
 8006758:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800675c:	2b00      	cmp	r3, #0
 800675e:	d153      	bne.n	8006808 <USB_ActivateEndpoint+0xfc>
    {
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 8006760:	68bb      	ldr	r3, [r7, #8]
 8006762:	015a      	lsls	r2, r3, #5
 8006764:	68fb      	ldr	r3, [r7, #12]
 8006766:	4413      	add	r3, r2
 8006768:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800676c:	681a      	ldr	r2, [r3, #0]
 800676e:	683b      	ldr	r3, [r7, #0]
 8006770:	68db      	ldr	r3, [r3, #12]
 8006772:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 8006776:	683b      	ldr	r3, [r7, #0]
 8006778:	791b      	ldrb	r3, [r3, #4]
 800677a:	049b      	lsls	r3, r3, #18
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 800677c:	4319      	orrs	r1, r3
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 800677e:	68bb      	ldr	r3, [r7, #8]
 8006780:	059b      	lsls	r3, r3, #22
 8006782:	430b      	orrs	r3, r1
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 8006784:	431a      	orrs	r2, r3
 8006786:	68bb      	ldr	r3, [r7, #8]
 8006788:	0159      	lsls	r1, r3, #5
 800678a:	68fb      	ldr	r3, [r7, #12]
 800678c:	440b      	add	r3, r1
 800678e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006792:	4619      	mov	r1, r3
 8006794:	4b20      	ldr	r3, [pc, #128]	; (8006818 <USB_ActivateEndpoint+0x10c>)
 8006796:	4313      	orrs	r3, r2
 8006798:	600b      	str	r3, [r1, #0]
 800679a:	e035      	b.n	8006808 <USB_ActivateEndpoint+0xfc>
                                   USB_OTG_DIEPCTL_USBAEP;
    }
  }
  else
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16);
 800679c:	68fb      	ldr	r3, [r7, #12]
 800679e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80067a2:	69da      	ldr	r2, [r3, #28]
 80067a4:	683b      	ldr	r3, [r7, #0]
 80067a6:	781b      	ldrb	r3, [r3, #0]
 80067a8:	f003 030f 	and.w	r3, r3, #15
 80067ac:	2101      	movs	r1, #1
 80067ae:	fa01 f303 	lsl.w	r3, r1, r3
 80067b2:	041b      	lsls	r3, r3, #16
 80067b4:	68f9      	ldr	r1, [r7, #12]
 80067b6:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 80067ba:	4313      	orrs	r3, r2
 80067bc:	61cb      	str	r3, [r1, #28]

    if (((USBx_OUTEP(epnum)->DOEPCTL) & USB_OTG_DOEPCTL_USBAEP) == 0U)
 80067be:	68bb      	ldr	r3, [r7, #8]
 80067c0:	015a      	lsls	r2, r3, #5
 80067c2:	68fb      	ldr	r3, [r7, #12]
 80067c4:	4413      	add	r3, r2
 80067c6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80067ca:	681b      	ldr	r3, [r3, #0]
 80067cc:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80067d0:	2b00      	cmp	r3, #0
 80067d2:	d119      	bne.n	8006808 <USB_ActivateEndpoint+0xfc>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 80067d4:	68bb      	ldr	r3, [r7, #8]
 80067d6:	015a      	lsls	r2, r3, #5
 80067d8:	68fb      	ldr	r3, [r7, #12]
 80067da:	4413      	add	r3, r2
 80067dc:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80067e0:	681a      	ldr	r2, [r3, #0]
 80067e2:	683b      	ldr	r3, [r7, #0]
 80067e4:	68db      	ldr	r3, [r3, #12]
 80067e6:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                    ((uint32_t)ep->type << 18) |
 80067ea:	683b      	ldr	r3, [r7, #0]
 80067ec:	791b      	ldrb	r3, [r3, #4]
 80067ee:	049b      	lsls	r3, r3, #18
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 80067f0:	430b      	orrs	r3, r1
 80067f2:	431a      	orrs	r2, r3
 80067f4:	68bb      	ldr	r3, [r7, #8]
 80067f6:	0159      	lsls	r1, r3, #5
 80067f8:	68fb      	ldr	r3, [r7, #12]
 80067fa:	440b      	add	r3, r1
 80067fc:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006800:	4619      	mov	r1, r3
 8006802:	4b05      	ldr	r3, [pc, #20]	; (8006818 <USB_ActivateEndpoint+0x10c>)
 8006804:	4313      	orrs	r3, r2
 8006806:	600b      	str	r3, [r1, #0]
                                    USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_USBAEP;
    }
  }
  return HAL_OK;
 8006808:	2300      	movs	r3, #0
}
 800680a:	4618      	mov	r0, r3
 800680c:	3714      	adds	r7, #20
 800680e:	46bd      	mov	sp, r7
 8006810:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006814:	4770      	bx	lr
 8006816:	bf00      	nop
 8006818:	10008000 	.word	0x10008000

0800681c <USB_DeactivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DeactivateEndpoint(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 800681c:	b480      	push	{r7}
 800681e:	b085      	sub	sp, #20
 8006820:	af00      	add	r7, sp, #0
 8006822:	6078      	str	r0, [r7, #4]
 8006824:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006826:	687b      	ldr	r3, [r7, #4]
 8006828:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 800682a:	683b      	ldr	r3, [r7, #0]
 800682c:	781b      	ldrb	r3, [r3, #0]
 800682e:	60bb      	str	r3, [r7, #8]

  /* Read DEPCTLn register */
  if (ep->is_in == 1U)
 8006830:	683b      	ldr	r3, [r7, #0]
 8006832:	785b      	ldrb	r3, [r3, #1]
 8006834:	2b01      	cmp	r3, #1
 8006836:	d161      	bne.n	80068fc <USB_DeactivateEndpoint+0xe0>
  {
    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 8006838:	68bb      	ldr	r3, [r7, #8]
 800683a:	015a      	lsls	r2, r3, #5
 800683c:	68fb      	ldr	r3, [r7, #12]
 800683e:	4413      	add	r3, r2
 8006840:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006844:	681b      	ldr	r3, [r3, #0]
 8006846:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800684a:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800684e:	d11f      	bne.n	8006890 <USB_DeactivateEndpoint+0x74>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SNAK;
 8006850:	68bb      	ldr	r3, [r7, #8]
 8006852:	015a      	lsls	r2, r3, #5
 8006854:	68fb      	ldr	r3, [r7, #12]
 8006856:	4413      	add	r3, r2
 8006858:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800685c:	681b      	ldr	r3, [r3, #0]
 800685e:	68ba      	ldr	r2, [r7, #8]
 8006860:	0151      	lsls	r1, r2, #5
 8006862:	68fa      	ldr	r2, [r7, #12]
 8006864:	440a      	add	r2, r1
 8006866:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800686a:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 800686e:	6013      	str	r3, [r2, #0]
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_EPDIS;
 8006870:	68bb      	ldr	r3, [r7, #8]
 8006872:	015a      	lsls	r2, r3, #5
 8006874:	68fb      	ldr	r3, [r7, #12]
 8006876:	4413      	add	r3, r2
 8006878:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800687c:	681b      	ldr	r3, [r3, #0]
 800687e:	68ba      	ldr	r2, [r7, #8]
 8006880:	0151      	lsls	r1, r2, #5
 8006882:	68fa      	ldr	r2, [r7, #12]
 8006884:	440a      	add	r2, r1
 8006886:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800688a:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 800688e:	6013      	str	r3, [r2, #0]
    }

    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 8006890:	68fb      	ldr	r3, [r7, #12]
 8006892:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006896:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8006898:	683b      	ldr	r3, [r7, #0]
 800689a:	781b      	ldrb	r3, [r3, #0]
 800689c:	f003 030f 	and.w	r3, r3, #15
 80068a0:	2101      	movs	r1, #1
 80068a2:	fa01 f303 	lsl.w	r3, r1, r3
 80068a6:	b29b      	uxth	r3, r3
 80068a8:	43db      	mvns	r3, r3
 80068aa:	68f9      	ldr	r1, [r7, #12]
 80068ac:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 80068b0:	4013      	ands	r3, r2
 80068b2:	63cb      	str	r3, [r1, #60]	; 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 80068b4:	68fb      	ldr	r3, [r7, #12]
 80068b6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80068ba:	69da      	ldr	r2, [r3, #28]
 80068bc:	683b      	ldr	r3, [r7, #0]
 80068be:	781b      	ldrb	r3, [r3, #0]
 80068c0:	f003 030f 	and.w	r3, r3, #15
 80068c4:	2101      	movs	r1, #1
 80068c6:	fa01 f303 	lsl.w	r3, r1, r3
 80068ca:	b29b      	uxth	r3, r3
 80068cc:	43db      	mvns	r3, r3
 80068ce:	68f9      	ldr	r1, [r7, #12]
 80068d0:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 80068d4:	4013      	ands	r3, r2
 80068d6:	61cb      	str	r3, [r1, #28]
    USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_USBAEP |
 80068d8:	68bb      	ldr	r3, [r7, #8]
 80068da:	015a      	lsls	r2, r3, #5
 80068dc:	68fb      	ldr	r3, [r7, #12]
 80068de:	4413      	add	r3, r2
 80068e0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80068e4:	681a      	ldr	r2, [r3, #0]
 80068e6:	68bb      	ldr	r3, [r7, #8]
 80068e8:	0159      	lsls	r1, r3, #5
 80068ea:	68fb      	ldr	r3, [r7, #12]
 80068ec:	440b      	add	r3, r1
 80068ee:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80068f2:	4619      	mov	r1, r3
 80068f4:	4b35      	ldr	r3, [pc, #212]	; (80069cc <USB_DeactivateEndpoint+0x1b0>)
 80068f6:	4013      	ands	r3, r2
 80068f8:	600b      	str	r3, [r1, #0]
 80068fa:	e060      	b.n	80069be <USB_DeactivateEndpoint+0x1a2>
                                   USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                   USB_OTG_DIEPCTL_EPTYP);
  }
  else
  {
    if ((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 80068fc:	68bb      	ldr	r3, [r7, #8]
 80068fe:	015a      	lsls	r2, r3, #5
 8006900:	68fb      	ldr	r3, [r7, #12]
 8006902:	4413      	add	r3, r2
 8006904:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006908:	681b      	ldr	r3, [r3, #0]
 800690a:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800690e:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8006912:	d11f      	bne.n	8006954 <USB_DeactivateEndpoint+0x138>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 8006914:	68bb      	ldr	r3, [r7, #8]
 8006916:	015a      	lsls	r2, r3, #5
 8006918:	68fb      	ldr	r3, [r7, #12]
 800691a:	4413      	add	r3, r2
 800691c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006920:	681b      	ldr	r3, [r3, #0]
 8006922:	68ba      	ldr	r2, [r7, #8]
 8006924:	0151      	lsls	r1, r2, #5
 8006926:	68fa      	ldr	r2, [r7, #12]
 8006928:	440a      	add	r2, r1
 800692a:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800692e:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8006932:	6013      	str	r3, [r2, #0]
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_EPDIS;
 8006934:	68bb      	ldr	r3, [r7, #8]
 8006936:	015a      	lsls	r2, r3, #5
 8006938:	68fb      	ldr	r3, [r7, #12]
 800693a:	4413      	add	r3, r2
 800693c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006940:	681b      	ldr	r3, [r3, #0]
 8006942:	68ba      	ldr	r2, [r7, #8]
 8006944:	0151      	lsls	r1, r2, #5
 8006946:	68fa      	ldr	r2, [r7, #12]
 8006948:	440a      	add	r2, r1
 800694a:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800694e:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8006952:	6013      	str	r3, [r2, #0]
    }

    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 8006954:	68fb      	ldr	r3, [r7, #12]
 8006956:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800695a:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800695c:	683b      	ldr	r3, [r7, #0]
 800695e:	781b      	ldrb	r3, [r3, #0]
 8006960:	f003 030f 	and.w	r3, r3, #15
 8006964:	2101      	movs	r1, #1
 8006966:	fa01 f303 	lsl.w	r3, r1, r3
 800696a:	041b      	lsls	r3, r3, #16
 800696c:	43db      	mvns	r3, r3
 800696e:	68f9      	ldr	r1, [r7, #12]
 8006970:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8006974:	4013      	ands	r3, r2
 8006976:	63cb      	str	r3, [r1, #60]	; 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 8006978:	68fb      	ldr	r3, [r7, #12]
 800697a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800697e:	69da      	ldr	r2, [r3, #28]
 8006980:	683b      	ldr	r3, [r7, #0]
 8006982:	781b      	ldrb	r3, [r3, #0]
 8006984:	f003 030f 	and.w	r3, r3, #15
 8006988:	2101      	movs	r1, #1
 800698a:	fa01 f303 	lsl.w	r3, r1, r3
 800698e:	041b      	lsls	r3, r3, #16
 8006990:	43db      	mvns	r3, r3
 8006992:	68f9      	ldr	r1, [r7, #12]
 8006994:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8006998:	4013      	ands	r3, r2
 800699a:	61cb      	str	r3, [r1, #28]
    USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_USBAEP |
 800699c:	68bb      	ldr	r3, [r7, #8]
 800699e:	015a      	lsls	r2, r3, #5
 80069a0:	68fb      	ldr	r3, [r7, #12]
 80069a2:	4413      	add	r3, r2
 80069a4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80069a8:	681a      	ldr	r2, [r3, #0]
 80069aa:	68bb      	ldr	r3, [r7, #8]
 80069ac:	0159      	lsls	r1, r3, #5
 80069ae:	68fb      	ldr	r3, [r7, #12]
 80069b0:	440b      	add	r3, r1
 80069b2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80069b6:	4619      	mov	r1, r3
 80069b8:	4b05      	ldr	r3, [pc, #20]	; (80069d0 <USB_DeactivateEndpoint+0x1b4>)
 80069ba:	4013      	ands	r3, r2
 80069bc:	600b      	str	r3, [r1, #0]
                                    USB_OTG_DOEPCTL_MPSIZ |
                                    USB_OTG_DOEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_EPTYP);
  }

  return HAL_OK;
 80069be:	2300      	movs	r3, #0
}
 80069c0:	4618      	mov	r0, r3
 80069c2:	3714      	adds	r7, #20
 80069c4:	46bd      	mov	sp, r7
 80069c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80069ca:	4770      	bx	lr
 80069cc:	ec337800 	.word	0xec337800
 80069d0:	eff37800 	.word	0xeff37800

080069d4 <USB_EPStartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPStartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep, uint8_t dma)
{
 80069d4:	b580      	push	{r7, lr}
 80069d6:	b08a      	sub	sp, #40	; 0x28
 80069d8:	af02      	add	r7, sp, #8
 80069da:	60f8      	str	r0, [r7, #12]
 80069dc:	60b9      	str	r1, [r7, #8]
 80069de:	4613      	mov	r3, r2
 80069e0:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80069e2:	68fb      	ldr	r3, [r7, #12]
 80069e4:	61fb      	str	r3, [r7, #28]
  uint32_t epnum = (uint32_t)ep->num;
 80069e6:	68bb      	ldr	r3, [r7, #8]
 80069e8:	781b      	ldrb	r3, [r3, #0]
 80069ea:	61bb      	str	r3, [r7, #24]
  uint16_t pktcnt;

  /* IN endpoint */
  if (ep->is_in == 1U)
 80069ec:	68bb      	ldr	r3, [r7, #8]
 80069ee:	785b      	ldrb	r3, [r3, #1]
 80069f0:	2b01      	cmp	r3, #1
 80069f2:	f040 8163 	bne.w	8006cbc <USB_EPStartXfer+0x2e8>
  {
    /* Zero Length Packet? */
    if (ep->xfer_len == 0U)
 80069f6:	68bb      	ldr	r3, [r7, #8]
 80069f8:	699b      	ldr	r3, [r3, #24]
 80069fa:	2b00      	cmp	r3, #0
 80069fc:	d132      	bne.n	8006a64 <USB_EPStartXfer+0x90>
    {
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 80069fe:	69bb      	ldr	r3, [r7, #24]
 8006a00:	015a      	lsls	r2, r3, #5
 8006a02:	69fb      	ldr	r3, [r7, #28]
 8006a04:	4413      	add	r3, r2
 8006a06:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006a0a:	691a      	ldr	r2, [r3, #16]
 8006a0c:	69bb      	ldr	r3, [r7, #24]
 8006a0e:	0159      	lsls	r1, r3, #5
 8006a10:	69fb      	ldr	r3, [r7, #28]
 8006a12:	440b      	add	r3, r1
 8006a14:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006a18:	4619      	mov	r1, r3
 8006a1a:	4ba5      	ldr	r3, [pc, #660]	; (8006cb0 <USB_EPStartXfer+0x2dc>)
 8006a1c:	4013      	ands	r3, r2
 8006a1e:	610b      	str	r3, [r1, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 8006a20:	69bb      	ldr	r3, [r7, #24]
 8006a22:	015a      	lsls	r2, r3, #5
 8006a24:	69fb      	ldr	r3, [r7, #28]
 8006a26:	4413      	add	r3, r2
 8006a28:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006a2c:	691b      	ldr	r3, [r3, #16]
 8006a2e:	69ba      	ldr	r2, [r7, #24]
 8006a30:	0151      	lsls	r1, r2, #5
 8006a32:	69fa      	ldr	r2, [r7, #28]
 8006a34:	440a      	add	r2, r1
 8006a36:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8006a3a:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8006a3e:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 8006a40:	69bb      	ldr	r3, [r7, #24]
 8006a42:	015a      	lsls	r2, r3, #5
 8006a44:	69fb      	ldr	r3, [r7, #28]
 8006a46:	4413      	add	r3, r2
 8006a48:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006a4c:	691a      	ldr	r2, [r3, #16]
 8006a4e:	69bb      	ldr	r3, [r7, #24]
 8006a50:	0159      	lsls	r1, r3, #5
 8006a52:	69fb      	ldr	r3, [r7, #28]
 8006a54:	440b      	add	r3, r1
 8006a56:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006a5a:	4619      	mov	r1, r3
 8006a5c:	4b95      	ldr	r3, [pc, #596]	; (8006cb4 <USB_EPStartXfer+0x2e0>)
 8006a5e:	4013      	ands	r3, r2
 8006a60:	610b      	str	r3, [r1, #16]
 8006a62:	e074      	b.n	8006b4e <USB_EPStartXfer+0x17a>
      /* Program the transfer size and packet count
      * as follows: xfersize = N * maxpacket +
      * short_packet pktcnt = N + (short_packet
      * exist ? 1 : 0)
      */
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 8006a64:	69bb      	ldr	r3, [r7, #24]
 8006a66:	015a      	lsls	r2, r3, #5
 8006a68:	69fb      	ldr	r3, [r7, #28]
 8006a6a:	4413      	add	r3, r2
 8006a6c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006a70:	691a      	ldr	r2, [r3, #16]
 8006a72:	69bb      	ldr	r3, [r7, #24]
 8006a74:	0159      	lsls	r1, r3, #5
 8006a76:	69fb      	ldr	r3, [r7, #28]
 8006a78:	440b      	add	r3, r1
 8006a7a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006a7e:	4619      	mov	r1, r3
 8006a80:	4b8c      	ldr	r3, [pc, #560]	; (8006cb4 <USB_EPStartXfer+0x2e0>)
 8006a82:	4013      	ands	r3, r2
 8006a84:	610b      	str	r3, [r1, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 8006a86:	69bb      	ldr	r3, [r7, #24]
 8006a88:	015a      	lsls	r2, r3, #5
 8006a8a:	69fb      	ldr	r3, [r7, #28]
 8006a8c:	4413      	add	r3, r2
 8006a8e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006a92:	691a      	ldr	r2, [r3, #16]
 8006a94:	69bb      	ldr	r3, [r7, #24]
 8006a96:	0159      	lsls	r1, r3, #5
 8006a98:	69fb      	ldr	r3, [r7, #28]
 8006a9a:	440b      	add	r3, r1
 8006a9c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006aa0:	4619      	mov	r1, r3
 8006aa2:	4b83      	ldr	r3, [pc, #524]	; (8006cb0 <USB_EPStartXfer+0x2dc>)
 8006aa4:	4013      	ands	r3, r2
 8006aa6:	610b      	str	r3, [r1, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT &
 8006aa8:	69bb      	ldr	r3, [r7, #24]
 8006aaa:	015a      	lsls	r2, r3, #5
 8006aac:	69fb      	ldr	r3, [r7, #28]
 8006aae:	4413      	add	r3, r2
 8006ab0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006ab4:	691a      	ldr	r2, [r3, #16]
                                     (((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket) << 19));
 8006ab6:	68bb      	ldr	r3, [r7, #8]
 8006ab8:	6999      	ldr	r1, [r3, #24]
 8006aba:	68bb      	ldr	r3, [r7, #8]
 8006abc:	68db      	ldr	r3, [r3, #12]
 8006abe:	440b      	add	r3, r1
 8006ac0:	1e59      	subs	r1, r3, #1
 8006ac2:	68bb      	ldr	r3, [r7, #8]
 8006ac4:	68db      	ldr	r3, [r3, #12]
 8006ac6:	fbb1 f3f3 	udiv	r3, r1, r3
 8006aca:	04d9      	lsls	r1, r3, #19
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT &
 8006acc:	4b7a      	ldr	r3, [pc, #488]	; (8006cb8 <USB_EPStartXfer+0x2e4>)
 8006ace:	400b      	ands	r3, r1
 8006ad0:	69b9      	ldr	r1, [r7, #24]
 8006ad2:	0148      	lsls	r0, r1, #5
 8006ad4:	69f9      	ldr	r1, [r7, #28]
 8006ad6:	4401      	add	r1, r0
 8006ad8:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 8006adc:	4313      	orrs	r3, r2
 8006ade:	610b      	str	r3, [r1, #16]

      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_XFRSIZ & ep->xfer_len);
 8006ae0:	69bb      	ldr	r3, [r7, #24]
 8006ae2:	015a      	lsls	r2, r3, #5
 8006ae4:	69fb      	ldr	r3, [r7, #28]
 8006ae6:	4413      	add	r3, r2
 8006ae8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006aec:	691a      	ldr	r2, [r3, #16]
 8006aee:	68bb      	ldr	r3, [r7, #8]
 8006af0:	699b      	ldr	r3, [r3, #24]
 8006af2:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8006af6:	69b9      	ldr	r1, [r7, #24]
 8006af8:	0148      	lsls	r0, r1, #5
 8006afa:	69f9      	ldr	r1, [r7, #28]
 8006afc:	4401      	add	r1, r0
 8006afe:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 8006b02:	4313      	orrs	r3, r2
 8006b04:	610b      	str	r3, [r1, #16]

      if (ep->type == EP_TYPE_ISOC)
 8006b06:	68bb      	ldr	r3, [r7, #8]
 8006b08:	791b      	ldrb	r3, [r3, #4]
 8006b0a:	2b01      	cmp	r3, #1
 8006b0c:	d11f      	bne.n	8006b4e <USB_EPStartXfer+0x17a>
      {
        USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_MULCNT);
 8006b0e:	69bb      	ldr	r3, [r7, #24]
 8006b10:	015a      	lsls	r2, r3, #5
 8006b12:	69fb      	ldr	r3, [r7, #28]
 8006b14:	4413      	add	r3, r2
 8006b16:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006b1a:	691b      	ldr	r3, [r3, #16]
 8006b1c:	69ba      	ldr	r2, [r7, #24]
 8006b1e:	0151      	lsls	r1, r2, #5
 8006b20:	69fa      	ldr	r2, [r7, #28]
 8006b22:	440a      	add	r2, r1
 8006b24:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8006b28:	f023 43c0 	bic.w	r3, r3, #1610612736	; 0x60000000
 8006b2c:	6113      	str	r3, [r2, #16]
        USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_MULCNT & (1U << 29));
 8006b2e:	69bb      	ldr	r3, [r7, #24]
 8006b30:	015a      	lsls	r2, r3, #5
 8006b32:	69fb      	ldr	r3, [r7, #28]
 8006b34:	4413      	add	r3, r2
 8006b36:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006b3a:	691b      	ldr	r3, [r3, #16]
 8006b3c:	69ba      	ldr	r2, [r7, #24]
 8006b3e:	0151      	lsls	r1, r2, #5
 8006b40:	69fa      	ldr	r2, [r7, #28]
 8006b42:	440a      	add	r2, r1
 8006b44:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8006b48:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8006b4c:	6113      	str	r3, [r2, #16]
      }
    }

    if (dma == 1U)
 8006b4e:	79fb      	ldrb	r3, [r7, #7]
 8006b50:	2b01      	cmp	r3, #1
 8006b52:	d14b      	bne.n	8006bec <USB_EPStartXfer+0x218>
    {
      if ((uint32_t)ep->dma_addr != 0U)
 8006b54:	68bb      	ldr	r3, [r7, #8]
 8006b56:	695b      	ldr	r3, [r3, #20]
 8006b58:	2b00      	cmp	r3, #0
 8006b5a:	d009      	beq.n	8006b70 <USB_EPStartXfer+0x19c>
      {
        USBx_INEP(epnum)->DIEPDMA = (uint32_t)(ep->dma_addr);
 8006b5c:	69bb      	ldr	r3, [r7, #24]
 8006b5e:	015a      	lsls	r2, r3, #5
 8006b60:	69fb      	ldr	r3, [r7, #28]
 8006b62:	4413      	add	r3, r2
 8006b64:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006b68:	461a      	mov	r2, r3
 8006b6a:	68bb      	ldr	r3, [r7, #8]
 8006b6c:	695b      	ldr	r3, [r3, #20]
 8006b6e:	6153      	str	r3, [r2, #20]
      }

      if (ep->type == EP_TYPE_ISOC)
 8006b70:	68bb      	ldr	r3, [r7, #8]
 8006b72:	791b      	ldrb	r3, [r3, #4]
 8006b74:	2b01      	cmp	r3, #1
 8006b76:	d128      	bne.n	8006bca <USB_EPStartXfer+0x1f6>
      {
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 8006b78:	69fb      	ldr	r3, [r7, #28]
 8006b7a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006b7e:	689b      	ldr	r3, [r3, #8]
 8006b80:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006b84:	2b00      	cmp	r3, #0
 8006b86:	d110      	bne.n	8006baa <USB_EPStartXfer+0x1d6>
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 8006b88:	69bb      	ldr	r3, [r7, #24]
 8006b8a:	015a      	lsls	r2, r3, #5
 8006b8c:	69fb      	ldr	r3, [r7, #28]
 8006b8e:	4413      	add	r3, r2
 8006b90:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006b94:	681b      	ldr	r3, [r3, #0]
 8006b96:	69ba      	ldr	r2, [r7, #24]
 8006b98:	0151      	lsls	r1, r2, #5
 8006b9a:	69fa      	ldr	r2, [r7, #28]
 8006b9c:	440a      	add	r2, r1
 8006b9e:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8006ba2:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8006ba6:	6013      	str	r3, [r2, #0]
 8006ba8:	e00f      	b.n	8006bca <USB_EPStartXfer+0x1f6>
        }
        else
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 8006baa:	69bb      	ldr	r3, [r7, #24]
 8006bac:	015a      	lsls	r2, r3, #5
 8006bae:	69fb      	ldr	r3, [r7, #28]
 8006bb0:	4413      	add	r3, r2
 8006bb2:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006bb6:	681b      	ldr	r3, [r3, #0]
 8006bb8:	69ba      	ldr	r2, [r7, #24]
 8006bba:	0151      	lsls	r1, r2, #5
 8006bbc:	69fa      	ldr	r2, [r7, #28]
 8006bbe:	440a      	add	r2, r1
 8006bc0:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8006bc4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8006bc8:	6013      	str	r3, [r2, #0]
        }
      }

      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 8006bca:	69bb      	ldr	r3, [r7, #24]
 8006bcc:	015a      	lsls	r2, r3, #5
 8006bce:	69fb      	ldr	r3, [r7, #28]
 8006bd0:	4413      	add	r3, r2
 8006bd2:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006bd6:	681b      	ldr	r3, [r3, #0]
 8006bd8:	69ba      	ldr	r2, [r7, #24]
 8006bda:	0151      	lsls	r1, r2, #5
 8006bdc:	69fa      	ldr	r2, [r7, #28]
 8006bde:	440a      	add	r2, r1
 8006be0:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8006be4:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8006be8:	6013      	str	r3, [r2, #0]
 8006bea:	e137      	b.n	8006e5c <USB_EPStartXfer+0x488>
    }
    else
    {
      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 8006bec:	69bb      	ldr	r3, [r7, #24]
 8006bee:	015a      	lsls	r2, r3, #5
 8006bf0:	69fb      	ldr	r3, [r7, #28]
 8006bf2:	4413      	add	r3, r2
 8006bf4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006bf8:	681b      	ldr	r3, [r3, #0]
 8006bfa:	69ba      	ldr	r2, [r7, #24]
 8006bfc:	0151      	lsls	r1, r2, #5
 8006bfe:	69fa      	ldr	r2, [r7, #28]
 8006c00:	440a      	add	r2, r1
 8006c02:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8006c06:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8006c0a:	6013      	str	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 8006c0c:	68bb      	ldr	r3, [r7, #8]
 8006c0e:	791b      	ldrb	r3, [r3, #4]
 8006c10:	2b01      	cmp	r3, #1
 8006c12:	d015      	beq.n	8006c40 <USB_EPStartXfer+0x26c>
      {
        /* Enable the Tx FIFO Empty Interrupt for this EP */
        if (ep->xfer_len > 0U)
 8006c14:	68bb      	ldr	r3, [r7, #8]
 8006c16:	699b      	ldr	r3, [r3, #24]
 8006c18:	2b00      	cmp	r3, #0
 8006c1a:	f000 811f 	beq.w	8006e5c <USB_EPStartXfer+0x488>
        {
          USBx_DEVICE->DIEPEMPMSK |= 1UL << (ep->num & EP_ADDR_MSK);
 8006c1e:	69fb      	ldr	r3, [r7, #28]
 8006c20:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006c24:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8006c26:	68bb      	ldr	r3, [r7, #8]
 8006c28:	781b      	ldrb	r3, [r3, #0]
 8006c2a:	f003 030f 	and.w	r3, r3, #15
 8006c2e:	2101      	movs	r1, #1
 8006c30:	fa01 f303 	lsl.w	r3, r1, r3
 8006c34:	69f9      	ldr	r1, [r7, #28]
 8006c36:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8006c3a:	4313      	orrs	r3, r2
 8006c3c:	634b      	str	r3, [r1, #52]	; 0x34
 8006c3e:	e10d      	b.n	8006e5c <USB_EPStartXfer+0x488>
        }
      }
      else
      {
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 8006c40:	69fb      	ldr	r3, [r7, #28]
 8006c42:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006c46:	689b      	ldr	r3, [r3, #8]
 8006c48:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006c4c:	2b00      	cmp	r3, #0
 8006c4e:	d110      	bne.n	8006c72 <USB_EPStartXfer+0x29e>
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 8006c50:	69bb      	ldr	r3, [r7, #24]
 8006c52:	015a      	lsls	r2, r3, #5
 8006c54:	69fb      	ldr	r3, [r7, #28]
 8006c56:	4413      	add	r3, r2
 8006c58:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006c5c:	681b      	ldr	r3, [r3, #0]
 8006c5e:	69ba      	ldr	r2, [r7, #24]
 8006c60:	0151      	lsls	r1, r2, #5
 8006c62:	69fa      	ldr	r2, [r7, #28]
 8006c64:	440a      	add	r2, r1
 8006c66:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8006c6a:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8006c6e:	6013      	str	r3, [r2, #0]
 8006c70:	e00f      	b.n	8006c92 <USB_EPStartXfer+0x2be>
        }
        else
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 8006c72:	69bb      	ldr	r3, [r7, #24]
 8006c74:	015a      	lsls	r2, r3, #5
 8006c76:	69fb      	ldr	r3, [r7, #28]
 8006c78:	4413      	add	r3, r2
 8006c7a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006c7e:	681b      	ldr	r3, [r3, #0]
 8006c80:	69ba      	ldr	r2, [r7, #24]
 8006c82:	0151      	lsls	r1, r2, #5
 8006c84:	69fa      	ldr	r2, [r7, #28]
 8006c86:	440a      	add	r2, r1
 8006c88:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8006c8c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8006c90:	6013      	str	r3, [r2, #0]
        }

        (void)USB_WritePacket(USBx, ep->xfer_buff, ep->num, (uint16_t)ep->xfer_len, dma);
 8006c92:	68bb      	ldr	r3, [r7, #8]
 8006c94:	6919      	ldr	r1, [r3, #16]
 8006c96:	68bb      	ldr	r3, [r7, #8]
 8006c98:	781a      	ldrb	r2, [r3, #0]
 8006c9a:	68bb      	ldr	r3, [r7, #8]
 8006c9c:	699b      	ldr	r3, [r3, #24]
 8006c9e:	b298      	uxth	r0, r3
 8006ca0:	79fb      	ldrb	r3, [r7, #7]
 8006ca2:	9300      	str	r3, [sp, #0]
 8006ca4:	4603      	mov	r3, r0
 8006ca6:	68f8      	ldr	r0, [r7, #12]
 8006ca8:	f000 faea 	bl	8007280 <USB_WritePacket>
 8006cac:	e0d6      	b.n	8006e5c <USB_EPStartXfer+0x488>
 8006cae:	bf00      	nop
 8006cb0:	e007ffff 	.word	0xe007ffff
 8006cb4:	fff80000 	.word	0xfff80000
 8006cb8:	1ff80000 	.word	0x1ff80000
  {
    /* Program the transfer size and packet count as follows:
    * pktcnt = N
    * xfersize = N * maxpacket
    */
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_XFRSIZ);
 8006cbc:	69bb      	ldr	r3, [r7, #24]
 8006cbe:	015a      	lsls	r2, r3, #5
 8006cc0:	69fb      	ldr	r3, [r7, #28]
 8006cc2:	4413      	add	r3, r2
 8006cc4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006cc8:	691a      	ldr	r2, [r3, #16]
 8006cca:	69bb      	ldr	r3, [r7, #24]
 8006ccc:	0159      	lsls	r1, r3, #5
 8006cce:	69fb      	ldr	r3, [r7, #28]
 8006cd0:	440b      	add	r3, r1
 8006cd2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006cd6:	4619      	mov	r1, r3
 8006cd8:	4b63      	ldr	r3, [pc, #396]	; (8006e68 <USB_EPStartXfer+0x494>)
 8006cda:	4013      	ands	r3, r2
 8006cdc:	610b      	str	r3, [r1, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_PKTCNT);
 8006cde:	69bb      	ldr	r3, [r7, #24]
 8006ce0:	015a      	lsls	r2, r3, #5
 8006ce2:	69fb      	ldr	r3, [r7, #28]
 8006ce4:	4413      	add	r3, r2
 8006ce6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006cea:	691a      	ldr	r2, [r3, #16]
 8006cec:	69bb      	ldr	r3, [r7, #24]
 8006cee:	0159      	lsls	r1, r3, #5
 8006cf0:	69fb      	ldr	r3, [r7, #28]
 8006cf2:	440b      	add	r3, r1
 8006cf4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006cf8:	4619      	mov	r1, r3
 8006cfa:	4b5c      	ldr	r3, [pc, #368]	; (8006e6c <USB_EPStartXfer+0x498>)
 8006cfc:	4013      	ands	r3, r2
 8006cfe:	610b      	str	r3, [r1, #16]

    if (ep->xfer_len == 0U)
 8006d00:	68bb      	ldr	r3, [r7, #8]
 8006d02:	699b      	ldr	r3, [r3, #24]
 8006d04:	2b00      	cmp	r3, #0
 8006d06:	d123      	bne.n	8006d50 <USB_EPStartXfer+0x37c>
    {
      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & ep->maxpacket);
 8006d08:	69bb      	ldr	r3, [r7, #24]
 8006d0a:	015a      	lsls	r2, r3, #5
 8006d0c:	69fb      	ldr	r3, [r7, #28]
 8006d0e:	4413      	add	r3, r2
 8006d10:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006d14:	691a      	ldr	r2, [r3, #16]
 8006d16:	68bb      	ldr	r3, [r7, #8]
 8006d18:	68db      	ldr	r3, [r3, #12]
 8006d1a:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8006d1e:	69b9      	ldr	r1, [r7, #24]
 8006d20:	0148      	lsls	r0, r1, #5
 8006d22:	69f9      	ldr	r1, [r7, #28]
 8006d24:	4401      	add	r1, r0
 8006d26:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 8006d2a:	4313      	orrs	r3, r2
 8006d2c:	610b      	str	r3, [r1, #16]
      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 8006d2e:	69bb      	ldr	r3, [r7, #24]
 8006d30:	015a      	lsls	r2, r3, #5
 8006d32:	69fb      	ldr	r3, [r7, #28]
 8006d34:	4413      	add	r3, r2
 8006d36:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006d3a:	691b      	ldr	r3, [r3, #16]
 8006d3c:	69ba      	ldr	r2, [r7, #24]
 8006d3e:	0151      	lsls	r1, r2, #5
 8006d40:	69fa      	ldr	r2, [r7, #28]
 8006d42:	440a      	add	r2, r1
 8006d44:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8006d48:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8006d4c:	6113      	str	r3, [r2, #16]
 8006d4e:	e037      	b.n	8006dc0 <USB_EPStartXfer+0x3ec>
    }
    else
    {
      pktcnt = (uint16_t)((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket);
 8006d50:	68bb      	ldr	r3, [r7, #8]
 8006d52:	699a      	ldr	r2, [r3, #24]
 8006d54:	68bb      	ldr	r3, [r7, #8]
 8006d56:	68db      	ldr	r3, [r3, #12]
 8006d58:	4413      	add	r3, r2
 8006d5a:	1e5a      	subs	r2, r3, #1
 8006d5c:	68bb      	ldr	r3, [r7, #8]
 8006d5e:	68db      	ldr	r3, [r3, #12]
 8006d60:	fbb2 f3f3 	udiv	r3, r2, r3
 8006d64:	82fb      	strh	r3, [r7, #22]
      ep->xfer_size = ep->maxpacket * pktcnt;
 8006d66:	68bb      	ldr	r3, [r7, #8]
 8006d68:	68db      	ldr	r3, [r3, #12]
 8006d6a:	8afa      	ldrh	r2, [r7, #22]
 8006d6c:	fb03 f202 	mul.w	r2, r3, r2
 8006d70:	68bb      	ldr	r3, [r7, #8]
 8006d72:	61da      	str	r2, [r3, #28]

      USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_PKTCNT & ((uint32_t)pktcnt << 19);
 8006d74:	69bb      	ldr	r3, [r7, #24]
 8006d76:	015a      	lsls	r2, r3, #5
 8006d78:	69fb      	ldr	r3, [r7, #28]
 8006d7a:	4413      	add	r3, r2
 8006d7c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006d80:	691a      	ldr	r2, [r3, #16]
 8006d82:	8afb      	ldrh	r3, [r7, #22]
 8006d84:	04d9      	lsls	r1, r3, #19
 8006d86:	4b3a      	ldr	r3, [pc, #232]	; (8006e70 <USB_EPStartXfer+0x49c>)
 8006d88:	400b      	ands	r3, r1
 8006d8a:	69b9      	ldr	r1, [r7, #24]
 8006d8c:	0148      	lsls	r0, r1, #5
 8006d8e:	69f9      	ldr	r1, [r7, #28]
 8006d90:	4401      	add	r1, r0
 8006d92:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 8006d96:	4313      	orrs	r3, r2
 8006d98:	610b      	str	r3, [r1, #16]
      USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_XFRSIZ & ep->xfer_size;
 8006d9a:	69bb      	ldr	r3, [r7, #24]
 8006d9c:	015a      	lsls	r2, r3, #5
 8006d9e:	69fb      	ldr	r3, [r7, #28]
 8006da0:	4413      	add	r3, r2
 8006da2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006da6:	691a      	ldr	r2, [r3, #16]
 8006da8:	68bb      	ldr	r3, [r7, #8]
 8006daa:	69db      	ldr	r3, [r3, #28]
 8006dac:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8006db0:	69b9      	ldr	r1, [r7, #24]
 8006db2:	0148      	lsls	r0, r1, #5
 8006db4:	69f9      	ldr	r1, [r7, #28]
 8006db6:	4401      	add	r1, r0
 8006db8:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 8006dbc:	4313      	orrs	r3, r2
 8006dbe:	610b      	str	r3, [r1, #16]
    }

    if (dma == 1U)
 8006dc0:	79fb      	ldrb	r3, [r7, #7]
 8006dc2:	2b01      	cmp	r3, #1
 8006dc4:	d10d      	bne.n	8006de2 <USB_EPStartXfer+0x40e>
    {
      if ((uint32_t)ep->xfer_buff != 0U)
 8006dc6:	68bb      	ldr	r3, [r7, #8]
 8006dc8:	691b      	ldr	r3, [r3, #16]
 8006dca:	2b00      	cmp	r3, #0
 8006dcc:	d009      	beq.n	8006de2 <USB_EPStartXfer+0x40e>
      {
        USBx_OUTEP(epnum)->DOEPDMA = (uint32_t)(ep->xfer_buff);
 8006dce:	68bb      	ldr	r3, [r7, #8]
 8006dd0:	6919      	ldr	r1, [r3, #16]
 8006dd2:	69bb      	ldr	r3, [r7, #24]
 8006dd4:	015a      	lsls	r2, r3, #5
 8006dd6:	69fb      	ldr	r3, [r7, #28]
 8006dd8:	4413      	add	r3, r2
 8006dda:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006dde:	460a      	mov	r2, r1
 8006de0:	615a      	str	r2, [r3, #20]
      }
    }

    if (ep->type == EP_TYPE_ISOC)
 8006de2:	68bb      	ldr	r3, [r7, #8]
 8006de4:	791b      	ldrb	r3, [r3, #4]
 8006de6:	2b01      	cmp	r3, #1
 8006de8:	d128      	bne.n	8006e3c <USB_EPStartXfer+0x468>
    {
      if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 8006dea:	69fb      	ldr	r3, [r7, #28]
 8006dec:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006df0:	689b      	ldr	r3, [r3, #8]
 8006df2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006df6:	2b00      	cmp	r3, #0
 8006df8:	d110      	bne.n	8006e1c <USB_EPStartXfer+0x448>
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SODDFRM;
 8006dfa:	69bb      	ldr	r3, [r7, #24]
 8006dfc:	015a      	lsls	r2, r3, #5
 8006dfe:	69fb      	ldr	r3, [r7, #28]
 8006e00:	4413      	add	r3, r2
 8006e02:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006e06:	681b      	ldr	r3, [r3, #0]
 8006e08:	69ba      	ldr	r2, [r7, #24]
 8006e0a:	0151      	lsls	r1, r2, #5
 8006e0c:	69fa      	ldr	r2, [r7, #28]
 8006e0e:	440a      	add	r2, r1
 8006e10:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8006e14:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8006e18:	6013      	str	r3, [r2, #0]
 8006e1a:	e00f      	b.n	8006e3c <USB_EPStartXfer+0x468>
      }
      else
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM;
 8006e1c:	69bb      	ldr	r3, [r7, #24]
 8006e1e:	015a      	lsls	r2, r3, #5
 8006e20:	69fb      	ldr	r3, [r7, #28]
 8006e22:	4413      	add	r3, r2
 8006e24:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006e28:	681b      	ldr	r3, [r3, #0]
 8006e2a:	69ba      	ldr	r2, [r7, #24]
 8006e2c:	0151      	lsls	r1, r2, #5
 8006e2e:	69fa      	ldr	r2, [r7, #28]
 8006e30:	440a      	add	r2, r1
 8006e32:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8006e36:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8006e3a:	6013      	str	r3, [r2, #0]
      }
    }
    /* EP enable */
    USBx_OUTEP(epnum)->DOEPCTL |= (USB_OTG_DOEPCTL_CNAK | USB_OTG_DOEPCTL_EPENA);
 8006e3c:	69bb      	ldr	r3, [r7, #24]
 8006e3e:	015a      	lsls	r2, r3, #5
 8006e40:	69fb      	ldr	r3, [r7, #28]
 8006e42:	4413      	add	r3, r2
 8006e44:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006e48:	681b      	ldr	r3, [r3, #0]
 8006e4a:	69ba      	ldr	r2, [r7, #24]
 8006e4c:	0151      	lsls	r1, r2, #5
 8006e4e:	69fa      	ldr	r2, [r7, #28]
 8006e50:	440a      	add	r2, r1
 8006e52:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8006e56:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8006e5a:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 8006e5c:	2300      	movs	r3, #0
}
 8006e5e:	4618      	mov	r0, r3
 8006e60:	3720      	adds	r7, #32
 8006e62:	46bd      	mov	sp, r7
 8006e64:	bd80      	pop	{r7, pc}
 8006e66:	bf00      	nop
 8006e68:	fff80000 	.word	0xfff80000
 8006e6c:	e007ffff 	.word	0xe007ffff
 8006e70:	1ff80000 	.word	0x1ff80000

08006e74 <USB_EP0StartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0StartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep, uint8_t dma)
{
 8006e74:	b480      	push	{r7}
 8006e76:	b087      	sub	sp, #28
 8006e78:	af00      	add	r7, sp, #0
 8006e7a:	60f8      	str	r0, [r7, #12]
 8006e7c:	60b9      	str	r1, [r7, #8]
 8006e7e:	4613      	mov	r3, r2
 8006e80:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006e82:	68fb      	ldr	r3, [r7, #12]
 8006e84:	617b      	str	r3, [r7, #20]
  uint32_t epnum = (uint32_t)ep->num;
 8006e86:	68bb      	ldr	r3, [r7, #8]
 8006e88:	781b      	ldrb	r3, [r3, #0]
 8006e8a:	613b      	str	r3, [r7, #16]

  /* IN endpoint */
  if (ep->is_in == 1U)
 8006e8c:	68bb      	ldr	r3, [r7, #8]
 8006e8e:	785b      	ldrb	r3, [r3, #1]
 8006e90:	2b01      	cmp	r3, #1
 8006e92:	f040 80ce 	bne.w	8007032 <USB_EP0StartXfer+0x1be>
  {
    /* Zero Length Packet? */
    if (ep->xfer_len == 0U)
 8006e96:	68bb      	ldr	r3, [r7, #8]
 8006e98:	699b      	ldr	r3, [r3, #24]
 8006e9a:	2b00      	cmp	r3, #0
 8006e9c:	d132      	bne.n	8006f04 <USB_EP0StartXfer+0x90>
    {
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 8006e9e:	693b      	ldr	r3, [r7, #16]
 8006ea0:	015a      	lsls	r2, r3, #5
 8006ea2:	697b      	ldr	r3, [r7, #20]
 8006ea4:	4413      	add	r3, r2
 8006ea6:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006eaa:	691a      	ldr	r2, [r3, #16]
 8006eac:	693b      	ldr	r3, [r7, #16]
 8006eae:	0159      	lsls	r1, r3, #5
 8006eb0:	697b      	ldr	r3, [r7, #20]
 8006eb2:	440b      	add	r3, r1
 8006eb4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006eb8:	4619      	mov	r1, r3
 8006eba:	4b9a      	ldr	r3, [pc, #616]	; (8007124 <USB_EP0StartXfer+0x2b0>)
 8006ebc:	4013      	ands	r3, r2
 8006ebe:	610b      	str	r3, [r1, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 8006ec0:	693b      	ldr	r3, [r7, #16]
 8006ec2:	015a      	lsls	r2, r3, #5
 8006ec4:	697b      	ldr	r3, [r7, #20]
 8006ec6:	4413      	add	r3, r2
 8006ec8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006ecc:	691b      	ldr	r3, [r3, #16]
 8006ece:	693a      	ldr	r2, [r7, #16]
 8006ed0:	0151      	lsls	r1, r2, #5
 8006ed2:	697a      	ldr	r2, [r7, #20]
 8006ed4:	440a      	add	r2, r1
 8006ed6:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8006eda:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8006ede:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 8006ee0:	693b      	ldr	r3, [r7, #16]
 8006ee2:	015a      	lsls	r2, r3, #5
 8006ee4:	697b      	ldr	r3, [r7, #20]
 8006ee6:	4413      	add	r3, r2
 8006ee8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006eec:	691a      	ldr	r2, [r3, #16]
 8006eee:	693b      	ldr	r3, [r7, #16]
 8006ef0:	0159      	lsls	r1, r3, #5
 8006ef2:	697b      	ldr	r3, [r7, #20]
 8006ef4:	440b      	add	r3, r1
 8006ef6:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006efa:	4619      	mov	r1, r3
 8006efc:	4b8a      	ldr	r3, [pc, #552]	; (8007128 <USB_EP0StartXfer+0x2b4>)
 8006efe:	4013      	ands	r3, r2
 8006f00:	610b      	str	r3, [r1, #16]
 8006f02:	e04e      	b.n	8006fa2 <USB_EP0StartXfer+0x12e>
      /* Program the transfer size and packet count
      * as follows: xfersize = N * maxpacket +
      * short_packet pktcnt = N + (short_packet
      * exist ? 1 : 0)
      */
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 8006f04:	693b      	ldr	r3, [r7, #16]
 8006f06:	015a      	lsls	r2, r3, #5
 8006f08:	697b      	ldr	r3, [r7, #20]
 8006f0a:	4413      	add	r3, r2
 8006f0c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006f10:	691a      	ldr	r2, [r3, #16]
 8006f12:	693b      	ldr	r3, [r7, #16]
 8006f14:	0159      	lsls	r1, r3, #5
 8006f16:	697b      	ldr	r3, [r7, #20]
 8006f18:	440b      	add	r3, r1
 8006f1a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006f1e:	4619      	mov	r1, r3
 8006f20:	4b81      	ldr	r3, [pc, #516]	; (8007128 <USB_EP0StartXfer+0x2b4>)
 8006f22:	4013      	ands	r3, r2
 8006f24:	610b      	str	r3, [r1, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 8006f26:	693b      	ldr	r3, [r7, #16]
 8006f28:	015a      	lsls	r2, r3, #5
 8006f2a:	697b      	ldr	r3, [r7, #20]
 8006f2c:	4413      	add	r3, r2
 8006f2e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006f32:	691a      	ldr	r2, [r3, #16]
 8006f34:	693b      	ldr	r3, [r7, #16]
 8006f36:	0159      	lsls	r1, r3, #5
 8006f38:	697b      	ldr	r3, [r7, #20]
 8006f3a:	440b      	add	r3, r1
 8006f3c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006f40:	4619      	mov	r1, r3
 8006f42:	4b78      	ldr	r3, [pc, #480]	; (8007124 <USB_EP0StartXfer+0x2b0>)
 8006f44:	4013      	ands	r3, r2
 8006f46:	610b      	str	r3, [r1, #16]

      if (ep->xfer_len > ep->maxpacket)
 8006f48:	68bb      	ldr	r3, [r7, #8]
 8006f4a:	699a      	ldr	r2, [r3, #24]
 8006f4c:	68bb      	ldr	r3, [r7, #8]
 8006f4e:	68db      	ldr	r3, [r3, #12]
 8006f50:	429a      	cmp	r2, r3
 8006f52:	d903      	bls.n	8006f5c <USB_EP0StartXfer+0xe8>
      {
        ep->xfer_len = ep->maxpacket;
 8006f54:	68bb      	ldr	r3, [r7, #8]
 8006f56:	68da      	ldr	r2, [r3, #12]
 8006f58:	68bb      	ldr	r3, [r7, #8]
 8006f5a:	619a      	str	r2, [r3, #24]
      }
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 8006f5c:	693b      	ldr	r3, [r7, #16]
 8006f5e:	015a      	lsls	r2, r3, #5
 8006f60:	697b      	ldr	r3, [r7, #20]
 8006f62:	4413      	add	r3, r2
 8006f64:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006f68:	691b      	ldr	r3, [r3, #16]
 8006f6a:	693a      	ldr	r2, [r7, #16]
 8006f6c:	0151      	lsls	r1, r2, #5
 8006f6e:	697a      	ldr	r2, [r7, #20]
 8006f70:	440a      	add	r2, r1
 8006f72:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8006f76:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8006f7a:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_XFRSIZ & ep->xfer_len);
 8006f7c:	693b      	ldr	r3, [r7, #16]
 8006f7e:	015a      	lsls	r2, r3, #5
 8006f80:	697b      	ldr	r3, [r7, #20]
 8006f82:	4413      	add	r3, r2
 8006f84:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006f88:	691a      	ldr	r2, [r3, #16]
 8006f8a:	68bb      	ldr	r3, [r7, #8]
 8006f8c:	699b      	ldr	r3, [r3, #24]
 8006f8e:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8006f92:	6939      	ldr	r1, [r7, #16]
 8006f94:	0148      	lsls	r0, r1, #5
 8006f96:	6979      	ldr	r1, [r7, #20]
 8006f98:	4401      	add	r1, r0
 8006f9a:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 8006f9e:	4313      	orrs	r3, r2
 8006fa0:	610b      	str	r3, [r1, #16]
    }

    if (dma == 1U)
 8006fa2:	79fb      	ldrb	r3, [r7, #7]
 8006fa4:	2b01      	cmp	r3, #1
 8006fa6:	d11e      	bne.n	8006fe6 <USB_EP0StartXfer+0x172>
    {
      if ((uint32_t)ep->dma_addr != 0U)
 8006fa8:	68bb      	ldr	r3, [r7, #8]
 8006faa:	695b      	ldr	r3, [r3, #20]
 8006fac:	2b00      	cmp	r3, #0
 8006fae:	d009      	beq.n	8006fc4 <USB_EP0StartXfer+0x150>
      {
        USBx_INEP(epnum)->DIEPDMA = (uint32_t)(ep->dma_addr);
 8006fb0:	693b      	ldr	r3, [r7, #16]
 8006fb2:	015a      	lsls	r2, r3, #5
 8006fb4:	697b      	ldr	r3, [r7, #20]
 8006fb6:	4413      	add	r3, r2
 8006fb8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006fbc:	461a      	mov	r2, r3
 8006fbe:	68bb      	ldr	r3, [r7, #8]
 8006fc0:	695b      	ldr	r3, [r3, #20]
 8006fc2:	6153      	str	r3, [r2, #20]
      }

      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 8006fc4:	693b      	ldr	r3, [r7, #16]
 8006fc6:	015a      	lsls	r2, r3, #5
 8006fc8:	697b      	ldr	r3, [r7, #20]
 8006fca:	4413      	add	r3, r2
 8006fcc:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006fd0:	681b      	ldr	r3, [r3, #0]
 8006fd2:	693a      	ldr	r2, [r7, #16]
 8006fd4:	0151      	lsls	r1, r2, #5
 8006fd6:	697a      	ldr	r2, [r7, #20]
 8006fd8:	440a      	add	r2, r1
 8006fda:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8006fde:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8006fe2:	6013      	str	r3, [r2, #0]
 8006fe4:	e097      	b.n	8007116 <USB_EP0StartXfer+0x2a2>
    }
    else
    {
      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 8006fe6:	693b      	ldr	r3, [r7, #16]
 8006fe8:	015a      	lsls	r2, r3, #5
 8006fea:	697b      	ldr	r3, [r7, #20]
 8006fec:	4413      	add	r3, r2
 8006fee:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006ff2:	681b      	ldr	r3, [r3, #0]
 8006ff4:	693a      	ldr	r2, [r7, #16]
 8006ff6:	0151      	lsls	r1, r2, #5
 8006ff8:	697a      	ldr	r2, [r7, #20]
 8006ffa:	440a      	add	r2, r1
 8006ffc:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8007000:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8007004:	6013      	str	r3, [r2, #0]

      /* Enable the Tx FIFO Empty Interrupt for this EP */
      if (ep->xfer_len > 0U)
 8007006:	68bb      	ldr	r3, [r7, #8]
 8007008:	699b      	ldr	r3, [r3, #24]
 800700a:	2b00      	cmp	r3, #0
 800700c:	f000 8083 	beq.w	8007116 <USB_EP0StartXfer+0x2a2>
      {
        USBx_DEVICE->DIEPEMPMSK |= 1UL << (ep->num & EP_ADDR_MSK);
 8007010:	697b      	ldr	r3, [r7, #20]
 8007012:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8007016:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8007018:	68bb      	ldr	r3, [r7, #8]
 800701a:	781b      	ldrb	r3, [r3, #0]
 800701c:	f003 030f 	and.w	r3, r3, #15
 8007020:	2101      	movs	r1, #1
 8007022:	fa01 f303 	lsl.w	r3, r1, r3
 8007026:	6979      	ldr	r1, [r7, #20]
 8007028:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800702c:	4313      	orrs	r3, r2
 800702e:	634b      	str	r3, [r1, #52]	; 0x34
 8007030:	e071      	b.n	8007116 <USB_EP0StartXfer+0x2a2>
  {
    /* Program the transfer size and packet count as follows:
    * pktcnt = N
    * xfersize = N * maxpacket
    */
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_XFRSIZ);
 8007032:	693b      	ldr	r3, [r7, #16]
 8007034:	015a      	lsls	r2, r3, #5
 8007036:	697b      	ldr	r3, [r7, #20]
 8007038:	4413      	add	r3, r2
 800703a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800703e:	691a      	ldr	r2, [r3, #16]
 8007040:	693b      	ldr	r3, [r7, #16]
 8007042:	0159      	lsls	r1, r3, #5
 8007044:	697b      	ldr	r3, [r7, #20]
 8007046:	440b      	add	r3, r1
 8007048:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800704c:	4619      	mov	r1, r3
 800704e:	4b36      	ldr	r3, [pc, #216]	; (8007128 <USB_EP0StartXfer+0x2b4>)
 8007050:	4013      	ands	r3, r2
 8007052:	610b      	str	r3, [r1, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_PKTCNT);
 8007054:	693b      	ldr	r3, [r7, #16]
 8007056:	015a      	lsls	r2, r3, #5
 8007058:	697b      	ldr	r3, [r7, #20]
 800705a:	4413      	add	r3, r2
 800705c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007060:	691a      	ldr	r2, [r3, #16]
 8007062:	693b      	ldr	r3, [r7, #16]
 8007064:	0159      	lsls	r1, r3, #5
 8007066:	697b      	ldr	r3, [r7, #20]
 8007068:	440b      	add	r3, r1
 800706a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800706e:	4619      	mov	r1, r3
 8007070:	4b2c      	ldr	r3, [pc, #176]	; (8007124 <USB_EP0StartXfer+0x2b0>)
 8007072:	4013      	ands	r3, r2
 8007074:	610b      	str	r3, [r1, #16]

    if (ep->xfer_len > 0U)
 8007076:	68bb      	ldr	r3, [r7, #8]
 8007078:	699b      	ldr	r3, [r3, #24]
 800707a:	2b00      	cmp	r3, #0
 800707c:	d003      	beq.n	8007086 <USB_EP0StartXfer+0x212>
    {
      ep->xfer_len = ep->maxpacket;
 800707e:	68bb      	ldr	r3, [r7, #8]
 8007080:	68da      	ldr	r2, [r3, #12]
 8007082:	68bb      	ldr	r3, [r7, #8]
 8007084:	619a      	str	r2, [r3, #24]
    }

    /* Store transfer size, for EP0 this is equal to endpoint max packet size */
    ep->xfer_size = ep->maxpacket;
 8007086:	68bb      	ldr	r3, [r7, #8]
 8007088:	68da      	ldr	r2, [r3, #12]
 800708a:	68bb      	ldr	r3, [r7, #8]
 800708c:	61da      	str	r2, [r3, #28]

    USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 800708e:	693b      	ldr	r3, [r7, #16]
 8007090:	015a      	lsls	r2, r3, #5
 8007092:	697b      	ldr	r3, [r7, #20]
 8007094:	4413      	add	r3, r2
 8007096:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800709a:	691b      	ldr	r3, [r3, #16]
 800709c:	693a      	ldr	r2, [r7, #16]
 800709e:	0151      	lsls	r1, r2, #5
 80070a0:	697a      	ldr	r2, [r7, #20]
 80070a2:	440a      	add	r2, r1
 80070a4:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80070a8:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 80070ac:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & ep->xfer_size);
 80070ae:	693b      	ldr	r3, [r7, #16]
 80070b0:	015a      	lsls	r2, r3, #5
 80070b2:	697b      	ldr	r3, [r7, #20]
 80070b4:	4413      	add	r3, r2
 80070b6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80070ba:	691a      	ldr	r2, [r3, #16]
 80070bc:	68bb      	ldr	r3, [r7, #8]
 80070be:	69db      	ldr	r3, [r3, #28]
 80070c0:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80070c4:	6939      	ldr	r1, [r7, #16]
 80070c6:	0148      	lsls	r0, r1, #5
 80070c8:	6979      	ldr	r1, [r7, #20]
 80070ca:	4401      	add	r1, r0
 80070cc:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 80070d0:	4313      	orrs	r3, r2
 80070d2:	610b      	str	r3, [r1, #16]

    if (dma == 1U)
 80070d4:	79fb      	ldrb	r3, [r7, #7]
 80070d6:	2b01      	cmp	r3, #1
 80070d8:	d10d      	bne.n	80070f6 <USB_EP0StartXfer+0x282>
    {
      if ((uint32_t)ep->xfer_buff != 0U)
 80070da:	68bb      	ldr	r3, [r7, #8]
 80070dc:	691b      	ldr	r3, [r3, #16]
 80070de:	2b00      	cmp	r3, #0
 80070e0:	d009      	beq.n	80070f6 <USB_EP0StartXfer+0x282>
      {
        USBx_OUTEP(epnum)->DOEPDMA = (uint32_t)(ep->xfer_buff);
 80070e2:	68bb      	ldr	r3, [r7, #8]
 80070e4:	6919      	ldr	r1, [r3, #16]
 80070e6:	693b      	ldr	r3, [r7, #16]
 80070e8:	015a      	lsls	r2, r3, #5
 80070ea:	697b      	ldr	r3, [r7, #20]
 80070ec:	4413      	add	r3, r2
 80070ee:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80070f2:	460a      	mov	r2, r1
 80070f4:	615a      	str	r2, [r3, #20]
      }
    }

    /* EP enable */
    USBx_OUTEP(epnum)->DOEPCTL |= (USB_OTG_DOEPCTL_CNAK | USB_OTG_DOEPCTL_EPENA);
 80070f6:	693b      	ldr	r3, [r7, #16]
 80070f8:	015a      	lsls	r2, r3, #5
 80070fa:	697b      	ldr	r3, [r7, #20]
 80070fc:	4413      	add	r3, r2
 80070fe:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007102:	681b      	ldr	r3, [r3, #0]
 8007104:	693a      	ldr	r2, [r7, #16]
 8007106:	0151      	lsls	r1, r2, #5
 8007108:	697a      	ldr	r2, [r7, #20]
 800710a:	440a      	add	r2, r1
 800710c:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8007110:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8007114:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 8007116:	2300      	movs	r3, #0
}
 8007118:	4618      	mov	r0, r3
 800711a:	371c      	adds	r7, #28
 800711c:	46bd      	mov	sp, r7
 800711e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007122:	4770      	bx	lr
 8007124:	e007ffff 	.word	0xe007ffff
 8007128:	fff80000 	.word	0xfff80000

0800712c <USB_EPStopXfer>:
   * @param  USBx  usb device instance
   * @param  ep pointer to endpoint structure
   * @retval HAL status
   */
HAL_StatusTypeDef USB_EPStopXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 800712c:	b480      	push	{r7}
 800712e:	b087      	sub	sp, #28
 8007130:	af00      	add	r7, sp, #0
 8007132:	6078      	str	r0, [r7, #4]
 8007134:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 8007136:	2300      	movs	r3, #0
 8007138:	60fb      	str	r3, [r7, #12]
  HAL_StatusTypeDef ret = HAL_OK;
 800713a:	2300      	movs	r3, #0
 800713c:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800713e:	687b      	ldr	r3, [r7, #4]
 8007140:	613b      	str	r3, [r7, #16]

  /* IN endpoint */
  if (ep->is_in == 1U)
 8007142:	683b      	ldr	r3, [r7, #0]
 8007144:	785b      	ldrb	r3, [r3, #1]
 8007146:	2b01      	cmp	r3, #1
 8007148:	d14a      	bne.n	80071e0 <USB_EPStopXfer+0xb4>
  {
    /* EP enable, IN data in FIFO */
    if (((USBx_INEP(ep->num)->DIEPCTL) & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 800714a:	683b      	ldr	r3, [r7, #0]
 800714c:	781b      	ldrb	r3, [r3, #0]
 800714e:	015a      	lsls	r2, r3, #5
 8007150:	693b      	ldr	r3, [r7, #16]
 8007152:	4413      	add	r3, r2
 8007154:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007158:	681b      	ldr	r3, [r3, #0]
 800715a:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800715e:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8007162:	f040 8086 	bne.w	8007272 <USB_EPStopXfer+0x146>
    {
      USBx_INEP(ep->num)->DIEPCTL |= (USB_OTG_DIEPCTL_SNAK);
 8007166:	683b      	ldr	r3, [r7, #0]
 8007168:	781b      	ldrb	r3, [r3, #0]
 800716a:	015a      	lsls	r2, r3, #5
 800716c:	693b      	ldr	r3, [r7, #16]
 800716e:	4413      	add	r3, r2
 8007170:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007174:	681b      	ldr	r3, [r3, #0]
 8007176:	683a      	ldr	r2, [r7, #0]
 8007178:	7812      	ldrb	r2, [r2, #0]
 800717a:	0151      	lsls	r1, r2, #5
 800717c:	693a      	ldr	r2, [r7, #16]
 800717e:	440a      	add	r2, r1
 8007180:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8007184:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8007188:	6013      	str	r3, [r2, #0]
      USBx_INEP(ep->num)->DIEPCTL |= (USB_OTG_DIEPCTL_EPDIS);
 800718a:	683b      	ldr	r3, [r7, #0]
 800718c:	781b      	ldrb	r3, [r3, #0]
 800718e:	015a      	lsls	r2, r3, #5
 8007190:	693b      	ldr	r3, [r7, #16]
 8007192:	4413      	add	r3, r2
 8007194:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007198:	681b      	ldr	r3, [r3, #0]
 800719a:	683a      	ldr	r2, [r7, #0]
 800719c:	7812      	ldrb	r2, [r2, #0]
 800719e:	0151      	lsls	r1, r2, #5
 80071a0:	693a      	ldr	r2, [r7, #16]
 80071a2:	440a      	add	r2, r1
 80071a4:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80071a8:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 80071ac:	6013      	str	r3, [r2, #0]

      do
      {
        count++;
 80071ae:	68fb      	ldr	r3, [r7, #12]
 80071b0:	3301      	adds	r3, #1
 80071b2:	60fb      	str	r3, [r7, #12]

        if (count > 10000U)
 80071b4:	68fb      	ldr	r3, [r7, #12]
 80071b6:	f242 7210 	movw	r2, #10000	; 0x2710
 80071ba:	4293      	cmp	r3, r2
 80071bc:	d902      	bls.n	80071c4 <USB_EPStopXfer+0x98>
        {
          ret = HAL_ERROR;
 80071be:	2301      	movs	r3, #1
 80071c0:	75fb      	strb	r3, [r7, #23]
          break;
 80071c2:	e056      	b.n	8007272 <USB_EPStopXfer+0x146>
        }
      } while (((USBx_INEP(ep->num)->DIEPCTL) & USB_OTG_DIEPCTL_EPENA) ==  USB_OTG_DIEPCTL_EPENA);
 80071c4:	683b      	ldr	r3, [r7, #0]
 80071c6:	781b      	ldrb	r3, [r3, #0]
 80071c8:	015a      	lsls	r2, r3, #5
 80071ca:	693b      	ldr	r3, [r7, #16]
 80071cc:	4413      	add	r3, r2
 80071ce:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80071d2:	681b      	ldr	r3, [r3, #0]
 80071d4:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 80071d8:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80071dc:	d0e7      	beq.n	80071ae <USB_EPStopXfer+0x82>
 80071de:	e048      	b.n	8007272 <USB_EPStopXfer+0x146>
    }
  }
  else /* OUT endpoint */
  {
    if (((USBx_OUTEP(ep->num)->DOEPCTL) & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 80071e0:	683b      	ldr	r3, [r7, #0]
 80071e2:	781b      	ldrb	r3, [r3, #0]
 80071e4:	015a      	lsls	r2, r3, #5
 80071e6:	693b      	ldr	r3, [r7, #16]
 80071e8:	4413      	add	r3, r2
 80071ea:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80071ee:	681b      	ldr	r3, [r3, #0]
 80071f0:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 80071f4:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80071f8:	d13b      	bne.n	8007272 <USB_EPStopXfer+0x146>
    {
      USBx_OUTEP(ep->num)->DOEPCTL |= (USB_OTG_DOEPCTL_SNAK);
 80071fa:	683b      	ldr	r3, [r7, #0]
 80071fc:	781b      	ldrb	r3, [r3, #0]
 80071fe:	015a      	lsls	r2, r3, #5
 8007200:	693b      	ldr	r3, [r7, #16]
 8007202:	4413      	add	r3, r2
 8007204:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007208:	681b      	ldr	r3, [r3, #0]
 800720a:	683a      	ldr	r2, [r7, #0]
 800720c:	7812      	ldrb	r2, [r2, #0]
 800720e:	0151      	lsls	r1, r2, #5
 8007210:	693a      	ldr	r2, [r7, #16]
 8007212:	440a      	add	r2, r1
 8007214:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8007218:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 800721c:	6013      	str	r3, [r2, #0]
      USBx_OUTEP(ep->num)->DOEPCTL |= (USB_OTG_DOEPCTL_EPDIS);
 800721e:	683b      	ldr	r3, [r7, #0]
 8007220:	781b      	ldrb	r3, [r3, #0]
 8007222:	015a      	lsls	r2, r3, #5
 8007224:	693b      	ldr	r3, [r7, #16]
 8007226:	4413      	add	r3, r2
 8007228:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800722c:	681b      	ldr	r3, [r3, #0]
 800722e:	683a      	ldr	r2, [r7, #0]
 8007230:	7812      	ldrb	r2, [r2, #0]
 8007232:	0151      	lsls	r1, r2, #5
 8007234:	693a      	ldr	r2, [r7, #16]
 8007236:	440a      	add	r2, r1
 8007238:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800723c:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8007240:	6013      	str	r3, [r2, #0]

      do
      {
        count++;
 8007242:	68fb      	ldr	r3, [r7, #12]
 8007244:	3301      	adds	r3, #1
 8007246:	60fb      	str	r3, [r7, #12]

        if (count > 10000U)
 8007248:	68fb      	ldr	r3, [r7, #12]
 800724a:	f242 7210 	movw	r2, #10000	; 0x2710
 800724e:	4293      	cmp	r3, r2
 8007250:	d902      	bls.n	8007258 <USB_EPStopXfer+0x12c>
        {
          ret = HAL_ERROR;
 8007252:	2301      	movs	r3, #1
 8007254:	75fb      	strb	r3, [r7, #23]
          break;
 8007256:	e00c      	b.n	8007272 <USB_EPStopXfer+0x146>
        }
      } while (((USBx_OUTEP(ep->num)->DOEPCTL) & USB_OTG_DOEPCTL_EPENA) ==  USB_OTG_DOEPCTL_EPENA);
 8007258:	683b      	ldr	r3, [r7, #0]
 800725a:	781b      	ldrb	r3, [r3, #0]
 800725c:	015a      	lsls	r2, r3, #5
 800725e:	693b      	ldr	r3, [r7, #16]
 8007260:	4413      	add	r3, r2
 8007262:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007266:	681b      	ldr	r3, [r3, #0]
 8007268:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800726c:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8007270:	d0e7      	beq.n	8007242 <USB_EPStopXfer+0x116>
    }
  }

  return ret;
 8007272:	7dfb      	ldrb	r3, [r7, #23]
}
 8007274:	4618      	mov	r0, r3
 8007276:	371c      	adds	r7, #28
 8007278:	46bd      	mov	sp, r7
 800727a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800727e:	4770      	bx	lr

08007280 <USB_WritePacket>:
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_WritePacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *src,
                                  uint8_t ch_ep_num, uint16_t len, uint8_t dma)
{
 8007280:	b480      	push	{r7}
 8007282:	b089      	sub	sp, #36	; 0x24
 8007284:	af00      	add	r7, sp, #0
 8007286:	60f8      	str	r0, [r7, #12]
 8007288:	60b9      	str	r1, [r7, #8]
 800728a:	4611      	mov	r1, r2
 800728c:	461a      	mov	r2, r3
 800728e:	460b      	mov	r3, r1
 8007290:	71fb      	strb	r3, [r7, #7]
 8007292:	4613      	mov	r3, r2
 8007294:	80bb      	strh	r3, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007296:	68fb      	ldr	r3, [r7, #12]
 8007298:	617b      	str	r3, [r7, #20]
  uint8_t *pSrc = src;
 800729a:	68bb      	ldr	r3, [r7, #8]
 800729c:	61fb      	str	r3, [r7, #28]
  uint32_t count32b;
  uint32_t i;

  if (dma == 0U)
 800729e:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 80072a2:	2b00      	cmp	r3, #0
 80072a4:	d123      	bne.n	80072ee <USB_WritePacket+0x6e>
  {
    count32b = ((uint32_t)len + 3U) / 4U;
 80072a6:	88bb      	ldrh	r3, [r7, #4]
 80072a8:	3303      	adds	r3, #3
 80072aa:	089b      	lsrs	r3, r3, #2
 80072ac:	613b      	str	r3, [r7, #16]
    for (i = 0U; i < count32b; i++)
 80072ae:	2300      	movs	r3, #0
 80072b0:	61bb      	str	r3, [r7, #24]
 80072b2:	e018      	b.n	80072e6 <USB_WritePacket+0x66>
    {
      USBx_DFIFO((uint32_t)ch_ep_num) = __UNALIGNED_UINT32_READ(pSrc);
 80072b4:	79fb      	ldrb	r3, [r7, #7]
 80072b6:	031a      	lsls	r2, r3, #12
 80072b8:	697b      	ldr	r3, [r7, #20]
 80072ba:	4413      	add	r3, r2
 80072bc:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80072c0:	461a      	mov	r2, r3
 80072c2:	69fb      	ldr	r3, [r7, #28]
 80072c4:	681b      	ldr	r3, [r3, #0]
 80072c6:	6013      	str	r3, [r2, #0]
      pSrc++;
 80072c8:	69fb      	ldr	r3, [r7, #28]
 80072ca:	3301      	adds	r3, #1
 80072cc:	61fb      	str	r3, [r7, #28]
      pSrc++;
 80072ce:	69fb      	ldr	r3, [r7, #28]
 80072d0:	3301      	adds	r3, #1
 80072d2:	61fb      	str	r3, [r7, #28]
      pSrc++;
 80072d4:	69fb      	ldr	r3, [r7, #28]
 80072d6:	3301      	adds	r3, #1
 80072d8:	61fb      	str	r3, [r7, #28]
      pSrc++;
 80072da:	69fb      	ldr	r3, [r7, #28]
 80072dc:	3301      	adds	r3, #1
 80072de:	61fb      	str	r3, [r7, #28]
    for (i = 0U; i < count32b; i++)
 80072e0:	69bb      	ldr	r3, [r7, #24]
 80072e2:	3301      	adds	r3, #1
 80072e4:	61bb      	str	r3, [r7, #24]
 80072e6:	69ba      	ldr	r2, [r7, #24]
 80072e8:	693b      	ldr	r3, [r7, #16]
 80072ea:	429a      	cmp	r2, r3
 80072ec:	d3e2      	bcc.n	80072b4 <USB_WritePacket+0x34>
    }
  }

  return HAL_OK;
 80072ee:	2300      	movs	r3, #0
}
 80072f0:	4618      	mov	r0, r3
 80072f2:	3724      	adds	r7, #36	; 0x24
 80072f4:	46bd      	mov	sp, r7
 80072f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80072fa:	4770      	bx	lr

080072fc <USB_ReadPacket>:
  * @param  dest  source pointer
  * @param  len  Number of bytes to read
  * @retval pointer to destination buffer
  */
void *USB_ReadPacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *dest, uint16_t len)
{
 80072fc:	b480      	push	{r7}
 80072fe:	b08b      	sub	sp, #44	; 0x2c
 8007300:	af00      	add	r7, sp, #0
 8007302:	60f8      	str	r0, [r7, #12]
 8007304:	60b9      	str	r1, [r7, #8]
 8007306:	4613      	mov	r3, r2
 8007308:	80fb      	strh	r3, [r7, #6]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800730a:	68fb      	ldr	r3, [r7, #12]
 800730c:	61bb      	str	r3, [r7, #24]
  uint8_t *pDest = dest;
 800730e:	68bb      	ldr	r3, [r7, #8]
 8007310:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t pData;
  uint32_t i;
  uint32_t count32b = (uint32_t)len >> 2U;
 8007312:	88fb      	ldrh	r3, [r7, #6]
 8007314:	089b      	lsrs	r3, r3, #2
 8007316:	b29b      	uxth	r3, r3
 8007318:	617b      	str	r3, [r7, #20]
  uint16_t remaining_bytes = len % 4U;
 800731a:	88fb      	ldrh	r3, [r7, #6]
 800731c:	f003 0303 	and.w	r3, r3, #3
 8007320:	83fb      	strh	r3, [r7, #30]

  for (i = 0U; i < count32b; i++)
 8007322:	2300      	movs	r3, #0
 8007324:	623b      	str	r3, [r7, #32]
 8007326:	e014      	b.n	8007352 <USB_ReadPacket+0x56>
  {
    __UNALIGNED_UINT32_WRITE(pDest, USBx_DFIFO(0U));
 8007328:	69bb      	ldr	r3, [r7, #24]
 800732a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800732e:	681a      	ldr	r2, [r3, #0]
 8007330:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007332:	601a      	str	r2, [r3, #0]
    pDest++;
 8007334:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007336:	3301      	adds	r3, #1
 8007338:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 800733a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800733c:	3301      	adds	r3, #1
 800733e:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 8007340:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007342:	3301      	adds	r3, #1
 8007344:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 8007346:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007348:	3301      	adds	r3, #1
 800734a:	627b      	str	r3, [r7, #36]	; 0x24
  for (i = 0U; i < count32b; i++)
 800734c:	6a3b      	ldr	r3, [r7, #32]
 800734e:	3301      	adds	r3, #1
 8007350:	623b      	str	r3, [r7, #32]
 8007352:	6a3a      	ldr	r2, [r7, #32]
 8007354:	697b      	ldr	r3, [r7, #20]
 8007356:	429a      	cmp	r2, r3
 8007358:	d3e6      	bcc.n	8007328 <USB_ReadPacket+0x2c>
  }

  /* When Number of data is not word aligned, read the remaining byte */
  if (remaining_bytes != 0U)
 800735a:	8bfb      	ldrh	r3, [r7, #30]
 800735c:	2b00      	cmp	r3, #0
 800735e:	d01e      	beq.n	800739e <USB_ReadPacket+0xa2>
  {
    i = 0U;
 8007360:	2300      	movs	r3, #0
 8007362:	623b      	str	r3, [r7, #32]
    __UNALIGNED_UINT32_WRITE(&pData, USBx_DFIFO(0U));
 8007364:	69bb      	ldr	r3, [r7, #24]
 8007366:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800736a:	461a      	mov	r2, r3
 800736c:	f107 0310 	add.w	r3, r7, #16
 8007370:	6812      	ldr	r2, [r2, #0]
 8007372:	601a      	str	r2, [r3, #0]

    do
    {
      *(uint8_t *)pDest = (uint8_t)(pData >> (8U * (uint8_t)(i)));
 8007374:	693a      	ldr	r2, [r7, #16]
 8007376:	6a3b      	ldr	r3, [r7, #32]
 8007378:	b2db      	uxtb	r3, r3
 800737a:	00db      	lsls	r3, r3, #3
 800737c:	fa22 f303 	lsr.w	r3, r2, r3
 8007380:	b2da      	uxtb	r2, r3
 8007382:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007384:	701a      	strb	r2, [r3, #0]
      i++;
 8007386:	6a3b      	ldr	r3, [r7, #32]
 8007388:	3301      	adds	r3, #1
 800738a:	623b      	str	r3, [r7, #32]
      pDest++;
 800738c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800738e:	3301      	adds	r3, #1
 8007390:	627b      	str	r3, [r7, #36]	; 0x24
      remaining_bytes--;
 8007392:	8bfb      	ldrh	r3, [r7, #30]
 8007394:	3b01      	subs	r3, #1
 8007396:	83fb      	strh	r3, [r7, #30]
    } while (remaining_bytes != 0U);
 8007398:	8bfb      	ldrh	r3, [r7, #30]
 800739a:	2b00      	cmp	r3, #0
 800739c:	d1ea      	bne.n	8007374 <USB_ReadPacket+0x78>
  }

  return ((void *)pDest);
 800739e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 80073a0:	4618      	mov	r0, r3
 80073a2:	372c      	adds	r7, #44	; 0x2c
 80073a4:	46bd      	mov	sp, r7
 80073a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80073aa:	4770      	bx	lr

080073ac <USB_EPSetStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPSetStall(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 80073ac:	b480      	push	{r7}
 80073ae:	b085      	sub	sp, #20
 80073b0:	af00      	add	r7, sp, #0
 80073b2:	6078      	str	r0, [r7, #4]
 80073b4:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80073b6:	687b      	ldr	r3, [r7, #4]
 80073b8:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 80073ba:	683b      	ldr	r3, [r7, #0]
 80073bc:	781b      	ldrb	r3, [r3, #0]
 80073be:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 80073c0:	683b      	ldr	r3, [r7, #0]
 80073c2:	785b      	ldrb	r3, [r3, #1]
 80073c4:	2b01      	cmp	r3, #1
 80073c6:	d12c      	bne.n	8007422 <USB_EPSetStall+0x76>
  {
    if (((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == 0U) && (epnum != 0U))
 80073c8:	68bb      	ldr	r3, [r7, #8]
 80073ca:	015a      	lsls	r2, r3, #5
 80073cc:	68fb      	ldr	r3, [r7, #12]
 80073ce:	4413      	add	r3, r2
 80073d0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80073d4:	681b      	ldr	r3, [r3, #0]
 80073d6:	2b00      	cmp	r3, #0
 80073d8:	db12      	blt.n	8007400 <USB_EPSetStall+0x54>
 80073da:	68bb      	ldr	r3, [r7, #8]
 80073dc:	2b00      	cmp	r3, #0
 80073de:	d00f      	beq.n	8007400 <USB_EPSetStall+0x54>
    {
      USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_EPDIS);
 80073e0:	68bb      	ldr	r3, [r7, #8]
 80073e2:	015a      	lsls	r2, r3, #5
 80073e4:	68fb      	ldr	r3, [r7, #12]
 80073e6:	4413      	add	r3, r2
 80073e8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80073ec:	681b      	ldr	r3, [r3, #0]
 80073ee:	68ba      	ldr	r2, [r7, #8]
 80073f0:	0151      	lsls	r1, r2, #5
 80073f2:	68fa      	ldr	r2, [r7, #12]
 80073f4:	440a      	add	r2, r1
 80073f6:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80073fa:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 80073fe:	6013      	str	r3, [r2, #0]
    }
    USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_STALL;
 8007400:	68bb      	ldr	r3, [r7, #8]
 8007402:	015a      	lsls	r2, r3, #5
 8007404:	68fb      	ldr	r3, [r7, #12]
 8007406:	4413      	add	r3, r2
 8007408:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800740c:	681b      	ldr	r3, [r3, #0]
 800740e:	68ba      	ldr	r2, [r7, #8]
 8007410:	0151      	lsls	r1, r2, #5
 8007412:	68fa      	ldr	r2, [r7, #12]
 8007414:	440a      	add	r2, r1
 8007416:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800741a:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 800741e:	6013      	str	r3, [r2, #0]
 8007420:	e02b      	b.n	800747a <USB_EPSetStall+0xce>
  }
  else
  {
    if (((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == 0U) && (epnum != 0U))
 8007422:	68bb      	ldr	r3, [r7, #8]
 8007424:	015a      	lsls	r2, r3, #5
 8007426:	68fb      	ldr	r3, [r7, #12]
 8007428:	4413      	add	r3, r2
 800742a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800742e:	681b      	ldr	r3, [r3, #0]
 8007430:	2b00      	cmp	r3, #0
 8007432:	db12      	blt.n	800745a <USB_EPSetStall+0xae>
 8007434:	68bb      	ldr	r3, [r7, #8]
 8007436:	2b00      	cmp	r3, #0
 8007438:	d00f      	beq.n	800745a <USB_EPSetStall+0xae>
    {
      USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_EPDIS);
 800743a:	68bb      	ldr	r3, [r7, #8]
 800743c:	015a      	lsls	r2, r3, #5
 800743e:	68fb      	ldr	r3, [r7, #12]
 8007440:	4413      	add	r3, r2
 8007442:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007446:	681b      	ldr	r3, [r3, #0]
 8007448:	68ba      	ldr	r2, [r7, #8]
 800744a:	0151      	lsls	r1, r2, #5
 800744c:	68fa      	ldr	r2, [r7, #12]
 800744e:	440a      	add	r2, r1
 8007450:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8007454:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8007458:	6013      	str	r3, [r2, #0]
    }
    USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_STALL;
 800745a:	68bb      	ldr	r3, [r7, #8]
 800745c:	015a      	lsls	r2, r3, #5
 800745e:	68fb      	ldr	r3, [r7, #12]
 8007460:	4413      	add	r3, r2
 8007462:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007466:	681b      	ldr	r3, [r3, #0]
 8007468:	68ba      	ldr	r2, [r7, #8]
 800746a:	0151      	lsls	r1, r2, #5
 800746c:	68fa      	ldr	r2, [r7, #12]
 800746e:	440a      	add	r2, r1
 8007470:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8007474:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8007478:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 800747a:	2300      	movs	r3, #0
}
 800747c:	4618      	mov	r0, r3
 800747e:	3714      	adds	r7, #20
 8007480:	46bd      	mov	sp, r7
 8007482:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007486:	4770      	bx	lr

08007488 <USB_EPClearStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPClearStall(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8007488:	b480      	push	{r7}
 800748a:	b085      	sub	sp, #20
 800748c:	af00      	add	r7, sp, #0
 800748e:	6078      	str	r0, [r7, #4]
 8007490:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007492:	687b      	ldr	r3, [r7, #4]
 8007494:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8007496:	683b      	ldr	r3, [r7, #0]
 8007498:	781b      	ldrb	r3, [r3, #0]
 800749a:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 800749c:	683b      	ldr	r3, [r7, #0]
 800749e:	785b      	ldrb	r3, [r3, #1]
 80074a0:	2b01      	cmp	r3, #1
 80074a2:	d128      	bne.n	80074f6 <USB_EPClearStall+0x6e>
  {
    USBx_INEP(epnum)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 80074a4:	68bb      	ldr	r3, [r7, #8]
 80074a6:	015a      	lsls	r2, r3, #5
 80074a8:	68fb      	ldr	r3, [r7, #12]
 80074aa:	4413      	add	r3, r2
 80074ac:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80074b0:	681b      	ldr	r3, [r3, #0]
 80074b2:	68ba      	ldr	r2, [r7, #8]
 80074b4:	0151      	lsls	r1, r2, #5
 80074b6:	68fa      	ldr	r2, [r7, #12]
 80074b8:	440a      	add	r2, r1
 80074ba:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80074be:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 80074c2:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 80074c4:	683b      	ldr	r3, [r7, #0]
 80074c6:	791b      	ldrb	r3, [r3, #4]
 80074c8:	2b03      	cmp	r3, #3
 80074ca:	d003      	beq.n	80074d4 <USB_EPClearStall+0x4c>
 80074cc:	683b      	ldr	r3, [r7, #0]
 80074ce:	791b      	ldrb	r3, [r3, #4]
 80074d0:	2b02      	cmp	r3, #2
 80074d2:	d138      	bne.n	8007546 <USB_EPClearStall+0xbe>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 80074d4:	68bb      	ldr	r3, [r7, #8]
 80074d6:	015a      	lsls	r2, r3, #5
 80074d8:	68fb      	ldr	r3, [r7, #12]
 80074da:	4413      	add	r3, r2
 80074dc:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80074e0:	681b      	ldr	r3, [r3, #0]
 80074e2:	68ba      	ldr	r2, [r7, #8]
 80074e4:	0151      	lsls	r1, r2, #5
 80074e6:	68fa      	ldr	r2, [r7, #12]
 80074e8:	440a      	add	r2, r1
 80074ea:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80074ee:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80074f2:	6013      	str	r3, [r2, #0]
 80074f4:	e027      	b.n	8007546 <USB_EPClearStall+0xbe>
    }
  }
  else
  {
    USBx_OUTEP(epnum)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 80074f6:	68bb      	ldr	r3, [r7, #8]
 80074f8:	015a      	lsls	r2, r3, #5
 80074fa:	68fb      	ldr	r3, [r7, #12]
 80074fc:	4413      	add	r3, r2
 80074fe:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007502:	681b      	ldr	r3, [r3, #0]
 8007504:	68ba      	ldr	r2, [r7, #8]
 8007506:	0151      	lsls	r1, r2, #5
 8007508:	68fa      	ldr	r2, [r7, #12]
 800750a:	440a      	add	r2, r1
 800750c:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8007510:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8007514:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 8007516:	683b      	ldr	r3, [r7, #0]
 8007518:	791b      	ldrb	r3, [r3, #4]
 800751a:	2b03      	cmp	r3, #3
 800751c:	d003      	beq.n	8007526 <USB_EPClearStall+0x9e>
 800751e:	683b      	ldr	r3, [r7, #0]
 8007520:	791b      	ldrb	r3, [r3, #4]
 8007522:	2b02      	cmp	r3, #2
 8007524:	d10f      	bne.n	8007546 <USB_EPClearStall+0xbe>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 8007526:	68bb      	ldr	r3, [r7, #8]
 8007528:	015a      	lsls	r2, r3, #5
 800752a:	68fb      	ldr	r3, [r7, #12]
 800752c:	4413      	add	r3, r2
 800752e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007532:	681b      	ldr	r3, [r3, #0]
 8007534:	68ba      	ldr	r2, [r7, #8]
 8007536:	0151      	lsls	r1, r2, #5
 8007538:	68fa      	ldr	r2, [r7, #12]
 800753a:	440a      	add	r2, r1
 800753c:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8007540:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8007544:	6013      	str	r3, [r2, #0]
    }
  }
  return HAL_OK;
 8007546:	2300      	movs	r3, #0
}
 8007548:	4618      	mov	r0, r3
 800754a:	3714      	adds	r7, #20
 800754c:	46bd      	mov	sp, r7
 800754e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007552:	4770      	bx	lr

08007554 <USB_SetDevAddress>:
  * @param  address  new device address to be assigned
  *          This parameter can be a value from 0 to 255
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_SetDevAddress(USB_OTG_GlobalTypeDef *USBx, uint8_t address)
{
 8007554:	b480      	push	{r7}
 8007556:	b085      	sub	sp, #20
 8007558:	af00      	add	r7, sp, #0
 800755a:	6078      	str	r0, [r7, #4]
 800755c:	460b      	mov	r3, r1
 800755e:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007560:	687b      	ldr	r3, [r7, #4]
 8007562:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG &= ~(USB_OTG_DCFG_DAD);
 8007564:	68fb      	ldr	r3, [r7, #12]
 8007566:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800756a:	681b      	ldr	r3, [r3, #0]
 800756c:	68fa      	ldr	r2, [r7, #12]
 800756e:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8007572:	f423 63fe 	bic.w	r3, r3, #2032	; 0x7f0
 8007576:	6013      	str	r3, [r2, #0]
  USBx_DEVICE->DCFG |= ((uint32_t)address << 4) & USB_OTG_DCFG_DAD;
 8007578:	68fb      	ldr	r3, [r7, #12]
 800757a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800757e:	681a      	ldr	r2, [r3, #0]
 8007580:	78fb      	ldrb	r3, [r7, #3]
 8007582:	011b      	lsls	r3, r3, #4
 8007584:	f403 63fe 	and.w	r3, r3, #2032	; 0x7f0
 8007588:	68f9      	ldr	r1, [r7, #12]
 800758a:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800758e:	4313      	orrs	r3, r2
 8007590:	600b      	str	r3, [r1, #0]

  return HAL_OK;
 8007592:	2300      	movs	r3, #0
}
 8007594:	4618      	mov	r0, r3
 8007596:	3714      	adds	r7, #20
 8007598:	46bd      	mov	sp, r7
 800759a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800759e:	4770      	bx	lr

080075a0 <USB_DevConnect>:
  * @brief  USB_DevConnect : Connect the USB device by enabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevConnect(USB_OTG_GlobalTypeDef *USBx)
{
 80075a0:	b480      	push	{r7}
 80075a2:	b085      	sub	sp, #20
 80075a4:	af00      	add	r7, sp, #0
 80075a6:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80075a8:	687b      	ldr	r3, [r7, #4]
 80075aa:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 80075ac:	68fb      	ldr	r3, [r7, #12]
 80075ae:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 80075b2:	681b      	ldr	r3, [r3, #0]
 80075b4:	68fa      	ldr	r2, [r7, #12]
 80075b6:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 80075ba:	f023 0303 	bic.w	r3, r3, #3
 80075be:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_SDIS;
 80075c0:	68fb      	ldr	r3, [r7, #12]
 80075c2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80075c6:	685b      	ldr	r3, [r3, #4]
 80075c8:	68fa      	ldr	r2, [r7, #12]
 80075ca:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80075ce:	f023 0302 	bic.w	r3, r3, #2
 80075d2:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 80075d4:	2300      	movs	r3, #0
}
 80075d6:	4618      	mov	r0, r3
 80075d8:	3714      	adds	r7, #20
 80075da:	46bd      	mov	sp, r7
 80075dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80075e0:	4770      	bx	lr

080075e2 <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect : Disconnect the USB device by disabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevDisconnect(USB_OTG_GlobalTypeDef *USBx)
{
 80075e2:	b480      	push	{r7}
 80075e4:	b085      	sub	sp, #20
 80075e6:	af00      	add	r7, sp, #0
 80075e8:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80075ea:	687b      	ldr	r3, [r7, #4]
 80075ec:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 80075ee:	68fb      	ldr	r3, [r7, #12]
 80075f0:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 80075f4:	681b      	ldr	r3, [r3, #0]
 80075f6:	68fa      	ldr	r2, [r7, #12]
 80075f8:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 80075fc:	f023 0303 	bic.w	r3, r3, #3
 8007600:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 8007602:	68fb      	ldr	r3, [r7, #12]
 8007604:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8007608:	685b      	ldr	r3, [r3, #4]
 800760a:	68fa      	ldr	r2, [r7, #12]
 800760c:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8007610:	f043 0302 	orr.w	r3, r3, #2
 8007614:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 8007616:	2300      	movs	r3, #0
}
 8007618:	4618      	mov	r0, r3
 800761a:	3714      	adds	r7, #20
 800761c:	46bd      	mov	sp, r7
 800761e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007622:	4770      	bx	lr

08007624 <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts: return the global USB interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t  USB_ReadInterrupts(USB_OTG_GlobalTypeDef *USBx)
{
 8007624:	b480      	push	{r7}
 8007626:	b085      	sub	sp, #20
 8007628:	af00      	add	r7, sp, #0
 800762a:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->GINTSTS;
 800762c:	687b      	ldr	r3, [r7, #4]
 800762e:	695b      	ldr	r3, [r3, #20]
 8007630:	60fb      	str	r3, [r7, #12]
  tmpreg &= USBx->GINTMSK;
 8007632:	687b      	ldr	r3, [r7, #4]
 8007634:	699b      	ldr	r3, [r3, #24]
 8007636:	68fa      	ldr	r2, [r7, #12]
 8007638:	4013      	ands	r3, r2
 800763a:	60fb      	str	r3, [r7, #12]

  return tmpreg;
 800763c:	68fb      	ldr	r3, [r7, #12]
}
 800763e:	4618      	mov	r0, r3
 8007640:	3714      	adds	r7, #20
 8007642:	46bd      	mov	sp, r7
 8007644:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007648:	4770      	bx	lr

0800764a <USB_ReadDevAllOutEpInterrupt>:
  * @brief  USB_ReadDevAllOutEpInterrupt: return the USB device OUT endpoints interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t USB_ReadDevAllOutEpInterrupt(USB_OTG_GlobalTypeDef *USBx)
{
 800764a:	b480      	push	{r7}
 800764c:	b085      	sub	sp, #20
 800764e:	af00      	add	r7, sp, #0
 8007650:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007652:	687b      	ldr	r3, [r7, #4]
 8007654:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 8007656:	68fb      	ldr	r3, [r7, #12]
 8007658:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800765c:	699b      	ldr	r3, [r3, #24]
 800765e:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 8007660:	68fb      	ldr	r3, [r7, #12]
 8007662:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8007666:	69db      	ldr	r3, [r3, #28]
 8007668:	68ba      	ldr	r2, [r7, #8]
 800766a:	4013      	ands	r3, r2
 800766c:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xffff0000U) >> 16);
 800766e:	68bb      	ldr	r3, [r7, #8]
 8007670:	0c1b      	lsrs	r3, r3, #16
}
 8007672:	4618      	mov	r0, r3
 8007674:	3714      	adds	r7, #20
 8007676:	46bd      	mov	sp, r7
 8007678:	f85d 7b04 	ldr.w	r7, [sp], #4
 800767c:	4770      	bx	lr

0800767e <USB_ReadDevAllInEpInterrupt>:
  * @brief  USB_ReadDevAllInEpInterrupt: return the USB device IN endpoints interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t USB_ReadDevAllInEpInterrupt(USB_OTG_GlobalTypeDef *USBx)
{
 800767e:	b480      	push	{r7}
 8007680:	b085      	sub	sp, #20
 8007682:	af00      	add	r7, sp, #0
 8007684:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007686:	687b      	ldr	r3, [r7, #4]
 8007688:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 800768a:	68fb      	ldr	r3, [r7, #12]
 800768c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8007690:	699b      	ldr	r3, [r3, #24]
 8007692:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 8007694:	68fb      	ldr	r3, [r7, #12]
 8007696:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800769a:	69db      	ldr	r3, [r3, #28]
 800769c:	68ba      	ldr	r2, [r7, #8]
 800769e:	4013      	ands	r3, r2
 80076a0:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xFFFFU));
 80076a2:	68bb      	ldr	r3, [r7, #8]
 80076a4:	b29b      	uxth	r3, r3
}
 80076a6:	4618      	mov	r0, r3
 80076a8:	3714      	adds	r7, #20
 80076aa:	46bd      	mov	sp, r7
 80076ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80076b0:	4770      	bx	lr

080076b2 <USB_ReadDevOutEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device OUT EP Interrupt register
  */
uint32_t USB_ReadDevOutEPInterrupt(USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 80076b2:	b480      	push	{r7}
 80076b4:	b085      	sub	sp, #20
 80076b6:	af00      	add	r7, sp, #0
 80076b8:	6078      	str	r0, [r7, #4]
 80076ba:	460b      	mov	r3, r1
 80076bc:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80076be:	687b      	ldr	r3, [r7, #4]
 80076c0:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_OUTEP((uint32_t)epnum)->DOEPINT;
 80076c2:	78fb      	ldrb	r3, [r7, #3]
 80076c4:	015a      	lsls	r2, r3, #5
 80076c6:	68fb      	ldr	r3, [r7, #12]
 80076c8:	4413      	add	r3, r2
 80076ca:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80076ce:	689b      	ldr	r3, [r3, #8]
 80076d0:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DOEPMSK;
 80076d2:	68fb      	ldr	r3, [r7, #12]
 80076d4:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80076d8:	695b      	ldr	r3, [r3, #20]
 80076da:	68ba      	ldr	r2, [r7, #8]
 80076dc:	4013      	ands	r3, r2
 80076de:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 80076e0:	68bb      	ldr	r3, [r7, #8]
}
 80076e2:	4618      	mov	r0, r3
 80076e4:	3714      	adds	r7, #20
 80076e6:	46bd      	mov	sp, r7
 80076e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80076ec:	4770      	bx	lr

080076ee <USB_ReadDevInEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device IN EP Interrupt register
  */
uint32_t USB_ReadDevInEPInterrupt(USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 80076ee:	b480      	push	{r7}
 80076f0:	b087      	sub	sp, #28
 80076f2:	af00      	add	r7, sp, #0
 80076f4:	6078      	str	r0, [r7, #4]
 80076f6:	460b      	mov	r3, r1
 80076f8:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80076fa:	687b      	ldr	r3, [r7, #4]
 80076fc:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg;
  uint32_t msk;
  uint32_t emp;

  msk = USBx_DEVICE->DIEPMSK;
 80076fe:	697b      	ldr	r3, [r7, #20]
 8007700:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8007704:	691b      	ldr	r3, [r3, #16]
 8007706:	613b      	str	r3, [r7, #16]
  emp = USBx_DEVICE->DIEPEMPMSK;
 8007708:	697b      	ldr	r3, [r7, #20]
 800770a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800770e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007710:	60fb      	str	r3, [r7, #12]
  msk |= ((emp >> (epnum & EP_ADDR_MSK)) & 0x1U) << 7;
 8007712:	78fb      	ldrb	r3, [r7, #3]
 8007714:	f003 030f 	and.w	r3, r3, #15
 8007718:	68fa      	ldr	r2, [r7, #12]
 800771a:	fa22 f303 	lsr.w	r3, r2, r3
 800771e:	01db      	lsls	r3, r3, #7
 8007720:	b2db      	uxtb	r3, r3
 8007722:	693a      	ldr	r2, [r7, #16]
 8007724:	4313      	orrs	r3, r2
 8007726:	613b      	str	r3, [r7, #16]
  tmpreg = USBx_INEP((uint32_t)epnum)->DIEPINT & msk;
 8007728:	78fb      	ldrb	r3, [r7, #3]
 800772a:	015a      	lsls	r2, r3, #5
 800772c:	697b      	ldr	r3, [r7, #20]
 800772e:	4413      	add	r3, r2
 8007730:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007734:	689b      	ldr	r3, [r3, #8]
 8007736:	693a      	ldr	r2, [r7, #16]
 8007738:	4013      	ands	r3, r2
 800773a:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 800773c:	68bb      	ldr	r3, [r7, #8]
}
 800773e:	4618      	mov	r0, r3
 8007740:	371c      	adds	r7, #28
 8007742:	46bd      	mov	sp, r7
 8007744:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007748:	4770      	bx	lr

0800774a <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(USB_OTG_GlobalTypeDef *USBx)
{
 800774a:	b480      	push	{r7}
 800774c:	b083      	sub	sp, #12
 800774e:	af00      	add	r7, sp, #0
 8007750:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 8007752:	687b      	ldr	r3, [r7, #4]
 8007754:	695b      	ldr	r3, [r3, #20]
 8007756:	f003 0301 	and.w	r3, r3, #1
}
 800775a:	4618      	mov	r0, r3
 800775c:	370c      	adds	r7, #12
 800775e:	46bd      	mov	sp, r7
 8007760:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007764:	4770      	bx	lr
	...

08007768 <USB_ActivateSetup>:
  * @brief  Activate EP0 for Setup transactions
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_ActivateSetup(USB_OTG_GlobalTypeDef *USBx)
{
 8007768:	b480      	push	{r7}
 800776a:	b085      	sub	sp, #20
 800776c:	af00      	add	r7, sp, #0
 800776e:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007770:	687b      	ldr	r3, [r7, #4]
 8007772:	60fb      	str	r3, [r7, #12]

  /* Set the MPS of the IN EP0 to 64 bytes */
  USBx_INEP(0U)->DIEPCTL &= ~USB_OTG_DIEPCTL_MPSIZ;
 8007774:	68fb      	ldr	r3, [r7, #12]
 8007776:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800777a:	681a      	ldr	r2, [r3, #0]
 800777c:	68fb      	ldr	r3, [r7, #12]
 800777e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007782:	4619      	mov	r1, r3
 8007784:	4b09      	ldr	r3, [pc, #36]	; (80077ac <USB_ActivateSetup+0x44>)
 8007786:	4013      	ands	r3, r2
 8007788:	600b      	str	r3, [r1, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_CGINAK;
 800778a:	68fb      	ldr	r3, [r7, #12]
 800778c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8007790:	685b      	ldr	r3, [r3, #4]
 8007792:	68fa      	ldr	r2, [r7, #12]
 8007794:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8007798:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800779c:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 800779e:	2300      	movs	r3, #0
}
 80077a0:	4618      	mov	r0, r3
 80077a2:	3714      	adds	r7, #20
 80077a4:	46bd      	mov	sp, r7
 80077a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80077aa:	4770      	bx	lr
 80077ac:	fffff800 	.word	0xfffff800

080077b0 <USB_EP0_OutStart>:
  *           1 : DMA feature used
  * @param  psetup  pointer to setup packet
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0_OutStart(USB_OTG_GlobalTypeDef *USBx, uint8_t dma, uint8_t *psetup)
{
 80077b0:	b480      	push	{r7}
 80077b2:	b087      	sub	sp, #28
 80077b4:	af00      	add	r7, sp, #0
 80077b6:	60f8      	str	r0, [r7, #12]
 80077b8:	460b      	mov	r3, r1
 80077ba:	607a      	str	r2, [r7, #4]
 80077bc:	72fb      	strb	r3, [r7, #11]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80077be:	68fb      	ldr	r3, [r7, #12]
 80077c0:	617b      	str	r3, [r7, #20]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 80077c2:	68fb      	ldr	r3, [r7, #12]
 80077c4:	333c      	adds	r3, #60	; 0x3c
 80077c6:	3304      	adds	r3, #4
 80077c8:	681b      	ldr	r3, [r3, #0]
 80077ca:	613b      	str	r3, [r7, #16]

  if (gSNPSiD > USB_OTG_CORE_ID_300A)
 80077cc:	693b      	ldr	r3, [r7, #16]
 80077ce:	4a26      	ldr	r2, [pc, #152]	; (8007868 <USB_EP0_OutStart+0xb8>)
 80077d0:	4293      	cmp	r3, r2
 80077d2:	d90a      	bls.n	80077ea <USB_EP0_OutStart+0x3a>
  {
    if ((USBx_OUTEP(0U)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 80077d4:	697b      	ldr	r3, [r7, #20]
 80077d6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80077da:	681b      	ldr	r3, [r3, #0]
 80077dc:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 80077e0:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80077e4:	d101      	bne.n	80077ea <USB_EP0_OutStart+0x3a>
    {
      return HAL_OK;
 80077e6:	2300      	movs	r3, #0
 80077e8:	e037      	b.n	800785a <USB_EP0_OutStart+0xaa>
    }
  }

  USBx_OUTEP(0U)->DOEPTSIZ = 0U;
 80077ea:	697b      	ldr	r3, [r7, #20]
 80077ec:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80077f0:	461a      	mov	r2, r3
 80077f2:	2300      	movs	r3, #0
 80077f4:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 80077f6:	697b      	ldr	r3, [r7, #20]
 80077f8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80077fc:	691b      	ldr	r3, [r3, #16]
 80077fe:	697a      	ldr	r2, [r7, #20]
 8007800:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8007804:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8007808:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (3U * 8U);
 800780a:	697b      	ldr	r3, [r7, #20]
 800780c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007810:	691b      	ldr	r3, [r3, #16]
 8007812:	697a      	ldr	r2, [r7, #20]
 8007814:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8007818:	f043 0318 	orr.w	r3, r3, #24
 800781c:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |=  USB_OTG_DOEPTSIZ_STUPCNT;
 800781e:	697b      	ldr	r3, [r7, #20]
 8007820:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007824:	691b      	ldr	r3, [r3, #16]
 8007826:	697a      	ldr	r2, [r7, #20]
 8007828:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800782c:	f043 43c0 	orr.w	r3, r3, #1610612736	; 0x60000000
 8007830:	6113      	str	r3, [r2, #16]

  if (dma == 1U)
 8007832:	7afb      	ldrb	r3, [r7, #11]
 8007834:	2b01      	cmp	r3, #1
 8007836:	d10f      	bne.n	8007858 <USB_EP0_OutStart+0xa8>
  {
    USBx_OUTEP(0U)->DOEPDMA = (uint32_t)psetup;
 8007838:	697b      	ldr	r3, [r7, #20]
 800783a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800783e:	461a      	mov	r2, r3
 8007840:	687b      	ldr	r3, [r7, #4]
 8007842:	6153      	str	r3, [r2, #20]
    /* EP enable */
    USBx_OUTEP(0U)->DOEPCTL |= USB_OTG_DOEPCTL_EPENA | USB_OTG_DOEPCTL_USBAEP;
 8007844:	697b      	ldr	r3, [r7, #20]
 8007846:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800784a:	681b      	ldr	r3, [r3, #0]
 800784c:	697a      	ldr	r2, [r7, #20]
 800784e:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8007852:	f043 2380 	orr.w	r3, r3, #2147516416	; 0x80008000
 8007856:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 8007858:	2300      	movs	r3, #0
}
 800785a:	4618      	mov	r0, r3
 800785c:	371c      	adds	r7, #28
 800785e:	46bd      	mov	sp, r7
 8007860:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007864:	4770      	bx	lr
 8007866:	bf00      	nop
 8007868:	4f54300a 	.word	0x4f54300a

0800786c <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 800786c:	b480      	push	{r7}
 800786e:	b085      	sub	sp, #20
 8007870:	af00      	add	r7, sp, #0
 8007872:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8007874:	2300      	movs	r3, #0
 8007876:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8007878:	68fb      	ldr	r3, [r7, #12]
 800787a:	3301      	adds	r3, #1
 800787c:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 800787e:	68fb      	ldr	r3, [r7, #12]
 8007880:	4a13      	ldr	r2, [pc, #76]	; (80078d0 <USB_CoreReset+0x64>)
 8007882:	4293      	cmp	r3, r2
 8007884:	d901      	bls.n	800788a <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 8007886:	2303      	movs	r3, #3
 8007888:	e01b      	b.n	80078c2 <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 800788a:	687b      	ldr	r3, [r7, #4]
 800788c:	691b      	ldr	r3, [r3, #16]
 800788e:	2b00      	cmp	r3, #0
 8007890:	daf2      	bge.n	8007878 <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 8007892:	2300      	movs	r3, #0
 8007894:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 8007896:	687b      	ldr	r3, [r7, #4]
 8007898:	691b      	ldr	r3, [r3, #16]
 800789a:	f043 0201 	orr.w	r2, r3, #1
 800789e:	687b      	ldr	r3, [r7, #4]
 80078a0:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 80078a2:	68fb      	ldr	r3, [r7, #12]
 80078a4:	3301      	adds	r3, #1
 80078a6:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 80078a8:	68fb      	ldr	r3, [r7, #12]
 80078aa:	4a09      	ldr	r2, [pc, #36]	; (80078d0 <USB_CoreReset+0x64>)
 80078ac:	4293      	cmp	r3, r2
 80078ae:	d901      	bls.n	80078b4 <USB_CoreReset+0x48>
    {
      return HAL_TIMEOUT;
 80078b0:	2303      	movs	r3, #3
 80078b2:	e006      	b.n	80078c2 <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 80078b4:	687b      	ldr	r3, [r7, #4]
 80078b6:	691b      	ldr	r3, [r3, #16]
 80078b8:	f003 0301 	and.w	r3, r3, #1
 80078bc:	2b01      	cmp	r3, #1
 80078be:	d0f0      	beq.n	80078a2 <USB_CoreReset+0x36>

  return HAL_OK;
 80078c0:	2300      	movs	r3, #0
}
 80078c2:	4618      	mov	r0, r3
 80078c4:	3714      	adds	r7, #20
 80078c6:	46bd      	mov	sp, r7
 80078c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80078cc:	4770      	bx	lr
 80078ce:	bf00      	nop
 80078d0:	00030d40 	.word	0x00030d40

080078d4 <USBD_CDC_Init>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CDC_Init(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 80078d4:	b580      	push	{r7, lr}
 80078d6:	b084      	sub	sp, #16
 80078d8:	af00      	add	r7, sp, #0
 80078da:	6078      	str	r0, [r7, #4]
 80078dc:	460b      	mov	r3, r1
 80078de:	70fb      	strb	r3, [r7, #3]
  UNUSED(cfgidx);
  USBD_CDC_HandleTypeDef *hcdc;

  hcdc = (USBD_CDC_HandleTypeDef *)USBD_malloc(sizeof(USBD_CDC_HandleTypeDef));
 80078e0:	f44f 7007 	mov.w	r0, #540	; 0x21c
 80078e4:	f002 fd16 	bl	800a314 <USBD_static_malloc>
 80078e8:	60f8      	str	r0, [r7, #12]

  if (hcdc == NULL)
 80078ea:	68fb      	ldr	r3, [r7, #12]
 80078ec:	2b00      	cmp	r3, #0
 80078ee:	d109      	bne.n	8007904 <USBD_CDC_Init+0x30>
  {
    pdev->pClassDataCmsit[pdev->classId] = NULL;
 80078f0:	687b      	ldr	r3, [r7, #4]
 80078f2:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 80078f6:	687b      	ldr	r3, [r7, #4]
 80078f8:	32b0      	adds	r2, #176	; 0xb0
 80078fa:	2100      	movs	r1, #0
 80078fc:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    return (uint8_t)USBD_EMEM;
 8007900:	2302      	movs	r3, #2
 8007902:	e0d4      	b.n	8007aae <USBD_CDC_Init+0x1da>
  }

  (void)USBD_memset(hcdc, 0, sizeof(USBD_CDC_HandleTypeDef));
 8007904:	f44f 7207 	mov.w	r2, #540	; 0x21c
 8007908:	2100      	movs	r1, #0
 800790a:	68f8      	ldr	r0, [r7, #12]
 800790c:	f002 fd70 	bl	800a3f0 <memset>

  pdev->pClassDataCmsit[pdev->classId] = (void *)hcdc;
 8007910:	687b      	ldr	r3, [r7, #4]
 8007912:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8007916:	687b      	ldr	r3, [r7, #4]
 8007918:	32b0      	adds	r2, #176	; 0xb0
 800791a:	68f9      	ldr	r1, [r7, #12]
 800791c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  pdev->pClassData = pdev->pClassDataCmsit[pdev->classId];
 8007920:	687b      	ldr	r3, [r7, #4]
 8007922:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8007926:	687b      	ldr	r3, [r7, #4]
 8007928:	32b0      	adds	r2, #176	; 0xb0
 800792a:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 800792e:	687b      	ldr	r3, [r7, #4]
 8007930:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc
  CDCInEpAdd  = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_BULK);
  CDCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK);
  CDCCmdEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_INTR);
#endif /* USE_USBD_COMPOSITE */

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 8007934:	687b      	ldr	r3, [r7, #4]
 8007936:	7c1b      	ldrb	r3, [r3, #16]
 8007938:	2b00      	cmp	r3, #0
 800793a:	d138      	bne.n	80079ae <USBD_CDC_Init+0xda>
  {
    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, CDCInEpAdd, USBD_EP_TYPE_BULK,
 800793c:	4b5e      	ldr	r3, [pc, #376]	; (8007ab8 <USBD_CDC_Init+0x1e4>)
 800793e:	7819      	ldrb	r1, [r3, #0]
 8007940:	f44f 7300 	mov.w	r3, #512	; 0x200
 8007944:	2202      	movs	r2, #2
 8007946:	6878      	ldr	r0, [r7, #4]
 8007948:	f002 fbc1 	bl	800a0ce <USBD_LL_OpenEP>
                         CDC_DATA_HS_IN_PACKET_SIZE);

    pdev->ep_in[CDCInEpAdd & 0xFU].is_used = 1U;
 800794c:	4b5a      	ldr	r3, [pc, #360]	; (8007ab8 <USBD_CDC_Init+0x1e4>)
 800794e:	781b      	ldrb	r3, [r3, #0]
 8007950:	f003 020f 	and.w	r2, r3, #15
 8007954:	6879      	ldr	r1, [r7, #4]
 8007956:	4613      	mov	r3, r2
 8007958:	009b      	lsls	r3, r3, #2
 800795a:	4413      	add	r3, r2
 800795c:	009b      	lsls	r3, r3, #2
 800795e:	440b      	add	r3, r1
 8007960:	3324      	adds	r3, #36	; 0x24
 8007962:	2201      	movs	r2, #1
 8007964:	801a      	strh	r2, [r3, #0]

    /* Open EP OUT */
    (void)USBD_LL_OpenEP(pdev, CDCOutEpAdd, USBD_EP_TYPE_BULK,
 8007966:	4b55      	ldr	r3, [pc, #340]	; (8007abc <USBD_CDC_Init+0x1e8>)
 8007968:	7819      	ldrb	r1, [r3, #0]
 800796a:	f44f 7300 	mov.w	r3, #512	; 0x200
 800796e:	2202      	movs	r2, #2
 8007970:	6878      	ldr	r0, [r7, #4]
 8007972:	f002 fbac 	bl	800a0ce <USBD_LL_OpenEP>
                         CDC_DATA_HS_OUT_PACKET_SIZE);

    pdev->ep_out[CDCOutEpAdd & 0xFU].is_used = 1U;
 8007976:	4b51      	ldr	r3, [pc, #324]	; (8007abc <USBD_CDC_Init+0x1e8>)
 8007978:	781b      	ldrb	r3, [r3, #0]
 800797a:	f003 020f 	and.w	r2, r3, #15
 800797e:	6879      	ldr	r1, [r7, #4]
 8007980:	4613      	mov	r3, r2
 8007982:	009b      	lsls	r3, r3, #2
 8007984:	4413      	add	r3, r2
 8007986:	009b      	lsls	r3, r3, #2
 8007988:	440b      	add	r3, r1
 800798a:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 800798e:	2201      	movs	r2, #1
 8007990:	801a      	strh	r2, [r3, #0]

    /* Set bInterval for CDC CMD Endpoint */
    pdev->ep_in[CDCCmdEpAdd & 0xFU].bInterval = CDC_HS_BINTERVAL;
 8007992:	4b4b      	ldr	r3, [pc, #300]	; (8007ac0 <USBD_CDC_Init+0x1ec>)
 8007994:	781b      	ldrb	r3, [r3, #0]
 8007996:	f003 020f 	and.w	r2, r3, #15
 800799a:	6879      	ldr	r1, [r7, #4]
 800799c:	4613      	mov	r3, r2
 800799e:	009b      	lsls	r3, r3, #2
 80079a0:	4413      	add	r3, r2
 80079a2:	009b      	lsls	r3, r3, #2
 80079a4:	440b      	add	r3, r1
 80079a6:	3326      	adds	r3, #38	; 0x26
 80079a8:	2210      	movs	r2, #16
 80079aa:	801a      	strh	r2, [r3, #0]
 80079ac:	e035      	b.n	8007a1a <USBD_CDC_Init+0x146>
  }
  else
  {
    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, CDCInEpAdd, USBD_EP_TYPE_BULK,
 80079ae:	4b42      	ldr	r3, [pc, #264]	; (8007ab8 <USBD_CDC_Init+0x1e4>)
 80079b0:	7819      	ldrb	r1, [r3, #0]
 80079b2:	2340      	movs	r3, #64	; 0x40
 80079b4:	2202      	movs	r2, #2
 80079b6:	6878      	ldr	r0, [r7, #4]
 80079b8:	f002 fb89 	bl	800a0ce <USBD_LL_OpenEP>
                         CDC_DATA_FS_IN_PACKET_SIZE);

    pdev->ep_in[CDCInEpAdd & 0xFU].is_used = 1U;
 80079bc:	4b3e      	ldr	r3, [pc, #248]	; (8007ab8 <USBD_CDC_Init+0x1e4>)
 80079be:	781b      	ldrb	r3, [r3, #0]
 80079c0:	f003 020f 	and.w	r2, r3, #15
 80079c4:	6879      	ldr	r1, [r7, #4]
 80079c6:	4613      	mov	r3, r2
 80079c8:	009b      	lsls	r3, r3, #2
 80079ca:	4413      	add	r3, r2
 80079cc:	009b      	lsls	r3, r3, #2
 80079ce:	440b      	add	r3, r1
 80079d0:	3324      	adds	r3, #36	; 0x24
 80079d2:	2201      	movs	r2, #1
 80079d4:	801a      	strh	r2, [r3, #0]

    /* Open EP OUT */
    (void)USBD_LL_OpenEP(pdev, CDCOutEpAdd, USBD_EP_TYPE_BULK,
 80079d6:	4b39      	ldr	r3, [pc, #228]	; (8007abc <USBD_CDC_Init+0x1e8>)
 80079d8:	7819      	ldrb	r1, [r3, #0]
 80079da:	2340      	movs	r3, #64	; 0x40
 80079dc:	2202      	movs	r2, #2
 80079de:	6878      	ldr	r0, [r7, #4]
 80079e0:	f002 fb75 	bl	800a0ce <USBD_LL_OpenEP>
                         CDC_DATA_FS_OUT_PACKET_SIZE);

    pdev->ep_out[CDCOutEpAdd & 0xFU].is_used = 1U;
 80079e4:	4b35      	ldr	r3, [pc, #212]	; (8007abc <USBD_CDC_Init+0x1e8>)
 80079e6:	781b      	ldrb	r3, [r3, #0]
 80079e8:	f003 020f 	and.w	r2, r3, #15
 80079ec:	6879      	ldr	r1, [r7, #4]
 80079ee:	4613      	mov	r3, r2
 80079f0:	009b      	lsls	r3, r3, #2
 80079f2:	4413      	add	r3, r2
 80079f4:	009b      	lsls	r3, r3, #2
 80079f6:	440b      	add	r3, r1
 80079f8:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 80079fc:	2201      	movs	r2, #1
 80079fe:	801a      	strh	r2, [r3, #0]

    /* Set bInterval for CMD Endpoint */
    pdev->ep_in[CDCCmdEpAdd & 0xFU].bInterval = CDC_FS_BINTERVAL;
 8007a00:	4b2f      	ldr	r3, [pc, #188]	; (8007ac0 <USBD_CDC_Init+0x1ec>)
 8007a02:	781b      	ldrb	r3, [r3, #0]
 8007a04:	f003 020f 	and.w	r2, r3, #15
 8007a08:	6879      	ldr	r1, [r7, #4]
 8007a0a:	4613      	mov	r3, r2
 8007a0c:	009b      	lsls	r3, r3, #2
 8007a0e:	4413      	add	r3, r2
 8007a10:	009b      	lsls	r3, r3, #2
 8007a12:	440b      	add	r3, r1
 8007a14:	3326      	adds	r3, #38	; 0x26
 8007a16:	2210      	movs	r2, #16
 8007a18:	801a      	strh	r2, [r3, #0]
  }

  /* Open Command IN EP */
  (void)USBD_LL_OpenEP(pdev, CDCCmdEpAdd, USBD_EP_TYPE_INTR, CDC_CMD_PACKET_SIZE);
 8007a1a:	4b29      	ldr	r3, [pc, #164]	; (8007ac0 <USBD_CDC_Init+0x1ec>)
 8007a1c:	7819      	ldrb	r1, [r3, #0]
 8007a1e:	2308      	movs	r3, #8
 8007a20:	2203      	movs	r2, #3
 8007a22:	6878      	ldr	r0, [r7, #4]
 8007a24:	f002 fb53 	bl	800a0ce <USBD_LL_OpenEP>
  pdev->ep_in[CDCCmdEpAdd & 0xFU].is_used = 1U;
 8007a28:	4b25      	ldr	r3, [pc, #148]	; (8007ac0 <USBD_CDC_Init+0x1ec>)
 8007a2a:	781b      	ldrb	r3, [r3, #0]
 8007a2c:	f003 020f 	and.w	r2, r3, #15
 8007a30:	6879      	ldr	r1, [r7, #4]
 8007a32:	4613      	mov	r3, r2
 8007a34:	009b      	lsls	r3, r3, #2
 8007a36:	4413      	add	r3, r2
 8007a38:	009b      	lsls	r3, r3, #2
 8007a3a:	440b      	add	r3, r1
 8007a3c:	3324      	adds	r3, #36	; 0x24
 8007a3e:	2201      	movs	r2, #1
 8007a40:	801a      	strh	r2, [r3, #0]

  hcdc->RxBuffer = NULL;
 8007a42:	68fb      	ldr	r3, [r7, #12]
 8007a44:	2200      	movs	r2, #0
 8007a46:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204

  /* Init  physical Interface components */
  ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Init();
 8007a4a:	687b      	ldr	r3, [r7, #4]
 8007a4c:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 8007a50:	687a      	ldr	r2, [r7, #4]
 8007a52:	33b0      	adds	r3, #176	; 0xb0
 8007a54:	009b      	lsls	r3, r3, #2
 8007a56:	4413      	add	r3, r2
 8007a58:	685b      	ldr	r3, [r3, #4]
 8007a5a:	681b      	ldr	r3, [r3, #0]
 8007a5c:	4798      	blx	r3

  /* Init Xfer states */
  hcdc->TxState = 0U;
 8007a5e:	68fb      	ldr	r3, [r7, #12]
 8007a60:	2200      	movs	r2, #0
 8007a62:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
  hcdc->RxState = 0U;
 8007a66:	68fb      	ldr	r3, [r7, #12]
 8007a68:	2200      	movs	r2, #0
 8007a6a:	f8c3 2218 	str.w	r2, [r3, #536]	; 0x218

  if (hcdc->RxBuffer == NULL)
 8007a6e:	68fb      	ldr	r3, [r7, #12]
 8007a70:	f8d3 3204 	ldr.w	r3, [r3, #516]	; 0x204
 8007a74:	2b00      	cmp	r3, #0
 8007a76:	d101      	bne.n	8007a7c <USBD_CDC_Init+0x1a8>
  {
    return (uint8_t)USBD_EMEM;
 8007a78:	2302      	movs	r3, #2
 8007a7a:	e018      	b.n	8007aae <USBD_CDC_Init+0x1da>
  }

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 8007a7c:	687b      	ldr	r3, [r7, #4]
 8007a7e:	7c1b      	ldrb	r3, [r3, #16]
 8007a80:	2b00      	cmp	r3, #0
 8007a82:	d10a      	bne.n	8007a9a <USBD_CDC_Init+0x1c6>
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 8007a84:	4b0d      	ldr	r3, [pc, #52]	; (8007abc <USBD_CDC_Init+0x1e8>)
 8007a86:	7819      	ldrb	r1, [r3, #0]
 8007a88:	68fb      	ldr	r3, [r7, #12]
 8007a8a:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8007a8e:	f44f 7300 	mov.w	r3, #512	; 0x200
 8007a92:	6878      	ldr	r0, [r7, #4]
 8007a94:	f002 fc0a 	bl	800a2ac <USBD_LL_PrepareReceive>
 8007a98:	e008      	b.n	8007aac <USBD_CDC_Init+0x1d8>
                                 CDC_DATA_HS_OUT_PACKET_SIZE);
  }
  else
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 8007a9a:	4b08      	ldr	r3, [pc, #32]	; (8007abc <USBD_CDC_Init+0x1e8>)
 8007a9c:	7819      	ldrb	r1, [r3, #0]
 8007a9e:	68fb      	ldr	r3, [r7, #12]
 8007aa0:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8007aa4:	2340      	movs	r3, #64	; 0x40
 8007aa6:	6878      	ldr	r0, [r7, #4]
 8007aa8:	f002 fc00 	bl	800a2ac <USBD_LL_PrepareReceive>
                                 CDC_DATA_FS_OUT_PACKET_SIZE);
  }

  return (uint8_t)USBD_OK;
 8007aac:	2300      	movs	r3, #0
}
 8007aae:	4618      	mov	r0, r3
 8007ab0:	3710      	adds	r7, #16
 8007ab2:	46bd      	mov	sp, r7
 8007ab4:	bd80      	pop	{r7, pc}
 8007ab6:	bf00      	nop
 8007ab8:	24000097 	.word	0x24000097
 8007abc:	24000098 	.word	0x24000098
 8007ac0:	24000099 	.word	0x24000099

08007ac4 <USBD_CDC_DeInit>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CDC_DeInit(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8007ac4:	b580      	push	{r7, lr}
 8007ac6:	b082      	sub	sp, #8
 8007ac8:	af00      	add	r7, sp, #0
 8007aca:	6078      	str	r0, [r7, #4]
 8007acc:	460b      	mov	r3, r1
 8007ace:	70fb      	strb	r3, [r7, #3]
  CDCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK);
  CDCCmdEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_INTR);
#endif /* USE_USBD_COMPOSITE */

  /* Close EP IN */
  (void)USBD_LL_CloseEP(pdev, CDCInEpAdd);
 8007ad0:	4b3a      	ldr	r3, [pc, #232]	; (8007bbc <USBD_CDC_DeInit+0xf8>)
 8007ad2:	781b      	ldrb	r3, [r3, #0]
 8007ad4:	4619      	mov	r1, r3
 8007ad6:	6878      	ldr	r0, [r7, #4]
 8007ad8:	f002 fb1f 	bl	800a11a <USBD_LL_CloseEP>
  pdev->ep_in[CDCInEpAdd & 0xFU].is_used = 0U;
 8007adc:	4b37      	ldr	r3, [pc, #220]	; (8007bbc <USBD_CDC_DeInit+0xf8>)
 8007ade:	781b      	ldrb	r3, [r3, #0]
 8007ae0:	f003 020f 	and.w	r2, r3, #15
 8007ae4:	6879      	ldr	r1, [r7, #4]
 8007ae6:	4613      	mov	r3, r2
 8007ae8:	009b      	lsls	r3, r3, #2
 8007aea:	4413      	add	r3, r2
 8007aec:	009b      	lsls	r3, r3, #2
 8007aee:	440b      	add	r3, r1
 8007af0:	3324      	adds	r3, #36	; 0x24
 8007af2:	2200      	movs	r2, #0
 8007af4:	801a      	strh	r2, [r3, #0]

  /* Close EP OUT */
  (void)USBD_LL_CloseEP(pdev, CDCOutEpAdd);
 8007af6:	4b32      	ldr	r3, [pc, #200]	; (8007bc0 <USBD_CDC_DeInit+0xfc>)
 8007af8:	781b      	ldrb	r3, [r3, #0]
 8007afa:	4619      	mov	r1, r3
 8007afc:	6878      	ldr	r0, [r7, #4]
 8007afe:	f002 fb0c 	bl	800a11a <USBD_LL_CloseEP>
  pdev->ep_out[CDCOutEpAdd & 0xFU].is_used = 0U;
 8007b02:	4b2f      	ldr	r3, [pc, #188]	; (8007bc0 <USBD_CDC_DeInit+0xfc>)
 8007b04:	781b      	ldrb	r3, [r3, #0]
 8007b06:	f003 020f 	and.w	r2, r3, #15
 8007b0a:	6879      	ldr	r1, [r7, #4]
 8007b0c:	4613      	mov	r3, r2
 8007b0e:	009b      	lsls	r3, r3, #2
 8007b10:	4413      	add	r3, r2
 8007b12:	009b      	lsls	r3, r3, #2
 8007b14:	440b      	add	r3, r1
 8007b16:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 8007b1a:	2200      	movs	r2, #0
 8007b1c:	801a      	strh	r2, [r3, #0]

  /* Close Command IN EP */
  (void)USBD_LL_CloseEP(pdev, CDCCmdEpAdd);
 8007b1e:	4b29      	ldr	r3, [pc, #164]	; (8007bc4 <USBD_CDC_DeInit+0x100>)
 8007b20:	781b      	ldrb	r3, [r3, #0]
 8007b22:	4619      	mov	r1, r3
 8007b24:	6878      	ldr	r0, [r7, #4]
 8007b26:	f002 faf8 	bl	800a11a <USBD_LL_CloseEP>
  pdev->ep_in[CDCCmdEpAdd & 0xFU].is_used = 0U;
 8007b2a:	4b26      	ldr	r3, [pc, #152]	; (8007bc4 <USBD_CDC_DeInit+0x100>)
 8007b2c:	781b      	ldrb	r3, [r3, #0]
 8007b2e:	f003 020f 	and.w	r2, r3, #15
 8007b32:	6879      	ldr	r1, [r7, #4]
 8007b34:	4613      	mov	r3, r2
 8007b36:	009b      	lsls	r3, r3, #2
 8007b38:	4413      	add	r3, r2
 8007b3a:	009b      	lsls	r3, r3, #2
 8007b3c:	440b      	add	r3, r1
 8007b3e:	3324      	adds	r3, #36	; 0x24
 8007b40:	2200      	movs	r2, #0
 8007b42:	801a      	strh	r2, [r3, #0]
  pdev->ep_in[CDCCmdEpAdd & 0xFU].bInterval = 0U;
 8007b44:	4b1f      	ldr	r3, [pc, #124]	; (8007bc4 <USBD_CDC_DeInit+0x100>)
 8007b46:	781b      	ldrb	r3, [r3, #0]
 8007b48:	f003 020f 	and.w	r2, r3, #15
 8007b4c:	6879      	ldr	r1, [r7, #4]
 8007b4e:	4613      	mov	r3, r2
 8007b50:	009b      	lsls	r3, r3, #2
 8007b52:	4413      	add	r3, r2
 8007b54:	009b      	lsls	r3, r3, #2
 8007b56:	440b      	add	r3, r1
 8007b58:	3326      	adds	r3, #38	; 0x26
 8007b5a:	2200      	movs	r2, #0
 8007b5c:	801a      	strh	r2, [r3, #0]

  /* DeInit  physical Interface components */
  if (pdev->pClassDataCmsit[pdev->classId] != NULL)
 8007b5e:	687b      	ldr	r3, [r7, #4]
 8007b60:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8007b64:	687b      	ldr	r3, [r7, #4]
 8007b66:	32b0      	adds	r2, #176	; 0xb0
 8007b68:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007b6c:	2b00      	cmp	r3, #0
 8007b6e:	d01f      	beq.n	8007bb0 <USBD_CDC_DeInit+0xec>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->DeInit();
 8007b70:	687b      	ldr	r3, [r7, #4]
 8007b72:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 8007b76:	687a      	ldr	r2, [r7, #4]
 8007b78:	33b0      	adds	r3, #176	; 0xb0
 8007b7a:	009b      	lsls	r3, r3, #2
 8007b7c:	4413      	add	r3, r2
 8007b7e:	685b      	ldr	r3, [r3, #4]
 8007b80:	685b      	ldr	r3, [r3, #4]
 8007b82:	4798      	blx	r3
    (void)USBD_free(pdev->pClassDataCmsit[pdev->classId]);
 8007b84:	687b      	ldr	r3, [r7, #4]
 8007b86:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8007b8a:	687b      	ldr	r3, [r7, #4]
 8007b8c:	32b0      	adds	r2, #176	; 0xb0
 8007b8e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007b92:	4618      	mov	r0, r3
 8007b94:	f002 fbcc 	bl	800a330 <USBD_static_free>
    pdev->pClassDataCmsit[pdev->classId] = NULL;
 8007b98:	687b      	ldr	r3, [r7, #4]
 8007b9a:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8007b9e:	687b      	ldr	r3, [r7, #4]
 8007ba0:	32b0      	adds	r2, #176	; 0xb0
 8007ba2:	2100      	movs	r1, #0
 8007ba4:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    pdev->pClassData = NULL;
 8007ba8:	687b      	ldr	r3, [r7, #4]
 8007baa:	2200      	movs	r2, #0
 8007bac:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc
  }

  return (uint8_t)USBD_OK;
 8007bb0:	2300      	movs	r3, #0
}
 8007bb2:	4618      	mov	r0, r3
 8007bb4:	3708      	adds	r7, #8
 8007bb6:	46bd      	mov	sp, r7
 8007bb8:	bd80      	pop	{r7, pc}
 8007bba:	bf00      	nop
 8007bbc:	24000097 	.word	0x24000097
 8007bc0:	24000098 	.word	0x24000098
 8007bc4:	24000099 	.word	0x24000099

08007bc8 <USBD_CDC_Setup>:
  * @param  req: usb requests
  * @retval status
  */
static uint8_t USBD_CDC_Setup(USBD_HandleTypeDef *pdev,
                              USBD_SetupReqTypedef *req)
{
 8007bc8:	b580      	push	{r7, lr}
 8007bca:	b086      	sub	sp, #24
 8007bcc:	af00      	add	r7, sp, #0
 8007bce:	6078      	str	r0, [r7, #4]
 8007bd0:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8007bd2:	687b      	ldr	r3, [r7, #4]
 8007bd4:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8007bd8:	687b      	ldr	r3, [r7, #4]
 8007bda:	32b0      	adds	r2, #176	; 0xb0
 8007bdc:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007be0:	613b      	str	r3, [r7, #16]
  uint16_t len;
  uint8_t ifalt = 0U;
 8007be2:	2300      	movs	r3, #0
 8007be4:	737b      	strb	r3, [r7, #13]
  uint16_t status_info = 0U;
 8007be6:	2300      	movs	r3, #0
 8007be8:	817b      	strh	r3, [r7, #10]
  USBD_StatusTypeDef ret = USBD_OK;
 8007bea:	2300      	movs	r3, #0
 8007bec:	75fb      	strb	r3, [r7, #23]

  if (hcdc == NULL)
 8007bee:	693b      	ldr	r3, [r7, #16]
 8007bf0:	2b00      	cmp	r3, #0
 8007bf2:	d101      	bne.n	8007bf8 <USBD_CDC_Setup+0x30>
  {
    return (uint8_t)USBD_FAIL;
 8007bf4:	2303      	movs	r3, #3
 8007bf6:	e0bf      	b.n	8007d78 <USBD_CDC_Setup+0x1b0>
  }

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8007bf8:	683b      	ldr	r3, [r7, #0]
 8007bfa:	781b      	ldrb	r3, [r3, #0]
 8007bfc:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8007c00:	2b00      	cmp	r3, #0
 8007c02:	d050      	beq.n	8007ca6 <USBD_CDC_Setup+0xde>
 8007c04:	2b20      	cmp	r3, #32
 8007c06:	f040 80af 	bne.w	8007d68 <USBD_CDC_Setup+0x1a0>
  {
    case USB_REQ_TYPE_CLASS:
      if (req->wLength != 0U)
 8007c0a:	683b      	ldr	r3, [r7, #0]
 8007c0c:	88db      	ldrh	r3, [r3, #6]
 8007c0e:	2b00      	cmp	r3, #0
 8007c10:	d03a      	beq.n	8007c88 <USBD_CDC_Setup+0xc0>
      {
        if ((req->bmRequest & 0x80U) != 0U)
 8007c12:	683b      	ldr	r3, [r7, #0]
 8007c14:	781b      	ldrb	r3, [r3, #0]
 8007c16:	b25b      	sxtb	r3, r3
 8007c18:	2b00      	cmp	r3, #0
 8007c1a:	da1b      	bge.n	8007c54 <USBD_CDC_Setup+0x8c>
        {
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
 8007c1c:	687b      	ldr	r3, [r7, #4]
 8007c1e:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 8007c22:	687a      	ldr	r2, [r7, #4]
 8007c24:	33b0      	adds	r3, #176	; 0xb0
 8007c26:	009b      	lsls	r3, r3, #2
 8007c28:	4413      	add	r3, r2
 8007c2a:	685b      	ldr	r3, [r3, #4]
 8007c2c:	689b      	ldr	r3, [r3, #8]
 8007c2e:	683a      	ldr	r2, [r7, #0]
 8007c30:	7850      	ldrb	r0, [r2, #1]
                                                                           (uint8_t *)hcdc->data,
 8007c32:	6939      	ldr	r1, [r7, #16]
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
 8007c34:	683a      	ldr	r2, [r7, #0]
 8007c36:	88d2      	ldrh	r2, [r2, #6]
 8007c38:	4798      	blx	r3
                                                                           req->wLength);

          len = MIN(CDC_REQ_MAX_DATA_SIZE, req->wLength);
 8007c3a:	683b      	ldr	r3, [r7, #0]
 8007c3c:	88db      	ldrh	r3, [r3, #6]
 8007c3e:	2b07      	cmp	r3, #7
 8007c40:	bf28      	it	cs
 8007c42:	2307      	movcs	r3, #7
 8007c44:	81fb      	strh	r3, [r7, #14]
          (void)USBD_CtlSendData(pdev, (uint8_t *)hcdc->data, len);
 8007c46:	693b      	ldr	r3, [r7, #16]
 8007c48:	89fa      	ldrh	r2, [r7, #14]
 8007c4a:	4619      	mov	r1, r3
 8007c4c:	6878      	ldr	r0, [r7, #4]
 8007c4e:	f001 fd89 	bl	8009764 <USBD_CtlSendData>
      else
      {
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
                                                                         (uint8_t *)req, 0U);
      }
      break;
 8007c52:	e090      	b.n	8007d76 <USBD_CDC_Setup+0x1ae>
          hcdc->CmdOpCode = req->bRequest;
 8007c54:	683b      	ldr	r3, [r7, #0]
 8007c56:	785a      	ldrb	r2, [r3, #1]
 8007c58:	693b      	ldr	r3, [r7, #16]
 8007c5a:	f883 2200 	strb.w	r2, [r3, #512]	; 0x200
          hcdc->CmdLength = (uint8_t)MIN(req->wLength, USB_MAX_EP0_SIZE);
 8007c5e:	683b      	ldr	r3, [r7, #0]
 8007c60:	88db      	ldrh	r3, [r3, #6]
 8007c62:	2b3f      	cmp	r3, #63	; 0x3f
 8007c64:	d803      	bhi.n	8007c6e <USBD_CDC_Setup+0xa6>
 8007c66:	683b      	ldr	r3, [r7, #0]
 8007c68:	88db      	ldrh	r3, [r3, #6]
 8007c6a:	b2da      	uxtb	r2, r3
 8007c6c:	e000      	b.n	8007c70 <USBD_CDC_Setup+0xa8>
 8007c6e:	2240      	movs	r2, #64	; 0x40
 8007c70:	693b      	ldr	r3, [r7, #16]
 8007c72:	f883 2201 	strb.w	r2, [r3, #513]	; 0x201
          (void)USBD_CtlPrepareRx(pdev, (uint8_t *)hcdc->data, hcdc->CmdLength);
 8007c76:	6939      	ldr	r1, [r7, #16]
 8007c78:	693b      	ldr	r3, [r7, #16]
 8007c7a:	f893 3201 	ldrb.w	r3, [r3, #513]	; 0x201
 8007c7e:	461a      	mov	r2, r3
 8007c80:	6878      	ldr	r0, [r7, #4]
 8007c82:	f001 fd9b 	bl	80097bc <USBD_CtlPrepareRx>
      break;
 8007c86:	e076      	b.n	8007d76 <USBD_CDC_Setup+0x1ae>
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
 8007c88:	687b      	ldr	r3, [r7, #4]
 8007c8a:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 8007c8e:	687a      	ldr	r2, [r7, #4]
 8007c90:	33b0      	adds	r3, #176	; 0xb0
 8007c92:	009b      	lsls	r3, r3, #2
 8007c94:	4413      	add	r3, r2
 8007c96:	685b      	ldr	r3, [r3, #4]
 8007c98:	689b      	ldr	r3, [r3, #8]
 8007c9a:	683a      	ldr	r2, [r7, #0]
 8007c9c:	7850      	ldrb	r0, [r2, #1]
 8007c9e:	2200      	movs	r2, #0
 8007ca0:	6839      	ldr	r1, [r7, #0]
 8007ca2:	4798      	blx	r3
      break;
 8007ca4:	e067      	b.n	8007d76 <USBD_CDC_Setup+0x1ae>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 8007ca6:	683b      	ldr	r3, [r7, #0]
 8007ca8:	785b      	ldrb	r3, [r3, #1]
 8007caa:	2b0b      	cmp	r3, #11
 8007cac:	d851      	bhi.n	8007d52 <USBD_CDC_Setup+0x18a>
 8007cae:	a201      	add	r2, pc, #4	; (adr r2, 8007cb4 <USBD_CDC_Setup+0xec>)
 8007cb0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007cb4:	08007ce5 	.word	0x08007ce5
 8007cb8:	08007d61 	.word	0x08007d61
 8007cbc:	08007d53 	.word	0x08007d53
 8007cc0:	08007d53 	.word	0x08007d53
 8007cc4:	08007d53 	.word	0x08007d53
 8007cc8:	08007d53 	.word	0x08007d53
 8007ccc:	08007d53 	.word	0x08007d53
 8007cd0:	08007d53 	.word	0x08007d53
 8007cd4:	08007d53 	.word	0x08007d53
 8007cd8:	08007d53 	.word	0x08007d53
 8007cdc:	08007d0f 	.word	0x08007d0f
 8007ce0:	08007d39 	.word	0x08007d39
      {
        case USB_REQ_GET_STATUS:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8007ce4:	687b      	ldr	r3, [r7, #4]
 8007ce6:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8007cea:	b2db      	uxtb	r3, r3
 8007cec:	2b03      	cmp	r3, #3
 8007cee:	d107      	bne.n	8007d00 <USBD_CDC_Setup+0x138>
          {
            (void)USBD_CtlSendData(pdev, (uint8_t *)&status_info, 2U);
 8007cf0:	f107 030a 	add.w	r3, r7, #10
 8007cf4:	2202      	movs	r2, #2
 8007cf6:	4619      	mov	r1, r3
 8007cf8:	6878      	ldr	r0, [r7, #4]
 8007cfa:	f001 fd33 	bl	8009764 <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 8007cfe:	e032      	b.n	8007d66 <USBD_CDC_Setup+0x19e>
            USBD_CtlError(pdev, req);
 8007d00:	6839      	ldr	r1, [r7, #0]
 8007d02:	6878      	ldr	r0, [r7, #4]
 8007d04:	f001 fcbd 	bl	8009682 <USBD_CtlError>
            ret = USBD_FAIL;
 8007d08:	2303      	movs	r3, #3
 8007d0a:	75fb      	strb	r3, [r7, #23]
          break;
 8007d0c:	e02b      	b.n	8007d66 <USBD_CDC_Setup+0x19e>

        case USB_REQ_GET_INTERFACE:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8007d0e:	687b      	ldr	r3, [r7, #4]
 8007d10:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8007d14:	b2db      	uxtb	r3, r3
 8007d16:	2b03      	cmp	r3, #3
 8007d18:	d107      	bne.n	8007d2a <USBD_CDC_Setup+0x162>
          {
            (void)USBD_CtlSendData(pdev, &ifalt, 1U);
 8007d1a:	f107 030d 	add.w	r3, r7, #13
 8007d1e:	2201      	movs	r2, #1
 8007d20:	4619      	mov	r1, r3
 8007d22:	6878      	ldr	r0, [r7, #4]
 8007d24:	f001 fd1e 	bl	8009764 <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 8007d28:	e01d      	b.n	8007d66 <USBD_CDC_Setup+0x19e>
            USBD_CtlError(pdev, req);
 8007d2a:	6839      	ldr	r1, [r7, #0]
 8007d2c:	6878      	ldr	r0, [r7, #4]
 8007d2e:	f001 fca8 	bl	8009682 <USBD_CtlError>
            ret = USBD_FAIL;
 8007d32:	2303      	movs	r3, #3
 8007d34:	75fb      	strb	r3, [r7, #23]
          break;
 8007d36:	e016      	b.n	8007d66 <USBD_CDC_Setup+0x19e>

        case USB_REQ_SET_INTERFACE:
          if (pdev->dev_state != USBD_STATE_CONFIGURED)
 8007d38:	687b      	ldr	r3, [r7, #4]
 8007d3a:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8007d3e:	b2db      	uxtb	r3, r3
 8007d40:	2b03      	cmp	r3, #3
 8007d42:	d00f      	beq.n	8007d64 <USBD_CDC_Setup+0x19c>
          {
            USBD_CtlError(pdev, req);
 8007d44:	6839      	ldr	r1, [r7, #0]
 8007d46:	6878      	ldr	r0, [r7, #4]
 8007d48:	f001 fc9b 	bl	8009682 <USBD_CtlError>
            ret = USBD_FAIL;
 8007d4c:	2303      	movs	r3, #3
 8007d4e:	75fb      	strb	r3, [r7, #23]
          }
          break;
 8007d50:	e008      	b.n	8007d64 <USBD_CDC_Setup+0x19c>

        case USB_REQ_CLEAR_FEATURE:
          break;

        default:
          USBD_CtlError(pdev, req);
 8007d52:	6839      	ldr	r1, [r7, #0]
 8007d54:	6878      	ldr	r0, [r7, #4]
 8007d56:	f001 fc94 	bl	8009682 <USBD_CtlError>
          ret = USBD_FAIL;
 8007d5a:	2303      	movs	r3, #3
 8007d5c:	75fb      	strb	r3, [r7, #23]
          break;
 8007d5e:	e002      	b.n	8007d66 <USBD_CDC_Setup+0x19e>
          break;
 8007d60:	bf00      	nop
 8007d62:	e008      	b.n	8007d76 <USBD_CDC_Setup+0x1ae>
          break;
 8007d64:	bf00      	nop
      }
      break;
 8007d66:	e006      	b.n	8007d76 <USBD_CDC_Setup+0x1ae>

    default:
      USBD_CtlError(pdev, req);
 8007d68:	6839      	ldr	r1, [r7, #0]
 8007d6a:	6878      	ldr	r0, [r7, #4]
 8007d6c:	f001 fc89 	bl	8009682 <USBD_CtlError>
      ret = USBD_FAIL;
 8007d70:	2303      	movs	r3, #3
 8007d72:	75fb      	strb	r3, [r7, #23]
      break;
 8007d74:	bf00      	nop
  }

  return (uint8_t)ret;
 8007d76:	7dfb      	ldrb	r3, [r7, #23]
}
 8007d78:	4618      	mov	r0, r3
 8007d7a:	3718      	adds	r7, #24
 8007d7c:	46bd      	mov	sp, r7
 8007d7e:	bd80      	pop	{r7, pc}

08007d80 <USBD_CDC_DataIn>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t USBD_CDC_DataIn(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 8007d80:	b580      	push	{r7, lr}
 8007d82:	b084      	sub	sp, #16
 8007d84:	af00      	add	r7, sp, #0
 8007d86:	6078      	str	r0, [r7, #4]
 8007d88:	460b      	mov	r3, r1
 8007d8a:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc;
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef *)pdev->pData;
 8007d8c:	687b      	ldr	r3, [r7, #4]
 8007d8e:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 8007d92:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 8007d94:	687b      	ldr	r3, [r7, #4]
 8007d96:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8007d9a:	687b      	ldr	r3, [r7, #4]
 8007d9c:	32b0      	adds	r2, #176	; 0xb0
 8007d9e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007da2:	2b00      	cmp	r3, #0
 8007da4:	d101      	bne.n	8007daa <USBD_CDC_DataIn+0x2a>
  {
    return (uint8_t)USBD_FAIL;
 8007da6:	2303      	movs	r3, #3
 8007da8:	e065      	b.n	8007e76 <USBD_CDC_DataIn+0xf6>
  }

  hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8007daa:	687b      	ldr	r3, [r7, #4]
 8007dac:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8007db0:	687b      	ldr	r3, [r7, #4]
 8007db2:	32b0      	adds	r2, #176	; 0xb0
 8007db4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007db8:	60bb      	str	r3, [r7, #8]

  if ((pdev->ep_in[epnum & 0xFU].total_length > 0U) &&
 8007dba:	78fb      	ldrb	r3, [r7, #3]
 8007dbc:	f003 020f 	and.w	r2, r3, #15
 8007dc0:	6879      	ldr	r1, [r7, #4]
 8007dc2:	4613      	mov	r3, r2
 8007dc4:	009b      	lsls	r3, r3, #2
 8007dc6:	4413      	add	r3, r2
 8007dc8:	009b      	lsls	r3, r3, #2
 8007dca:	440b      	add	r3, r1
 8007dcc:	3318      	adds	r3, #24
 8007dce:	681b      	ldr	r3, [r3, #0]
 8007dd0:	2b00      	cmp	r3, #0
 8007dd2:	d02f      	beq.n	8007e34 <USBD_CDC_DataIn+0xb4>
      ((pdev->ep_in[epnum & 0xFU].total_length % hpcd->IN_ep[epnum & 0xFU].maxpacket) == 0U))
 8007dd4:	78fb      	ldrb	r3, [r7, #3]
 8007dd6:	f003 020f 	and.w	r2, r3, #15
 8007dda:	6879      	ldr	r1, [r7, #4]
 8007ddc:	4613      	mov	r3, r2
 8007dde:	009b      	lsls	r3, r3, #2
 8007de0:	4413      	add	r3, r2
 8007de2:	009b      	lsls	r3, r3, #2
 8007de4:	440b      	add	r3, r1
 8007de6:	3318      	adds	r3, #24
 8007de8:	681a      	ldr	r2, [r3, #0]
 8007dea:	78fb      	ldrb	r3, [r7, #3]
 8007dec:	f003 010f 	and.w	r1, r3, #15
 8007df0:	68f8      	ldr	r0, [r7, #12]
 8007df2:	460b      	mov	r3, r1
 8007df4:	00db      	lsls	r3, r3, #3
 8007df6:	440b      	add	r3, r1
 8007df8:	009b      	lsls	r3, r3, #2
 8007dfa:	4403      	add	r3, r0
 8007dfc:	3348      	adds	r3, #72	; 0x48
 8007dfe:	681b      	ldr	r3, [r3, #0]
 8007e00:	fbb2 f1f3 	udiv	r1, r2, r3
 8007e04:	fb01 f303 	mul.w	r3, r1, r3
 8007e08:	1ad3      	subs	r3, r2, r3
  if ((pdev->ep_in[epnum & 0xFU].total_length > 0U) &&
 8007e0a:	2b00      	cmp	r3, #0
 8007e0c:	d112      	bne.n	8007e34 <USBD_CDC_DataIn+0xb4>
  {
    /* Update the packet total length */
    pdev->ep_in[epnum & 0xFU].total_length = 0U;
 8007e0e:	78fb      	ldrb	r3, [r7, #3]
 8007e10:	f003 020f 	and.w	r2, r3, #15
 8007e14:	6879      	ldr	r1, [r7, #4]
 8007e16:	4613      	mov	r3, r2
 8007e18:	009b      	lsls	r3, r3, #2
 8007e1a:	4413      	add	r3, r2
 8007e1c:	009b      	lsls	r3, r3, #2
 8007e1e:	440b      	add	r3, r1
 8007e20:	3318      	adds	r3, #24
 8007e22:	2200      	movs	r2, #0
 8007e24:	601a      	str	r2, [r3, #0]

    /* Send ZLP */
    (void)USBD_LL_Transmit(pdev, epnum, NULL, 0U);
 8007e26:	78f9      	ldrb	r1, [r7, #3]
 8007e28:	2300      	movs	r3, #0
 8007e2a:	2200      	movs	r2, #0
 8007e2c:	6878      	ldr	r0, [r7, #4]
 8007e2e:	f002 fa1c 	bl	800a26a <USBD_LL_Transmit>
 8007e32:	e01f      	b.n	8007e74 <USBD_CDC_DataIn+0xf4>
  }
  else
  {
    hcdc->TxState = 0U;
 8007e34:	68bb      	ldr	r3, [r7, #8]
 8007e36:	2200      	movs	r2, #0
 8007e38:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214

    if (((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->TransmitCplt != NULL)
 8007e3c:	687b      	ldr	r3, [r7, #4]
 8007e3e:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 8007e42:	687a      	ldr	r2, [r7, #4]
 8007e44:	33b0      	adds	r3, #176	; 0xb0
 8007e46:	009b      	lsls	r3, r3, #2
 8007e48:	4413      	add	r3, r2
 8007e4a:	685b      	ldr	r3, [r3, #4]
 8007e4c:	691b      	ldr	r3, [r3, #16]
 8007e4e:	2b00      	cmp	r3, #0
 8007e50:	d010      	beq.n	8007e74 <USBD_CDC_DataIn+0xf4>
    {
      ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->TransmitCplt(hcdc->TxBuffer, &hcdc->TxLength, epnum);
 8007e52:	687b      	ldr	r3, [r7, #4]
 8007e54:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 8007e58:	687a      	ldr	r2, [r7, #4]
 8007e5a:	33b0      	adds	r3, #176	; 0xb0
 8007e5c:	009b      	lsls	r3, r3, #2
 8007e5e:	4413      	add	r3, r2
 8007e60:	685b      	ldr	r3, [r3, #4]
 8007e62:	691b      	ldr	r3, [r3, #16]
 8007e64:	68ba      	ldr	r2, [r7, #8]
 8007e66:	f8d2 0208 	ldr.w	r0, [r2, #520]	; 0x208
 8007e6a:	68ba      	ldr	r2, [r7, #8]
 8007e6c:	f502 7104 	add.w	r1, r2, #528	; 0x210
 8007e70:	78fa      	ldrb	r2, [r7, #3]
 8007e72:	4798      	blx	r3
    }
  }

  return (uint8_t)USBD_OK;
 8007e74:	2300      	movs	r3, #0
}
 8007e76:	4618      	mov	r0, r3
 8007e78:	3710      	adds	r7, #16
 8007e7a:	46bd      	mov	sp, r7
 8007e7c:	bd80      	pop	{r7, pc}

08007e7e <USBD_CDC_DataOut>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t USBD_CDC_DataOut(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 8007e7e:	b580      	push	{r7, lr}
 8007e80:	b084      	sub	sp, #16
 8007e82:	af00      	add	r7, sp, #0
 8007e84:	6078      	str	r0, [r7, #4]
 8007e86:	460b      	mov	r3, r1
 8007e88:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8007e8a:	687b      	ldr	r3, [r7, #4]
 8007e8c:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8007e90:	687b      	ldr	r3, [r7, #4]
 8007e92:	32b0      	adds	r2, #176	; 0xb0
 8007e94:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007e98:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 8007e9a:	687b      	ldr	r3, [r7, #4]
 8007e9c:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8007ea0:	687b      	ldr	r3, [r7, #4]
 8007ea2:	32b0      	adds	r2, #176	; 0xb0
 8007ea4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007ea8:	2b00      	cmp	r3, #0
 8007eaa:	d101      	bne.n	8007eb0 <USBD_CDC_DataOut+0x32>
  {
    return (uint8_t)USBD_FAIL;
 8007eac:	2303      	movs	r3, #3
 8007eae:	e01a      	b.n	8007ee6 <USBD_CDC_DataOut+0x68>
  }

  /* Get the received data length */
  hcdc->RxLength = USBD_LL_GetRxDataSize(pdev, epnum);
 8007eb0:	78fb      	ldrb	r3, [r7, #3]
 8007eb2:	4619      	mov	r1, r3
 8007eb4:	6878      	ldr	r0, [r7, #4]
 8007eb6:	f002 fa1a 	bl	800a2ee <USBD_LL_GetRxDataSize>
 8007eba:	4602      	mov	r2, r0
 8007ebc:	68fb      	ldr	r3, [r7, #12]
 8007ebe:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c

  /* USB data will be immediately processed, this allow next USB traffic being
  NAKed till the end of the application Xfer */

  ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Receive(hcdc->RxBuffer, &hcdc->RxLength);
 8007ec2:	687b      	ldr	r3, [r7, #4]
 8007ec4:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 8007ec8:	687a      	ldr	r2, [r7, #4]
 8007eca:	33b0      	adds	r3, #176	; 0xb0
 8007ecc:	009b      	lsls	r3, r3, #2
 8007ece:	4413      	add	r3, r2
 8007ed0:	685b      	ldr	r3, [r3, #4]
 8007ed2:	68db      	ldr	r3, [r3, #12]
 8007ed4:	68fa      	ldr	r2, [r7, #12]
 8007ed6:	f8d2 0204 	ldr.w	r0, [r2, #516]	; 0x204
 8007eda:	68fa      	ldr	r2, [r7, #12]
 8007edc:	f502 7203 	add.w	r2, r2, #524	; 0x20c
 8007ee0:	4611      	mov	r1, r2
 8007ee2:	4798      	blx	r3

  return (uint8_t)USBD_OK;
 8007ee4:	2300      	movs	r3, #0
}
 8007ee6:	4618      	mov	r0, r3
 8007ee8:	3710      	adds	r7, #16
 8007eea:	46bd      	mov	sp, r7
 8007eec:	bd80      	pop	{r7, pc}

08007eee <USBD_CDC_EP0_RxReady>:
  *         Handle EP0 Rx Ready event
  * @param  pdev: device instance
  * @retval status
  */
static uint8_t USBD_CDC_EP0_RxReady(USBD_HandleTypeDef *pdev)
{
 8007eee:	b580      	push	{r7, lr}
 8007ef0:	b084      	sub	sp, #16
 8007ef2:	af00      	add	r7, sp, #0
 8007ef4:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8007ef6:	687b      	ldr	r3, [r7, #4]
 8007ef8:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8007efc:	687b      	ldr	r3, [r7, #4]
 8007efe:	32b0      	adds	r2, #176	; 0xb0
 8007f00:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007f04:	60fb      	str	r3, [r7, #12]

  if (hcdc == NULL)
 8007f06:	68fb      	ldr	r3, [r7, #12]
 8007f08:	2b00      	cmp	r3, #0
 8007f0a:	d101      	bne.n	8007f10 <USBD_CDC_EP0_RxReady+0x22>
  {
    return (uint8_t)USBD_FAIL;
 8007f0c:	2303      	movs	r3, #3
 8007f0e:	e025      	b.n	8007f5c <USBD_CDC_EP0_RxReady+0x6e>
  }

  if ((pdev->pUserData[pdev->classId] != NULL) && (hcdc->CmdOpCode != 0xFFU))
 8007f10:	687b      	ldr	r3, [r7, #4]
 8007f12:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 8007f16:	687a      	ldr	r2, [r7, #4]
 8007f18:	33b0      	adds	r3, #176	; 0xb0
 8007f1a:	009b      	lsls	r3, r3, #2
 8007f1c:	4413      	add	r3, r2
 8007f1e:	685b      	ldr	r3, [r3, #4]
 8007f20:	2b00      	cmp	r3, #0
 8007f22:	d01a      	beq.n	8007f5a <USBD_CDC_EP0_RxReady+0x6c>
 8007f24:	68fb      	ldr	r3, [r7, #12]
 8007f26:	f893 3200 	ldrb.w	r3, [r3, #512]	; 0x200
 8007f2a:	2bff      	cmp	r3, #255	; 0xff
 8007f2c:	d015      	beq.n	8007f5a <USBD_CDC_EP0_RxReady+0x6c>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(hcdc->CmdOpCode,
 8007f2e:	687b      	ldr	r3, [r7, #4]
 8007f30:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 8007f34:	687a      	ldr	r2, [r7, #4]
 8007f36:	33b0      	adds	r3, #176	; 0xb0
 8007f38:	009b      	lsls	r3, r3, #2
 8007f3a:	4413      	add	r3, r2
 8007f3c:	685b      	ldr	r3, [r3, #4]
 8007f3e:	689b      	ldr	r3, [r3, #8]
 8007f40:	68fa      	ldr	r2, [r7, #12]
 8007f42:	f892 0200 	ldrb.w	r0, [r2, #512]	; 0x200
                                                                     (uint8_t *)hcdc->data,
 8007f46:	68f9      	ldr	r1, [r7, #12]
                                                                     (uint16_t)hcdc->CmdLength);
 8007f48:	68fa      	ldr	r2, [r7, #12]
 8007f4a:	f892 2201 	ldrb.w	r2, [r2, #513]	; 0x201
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(hcdc->CmdOpCode,
 8007f4e:	b292      	uxth	r2, r2
 8007f50:	4798      	blx	r3
    hcdc->CmdOpCode = 0xFFU;
 8007f52:	68fb      	ldr	r3, [r7, #12]
 8007f54:	22ff      	movs	r2, #255	; 0xff
 8007f56:	f883 2200 	strb.w	r2, [r3, #512]	; 0x200
  }

  return (uint8_t)USBD_OK;
 8007f5a:	2300      	movs	r3, #0
}
 8007f5c:	4618      	mov	r0, r3
 8007f5e:	3710      	adds	r7, #16
 8007f60:	46bd      	mov	sp, r7
 8007f62:	bd80      	pop	{r7, pc}

08007f64 <USBD_CDC_GetFSCfgDesc>:
  *         Return configuration descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetFSCfgDesc(uint16_t *length)
{
 8007f64:	b580      	push	{r7, lr}
 8007f66:	b086      	sub	sp, #24
 8007f68:	af00      	add	r7, sp, #0
 8007f6a:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpCmdDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_CMD_EP);
 8007f6c:	2182      	movs	r1, #130	; 0x82
 8007f6e:	4818      	ldr	r0, [pc, #96]	; (8007fd0 <USBD_CDC_GetFSCfgDesc+0x6c>)
 8007f70:	f000 fd4f 	bl	8008a12 <USBD_GetEpDesc>
 8007f74:	6178      	str	r0, [r7, #20]
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_OUT_EP);
 8007f76:	2101      	movs	r1, #1
 8007f78:	4815      	ldr	r0, [pc, #84]	; (8007fd0 <USBD_CDC_GetFSCfgDesc+0x6c>)
 8007f7a:	f000 fd4a 	bl	8008a12 <USBD_GetEpDesc>
 8007f7e:	6138      	str	r0, [r7, #16]
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_IN_EP);
 8007f80:	2181      	movs	r1, #129	; 0x81
 8007f82:	4813      	ldr	r0, [pc, #76]	; (8007fd0 <USBD_CDC_GetFSCfgDesc+0x6c>)
 8007f84:	f000 fd45 	bl	8008a12 <USBD_GetEpDesc>
 8007f88:	60f8      	str	r0, [r7, #12]

  if (pEpCmdDesc != NULL)
 8007f8a:	697b      	ldr	r3, [r7, #20]
 8007f8c:	2b00      	cmp	r3, #0
 8007f8e:	d002      	beq.n	8007f96 <USBD_CDC_GetFSCfgDesc+0x32>
  {
    pEpCmdDesc->bInterval = CDC_FS_BINTERVAL;
 8007f90:	697b      	ldr	r3, [r7, #20]
 8007f92:	2210      	movs	r2, #16
 8007f94:	719a      	strb	r2, [r3, #6]
  }

  if (pEpOutDesc != NULL)
 8007f96:	693b      	ldr	r3, [r7, #16]
 8007f98:	2b00      	cmp	r3, #0
 8007f9a:	d006      	beq.n	8007faa <USBD_CDC_GetFSCfgDesc+0x46>
  {
    pEpOutDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 8007f9c:	693b      	ldr	r3, [r7, #16]
 8007f9e:	2200      	movs	r2, #0
 8007fa0:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8007fa4:	711a      	strb	r2, [r3, #4]
 8007fa6:	2200      	movs	r2, #0
 8007fa8:	715a      	strb	r2, [r3, #5]
  }

  if (pEpInDesc != NULL)
 8007faa:	68fb      	ldr	r3, [r7, #12]
 8007fac:	2b00      	cmp	r3, #0
 8007fae:	d006      	beq.n	8007fbe <USBD_CDC_GetFSCfgDesc+0x5a>
  {
    pEpInDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 8007fb0:	68fb      	ldr	r3, [r7, #12]
 8007fb2:	2200      	movs	r2, #0
 8007fb4:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8007fb8:	711a      	strb	r2, [r3, #4]
 8007fba:	2200      	movs	r2, #0
 8007fbc:	715a      	strb	r2, [r3, #5]
  }

  *length = (uint16_t)sizeof(USBD_CDC_CfgDesc);
 8007fbe:	687b      	ldr	r3, [r7, #4]
 8007fc0:	2243      	movs	r2, #67	; 0x43
 8007fc2:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgDesc;
 8007fc4:	4b02      	ldr	r3, [pc, #8]	; (8007fd0 <USBD_CDC_GetFSCfgDesc+0x6c>)
}
 8007fc6:	4618      	mov	r0, r3
 8007fc8:	3718      	adds	r7, #24
 8007fca:	46bd      	mov	sp, r7
 8007fcc:	bd80      	pop	{r7, pc}
 8007fce:	bf00      	nop
 8007fd0:	24000054 	.word	0x24000054

08007fd4 <USBD_CDC_GetHSCfgDesc>:
  *         Return configuration descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetHSCfgDesc(uint16_t *length)
{
 8007fd4:	b580      	push	{r7, lr}
 8007fd6:	b086      	sub	sp, #24
 8007fd8:	af00      	add	r7, sp, #0
 8007fda:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpCmdDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_CMD_EP);
 8007fdc:	2182      	movs	r1, #130	; 0x82
 8007fde:	4818      	ldr	r0, [pc, #96]	; (8008040 <USBD_CDC_GetHSCfgDesc+0x6c>)
 8007fe0:	f000 fd17 	bl	8008a12 <USBD_GetEpDesc>
 8007fe4:	6178      	str	r0, [r7, #20]
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_OUT_EP);
 8007fe6:	2101      	movs	r1, #1
 8007fe8:	4815      	ldr	r0, [pc, #84]	; (8008040 <USBD_CDC_GetHSCfgDesc+0x6c>)
 8007fea:	f000 fd12 	bl	8008a12 <USBD_GetEpDesc>
 8007fee:	6138      	str	r0, [r7, #16]
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_IN_EP);
 8007ff0:	2181      	movs	r1, #129	; 0x81
 8007ff2:	4813      	ldr	r0, [pc, #76]	; (8008040 <USBD_CDC_GetHSCfgDesc+0x6c>)
 8007ff4:	f000 fd0d 	bl	8008a12 <USBD_GetEpDesc>
 8007ff8:	60f8      	str	r0, [r7, #12]

  if (pEpCmdDesc != NULL)
 8007ffa:	697b      	ldr	r3, [r7, #20]
 8007ffc:	2b00      	cmp	r3, #0
 8007ffe:	d002      	beq.n	8008006 <USBD_CDC_GetHSCfgDesc+0x32>
  {
    pEpCmdDesc->bInterval = CDC_HS_BINTERVAL;
 8008000:	697b      	ldr	r3, [r7, #20]
 8008002:	2210      	movs	r2, #16
 8008004:	719a      	strb	r2, [r3, #6]
  }

  if (pEpOutDesc != NULL)
 8008006:	693b      	ldr	r3, [r7, #16]
 8008008:	2b00      	cmp	r3, #0
 800800a:	d006      	beq.n	800801a <USBD_CDC_GetHSCfgDesc+0x46>
  {
    pEpOutDesc->wMaxPacketSize = CDC_DATA_HS_MAX_PACKET_SIZE;
 800800c:	693b      	ldr	r3, [r7, #16]
 800800e:	2200      	movs	r2, #0
 8008010:	711a      	strb	r2, [r3, #4]
 8008012:	2200      	movs	r2, #0
 8008014:	f042 0202 	orr.w	r2, r2, #2
 8008018:	715a      	strb	r2, [r3, #5]
  }

  if (pEpInDesc != NULL)
 800801a:	68fb      	ldr	r3, [r7, #12]
 800801c:	2b00      	cmp	r3, #0
 800801e:	d006      	beq.n	800802e <USBD_CDC_GetHSCfgDesc+0x5a>
  {
    pEpInDesc->wMaxPacketSize = CDC_DATA_HS_MAX_PACKET_SIZE;
 8008020:	68fb      	ldr	r3, [r7, #12]
 8008022:	2200      	movs	r2, #0
 8008024:	711a      	strb	r2, [r3, #4]
 8008026:	2200      	movs	r2, #0
 8008028:	f042 0202 	orr.w	r2, r2, #2
 800802c:	715a      	strb	r2, [r3, #5]
  }

  *length = (uint16_t)sizeof(USBD_CDC_CfgDesc);
 800802e:	687b      	ldr	r3, [r7, #4]
 8008030:	2243      	movs	r2, #67	; 0x43
 8008032:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgDesc;
 8008034:	4b02      	ldr	r3, [pc, #8]	; (8008040 <USBD_CDC_GetHSCfgDesc+0x6c>)
}
 8008036:	4618      	mov	r0, r3
 8008038:	3718      	adds	r7, #24
 800803a:	46bd      	mov	sp, r7
 800803c:	bd80      	pop	{r7, pc}
 800803e:	bf00      	nop
 8008040:	24000054 	.word	0x24000054

08008044 <USBD_CDC_GetOtherSpeedCfgDesc>:
  *         Return configuration descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetOtherSpeedCfgDesc(uint16_t *length)
{
 8008044:	b580      	push	{r7, lr}
 8008046:	b086      	sub	sp, #24
 8008048:	af00      	add	r7, sp, #0
 800804a:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpCmdDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_CMD_EP);
 800804c:	2182      	movs	r1, #130	; 0x82
 800804e:	4818      	ldr	r0, [pc, #96]	; (80080b0 <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
 8008050:	f000 fcdf 	bl	8008a12 <USBD_GetEpDesc>
 8008054:	6178      	str	r0, [r7, #20]
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_OUT_EP);
 8008056:	2101      	movs	r1, #1
 8008058:	4815      	ldr	r0, [pc, #84]	; (80080b0 <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
 800805a:	f000 fcda 	bl	8008a12 <USBD_GetEpDesc>
 800805e:	6138      	str	r0, [r7, #16]
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_IN_EP);
 8008060:	2181      	movs	r1, #129	; 0x81
 8008062:	4813      	ldr	r0, [pc, #76]	; (80080b0 <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
 8008064:	f000 fcd5 	bl	8008a12 <USBD_GetEpDesc>
 8008068:	60f8      	str	r0, [r7, #12]

  if (pEpCmdDesc != NULL)
 800806a:	697b      	ldr	r3, [r7, #20]
 800806c:	2b00      	cmp	r3, #0
 800806e:	d002      	beq.n	8008076 <USBD_CDC_GetOtherSpeedCfgDesc+0x32>
  {
    pEpCmdDesc->bInterval = CDC_FS_BINTERVAL;
 8008070:	697b      	ldr	r3, [r7, #20]
 8008072:	2210      	movs	r2, #16
 8008074:	719a      	strb	r2, [r3, #6]
  }

  if (pEpOutDesc != NULL)
 8008076:	693b      	ldr	r3, [r7, #16]
 8008078:	2b00      	cmp	r3, #0
 800807a:	d006      	beq.n	800808a <USBD_CDC_GetOtherSpeedCfgDesc+0x46>
  {
    pEpOutDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 800807c:	693b      	ldr	r3, [r7, #16]
 800807e:	2200      	movs	r2, #0
 8008080:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8008084:	711a      	strb	r2, [r3, #4]
 8008086:	2200      	movs	r2, #0
 8008088:	715a      	strb	r2, [r3, #5]
  }

  if (pEpInDesc != NULL)
 800808a:	68fb      	ldr	r3, [r7, #12]
 800808c:	2b00      	cmp	r3, #0
 800808e:	d006      	beq.n	800809e <USBD_CDC_GetOtherSpeedCfgDesc+0x5a>
  {
    pEpInDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 8008090:	68fb      	ldr	r3, [r7, #12]
 8008092:	2200      	movs	r2, #0
 8008094:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8008098:	711a      	strb	r2, [r3, #4]
 800809a:	2200      	movs	r2, #0
 800809c:	715a      	strb	r2, [r3, #5]
  }

  *length = (uint16_t)sizeof(USBD_CDC_CfgDesc);
 800809e:	687b      	ldr	r3, [r7, #4]
 80080a0:	2243      	movs	r2, #67	; 0x43
 80080a2:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgDesc;
 80080a4:	4b02      	ldr	r3, [pc, #8]	; (80080b0 <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
}
 80080a6:	4618      	mov	r0, r3
 80080a8:	3718      	adds	r7, #24
 80080aa:	46bd      	mov	sp, r7
 80080ac:	bd80      	pop	{r7, pc}
 80080ae:	bf00      	nop
 80080b0:	24000054 	.word	0x24000054

080080b4 <USBD_CDC_GetDeviceQualifierDescriptor>:
  *         return Device Qualifier descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
uint8_t *USBD_CDC_GetDeviceQualifierDescriptor(uint16_t *length)
{
 80080b4:	b480      	push	{r7}
 80080b6:	b083      	sub	sp, #12
 80080b8:	af00      	add	r7, sp, #0
 80080ba:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_DeviceQualifierDesc);
 80080bc:	687b      	ldr	r3, [r7, #4]
 80080be:	220a      	movs	r2, #10
 80080c0:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_DeviceQualifierDesc;
 80080c2:	4b03      	ldr	r3, [pc, #12]	; (80080d0 <USBD_CDC_GetDeviceQualifierDescriptor+0x1c>)
}
 80080c4:	4618      	mov	r0, r3
 80080c6:	370c      	adds	r7, #12
 80080c8:	46bd      	mov	sp, r7
 80080ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80080ce:	4770      	bx	lr
 80080d0:	24000010 	.word	0x24000010

080080d4 <USBD_CDC_RegisterInterface>:
  * @param  fops: CD  Interface callback
  * @retval status
  */
uint8_t USBD_CDC_RegisterInterface(USBD_HandleTypeDef *pdev,
                                   USBD_CDC_ItfTypeDef *fops)
{
 80080d4:	b480      	push	{r7}
 80080d6:	b083      	sub	sp, #12
 80080d8:	af00      	add	r7, sp, #0
 80080da:	6078      	str	r0, [r7, #4]
 80080dc:	6039      	str	r1, [r7, #0]
  if (fops == NULL)
 80080de:	683b      	ldr	r3, [r7, #0]
 80080e0:	2b00      	cmp	r3, #0
 80080e2:	d101      	bne.n	80080e8 <USBD_CDC_RegisterInterface+0x14>
  {
    return (uint8_t)USBD_FAIL;
 80080e4:	2303      	movs	r3, #3
 80080e6:	e009      	b.n	80080fc <USBD_CDC_RegisterInterface+0x28>
  }

  pdev->pUserData[pdev->classId] = fops;
 80080e8:	687b      	ldr	r3, [r7, #4]
 80080ea:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 80080ee:	687a      	ldr	r2, [r7, #4]
 80080f0:	33b0      	adds	r3, #176	; 0xb0
 80080f2:	009b      	lsls	r3, r3, #2
 80080f4:	4413      	add	r3, r2
 80080f6:	683a      	ldr	r2, [r7, #0]
 80080f8:	605a      	str	r2, [r3, #4]

  return (uint8_t)USBD_OK;
 80080fa:	2300      	movs	r3, #0
}
 80080fc:	4618      	mov	r0, r3
 80080fe:	370c      	adds	r7, #12
 8008100:	46bd      	mov	sp, r7
 8008102:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008106:	4770      	bx	lr

08008108 <USBD_CDC_SetTxBuffer>:
  * @param  length: Tx Buffer length
  * @retval status
  */
uint8_t USBD_CDC_SetTxBuffer(USBD_HandleTypeDef *pdev,
                             uint8_t *pbuff, uint32_t length)
{
 8008108:	b480      	push	{r7}
 800810a:	b087      	sub	sp, #28
 800810c:	af00      	add	r7, sp, #0
 800810e:	60f8      	str	r0, [r7, #12]
 8008110:	60b9      	str	r1, [r7, #8]
 8008112:	607a      	str	r2, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8008114:	68fb      	ldr	r3, [r7, #12]
 8008116:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800811a:	68fb      	ldr	r3, [r7, #12]
 800811c:	32b0      	adds	r2, #176	; 0xb0
 800811e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008122:	617b      	str	r3, [r7, #20]

  if (hcdc == NULL)
 8008124:	697b      	ldr	r3, [r7, #20]
 8008126:	2b00      	cmp	r3, #0
 8008128:	d101      	bne.n	800812e <USBD_CDC_SetTxBuffer+0x26>
  {
    return (uint8_t)USBD_FAIL;
 800812a:	2303      	movs	r3, #3
 800812c:	e008      	b.n	8008140 <USBD_CDC_SetTxBuffer+0x38>
  }

  hcdc->TxBuffer = pbuff;
 800812e:	697b      	ldr	r3, [r7, #20]
 8008130:	68ba      	ldr	r2, [r7, #8]
 8008132:	f8c3 2208 	str.w	r2, [r3, #520]	; 0x208
  hcdc->TxLength = length;
 8008136:	697b      	ldr	r3, [r7, #20]
 8008138:	687a      	ldr	r2, [r7, #4]
 800813a:	f8c3 2210 	str.w	r2, [r3, #528]	; 0x210

  return (uint8_t)USBD_OK;
 800813e:	2300      	movs	r3, #0
}
 8008140:	4618      	mov	r0, r3
 8008142:	371c      	adds	r7, #28
 8008144:	46bd      	mov	sp, r7
 8008146:	f85d 7b04 	ldr.w	r7, [sp], #4
 800814a:	4770      	bx	lr

0800814c <USBD_CDC_SetRxBuffer>:
  * @param  pdev: device instance
  * @param  pbuff: Rx Buffer
  * @retval status
  */
uint8_t USBD_CDC_SetRxBuffer(USBD_HandleTypeDef *pdev, uint8_t *pbuff)
{
 800814c:	b480      	push	{r7}
 800814e:	b085      	sub	sp, #20
 8008150:	af00      	add	r7, sp, #0
 8008152:	6078      	str	r0, [r7, #4]
 8008154:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8008156:	687b      	ldr	r3, [r7, #4]
 8008158:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800815c:	687b      	ldr	r3, [r7, #4]
 800815e:	32b0      	adds	r2, #176	; 0xb0
 8008160:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008164:	60fb      	str	r3, [r7, #12]

  if (hcdc == NULL)
 8008166:	68fb      	ldr	r3, [r7, #12]
 8008168:	2b00      	cmp	r3, #0
 800816a:	d101      	bne.n	8008170 <USBD_CDC_SetRxBuffer+0x24>
  {
    return (uint8_t)USBD_FAIL;
 800816c:	2303      	movs	r3, #3
 800816e:	e004      	b.n	800817a <USBD_CDC_SetRxBuffer+0x2e>
  }

  hcdc->RxBuffer = pbuff;
 8008170:	68fb      	ldr	r3, [r7, #12]
 8008172:	683a      	ldr	r2, [r7, #0]
 8008174:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204

  return (uint8_t)USBD_OK;
 8008178:	2300      	movs	r3, #0
}
 800817a:	4618      	mov	r0, r3
 800817c:	3714      	adds	r7, #20
 800817e:	46bd      	mov	sp, r7
 8008180:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008184:	4770      	bx	lr
	...

08008188 <USBD_CDC_TransmitPacket>:
  *         Transmit packet on IN endpoint
  * @param  pdev: device instance
  * @retval status
  */
uint8_t USBD_CDC_TransmitPacket(USBD_HandleTypeDef *pdev)
{
 8008188:	b580      	push	{r7, lr}
 800818a:	b084      	sub	sp, #16
 800818c:	af00      	add	r7, sp, #0
 800818e:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8008190:	687b      	ldr	r3, [r7, #4]
 8008192:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8008196:	687b      	ldr	r3, [r7, #4]
 8008198:	32b0      	adds	r2, #176	; 0xb0
 800819a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800819e:	60bb      	str	r3, [r7, #8]
  USBD_StatusTypeDef ret = USBD_BUSY;
 80081a0:	2301      	movs	r3, #1
 80081a2:	73fb      	strb	r3, [r7, #15]

#ifdef USE_USBD_COMPOSITE
  /* Get the Endpoints addresses allocated for this class instance */
  CDCInEpAdd  = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_BULK);
#endif /* USE_USBD_COMPOSITE */
  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 80081a4:	687b      	ldr	r3, [r7, #4]
 80081a6:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 80081aa:	687b      	ldr	r3, [r7, #4]
 80081ac:	32b0      	adds	r2, #176	; 0xb0
 80081ae:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80081b2:	2b00      	cmp	r3, #0
 80081b4:	d101      	bne.n	80081ba <USBD_CDC_TransmitPacket+0x32>
  {
    return (uint8_t)USBD_FAIL;
 80081b6:	2303      	movs	r3, #3
 80081b8:	e025      	b.n	8008206 <USBD_CDC_TransmitPacket+0x7e>
  }

  if (hcdc->TxState == 0U)
 80081ba:	68bb      	ldr	r3, [r7, #8]
 80081bc:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 80081c0:	2b00      	cmp	r3, #0
 80081c2:	d11f      	bne.n	8008204 <USBD_CDC_TransmitPacket+0x7c>
  {
    /* Tx Transfer in progress */
    hcdc->TxState = 1U;
 80081c4:	68bb      	ldr	r3, [r7, #8]
 80081c6:	2201      	movs	r2, #1
 80081c8:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214

    /* Update the packet total length */
    pdev->ep_in[CDCInEpAdd & 0xFU].total_length = hcdc->TxLength;
 80081cc:	4b10      	ldr	r3, [pc, #64]	; (8008210 <USBD_CDC_TransmitPacket+0x88>)
 80081ce:	781b      	ldrb	r3, [r3, #0]
 80081d0:	f003 020f 	and.w	r2, r3, #15
 80081d4:	68bb      	ldr	r3, [r7, #8]
 80081d6:	f8d3 1210 	ldr.w	r1, [r3, #528]	; 0x210
 80081da:	6878      	ldr	r0, [r7, #4]
 80081dc:	4613      	mov	r3, r2
 80081de:	009b      	lsls	r3, r3, #2
 80081e0:	4413      	add	r3, r2
 80081e2:	009b      	lsls	r3, r3, #2
 80081e4:	4403      	add	r3, r0
 80081e6:	3318      	adds	r3, #24
 80081e8:	6019      	str	r1, [r3, #0]

    /* Transmit next packet */
    (void)USBD_LL_Transmit(pdev, CDCInEpAdd, hcdc->TxBuffer, hcdc->TxLength);
 80081ea:	4b09      	ldr	r3, [pc, #36]	; (8008210 <USBD_CDC_TransmitPacket+0x88>)
 80081ec:	7819      	ldrb	r1, [r3, #0]
 80081ee:	68bb      	ldr	r3, [r7, #8]
 80081f0:	f8d3 2208 	ldr.w	r2, [r3, #520]	; 0x208
 80081f4:	68bb      	ldr	r3, [r7, #8]
 80081f6:	f8d3 3210 	ldr.w	r3, [r3, #528]	; 0x210
 80081fa:	6878      	ldr	r0, [r7, #4]
 80081fc:	f002 f835 	bl	800a26a <USBD_LL_Transmit>

    ret = USBD_OK;
 8008200:	2300      	movs	r3, #0
 8008202:	73fb      	strb	r3, [r7, #15]
  }

  return (uint8_t)ret;
 8008204:	7bfb      	ldrb	r3, [r7, #15]
}
 8008206:	4618      	mov	r0, r3
 8008208:	3710      	adds	r7, #16
 800820a:	46bd      	mov	sp, r7
 800820c:	bd80      	pop	{r7, pc}
 800820e:	bf00      	nop
 8008210:	24000097 	.word	0x24000097

08008214 <USBD_CDC_ReceivePacket>:
  *         prepare OUT Endpoint for reception
  * @param  pdev: device instance
  * @retval status
  */
uint8_t USBD_CDC_ReceivePacket(USBD_HandleTypeDef *pdev)
{
 8008214:	b580      	push	{r7, lr}
 8008216:	b084      	sub	sp, #16
 8008218:	af00      	add	r7, sp, #0
 800821a:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800821c:	687b      	ldr	r3, [r7, #4]
 800821e:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8008222:	687b      	ldr	r3, [r7, #4]
 8008224:	32b0      	adds	r2, #176	; 0xb0
 8008226:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800822a:	60fb      	str	r3, [r7, #12]
#ifdef USE_USBD_COMPOSITE
  /* Get the Endpoints addresses allocated for this class instance */
  CDCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK);
#endif /* USE_USBD_COMPOSITE */

  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 800822c:	687b      	ldr	r3, [r7, #4]
 800822e:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8008232:	687b      	ldr	r3, [r7, #4]
 8008234:	32b0      	adds	r2, #176	; 0xb0
 8008236:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800823a:	2b00      	cmp	r3, #0
 800823c:	d101      	bne.n	8008242 <USBD_CDC_ReceivePacket+0x2e>
  {
    return (uint8_t)USBD_FAIL;
 800823e:	2303      	movs	r3, #3
 8008240:	e018      	b.n	8008274 <USBD_CDC_ReceivePacket+0x60>
  }

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 8008242:	687b      	ldr	r3, [r7, #4]
 8008244:	7c1b      	ldrb	r3, [r3, #16]
 8008246:	2b00      	cmp	r3, #0
 8008248:	d10a      	bne.n	8008260 <USBD_CDC_ReceivePacket+0x4c>
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 800824a:	4b0c      	ldr	r3, [pc, #48]	; (800827c <USBD_CDC_ReceivePacket+0x68>)
 800824c:	7819      	ldrb	r1, [r3, #0]
 800824e:	68fb      	ldr	r3, [r7, #12]
 8008250:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8008254:	f44f 7300 	mov.w	r3, #512	; 0x200
 8008258:	6878      	ldr	r0, [r7, #4]
 800825a:	f002 f827 	bl	800a2ac <USBD_LL_PrepareReceive>
 800825e:	e008      	b.n	8008272 <USBD_CDC_ReceivePacket+0x5e>
                                 CDC_DATA_HS_OUT_PACKET_SIZE);
  }
  else
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 8008260:	4b06      	ldr	r3, [pc, #24]	; (800827c <USBD_CDC_ReceivePacket+0x68>)
 8008262:	7819      	ldrb	r1, [r3, #0]
 8008264:	68fb      	ldr	r3, [r7, #12]
 8008266:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 800826a:	2340      	movs	r3, #64	; 0x40
 800826c:	6878      	ldr	r0, [r7, #4]
 800826e:	f002 f81d 	bl	800a2ac <USBD_LL_PrepareReceive>
                                 CDC_DATA_FS_OUT_PACKET_SIZE);
  }

  return (uint8_t)USBD_OK;
 8008272:	2300      	movs	r3, #0
}
 8008274:	4618      	mov	r0, r3
 8008276:	3710      	adds	r7, #16
 8008278:	46bd      	mov	sp, r7
 800827a:	bd80      	pop	{r7, pc}
 800827c:	24000098 	.word	0x24000098

08008280 <USBD_Init>:
  * @param  id: Low level core index
  * @retval None
  */
USBD_StatusTypeDef USBD_Init(USBD_HandleTypeDef *pdev,
                             USBD_DescriptorsTypeDef *pdesc, uint8_t id)
{
 8008280:	b580      	push	{r7, lr}
 8008282:	b086      	sub	sp, #24
 8008284:	af00      	add	r7, sp, #0
 8008286:	60f8      	str	r0, [r7, #12]
 8008288:	60b9      	str	r1, [r7, #8]
 800828a:	4613      	mov	r3, r2
 800828c:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef ret;

  /* Check whether the USB Host handle is valid */
  if (pdev == NULL)
 800828e:	68fb      	ldr	r3, [r7, #12]
 8008290:	2b00      	cmp	r3, #0
 8008292:	d101      	bne.n	8008298 <USBD_Init+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Device handle");
#endif /* (USBD_DEBUG_LEVEL > 1U) */
    return USBD_FAIL;
 8008294:	2303      	movs	r3, #3
 8008296:	e01f      	b.n	80082d8 <USBD_Init+0x58>
    pdev->NumClasses = 0;
    pdev->classId = 0;
  }
#else
  /* Unlink previous class*/
  pdev->pClass[0] = NULL;
 8008298:	68fb      	ldr	r3, [r7, #12]
 800829a:	2200      	movs	r2, #0
 800829c:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8
  pdev->pUserData[0] = NULL;
 80082a0:	68fb      	ldr	r3, [r7, #12]
 80082a2:	2200      	movs	r2, #0
 80082a4:	f8c3 22c4 	str.w	r2, [r3, #708]	; 0x2c4
#endif /* USE_USBD_COMPOSITE */

  pdev->pConfDesc = NULL;
 80082a8:	68fb      	ldr	r3, [r7, #12]
 80082aa:	2200      	movs	r2, #0
 80082ac:	f8c3 22d0 	str.w	r2, [r3, #720]	; 0x2d0

  /* Assign USBD Descriptors */
  if (pdesc != NULL)
 80082b0:	68bb      	ldr	r3, [r7, #8]
 80082b2:	2b00      	cmp	r3, #0
 80082b4:	d003      	beq.n	80082be <USBD_Init+0x3e>
  {
    pdev->pDesc = pdesc;
 80082b6:	68fb      	ldr	r3, [r7, #12]
 80082b8:	68ba      	ldr	r2, [r7, #8]
 80082ba:	f8c3 22b4 	str.w	r2, [r3, #692]	; 0x2b4
  }

  /* Set Device initial State */
  pdev->dev_state = USBD_STATE_DEFAULT;
 80082be:	68fb      	ldr	r3, [r7, #12]
 80082c0:	2201      	movs	r2, #1
 80082c2:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->id = id;
 80082c6:	68fb      	ldr	r3, [r7, #12]
 80082c8:	79fa      	ldrb	r2, [r7, #7]
 80082ca:	701a      	strb	r2, [r3, #0]

  /* Initialize low level driver */
  ret = USBD_LL_Init(pdev);
 80082cc:	68f8      	ldr	r0, [r7, #12]
 80082ce:	f001 fe91 	bl	8009ff4 <USBD_LL_Init>
 80082d2:	4603      	mov	r3, r0
 80082d4:	75fb      	strb	r3, [r7, #23]

  return ret;
 80082d6:	7dfb      	ldrb	r3, [r7, #23]
}
 80082d8:	4618      	mov	r0, r3
 80082da:	3718      	adds	r7, #24
 80082dc:	46bd      	mov	sp, r7
 80082de:	bd80      	pop	{r7, pc}

080082e0 <USBD_RegisterClass>:
  * @param  pDevice : Device Handle
  * @param  pclass: Class handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_RegisterClass(USBD_HandleTypeDef *pdev, USBD_ClassTypeDef *pclass)
{
 80082e0:	b580      	push	{r7, lr}
 80082e2:	b084      	sub	sp, #16
 80082e4:	af00      	add	r7, sp, #0
 80082e6:	6078      	str	r0, [r7, #4]
 80082e8:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 80082ea:	2300      	movs	r3, #0
 80082ec:	81fb      	strh	r3, [r7, #14]

  if (pclass == NULL)
 80082ee:	683b      	ldr	r3, [r7, #0]
 80082f0:	2b00      	cmp	r3, #0
 80082f2:	d101      	bne.n	80082f8 <USBD_RegisterClass+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Class handle");
#endif /* (USBD_DEBUG_LEVEL > 1U) */
    return USBD_FAIL;
 80082f4:	2303      	movs	r3, #3
 80082f6:	e025      	b.n	8008344 <USBD_RegisterClass+0x64>
  }

  /* link the class to the USB Device handle */
  pdev->pClass[0] = pclass;
 80082f8:	687b      	ldr	r3, [r7, #4]
 80082fa:	683a      	ldr	r2, [r7, #0]
 80082fc:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8
  if (pdev->pClass[pdev->classId]->GetHSConfigDescriptor != NULL)
  {
    pdev->pConfDesc = (void *)pdev->pClass[pdev->classId]->GetHSConfigDescriptor(&len);
  }
#else /* Default USE_USB_FS */
  if (pdev->pClass[pdev->classId]->GetFSConfigDescriptor != NULL)
 8008300:	687b      	ldr	r3, [r7, #4]
 8008302:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8008306:	687b      	ldr	r3, [r7, #4]
 8008308:	32ae      	adds	r2, #174	; 0xae
 800830a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800830e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008310:	2b00      	cmp	r3, #0
 8008312:	d00f      	beq.n	8008334 <USBD_RegisterClass+0x54>
  {
    pdev->pConfDesc = (void *)pdev->pClass[pdev->classId]->GetFSConfigDescriptor(&len);
 8008314:	687b      	ldr	r3, [r7, #4]
 8008316:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800831a:	687b      	ldr	r3, [r7, #4]
 800831c:	32ae      	adds	r2, #174	; 0xae
 800831e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008322:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008324:	f107 020e 	add.w	r2, r7, #14
 8008328:	4610      	mov	r0, r2
 800832a:	4798      	blx	r3
 800832c:	4602      	mov	r2, r0
 800832e:	687b      	ldr	r3, [r7, #4]
 8008330:	f8c3 22d0 	str.w	r2, [r3, #720]	; 0x2d0
  }
#endif /* USE_USB_FS */

  /* Increment the NumClasses */
  pdev->NumClasses ++;
 8008334:	687b      	ldr	r3, [r7, #4]
 8008336:	f8d3 32d8 	ldr.w	r3, [r3, #728]	; 0x2d8
 800833a:	1c5a      	adds	r2, r3, #1
 800833c:	687b      	ldr	r3, [r7, #4]
 800833e:	f8c3 22d8 	str.w	r2, [r3, #728]	; 0x2d8

  return USBD_OK;
 8008342:	2300      	movs	r3, #0
}
 8008344:	4618      	mov	r0, r3
 8008346:	3710      	adds	r7, #16
 8008348:	46bd      	mov	sp, r7
 800834a:	bd80      	pop	{r7, pc}

0800834c <USBD_Start>:
  *         Start the USB Device Core.
  * @param  pdev: Device Handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_Start(USBD_HandleTypeDef *pdev)
{
 800834c:	b580      	push	{r7, lr}
 800834e:	b082      	sub	sp, #8
 8008350:	af00      	add	r7, sp, #0
 8008352:	6078      	str	r0, [r7, #4]
#ifdef USE_USBD_COMPOSITE
  pdev->classId = 0U;
#endif /* USE_USBD_COMPOSITE */

  /* Start the low level driver  */
  return USBD_LL_Start(pdev);
 8008354:	6878      	ldr	r0, [r7, #4]
 8008356:	f001 fe9f 	bl	800a098 <USBD_LL_Start>
 800835a:	4603      	mov	r3, r0
}
 800835c:	4618      	mov	r0, r3
 800835e:	3708      	adds	r7, #8
 8008360:	46bd      	mov	sp, r7
 8008362:	bd80      	pop	{r7, pc}

08008364 <USBD_RunTestMode>:
  *         Launch test mode process
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_RunTestMode(USBD_HandleTypeDef *pdev)
{
 8008364:	b480      	push	{r7}
 8008366:	b083      	sub	sp, #12
 8008368:	af00      	add	r7, sp, #0
 800836a:	6078      	str	r0, [r7, #4]
  return ret;
#else
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 800836c:	2300      	movs	r3, #0
#endif /* USBD_HS_TESTMODE_ENABLE */
}
 800836e:	4618      	mov	r0, r3
 8008370:	370c      	adds	r7, #12
 8008372:	46bd      	mov	sp, r7
 8008374:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008378:	4770      	bx	lr

0800837a <USBD_SetClassConfig>:
  * @param  cfgidx: configuration index
  * @retval status
  */

USBD_StatusTypeDef USBD_SetClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 800837a:	b580      	push	{r7, lr}
 800837c:	b084      	sub	sp, #16
 800837e:	af00      	add	r7, sp, #0
 8008380:	6078      	str	r0, [r7, #4]
 8008382:	460b      	mov	r3, r1
 8008384:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_OK;
 8008386:	2300      	movs	r3, #0
 8008388:	73fb      	strb	r3, [r7, #15]
        }
      }
    }
  }
#else
  if (pdev->pClass[0] != NULL)
 800838a:	687b      	ldr	r3, [r7, #4]
 800838c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8008390:	2b00      	cmp	r3, #0
 8008392:	d009      	beq.n	80083a8 <USBD_SetClassConfig+0x2e>
  {
    /* Set configuration and Start the Class */
    ret = (USBD_StatusTypeDef)pdev->pClass[0]->Init(pdev, cfgidx);
 8008394:	687b      	ldr	r3, [r7, #4]
 8008396:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800839a:	681b      	ldr	r3, [r3, #0]
 800839c:	78fa      	ldrb	r2, [r7, #3]
 800839e:	4611      	mov	r1, r2
 80083a0:	6878      	ldr	r0, [r7, #4]
 80083a2:	4798      	blx	r3
 80083a4:	4603      	mov	r3, r0
 80083a6:	73fb      	strb	r3, [r7, #15]
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 80083a8:	7bfb      	ldrb	r3, [r7, #15]
}
 80083aa:	4618      	mov	r0, r3
 80083ac:	3710      	adds	r7, #16
 80083ae:	46bd      	mov	sp, r7
 80083b0:	bd80      	pop	{r7, pc}

080083b2 <USBD_ClrClassConfig>:
  * @param  pdev: device instance
  * @param  cfgidx: configuration index
  * @retval status: USBD_StatusTypeDef
  */
USBD_StatusTypeDef USBD_ClrClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 80083b2:	b580      	push	{r7, lr}
 80083b4:	b084      	sub	sp, #16
 80083b6:	af00      	add	r7, sp, #0
 80083b8:	6078      	str	r0, [r7, #4]
 80083ba:	460b      	mov	r3, r1
 80083bc:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_OK;
 80083be:	2300      	movs	r3, #0
 80083c0:	73fb      	strb	r3, [r7, #15]
      }
    }
  }
#else
  /* Clear configuration  and De-initialize the Class process */
  if (pdev->pClass[0]->DeInit(pdev, cfgidx) != 0U)
 80083c2:	687b      	ldr	r3, [r7, #4]
 80083c4:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80083c8:	685b      	ldr	r3, [r3, #4]
 80083ca:	78fa      	ldrb	r2, [r7, #3]
 80083cc:	4611      	mov	r1, r2
 80083ce:	6878      	ldr	r0, [r7, #4]
 80083d0:	4798      	blx	r3
 80083d2:	4603      	mov	r3, r0
 80083d4:	2b00      	cmp	r3, #0
 80083d6:	d001      	beq.n	80083dc <USBD_ClrClassConfig+0x2a>
  {
    ret = USBD_FAIL;
 80083d8:	2303      	movs	r3, #3
 80083da:	73fb      	strb	r3, [r7, #15]
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 80083dc:	7bfb      	ldrb	r3, [r7, #15]
}
 80083de:	4618      	mov	r0, r3
 80083e0:	3710      	adds	r7, #16
 80083e2:	46bd      	mov	sp, r7
 80083e4:	bd80      	pop	{r7, pc}

080083e6 <USBD_LL_SetupStage>:
  *         Handle the setup stage
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetupStage(USBD_HandleTypeDef *pdev, uint8_t *psetup)
{
 80083e6:	b580      	push	{r7, lr}
 80083e8:	b084      	sub	sp, #16
 80083ea:	af00      	add	r7, sp, #0
 80083ec:	6078      	str	r0, [r7, #4]
 80083ee:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret;

  USBD_ParseSetupRequest(&pdev->request, psetup);
 80083f0:	687b      	ldr	r3, [r7, #4]
 80083f2:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 80083f6:	6839      	ldr	r1, [r7, #0]
 80083f8:	4618      	mov	r0, r3
 80083fa:	f001 f908 	bl	800960e <USBD_ParseSetupRequest>

  pdev->ep0_state = USBD_EP0_SETUP;
 80083fe:	687b      	ldr	r3, [r7, #4]
 8008400:	2201      	movs	r2, #1
 8008402:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  pdev->ep0_data_len = pdev->request.wLength;
 8008406:	687b      	ldr	r3, [r7, #4]
 8008408:	f8b3 32b0 	ldrh.w	r3, [r3, #688]	; 0x2b0
 800840c:	461a      	mov	r2, r3
 800840e:	687b      	ldr	r3, [r7, #4]
 8008410:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

  switch (pdev->request.bmRequest & 0x1FU)
 8008414:	687b      	ldr	r3, [r7, #4]
 8008416:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 800841a:	f003 031f 	and.w	r3, r3, #31
 800841e:	2b02      	cmp	r3, #2
 8008420:	d01a      	beq.n	8008458 <USBD_LL_SetupStage+0x72>
 8008422:	2b02      	cmp	r3, #2
 8008424:	d822      	bhi.n	800846c <USBD_LL_SetupStage+0x86>
 8008426:	2b00      	cmp	r3, #0
 8008428:	d002      	beq.n	8008430 <USBD_LL_SetupStage+0x4a>
 800842a:	2b01      	cmp	r3, #1
 800842c:	d00a      	beq.n	8008444 <USBD_LL_SetupStage+0x5e>
 800842e:	e01d      	b.n	800846c <USBD_LL_SetupStage+0x86>
  {
    case USB_REQ_RECIPIENT_DEVICE:
      ret = USBD_StdDevReq(pdev, &pdev->request);
 8008430:	687b      	ldr	r3, [r7, #4]
 8008432:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 8008436:	4619      	mov	r1, r3
 8008438:	6878      	ldr	r0, [r7, #4]
 800843a:	f000 fb5f 	bl	8008afc <USBD_StdDevReq>
 800843e:	4603      	mov	r3, r0
 8008440:	73fb      	strb	r3, [r7, #15]
      break;
 8008442:	e020      	b.n	8008486 <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_INTERFACE:
      ret = USBD_StdItfReq(pdev, &pdev->request);
 8008444:	687b      	ldr	r3, [r7, #4]
 8008446:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 800844a:	4619      	mov	r1, r3
 800844c:	6878      	ldr	r0, [r7, #4]
 800844e:	f000 fbc7 	bl	8008be0 <USBD_StdItfReq>
 8008452:	4603      	mov	r3, r0
 8008454:	73fb      	strb	r3, [r7, #15]
      break;
 8008456:	e016      	b.n	8008486 <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_ENDPOINT:
      ret = USBD_StdEPReq(pdev, &pdev->request);
 8008458:	687b      	ldr	r3, [r7, #4]
 800845a:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 800845e:	4619      	mov	r1, r3
 8008460:	6878      	ldr	r0, [r7, #4]
 8008462:	f000 fc29 	bl	8008cb8 <USBD_StdEPReq>
 8008466:	4603      	mov	r3, r0
 8008468:	73fb      	strb	r3, [r7, #15]
      break;
 800846a:	e00c      	b.n	8008486 <USBD_LL_SetupStage+0xa0>

    default:
      ret = USBD_LL_StallEP(pdev, (pdev->request.bmRequest & 0x80U));
 800846c:	687b      	ldr	r3, [r7, #4]
 800846e:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 8008472:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 8008476:	b2db      	uxtb	r3, r3
 8008478:	4619      	mov	r1, r3
 800847a:	6878      	ldr	r0, [r7, #4]
 800847c:	f001 fe6c 	bl	800a158 <USBD_LL_StallEP>
 8008480:	4603      	mov	r3, r0
 8008482:	73fb      	strb	r3, [r7, #15]
      break;
 8008484:	bf00      	nop
  }

  return ret;
 8008486:	7bfb      	ldrb	r3, [r7, #15]
}
 8008488:	4618      	mov	r0, r3
 800848a:	3710      	adds	r7, #16
 800848c:	46bd      	mov	sp, r7
 800848e:	bd80      	pop	{r7, pc}

08008490 <USBD_LL_DataOutStage>:
  * @param  pdata: data pointer
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataOutStage(USBD_HandleTypeDef *pdev,
                                        uint8_t epnum, uint8_t *pdata)
{
 8008490:	b580      	push	{r7, lr}
 8008492:	b086      	sub	sp, #24
 8008494:	af00      	add	r7, sp, #0
 8008496:	60f8      	str	r0, [r7, #12]
 8008498:	460b      	mov	r3, r1
 800849a:	607a      	str	r2, [r7, #4]
 800849c:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret = USBD_OK;
 800849e:	2300      	movs	r3, #0
 80084a0:	75fb      	strb	r3, [r7, #23]
  uint8_t idx;

  if (epnum == 0U)
 80084a2:	7afb      	ldrb	r3, [r7, #11]
 80084a4:	2b00      	cmp	r3, #0
 80084a6:	d16e      	bne.n	8008586 <USBD_LL_DataOutStage+0xf6>
  {
    pep = &pdev->ep_out[0];
 80084a8:	68fb      	ldr	r3, [r7, #12]
 80084aa:	f503 73aa 	add.w	r3, r3, #340	; 0x154
 80084ae:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_OUT)
 80084b0:	68fb      	ldr	r3, [r7, #12]
 80084b2:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 80084b6:	2b03      	cmp	r3, #3
 80084b8:	f040 8098 	bne.w	80085ec <USBD_LL_DataOutStage+0x15c>
    {
      if (pep->rem_length > pep->maxpacket)
 80084bc:	693b      	ldr	r3, [r7, #16]
 80084be:	689a      	ldr	r2, [r3, #8]
 80084c0:	693b      	ldr	r3, [r7, #16]
 80084c2:	68db      	ldr	r3, [r3, #12]
 80084c4:	429a      	cmp	r2, r3
 80084c6:	d913      	bls.n	80084f0 <USBD_LL_DataOutStage+0x60>
      {
        pep->rem_length -= pep->maxpacket;
 80084c8:	693b      	ldr	r3, [r7, #16]
 80084ca:	689a      	ldr	r2, [r3, #8]
 80084cc:	693b      	ldr	r3, [r7, #16]
 80084ce:	68db      	ldr	r3, [r3, #12]
 80084d0:	1ad2      	subs	r2, r2, r3
 80084d2:	693b      	ldr	r3, [r7, #16]
 80084d4:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueRx(pdev, pdata, MIN(pep->rem_length, pep->maxpacket));
 80084d6:	693b      	ldr	r3, [r7, #16]
 80084d8:	68da      	ldr	r2, [r3, #12]
 80084da:	693b      	ldr	r3, [r7, #16]
 80084dc:	689b      	ldr	r3, [r3, #8]
 80084de:	4293      	cmp	r3, r2
 80084e0:	bf28      	it	cs
 80084e2:	4613      	movcs	r3, r2
 80084e4:	461a      	mov	r2, r3
 80084e6:	6879      	ldr	r1, [r7, #4]
 80084e8:	68f8      	ldr	r0, [r7, #12]
 80084ea:	f001 f984 	bl	80097f6 <USBD_CtlContinueRx>
 80084ee:	e07d      	b.n	80085ec <USBD_LL_DataOutStage+0x15c>
      }
      else
      {
        /* Find the class ID relative to the current request */
        switch (pdev->request.bmRequest & 0x1FU)
 80084f0:	68fb      	ldr	r3, [r7, #12]
 80084f2:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 80084f6:	f003 031f 	and.w	r3, r3, #31
 80084fa:	2b02      	cmp	r3, #2
 80084fc:	d014      	beq.n	8008528 <USBD_LL_DataOutStage+0x98>
 80084fe:	2b02      	cmp	r3, #2
 8008500:	d81d      	bhi.n	800853e <USBD_LL_DataOutStage+0xae>
 8008502:	2b00      	cmp	r3, #0
 8008504:	d002      	beq.n	800850c <USBD_LL_DataOutStage+0x7c>
 8008506:	2b01      	cmp	r3, #1
 8008508:	d003      	beq.n	8008512 <USBD_LL_DataOutStage+0x82>
 800850a:	e018      	b.n	800853e <USBD_LL_DataOutStage+0xae>
        {
          case USB_REQ_RECIPIENT_DEVICE:
            /* Device requests must be managed by the first instantiated class
               (or duplicated by all classes for simplicity) */
            idx = 0U;
 800850c:	2300      	movs	r3, #0
 800850e:	75bb      	strb	r3, [r7, #22]
            break;
 8008510:	e018      	b.n	8008544 <USBD_LL_DataOutStage+0xb4>

          case USB_REQ_RECIPIENT_INTERFACE:
            idx = USBD_CoreFindIF(pdev, LOBYTE(pdev->request.wIndex));
 8008512:	68fb      	ldr	r3, [r7, #12]
 8008514:	f8b3 32ae 	ldrh.w	r3, [r3, #686]	; 0x2ae
 8008518:	b2db      	uxtb	r3, r3
 800851a:	4619      	mov	r1, r3
 800851c:	68f8      	ldr	r0, [r7, #12]
 800851e:	f000 fa5e 	bl	80089de <USBD_CoreFindIF>
 8008522:	4603      	mov	r3, r0
 8008524:	75bb      	strb	r3, [r7, #22]
            break;
 8008526:	e00d      	b.n	8008544 <USBD_LL_DataOutStage+0xb4>

          case USB_REQ_RECIPIENT_ENDPOINT:
            idx = USBD_CoreFindEP(pdev, LOBYTE(pdev->request.wIndex));
 8008528:	68fb      	ldr	r3, [r7, #12]
 800852a:	f8b3 32ae 	ldrh.w	r3, [r3, #686]	; 0x2ae
 800852e:	b2db      	uxtb	r3, r3
 8008530:	4619      	mov	r1, r3
 8008532:	68f8      	ldr	r0, [r7, #12]
 8008534:	f000 fa60 	bl	80089f8 <USBD_CoreFindEP>
 8008538:	4603      	mov	r3, r0
 800853a:	75bb      	strb	r3, [r7, #22]
            break;
 800853c:	e002      	b.n	8008544 <USBD_LL_DataOutStage+0xb4>

          default:
            /* Back to the first class in case of doubt */
            idx = 0U;
 800853e:	2300      	movs	r3, #0
 8008540:	75bb      	strb	r3, [r7, #22]
            break;
 8008542:	bf00      	nop
        }

        if (idx < USBD_MAX_SUPPORTED_CLASS)
 8008544:	7dbb      	ldrb	r3, [r7, #22]
 8008546:	2b00      	cmp	r3, #0
 8008548:	d119      	bne.n	800857e <USBD_LL_DataOutStage+0xee>
        {
          /* Setup the class ID and route the request to the relative class function */
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800854a:	68fb      	ldr	r3, [r7, #12]
 800854c:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8008550:	b2db      	uxtb	r3, r3
 8008552:	2b03      	cmp	r3, #3
 8008554:	d113      	bne.n	800857e <USBD_LL_DataOutStage+0xee>
          {
            if (pdev->pClass[idx]->EP0_RxReady != NULL)
 8008556:	7dba      	ldrb	r2, [r7, #22]
 8008558:	68fb      	ldr	r3, [r7, #12]
 800855a:	32ae      	adds	r2, #174	; 0xae
 800855c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008560:	691b      	ldr	r3, [r3, #16]
 8008562:	2b00      	cmp	r3, #0
 8008564:	d00b      	beq.n	800857e <USBD_LL_DataOutStage+0xee>
            {
              pdev->classId = idx;
 8008566:	7dba      	ldrb	r2, [r7, #22]
 8008568:	68fb      	ldr	r3, [r7, #12]
 800856a:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
              pdev->pClass[idx]->EP0_RxReady(pdev);
 800856e:	7dba      	ldrb	r2, [r7, #22]
 8008570:	68fb      	ldr	r3, [r7, #12]
 8008572:	32ae      	adds	r2, #174	; 0xae
 8008574:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008578:	691b      	ldr	r3, [r3, #16]
 800857a:	68f8      	ldr	r0, [r7, #12]
 800857c:	4798      	blx	r3
            }
          }
        }

        (void)USBD_CtlSendStatus(pdev);
 800857e:	68f8      	ldr	r0, [r7, #12]
 8008580:	f001 f94a 	bl	8009818 <USBD_CtlSendStatus>
 8008584:	e032      	b.n	80085ec <USBD_LL_DataOutStage+0x15c>
    }
  }
  else
  {
    /* Get the class index relative to this interface */
    idx = USBD_CoreFindEP(pdev, (epnum & 0x7FU));
 8008586:	7afb      	ldrb	r3, [r7, #11]
 8008588:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800858c:	b2db      	uxtb	r3, r3
 800858e:	4619      	mov	r1, r3
 8008590:	68f8      	ldr	r0, [r7, #12]
 8008592:	f000 fa31 	bl	80089f8 <USBD_CoreFindEP>
 8008596:	4603      	mov	r3, r0
 8008598:	75bb      	strb	r3, [r7, #22]

    if (((uint16_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 800859a:	7dbb      	ldrb	r3, [r7, #22]
 800859c:	2bff      	cmp	r3, #255	; 0xff
 800859e:	d025      	beq.n	80085ec <USBD_LL_DataOutStage+0x15c>
 80085a0:	7dbb      	ldrb	r3, [r7, #22]
 80085a2:	2b00      	cmp	r3, #0
 80085a4:	d122      	bne.n	80085ec <USBD_LL_DataOutStage+0x15c>
    {
      /* Call the class data out function to manage the request */
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80085a6:	68fb      	ldr	r3, [r7, #12]
 80085a8:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80085ac:	b2db      	uxtb	r3, r3
 80085ae:	2b03      	cmp	r3, #3
 80085b0:	d117      	bne.n	80085e2 <USBD_LL_DataOutStage+0x152>
      {
        if (pdev->pClass[idx]->DataOut != NULL)
 80085b2:	7dba      	ldrb	r2, [r7, #22]
 80085b4:	68fb      	ldr	r3, [r7, #12]
 80085b6:	32ae      	adds	r2, #174	; 0xae
 80085b8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80085bc:	699b      	ldr	r3, [r3, #24]
 80085be:	2b00      	cmp	r3, #0
 80085c0:	d00f      	beq.n	80085e2 <USBD_LL_DataOutStage+0x152>
        {
          pdev->classId = idx;
 80085c2:	7dba      	ldrb	r2, [r7, #22]
 80085c4:	68fb      	ldr	r3, [r7, #12]
 80085c6:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->DataOut(pdev, epnum);
 80085ca:	7dba      	ldrb	r2, [r7, #22]
 80085cc:	68fb      	ldr	r3, [r7, #12]
 80085ce:	32ae      	adds	r2, #174	; 0xae
 80085d0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80085d4:	699b      	ldr	r3, [r3, #24]
 80085d6:	7afa      	ldrb	r2, [r7, #11]
 80085d8:	4611      	mov	r1, r2
 80085da:	68f8      	ldr	r0, [r7, #12]
 80085dc:	4798      	blx	r3
 80085de:	4603      	mov	r3, r0
 80085e0:	75fb      	strb	r3, [r7, #23]
        }
      }
      if (ret != USBD_OK)
 80085e2:	7dfb      	ldrb	r3, [r7, #23]
 80085e4:	2b00      	cmp	r3, #0
 80085e6:	d001      	beq.n	80085ec <USBD_LL_DataOutStage+0x15c>
      {
        return ret;
 80085e8:	7dfb      	ldrb	r3, [r7, #23]
 80085ea:	e000      	b.n	80085ee <USBD_LL_DataOutStage+0x15e>
      }
    }
  }

  return USBD_OK;
 80085ec:	2300      	movs	r3, #0
}
 80085ee:	4618      	mov	r0, r3
 80085f0:	3718      	adds	r7, #24
 80085f2:	46bd      	mov	sp, r7
 80085f4:	bd80      	pop	{r7, pc}

080085f6 <USBD_LL_DataInStage>:
  * @param  epnum: endpoint index
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataInStage(USBD_HandleTypeDef *pdev,
                                       uint8_t epnum, uint8_t *pdata)
{
 80085f6:	b580      	push	{r7, lr}
 80085f8:	b086      	sub	sp, #24
 80085fa:	af00      	add	r7, sp, #0
 80085fc:	60f8      	str	r0, [r7, #12]
 80085fe:	460b      	mov	r3, r1
 8008600:	607a      	str	r2, [r7, #4]
 8008602:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret;
  uint8_t idx;

  if (epnum == 0U)
 8008604:	7afb      	ldrb	r3, [r7, #11]
 8008606:	2b00      	cmp	r3, #0
 8008608:	d16f      	bne.n	80086ea <USBD_LL_DataInStage+0xf4>
  {
    pep = &pdev->ep_in[0];
 800860a:	68fb      	ldr	r3, [r7, #12]
 800860c:	3314      	adds	r3, #20
 800860e:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_IN)
 8008610:	68fb      	ldr	r3, [r7, #12]
 8008612:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 8008616:	2b02      	cmp	r3, #2
 8008618:	d15a      	bne.n	80086d0 <USBD_LL_DataInStage+0xda>
    {
      if (pep->rem_length > pep->maxpacket)
 800861a:	693b      	ldr	r3, [r7, #16]
 800861c:	689a      	ldr	r2, [r3, #8]
 800861e:	693b      	ldr	r3, [r7, #16]
 8008620:	68db      	ldr	r3, [r3, #12]
 8008622:	429a      	cmp	r2, r3
 8008624:	d914      	bls.n	8008650 <USBD_LL_DataInStage+0x5a>
      {
        pep->rem_length -= pep->maxpacket;
 8008626:	693b      	ldr	r3, [r7, #16]
 8008628:	689a      	ldr	r2, [r3, #8]
 800862a:	693b      	ldr	r3, [r7, #16]
 800862c:	68db      	ldr	r3, [r3, #12]
 800862e:	1ad2      	subs	r2, r2, r3
 8008630:	693b      	ldr	r3, [r7, #16]
 8008632:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueSendData(pdev, pdata, pep->rem_length);
 8008634:	693b      	ldr	r3, [r7, #16]
 8008636:	689b      	ldr	r3, [r3, #8]
 8008638:	461a      	mov	r2, r3
 800863a:	6879      	ldr	r1, [r7, #4]
 800863c:	68f8      	ldr	r0, [r7, #12]
 800863e:	f001 f8ac 	bl	800979a <USBD_CtlContinueSendData>

        /* Prepare endpoint for premature end of transfer */
        (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8008642:	2300      	movs	r3, #0
 8008644:	2200      	movs	r2, #0
 8008646:	2100      	movs	r1, #0
 8008648:	68f8      	ldr	r0, [r7, #12]
 800864a:	f001 fe2f 	bl	800a2ac <USBD_LL_PrepareReceive>
 800864e:	e03f      	b.n	80086d0 <USBD_LL_DataInStage+0xda>
      }
      else
      {
        /* last packet is MPS multiple, so send ZLP packet */
        if ((pep->maxpacket == pep->rem_length) &&
 8008650:	693b      	ldr	r3, [r7, #16]
 8008652:	68da      	ldr	r2, [r3, #12]
 8008654:	693b      	ldr	r3, [r7, #16]
 8008656:	689b      	ldr	r3, [r3, #8]
 8008658:	429a      	cmp	r2, r3
 800865a:	d11c      	bne.n	8008696 <USBD_LL_DataInStage+0xa0>
            (pep->total_length >= pep->maxpacket) &&
 800865c:	693b      	ldr	r3, [r7, #16]
 800865e:	685a      	ldr	r2, [r3, #4]
 8008660:	693b      	ldr	r3, [r7, #16]
 8008662:	68db      	ldr	r3, [r3, #12]
        if ((pep->maxpacket == pep->rem_length) &&
 8008664:	429a      	cmp	r2, r3
 8008666:	d316      	bcc.n	8008696 <USBD_LL_DataInStage+0xa0>
            (pep->total_length < pdev->ep0_data_len))
 8008668:	693b      	ldr	r3, [r7, #16]
 800866a:	685a      	ldr	r2, [r3, #4]
 800866c:	68fb      	ldr	r3, [r7, #12]
 800866e:	f8d3 3298 	ldr.w	r3, [r3, #664]	; 0x298
            (pep->total_length >= pep->maxpacket) &&
 8008672:	429a      	cmp	r2, r3
 8008674:	d20f      	bcs.n	8008696 <USBD_LL_DataInStage+0xa0>
        {
          (void)USBD_CtlContinueSendData(pdev, NULL, 0U);
 8008676:	2200      	movs	r2, #0
 8008678:	2100      	movs	r1, #0
 800867a:	68f8      	ldr	r0, [r7, #12]
 800867c:	f001 f88d 	bl	800979a <USBD_CtlContinueSendData>
          pdev->ep0_data_len = 0U;
 8008680:	68fb      	ldr	r3, [r7, #12]
 8008682:	2200      	movs	r2, #0
 8008684:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

          /* Prepare endpoint for premature end of transfer */
          (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8008688:	2300      	movs	r3, #0
 800868a:	2200      	movs	r2, #0
 800868c:	2100      	movs	r1, #0
 800868e:	68f8      	ldr	r0, [r7, #12]
 8008690:	f001 fe0c 	bl	800a2ac <USBD_LL_PrepareReceive>
 8008694:	e01c      	b.n	80086d0 <USBD_LL_DataInStage+0xda>
        }
        else
        {
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8008696:	68fb      	ldr	r3, [r7, #12]
 8008698:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800869c:	b2db      	uxtb	r3, r3
 800869e:	2b03      	cmp	r3, #3
 80086a0:	d10f      	bne.n	80086c2 <USBD_LL_DataInStage+0xcc>
          {
            if (pdev->pClass[0]->EP0_TxSent != NULL)
 80086a2:	68fb      	ldr	r3, [r7, #12]
 80086a4:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80086a8:	68db      	ldr	r3, [r3, #12]
 80086aa:	2b00      	cmp	r3, #0
 80086ac:	d009      	beq.n	80086c2 <USBD_LL_DataInStage+0xcc>
            {
              pdev->classId = 0U;
 80086ae:	68fb      	ldr	r3, [r7, #12]
 80086b0:	2200      	movs	r2, #0
 80086b2:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
              pdev->pClass[0]->EP0_TxSent(pdev);
 80086b6:	68fb      	ldr	r3, [r7, #12]
 80086b8:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80086bc:	68db      	ldr	r3, [r3, #12]
 80086be:	68f8      	ldr	r0, [r7, #12]
 80086c0:	4798      	blx	r3
            }
          }
          (void)USBD_LL_StallEP(pdev, 0x80U);
 80086c2:	2180      	movs	r1, #128	; 0x80
 80086c4:	68f8      	ldr	r0, [r7, #12]
 80086c6:	f001 fd47 	bl	800a158 <USBD_LL_StallEP>
          (void)USBD_CtlReceiveStatus(pdev);
 80086ca:	68f8      	ldr	r0, [r7, #12]
 80086cc:	f001 f8b7 	bl	800983e <USBD_CtlReceiveStatus>
        (void)USBD_LL_StallEP(pdev, 0x80U);
      }
#endif
    }

    if (pdev->dev_test_mode != 0U)
 80086d0:	68fb      	ldr	r3, [r7, #12]
 80086d2:	f893 32a0 	ldrb.w	r3, [r3, #672]	; 0x2a0
 80086d6:	2b00      	cmp	r3, #0
 80086d8:	d03a      	beq.n	8008750 <USBD_LL_DataInStage+0x15a>
    {
      (void)USBD_RunTestMode(pdev);
 80086da:	68f8      	ldr	r0, [r7, #12]
 80086dc:	f7ff fe42 	bl	8008364 <USBD_RunTestMode>
      pdev->dev_test_mode = 0U;
 80086e0:	68fb      	ldr	r3, [r7, #12]
 80086e2:	2200      	movs	r2, #0
 80086e4:	f883 22a0 	strb.w	r2, [r3, #672]	; 0x2a0
 80086e8:	e032      	b.n	8008750 <USBD_LL_DataInStage+0x15a>
    }
  }
  else
  {
    /* Get the class index relative to this interface */
    idx = USBD_CoreFindEP(pdev, ((uint8_t)epnum | 0x80U));
 80086ea:	7afb      	ldrb	r3, [r7, #11]
 80086ec:	f063 037f 	orn	r3, r3, #127	; 0x7f
 80086f0:	b2db      	uxtb	r3, r3
 80086f2:	4619      	mov	r1, r3
 80086f4:	68f8      	ldr	r0, [r7, #12]
 80086f6:	f000 f97f 	bl	80089f8 <USBD_CoreFindEP>
 80086fa:	4603      	mov	r3, r0
 80086fc:	75fb      	strb	r3, [r7, #23]

    if (((uint16_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 80086fe:	7dfb      	ldrb	r3, [r7, #23]
 8008700:	2bff      	cmp	r3, #255	; 0xff
 8008702:	d025      	beq.n	8008750 <USBD_LL_DataInStage+0x15a>
 8008704:	7dfb      	ldrb	r3, [r7, #23]
 8008706:	2b00      	cmp	r3, #0
 8008708:	d122      	bne.n	8008750 <USBD_LL_DataInStage+0x15a>
    {
      /* Call the class data out function to manage the request */
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800870a:	68fb      	ldr	r3, [r7, #12]
 800870c:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8008710:	b2db      	uxtb	r3, r3
 8008712:	2b03      	cmp	r3, #3
 8008714:	d11c      	bne.n	8008750 <USBD_LL_DataInStage+0x15a>
      {
        if (pdev->pClass[idx]->DataIn != NULL)
 8008716:	7dfa      	ldrb	r2, [r7, #23]
 8008718:	68fb      	ldr	r3, [r7, #12]
 800871a:	32ae      	adds	r2, #174	; 0xae
 800871c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008720:	695b      	ldr	r3, [r3, #20]
 8008722:	2b00      	cmp	r3, #0
 8008724:	d014      	beq.n	8008750 <USBD_LL_DataInStage+0x15a>
        {
          pdev->classId = idx;
 8008726:	7dfa      	ldrb	r2, [r7, #23]
 8008728:	68fb      	ldr	r3, [r7, #12]
 800872a:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->DataIn(pdev, epnum);
 800872e:	7dfa      	ldrb	r2, [r7, #23]
 8008730:	68fb      	ldr	r3, [r7, #12]
 8008732:	32ae      	adds	r2, #174	; 0xae
 8008734:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008738:	695b      	ldr	r3, [r3, #20]
 800873a:	7afa      	ldrb	r2, [r7, #11]
 800873c:	4611      	mov	r1, r2
 800873e:	68f8      	ldr	r0, [r7, #12]
 8008740:	4798      	blx	r3
 8008742:	4603      	mov	r3, r0
 8008744:	75bb      	strb	r3, [r7, #22]

          if (ret != USBD_OK)
 8008746:	7dbb      	ldrb	r3, [r7, #22]
 8008748:	2b00      	cmp	r3, #0
 800874a:	d001      	beq.n	8008750 <USBD_LL_DataInStage+0x15a>
          {
            return ret;
 800874c:	7dbb      	ldrb	r3, [r7, #22]
 800874e:	e000      	b.n	8008752 <USBD_LL_DataInStage+0x15c>
        }
      }
    }
  }

  return USBD_OK;
 8008750:	2300      	movs	r3, #0
}
 8008752:	4618      	mov	r0, r3
 8008754:	3718      	adds	r7, #24
 8008756:	46bd      	mov	sp, r7
 8008758:	bd80      	pop	{r7, pc}

0800875a <USBD_LL_Reset>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Reset(USBD_HandleTypeDef *pdev)
{
 800875a:	b580      	push	{r7, lr}
 800875c:	b084      	sub	sp, #16
 800875e:	af00      	add	r7, sp, #0
 8008760:	6078      	str	r0, [r7, #4]
  USBD_StatusTypeDef ret = USBD_OK;
 8008762:	2300      	movs	r3, #0
 8008764:	73fb      	strb	r3, [r7, #15]

  /* Upon Reset call user call back */
  pdev->dev_state = USBD_STATE_DEFAULT;
 8008766:	687b      	ldr	r3, [r7, #4]
 8008768:	2201      	movs	r2, #1
 800876a:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->ep0_state = USBD_EP0_IDLE;
 800876e:	687b      	ldr	r3, [r7, #4]
 8008770:	2200      	movs	r2, #0
 8008772:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->dev_config = 0U;
 8008776:	687b      	ldr	r3, [r7, #4]
 8008778:	2200      	movs	r2, #0
 800877a:	605a      	str	r2, [r3, #4]
  pdev->dev_remote_wakeup = 0U;
 800877c:	687b      	ldr	r3, [r7, #4]
 800877e:	2200      	movs	r2, #0
 8008780:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
  pdev->dev_test_mode = 0U;
 8008784:	687b      	ldr	r3, [r7, #4]
 8008786:	2200      	movs	r2, #0
 8008788:	f883 22a0 	strb.w	r2, [r3, #672]	; 0x2a0
      }
    }
  }
#else

  if (pdev->pClass[0] != NULL)
 800878c:	687b      	ldr	r3, [r7, #4]
 800878e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8008792:	2b00      	cmp	r3, #0
 8008794:	d014      	beq.n	80087c0 <USBD_LL_Reset+0x66>
  {
    if (pdev->pClass[0]->DeInit != NULL)
 8008796:	687b      	ldr	r3, [r7, #4]
 8008798:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800879c:	685b      	ldr	r3, [r3, #4]
 800879e:	2b00      	cmp	r3, #0
 80087a0:	d00e      	beq.n	80087c0 <USBD_LL_Reset+0x66>
    {
      if (pdev->pClass[0]->DeInit(pdev, (uint8_t)pdev->dev_config) != USBD_OK)
 80087a2:	687b      	ldr	r3, [r7, #4]
 80087a4:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80087a8:	685b      	ldr	r3, [r3, #4]
 80087aa:	687a      	ldr	r2, [r7, #4]
 80087ac:	6852      	ldr	r2, [r2, #4]
 80087ae:	b2d2      	uxtb	r2, r2
 80087b0:	4611      	mov	r1, r2
 80087b2:	6878      	ldr	r0, [r7, #4]
 80087b4:	4798      	blx	r3
 80087b6:	4603      	mov	r3, r0
 80087b8:	2b00      	cmp	r3, #0
 80087ba:	d001      	beq.n	80087c0 <USBD_LL_Reset+0x66>
      {
        ret = USBD_FAIL;
 80087bc:	2303      	movs	r3, #3
 80087be:	73fb      	strb	r3, [r7, #15]
    }
  }
#endif /* USE_USBD_COMPOSITE */

  /* Open EP0 OUT */
  (void)USBD_LL_OpenEP(pdev, 0x00U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 80087c0:	2340      	movs	r3, #64	; 0x40
 80087c2:	2200      	movs	r2, #0
 80087c4:	2100      	movs	r1, #0
 80087c6:	6878      	ldr	r0, [r7, #4]
 80087c8:	f001 fc81 	bl	800a0ce <USBD_LL_OpenEP>
  pdev->ep_out[0x00U & 0xFU].is_used = 1U;
 80087cc:	687b      	ldr	r3, [r7, #4]
 80087ce:	2201      	movs	r2, #1
 80087d0:	f8a3 2164 	strh.w	r2, [r3, #356]	; 0x164

  pdev->ep_out[0].maxpacket = USB_MAX_EP0_SIZE;
 80087d4:	687b      	ldr	r3, [r7, #4]
 80087d6:	2240      	movs	r2, #64	; 0x40
 80087d8:	f8c3 2160 	str.w	r2, [r3, #352]	; 0x160

  /* Open EP0 IN */
  (void)USBD_LL_OpenEP(pdev, 0x80U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 80087dc:	2340      	movs	r3, #64	; 0x40
 80087de:	2200      	movs	r2, #0
 80087e0:	2180      	movs	r1, #128	; 0x80
 80087e2:	6878      	ldr	r0, [r7, #4]
 80087e4:	f001 fc73 	bl	800a0ce <USBD_LL_OpenEP>
  pdev->ep_in[0x80U & 0xFU].is_used = 1U;
 80087e8:	687b      	ldr	r3, [r7, #4]
 80087ea:	2201      	movs	r2, #1
 80087ec:	849a      	strh	r2, [r3, #36]	; 0x24

  pdev->ep_in[0].maxpacket = USB_MAX_EP0_SIZE;
 80087ee:	687b      	ldr	r3, [r7, #4]
 80087f0:	2240      	movs	r2, #64	; 0x40
 80087f2:	621a      	str	r2, [r3, #32]

  return ret;
 80087f4:	7bfb      	ldrb	r3, [r7, #15]
}
 80087f6:	4618      	mov	r0, r3
 80087f8:	3710      	adds	r7, #16
 80087fa:	46bd      	mov	sp, r7
 80087fc:	bd80      	pop	{r7, pc}

080087fe <USBD_LL_SetSpeed>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetSpeed(USBD_HandleTypeDef *pdev,
                                    USBD_SpeedTypeDef speed)
{
 80087fe:	b480      	push	{r7}
 8008800:	b083      	sub	sp, #12
 8008802:	af00      	add	r7, sp, #0
 8008804:	6078      	str	r0, [r7, #4]
 8008806:	460b      	mov	r3, r1
 8008808:	70fb      	strb	r3, [r7, #3]
  pdev->dev_speed = speed;
 800880a:	687b      	ldr	r3, [r7, #4]
 800880c:	78fa      	ldrb	r2, [r7, #3]
 800880e:	741a      	strb	r2, [r3, #16]

  return USBD_OK;
 8008810:	2300      	movs	r3, #0
}
 8008812:	4618      	mov	r0, r3
 8008814:	370c      	adds	r7, #12
 8008816:	46bd      	mov	sp, r7
 8008818:	f85d 7b04 	ldr.w	r7, [sp], #4
 800881c:	4770      	bx	lr

0800881e <USBD_LL_Suspend>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Suspend(USBD_HandleTypeDef *pdev)
{
 800881e:	b480      	push	{r7}
 8008820:	b083      	sub	sp, #12
 8008822:	af00      	add	r7, sp, #0
 8008824:	6078      	str	r0, [r7, #4]
  pdev->dev_old_state = pdev->dev_state;
 8008826:	687b      	ldr	r3, [r7, #4]
 8008828:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800882c:	b2da      	uxtb	r2, r3
 800882e:	687b      	ldr	r3, [r7, #4]
 8008830:	f883 229d 	strb.w	r2, [r3, #669]	; 0x29d
  pdev->dev_state = USBD_STATE_SUSPENDED;
 8008834:	687b      	ldr	r3, [r7, #4]
 8008836:	2204      	movs	r2, #4
 8008838:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c

  return USBD_OK;
 800883c:	2300      	movs	r3, #0
}
 800883e:	4618      	mov	r0, r3
 8008840:	370c      	adds	r7, #12
 8008842:	46bd      	mov	sp, r7
 8008844:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008848:	4770      	bx	lr

0800884a <USBD_LL_Resume>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Resume(USBD_HandleTypeDef *pdev)
{
 800884a:	b480      	push	{r7}
 800884c:	b083      	sub	sp, #12
 800884e:	af00      	add	r7, sp, #0
 8008850:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_SUSPENDED)
 8008852:	687b      	ldr	r3, [r7, #4]
 8008854:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8008858:	b2db      	uxtb	r3, r3
 800885a:	2b04      	cmp	r3, #4
 800885c:	d106      	bne.n	800886c <USBD_LL_Resume+0x22>
  {
    pdev->dev_state = pdev->dev_old_state;
 800885e:	687b      	ldr	r3, [r7, #4]
 8008860:	f893 329d 	ldrb.w	r3, [r3, #669]	; 0x29d
 8008864:	b2da      	uxtb	r2, r3
 8008866:	687b      	ldr	r3, [r7, #4]
 8008868:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  }

  return USBD_OK;
 800886c:	2300      	movs	r3, #0
}
 800886e:	4618      	mov	r0, r3
 8008870:	370c      	adds	r7, #12
 8008872:	46bd      	mov	sp, r7
 8008874:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008878:	4770      	bx	lr

0800887a <USBD_LL_SOF>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_SOF(USBD_HandleTypeDef *pdev)
{
 800887a:	b580      	push	{r7, lr}
 800887c:	b082      	sub	sp, #8
 800887e:	af00      	add	r7, sp, #0
 8008880:	6078      	str	r0, [r7, #4]
  /* The SOF event can be distributed for all classes that support it */
  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8008882:	687b      	ldr	r3, [r7, #4]
 8008884:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8008888:	b2db      	uxtb	r3, r3
 800888a:	2b03      	cmp	r3, #3
 800888c:	d110      	bne.n	80088b0 <USBD_LL_SOF+0x36>
          }
        }
      }
    }
#else
    if (pdev->pClass[0] != NULL)
 800888e:	687b      	ldr	r3, [r7, #4]
 8008890:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8008894:	2b00      	cmp	r3, #0
 8008896:	d00b      	beq.n	80088b0 <USBD_LL_SOF+0x36>
    {
      if (pdev->pClass[0]->SOF != NULL)
 8008898:	687b      	ldr	r3, [r7, #4]
 800889a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800889e:	69db      	ldr	r3, [r3, #28]
 80088a0:	2b00      	cmp	r3, #0
 80088a2:	d005      	beq.n	80088b0 <USBD_LL_SOF+0x36>
      {
        (void)pdev->pClass[0]->SOF(pdev);
 80088a4:	687b      	ldr	r3, [r7, #4]
 80088a6:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80088aa:	69db      	ldr	r3, [r3, #28]
 80088ac:	6878      	ldr	r0, [r7, #4]
 80088ae:	4798      	blx	r3
      }
    }
#endif /* USE_USBD_COMPOSITE */
  }

  return USBD_OK;
 80088b0:	2300      	movs	r3, #0
}
 80088b2:	4618      	mov	r0, r3
 80088b4:	3708      	adds	r7, #8
 80088b6:	46bd      	mov	sp, r7
 80088b8:	bd80      	pop	{r7, pc}

080088ba <USBD_LL_IsoINIncomplete>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_IsoINIncomplete(USBD_HandleTypeDef *pdev,
                                           uint8_t epnum)
{
 80088ba:	b580      	push	{r7, lr}
 80088bc:	b082      	sub	sp, #8
 80088be:	af00      	add	r7, sp, #0
 80088c0:	6078      	str	r0, [r7, #4]
 80088c2:	460b      	mov	r3, r1
 80088c4:	70fb      	strb	r3, [r7, #3]
  if (pdev->pClass[pdev->classId] == NULL)
 80088c6:	687b      	ldr	r3, [r7, #4]
 80088c8:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 80088cc:	687b      	ldr	r3, [r7, #4]
 80088ce:	32ae      	adds	r2, #174	; 0xae
 80088d0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80088d4:	2b00      	cmp	r3, #0
 80088d6:	d101      	bne.n	80088dc <USBD_LL_IsoINIncomplete+0x22>
  {
    return USBD_FAIL;
 80088d8:	2303      	movs	r3, #3
 80088da:	e01c      	b.n	8008916 <USBD_LL_IsoINIncomplete+0x5c>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80088dc:	687b      	ldr	r3, [r7, #4]
 80088de:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80088e2:	b2db      	uxtb	r3, r3
 80088e4:	2b03      	cmp	r3, #3
 80088e6:	d115      	bne.n	8008914 <USBD_LL_IsoINIncomplete+0x5a>
  {
    if (pdev->pClass[pdev->classId]->IsoINIncomplete != NULL)
 80088e8:	687b      	ldr	r3, [r7, #4]
 80088ea:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 80088ee:	687b      	ldr	r3, [r7, #4]
 80088f0:	32ae      	adds	r2, #174	; 0xae
 80088f2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80088f6:	6a1b      	ldr	r3, [r3, #32]
 80088f8:	2b00      	cmp	r3, #0
 80088fa:	d00b      	beq.n	8008914 <USBD_LL_IsoINIncomplete+0x5a>
    {
      (void)pdev->pClass[pdev->classId]->IsoINIncomplete(pdev, epnum);
 80088fc:	687b      	ldr	r3, [r7, #4]
 80088fe:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8008902:	687b      	ldr	r3, [r7, #4]
 8008904:	32ae      	adds	r2, #174	; 0xae
 8008906:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800890a:	6a1b      	ldr	r3, [r3, #32]
 800890c:	78fa      	ldrb	r2, [r7, #3]
 800890e:	4611      	mov	r1, r2
 8008910:	6878      	ldr	r0, [r7, #4]
 8008912:	4798      	blx	r3
    }
  }

  return USBD_OK;
 8008914:	2300      	movs	r3, #0
}
 8008916:	4618      	mov	r0, r3
 8008918:	3708      	adds	r7, #8
 800891a:	46bd      	mov	sp, r7
 800891c:	bd80      	pop	{r7, pc}

0800891e <USBD_LL_IsoOUTIncomplete>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_IsoOUTIncomplete(USBD_HandleTypeDef *pdev,
                                            uint8_t epnum)
{
 800891e:	b580      	push	{r7, lr}
 8008920:	b082      	sub	sp, #8
 8008922:	af00      	add	r7, sp, #0
 8008924:	6078      	str	r0, [r7, #4]
 8008926:	460b      	mov	r3, r1
 8008928:	70fb      	strb	r3, [r7, #3]
  if (pdev->pClass[pdev->classId] == NULL)
 800892a:	687b      	ldr	r3, [r7, #4]
 800892c:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8008930:	687b      	ldr	r3, [r7, #4]
 8008932:	32ae      	adds	r2, #174	; 0xae
 8008934:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008938:	2b00      	cmp	r3, #0
 800893a:	d101      	bne.n	8008940 <USBD_LL_IsoOUTIncomplete+0x22>
  {
    return USBD_FAIL;
 800893c:	2303      	movs	r3, #3
 800893e:	e01c      	b.n	800897a <USBD_LL_IsoOUTIncomplete+0x5c>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8008940:	687b      	ldr	r3, [r7, #4]
 8008942:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8008946:	b2db      	uxtb	r3, r3
 8008948:	2b03      	cmp	r3, #3
 800894a:	d115      	bne.n	8008978 <USBD_LL_IsoOUTIncomplete+0x5a>
  {
    if (pdev->pClass[pdev->classId]->IsoOUTIncomplete != NULL)
 800894c:	687b      	ldr	r3, [r7, #4]
 800894e:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8008952:	687b      	ldr	r3, [r7, #4]
 8008954:	32ae      	adds	r2, #174	; 0xae
 8008956:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800895a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800895c:	2b00      	cmp	r3, #0
 800895e:	d00b      	beq.n	8008978 <USBD_LL_IsoOUTIncomplete+0x5a>
    {
      (void)pdev->pClass[pdev->classId]->IsoOUTIncomplete(pdev, epnum);
 8008960:	687b      	ldr	r3, [r7, #4]
 8008962:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8008966:	687b      	ldr	r3, [r7, #4]
 8008968:	32ae      	adds	r2, #174	; 0xae
 800896a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800896e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008970:	78fa      	ldrb	r2, [r7, #3]
 8008972:	4611      	mov	r1, r2
 8008974:	6878      	ldr	r0, [r7, #4]
 8008976:	4798      	blx	r3
    }
  }

  return USBD_OK;
 8008978:	2300      	movs	r3, #0
}
 800897a:	4618      	mov	r0, r3
 800897c:	3708      	adds	r7, #8
 800897e:	46bd      	mov	sp, r7
 8008980:	bd80      	pop	{r7, pc}

08008982 <USBD_LL_DevConnected>:
  *         Handle device connection event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DevConnected(USBD_HandleTypeDef *pdev)
{
 8008982:	b480      	push	{r7}
 8008984:	b083      	sub	sp, #12
 8008986:	af00      	add	r7, sp, #0
 8008988:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 800898a:	2300      	movs	r3, #0
}
 800898c:	4618      	mov	r0, r3
 800898e:	370c      	adds	r7, #12
 8008990:	46bd      	mov	sp, r7
 8008992:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008996:	4770      	bx	lr

08008998 <USBD_LL_DevDisconnected>:
  *         Handle device disconnection event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DevDisconnected(USBD_HandleTypeDef *pdev)
{
 8008998:	b580      	push	{r7, lr}
 800899a:	b084      	sub	sp, #16
 800899c:	af00      	add	r7, sp, #0
 800899e:	6078      	str	r0, [r7, #4]
  USBD_StatusTypeDef   ret = USBD_OK;
 80089a0:	2300      	movs	r3, #0
 80089a2:	73fb      	strb	r3, [r7, #15]

  /* Free Class Resources */
  pdev->dev_state = USBD_STATE_DEFAULT;
 80089a4:	687b      	ldr	r3, [r7, #4]
 80089a6:	2201      	movs	r2, #1
 80089a8:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
        }
      }
    }
  }
#else
  if (pdev->pClass[0] != NULL)
 80089ac:	687b      	ldr	r3, [r7, #4]
 80089ae:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80089b2:	2b00      	cmp	r3, #0
 80089b4:	d00e      	beq.n	80089d4 <USBD_LL_DevDisconnected+0x3c>
  {
    if (pdev->pClass[0]->DeInit(pdev, (uint8_t)pdev->dev_config) != 0U)
 80089b6:	687b      	ldr	r3, [r7, #4]
 80089b8:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80089bc:	685b      	ldr	r3, [r3, #4]
 80089be:	687a      	ldr	r2, [r7, #4]
 80089c0:	6852      	ldr	r2, [r2, #4]
 80089c2:	b2d2      	uxtb	r2, r2
 80089c4:	4611      	mov	r1, r2
 80089c6:	6878      	ldr	r0, [r7, #4]
 80089c8:	4798      	blx	r3
 80089ca:	4603      	mov	r3, r0
 80089cc:	2b00      	cmp	r3, #0
 80089ce:	d001      	beq.n	80089d4 <USBD_LL_DevDisconnected+0x3c>
    {
      ret = USBD_FAIL;
 80089d0:	2303      	movs	r3, #3
 80089d2:	73fb      	strb	r3, [r7, #15]
    }
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 80089d4:	7bfb      	ldrb	r3, [r7, #15]
}
 80089d6:	4618      	mov	r0, r3
 80089d8:	3710      	adds	r7, #16
 80089da:	46bd      	mov	sp, r7
 80089dc:	bd80      	pop	{r7, pc}

080089de <USBD_CoreFindIF>:
  * @param  pdev: device instance
  * @param  index : selected interface number
  * @retval index of the class using the selected interface number. OxFF if no class found.
  */
uint8_t USBD_CoreFindIF(USBD_HandleTypeDef *pdev, uint8_t index)
{
 80089de:	b480      	push	{r7}
 80089e0:	b083      	sub	sp, #12
 80089e2:	af00      	add	r7, sp, #0
 80089e4:	6078      	str	r0, [r7, #4]
 80089e6:	460b      	mov	r3, r1
 80089e8:	70fb      	strb	r3, [r7, #3]
  return 0xFFU;
#else
  UNUSED(pdev);
  UNUSED(index);

  return 0x00U;
 80089ea:	2300      	movs	r3, #0
#endif /* USE_USBD_COMPOSITE */
}
 80089ec:	4618      	mov	r0, r3
 80089ee:	370c      	adds	r7, #12
 80089f0:	46bd      	mov	sp, r7
 80089f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80089f6:	4770      	bx	lr

080089f8 <USBD_CoreFindEP>:
  * @param  pdev: device instance
  * @param  index : selected endpoint number
  * @retval index of the class using the selected endpoint number. 0xFF if no class found.
  */
uint8_t USBD_CoreFindEP(USBD_HandleTypeDef *pdev, uint8_t index)
{
 80089f8:	b480      	push	{r7}
 80089fa:	b083      	sub	sp, #12
 80089fc:	af00      	add	r7, sp, #0
 80089fe:	6078      	str	r0, [r7, #4]
 8008a00:	460b      	mov	r3, r1
 8008a02:	70fb      	strb	r3, [r7, #3]
  return 0xFFU;
#else
  UNUSED(pdev);
  UNUSED(index);

  return 0x00U;
 8008a04:	2300      	movs	r3, #0
#endif /* USE_USBD_COMPOSITE */
}
 8008a06:	4618      	mov	r0, r3
 8008a08:	370c      	adds	r7, #12
 8008a0a:	46bd      	mov	sp, r7
 8008a0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008a10:	4770      	bx	lr

08008a12 <USBD_GetEpDesc>:
  * @param  pConfDesc:  pointer to Bos descriptor
  * @param  EpAddr:  endpoint address
  * @retval pointer to video endpoint descriptor
  */
void *USBD_GetEpDesc(uint8_t *pConfDesc, uint8_t EpAddr)
{
 8008a12:	b580      	push	{r7, lr}
 8008a14:	b086      	sub	sp, #24
 8008a16:	af00      	add	r7, sp, #0
 8008a18:	6078      	str	r0, [r7, #4]
 8008a1a:	460b      	mov	r3, r1
 8008a1c:	70fb      	strb	r3, [r7, #3]
  USBD_DescHeaderTypeDef *pdesc = (USBD_DescHeaderTypeDef *)(void *)pConfDesc;
 8008a1e:	687b      	ldr	r3, [r7, #4]
 8008a20:	617b      	str	r3, [r7, #20]
  USBD_ConfigDescTypeDef *desc = (USBD_ConfigDescTypeDef *)(void *)pConfDesc;
 8008a22:	687b      	ldr	r3, [r7, #4]
 8008a24:	60fb      	str	r3, [r7, #12]
  USBD_EpDescTypeDef *pEpDesc = NULL;
 8008a26:	2300      	movs	r3, #0
 8008a28:	613b      	str	r3, [r7, #16]
  uint16_t ptr;

  if (desc->wTotalLength > desc->bLength)
 8008a2a:	68fb      	ldr	r3, [r7, #12]
 8008a2c:	885b      	ldrh	r3, [r3, #2]
 8008a2e:	b29a      	uxth	r2, r3
 8008a30:	68fb      	ldr	r3, [r7, #12]
 8008a32:	781b      	ldrb	r3, [r3, #0]
 8008a34:	b29b      	uxth	r3, r3
 8008a36:	429a      	cmp	r2, r3
 8008a38:	d920      	bls.n	8008a7c <USBD_GetEpDesc+0x6a>
  {
    ptr = desc->bLength;
 8008a3a:	68fb      	ldr	r3, [r7, #12]
 8008a3c:	781b      	ldrb	r3, [r3, #0]
 8008a3e:	b29b      	uxth	r3, r3
 8008a40:	817b      	strh	r3, [r7, #10]

    while (ptr < desc->wTotalLength)
 8008a42:	e013      	b.n	8008a6c <USBD_GetEpDesc+0x5a>
    {
      pdesc = USBD_GetNextDesc((uint8_t *)pdesc, &ptr);
 8008a44:	f107 030a 	add.w	r3, r7, #10
 8008a48:	4619      	mov	r1, r3
 8008a4a:	6978      	ldr	r0, [r7, #20]
 8008a4c:	f000 f81b 	bl	8008a86 <USBD_GetNextDesc>
 8008a50:	6178      	str	r0, [r7, #20]

      if (pdesc->bDescriptorType == USB_DESC_TYPE_ENDPOINT)
 8008a52:	697b      	ldr	r3, [r7, #20]
 8008a54:	785b      	ldrb	r3, [r3, #1]
 8008a56:	2b05      	cmp	r3, #5
 8008a58:	d108      	bne.n	8008a6c <USBD_GetEpDesc+0x5a>
      {
        pEpDesc = (USBD_EpDescTypeDef *)(void *)pdesc;
 8008a5a:	697b      	ldr	r3, [r7, #20]
 8008a5c:	613b      	str	r3, [r7, #16]

        if (pEpDesc->bEndpointAddress == EpAddr)
 8008a5e:	693b      	ldr	r3, [r7, #16]
 8008a60:	789b      	ldrb	r3, [r3, #2]
 8008a62:	78fa      	ldrb	r2, [r7, #3]
 8008a64:	429a      	cmp	r2, r3
 8008a66:	d008      	beq.n	8008a7a <USBD_GetEpDesc+0x68>
        {
          break;
        }
        else
        {
          pEpDesc = NULL;
 8008a68:	2300      	movs	r3, #0
 8008a6a:	613b      	str	r3, [r7, #16]
    while (ptr < desc->wTotalLength)
 8008a6c:	68fb      	ldr	r3, [r7, #12]
 8008a6e:	885b      	ldrh	r3, [r3, #2]
 8008a70:	b29a      	uxth	r2, r3
 8008a72:	897b      	ldrh	r3, [r7, #10]
 8008a74:	429a      	cmp	r2, r3
 8008a76:	d8e5      	bhi.n	8008a44 <USBD_GetEpDesc+0x32>
 8008a78:	e000      	b.n	8008a7c <USBD_GetEpDesc+0x6a>
          break;
 8008a7a:	bf00      	nop
        }
      }
    }
  }

  return (void *)pEpDesc;
 8008a7c:	693b      	ldr	r3, [r7, #16]
}
 8008a7e:	4618      	mov	r0, r3
 8008a80:	3718      	adds	r7, #24
 8008a82:	46bd      	mov	sp, r7
 8008a84:	bd80      	pop	{r7, pc}

08008a86 <USBD_GetNextDesc>:
  * @param  buf: Buffer where the descriptor is available
  * @param  ptr: data pointer inside the descriptor
  * @retval next header
  */
USBD_DescHeaderTypeDef *USBD_GetNextDesc(uint8_t *pbuf, uint16_t *ptr)
{
 8008a86:	b480      	push	{r7}
 8008a88:	b085      	sub	sp, #20
 8008a8a:	af00      	add	r7, sp, #0
 8008a8c:	6078      	str	r0, [r7, #4]
 8008a8e:	6039      	str	r1, [r7, #0]
  USBD_DescHeaderTypeDef *pnext = (USBD_DescHeaderTypeDef *)(void *)pbuf;
 8008a90:	687b      	ldr	r3, [r7, #4]
 8008a92:	60fb      	str	r3, [r7, #12]

  *ptr += pnext->bLength;
 8008a94:	683b      	ldr	r3, [r7, #0]
 8008a96:	881a      	ldrh	r2, [r3, #0]
 8008a98:	68fb      	ldr	r3, [r7, #12]
 8008a9a:	781b      	ldrb	r3, [r3, #0]
 8008a9c:	b29b      	uxth	r3, r3
 8008a9e:	4413      	add	r3, r2
 8008aa0:	b29a      	uxth	r2, r3
 8008aa2:	683b      	ldr	r3, [r7, #0]
 8008aa4:	801a      	strh	r2, [r3, #0]
  pnext = (USBD_DescHeaderTypeDef *)(void *)(pbuf + pnext->bLength);
 8008aa6:	68fb      	ldr	r3, [r7, #12]
 8008aa8:	781b      	ldrb	r3, [r3, #0]
 8008aaa:	461a      	mov	r2, r3
 8008aac:	687b      	ldr	r3, [r7, #4]
 8008aae:	4413      	add	r3, r2
 8008ab0:	60fb      	str	r3, [r7, #12]

  return (pnext);
 8008ab2:	68fb      	ldr	r3, [r7, #12]
}
 8008ab4:	4618      	mov	r0, r3
 8008ab6:	3714      	adds	r7, #20
 8008ab8:	46bd      	mov	sp, r7
 8008aba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008abe:	4770      	bx	lr

08008ac0 <SWAPBYTE>:

/** @defgroup USBD_DEF_Exported_Macros
  * @{
  */
__STATIC_INLINE uint16_t SWAPBYTE(uint8_t *addr)
{
 8008ac0:	b480      	push	{r7}
 8008ac2:	b087      	sub	sp, #28
 8008ac4:	af00      	add	r7, sp, #0
 8008ac6:	6078      	str	r0, [r7, #4]
  uint16_t _SwapVal, _Byte1, _Byte2;
  uint8_t *_pbuff = addr;
 8008ac8:	687b      	ldr	r3, [r7, #4]
 8008aca:	617b      	str	r3, [r7, #20]

  _Byte1 = *(uint8_t *)_pbuff;
 8008acc:	697b      	ldr	r3, [r7, #20]
 8008ace:	781b      	ldrb	r3, [r3, #0]
 8008ad0:	827b      	strh	r3, [r7, #18]
  _pbuff++;
 8008ad2:	697b      	ldr	r3, [r7, #20]
 8008ad4:	3301      	adds	r3, #1
 8008ad6:	617b      	str	r3, [r7, #20]
  _Byte2 = *(uint8_t *)_pbuff;
 8008ad8:	697b      	ldr	r3, [r7, #20]
 8008ada:	781b      	ldrb	r3, [r3, #0]
 8008adc:	823b      	strh	r3, [r7, #16]

  _SwapVal = (_Byte2 << 8) | _Byte1;
 8008ade:	8a3b      	ldrh	r3, [r7, #16]
 8008ae0:	021b      	lsls	r3, r3, #8
 8008ae2:	b21a      	sxth	r2, r3
 8008ae4:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 8008ae8:	4313      	orrs	r3, r2
 8008aea:	b21b      	sxth	r3, r3
 8008aec:	81fb      	strh	r3, [r7, #14]

  return _SwapVal;
 8008aee:	89fb      	ldrh	r3, [r7, #14]
}
 8008af0:	4618      	mov	r0, r3
 8008af2:	371c      	adds	r7, #28
 8008af4:	46bd      	mov	sp, r7
 8008af6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008afa:	4770      	bx	lr

08008afc <USBD_StdDevReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdDevReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8008afc:	b580      	push	{r7, lr}
 8008afe:	b084      	sub	sp, #16
 8008b00:	af00      	add	r7, sp, #0
 8008b02:	6078      	str	r0, [r7, #4]
 8008b04:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 8008b06:	2300      	movs	r3, #0
 8008b08:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8008b0a:	683b      	ldr	r3, [r7, #0]
 8008b0c:	781b      	ldrb	r3, [r3, #0]
 8008b0e:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8008b12:	2b40      	cmp	r3, #64	; 0x40
 8008b14:	d005      	beq.n	8008b22 <USBD_StdDevReq+0x26>
 8008b16:	2b40      	cmp	r3, #64	; 0x40
 8008b18:	d857      	bhi.n	8008bca <USBD_StdDevReq+0xce>
 8008b1a:	2b00      	cmp	r3, #0
 8008b1c:	d00f      	beq.n	8008b3e <USBD_StdDevReq+0x42>
 8008b1e:	2b20      	cmp	r3, #32
 8008b20:	d153      	bne.n	8008bca <USBD_StdDevReq+0xce>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      ret = (USBD_StatusTypeDef)pdev->pClass[pdev->classId]->Setup(pdev, req);
 8008b22:	687b      	ldr	r3, [r7, #4]
 8008b24:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8008b28:	687b      	ldr	r3, [r7, #4]
 8008b2a:	32ae      	adds	r2, #174	; 0xae
 8008b2c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008b30:	689b      	ldr	r3, [r3, #8]
 8008b32:	6839      	ldr	r1, [r7, #0]
 8008b34:	6878      	ldr	r0, [r7, #4]
 8008b36:	4798      	blx	r3
 8008b38:	4603      	mov	r3, r0
 8008b3a:	73fb      	strb	r3, [r7, #15]
      break;
 8008b3c:	e04a      	b.n	8008bd4 <USBD_StdDevReq+0xd8>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 8008b3e:	683b      	ldr	r3, [r7, #0]
 8008b40:	785b      	ldrb	r3, [r3, #1]
 8008b42:	2b09      	cmp	r3, #9
 8008b44:	d83b      	bhi.n	8008bbe <USBD_StdDevReq+0xc2>
 8008b46:	a201      	add	r2, pc, #4	; (adr r2, 8008b4c <USBD_StdDevReq+0x50>)
 8008b48:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008b4c:	08008ba1 	.word	0x08008ba1
 8008b50:	08008bb5 	.word	0x08008bb5
 8008b54:	08008bbf 	.word	0x08008bbf
 8008b58:	08008bab 	.word	0x08008bab
 8008b5c:	08008bbf 	.word	0x08008bbf
 8008b60:	08008b7f 	.word	0x08008b7f
 8008b64:	08008b75 	.word	0x08008b75
 8008b68:	08008bbf 	.word	0x08008bbf
 8008b6c:	08008b97 	.word	0x08008b97
 8008b70:	08008b89 	.word	0x08008b89
      {
        case USB_REQ_GET_DESCRIPTOR:
          USBD_GetDescriptor(pdev, req);
 8008b74:	6839      	ldr	r1, [r7, #0]
 8008b76:	6878      	ldr	r0, [r7, #4]
 8008b78:	f000 fa3c 	bl	8008ff4 <USBD_GetDescriptor>
          break;
 8008b7c:	e024      	b.n	8008bc8 <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_ADDRESS:
          USBD_SetAddress(pdev, req);
 8008b7e:	6839      	ldr	r1, [r7, #0]
 8008b80:	6878      	ldr	r0, [r7, #4]
 8008b82:	f000 fba1 	bl	80092c8 <USBD_SetAddress>
          break;
 8008b86:	e01f      	b.n	8008bc8 <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_CONFIGURATION:
          ret = USBD_SetConfig(pdev, req);
 8008b88:	6839      	ldr	r1, [r7, #0]
 8008b8a:	6878      	ldr	r0, [r7, #4]
 8008b8c:	f000 fbe0 	bl	8009350 <USBD_SetConfig>
 8008b90:	4603      	mov	r3, r0
 8008b92:	73fb      	strb	r3, [r7, #15]
          break;
 8008b94:	e018      	b.n	8008bc8 <USBD_StdDevReq+0xcc>

        case USB_REQ_GET_CONFIGURATION:
          USBD_GetConfig(pdev, req);
 8008b96:	6839      	ldr	r1, [r7, #0]
 8008b98:	6878      	ldr	r0, [r7, #4]
 8008b9a:	f000 fc83 	bl	80094a4 <USBD_GetConfig>
          break;
 8008b9e:	e013      	b.n	8008bc8 <USBD_StdDevReq+0xcc>

        case USB_REQ_GET_STATUS:
          USBD_GetStatus(pdev, req);
 8008ba0:	6839      	ldr	r1, [r7, #0]
 8008ba2:	6878      	ldr	r0, [r7, #4]
 8008ba4:	f000 fcb4 	bl	8009510 <USBD_GetStatus>
          break;
 8008ba8:	e00e      	b.n	8008bc8 <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_FEATURE:
          USBD_SetFeature(pdev, req);
 8008baa:	6839      	ldr	r1, [r7, #0]
 8008bac:	6878      	ldr	r0, [r7, #4]
 8008bae:	f000 fce3 	bl	8009578 <USBD_SetFeature>
          break;
 8008bb2:	e009      	b.n	8008bc8 <USBD_StdDevReq+0xcc>

        case USB_REQ_CLEAR_FEATURE:
          USBD_ClrFeature(pdev, req);
 8008bb4:	6839      	ldr	r1, [r7, #0]
 8008bb6:	6878      	ldr	r0, [r7, #4]
 8008bb8:	f000 fd07 	bl	80095ca <USBD_ClrFeature>
          break;
 8008bbc:	e004      	b.n	8008bc8 <USBD_StdDevReq+0xcc>

        default:
          USBD_CtlError(pdev, req);
 8008bbe:	6839      	ldr	r1, [r7, #0]
 8008bc0:	6878      	ldr	r0, [r7, #4]
 8008bc2:	f000 fd5e 	bl	8009682 <USBD_CtlError>
          break;
 8008bc6:	bf00      	nop
      }
      break;
 8008bc8:	e004      	b.n	8008bd4 <USBD_StdDevReq+0xd8>

    default:
      USBD_CtlError(pdev, req);
 8008bca:	6839      	ldr	r1, [r7, #0]
 8008bcc:	6878      	ldr	r0, [r7, #4]
 8008bce:	f000 fd58 	bl	8009682 <USBD_CtlError>
      break;
 8008bd2:	bf00      	nop
  }

  return ret;
 8008bd4:	7bfb      	ldrb	r3, [r7, #15]
}
 8008bd6:	4618      	mov	r0, r3
 8008bd8:	3710      	adds	r7, #16
 8008bda:	46bd      	mov	sp, r7
 8008bdc:	bd80      	pop	{r7, pc}
 8008bde:	bf00      	nop

08008be0 <USBD_StdItfReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdItfReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8008be0:	b580      	push	{r7, lr}
 8008be2:	b084      	sub	sp, #16
 8008be4:	af00      	add	r7, sp, #0
 8008be6:	6078      	str	r0, [r7, #4]
 8008be8:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 8008bea:	2300      	movs	r3, #0
 8008bec:	73fb      	strb	r3, [r7, #15]
  uint8_t idx;

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8008bee:	683b      	ldr	r3, [r7, #0]
 8008bf0:	781b      	ldrb	r3, [r3, #0]
 8008bf2:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8008bf6:	2b40      	cmp	r3, #64	; 0x40
 8008bf8:	d005      	beq.n	8008c06 <USBD_StdItfReq+0x26>
 8008bfa:	2b40      	cmp	r3, #64	; 0x40
 8008bfc:	d852      	bhi.n	8008ca4 <USBD_StdItfReq+0xc4>
 8008bfe:	2b00      	cmp	r3, #0
 8008c00:	d001      	beq.n	8008c06 <USBD_StdItfReq+0x26>
 8008c02:	2b20      	cmp	r3, #32
 8008c04:	d14e      	bne.n	8008ca4 <USBD_StdItfReq+0xc4>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
    case USB_REQ_TYPE_STANDARD:
      switch (pdev->dev_state)
 8008c06:	687b      	ldr	r3, [r7, #4]
 8008c08:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8008c0c:	b2db      	uxtb	r3, r3
 8008c0e:	3b01      	subs	r3, #1
 8008c10:	2b02      	cmp	r3, #2
 8008c12:	d840      	bhi.n	8008c96 <USBD_StdItfReq+0xb6>
      {
        case USBD_STATE_DEFAULT:
        case USBD_STATE_ADDRESSED:
        case USBD_STATE_CONFIGURED:

          if (LOBYTE(req->wIndex) <= USBD_MAX_NUM_INTERFACES)
 8008c14:	683b      	ldr	r3, [r7, #0]
 8008c16:	889b      	ldrh	r3, [r3, #4]
 8008c18:	b2db      	uxtb	r3, r3
 8008c1a:	2b01      	cmp	r3, #1
 8008c1c:	d836      	bhi.n	8008c8c <USBD_StdItfReq+0xac>
          {
            /* Get the class index relative to this interface */
            idx = USBD_CoreFindIF(pdev, LOBYTE(req->wIndex));
 8008c1e:	683b      	ldr	r3, [r7, #0]
 8008c20:	889b      	ldrh	r3, [r3, #4]
 8008c22:	b2db      	uxtb	r3, r3
 8008c24:	4619      	mov	r1, r3
 8008c26:	6878      	ldr	r0, [r7, #4]
 8008c28:	f7ff fed9 	bl	80089de <USBD_CoreFindIF>
 8008c2c:	4603      	mov	r3, r0
 8008c2e:	73bb      	strb	r3, [r7, #14]
            if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 8008c30:	7bbb      	ldrb	r3, [r7, #14]
 8008c32:	2bff      	cmp	r3, #255	; 0xff
 8008c34:	d01d      	beq.n	8008c72 <USBD_StdItfReq+0x92>
 8008c36:	7bbb      	ldrb	r3, [r7, #14]
 8008c38:	2b00      	cmp	r3, #0
 8008c3a:	d11a      	bne.n	8008c72 <USBD_StdItfReq+0x92>
            {
              /* Call the class data out function to manage the request */
              if (pdev->pClass[idx]->Setup != NULL)
 8008c3c:	7bba      	ldrb	r2, [r7, #14]
 8008c3e:	687b      	ldr	r3, [r7, #4]
 8008c40:	32ae      	adds	r2, #174	; 0xae
 8008c42:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008c46:	689b      	ldr	r3, [r3, #8]
 8008c48:	2b00      	cmp	r3, #0
 8008c4a:	d00f      	beq.n	8008c6c <USBD_StdItfReq+0x8c>
              {
                pdev->classId = idx;
 8008c4c:	7bba      	ldrb	r2, [r7, #14]
 8008c4e:	687b      	ldr	r3, [r7, #4]
 8008c50:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
                ret = (USBD_StatusTypeDef)(pdev->pClass[idx]->Setup(pdev, req));
 8008c54:	7bba      	ldrb	r2, [r7, #14]
 8008c56:	687b      	ldr	r3, [r7, #4]
 8008c58:	32ae      	adds	r2, #174	; 0xae
 8008c5a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008c5e:	689b      	ldr	r3, [r3, #8]
 8008c60:	6839      	ldr	r1, [r7, #0]
 8008c62:	6878      	ldr	r0, [r7, #4]
 8008c64:	4798      	blx	r3
 8008c66:	4603      	mov	r3, r0
 8008c68:	73fb      	strb	r3, [r7, #15]
              if (pdev->pClass[idx]->Setup != NULL)
 8008c6a:	e004      	b.n	8008c76 <USBD_StdItfReq+0x96>
              }
              else
              {
                /* should never reach this condition */
                ret = USBD_FAIL;
 8008c6c:	2303      	movs	r3, #3
 8008c6e:	73fb      	strb	r3, [r7, #15]
              if (pdev->pClass[idx]->Setup != NULL)
 8008c70:	e001      	b.n	8008c76 <USBD_StdItfReq+0x96>
              }
            }
            else
            {
              /* No relative interface found */
              ret = USBD_FAIL;
 8008c72:	2303      	movs	r3, #3
 8008c74:	73fb      	strb	r3, [r7, #15]
            }

            if ((req->wLength == 0U) && (ret == USBD_OK))
 8008c76:	683b      	ldr	r3, [r7, #0]
 8008c78:	88db      	ldrh	r3, [r3, #6]
 8008c7a:	2b00      	cmp	r3, #0
 8008c7c:	d110      	bne.n	8008ca0 <USBD_StdItfReq+0xc0>
 8008c7e:	7bfb      	ldrb	r3, [r7, #15]
 8008c80:	2b00      	cmp	r3, #0
 8008c82:	d10d      	bne.n	8008ca0 <USBD_StdItfReq+0xc0>
            {
              (void)USBD_CtlSendStatus(pdev);
 8008c84:	6878      	ldr	r0, [r7, #4]
 8008c86:	f000 fdc7 	bl	8009818 <USBD_CtlSendStatus>
          }
          else
          {
            USBD_CtlError(pdev, req);
          }
          break;
 8008c8a:	e009      	b.n	8008ca0 <USBD_StdItfReq+0xc0>
            USBD_CtlError(pdev, req);
 8008c8c:	6839      	ldr	r1, [r7, #0]
 8008c8e:	6878      	ldr	r0, [r7, #4]
 8008c90:	f000 fcf7 	bl	8009682 <USBD_CtlError>
          break;
 8008c94:	e004      	b.n	8008ca0 <USBD_StdItfReq+0xc0>

        default:
          USBD_CtlError(pdev, req);
 8008c96:	6839      	ldr	r1, [r7, #0]
 8008c98:	6878      	ldr	r0, [r7, #4]
 8008c9a:	f000 fcf2 	bl	8009682 <USBD_CtlError>
          break;
 8008c9e:	e000      	b.n	8008ca2 <USBD_StdItfReq+0xc2>
          break;
 8008ca0:	bf00      	nop
      }
      break;
 8008ca2:	e004      	b.n	8008cae <USBD_StdItfReq+0xce>

    default:
      USBD_CtlError(pdev, req);
 8008ca4:	6839      	ldr	r1, [r7, #0]
 8008ca6:	6878      	ldr	r0, [r7, #4]
 8008ca8:	f000 fceb 	bl	8009682 <USBD_CtlError>
      break;
 8008cac:	bf00      	nop
  }

  return ret;
 8008cae:	7bfb      	ldrb	r3, [r7, #15]
}
 8008cb0:	4618      	mov	r0, r3
 8008cb2:	3710      	adds	r7, #16
 8008cb4:	46bd      	mov	sp, r7
 8008cb6:	bd80      	pop	{r7, pc}

08008cb8 <USBD_StdEPReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdEPReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8008cb8:	b580      	push	{r7, lr}
 8008cba:	b084      	sub	sp, #16
 8008cbc:	af00      	add	r7, sp, #0
 8008cbe:	6078      	str	r0, [r7, #4]
 8008cc0:	6039      	str	r1, [r7, #0]
  USBD_EndpointTypeDef *pep;
  uint8_t ep_addr;
  uint8_t idx;
  USBD_StatusTypeDef ret = USBD_OK;
 8008cc2:	2300      	movs	r3, #0
 8008cc4:	73fb      	strb	r3, [r7, #15]

  ep_addr = LOBYTE(req->wIndex);
 8008cc6:	683b      	ldr	r3, [r7, #0]
 8008cc8:	889b      	ldrh	r3, [r3, #4]
 8008cca:	73bb      	strb	r3, [r7, #14]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8008ccc:	683b      	ldr	r3, [r7, #0]
 8008cce:	781b      	ldrb	r3, [r3, #0]
 8008cd0:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8008cd4:	2b40      	cmp	r3, #64	; 0x40
 8008cd6:	d007      	beq.n	8008ce8 <USBD_StdEPReq+0x30>
 8008cd8:	2b40      	cmp	r3, #64	; 0x40
 8008cda:	f200 817f 	bhi.w	8008fdc <USBD_StdEPReq+0x324>
 8008cde:	2b00      	cmp	r3, #0
 8008ce0:	d02a      	beq.n	8008d38 <USBD_StdEPReq+0x80>
 8008ce2:	2b20      	cmp	r3, #32
 8008ce4:	f040 817a 	bne.w	8008fdc <USBD_StdEPReq+0x324>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      /* Get the class index relative to this endpoint */
      idx = USBD_CoreFindEP(pdev, ep_addr);
 8008ce8:	7bbb      	ldrb	r3, [r7, #14]
 8008cea:	4619      	mov	r1, r3
 8008cec:	6878      	ldr	r0, [r7, #4]
 8008cee:	f7ff fe83 	bl	80089f8 <USBD_CoreFindEP>
 8008cf2:	4603      	mov	r3, r0
 8008cf4:	737b      	strb	r3, [r7, #13]
      if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 8008cf6:	7b7b      	ldrb	r3, [r7, #13]
 8008cf8:	2bff      	cmp	r3, #255	; 0xff
 8008cfa:	f000 8174 	beq.w	8008fe6 <USBD_StdEPReq+0x32e>
 8008cfe:	7b7b      	ldrb	r3, [r7, #13]
 8008d00:	2b00      	cmp	r3, #0
 8008d02:	f040 8170 	bne.w	8008fe6 <USBD_StdEPReq+0x32e>
      {
        pdev->classId = idx;
 8008d06:	7b7a      	ldrb	r2, [r7, #13]
 8008d08:	687b      	ldr	r3, [r7, #4]
 8008d0a:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
        /* Call the class data out function to manage the request */
        if (pdev->pClass[idx]->Setup != NULL)
 8008d0e:	7b7a      	ldrb	r2, [r7, #13]
 8008d10:	687b      	ldr	r3, [r7, #4]
 8008d12:	32ae      	adds	r2, #174	; 0xae
 8008d14:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008d18:	689b      	ldr	r3, [r3, #8]
 8008d1a:	2b00      	cmp	r3, #0
 8008d1c:	f000 8163 	beq.w	8008fe6 <USBD_StdEPReq+0x32e>
        {
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->Setup(pdev, req);
 8008d20:	7b7a      	ldrb	r2, [r7, #13]
 8008d22:	687b      	ldr	r3, [r7, #4]
 8008d24:	32ae      	adds	r2, #174	; 0xae
 8008d26:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008d2a:	689b      	ldr	r3, [r3, #8]
 8008d2c:	6839      	ldr	r1, [r7, #0]
 8008d2e:	6878      	ldr	r0, [r7, #4]
 8008d30:	4798      	blx	r3
 8008d32:	4603      	mov	r3, r0
 8008d34:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 8008d36:	e156      	b.n	8008fe6 <USBD_StdEPReq+0x32e>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 8008d38:	683b      	ldr	r3, [r7, #0]
 8008d3a:	785b      	ldrb	r3, [r3, #1]
 8008d3c:	2b03      	cmp	r3, #3
 8008d3e:	d008      	beq.n	8008d52 <USBD_StdEPReq+0x9a>
 8008d40:	2b03      	cmp	r3, #3
 8008d42:	f300 8145 	bgt.w	8008fd0 <USBD_StdEPReq+0x318>
 8008d46:	2b00      	cmp	r3, #0
 8008d48:	f000 809b 	beq.w	8008e82 <USBD_StdEPReq+0x1ca>
 8008d4c:	2b01      	cmp	r3, #1
 8008d4e:	d03c      	beq.n	8008dca <USBD_StdEPReq+0x112>
 8008d50:	e13e      	b.n	8008fd0 <USBD_StdEPReq+0x318>
      {
        case USB_REQ_SET_FEATURE:
          switch (pdev->dev_state)
 8008d52:	687b      	ldr	r3, [r7, #4]
 8008d54:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8008d58:	b2db      	uxtb	r3, r3
 8008d5a:	2b02      	cmp	r3, #2
 8008d5c:	d002      	beq.n	8008d64 <USBD_StdEPReq+0xac>
 8008d5e:	2b03      	cmp	r3, #3
 8008d60:	d016      	beq.n	8008d90 <USBD_StdEPReq+0xd8>
 8008d62:	e02c      	b.n	8008dbe <USBD_StdEPReq+0x106>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8008d64:	7bbb      	ldrb	r3, [r7, #14]
 8008d66:	2b00      	cmp	r3, #0
 8008d68:	d00d      	beq.n	8008d86 <USBD_StdEPReq+0xce>
 8008d6a:	7bbb      	ldrb	r3, [r7, #14]
 8008d6c:	2b80      	cmp	r3, #128	; 0x80
 8008d6e:	d00a      	beq.n	8008d86 <USBD_StdEPReq+0xce>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 8008d70:	7bbb      	ldrb	r3, [r7, #14]
 8008d72:	4619      	mov	r1, r3
 8008d74:	6878      	ldr	r0, [r7, #4]
 8008d76:	f001 f9ef 	bl	800a158 <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 8008d7a:	2180      	movs	r1, #128	; 0x80
 8008d7c:	6878      	ldr	r0, [r7, #4]
 8008d7e:	f001 f9eb 	bl	800a158 <USBD_LL_StallEP>
 8008d82:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 8008d84:	e020      	b.n	8008dc8 <USBD_StdEPReq+0x110>
                USBD_CtlError(pdev, req);
 8008d86:	6839      	ldr	r1, [r7, #0]
 8008d88:	6878      	ldr	r0, [r7, #4]
 8008d8a:	f000 fc7a 	bl	8009682 <USBD_CtlError>
              break;
 8008d8e:	e01b      	b.n	8008dc8 <USBD_StdEPReq+0x110>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 8008d90:	683b      	ldr	r3, [r7, #0]
 8008d92:	885b      	ldrh	r3, [r3, #2]
 8008d94:	2b00      	cmp	r3, #0
 8008d96:	d10e      	bne.n	8008db6 <USBD_StdEPReq+0xfe>
              {
                if ((ep_addr != 0x00U) && (ep_addr != 0x80U) && (req->wLength == 0x00U))
 8008d98:	7bbb      	ldrb	r3, [r7, #14]
 8008d9a:	2b00      	cmp	r3, #0
 8008d9c:	d00b      	beq.n	8008db6 <USBD_StdEPReq+0xfe>
 8008d9e:	7bbb      	ldrb	r3, [r7, #14]
 8008da0:	2b80      	cmp	r3, #128	; 0x80
 8008da2:	d008      	beq.n	8008db6 <USBD_StdEPReq+0xfe>
 8008da4:	683b      	ldr	r3, [r7, #0]
 8008da6:	88db      	ldrh	r3, [r3, #6]
 8008da8:	2b00      	cmp	r3, #0
 8008daa:	d104      	bne.n	8008db6 <USBD_StdEPReq+0xfe>
                {
                  (void)USBD_LL_StallEP(pdev, ep_addr);
 8008dac:	7bbb      	ldrb	r3, [r7, #14]
 8008dae:	4619      	mov	r1, r3
 8008db0:	6878      	ldr	r0, [r7, #4]
 8008db2:	f001 f9d1 	bl	800a158 <USBD_LL_StallEP>
                }
              }
              (void)USBD_CtlSendStatus(pdev);
 8008db6:	6878      	ldr	r0, [r7, #4]
 8008db8:	f000 fd2e 	bl	8009818 <USBD_CtlSendStatus>

              break;
 8008dbc:	e004      	b.n	8008dc8 <USBD_StdEPReq+0x110>

            default:
              USBD_CtlError(pdev, req);
 8008dbe:	6839      	ldr	r1, [r7, #0]
 8008dc0:	6878      	ldr	r0, [r7, #4]
 8008dc2:	f000 fc5e 	bl	8009682 <USBD_CtlError>
              break;
 8008dc6:	bf00      	nop
          }
          break;
 8008dc8:	e107      	b.n	8008fda <USBD_StdEPReq+0x322>

        case USB_REQ_CLEAR_FEATURE:

          switch (pdev->dev_state)
 8008dca:	687b      	ldr	r3, [r7, #4]
 8008dcc:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8008dd0:	b2db      	uxtb	r3, r3
 8008dd2:	2b02      	cmp	r3, #2
 8008dd4:	d002      	beq.n	8008ddc <USBD_StdEPReq+0x124>
 8008dd6:	2b03      	cmp	r3, #3
 8008dd8:	d016      	beq.n	8008e08 <USBD_StdEPReq+0x150>
 8008dda:	e04b      	b.n	8008e74 <USBD_StdEPReq+0x1bc>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8008ddc:	7bbb      	ldrb	r3, [r7, #14]
 8008dde:	2b00      	cmp	r3, #0
 8008de0:	d00d      	beq.n	8008dfe <USBD_StdEPReq+0x146>
 8008de2:	7bbb      	ldrb	r3, [r7, #14]
 8008de4:	2b80      	cmp	r3, #128	; 0x80
 8008de6:	d00a      	beq.n	8008dfe <USBD_StdEPReq+0x146>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 8008de8:	7bbb      	ldrb	r3, [r7, #14]
 8008dea:	4619      	mov	r1, r3
 8008dec:	6878      	ldr	r0, [r7, #4]
 8008dee:	f001 f9b3 	bl	800a158 <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 8008df2:	2180      	movs	r1, #128	; 0x80
 8008df4:	6878      	ldr	r0, [r7, #4]
 8008df6:	f001 f9af 	bl	800a158 <USBD_LL_StallEP>
 8008dfa:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 8008dfc:	e040      	b.n	8008e80 <USBD_StdEPReq+0x1c8>
                USBD_CtlError(pdev, req);
 8008dfe:	6839      	ldr	r1, [r7, #0]
 8008e00:	6878      	ldr	r0, [r7, #4]
 8008e02:	f000 fc3e 	bl	8009682 <USBD_CtlError>
              break;
 8008e06:	e03b      	b.n	8008e80 <USBD_StdEPReq+0x1c8>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 8008e08:	683b      	ldr	r3, [r7, #0]
 8008e0a:	885b      	ldrh	r3, [r3, #2]
 8008e0c:	2b00      	cmp	r3, #0
 8008e0e:	d136      	bne.n	8008e7e <USBD_StdEPReq+0x1c6>
              {
                if ((ep_addr & 0x7FU) != 0x00U)
 8008e10:	7bbb      	ldrb	r3, [r7, #14]
 8008e12:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8008e16:	2b00      	cmp	r3, #0
 8008e18:	d004      	beq.n	8008e24 <USBD_StdEPReq+0x16c>
                {
                  (void)USBD_LL_ClearStallEP(pdev, ep_addr);
 8008e1a:	7bbb      	ldrb	r3, [r7, #14]
 8008e1c:	4619      	mov	r1, r3
 8008e1e:	6878      	ldr	r0, [r7, #4]
 8008e20:	f001 f9b9 	bl	800a196 <USBD_LL_ClearStallEP>
                }
                (void)USBD_CtlSendStatus(pdev);
 8008e24:	6878      	ldr	r0, [r7, #4]
 8008e26:	f000 fcf7 	bl	8009818 <USBD_CtlSendStatus>

                /* Get the class index relative to this interface */
                idx = USBD_CoreFindEP(pdev, ep_addr);
 8008e2a:	7bbb      	ldrb	r3, [r7, #14]
 8008e2c:	4619      	mov	r1, r3
 8008e2e:	6878      	ldr	r0, [r7, #4]
 8008e30:	f7ff fde2 	bl	80089f8 <USBD_CoreFindEP>
 8008e34:	4603      	mov	r3, r0
 8008e36:	737b      	strb	r3, [r7, #13]
                if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 8008e38:	7b7b      	ldrb	r3, [r7, #13]
 8008e3a:	2bff      	cmp	r3, #255	; 0xff
 8008e3c:	d01f      	beq.n	8008e7e <USBD_StdEPReq+0x1c6>
 8008e3e:	7b7b      	ldrb	r3, [r7, #13]
 8008e40:	2b00      	cmp	r3, #0
 8008e42:	d11c      	bne.n	8008e7e <USBD_StdEPReq+0x1c6>
                {
                  pdev->classId = idx;
 8008e44:	7b7a      	ldrb	r2, [r7, #13]
 8008e46:	687b      	ldr	r3, [r7, #4]
 8008e48:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
                  /* Call the class data out function to manage the request */
                  if (pdev->pClass[idx]->Setup != NULL)
 8008e4c:	7b7a      	ldrb	r2, [r7, #13]
 8008e4e:	687b      	ldr	r3, [r7, #4]
 8008e50:	32ae      	adds	r2, #174	; 0xae
 8008e52:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008e56:	689b      	ldr	r3, [r3, #8]
 8008e58:	2b00      	cmp	r3, #0
 8008e5a:	d010      	beq.n	8008e7e <USBD_StdEPReq+0x1c6>
                  {
                    ret = (USBD_StatusTypeDef)(pdev->pClass[idx]->Setup(pdev, req));
 8008e5c:	7b7a      	ldrb	r2, [r7, #13]
 8008e5e:	687b      	ldr	r3, [r7, #4]
 8008e60:	32ae      	adds	r2, #174	; 0xae
 8008e62:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008e66:	689b      	ldr	r3, [r3, #8]
 8008e68:	6839      	ldr	r1, [r7, #0]
 8008e6a:	6878      	ldr	r0, [r7, #4]
 8008e6c:	4798      	blx	r3
 8008e6e:	4603      	mov	r3, r0
 8008e70:	73fb      	strb	r3, [r7, #15]
                  }
                }
              }
              break;
 8008e72:	e004      	b.n	8008e7e <USBD_StdEPReq+0x1c6>

            default:
              USBD_CtlError(pdev, req);
 8008e74:	6839      	ldr	r1, [r7, #0]
 8008e76:	6878      	ldr	r0, [r7, #4]
 8008e78:	f000 fc03 	bl	8009682 <USBD_CtlError>
              break;
 8008e7c:	e000      	b.n	8008e80 <USBD_StdEPReq+0x1c8>
              break;
 8008e7e:	bf00      	nop
          }
          break;
 8008e80:	e0ab      	b.n	8008fda <USBD_StdEPReq+0x322>

        case USB_REQ_GET_STATUS:
          switch (pdev->dev_state)
 8008e82:	687b      	ldr	r3, [r7, #4]
 8008e84:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8008e88:	b2db      	uxtb	r3, r3
 8008e8a:	2b02      	cmp	r3, #2
 8008e8c:	d002      	beq.n	8008e94 <USBD_StdEPReq+0x1dc>
 8008e8e:	2b03      	cmp	r3, #3
 8008e90:	d032      	beq.n	8008ef8 <USBD_StdEPReq+0x240>
 8008e92:	e097      	b.n	8008fc4 <USBD_StdEPReq+0x30c>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8008e94:	7bbb      	ldrb	r3, [r7, #14]
 8008e96:	2b00      	cmp	r3, #0
 8008e98:	d007      	beq.n	8008eaa <USBD_StdEPReq+0x1f2>
 8008e9a:	7bbb      	ldrb	r3, [r7, #14]
 8008e9c:	2b80      	cmp	r3, #128	; 0x80
 8008e9e:	d004      	beq.n	8008eaa <USBD_StdEPReq+0x1f2>
              {
                USBD_CtlError(pdev, req);
 8008ea0:	6839      	ldr	r1, [r7, #0]
 8008ea2:	6878      	ldr	r0, [r7, #4]
 8008ea4:	f000 fbed 	bl	8009682 <USBD_CtlError>
                break;
 8008ea8:	e091      	b.n	8008fce <USBD_StdEPReq+0x316>
              }
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8008eaa:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8008eae:	2b00      	cmp	r3, #0
 8008eb0:	da0b      	bge.n	8008eca <USBD_StdEPReq+0x212>
 8008eb2:	7bbb      	ldrb	r3, [r7, #14]
 8008eb4:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8008eb8:	4613      	mov	r3, r2
 8008eba:	009b      	lsls	r3, r3, #2
 8008ebc:	4413      	add	r3, r2
 8008ebe:	009b      	lsls	r3, r3, #2
 8008ec0:	3310      	adds	r3, #16
 8008ec2:	687a      	ldr	r2, [r7, #4]
 8008ec4:	4413      	add	r3, r2
 8008ec6:	3304      	adds	r3, #4
 8008ec8:	e00b      	b.n	8008ee2 <USBD_StdEPReq+0x22a>
                    &pdev->ep_out[ep_addr & 0x7FU];
 8008eca:	7bbb      	ldrb	r3, [r7, #14]
 8008ecc:	f003 027f 	and.w	r2, r3, #127	; 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8008ed0:	4613      	mov	r3, r2
 8008ed2:	009b      	lsls	r3, r3, #2
 8008ed4:	4413      	add	r3, r2
 8008ed6:	009b      	lsls	r3, r3, #2
 8008ed8:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 8008edc:	687a      	ldr	r2, [r7, #4]
 8008ede:	4413      	add	r3, r2
 8008ee0:	3304      	adds	r3, #4
 8008ee2:	60bb      	str	r3, [r7, #8]

              pep->status = 0x0000U;
 8008ee4:	68bb      	ldr	r3, [r7, #8]
 8008ee6:	2200      	movs	r2, #0
 8008ee8:	601a      	str	r2, [r3, #0]

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 8008eea:	68bb      	ldr	r3, [r7, #8]
 8008eec:	2202      	movs	r2, #2
 8008eee:	4619      	mov	r1, r3
 8008ef0:	6878      	ldr	r0, [r7, #4]
 8008ef2:	f000 fc37 	bl	8009764 <USBD_CtlSendData>
              break;
 8008ef6:	e06a      	b.n	8008fce <USBD_StdEPReq+0x316>

            case USBD_STATE_CONFIGURED:
              if ((ep_addr & 0x80U) == 0x80U)
 8008ef8:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8008efc:	2b00      	cmp	r3, #0
 8008efe:	da11      	bge.n	8008f24 <USBD_StdEPReq+0x26c>
              {
                if (pdev->ep_in[ep_addr & 0xFU].is_used == 0U)
 8008f00:	7bbb      	ldrb	r3, [r7, #14]
 8008f02:	f003 020f 	and.w	r2, r3, #15
 8008f06:	6879      	ldr	r1, [r7, #4]
 8008f08:	4613      	mov	r3, r2
 8008f0a:	009b      	lsls	r3, r3, #2
 8008f0c:	4413      	add	r3, r2
 8008f0e:	009b      	lsls	r3, r3, #2
 8008f10:	440b      	add	r3, r1
 8008f12:	3324      	adds	r3, #36	; 0x24
 8008f14:	881b      	ldrh	r3, [r3, #0]
 8008f16:	2b00      	cmp	r3, #0
 8008f18:	d117      	bne.n	8008f4a <USBD_StdEPReq+0x292>
                {
                  USBD_CtlError(pdev, req);
 8008f1a:	6839      	ldr	r1, [r7, #0]
 8008f1c:	6878      	ldr	r0, [r7, #4]
 8008f1e:	f000 fbb0 	bl	8009682 <USBD_CtlError>
                  break;
 8008f22:	e054      	b.n	8008fce <USBD_StdEPReq+0x316>
                }
              }
              else
              {
                if (pdev->ep_out[ep_addr & 0xFU].is_used == 0U)
 8008f24:	7bbb      	ldrb	r3, [r7, #14]
 8008f26:	f003 020f 	and.w	r2, r3, #15
 8008f2a:	6879      	ldr	r1, [r7, #4]
 8008f2c:	4613      	mov	r3, r2
 8008f2e:	009b      	lsls	r3, r3, #2
 8008f30:	4413      	add	r3, r2
 8008f32:	009b      	lsls	r3, r3, #2
 8008f34:	440b      	add	r3, r1
 8008f36:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 8008f3a:	881b      	ldrh	r3, [r3, #0]
 8008f3c:	2b00      	cmp	r3, #0
 8008f3e:	d104      	bne.n	8008f4a <USBD_StdEPReq+0x292>
                {
                  USBD_CtlError(pdev, req);
 8008f40:	6839      	ldr	r1, [r7, #0]
 8008f42:	6878      	ldr	r0, [r7, #4]
 8008f44:	f000 fb9d 	bl	8009682 <USBD_CtlError>
                  break;
 8008f48:	e041      	b.n	8008fce <USBD_StdEPReq+0x316>
                }
              }

              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8008f4a:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8008f4e:	2b00      	cmp	r3, #0
 8008f50:	da0b      	bge.n	8008f6a <USBD_StdEPReq+0x2b2>
 8008f52:	7bbb      	ldrb	r3, [r7, #14]
 8008f54:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8008f58:	4613      	mov	r3, r2
 8008f5a:	009b      	lsls	r3, r3, #2
 8008f5c:	4413      	add	r3, r2
 8008f5e:	009b      	lsls	r3, r3, #2
 8008f60:	3310      	adds	r3, #16
 8008f62:	687a      	ldr	r2, [r7, #4]
 8008f64:	4413      	add	r3, r2
 8008f66:	3304      	adds	r3, #4
 8008f68:	e00b      	b.n	8008f82 <USBD_StdEPReq+0x2ca>
                    &pdev->ep_out[ep_addr & 0x7FU];
 8008f6a:	7bbb      	ldrb	r3, [r7, #14]
 8008f6c:	f003 027f 	and.w	r2, r3, #127	; 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8008f70:	4613      	mov	r3, r2
 8008f72:	009b      	lsls	r3, r3, #2
 8008f74:	4413      	add	r3, r2
 8008f76:	009b      	lsls	r3, r3, #2
 8008f78:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 8008f7c:	687a      	ldr	r2, [r7, #4]
 8008f7e:	4413      	add	r3, r2
 8008f80:	3304      	adds	r3, #4
 8008f82:	60bb      	str	r3, [r7, #8]

              if ((ep_addr == 0x00U) || (ep_addr == 0x80U))
 8008f84:	7bbb      	ldrb	r3, [r7, #14]
 8008f86:	2b00      	cmp	r3, #0
 8008f88:	d002      	beq.n	8008f90 <USBD_StdEPReq+0x2d8>
 8008f8a:	7bbb      	ldrb	r3, [r7, #14]
 8008f8c:	2b80      	cmp	r3, #128	; 0x80
 8008f8e:	d103      	bne.n	8008f98 <USBD_StdEPReq+0x2e0>
              {
                pep->status = 0x0000U;
 8008f90:	68bb      	ldr	r3, [r7, #8]
 8008f92:	2200      	movs	r2, #0
 8008f94:	601a      	str	r2, [r3, #0]
 8008f96:	e00e      	b.n	8008fb6 <USBD_StdEPReq+0x2fe>
              }
              else if (USBD_LL_IsStallEP(pdev, ep_addr) != 0U)
 8008f98:	7bbb      	ldrb	r3, [r7, #14]
 8008f9a:	4619      	mov	r1, r3
 8008f9c:	6878      	ldr	r0, [r7, #4]
 8008f9e:	f001 f919 	bl	800a1d4 <USBD_LL_IsStallEP>
 8008fa2:	4603      	mov	r3, r0
 8008fa4:	2b00      	cmp	r3, #0
 8008fa6:	d003      	beq.n	8008fb0 <USBD_StdEPReq+0x2f8>
              {
                pep->status = 0x0001U;
 8008fa8:	68bb      	ldr	r3, [r7, #8]
 8008faa:	2201      	movs	r2, #1
 8008fac:	601a      	str	r2, [r3, #0]
 8008fae:	e002      	b.n	8008fb6 <USBD_StdEPReq+0x2fe>
              }
              else
              {
                pep->status = 0x0000U;
 8008fb0:	68bb      	ldr	r3, [r7, #8]
 8008fb2:	2200      	movs	r2, #0
 8008fb4:	601a      	str	r2, [r3, #0]
              }

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 8008fb6:	68bb      	ldr	r3, [r7, #8]
 8008fb8:	2202      	movs	r2, #2
 8008fba:	4619      	mov	r1, r3
 8008fbc:	6878      	ldr	r0, [r7, #4]
 8008fbe:	f000 fbd1 	bl	8009764 <USBD_CtlSendData>
              break;
 8008fc2:	e004      	b.n	8008fce <USBD_StdEPReq+0x316>

            default:
              USBD_CtlError(pdev, req);
 8008fc4:	6839      	ldr	r1, [r7, #0]
 8008fc6:	6878      	ldr	r0, [r7, #4]
 8008fc8:	f000 fb5b 	bl	8009682 <USBD_CtlError>
              break;
 8008fcc:	bf00      	nop
          }
          break;
 8008fce:	e004      	b.n	8008fda <USBD_StdEPReq+0x322>

        default:
          USBD_CtlError(pdev, req);
 8008fd0:	6839      	ldr	r1, [r7, #0]
 8008fd2:	6878      	ldr	r0, [r7, #4]
 8008fd4:	f000 fb55 	bl	8009682 <USBD_CtlError>
          break;
 8008fd8:	bf00      	nop
      }
      break;
 8008fda:	e005      	b.n	8008fe8 <USBD_StdEPReq+0x330>

    default:
      USBD_CtlError(pdev, req);
 8008fdc:	6839      	ldr	r1, [r7, #0]
 8008fde:	6878      	ldr	r0, [r7, #4]
 8008fe0:	f000 fb4f 	bl	8009682 <USBD_CtlError>
      break;
 8008fe4:	e000      	b.n	8008fe8 <USBD_StdEPReq+0x330>
      break;
 8008fe6:	bf00      	nop
  }

  return ret;
 8008fe8:	7bfb      	ldrb	r3, [r7, #15]
}
 8008fea:	4618      	mov	r0, r3
 8008fec:	3710      	adds	r7, #16
 8008fee:	46bd      	mov	sp, r7
 8008ff0:	bd80      	pop	{r7, pc}
	...

08008ff4 <USBD_GetDescriptor>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetDescriptor(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8008ff4:	b580      	push	{r7, lr}
 8008ff6:	b084      	sub	sp, #16
 8008ff8:	af00      	add	r7, sp, #0
 8008ffa:	6078      	str	r0, [r7, #4]
 8008ffc:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 8008ffe:	2300      	movs	r3, #0
 8009000:	813b      	strh	r3, [r7, #8]
  uint8_t *pbuf = NULL;
 8009002:	2300      	movs	r3, #0
 8009004:	60fb      	str	r3, [r7, #12]
  uint8_t err = 0U;
 8009006:	2300      	movs	r3, #0
 8009008:	72fb      	strb	r3, [r7, #11]

  switch (req->wValue >> 8)
 800900a:	683b      	ldr	r3, [r7, #0]
 800900c:	885b      	ldrh	r3, [r3, #2]
 800900e:	0a1b      	lsrs	r3, r3, #8
 8009010:	b29b      	uxth	r3, r3
 8009012:	3b01      	subs	r3, #1
 8009014:	2b06      	cmp	r3, #6
 8009016:	f200 8128 	bhi.w	800926a <USBD_GetDescriptor+0x276>
 800901a:	a201      	add	r2, pc, #4	; (adr r2, 8009020 <USBD_GetDescriptor+0x2c>)
 800901c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009020:	0800903d 	.word	0x0800903d
 8009024:	08009055 	.word	0x08009055
 8009028:	08009095 	.word	0x08009095
 800902c:	0800926b 	.word	0x0800926b
 8009030:	0800926b 	.word	0x0800926b
 8009034:	0800920b 	.word	0x0800920b
 8009038:	08009237 	.word	0x08009237
        err++;
      }
      break;
#endif /* (USBD_LPM_ENABLED == 1U) || (USBD_CLASS_BOS_ENABLED == 1U) */
    case USB_DESC_TYPE_DEVICE:
      pbuf = pdev->pDesc->GetDeviceDescriptor(pdev->dev_speed, &len);
 800903c:	687b      	ldr	r3, [r7, #4]
 800903e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8009042:	681b      	ldr	r3, [r3, #0]
 8009044:	687a      	ldr	r2, [r7, #4]
 8009046:	7c12      	ldrb	r2, [r2, #16]
 8009048:	f107 0108 	add.w	r1, r7, #8
 800904c:	4610      	mov	r0, r2
 800904e:	4798      	blx	r3
 8009050:	60f8      	str	r0, [r7, #12]
      break;
 8009052:	e112      	b.n	800927a <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 8009054:	687b      	ldr	r3, [r7, #4]
 8009056:	7c1b      	ldrb	r3, [r3, #16]
 8009058:	2b00      	cmp	r3, #0
 800905a:	d10d      	bne.n	8009078 <USBD_GetDescriptor+0x84>
          pbuf   = (uint8_t *)USBD_CMPSIT.GetHSConfigDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetHSConfigDescriptor(&len);
 800905c:	687b      	ldr	r3, [r7, #4]
 800905e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8009062:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009064:	f107 0208 	add.w	r2, r7, #8
 8009068:	4610      	mov	r0, r2
 800906a:	4798      	blx	r3
 800906c:	60f8      	str	r0, [r7, #12]
        }
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 800906e:	68fb      	ldr	r3, [r7, #12]
 8009070:	3301      	adds	r3, #1
 8009072:	2202      	movs	r2, #2
 8009074:	701a      	strb	r2, [r3, #0]
        {
          pbuf   = (uint8_t *)pdev->pClass[0]->GetFSConfigDescriptor(&len);
        }
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
      }
      break;
 8009076:	e100      	b.n	800927a <USBD_GetDescriptor+0x286>
          pbuf   = (uint8_t *)pdev->pClass[0]->GetFSConfigDescriptor(&len);
 8009078:	687b      	ldr	r3, [r7, #4]
 800907a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800907e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009080:	f107 0208 	add.w	r2, r7, #8
 8009084:	4610      	mov	r0, r2
 8009086:	4798      	blx	r3
 8009088:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 800908a:	68fb      	ldr	r3, [r7, #12]
 800908c:	3301      	adds	r3, #1
 800908e:	2202      	movs	r2, #2
 8009090:	701a      	strb	r2, [r3, #0]
      break;
 8009092:	e0f2      	b.n	800927a <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_STRING:
      switch ((uint8_t)(req->wValue))
 8009094:	683b      	ldr	r3, [r7, #0]
 8009096:	885b      	ldrh	r3, [r3, #2]
 8009098:	b2db      	uxtb	r3, r3
 800909a:	2b05      	cmp	r3, #5
 800909c:	f200 80ac 	bhi.w	80091f8 <USBD_GetDescriptor+0x204>
 80090a0:	a201      	add	r2, pc, #4	; (adr r2, 80090a8 <USBD_GetDescriptor+0xb4>)
 80090a2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80090a6:	bf00      	nop
 80090a8:	080090c1 	.word	0x080090c1
 80090ac:	080090f5 	.word	0x080090f5
 80090b0:	08009129 	.word	0x08009129
 80090b4:	0800915d 	.word	0x0800915d
 80090b8:	08009191 	.word	0x08009191
 80090bc:	080091c5 	.word	0x080091c5
      {
        case USBD_IDX_LANGID_STR:
          if (pdev->pDesc->GetLangIDStrDescriptor != NULL)
 80090c0:	687b      	ldr	r3, [r7, #4]
 80090c2:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80090c6:	685b      	ldr	r3, [r3, #4]
 80090c8:	2b00      	cmp	r3, #0
 80090ca:	d00b      	beq.n	80090e4 <USBD_GetDescriptor+0xf0>
          {
            pbuf = pdev->pDesc->GetLangIDStrDescriptor(pdev->dev_speed, &len);
 80090cc:	687b      	ldr	r3, [r7, #4]
 80090ce:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80090d2:	685b      	ldr	r3, [r3, #4]
 80090d4:	687a      	ldr	r2, [r7, #4]
 80090d6:	7c12      	ldrb	r2, [r2, #16]
 80090d8:	f107 0108 	add.w	r1, r7, #8
 80090dc:	4610      	mov	r0, r2
 80090de:	4798      	blx	r3
 80090e0:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 80090e2:	e091      	b.n	8009208 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 80090e4:	6839      	ldr	r1, [r7, #0]
 80090e6:	6878      	ldr	r0, [r7, #4]
 80090e8:	f000 facb 	bl	8009682 <USBD_CtlError>
            err++;
 80090ec:	7afb      	ldrb	r3, [r7, #11]
 80090ee:	3301      	adds	r3, #1
 80090f0:	72fb      	strb	r3, [r7, #11]
          break;
 80090f2:	e089      	b.n	8009208 <USBD_GetDescriptor+0x214>

        case USBD_IDX_MFC_STR:
          if (pdev->pDesc->GetManufacturerStrDescriptor != NULL)
 80090f4:	687b      	ldr	r3, [r7, #4]
 80090f6:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80090fa:	689b      	ldr	r3, [r3, #8]
 80090fc:	2b00      	cmp	r3, #0
 80090fe:	d00b      	beq.n	8009118 <USBD_GetDescriptor+0x124>
          {
            pbuf = pdev->pDesc->GetManufacturerStrDescriptor(pdev->dev_speed, &len);
 8009100:	687b      	ldr	r3, [r7, #4]
 8009102:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8009106:	689b      	ldr	r3, [r3, #8]
 8009108:	687a      	ldr	r2, [r7, #4]
 800910a:	7c12      	ldrb	r2, [r2, #16]
 800910c:	f107 0108 	add.w	r1, r7, #8
 8009110:	4610      	mov	r0, r2
 8009112:	4798      	blx	r3
 8009114:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8009116:	e077      	b.n	8009208 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8009118:	6839      	ldr	r1, [r7, #0]
 800911a:	6878      	ldr	r0, [r7, #4]
 800911c:	f000 fab1 	bl	8009682 <USBD_CtlError>
            err++;
 8009120:	7afb      	ldrb	r3, [r7, #11]
 8009122:	3301      	adds	r3, #1
 8009124:	72fb      	strb	r3, [r7, #11]
          break;
 8009126:	e06f      	b.n	8009208 <USBD_GetDescriptor+0x214>

        case USBD_IDX_PRODUCT_STR:
          if (pdev->pDesc->GetProductStrDescriptor != NULL)
 8009128:	687b      	ldr	r3, [r7, #4]
 800912a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800912e:	68db      	ldr	r3, [r3, #12]
 8009130:	2b00      	cmp	r3, #0
 8009132:	d00b      	beq.n	800914c <USBD_GetDescriptor+0x158>
          {
            pbuf = pdev->pDesc->GetProductStrDescriptor(pdev->dev_speed, &len);
 8009134:	687b      	ldr	r3, [r7, #4]
 8009136:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800913a:	68db      	ldr	r3, [r3, #12]
 800913c:	687a      	ldr	r2, [r7, #4]
 800913e:	7c12      	ldrb	r2, [r2, #16]
 8009140:	f107 0108 	add.w	r1, r7, #8
 8009144:	4610      	mov	r0, r2
 8009146:	4798      	blx	r3
 8009148:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800914a:	e05d      	b.n	8009208 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 800914c:	6839      	ldr	r1, [r7, #0]
 800914e:	6878      	ldr	r0, [r7, #4]
 8009150:	f000 fa97 	bl	8009682 <USBD_CtlError>
            err++;
 8009154:	7afb      	ldrb	r3, [r7, #11]
 8009156:	3301      	adds	r3, #1
 8009158:	72fb      	strb	r3, [r7, #11]
          break;
 800915a:	e055      	b.n	8009208 <USBD_GetDescriptor+0x214>

        case USBD_IDX_SERIAL_STR:
          if (pdev->pDesc->GetSerialStrDescriptor != NULL)
 800915c:	687b      	ldr	r3, [r7, #4]
 800915e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8009162:	691b      	ldr	r3, [r3, #16]
 8009164:	2b00      	cmp	r3, #0
 8009166:	d00b      	beq.n	8009180 <USBD_GetDescriptor+0x18c>
          {
            pbuf = pdev->pDesc->GetSerialStrDescriptor(pdev->dev_speed, &len);
 8009168:	687b      	ldr	r3, [r7, #4]
 800916a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800916e:	691b      	ldr	r3, [r3, #16]
 8009170:	687a      	ldr	r2, [r7, #4]
 8009172:	7c12      	ldrb	r2, [r2, #16]
 8009174:	f107 0108 	add.w	r1, r7, #8
 8009178:	4610      	mov	r0, r2
 800917a:	4798      	blx	r3
 800917c:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800917e:	e043      	b.n	8009208 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8009180:	6839      	ldr	r1, [r7, #0]
 8009182:	6878      	ldr	r0, [r7, #4]
 8009184:	f000 fa7d 	bl	8009682 <USBD_CtlError>
            err++;
 8009188:	7afb      	ldrb	r3, [r7, #11]
 800918a:	3301      	adds	r3, #1
 800918c:	72fb      	strb	r3, [r7, #11]
          break;
 800918e:	e03b      	b.n	8009208 <USBD_GetDescriptor+0x214>

        case USBD_IDX_CONFIG_STR:
          if (pdev->pDesc->GetConfigurationStrDescriptor != NULL)
 8009190:	687b      	ldr	r3, [r7, #4]
 8009192:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8009196:	695b      	ldr	r3, [r3, #20]
 8009198:	2b00      	cmp	r3, #0
 800919a:	d00b      	beq.n	80091b4 <USBD_GetDescriptor+0x1c0>
          {
            pbuf = pdev->pDesc->GetConfigurationStrDescriptor(pdev->dev_speed, &len);
 800919c:	687b      	ldr	r3, [r7, #4]
 800919e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80091a2:	695b      	ldr	r3, [r3, #20]
 80091a4:	687a      	ldr	r2, [r7, #4]
 80091a6:	7c12      	ldrb	r2, [r2, #16]
 80091a8:	f107 0108 	add.w	r1, r7, #8
 80091ac:	4610      	mov	r0, r2
 80091ae:	4798      	blx	r3
 80091b0:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 80091b2:	e029      	b.n	8009208 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 80091b4:	6839      	ldr	r1, [r7, #0]
 80091b6:	6878      	ldr	r0, [r7, #4]
 80091b8:	f000 fa63 	bl	8009682 <USBD_CtlError>
            err++;
 80091bc:	7afb      	ldrb	r3, [r7, #11]
 80091be:	3301      	adds	r3, #1
 80091c0:	72fb      	strb	r3, [r7, #11]
          break;
 80091c2:	e021      	b.n	8009208 <USBD_GetDescriptor+0x214>

        case USBD_IDX_INTERFACE_STR:
          if (pdev->pDesc->GetInterfaceStrDescriptor != NULL)
 80091c4:	687b      	ldr	r3, [r7, #4]
 80091c6:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80091ca:	699b      	ldr	r3, [r3, #24]
 80091cc:	2b00      	cmp	r3, #0
 80091ce:	d00b      	beq.n	80091e8 <USBD_GetDescriptor+0x1f4>
          {
            pbuf = pdev->pDesc->GetInterfaceStrDescriptor(pdev->dev_speed, &len);
 80091d0:	687b      	ldr	r3, [r7, #4]
 80091d2:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80091d6:	699b      	ldr	r3, [r3, #24]
 80091d8:	687a      	ldr	r2, [r7, #4]
 80091da:	7c12      	ldrb	r2, [r2, #16]
 80091dc:	f107 0108 	add.w	r1, r7, #8
 80091e0:	4610      	mov	r0, r2
 80091e2:	4798      	blx	r3
 80091e4:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 80091e6:	e00f      	b.n	8009208 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 80091e8:	6839      	ldr	r1, [r7, #0]
 80091ea:	6878      	ldr	r0, [r7, #4]
 80091ec:	f000 fa49 	bl	8009682 <USBD_CtlError>
            err++;
 80091f0:	7afb      	ldrb	r3, [r7, #11]
 80091f2:	3301      	adds	r3, #1
 80091f4:	72fb      	strb	r3, [r7, #11]
          break;
 80091f6:	e007      	b.n	8009208 <USBD_GetDescriptor+0x214>
            err++;
          }
#endif /* USBD_SUPPORT_USER_STRING_DESC  */

#if ((USBD_CLASS_USER_STRING_DESC == 0U) && (USBD_SUPPORT_USER_STRING_DESC == 0U))
          USBD_CtlError(pdev, req);
 80091f8:	6839      	ldr	r1, [r7, #0]
 80091fa:	6878      	ldr	r0, [r7, #4]
 80091fc:	f000 fa41 	bl	8009682 <USBD_CtlError>
          err++;
 8009200:	7afb      	ldrb	r3, [r7, #11]
 8009202:	3301      	adds	r3, #1
 8009204:	72fb      	strb	r3, [r7, #11]
#endif /* (USBD_CLASS_USER_STRING_DESC == 0U) && (USBD_SUPPORT_USER_STRING_DESC == 0U) */
          break;
 8009206:	bf00      	nop
      }
      break;
 8009208:	e037      	b.n	800927a <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_DEVICE_QUALIFIER:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 800920a:	687b      	ldr	r3, [r7, #4]
 800920c:	7c1b      	ldrb	r3, [r3, #16]
 800920e:	2b00      	cmp	r3, #0
 8009210:	d109      	bne.n	8009226 <USBD_GetDescriptor+0x232>
          pbuf = (uint8_t *)USBD_CMPSIT.GetDeviceQualifierDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetDeviceQualifierDescriptor(&len);
 8009212:	687b      	ldr	r3, [r7, #4]
 8009214:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8009218:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800921a:	f107 0208 	add.w	r2, r7, #8
 800921e:	4610      	mov	r0, r2
 8009220:	4798      	blx	r3
 8009222:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 8009224:	e029      	b.n	800927a <USBD_GetDescriptor+0x286>
        USBD_CtlError(pdev, req);
 8009226:	6839      	ldr	r1, [r7, #0]
 8009228:	6878      	ldr	r0, [r7, #4]
 800922a:	f000 fa2a 	bl	8009682 <USBD_CtlError>
        err++;
 800922e:	7afb      	ldrb	r3, [r7, #11]
 8009230:	3301      	adds	r3, #1
 8009232:	72fb      	strb	r3, [r7, #11]
      break;
 8009234:	e021      	b.n	800927a <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 8009236:	687b      	ldr	r3, [r7, #4]
 8009238:	7c1b      	ldrb	r3, [r3, #16]
 800923a:	2b00      	cmp	r3, #0
 800923c:	d10d      	bne.n	800925a <USBD_GetDescriptor+0x266>
          pbuf = (uint8_t *)USBD_CMPSIT.GetOtherSpeedConfigDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetOtherSpeedConfigDescriptor(&len);
 800923e:	687b      	ldr	r3, [r7, #4]
 8009240:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8009244:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009246:	f107 0208 	add.w	r2, r7, #8
 800924a:	4610      	mov	r0, r2
 800924c:	4798      	blx	r3
 800924e:	60f8      	str	r0, [r7, #12]
        }
        pbuf[1] = USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION;
 8009250:	68fb      	ldr	r3, [r7, #12]
 8009252:	3301      	adds	r3, #1
 8009254:	2207      	movs	r2, #7
 8009256:	701a      	strb	r2, [r3, #0]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 8009258:	e00f      	b.n	800927a <USBD_GetDescriptor+0x286>
        USBD_CtlError(pdev, req);
 800925a:	6839      	ldr	r1, [r7, #0]
 800925c:	6878      	ldr	r0, [r7, #4]
 800925e:	f000 fa10 	bl	8009682 <USBD_CtlError>
        err++;
 8009262:	7afb      	ldrb	r3, [r7, #11]
 8009264:	3301      	adds	r3, #1
 8009266:	72fb      	strb	r3, [r7, #11]
      break;
 8009268:	e007      	b.n	800927a <USBD_GetDescriptor+0x286>

    default:
      USBD_CtlError(pdev, req);
 800926a:	6839      	ldr	r1, [r7, #0]
 800926c:	6878      	ldr	r0, [r7, #4]
 800926e:	f000 fa08 	bl	8009682 <USBD_CtlError>
      err++;
 8009272:	7afb      	ldrb	r3, [r7, #11]
 8009274:	3301      	adds	r3, #1
 8009276:	72fb      	strb	r3, [r7, #11]
      break;
 8009278:	bf00      	nop
  }

  if (err != 0U)
 800927a:	7afb      	ldrb	r3, [r7, #11]
 800927c:	2b00      	cmp	r3, #0
 800927e:	d11e      	bne.n	80092be <USBD_GetDescriptor+0x2ca>
  {
    return;
  }

  if (req->wLength != 0U)
 8009280:	683b      	ldr	r3, [r7, #0]
 8009282:	88db      	ldrh	r3, [r3, #6]
 8009284:	2b00      	cmp	r3, #0
 8009286:	d016      	beq.n	80092b6 <USBD_GetDescriptor+0x2c2>
  {
    if (len != 0U)
 8009288:	893b      	ldrh	r3, [r7, #8]
 800928a:	2b00      	cmp	r3, #0
 800928c:	d00e      	beq.n	80092ac <USBD_GetDescriptor+0x2b8>
    {
      len = MIN(len, req->wLength);
 800928e:	683b      	ldr	r3, [r7, #0]
 8009290:	88da      	ldrh	r2, [r3, #6]
 8009292:	893b      	ldrh	r3, [r7, #8]
 8009294:	4293      	cmp	r3, r2
 8009296:	bf28      	it	cs
 8009298:	4613      	movcs	r3, r2
 800929a:	b29b      	uxth	r3, r3
 800929c:	813b      	strh	r3, [r7, #8]
      (void)USBD_CtlSendData(pdev, pbuf, len);
 800929e:	893b      	ldrh	r3, [r7, #8]
 80092a0:	461a      	mov	r2, r3
 80092a2:	68f9      	ldr	r1, [r7, #12]
 80092a4:	6878      	ldr	r0, [r7, #4]
 80092a6:	f000 fa5d 	bl	8009764 <USBD_CtlSendData>
 80092aa:	e009      	b.n	80092c0 <USBD_GetDescriptor+0x2cc>
    }
    else
    {
      USBD_CtlError(pdev, req);
 80092ac:	6839      	ldr	r1, [r7, #0]
 80092ae:	6878      	ldr	r0, [r7, #4]
 80092b0:	f000 f9e7 	bl	8009682 <USBD_CtlError>
 80092b4:	e004      	b.n	80092c0 <USBD_GetDescriptor+0x2cc>
    }
  }
  else
  {
    (void)USBD_CtlSendStatus(pdev);
 80092b6:	6878      	ldr	r0, [r7, #4]
 80092b8:	f000 faae 	bl	8009818 <USBD_CtlSendStatus>
 80092bc:	e000      	b.n	80092c0 <USBD_GetDescriptor+0x2cc>
    return;
 80092be:	bf00      	nop
  }
}
 80092c0:	3710      	adds	r7, #16
 80092c2:	46bd      	mov	sp, r7
 80092c4:	bd80      	pop	{r7, pc}
 80092c6:	bf00      	nop

080092c8 <USBD_SetAddress>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_SetAddress(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80092c8:	b580      	push	{r7, lr}
 80092ca:	b084      	sub	sp, #16
 80092cc:	af00      	add	r7, sp, #0
 80092ce:	6078      	str	r0, [r7, #4]
 80092d0:	6039      	str	r1, [r7, #0]
  uint8_t  dev_addr;

  if ((req->wIndex == 0U) && (req->wLength == 0U) && (req->wValue < 128U))
 80092d2:	683b      	ldr	r3, [r7, #0]
 80092d4:	889b      	ldrh	r3, [r3, #4]
 80092d6:	2b00      	cmp	r3, #0
 80092d8:	d131      	bne.n	800933e <USBD_SetAddress+0x76>
 80092da:	683b      	ldr	r3, [r7, #0]
 80092dc:	88db      	ldrh	r3, [r3, #6]
 80092de:	2b00      	cmp	r3, #0
 80092e0:	d12d      	bne.n	800933e <USBD_SetAddress+0x76>
 80092e2:	683b      	ldr	r3, [r7, #0]
 80092e4:	885b      	ldrh	r3, [r3, #2]
 80092e6:	2b7f      	cmp	r3, #127	; 0x7f
 80092e8:	d829      	bhi.n	800933e <USBD_SetAddress+0x76>
  {
    dev_addr = (uint8_t)(req->wValue) & 0x7FU;
 80092ea:	683b      	ldr	r3, [r7, #0]
 80092ec:	885b      	ldrh	r3, [r3, #2]
 80092ee:	b2db      	uxtb	r3, r3
 80092f0:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80092f4:	73fb      	strb	r3, [r7, #15]

    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80092f6:	687b      	ldr	r3, [r7, #4]
 80092f8:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80092fc:	b2db      	uxtb	r3, r3
 80092fe:	2b03      	cmp	r3, #3
 8009300:	d104      	bne.n	800930c <USBD_SetAddress+0x44>
    {
      USBD_CtlError(pdev, req);
 8009302:	6839      	ldr	r1, [r7, #0]
 8009304:	6878      	ldr	r0, [r7, #4]
 8009306:	f000 f9bc 	bl	8009682 <USBD_CtlError>
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800930a:	e01d      	b.n	8009348 <USBD_SetAddress+0x80>
    }
    else
    {
      pdev->dev_address = dev_addr;
 800930c:	687b      	ldr	r3, [r7, #4]
 800930e:	7bfa      	ldrb	r2, [r7, #15]
 8009310:	f883 229e 	strb.w	r2, [r3, #670]	; 0x29e
      (void)USBD_LL_SetUSBAddress(pdev, dev_addr);
 8009314:	7bfb      	ldrb	r3, [r7, #15]
 8009316:	4619      	mov	r1, r3
 8009318:	6878      	ldr	r0, [r7, #4]
 800931a:	f000 ff87 	bl	800a22c <USBD_LL_SetUSBAddress>
      (void)USBD_CtlSendStatus(pdev);
 800931e:	6878      	ldr	r0, [r7, #4]
 8009320:	f000 fa7a 	bl	8009818 <USBD_CtlSendStatus>

      if (dev_addr != 0U)
 8009324:	7bfb      	ldrb	r3, [r7, #15]
 8009326:	2b00      	cmp	r3, #0
 8009328:	d004      	beq.n	8009334 <USBD_SetAddress+0x6c>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 800932a:	687b      	ldr	r3, [r7, #4]
 800932c:	2202      	movs	r2, #2
 800932e:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8009332:	e009      	b.n	8009348 <USBD_SetAddress+0x80>
      }
      else
      {
        pdev->dev_state = USBD_STATE_DEFAULT;
 8009334:	687b      	ldr	r3, [r7, #4]
 8009336:	2201      	movs	r2, #1
 8009338:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800933c:	e004      	b.n	8009348 <USBD_SetAddress+0x80>
      }
    }
  }
  else
  {
    USBD_CtlError(pdev, req);
 800933e:	6839      	ldr	r1, [r7, #0]
 8009340:	6878      	ldr	r0, [r7, #4]
 8009342:	f000 f99e 	bl	8009682 <USBD_CtlError>
  }
}
 8009346:	bf00      	nop
 8009348:	bf00      	nop
 800934a:	3710      	adds	r7, #16
 800934c:	46bd      	mov	sp, r7
 800934e:	bd80      	pop	{r7, pc}

08009350 <USBD_SetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static USBD_StatusTypeDef USBD_SetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8009350:	b580      	push	{r7, lr}
 8009352:	b084      	sub	sp, #16
 8009354:	af00      	add	r7, sp, #0
 8009356:	6078      	str	r0, [r7, #4]
 8009358:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 800935a:	2300      	movs	r3, #0
 800935c:	73fb      	strb	r3, [r7, #15]
  static uint8_t cfgidx;

  cfgidx = (uint8_t)(req->wValue);
 800935e:	683b      	ldr	r3, [r7, #0]
 8009360:	885b      	ldrh	r3, [r3, #2]
 8009362:	b2da      	uxtb	r2, r3
 8009364:	4b4e      	ldr	r3, [pc, #312]	; (80094a0 <USBD_SetConfig+0x150>)
 8009366:	701a      	strb	r2, [r3, #0]

  if (cfgidx > USBD_MAX_NUM_CONFIGURATION)
 8009368:	4b4d      	ldr	r3, [pc, #308]	; (80094a0 <USBD_SetConfig+0x150>)
 800936a:	781b      	ldrb	r3, [r3, #0]
 800936c:	2b01      	cmp	r3, #1
 800936e:	d905      	bls.n	800937c <USBD_SetConfig+0x2c>
  {
    USBD_CtlError(pdev, req);
 8009370:	6839      	ldr	r1, [r7, #0]
 8009372:	6878      	ldr	r0, [r7, #4]
 8009374:	f000 f985 	bl	8009682 <USBD_CtlError>
    return USBD_FAIL;
 8009378:	2303      	movs	r3, #3
 800937a:	e08c      	b.n	8009496 <USBD_SetConfig+0x146>
  }

  switch (pdev->dev_state)
 800937c:	687b      	ldr	r3, [r7, #4]
 800937e:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8009382:	b2db      	uxtb	r3, r3
 8009384:	2b02      	cmp	r3, #2
 8009386:	d002      	beq.n	800938e <USBD_SetConfig+0x3e>
 8009388:	2b03      	cmp	r3, #3
 800938a:	d029      	beq.n	80093e0 <USBD_SetConfig+0x90>
 800938c:	e075      	b.n	800947a <USBD_SetConfig+0x12a>
  {
    case USBD_STATE_ADDRESSED:
      if (cfgidx != 0U)
 800938e:	4b44      	ldr	r3, [pc, #272]	; (80094a0 <USBD_SetConfig+0x150>)
 8009390:	781b      	ldrb	r3, [r3, #0]
 8009392:	2b00      	cmp	r3, #0
 8009394:	d020      	beq.n	80093d8 <USBD_SetConfig+0x88>
      {
        pdev->dev_config = cfgidx;
 8009396:	4b42      	ldr	r3, [pc, #264]	; (80094a0 <USBD_SetConfig+0x150>)
 8009398:	781b      	ldrb	r3, [r3, #0]
 800939a:	461a      	mov	r2, r3
 800939c:	687b      	ldr	r3, [r7, #4]
 800939e:	605a      	str	r2, [r3, #4]

        ret = USBD_SetClassConfig(pdev, cfgidx);
 80093a0:	4b3f      	ldr	r3, [pc, #252]	; (80094a0 <USBD_SetConfig+0x150>)
 80093a2:	781b      	ldrb	r3, [r3, #0]
 80093a4:	4619      	mov	r1, r3
 80093a6:	6878      	ldr	r0, [r7, #4]
 80093a8:	f7fe ffe7 	bl	800837a <USBD_SetClassConfig>
 80093ac:	4603      	mov	r3, r0
 80093ae:	73fb      	strb	r3, [r7, #15]

        if (ret != USBD_OK)
 80093b0:	7bfb      	ldrb	r3, [r7, #15]
 80093b2:	2b00      	cmp	r3, #0
 80093b4:	d008      	beq.n	80093c8 <USBD_SetConfig+0x78>
        {
          USBD_CtlError(pdev, req);
 80093b6:	6839      	ldr	r1, [r7, #0]
 80093b8:	6878      	ldr	r0, [r7, #4]
 80093ba:	f000 f962 	bl	8009682 <USBD_CtlError>
          pdev->dev_state = USBD_STATE_ADDRESSED;
 80093be:	687b      	ldr	r3, [r7, #4]
 80093c0:	2202      	movs	r2, #2
 80093c2:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 80093c6:	e065      	b.n	8009494 <USBD_SetConfig+0x144>
          (void)USBD_CtlSendStatus(pdev);
 80093c8:	6878      	ldr	r0, [r7, #4]
 80093ca:	f000 fa25 	bl	8009818 <USBD_CtlSendStatus>
          pdev->dev_state = USBD_STATE_CONFIGURED;
 80093ce:	687b      	ldr	r3, [r7, #4]
 80093d0:	2203      	movs	r2, #3
 80093d2:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
      break;
 80093d6:	e05d      	b.n	8009494 <USBD_SetConfig+0x144>
        (void)USBD_CtlSendStatus(pdev);
 80093d8:	6878      	ldr	r0, [r7, #4]
 80093da:	f000 fa1d 	bl	8009818 <USBD_CtlSendStatus>
      break;
 80093de:	e059      	b.n	8009494 <USBD_SetConfig+0x144>

    case USBD_STATE_CONFIGURED:
      if (cfgidx == 0U)
 80093e0:	4b2f      	ldr	r3, [pc, #188]	; (80094a0 <USBD_SetConfig+0x150>)
 80093e2:	781b      	ldrb	r3, [r3, #0]
 80093e4:	2b00      	cmp	r3, #0
 80093e6:	d112      	bne.n	800940e <USBD_SetConfig+0xbe>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 80093e8:	687b      	ldr	r3, [r7, #4]
 80093ea:	2202      	movs	r2, #2
 80093ec:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
        pdev->dev_config = cfgidx;
 80093f0:	4b2b      	ldr	r3, [pc, #172]	; (80094a0 <USBD_SetConfig+0x150>)
 80093f2:	781b      	ldrb	r3, [r3, #0]
 80093f4:	461a      	mov	r2, r3
 80093f6:	687b      	ldr	r3, [r7, #4]
 80093f8:	605a      	str	r2, [r3, #4]
        (void)USBD_ClrClassConfig(pdev, cfgidx);
 80093fa:	4b29      	ldr	r3, [pc, #164]	; (80094a0 <USBD_SetConfig+0x150>)
 80093fc:	781b      	ldrb	r3, [r3, #0]
 80093fe:	4619      	mov	r1, r3
 8009400:	6878      	ldr	r0, [r7, #4]
 8009402:	f7fe ffd6 	bl	80083b2 <USBD_ClrClassConfig>
        (void)USBD_CtlSendStatus(pdev);
 8009406:	6878      	ldr	r0, [r7, #4]
 8009408:	f000 fa06 	bl	8009818 <USBD_CtlSendStatus>
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 800940c:	e042      	b.n	8009494 <USBD_SetConfig+0x144>
      else if (cfgidx != pdev->dev_config)
 800940e:	4b24      	ldr	r3, [pc, #144]	; (80094a0 <USBD_SetConfig+0x150>)
 8009410:	781b      	ldrb	r3, [r3, #0]
 8009412:	461a      	mov	r2, r3
 8009414:	687b      	ldr	r3, [r7, #4]
 8009416:	685b      	ldr	r3, [r3, #4]
 8009418:	429a      	cmp	r2, r3
 800941a:	d02a      	beq.n	8009472 <USBD_SetConfig+0x122>
        (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 800941c:	687b      	ldr	r3, [r7, #4]
 800941e:	685b      	ldr	r3, [r3, #4]
 8009420:	b2db      	uxtb	r3, r3
 8009422:	4619      	mov	r1, r3
 8009424:	6878      	ldr	r0, [r7, #4]
 8009426:	f7fe ffc4 	bl	80083b2 <USBD_ClrClassConfig>
        pdev->dev_config = cfgidx;
 800942a:	4b1d      	ldr	r3, [pc, #116]	; (80094a0 <USBD_SetConfig+0x150>)
 800942c:	781b      	ldrb	r3, [r3, #0]
 800942e:	461a      	mov	r2, r3
 8009430:	687b      	ldr	r3, [r7, #4]
 8009432:	605a      	str	r2, [r3, #4]
        ret = USBD_SetClassConfig(pdev, cfgidx);
 8009434:	4b1a      	ldr	r3, [pc, #104]	; (80094a0 <USBD_SetConfig+0x150>)
 8009436:	781b      	ldrb	r3, [r3, #0]
 8009438:	4619      	mov	r1, r3
 800943a:	6878      	ldr	r0, [r7, #4]
 800943c:	f7fe ff9d 	bl	800837a <USBD_SetClassConfig>
 8009440:	4603      	mov	r3, r0
 8009442:	73fb      	strb	r3, [r7, #15]
        if (ret != USBD_OK)
 8009444:	7bfb      	ldrb	r3, [r7, #15]
 8009446:	2b00      	cmp	r3, #0
 8009448:	d00f      	beq.n	800946a <USBD_SetConfig+0x11a>
          USBD_CtlError(pdev, req);
 800944a:	6839      	ldr	r1, [r7, #0]
 800944c:	6878      	ldr	r0, [r7, #4]
 800944e:	f000 f918 	bl	8009682 <USBD_CtlError>
          (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 8009452:	687b      	ldr	r3, [r7, #4]
 8009454:	685b      	ldr	r3, [r3, #4]
 8009456:	b2db      	uxtb	r3, r3
 8009458:	4619      	mov	r1, r3
 800945a:	6878      	ldr	r0, [r7, #4]
 800945c:	f7fe ffa9 	bl	80083b2 <USBD_ClrClassConfig>
          pdev->dev_state = USBD_STATE_ADDRESSED;
 8009460:	687b      	ldr	r3, [r7, #4]
 8009462:	2202      	movs	r2, #2
 8009464:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
      break;
 8009468:	e014      	b.n	8009494 <USBD_SetConfig+0x144>
          (void)USBD_CtlSendStatus(pdev);
 800946a:	6878      	ldr	r0, [r7, #4]
 800946c:	f000 f9d4 	bl	8009818 <USBD_CtlSendStatus>
      break;
 8009470:	e010      	b.n	8009494 <USBD_SetConfig+0x144>
        (void)USBD_CtlSendStatus(pdev);
 8009472:	6878      	ldr	r0, [r7, #4]
 8009474:	f000 f9d0 	bl	8009818 <USBD_CtlSendStatus>
      break;
 8009478:	e00c      	b.n	8009494 <USBD_SetConfig+0x144>

    default:
      USBD_CtlError(pdev, req);
 800947a:	6839      	ldr	r1, [r7, #0]
 800947c:	6878      	ldr	r0, [r7, #4]
 800947e:	f000 f900 	bl	8009682 <USBD_CtlError>
      (void)USBD_ClrClassConfig(pdev, cfgidx);
 8009482:	4b07      	ldr	r3, [pc, #28]	; (80094a0 <USBD_SetConfig+0x150>)
 8009484:	781b      	ldrb	r3, [r3, #0]
 8009486:	4619      	mov	r1, r3
 8009488:	6878      	ldr	r0, [r7, #4]
 800948a:	f7fe ff92 	bl	80083b2 <USBD_ClrClassConfig>
      ret = USBD_FAIL;
 800948e:	2303      	movs	r3, #3
 8009490:	73fb      	strb	r3, [r7, #15]
      break;
 8009492:	bf00      	nop
  }

  return ret;
 8009494:	7bfb      	ldrb	r3, [r7, #15]
}
 8009496:	4618      	mov	r0, r3
 8009498:	3710      	adds	r7, #16
 800949a:	46bd      	mov	sp, r7
 800949c:	bd80      	pop	{r7, pc}
 800949e:	bf00      	nop
 80094a0:	24000214 	.word	0x24000214

080094a4 <USBD_GetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80094a4:	b580      	push	{r7, lr}
 80094a6:	b082      	sub	sp, #8
 80094a8:	af00      	add	r7, sp, #0
 80094aa:	6078      	str	r0, [r7, #4]
 80094ac:	6039      	str	r1, [r7, #0]
  if (req->wLength != 1U)
 80094ae:	683b      	ldr	r3, [r7, #0]
 80094b0:	88db      	ldrh	r3, [r3, #6]
 80094b2:	2b01      	cmp	r3, #1
 80094b4:	d004      	beq.n	80094c0 <USBD_GetConfig+0x1c>
  {
    USBD_CtlError(pdev, req);
 80094b6:	6839      	ldr	r1, [r7, #0]
 80094b8:	6878      	ldr	r0, [r7, #4]
 80094ba:	f000 f8e2 	bl	8009682 <USBD_CtlError>
      default:
        USBD_CtlError(pdev, req);
        break;
    }
  }
}
 80094be:	e023      	b.n	8009508 <USBD_GetConfig+0x64>
    switch (pdev->dev_state)
 80094c0:	687b      	ldr	r3, [r7, #4]
 80094c2:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80094c6:	b2db      	uxtb	r3, r3
 80094c8:	2b02      	cmp	r3, #2
 80094ca:	dc02      	bgt.n	80094d2 <USBD_GetConfig+0x2e>
 80094cc:	2b00      	cmp	r3, #0
 80094ce:	dc03      	bgt.n	80094d8 <USBD_GetConfig+0x34>
 80094d0:	e015      	b.n	80094fe <USBD_GetConfig+0x5a>
 80094d2:	2b03      	cmp	r3, #3
 80094d4:	d00b      	beq.n	80094ee <USBD_GetConfig+0x4a>
 80094d6:	e012      	b.n	80094fe <USBD_GetConfig+0x5a>
        pdev->dev_default_config = 0U;
 80094d8:	687b      	ldr	r3, [r7, #4]
 80094da:	2200      	movs	r2, #0
 80094dc:	609a      	str	r2, [r3, #8]
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_default_config, 1U);
 80094de:	687b      	ldr	r3, [r7, #4]
 80094e0:	3308      	adds	r3, #8
 80094e2:	2201      	movs	r2, #1
 80094e4:	4619      	mov	r1, r3
 80094e6:	6878      	ldr	r0, [r7, #4]
 80094e8:	f000 f93c 	bl	8009764 <USBD_CtlSendData>
        break;
 80094ec:	e00c      	b.n	8009508 <USBD_GetConfig+0x64>
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config, 1U);
 80094ee:	687b      	ldr	r3, [r7, #4]
 80094f0:	3304      	adds	r3, #4
 80094f2:	2201      	movs	r2, #1
 80094f4:	4619      	mov	r1, r3
 80094f6:	6878      	ldr	r0, [r7, #4]
 80094f8:	f000 f934 	bl	8009764 <USBD_CtlSendData>
        break;
 80094fc:	e004      	b.n	8009508 <USBD_GetConfig+0x64>
        USBD_CtlError(pdev, req);
 80094fe:	6839      	ldr	r1, [r7, #0]
 8009500:	6878      	ldr	r0, [r7, #4]
 8009502:	f000 f8be 	bl	8009682 <USBD_CtlError>
        break;
 8009506:	bf00      	nop
}
 8009508:	bf00      	nop
 800950a:	3708      	adds	r7, #8
 800950c:	46bd      	mov	sp, r7
 800950e:	bd80      	pop	{r7, pc}

08009510 <USBD_GetStatus>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetStatus(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8009510:	b580      	push	{r7, lr}
 8009512:	b082      	sub	sp, #8
 8009514:	af00      	add	r7, sp, #0
 8009516:	6078      	str	r0, [r7, #4]
 8009518:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 800951a:	687b      	ldr	r3, [r7, #4]
 800951c:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8009520:	b2db      	uxtb	r3, r3
 8009522:	3b01      	subs	r3, #1
 8009524:	2b02      	cmp	r3, #2
 8009526:	d81e      	bhi.n	8009566 <USBD_GetStatus+0x56>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wLength != 0x2U)
 8009528:	683b      	ldr	r3, [r7, #0]
 800952a:	88db      	ldrh	r3, [r3, #6]
 800952c:	2b02      	cmp	r3, #2
 800952e:	d004      	beq.n	800953a <USBD_GetStatus+0x2a>
      {
        USBD_CtlError(pdev, req);
 8009530:	6839      	ldr	r1, [r7, #0]
 8009532:	6878      	ldr	r0, [r7, #4]
 8009534:	f000 f8a5 	bl	8009682 <USBD_CtlError>
        break;
 8009538:	e01a      	b.n	8009570 <USBD_GetStatus+0x60>
      }

#if (USBD_SELF_POWERED == 1U)
      pdev->dev_config_status = USB_CONFIG_SELF_POWERED;
 800953a:	687b      	ldr	r3, [r7, #4]
 800953c:	2201      	movs	r2, #1
 800953e:	60da      	str	r2, [r3, #12]
#else
      pdev->dev_config_status = 0U;
#endif /* USBD_SELF_POWERED */

      if (pdev->dev_remote_wakeup != 0U)
 8009540:	687b      	ldr	r3, [r7, #4]
 8009542:	f8d3 32a4 	ldr.w	r3, [r3, #676]	; 0x2a4
 8009546:	2b00      	cmp	r3, #0
 8009548:	d005      	beq.n	8009556 <USBD_GetStatus+0x46>
      {
        pdev->dev_config_status |= USB_CONFIG_REMOTE_WAKEUP;
 800954a:	687b      	ldr	r3, [r7, #4]
 800954c:	68db      	ldr	r3, [r3, #12]
 800954e:	f043 0202 	orr.w	r2, r3, #2
 8009552:	687b      	ldr	r3, [r7, #4]
 8009554:	60da      	str	r2, [r3, #12]
      }

      (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config_status, 2U);
 8009556:	687b      	ldr	r3, [r7, #4]
 8009558:	330c      	adds	r3, #12
 800955a:	2202      	movs	r2, #2
 800955c:	4619      	mov	r1, r3
 800955e:	6878      	ldr	r0, [r7, #4]
 8009560:	f000 f900 	bl	8009764 <USBD_CtlSendData>
      break;
 8009564:	e004      	b.n	8009570 <USBD_GetStatus+0x60>

    default:
      USBD_CtlError(pdev, req);
 8009566:	6839      	ldr	r1, [r7, #0]
 8009568:	6878      	ldr	r0, [r7, #4]
 800956a:	f000 f88a 	bl	8009682 <USBD_CtlError>
      break;
 800956e:	bf00      	nop
  }
}
 8009570:	bf00      	nop
 8009572:	3708      	adds	r7, #8
 8009574:	46bd      	mov	sp, r7
 8009576:	bd80      	pop	{r7, pc}

08009578 <USBD_SetFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_SetFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8009578:	b580      	push	{r7, lr}
 800957a:	b082      	sub	sp, #8
 800957c:	af00      	add	r7, sp, #0
 800957e:	6078      	str	r0, [r7, #4]
 8009580:	6039      	str	r1, [r7, #0]
  if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 8009582:	683b      	ldr	r3, [r7, #0]
 8009584:	885b      	ldrh	r3, [r3, #2]
 8009586:	2b01      	cmp	r3, #1
 8009588:	d107      	bne.n	800959a <USBD_SetFeature+0x22>
  {
    pdev->dev_remote_wakeup = 1U;
 800958a:	687b      	ldr	r3, [r7, #4]
 800958c:	2201      	movs	r2, #1
 800958e:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
    (void)USBD_CtlSendStatus(pdev);
 8009592:	6878      	ldr	r0, [r7, #4]
 8009594:	f000 f940 	bl	8009818 <USBD_CtlSendStatus>
  }
  else
  {
    USBD_CtlError(pdev, req);
  }
}
 8009598:	e013      	b.n	80095c2 <USBD_SetFeature+0x4a>
  else if (req->wValue == USB_FEATURE_TEST_MODE)
 800959a:	683b      	ldr	r3, [r7, #0]
 800959c:	885b      	ldrh	r3, [r3, #2]
 800959e:	2b02      	cmp	r3, #2
 80095a0:	d10b      	bne.n	80095ba <USBD_SetFeature+0x42>
    pdev->dev_test_mode = req->wIndex >> 8;
 80095a2:	683b      	ldr	r3, [r7, #0]
 80095a4:	889b      	ldrh	r3, [r3, #4]
 80095a6:	0a1b      	lsrs	r3, r3, #8
 80095a8:	b29b      	uxth	r3, r3
 80095aa:	b2da      	uxtb	r2, r3
 80095ac:	687b      	ldr	r3, [r7, #4]
 80095ae:	f883 22a0 	strb.w	r2, [r3, #672]	; 0x2a0
    (void)USBD_CtlSendStatus(pdev);
 80095b2:	6878      	ldr	r0, [r7, #4]
 80095b4:	f000 f930 	bl	8009818 <USBD_CtlSendStatus>
}
 80095b8:	e003      	b.n	80095c2 <USBD_SetFeature+0x4a>
    USBD_CtlError(pdev, req);
 80095ba:	6839      	ldr	r1, [r7, #0]
 80095bc:	6878      	ldr	r0, [r7, #4]
 80095be:	f000 f860 	bl	8009682 <USBD_CtlError>
}
 80095c2:	bf00      	nop
 80095c4:	3708      	adds	r7, #8
 80095c6:	46bd      	mov	sp, r7
 80095c8:	bd80      	pop	{r7, pc}

080095ca <USBD_ClrFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_ClrFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80095ca:	b580      	push	{r7, lr}
 80095cc:	b082      	sub	sp, #8
 80095ce:	af00      	add	r7, sp, #0
 80095d0:	6078      	str	r0, [r7, #4]
 80095d2:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 80095d4:	687b      	ldr	r3, [r7, #4]
 80095d6:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80095da:	b2db      	uxtb	r3, r3
 80095dc:	3b01      	subs	r3, #1
 80095de:	2b02      	cmp	r3, #2
 80095e0:	d80b      	bhi.n	80095fa <USBD_ClrFeature+0x30>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 80095e2:	683b      	ldr	r3, [r7, #0]
 80095e4:	885b      	ldrh	r3, [r3, #2]
 80095e6:	2b01      	cmp	r3, #1
 80095e8:	d10c      	bne.n	8009604 <USBD_ClrFeature+0x3a>
      {
        pdev->dev_remote_wakeup = 0U;
 80095ea:	687b      	ldr	r3, [r7, #4]
 80095ec:	2200      	movs	r2, #0
 80095ee:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
        (void)USBD_CtlSendStatus(pdev);
 80095f2:	6878      	ldr	r0, [r7, #4]
 80095f4:	f000 f910 	bl	8009818 <USBD_CtlSendStatus>
      }
      break;
 80095f8:	e004      	b.n	8009604 <USBD_ClrFeature+0x3a>

    default:
      USBD_CtlError(pdev, req);
 80095fa:	6839      	ldr	r1, [r7, #0]
 80095fc:	6878      	ldr	r0, [r7, #4]
 80095fe:	f000 f840 	bl	8009682 <USBD_CtlError>
      break;
 8009602:	e000      	b.n	8009606 <USBD_ClrFeature+0x3c>
      break;
 8009604:	bf00      	nop
  }
}
 8009606:	bf00      	nop
 8009608:	3708      	adds	r7, #8
 800960a:	46bd      	mov	sp, r7
 800960c:	bd80      	pop	{r7, pc}

0800960e <USBD_ParseSetupRequest>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
void USBD_ParseSetupRequest(USBD_SetupReqTypedef *req, uint8_t *pdata)
{
 800960e:	b580      	push	{r7, lr}
 8009610:	b084      	sub	sp, #16
 8009612:	af00      	add	r7, sp, #0
 8009614:	6078      	str	r0, [r7, #4]
 8009616:	6039      	str	r1, [r7, #0]
  uint8_t *pbuff = pdata;
 8009618:	683b      	ldr	r3, [r7, #0]
 800961a:	60fb      	str	r3, [r7, #12]

  req->bmRequest = *(uint8_t *)(pbuff);
 800961c:	68fb      	ldr	r3, [r7, #12]
 800961e:	781a      	ldrb	r2, [r3, #0]
 8009620:	687b      	ldr	r3, [r7, #4]
 8009622:	701a      	strb	r2, [r3, #0]

  pbuff++;
 8009624:	68fb      	ldr	r3, [r7, #12]
 8009626:	3301      	adds	r3, #1
 8009628:	60fb      	str	r3, [r7, #12]
  req->bRequest = *(uint8_t *)(pbuff);
 800962a:	68fb      	ldr	r3, [r7, #12]
 800962c:	781a      	ldrb	r2, [r3, #0]
 800962e:	687b      	ldr	r3, [r7, #4]
 8009630:	705a      	strb	r2, [r3, #1]

  pbuff++;
 8009632:	68fb      	ldr	r3, [r7, #12]
 8009634:	3301      	adds	r3, #1
 8009636:	60fb      	str	r3, [r7, #12]
  req->wValue = SWAPBYTE(pbuff);
 8009638:	68f8      	ldr	r0, [r7, #12]
 800963a:	f7ff fa41 	bl	8008ac0 <SWAPBYTE>
 800963e:	4603      	mov	r3, r0
 8009640:	461a      	mov	r2, r3
 8009642:	687b      	ldr	r3, [r7, #4]
 8009644:	805a      	strh	r2, [r3, #2]

  pbuff++;
 8009646:	68fb      	ldr	r3, [r7, #12]
 8009648:	3301      	adds	r3, #1
 800964a:	60fb      	str	r3, [r7, #12]
  pbuff++;
 800964c:	68fb      	ldr	r3, [r7, #12]
 800964e:	3301      	adds	r3, #1
 8009650:	60fb      	str	r3, [r7, #12]
  req->wIndex = SWAPBYTE(pbuff);
 8009652:	68f8      	ldr	r0, [r7, #12]
 8009654:	f7ff fa34 	bl	8008ac0 <SWAPBYTE>
 8009658:	4603      	mov	r3, r0
 800965a:	461a      	mov	r2, r3
 800965c:	687b      	ldr	r3, [r7, #4]
 800965e:	809a      	strh	r2, [r3, #4]

  pbuff++;
 8009660:	68fb      	ldr	r3, [r7, #12]
 8009662:	3301      	adds	r3, #1
 8009664:	60fb      	str	r3, [r7, #12]
  pbuff++;
 8009666:	68fb      	ldr	r3, [r7, #12]
 8009668:	3301      	adds	r3, #1
 800966a:	60fb      	str	r3, [r7, #12]
  req->wLength = SWAPBYTE(pbuff);
 800966c:	68f8      	ldr	r0, [r7, #12]
 800966e:	f7ff fa27 	bl	8008ac0 <SWAPBYTE>
 8009672:	4603      	mov	r3, r0
 8009674:	461a      	mov	r2, r3
 8009676:	687b      	ldr	r3, [r7, #4]
 8009678:	80da      	strh	r2, [r3, #6]
}
 800967a:	bf00      	nop
 800967c:	3710      	adds	r7, #16
 800967e:	46bd      	mov	sp, r7
 8009680:	bd80      	pop	{r7, pc}

08009682 <USBD_CtlError>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
void USBD_CtlError(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8009682:	b580      	push	{r7, lr}
 8009684:	b082      	sub	sp, #8
 8009686:	af00      	add	r7, sp, #0
 8009688:	6078      	str	r0, [r7, #4]
 800968a:	6039      	str	r1, [r7, #0]
  UNUSED(req);

  (void)USBD_LL_StallEP(pdev, 0x80U);
 800968c:	2180      	movs	r1, #128	; 0x80
 800968e:	6878      	ldr	r0, [r7, #4]
 8009690:	f000 fd62 	bl	800a158 <USBD_LL_StallEP>
  (void)USBD_LL_StallEP(pdev, 0U);
 8009694:	2100      	movs	r1, #0
 8009696:	6878      	ldr	r0, [r7, #4]
 8009698:	f000 fd5e 	bl	800a158 <USBD_LL_StallEP>
}
 800969c:	bf00      	nop
 800969e:	3708      	adds	r7, #8
 80096a0:	46bd      	mov	sp, r7
 80096a2:	bd80      	pop	{r7, pc}

080096a4 <USBD_GetString>:
  * @param  unicode : Formatted string buffer (unicode)
  * @param  len : descriptor length
  * @retval None
  */
void USBD_GetString(uint8_t *desc, uint8_t *unicode, uint16_t *len)
{
 80096a4:	b580      	push	{r7, lr}
 80096a6:	b086      	sub	sp, #24
 80096a8:	af00      	add	r7, sp, #0
 80096aa:	60f8      	str	r0, [r7, #12]
 80096ac:	60b9      	str	r1, [r7, #8]
 80096ae:	607a      	str	r2, [r7, #4]
  uint8_t idx = 0U;
 80096b0:	2300      	movs	r3, #0
 80096b2:	75fb      	strb	r3, [r7, #23]
  uint8_t *pdesc;

  if (desc == NULL)
 80096b4:	68fb      	ldr	r3, [r7, #12]
 80096b6:	2b00      	cmp	r3, #0
 80096b8:	d036      	beq.n	8009728 <USBD_GetString+0x84>
  {
    return;
  }

  pdesc = desc;
 80096ba:	68fb      	ldr	r3, [r7, #12]
 80096bc:	613b      	str	r3, [r7, #16]
  *len = ((uint16_t)USBD_GetLen(pdesc) * 2U) + 2U;
 80096be:	6938      	ldr	r0, [r7, #16]
 80096c0:	f000 f836 	bl	8009730 <USBD_GetLen>
 80096c4:	4603      	mov	r3, r0
 80096c6:	3301      	adds	r3, #1
 80096c8:	b29b      	uxth	r3, r3
 80096ca:	005b      	lsls	r3, r3, #1
 80096cc:	b29a      	uxth	r2, r3
 80096ce:	687b      	ldr	r3, [r7, #4]
 80096d0:	801a      	strh	r2, [r3, #0]

  unicode[idx] = *(uint8_t *)len;
 80096d2:	7dfb      	ldrb	r3, [r7, #23]
 80096d4:	68ba      	ldr	r2, [r7, #8]
 80096d6:	4413      	add	r3, r2
 80096d8:	687a      	ldr	r2, [r7, #4]
 80096da:	7812      	ldrb	r2, [r2, #0]
 80096dc:	701a      	strb	r2, [r3, #0]
  idx++;
 80096de:	7dfb      	ldrb	r3, [r7, #23]
 80096e0:	3301      	adds	r3, #1
 80096e2:	75fb      	strb	r3, [r7, #23]
  unicode[idx] = USB_DESC_TYPE_STRING;
 80096e4:	7dfb      	ldrb	r3, [r7, #23]
 80096e6:	68ba      	ldr	r2, [r7, #8]
 80096e8:	4413      	add	r3, r2
 80096ea:	2203      	movs	r2, #3
 80096ec:	701a      	strb	r2, [r3, #0]
  idx++;
 80096ee:	7dfb      	ldrb	r3, [r7, #23]
 80096f0:	3301      	adds	r3, #1
 80096f2:	75fb      	strb	r3, [r7, #23]

  while (*pdesc != (uint8_t)'\0')
 80096f4:	e013      	b.n	800971e <USBD_GetString+0x7a>
  {
    unicode[idx] = *pdesc;
 80096f6:	7dfb      	ldrb	r3, [r7, #23]
 80096f8:	68ba      	ldr	r2, [r7, #8]
 80096fa:	4413      	add	r3, r2
 80096fc:	693a      	ldr	r2, [r7, #16]
 80096fe:	7812      	ldrb	r2, [r2, #0]
 8009700:	701a      	strb	r2, [r3, #0]
    pdesc++;
 8009702:	693b      	ldr	r3, [r7, #16]
 8009704:	3301      	adds	r3, #1
 8009706:	613b      	str	r3, [r7, #16]
    idx++;
 8009708:	7dfb      	ldrb	r3, [r7, #23]
 800970a:	3301      	adds	r3, #1
 800970c:	75fb      	strb	r3, [r7, #23]

    unicode[idx] = 0U;
 800970e:	7dfb      	ldrb	r3, [r7, #23]
 8009710:	68ba      	ldr	r2, [r7, #8]
 8009712:	4413      	add	r3, r2
 8009714:	2200      	movs	r2, #0
 8009716:	701a      	strb	r2, [r3, #0]
    idx++;
 8009718:	7dfb      	ldrb	r3, [r7, #23]
 800971a:	3301      	adds	r3, #1
 800971c:	75fb      	strb	r3, [r7, #23]
  while (*pdesc != (uint8_t)'\0')
 800971e:	693b      	ldr	r3, [r7, #16]
 8009720:	781b      	ldrb	r3, [r3, #0]
 8009722:	2b00      	cmp	r3, #0
 8009724:	d1e7      	bne.n	80096f6 <USBD_GetString+0x52>
 8009726:	e000      	b.n	800972a <USBD_GetString+0x86>
    return;
 8009728:	bf00      	nop
  }
}
 800972a:	3718      	adds	r7, #24
 800972c:	46bd      	mov	sp, r7
 800972e:	bd80      	pop	{r7, pc}

08009730 <USBD_GetLen>:
  *         return the string length
   * @param  buf : pointer to the ascii string buffer
  * @retval string length
  */
static uint8_t USBD_GetLen(uint8_t *buf)
{
 8009730:	b480      	push	{r7}
 8009732:	b085      	sub	sp, #20
 8009734:	af00      	add	r7, sp, #0
 8009736:	6078      	str	r0, [r7, #4]
  uint8_t  len = 0U;
 8009738:	2300      	movs	r3, #0
 800973a:	73fb      	strb	r3, [r7, #15]
  uint8_t *pbuff = buf;
 800973c:	687b      	ldr	r3, [r7, #4]
 800973e:	60bb      	str	r3, [r7, #8]

  while (*pbuff != (uint8_t)'\0')
 8009740:	e005      	b.n	800974e <USBD_GetLen+0x1e>
  {
    len++;
 8009742:	7bfb      	ldrb	r3, [r7, #15]
 8009744:	3301      	adds	r3, #1
 8009746:	73fb      	strb	r3, [r7, #15]
    pbuff++;
 8009748:	68bb      	ldr	r3, [r7, #8]
 800974a:	3301      	adds	r3, #1
 800974c:	60bb      	str	r3, [r7, #8]
  while (*pbuff != (uint8_t)'\0')
 800974e:	68bb      	ldr	r3, [r7, #8]
 8009750:	781b      	ldrb	r3, [r3, #0]
 8009752:	2b00      	cmp	r3, #0
 8009754:	d1f5      	bne.n	8009742 <USBD_GetLen+0x12>
  }

  return len;
 8009756:	7bfb      	ldrb	r3, [r7, #15]
}
 8009758:	4618      	mov	r0, r3
 800975a:	3714      	adds	r7, #20
 800975c:	46bd      	mov	sp, r7
 800975e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009762:	4770      	bx	lr

08009764 <USBD_CtlSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendData(USBD_HandleTypeDef *pdev,
                                    uint8_t *pbuf, uint32_t len)
{
 8009764:	b580      	push	{r7, lr}
 8009766:	b084      	sub	sp, #16
 8009768:	af00      	add	r7, sp, #0
 800976a:	60f8      	str	r0, [r7, #12]
 800976c:	60b9      	str	r1, [r7, #8]
 800976e:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_IN;
 8009770:	68fb      	ldr	r3, [r7, #12]
 8009772:	2202      	movs	r2, #2
 8009774:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_in[0].total_length = len;
 8009778:	68fb      	ldr	r3, [r7, #12]
 800977a:	687a      	ldr	r2, [r7, #4]
 800977c:	619a      	str	r2, [r3, #24]

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_in[0].rem_length = 0U;
#else
  pdev->ep_in[0].rem_length = len;
 800977e:	68fb      	ldr	r3, [r7, #12]
 8009780:	687a      	ldr	r2, [r7, #4]
 8009782:	61da      	str	r2, [r3, #28]
#endif /* USBD_AVOID_PACKET_SPLIT_MPS */

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 8009784:	687b      	ldr	r3, [r7, #4]
 8009786:	68ba      	ldr	r2, [r7, #8]
 8009788:	2100      	movs	r1, #0
 800978a:	68f8      	ldr	r0, [r7, #12]
 800978c:	f000 fd6d 	bl	800a26a <USBD_LL_Transmit>

  return USBD_OK;
 8009790:	2300      	movs	r3, #0
}
 8009792:	4618      	mov	r0, r3
 8009794:	3710      	adds	r7, #16
 8009796:	46bd      	mov	sp, r7
 8009798:	bd80      	pop	{r7, pc}

0800979a <USBD_CtlContinueSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueSendData(USBD_HandleTypeDef *pdev,
                                            uint8_t *pbuf, uint32_t len)
{
 800979a:	b580      	push	{r7, lr}
 800979c:	b084      	sub	sp, #16
 800979e:	af00      	add	r7, sp, #0
 80097a0:	60f8      	str	r0, [r7, #12]
 80097a2:	60b9      	str	r1, [r7, #8]
 80097a4:	607a      	str	r2, [r7, #4]
  /* Start the next transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 80097a6:	687b      	ldr	r3, [r7, #4]
 80097a8:	68ba      	ldr	r2, [r7, #8]
 80097aa:	2100      	movs	r1, #0
 80097ac:	68f8      	ldr	r0, [r7, #12]
 80097ae:	f000 fd5c 	bl	800a26a <USBD_LL_Transmit>

  return USBD_OK;
 80097b2:	2300      	movs	r3, #0
}
 80097b4:	4618      	mov	r0, r3
 80097b6:	3710      	adds	r7, #16
 80097b8:	46bd      	mov	sp, r7
 80097ba:	bd80      	pop	{r7, pc}

080097bc <USBD_CtlPrepareRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlPrepareRx(USBD_HandleTypeDef *pdev,
                                     uint8_t *pbuf, uint32_t len)
{
 80097bc:	b580      	push	{r7, lr}
 80097be:	b084      	sub	sp, #16
 80097c0:	af00      	add	r7, sp, #0
 80097c2:	60f8      	str	r0, [r7, #12]
 80097c4:	60b9      	str	r1, [r7, #8]
 80097c6:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_OUT;
 80097c8:	68fb      	ldr	r3, [r7, #12]
 80097ca:	2203      	movs	r2, #3
 80097cc:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_out[0].total_length = len;
 80097d0:	68fb      	ldr	r3, [r7, #12]
 80097d2:	687a      	ldr	r2, [r7, #4]
 80097d4:	f8c3 2158 	str.w	r2, [r3, #344]	; 0x158

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_out[0].rem_length = 0U;
#else
  pdev->ep_out[0].rem_length = len;
 80097d8:	68fb      	ldr	r3, [r7, #12]
 80097da:	687a      	ldr	r2, [r7, #4]
 80097dc:	f8c3 215c 	str.w	r2, [r3, #348]	; 0x15c
#endif /* USBD_AVOID_PACKET_SPLIT_MPS */

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 80097e0:	687b      	ldr	r3, [r7, #4]
 80097e2:	68ba      	ldr	r2, [r7, #8]
 80097e4:	2100      	movs	r1, #0
 80097e6:	68f8      	ldr	r0, [r7, #12]
 80097e8:	f000 fd60 	bl	800a2ac <USBD_LL_PrepareReceive>

  return USBD_OK;
 80097ec:	2300      	movs	r3, #0
}
 80097ee:	4618      	mov	r0, r3
 80097f0:	3710      	adds	r7, #16
 80097f2:	46bd      	mov	sp, r7
 80097f4:	bd80      	pop	{r7, pc}

080097f6 <USBD_CtlContinueRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueRx(USBD_HandleTypeDef *pdev,
                                      uint8_t *pbuf, uint32_t len)
{
 80097f6:	b580      	push	{r7, lr}
 80097f8:	b084      	sub	sp, #16
 80097fa:	af00      	add	r7, sp, #0
 80097fc:	60f8      	str	r0, [r7, #12]
 80097fe:	60b9      	str	r1, [r7, #8]
 8009800:	607a      	str	r2, [r7, #4]
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 8009802:	687b      	ldr	r3, [r7, #4]
 8009804:	68ba      	ldr	r2, [r7, #8]
 8009806:	2100      	movs	r1, #0
 8009808:	68f8      	ldr	r0, [r7, #12]
 800980a:	f000 fd4f 	bl	800a2ac <USBD_LL_PrepareReceive>

  return USBD_OK;
 800980e:	2300      	movs	r3, #0
}
 8009810:	4618      	mov	r0, r3
 8009812:	3710      	adds	r7, #16
 8009814:	46bd      	mov	sp, r7
 8009816:	bd80      	pop	{r7, pc}

08009818 <USBD_CtlSendStatus>:
  *         send zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendStatus(USBD_HandleTypeDef *pdev)
{
 8009818:	b580      	push	{r7, lr}
 800981a:	b082      	sub	sp, #8
 800981c:	af00      	add	r7, sp, #0
 800981e:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_IN;
 8009820:	687b      	ldr	r3, [r7, #4]
 8009822:	2204      	movs	r2, #4
 8009824:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, NULL, 0U);
 8009828:	2300      	movs	r3, #0
 800982a:	2200      	movs	r2, #0
 800982c:	2100      	movs	r1, #0
 800982e:	6878      	ldr	r0, [r7, #4]
 8009830:	f000 fd1b 	bl	800a26a <USBD_LL_Transmit>

  return USBD_OK;
 8009834:	2300      	movs	r3, #0
}
 8009836:	4618      	mov	r0, r3
 8009838:	3708      	adds	r7, #8
 800983a:	46bd      	mov	sp, r7
 800983c:	bd80      	pop	{r7, pc}

0800983e <USBD_CtlReceiveStatus>:
  *         receive zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlReceiveStatus(USBD_HandleTypeDef *pdev)
{
 800983e:	b580      	push	{r7, lr}
 8009840:	b082      	sub	sp, #8
 8009842:	af00      	add	r7, sp, #0
 8009844:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_OUT;
 8009846:	687b      	ldr	r3, [r7, #4]
 8009848:	2205      	movs	r2, #5
 800984a:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 800984e:	2300      	movs	r3, #0
 8009850:	2200      	movs	r2, #0
 8009852:	2100      	movs	r1, #0
 8009854:	6878      	ldr	r0, [r7, #4]
 8009856:	f000 fd29 	bl	800a2ac <USBD_LL_PrepareReceive>

  return USBD_OK;
 800985a:	2300      	movs	r3, #0
}
 800985c:	4618      	mov	r0, r3
 800985e:	3708      	adds	r7, #8
 8009860:	46bd      	mov	sp, r7
 8009862:	bd80      	pop	{r7, pc}

08009864 <MX_USB_DEVICE_Init>:
/**
  * Init USB device Library, add supported class and start the library
  * @retval None
  */
void MX_USB_DEVICE_Init(void)
{
 8009864:	b580      	push	{r7, lr}
 8009866:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_DEVICE_Init_PreTreatment */

  /* USER CODE END USB_DEVICE_Init_PreTreatment */

  /* Init Device Library, add supported class and start the library. */
  if (USBD_Init(&hUsbDeviceHS, &HS_Desc, DEVICE_HS) != USBD_OK)
 8009868:	2201      	movs	r2, #1
 800986a:	4913      	ldr	r1, [pc, #76]	; (80098b8 <MX_USB_DEVICE_Init+0x54>)
 800986c:	4813      	ldr	r0, [pc, #76]	; (80098bc <MX_USB_DEVICE_Init+0x58>)
 800986e:	f7fe fd07 	bl	8008280 <USBD_Init>
 8009872:	4603      	mov	r3, r0
 8009874:	2b00      	cmp	r3, #0
 8009876:	d001      	beq.n	800987c <MX_USB_DEVICE_Init+0x18>
  {
    Error_Handler();
 8009878:	f7f6 ffc0 	bl	80007fc <Error_Handler>
  }
  if (USBD_RegisterClass(&hUsbDeviceHS, &USBD_CDC) != USBD_OK)
 800987c:	4910      	ldr	r1, [pc, #64]	; (80098c0 <MX_USB_DEVICE_Init+0x5c>)
 800987e:	480f      	ldr	r0, [pc, #60]	; (80098bc <MX_USB_DEVICE_Init+0x58>)
 8009880:	f7fe fd2e 	bl	80082e0 <USBD_RegisterClass>
 8009884:	4603      	mov	r3, r0
 8009886:	2b00      	cmp	r3, #0
 8009888:	d001      	beq.n	800988e <MX_USB_DEVICE_Init+0x2a>
  {
    Error_Handler();
 800988a:	f7f6 ffb7 	bl	80007fc <Error_Handler>
  }
  if (USBD_CDC_RegisterInterface(&hUsbDeviceHS, &USBD_Interface_fops_HS) != USBD_OK)
 800988e:	490d      	ldr	r1, [pc, #52]	; (80098c4 <MX_USB_DEVICE_Init+0x60>)
 8009890:	480a      	ldr	r0, [pc, #40]	; (80098bc <MX_USB_DEVICE_Init+0x58>)
 8009892:	f7fe fc1f 	bl	80080d4 <USBD_CDC_RegisterInterface>
 8009896:	4603      	mov	r3, r0
 8009898:	2b00      	cmp	r3, #0
 800989a:	d001      	beq.n	80098a0 <MX_USB_DEVICE_Init+0x3c>
  {
    Error_Handler();
 800989c:	f7f6 ffae 	bl	80007fc <Error_Handler>
  }
  if (USBD_Start(&hUsbDeviceHS) != USBD_OK)
 80098a0:	4806      	ldr	r0, [pc, #24]	; (80098bc <MX_USB_DEVICE_Init+0x58>)
 80098a2:	f7fe fd53 	bl	800834c <USBD_Start>
 80098a6:	4603      	mov	r3, r0
 80098a8:	2b00      	cmp	r3, #0
 80098aa:	d001      	beq.n	80098b0 <MX_USB_DEVICE_Init+0x4c>
  {
    Error_Handler();
 80098ac:	f7f6 ffa6 	bl	80007fc <Error_Handler>
  }

  /* USER CODE BEGIN USB_DEVICE_Init_PostTreatment */
  HAL_PWREx_EnableUSBVoltageDetector();
 80098b0:	f7f9 fac2 	bl	8002e38 <HAL_PWREx_EnableUSBVoltageDetector>

  /* USER CODE END USB_DEVICE_Init_PostTreatment */
}
 80098b4:	bf00      	nop
 80098b6:	bd80      	pop	{r7, pc}
 80098b8:	240000b0 	.word	0x240000b0
 80098bc:	24000218 	.word	0x24000218
 80098c0:	2400001c 	.word	0x2400001c
 80098c4:	2400009c 	.word	0x2400009c

080098c8 <CDC_Init_HS>:
/**
  * @brief  Initializes the CDC media low layer over the USB HS IP
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Init_HS(void)
{
 80098c8:	b580      	push	{r7, lr}
 80098ca:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 8 */
  /* Set Application Buffers */
  USBD_CDC_SetTxBuffer(&hUsbDeviceHS, UserTxBufferHS, 0);
 80098cc:	2200      	movs	r2, #0
 80098ce:	4905      	ldr	r1, [pc, #20]	; (80098e4 <CDC_Init_HS+0x1c>)
 80098d0:	4805      	ldr	r0, [pc, #20]	; (80098e8 <CDC_Init_HS+0x20>)
 80098d2:	f7fe fc19 	bl	8008108 <USBD_CDC_SetTxBuffer>
  USBD_CDC_SetRxBuffer(&hUsbDeviceHS, UserRxBufferHS);
 80098d6:	4905      	ldr	r1, [pc, #20]	; (80098ec <CDC_Init_HS+0x24>)
 80098d8:	4803      	ldr	r0, [pc, #12]	; (80098e8 <CDC_Init_HS+0x20>)
 80098da:	f7fe fc37 	bl	800814c <USBD_CDC_SetRxBuffer>
  return (USBD_OK);
 80098de:	2300      	movs	r3, #0
  /* USER CODE END 8 */
}
 80098e0:	4618      	mov	r0, r3
 80098e2:	bd80      	pop	{r7, pc}
 80098e4:	24000cf4 	.word	0x24000cf4
 80098e8:	24000218 	.word	0x24000218
 80098ec:	240004f4 	.word	0x240004f4

080098f0 <CDC_DeInit_HS>:
  * @brief  DeInitializes the CDC media low layer
  * @param  None
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_DeInit_HS(void)
{
 80098f0:	b480      	push	{r7}
 80098f2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 9 */
  return (USBD_OK);
 80098f4:	2300      	movs	r3, #0
  /* USER CODE END 9 */
}
 80098f6:	4618      	mov	r0, r3
 80098f8:	46bd      	mov	sp, r7
 80098fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80098fe:	4770      	bx	lr

08009900 <CDC_Control_HS>:
  * @param  pbuf: Buffer containing command data (request parameters)
  * @param  length: Number of data to be sent (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Control_HS(uint8_t cmd, uint8_t* pbuf, uint16_t length)
{
 8009900:	b480      	push	{r7}
 8009902:	b083      	sub	sp, #12
 8009904:	af00      	add	r7, sp, #0
 8009906:	4603      	mov	r3, r0
 8009908:	6039      	str	r1, [r7, #0]
 800990a:	71fb      	strb	r3, [r7, #7]
 800990c:	4613      	mov	r3, r2
 800990e:	80bb      	strh	r3, [r7, #4]
  /* USER CODE BEGIN 10 */
  switch(cmd)
 8009910:	79fb      	ldrb	r3, [r7, #7]
 8009912:	2b23      	cmp	r3, #35	; 0x23
 8009914:	d84a      	bhi.n	80099ac <CDC_Control_HS+0xac>
 8009916:	a201      	add	r2, pc, #4	; (adr r2, 800991c <CDC_Control_HS+0x1c>)
 8009918:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800991c:	080099ad 	.word	0x080099ad
 8009920:	080099ad 	.word	0x080099ad
 8009924:	080099ad 	.word	0x080099ad
 8009928:	080099ad 	.word	0x080099ad
 800992c:	080099ad 	.word	0x080099ad
 8009930:	080099ad 	.word	0x080099ad
 8009934:	080099ad 	.word	0x080099ad
 8009938:	080099ad 	.word	0x080099ad
 800993c:	080099ad 	.word	0x080099ad
 8009940:	080099ad 	.word	0x080099ad
 8009944:	080099ad 	.word	0x080099ad
 8009948:	080099ad 	.word	0x080099ad
 800994c:	080099ad 	.word	0x080099ad
 8009950:	080099ad 	.word	0x080099ad
 8009954:	080099ad 	.word	0x080099ad
 8009958:	080099ad 	.word	0x080099ad
 800995c:	080099ad 	.word	0x080099ad
 8009960:	080099ad 	.word	0x080099ad
 8009964:	080099ad 	.word	0x080099ad
 8009968:	080099ad 	.word	0x080099ad
 800996c:	080099ad 	.word	0x080099ad
 8009970:	080099ad 	.word	0x080099ad
 8009974:	080099ad 	.word	0x080099ad
 8009978:	080099ad 	.word	0x080099ad
 800997c:	080099ad 	.word	0x080099ad
 8009980:	080099ad 	.word	0x080099ad
 8009984:	080099ad 	.word	0x080099ad
 8009988:	080099ad 	.word	0x080099ad
 800998c:	080099ad 	.word	0x080099ad
 8009990:	080099ad 	.word	0x080099ad
 8009994:	080099ad 	.word	0x080099ad
 8009998:	080099ad 	.word	0x080099ad
 800999c:	080099ad 	.word	0x080099ad
 80099a0:	080099ad 	.word	0x080099ad
 80099a4:	080099ad 	.word	0x080099ad
 80099a8:	080099ad 	.word	0x080099ad
  case CDC_SEND_BREAK:

    break;

  default:
    break;
 80099ac:	bf00      	nop
  }

  return (USBD_OK);
 80099ae:	2300      	movs	r3, #0
  /* USER CODE END 10 */
}
 80099b0:	4618      	mov	r0, r3
 80099b2:	370c      	adds	r7, #12
 80099b4:	46bd      	mov	sp, r7
 80099b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80099ba:	4770      	bx	lr

080099bc <CDC_Receive_HS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAILL
  */
static int8_t CDC_Receive_HS(uint8_t* Buf, uint32_t *Len)
{
 80099bc:	b580      	push	{r7, lr}
 80099be:	b082      	sub	sp, #8
 80099c0:	af00      	add	r7, sp, #0
 80099c2:	6078      	str	r0, [r7, #4]
 80099c4:	6039      	str	r1, [r7, #0]
  /* USER CODE BEGIN 11 */
  USBD_CDC_SetRxBuffer(&hUsbDeviceHS, &Buf[0]);
 80099c6:	6879      	ldr	r1, [r7, #4]
 80099c8:	4805      	ldr	r0, [pc, #20]	; (80099e0 <CDC_Receive_HS+0x24>)
 80099ca:	f7fe fbbf 	bl	800814c <USBD_CDC_SetRxBuffer>
  USBD_CDC_ReceivePacket(&hUsbDeviceHS);
 80099ce:	4804      	ldr	r0, [pc, #16]	; (80099e0 <CDC_Receive_HS+0x24>)
 80099d0:	f7fe fc20 	bl	8008214 <USBD_CDC_ReceivePacket>
  return (USBD_OK);
 80099d4:	2300      	movs	r3, #0
  /* USER CODE END 11 */
}
 80099d6:	4618      	mov	r0, r3
 80099d8:	3708      	adds	r7, #8
 80099da:	46bd      	mov	sp, r7
 80099dc:	bd80      	pop	{r7, pc}
 80099de:	bf00      	nop
 80099e0:	24000218 	.word	0x24000218

080099e4 <CDC_Transmit_HS>:
  * @param  Buf: Buffer of data to be sent
  * @param  Len: Number of data to be sent (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL or USBD_BUSY
  */
uint8_t CDC_Transmit_HS(uint8_t* Buf, uint16_t Len)
{
 80099e4:	b580      	push	{r7, lr}
 80099e6:	b084      	sub	sp, #16
 80099e8:	af00      	add	r7, sp, #0
 80099ea:	6078      	str	r0, [r7, #4]
 80099ec:	460b      	mov	r3, r1
 80099ee:	807b      	strh	r3, [r7, #2]
  uint8_t result = USBD_OK;
 80099f0:	2300      	movs	r3, #0
 80099f2:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN 12 */
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef*)hUsbDeviceHS.pClassData;
 80099f4:	4b0d      	ldr	r3, [pc, #52]	; (8009a2c <CDC_Transmit_HS+0x48>)
 80099f6:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 80099fa:	60bb      	str	r3, [r7, #8]
  if (hcdc->TxState != 0){
 80099fc:	68bb      	ldr	r3, [r7, #8]
 80099fe:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 8009a02:	2b00      	cmp	r3, #0
 8009a04:	d001      	beq.n	8009a0a <CDC_Transmit_HS+0x26>
    return USBD_BUSY;
 8009a06:	2301      	movs	r3, #1
 8009a08:	e00b      	b.n	8009a22 <CDC_Transmit_HS+0x3e>
  }
  USBD_CDC_SetTxBuffer(&hUsbDeviceHS, Buf, Len);
 8009a0a:	887b      	ldrh	r3, [r7, #2]
 8009a0c:	461a      	mov	r2, r3
 8009a0e:	6879      	ldr	r1, [r7, #4]
 8009a10:	4806      	ldr	r0, [pc, #24]	; (8009a2c <CDC_Transmit_HS+0x48>)
 8009a12:	f7fe fb79 	bl	8008108 <USBD_CDC_SetTxBuffer>
  result = USBD_CDC_TransmitPacket(&hUsbDeviceHS);
 8009a16:	4805      	ldr	r0, [pc, #20]	; (8009a2c <CDC_Transmit_HS+0x48>)
 8009a18:	f7fe fbb6 	bl	8008188 <USBD_CDC_TransmitPacket>
 8009a1c:	4603      	mov	r3, r0
 8009a1e:	73fb      	strb	r3, [r7, #15]
  /* USER CODE END 12 */
  return result;
 8009a20:	7bfb      	ldrb	r3, [r7, #15]
}
 8009a22:	4618      	mov	r0, r3
 8009a24:	3710      	adds	r7, #16
 8009a26:	46bd      	mov	sp, r7
 8009a28:	bd80      	pop	{r7, pc}
 8009a2a:	bf00      	nop
 8009a2c:	24000218 	.word	0x24000218

08009a30 <CDC_TransmitCplt_HS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_TransmitCplt_HS(uint8_t *Buf, uint32_t *Len, uint8_t epnum)
{
 8009a30:	b480      	push	{r7}
 8009a32:	b087      	sub	sp, #28
 8009a34:	af00      	add	r7, sp, #0
 8009a36:	60f8      	str	r0, [r7, #12]
 8009a38:	60b9      	str	r1, [r7, #8]
 8009a3a:	4613      	mov	r3, r2
 8009a3c:	71fb      	strb	r3, [r7, #7]
  uint8_t result = USBD_OK;
 8009a3e:	2300      	movs	r3, #0
 8009a40:	75fb      	strb	r3, [r7, #23]
  /* USER CODE BEGIN 14 */
  UNUSED(Buf);
  UNUSED(Len);
  UNUSED(epnum);
  /* USER CODE END 14 */
  return result;
 8009a42:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8009a46:	4618      	mov	r0, r3
 8009a48:	371c      	adds	r7, #28
 8009a4a:	46bd      	mov	sp, r7
 8009a4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009a50:	4770      	bx	lr
	...

08009a54 <USBD_HS_DeviceDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_HS_DeviceDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8009a54:	b480      	push	{r7}
 8009a56:	b083      	sub	sp, #12
 8009a58:	af00      	add	r7, sp, #0
 8009a5a:	4603      	mov	r3, r0
 8009a5c:	6039      	str	r1, [r7, #0]
 8009a5e:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_HS_DeviceDesc);
 8009a60:	683b      	ldr	r3, [r7, #0]
 8009a62:	2212      	movs	r2, #18
 8009a64:	801a      	strh	r2, [r3, #0]
  return USBD_HS_DeviceDesc;
 8009a66:	4b03      	ldr	r3, [pc, #12]	; (8009a74 <USBD_HS_DeviceDescriptor+0x20>)
}
 8009a68:	4618      	mov	r0, r3
 8009a6a:	370c      	adds	r7, #12
 8009a6c:	46bd      	mov	sp, r7
 8009a6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009a72:	4770      	bx	lr
 8009a74:	240000cc 	.word	0x240000cc

08009a78 <USBD_HS_LangIDStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_HS_LangIDStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8009a78:	b480      	push	{r7}
 8009a7a:	b083      	sub	sp, #12
 8009a7c:	af00      	add	r7, sp, #0
 8009a7e:	4603      	mov	r3, r0
 8009a80:	6039      	str	r1, [r7, #0]
 8009a82:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_LangIDDesc);
 8009a84:	683b      	ldr	r3, [r7, #0]
 8009a86:	2204      	movs	r2, #4
 8009a88:	801a      	strh	r2, [r3, #0]
  return USBD_LangIDDesc;
 8009a8a:	4b03      	ldr	r3, [pc, #12]	; (8009a98 <USBD_HS_LangIDStrDescriptor+0x20>)
}
 8009a8c:	4618      	mov	r0, r3
 8009a8e:	370c      	adds	r7, #12
 8009a90:	46bd      	mov	sp, r7
 8009a92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009a96:	4770      	bx	lr
 8009a98:	240000e0 	.word	0x240000e0

08009a9c <USBD_HS_ProductStrDescriptor>:
  * @param  speed : current device speed
  * @param  length : pointer to data length variable
  * @retval pointer to descriptor buffer
  */
uint8_t * USBD_HS_ProductStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8009a9c:	b580      	push	{r7, lr}
 8009a9e:	b082      	sub	sp, #8
 8009aa0:	af00      	add	r7, sp, #0
 8009aa2:	4603      	mov	r3, r0
 8009aa4:	6039      	str	r1, [r7, #0]
 8009aa6:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 8009aa8:	79fb      	ldrb	r3, [r7, #7]
 8009aaa:	2b00      	cmp	r3, #0
 8009aac:	d105      	bne.n	8009aba <USBD_HS_ProductStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_HS, USBD_StrDesc, length);
 8009aae:	683a      	ldr	r2, [r7, #0]
 8009ab0:	4907      	ldr	r1, [pc, #28]	; (8009ad0 <USBD_HS_ProductStrDescriptor+0x34>)
 8009ab2:	4808      	ldr	r0, [pc, #32]	; (8009ad4 <USBD_HS_ProductStrDescriptor+0x38>)
 8009ab4:	f7ff fdf6 	bl	80096a4 <USBD_GetString>
 8009ab8:	e004      	b.n	8009ac4 <USBD_HS_ProductStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_HS, USBD_StrDesc, length);
 8009aba:	683a      	ldr	r2, [r7, #0]
 8009abc:	4904      	ldr	r1, [pc, #16]	; (8009ad0 <USBD_HS_ProductStrDescriptor+0x34>)
 8009abe:	4805      	ldr	r0, [pc, #20]	; (8009ad4 <USBD_HS_ProductStrDescriptor+0x38>)
 8009ac0:	f7ff fdf0 	bl	80096a4 <USBD_GetString>
  }
  return USBD_StrDesc;
 8009ac4:	4b02      	ldr	r3, [pc, #8]	; (8009ad0 <USBD_HS_ProductStrDescriptor+0x34>)
}
 8009ac6:	4618      	mov	r0, r3
 8009ac8:	3708      	adds	r7, #8
 8009aca:	46bd      	mov	sp, r7
 8009acc:	bd80      	pop	{r7, pc}
 8009ace:	bf00      	nop
 8009ad0:	240014f4 	.word	0x240014f4
 8009ad4:	0800ad20 	.word	0x0800ad20

08009ad8 <USBD_HS_ManufacturerStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_HS_ManufacturerStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8009ad8:	b580      	push	{r7, lr}
 8009ada:	b082      	sub	sp, #8
 8009adc:	af00      	add	r7, sp, #0
 8009ade:	4603      	mov	r3, r0
 8009ae0:	6039      	str	r1, [r7, #0]
 8009ae2:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  USBD_GetString((uint8_t *)USBD_MANUFACTURER_STRING, USBD_StrDesc, length);
 8009ae4:	683a      	ldr	r2, [r7, #0]
 8009ae6:	4904      	ldr	r1, [pc, #16]	; (8009af8 <USBD_HS_ManufacturerStrDescriptor+0x20>)
 8009ae8:	4804      	ldr	r0, [pc, #16]	; (8009afc <USBD_HS_ManufacturerStrDescriptor+0x24>)
 8009aea:	f7ff fddb 	bl	80096a4 <USBD_GetString>
  return USBD_StrDesc;
 8009aee:	4b02      	ldr	r3, [pc, #8]	; (8009af8 <USBD_HS_ManufacturerStrDescriptor+0x20>)
}
 8009af0:	4618      	mov	r0, r3
 8009af2:	3708      	adds	r7, #8
 8009af4:	46bd      	mov	sp, r7
 8009af6:	bd80      	pop	{r7, pc}
 8009af8:	240014f4 	.word	0x240014f4
 8009afc:	0800ad38 	.word	0x0800ad38

08009b00 <USBD_HS_SerialStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_HS_SerialStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8009b00:	b580      	push	{r7, lr}
 8009b02:	b082      	sub	sp, #8
 8009b04:	af00      	add	r7, sp, #0
 8009b06:	4603      	mov	r3, r0
 8009b08:	6039      	str	r1, [r7, #0]
 8009b0a:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = USB_SIZ_STRING_SERIAL;
 8009b0c:	683b      	ldr	r3, [r7, #0]
 8009b0e:	221a      	movs	r2, #26
 8009b10:	801a      	strh	r2, [r3, #0]

  /* Update the serial number string descriptor with the data from the unique
   * ID */
  Get_SerialNum();
 8009b12:	f000 f843 	bl	8009b9c <Get_SerialNum>
  /* USER CODE BEGIN USBD_HS_SerialStrDescriptor */

  /* USER CODE END USBD_HS_SerialStrDescriptor */

  return (uint8_t *) USBD_StringSerial;
 8009b16:	4b02      	ldr	r3, [pc, #8]	; (8009b20 <USBD_HS_SerialStrDescriptor+0x20>)
}
 8009b18:	4618      	mov	r0, r3
 8009b1a:	3708      	adds	r7, #8
 8009b1c:	46bd      	mov	sp, r7
 8009b1e:	bd80      	pop	{r7, pc}
 8009b20:	240000e4 	.word	0x240000e4

08009b24 <USBD_HS_ConfigStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_HS_ConfigStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8009b24:	b580      	push	{r7, lr}
 8009b26:	b082      	sub	sp, #8
 8009b28:	af00      	add	r7, sp, #0
 8009b2a:	4603      	mov	r3, r0
 8009b2c:	6039      	str	r1, [r7, #0]
 8009b2e:	71fb      	strb	r3, [r7, #7]
  if(speed == USBD_SPEED_HIGH)
 8009b30:	79fb      	ldrb	r3, [r7, #7]
 8009b32:	2b00      	cmp	r3, #0
 8009b34:	d105      	bne.n	8009b42 <USBD_HS_ConfigStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_HS, USBD_StrDesc, length);
 8009b36:	683a      	ldr	r2, [r7, #0]
 8009b38:	4907      	ldr	r1, [pc, #28]	; (8009b58 <USBD_HS_ConfigStrDescriptor+0x34>)
 8009b3a:	4808      	ldr	r0, [pc, #32]	; (8009b5c <USBD_HS_ConfigStrDescriptor+0x38>)
 8009b3c:	f7ff fdb2 	bl	80096a4 <USBD_GetString>
 8009b40:	e004      	b.n	8009b4c <USBD_HS_ConfigStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_HS, USBD_StrDesc, length);
 8009b42:	683a      	ldr	r2, [r7, #0]
 8009b44:	4904      	ldr	r1, [pc, #16]	; (8009b58 <USBD_HS_ConfigStrDescriptor+0x34>)
 8009b46:	4805      	ldr	r0, [pc, #20]	; (8009b5c <USBD_HS_ConfigStrDescriptor+0x38>)
 8009b48:	f7ff fdac 	bl	80096a4 <USBD_GetString>
  }
  return USBD_StrDesc;
 8009b4c:	4b02      	ldr	r3, [pc, #8]	; (8009b58 <USBD_HS_ConfigStrDescriptor+0x34>)
}
 8009b4e:	4618      	mov	r0, r3
 8009b50:	3708      	adds	r7, #8
 8009b52:	46bd      	mov	sp, r7
 8009b54:	bd80      	pop	{r7, pc}
 8009b56:	bf00      	nop
 8009b58:	240014f4 	.word	0x240014f4
 8009b5c:	0800ad4c 	.word	0x0800ad4c

08009b60 <USBD_HS_InterfaceStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_HS_InterfaceStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8009b60:	b580      	push	{r7, lr}
 8009b62:	b082      	sub	sp, #8
 8009b64:	af00      	add	r7, sp, #0
 8009b66:	4603      	mov	r3, r0
 8009b68:	6039      	str	r1, [r7, #0]
 8009b6a:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 8009b6c:	79fb      	ldrb	r3, [r7, #7]
 8009b6e:	2b00      	cmp	r3, #0
 8009b70:	d105      	bne.n	8009b7e <USBD_HS_InterfaceStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_HS, USBD_StrDesc, length);
 8009b72:	683a      	ldr	r2, [r7, #0]
 8009b74:	4907      	ldr	r1, [pc, #28]	; (8009b94 <USBD_HS_InterfaceStrDescriptor+0x34>)
 8009b76:	4808      	ldr	r0, [pc, #32]	; (8009b98 <USBD_HS_InterfaceStrDescriptor+0x38>)
 8009b78:	f7ff fd94 	bl	80096a4 <USBD_GetString>
 8009b7c:	e004      	b.n	8009b88 <USBD_HS_InterfaceStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_HS, USBD_StrDesc, length);
 8009b7e:	683a      	ldr	r2, [r7, #0]
 8009b80:	4904      	ldr	r1, [pc, #16]	; (8009b94 <USBD_HS_InterfaceStrDescriptor+0x34>)
 8009b82:	4805      	ldr	r0, [pc, #20]	; (8009b98 <USBD_HS_InterfaceStrDescriptor+0x38>)
 8009b84:	f7ff fd8e 	bl	80096a4 <USBD_GetString>
  }
  return USBD_StrDesc;
 8009b88:	4b02      	ldr	r3, [pc, #8]	; (8009b94 <USBD_HS_InterfaceStrDescriptor+0x34>)
}
 8009b8a:	4618      	mov	r0, r3
 8009b8c:	3708      	adds	r7, #8
 8009b8e:	46bd      	mov	sp, r7
 8009b90:	bd80      	pop	{r7, pc}
 8009b92:	bf00      	nop
 8009b94:	240014f4 	.word	0x240014f4
 8009b98:	0800ad58 	.word	0x0800ad58

08009b9c <Get_SerialNum>:
  * @brief  Create the serial number string descriptor
  * @param  None
  * @retval None
  */
static void Get_SerialNum(void)
{
 8009b9c:	b580      	push	{r7, lr}
 8009b9e:	b084      	sub	sp, #16
 8009ba0:	af00      	add	r7, sp, #0
  uint32_t deviceserial0, deviceserial1, deviceserial2;

  deviceserial0 = *(uint32_t *) DEVICE_ID1;
 8009ba2:	4b0f      	ldr	r3, [pc, #60]	; (8009be0 <Get_SerialNum+0x44>)
 8009ba4:	681b      	ldr	r3, [r3, #0]
 8009ba6:	60fb      	str	r3, [r7, #12]
  deviceserial1 = *(uint32_t *) DEVICE_ID2;
 8009ba8:	4b0e      	ldr	r3, [pc, #56]	; (8009be4 <Get_SerialNum+0x48>)
 8009baa:	681b      	ldr	r3, [r3, #0]
 8009bac:	60bb      	str	r3, [r7, #8]
  deviceserial2 = *(uint32_t *) DEVICE_ID3;
 8009bae:	4b0e      	ldr	r3, [pc, #56]	; (8009be8 <Get_SerialNum+0x4c>)
 8009bb0:	681b      	ldr	r3, [r3, #0]
 8009bb2:	607b      	str	r3, [r7, #4]

  deviceserial0 += deviceserial2;
 8009bb4:	68fa      	ldr	r2, [r7, #12]
 8009bb6:	687b      	ldr	r3, [r7, #4]
 8009bb8:	4413      	add	r3, r2
 8009bba:	60fb      	str	r3, [r7, #12]

  if (deviceserial0 != 0)
 8009bbc:	68fb      	ldr	r3, [r7, #12]
 8009bbe:	2b00      	cmp	r3, #0
 8009bc0:	d009      	beq.n	8009bd6 <Get_SerialNum+0x3a>
  {
    IntToUnicode(deviceserial0, &USBD_StringSerial[2], 8);
 8009bc2:	2208      	movs	r2, #8
 8009bc4:	4909      	ldr	r1, [pc, #36]	; (8009bec <Get_SerialNum+0x50>)
 8009bc6:	68f8      	ldr	r0, [r7, #12]
 8009bc8:	f000 f814 	bl	8009bf4 <IntToUnicode>
    IntToUnicode(deviceserial1, &USBD_StringSerial[18], 4);
 8009bcc:	2204      	movs	r2, #4
 8009bce:	4908      	ldr	r1, [pc, #32]	; (8009bf0 <Get_SerialNum+0x54>)
 8009bd0:	68b8      	ldr	r0, [r7, #8]
 8009bd2:	f000 f80f 	bl	8009bf4 <IntToUnicode>
  }
}
 8009bd6:	bf00      	nop
 8009bd8:	3710      	adds	r7, #16
 8009bda:	46bd      	mov	sp, r7
 8009bdc:	bd80      	pop	{r7, pc}
 8009bde:	bf00      	nop
 8009be0:	1ff1e800 	.word	0x1ff1e800
 8009be4:	1ff1e804 	.word	0x1ff1e804
 8009be8:	1ff1e808 	.word	0x1ff1e808
 8009bec:	240000e6 	.word	0x240000e6
 8009bf0:	240000f6 	.word	0x240000f6

08009bf4 <IntToUnicode>:
  * @param  pbuf: pointer to the buffer
  * @param  len: buffer length
  * @retval None
  */
static void IntToUnicode(uint32_t value, uint8_t * pbuf, uint8_t len)
{
 8009bf4:	b480      	push	{r7}
 8009bf6:	b087      	sub	sp, #28
 8009bf8:	af00      	add	r7, sp, #0
 8009bfa:	60f8      	str	r0, [r7, #12]
 8009bfc:	60b9      	str	r1, [r7, #8]
 8009bfe:	4613      	mov	r3, r2
 8009c00:	71fb      	strb	r3, [r7, #7]
  uint8_t idx = 0;
 8009c02:	2300      	movs	r3, #0
 8009c04:	75fb      	strb	r3, [r7, #23]

  for (idx = 0; idx < len; idx++)
 8009c06:	2300      	movs	r3, #0
 8009c08:	75fb      	strb	r3, [r7, #23]
 8009c0a:	e027      	b.n	8009c5c <IntToUnicode+0x68>
  {
    if (((value >> 28)) < 0xA)
 8009c0c:	68fb      	ldr	r3, [r7, #12]
 8009c0e:	0f1b      	lsrs	r3, r3, #28
 8009c10:	2b09      	cmp	r3, #9
 8009c12:	d80b      	bhi.n	8009c2c <IntToUnicode+0x38>
    {
      pbuf[2 * idx] = (value >> 28) + '0';
 8009c14:	68fb      	ldr	r3, [r7, #12]
 8009c16:	0f1b      	lsrs	r3, r3, #28
 8009c18:	b2da      	uxtb	r2, r3
 8009c1a:	7dfb      	ldrb	r3, [r7, #23]
 8009c1c:	005b      	lsls	r3, r3, #1
 8009c1e:	4619      	mov	r1, r3
 8009c20:	68bb      	ldr	r3, [r7, #8]
 8009c22:	440b      	add	r3, r1
 8009c24:	3230      	adds	r2, #48	; 0x30
 8009c26:	b2d2      	uxtb	r2, r2
 8009c28:	701a      	strb	r2, [r3, #0]
 8009c2a:	e00a      	b.n	8009c42 <IntToUnicode+0x4e>
    }
    else
    {
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 8009c2c:	68fb      	ldr	r3, [r7, #12]
 8009c2e:	0f1b      	lsrs	r3, r3, #28
 8009c30:	b2da      	uxtb	r2, r3
 8009c32:	7dfb      	ldrb	r3, [r7, #23]
 8009c34:	005b      	lsls	r3, r3, #1
 8009c36:	4619      	mov	r1, r3
 8009c38:	68bb      	ldr	r3, [r7, #8]
 8009c3a:	440b      	add	r3, r1
 8009c3c:	3237      	adds	r2, #55	; 0x37
 8009c3e:	b2d2      	uxtb	r2, r2
 8009c40:	701a      	strb	r2, [r3, #0]
    }

    value = value << 4;
 8009c42:	68fb      	ldr	r3, [r7, #12]
 8009c44:	011b      	lsls	r3, r3, #4
 8009c46:	60fb      	str	r3, [r7, #12]

    pbuf[2 * idx + 1] = 0;
 8009c48:	7dfb      	ldrb	r3, [r7, #23]
 8009c4a:	005b      	lsls	r3, r3, #1
 8009c4c:	3301      	adds	r3, #1
 8009c4e:	68ba      	ldr	r2, [r7, #8]
 8009c50:	4413      	add	r3, r2
 8009c52:	2200      	movs	r2, #0
 8009c54:	701a      	strb	r2, [r3, #0]
  for (idx = 0; idx < len; idx++)
 8009c56:	7dfb      	ldrb	r3, [r7, #23]
 8009c58:	3301      	adds	r3, #1
 8009c5a:	75fb      	strb	r3, [r7, #23]
 8009c5c:	7dfa      	ldrb	r2, [r7, #23]
 8009c5e:	79fb      	ldrb	r3, [r7, #7]
 8009c60:	429a      	cmp	r2, r3
 8009c62:	d3d3      	bcc.n	8009c0c <IntToUnicode+0x18>
  }
}
 8009c64:	bf00      	nop
 8009c66:	bf00      	nop
 8009c68:	371c      	adds	r7, #28
 8009c6a:	46bd      	mov	sp, r7
 8009c6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009c70:	4770      	bx	lr
	...

08009c74 <HAL_PCD_MspInit>:
                       LL Driver Callbacks (PCD -> USB Device Library)
*******************************************************************************/
/* MSP Init */

void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
{
 8009c74:	b580      	push	{r7, lr}
 8009c76:	b0bc      	sub	sp, #240	; 0xf0
 8009c78:	af00      	add	r7, sp, #0
 8009c7a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8009c7c:	f107 03dc 	add.w	r3, r7, #220	; 0xdc
 8009c80:	2200      	movs	r2, #0
 8009c82:	601a      	str	r2, [r3, #0]
 8009c84:	605a      	str	r2, [r3, #4]
 8009c86:	609a      	str	r2, [r3, #8]
 8009c88:	60da      	str	r2, [r3, #12]
 8009c8a:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8009c8c:	f107 0320 	add.w	r3, r7, #32
 8009c90:	22bc      	movs	r2, #188	; 0xbc
 8009c92:	2100      	movs	r1, #0
 8009c94:	4618      	mov	r0, r3
 8009c96:	f000 fbab 	bl	800a3f0 <memset>
  if(pcdHandle->Instance==USB_OTG_HS)
 8009c9a:	687b      	ldr	r3, [r7, #4]
 8009c9c:	681b      	ldr	r3, [r3, #0]
 8009c9e:	4a57      	ldr	r2, [pc, #348]	; (8009dfc <HAL_PCD_MspInit+0x188>)
 8009ca0:	4293      	cmp	r3, r2
 8009ca2:	f040 80a6 	bne.w	8009df2 <HAL_PCD_MspInit+0x17e>

  /* USER CODE END USB_OTG_HS_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USB;
 8009ca6:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 8009caa:	623b      	str	r3, [r7, #32]
    PeriphClkInitStruct.UsbClockSelection = RCC_USBCLKSOURCE_HSI48;
 8009cac:	f44f 1340 	mov.w	r3, #3145728	; 0x300000
 8009cb0:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8009cb4:	f107 0320 	add.w	r3, r7, #32
 8009cb8:	4618      	mov	r0, r3
 8009cba:	f7fa f85b 	bl	8003d74 <HAL_RCCEx_PeriphCLKConfig>
 8009cbe:	4603      	mov	r3, r0
 8009cc0:	2b00      	cmp	r3, #0
 8009cc2:	d001      	beq.n	8009cc8 <HAL_PCD_MspInit+0x54>
    {
      Error_Handler();
 8009cc4:	f7f6 fd9a 	bl	80007fc <Error_Handler>
    }

  /** Enable USB Voltage detector
  */
    HAL_PWREx_EnableUSBVoltageDetector();
 8009cc8:	f7f9 f8b6 	bl	8002e38 <HAL_PWREx_EnableUSBVoltageDetector>

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8009ccc:	4b4c      	ldr	r3, [pc, #304]	; (8009e00 <HAL_PCD_MspInit+0x18c>)
 8009cce:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8009cd2:	4a4b      	ldr	r2, [pc, #300]	; (8009e00 <HAL_PCD_MspInit+0x18c>)
 8009cd4:	f043 0304 	orr.w	r3, r3, #4
 8009cd8:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8009cdc:	4b48      	ldr	r3, [pc, #288]	; (8009e00 <HAL_PCD_MspInit+0x18c>)
 8009cde:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8009ce2:	f003 0304 	and.w	r3, r3, #4
 8009ce6:	61fb      	str	r3, [r7, #28]
 8009ce8:	69fb      	ldr	r3, [r7, #28]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8009cea:	4b45      	ldr	r3, [pc, #276]	; (8009e00 <HAL_PCD_MspInit+0x18c>)
 8009cec:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8009cf0:	4a43      	ldr	r2, [pc, #268]	; (8009e00 <HAL_PCD_MspInit+0x18c>)
 8009cf2:	f043 0301 	orr.w	r3, r3, #1
 8009cf6:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8009cfa:	4b41      	ldr	r3, [pc, #260]	; (8009e00 <HAL_PCD_MspInit+0x18c>)
 8009cfc:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8009d00:	f003 0301 	and.w	r3, r3, #1
 8009d04:	61bb      	str	r3, [r7, #24]
 8009d06:	69bb      	ldr	r3, [r7, #24]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8009d08:	4b3d      	ldr	r3, [pc, #244]	; (8009e00 <HAL_PCD_MspInit+0x18c>)
 8009d0a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8009d0e:	4a3c      	ldr	r2, [pc, #240]	; (8009e00 <HAL_PCD_MspInit+0x18c>)
 8009d10:	f043 0302 	orr.w	r3, r3, #2
 8009d14:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8009d18:	4b39      	ldr	r3, [pc, #228]	; (8009e00 <HAL_PCD_MspInit+0x18c>)
 8009d1a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8009d1e:	f003 0302 	and.w	r3, r3, #2
 8009d22:	617b      	str	r3, [r7, #20]
 8009d24:	697b      	ldr	r3, [r7, #20]
    PB11     ------> USB_OTG_HS_ULPI_D4
    PB12     ------> USB_OTG_HS_ULPI_D5
    PB13     ------> USB_OTG_HS_ULPI_D6
    PB5     ------> USB_OTG_HS_ULPI_D7
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_2|GPIO_PIN_3;
 8009d26:	230d      	movs	r3, #13
 8009d28:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8009d2c:	2302      	movs	r3, #2
 8009d2e:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8009d32:	2300      	movs	r3, #0
 8009d34:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8009d38:	2302      	movs	r3, #2
 8009d3a:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG2_HS;
 8009d3e:	230a      	movs	r3, #10
 8009d40:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8009d44:	f107 03dc 	add.w	r3, r7, #220	; 0xdc
 8009d48:	4619      	mov	r1, r3
 8009d4a:	482e      	ldr	r0, [pc, #184]	; (8009e04 <HAL_PCD_MspInit+0x190>)
 8009d4c:	f7f7 fb82 	bl	8001454 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_3|GPIO_PIN_5;
 8009d50:	2328      	movs	r3, #40	; 0x28
 8009d52:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8009d56:	2302      	movs	r3, #2
 8009d58:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8009d5c:	2300      	movs	r3, #0
 8009d5e:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8009d62:	2302      	movs	r3, #2
 8009d64:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG2_HS;
 8009d68:	230a      	movs	r3, #10
 8009d6a:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8009d6e:	f107 03dc 	add.w	r3, r7, #220	; 0xdc
 8009d72:	4619      	mov	r1, r3
 8009d74:	4824      	ldr	r0, [pc, #144]	; (8009e08 <HAL_PCD_MspInit+0x194>)
 8009d76:	f7f7 fb6d 	bl	8001454 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_10|GPIO_PIN_11
 8009d7a:	f643 4323 	movw	r3, #15395	; 0x3c23
 8009d7e:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
                          |GPIO_PIN_12|GPIO_PIN_13|GPIO_PIN_5;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8009d82:	2302      	movs	r3, #2
 8009d84:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8009d88:	2300      	movs	r3, #0
 8009d8a:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8009d8e:	2302      	movs	r3, #2
 8009d90:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG2_HS;
 8009d94:	230a      	movs	r3, #10
 8009d96:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8009d9a:	f107 03dc 	add.w	r3, r7, #220	; 0xdc
 8009d9e:	4619      	mov	r1, r3
 8009da0:	481a      	ldr	r0, [pc, #104]	; (8009e0c <HAL_PCD_MspInit+0x198>)
 8009da2:	f7f7 fb57 	bl	8001454 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_HS_CLK_ENABLE();
 8009da6:	4b16      	ldr	r3, [pc, #88]	; (8009e00 <HAL_PCD_MspInit+0x18c>)
 8009da8:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8009dac:	4a14      	ldr	r2, [pc, #80]	; (8009e00 <HAL_PCD_MspInit+0x18c>)
 8009dae:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8009db2:	f8c2 30d8 	str.w	r3, [r2, #216]	; 0xd8
 8009db6:	4b12      	ldr	r3, [pc, #72]	; (8009e00 <HAL_PCD_MspInit+0x18c>)
 8009db8:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8009dbc:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8009dc0:	613b      	str	r3, [r7, #16]
 8009dc2:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_USB_OTG_HS_ULPI_CLK_ENABLE();
 8009dc4:	4b0e      	ldr	r3, [pc, #56]	; (8009e00 <HAL_PCD_MspInit+0x18c>)
 8009dc6:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8009dca:	4a0d      	ldr	r2, [pc, #52]	; (8009e00 <HAL_PCD_MspInit+0x18c>)
 8009dcc:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8009dd0:	f8c2 30d8 	str.w	r3, [r2, #216]	; 0xd8
 8009dd4:	4b0a      	ldr	r3, [pc, #40]	; (8009e00 <HAL_PCD_MspInit+0x18c>)
 8009dd6:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8009dda:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8009dde:	60fb      	str	r3, [r7, #12]
 8009de0:	68fb      	ldr	r3, [r7, #12]

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(OTG_HS_IRQn, 0, 0);
 8009de2:	2200      	movs	r2, #0
 8009de4:	2100      	movs	r1, #0
 8009de6:	204d      	movs	r0, #77	; 0x4d
 8009de8:	f7f7 f8b9 	bl	8000f5e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(OTG_HS_IRQn);
 8009dec:	204d      	movs	r0, #77	; 0x4d
 8009dee:	f7f7 f8d0 	bl	8000f92 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_OTG_HS_MspInit 1 */

  /* USER CODE END USB_OTG_HS_MspInit 1 */
  }
}
 8009df2:	bf00      	nop
 8009df4:	37f0      	adds	r7, #240	; 0xf0
 8009df6:	46bd      	mov	sp, r7
 8009df8:	bd80      	pop	{r7, pc}
 8009dfa:	bf00      	nop
 8009dfc:	40040000 	.word	0x40040000
 8009e00:	58024400 	.word	0x58024400
 8009e04:	58020800 	.word	0x58020800
 8009e08:	58020000 	.word	0x58020000
 8009e0c:	58020400 	.word	0x58020400

08009e10 <HAL_PCD_SetupStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8009e10:	b580      	push	{r7, lr}
 8009e12:	b082      	sub	sp, #8
 8009e14:	af00      	add	r7, sp, #0
 8009e16:	6078      	str	r0, [r7, #4]
  USBD_LL_SetupStage((USBD_HandleTypeDef*)hpcd->pData, (uint8_t *)hpcd->Setup);
 8009e18:	687b      	ldr	r3, [r7, #4]
 8009e1a:	f8d3 2508 	ldr.w	r2, [r3, #1288]	; 0x508
 8009e1e:	687b      	ldr	r3, [r7, #4]
 8009e20:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 8009e24:	4619      	mov	r1, r3
 8009e26:	4610      	mov	r0, r2
 8009e28:	f7fe fadd 	bl	80083e6 <USBD_LL_SetupStage>
}
 8009e2c:	bf00      	nop
 8009e2e:	3708      	adds	r7, #8
 8009e30:	46bd      	mov	sp, r7
 8009e32:	bd80      	pop	{r7, pc}

08009e34 <HAL_PCD_DataOutStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8009e34:	b580      	push	{r7, lr}
 8009e36:	b082      	sub	sp, #8
 8009e38:	af00      	add	r7, sp, #0
 8009e3a:	6078      	str	r0, [r7, #4]
 8009e3c:	460b      	mov	r3, r1
 8009e3e:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataOutStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->OUT_ep[epnum].xfer_buff);
 8009e40:	687b      	ldr	r3, [r7, #4]
 8009e42:	f8d3 0508 	ldr.w	r0, [r3, #1288]	; 0x508
 8009e46:	78fa      	ldrb	r2, [r7, #3]
 8009e48:	6879      	ldr	r1, [r7, #4]
 8009e4a:	4613      	mov	r3, r2
 8009e4c:	00db      	lsls	r3, r3, #3
 8009e4e:	4413      	add	r3, r2
 8009e50:	009b      	lsls	r3, r3, #2
 8009e52:	440b      	add	r3, r1
 8009e54:	f503 7323 	add.w	r3, r3, #652	; 0x28c
 8009e58:	681a      	ldr	r2, [r3, #0]
 8009e5a:	78fb      	ldrb	r3, [r7, #3]
 8009e5c:	4619      	mov	r1, r3
 8009e5e:	f7fe fb17 	bl	8008490 <USBD_LL_DataOutStage>
}
 8009e62:	bf00      	nop
 8009e64:	3708      	adds	r7, #8
 8009e66:	46bd      	mov	sp, r7
 8009e68:	bd80      	pop	{r7, pc}

08009e6a <HAL_PCD_DataInStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8009e6a:	b580      	push	{r7, lr}
 8009e6c:	b082      	sub	sp, #8
 8009e6e:	af00      	add	r7, sp, #0
 8009e70:	6078      	str	r0, [r7, #4]
 8009e72:	460b      	mov	r3, r1
 8009e74:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataInStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->IN_ep[epnum].xfer_buff);
 8009e76:	687b      	ldr	r3, [r7, #4]
 8009e78:	f8d3 0508 	ldr.w	r0, [r3, #1288]	; 0x508
 8009e7c:	78fa      	ldrb	r2, [r7, #3]
 8009e7e:	6879      	ldr	r1, [r7, #4]
 8009e80:	4613      	mov	r3, r2
 8009e82:	00db      	lsls	r3, r3, #3
 8009e84:	4413      	add	r3, r2
 8009e86:	009b      	lsls	r3, r3, #2
 8009e88:	440b      	add	r3, r1
 8009e8a:	334c      	adds	r3, #76	; 0x4c
 8009e8c:	681a      	ldr	r2, [r3, #0]
 8009e8e:	78fb      	ldrb	r3, [r7, #3]
 8009e90:	4619      	mov	r1, r3
 8009e92:	f7fe fbb0 	bl	80085f6 <USBD_LL_DataInStage>
}
 8009e96:	bf00      	nop
 8009e98:	3708      	adds	r7, #8
 8009e9a:	46bd      	mov	sp, r7
 8009e9c:	bd80      	pop	{r7, pc}

08009e9e <HAL_PCD_SOFCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8009e9e:	b580      	push	{r7, lr}
 8009ea0:	b082      	sub	sp, #8
 8009ea2:	af00      	add	r7, sp, #0
 8009ea4:	6078      	str	r0, [r7, #4]
  USBD_LL_SOF((USBD_HandleTypeDef*)hpcd->pData);
 8009ea6:	687b      	ldr	r3, [r7, #4]
 8009ea8:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 8009eac:	4618      	mov	r0, r3
 8009eae:	f7fe fce4 	bl	800887a <USBD_LL_SOF>
}
 8009eb2:	bf00      	nop
 8009eb4:	3708      	adds	r7, #8
 8009eb6:	46bd      	mov	sp, r7
 8009eb8:	bd80      	pop	{r7, pc}

08009eba <HAL_PCD_ResetCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8009eba:	b580      	push	{r7, lr}
 8009ebc:	b084      	sub	sp, #16
 8009ebe:	af00      	add	r7, sp, #0
 8009ec0:	6078      	str	r0, [r7, #4]
  USBD_SpeedTypeDef speed = USBD_SPEED_FULL;
 8009ec2:	2301      	movs	r3, #1
 8009ec4:	73fb      	strb	r3, [r7, #15]

  if ( hpcd->Init.speed == PCD_SPEED_HIGH)
 8009ec6:	687b      	ldr	r3, [r7, #4]
 8009ec8:	68db      	ldr	r3, [r3, #12]
 8009eca:	2b00      	cmp	r3, #0
 8009ecc:	d102      	bne.n	8009ed4 <HAL_PCD_ResetCallback+0x1a>
  {
    speed = USBD_SPEED_HIGH;
 8009ece:	2300      	movs	r3, #0
 8009ed0:	73fb      	strb	r3, [r7, #15]
 8009ed2:	e008      	b.n	8009ee6 <HAL_PCD_ResetCallback+0x2c>
  }
  else if ( hpcd->Init.speed == PCD_SPEED_FULL)
 8009ed4:	687b      	ldr	r3, [r7, #4]
 8009ed6:	68db      	ldr	r3, [r3, #12]
 8009ed8:	2b02      	cmp	r3, #2
 8009eda:	d102      	bne.n	8009ee2 <HAL_PCD_ResetCallback+0x28>
  {
    speed = USBD_SPEED_FULL;
 8009edc:	2301      	movs	r3, #1
 8009ede:	73fb      	strb	r3, [r7, #15]
 8009ee0:	e001      	b.n	8009ee6 <HAL_PCD_ResetCallback+0x2c>
  }
  else
  {
    Error_Handler();
 8009ee2:	f7f6 fc8b 	bl	80007fc <Error_Handler>
  }
    /* Set Speed. */
  USBD_LL_SetSpeed((USBD_HandleTypeDef*)hpcd->pData, speed);
 8009ee6:	687b      	ldr	r3, [r7, #4]
 8009ee8:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 8009eec:	7bfa      	ldrb	r2, [r7, #15]
 8009eee:	4611      	mov	r1, r2
 8009ef0:	4618      	mov	r0, r3
 8009ef2:	f7fe fc84 	bl	80087fe <USBD_LL_SetSpeed>

  /* Reset Device. */
  USBD_LL_Reset((USBD_HandleTypeDef*)hpcd->pData);
 8009ef6:	687b      	ldr	r3, [r7, #4]
 8009ef8:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 8009efc:	4618      	mov	r0, r3
 8009efe:	f7fe fc2c 	bl	800875a <USBD_LL_Reset>
}
 8009f02:	bf00      	nop
 8009f04:	3710      	adds	r7, #16
 8009f06:	46bd      	mov	sp, r7
 8009f08:	bd80      	pop	{r7, pc}
	...

08009f0c <HAL_PCD_SuspendCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8009f0c:	b580      	push	{r7, lr}
 8009f0e:	b082      	sub	sp, #8
 8009f10:	af00      	add	r7, sp, #0
 8009f12:	6078      	str	r0, [r7, #4]
  /* Inform USB library that core enters in suspend Mode. */
  USBD_LL_Suspend((USBD_HandleTypeDef*)hpcd->pData);
 8009f14:	687b      	ldr	r3, [r7, #4]
 8009f16:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 8009f1a:	4618      	mov	r0, r3
 8009f1c:	f7fe fc7f 	bl	800881e <USBD_LL_Suspend>
  __HAL_PCD_GATE_PHYCLOCK(hpcd);
 8009f20:	687b      	ldr	r3, [r7, #4]
 8009f22:	681b      	ldr	r3, [r3, #0]
 8009f24:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8009f28:	681b      	ldr	r3, [r3, #0]
 8009f2a:	687a      	ldr	r2, [r7, #4]
 8009f2c:	6812      	ldr	r2, [r2, #0]
 8009f2e:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 8009f32:	f043 0301 	orr.w	r3, r3, #1
 8009f36:	6013      	str	r3, [r2, #0]
  /* Enter in STOP mode. */
  /* USER CODE BEGIN 2 */
  if (hpcd->Init.low_power_enable)
 8009f38:	687b      	ldr	r3, [r7, #4]
 8009f3a:	6a1b      	ldr	r3, [r3, #32]
 8009f3c:	2b00      	cmp	r3, #0
 8009f3e:	d005      	beq.n	8009f4c <HAL_PCD_SuspendCallback+0x40>
  {
    /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register. */
    SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 8009f40:	4b04      	ldr	r3, [pc, #16]	; (8009f54 <HAL_PCD_SuspendCallback+0x48>)
 8009f42:	691b      	ldr	r3, [r3, #16]
 8009f44:	4a03      	ldr	r2, [pc, #12]	; (8009f54 <HAL_PCD_SuspendCallback+0x48>)
 8009f46:	f043 0306 	orr.w	r3, r3, #6
 8009f4a:	6113      	str	r3, [r2, #16]
  }
  /* USER CODE END 2 */
}
 8009f4c:	bf00      	nop
 8009f4e:	3708      	adds	r7, #8
 8009f50:	46bd      	mov	sp, r7
 8009f52:	bd80      	pop	{r7, pc}
 8009f54:	e000ed00 	.word	0xe000ed00

08009f58 <HAL_PCD_ResumeCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8009f58:	b580      	push	{r7, lr}
 8009f5a:	b082      	sub	sp, #8
 8009f5c:	af00      	add	r7, sp, #0
 8009f5e:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 3 */

  /* USER CODE END 3 */
  USBD_LL_Resume((USBD_HandleTypeDef*)hpcd->pData);
 8009f60:	687b      	ldr	r3, [r7, #4]
 8009f62:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 8009f66:	4618      	mov	r0, r3
 8009f68:	f7fe fc6f 	bl	800884a <USBD_LL_Resume>
}
 8009f6c:	bf00      	nop
 8009f6e:	3708      	adds	r7, #8
 8009f70:	46bd      	mov	sp, r7
 8009f72:	bd80      	pop	{r7, pc}

08009f74 <HAL_PCD_ISOOUTIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8009f74:	b580      	push	{r7, lr}
 8009f76:	b082      	sub	sp, #8
 8009f78:	af00      	add	r7, sp, #0
 8009f7a:	6078      	str	r0, [r7, #4]
 8009f7c:	460b      	mov	r3, r1
 8009f7e:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoOUTIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 8009f80:	687b      	ldr	r3, [r7, #4]
 8009f82:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 8009f86:	78fa      	ldrb	r2, [r7, #3]
 8009f88:	4611      	mov	r1, r2
 8009f8a:	4618      	mov	r0, r3
 8009f8c:	f7fe fcc7 	bl	800891e <USBD_LL_IsoOUTIncomplete>
}
 8009f90:	bf00      	nop
 8009f92:	3708      	adds	r7, #8
 8009f94:	46bd      	mov	sp, r7
 8009f96:	bd80      	pop	{r7, pc}

08009f98 <HAL_PCD_ISOINIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8009f98:	b580      	push	{r7, lr}
 8009f9a:	b082      	sub	sp, #8
 8009f9c:	af00      	add	r7, sp, #0
 8009f9e:	6078      	str	r0, [r7, #4]
 8009fa0:	460b      	mov	r3, r1
 8009fa2:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoINIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 8009fa4:	687b      	ldr	r3, [r7, #4]
 8009fa6:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 8009faa:	78fa      	ldrb	r2, [r7, #3]
 8009fac:	4611      	mov	r1, r2
 8009fae:	4618      	mov	r0, r3
 8009fb0:	f7fe fc83 	bl	80088ba <USBD_LL_IsoINIncomplete>
}
 8009fb4:	bf00      	nop
 8009fb6:	3708      	adds	r7, #8
 8009fb8:	46bd      	mov	sp, r7
 8009fba:	bd80      	pop	{r7, pc}

08009fbc <HAL_PCD_ConnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8009fbc:	b580      	push	{r7, lr}
 8009fbe:	b082      	sub	sp, #8
 8009fc0:	af00      	add	r7, sp, #0
 8009fc2:	6078      	str	r0, [r7, #4]
  USBD_LL_DevConnected((USBD_HandleTypeDef*)hpcd->pData);
 8009fc4:	687b      	ldr	r3, [r7, #4]
 8009fc6:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 8009fca:	4618      	mov	r0, r3
 8009fcc:	f7fe fcd9 	bl	8008982 <USBD_LL_DevConnected>
}
 8009fd0:	bf00      	nop
 8009fd2:	3708      	adds	r7, #8
 8009fd4:	46bd      	mov	sp, r7
 8009fd6:	bd80      	pop	{r7, pc}

08009fd8 <HAL_PCD_DisconnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8009fd8:	b580      	push	{r7, lr}
 8009fda:	b082      	sub	sp, #8
 8009fdc:	af00      	add	r7, sp, #0
 8009fde:	6078      	str	r0, [r7, #4]
  USBD_LL_DevDisconnected((USBD_HandleTypeDef*)hpcd->pData);
 8009fe0:	687b      	ldr	r3, [r7, #4]
 8009fe2:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 8009fe6:	4618      	mov	r0, r3
 8009fe8:	f7fe fcd6 	bl	8008998 <USBD_LL_DevDisconnected>
}
 8009fec:	bf00      	nop
 8009fee:	3708      	adds	r7, #8
 8009ff0:	46bd      	mov	sp, r7
 8009ff2:	bd80      	pop	{r7, pc}

08009ff4 <USBD_LL_Init>:
  * @brief  Initializes the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Init(USBD_HandleTypeDef *pdev)
{
 8009ff4:	b580      	push	{r7, lr}
 8009ff6:	b082      	sub	sp, #8
 8009ff8:	af00      	add	r7, sp, #0
 8009ffa:	6078      	str	r0, [r7, #4]
  /* Init USB Ip. */
  if (pdev->id == DEVICE_HS) {
 8009ffc:	687b      	ldr	r3, [r7, #4]
 8009ffe:	781b      	ldrb	r3, [r3, #0]
 800a000:	2b01      	cmp	r3, #1
 800a002:	d140      	bne.n	800a086 <USBD_LL_Init+0x92>
  /* Link the driver to the stack. */
  hpcd_USB_OTG_HS.pData = pdev;
 800a004:	4a22      	ldr	r2, [pc, #136]	; (800a090 <USBD_LL_Init+0x9c>)
 800a006:	687b      	ldr	r3, [r7, #4]
 800a008:	f8c2 3508 	str.w	r3, [r2, #1288]	; 0x508
  pdev->pData = &hpcd_USB_OTG_HS;
 800a00c:	687b      	ldr	r3, [r7, #4]
 800a00e:	4a20      	ldr	r2, [pc, #128]	; (800a090 <USBD_LL_Init+0x9c>)
 800a010:	f8c3 22c8 	str.w	r2, [r3, #712]	; 0x2c8

  hpcd_USB_OTG_HS.Instance = USB_OTG_HS;
 800a014:	4b1e      	ldr	r3, [pc, #120]	; (800a090 <USBD_LL_Init+0x9c>)
 800a016:	4a1f      	ldr	r2, [pc, #124]	; (800a094 <USBD_LL_Init+0xa0>)
 800a018:	601a      	str	r2, [r3, #0]
  hpcd_USB_OTG_HS.Init.dev_endpoints = 9;
 800a01a:	4b1d      	ldr	r3, [pc, #116]	; (800a090 <USBD_LL_Init+0x9c>)
 800a01c:	2209      	movs	r2, #9
 800a01e:	605a      	str	r2, [r3, #4]
  hpcd_USB_OTG_HS.Init.speed = PCD_SPEED_HIGH;
 800a020:	4b1b      	ldr	r3, [pc, #108]	; (800a090 <USBD_LL_Init+0x9c>)
 800a022:	2200      	movs	r2, #0
 800a024:	60da      	str	r2, [r3, #12]
  hpcd_USB_OTG_HS.Init.dma_enable = DISABLE;
 800a026:	4b1a      	ldr	r3, [pc, #104]	; (800a090 <USBD_LL_Init+0x9c>)
 800a028:	2200      	movs	r2, #0
 800a02a:	611a      	str	r2, [r3, #16]
  hpcd_USB_OTG_HS.Init.phy_itface = USB_OTG_ULPI_PHY;
 800a02c:	4b18      	ldr	r3, [pc, #96]	; (800a090 <USBD_LL_Init+0x9c>)
 800a02e:	2201      	movs	r2, #1
 800a030:	619a      	str	r2, [r3, #24]
  hpcd_USB_OTG_HS.Init.Sof_enable = DISABLE;
 800a032:	4b17      	ldr	r3, [pc, #92]	; (800a090 <USBD_LL_Init+0x9c>)
 800a034:	2200      	movs	r2, #0
 800a036:	61da      	str	r2, [r3, #28]
  hpcd_USB_OTG_HS.Init.low_power_enable = DISABLE;
 800a038:	4b15      	ldr	r3, [pc, #84]	; (800a090 <USBD_LL_Init+0x9c>)
 800a03a:	2200      	movs	r2, #0
 800a03c:	621a      	str	r2, [r3, #32]
  hpcd_USB_OTG_HS.Init.lpm_enable = DISABLE;
 800a03e:	4b14      	ldr	r3, [pc, #80]	; (800a090 <USBD_LL_Init+0x9c>)
 800a040:	2200      	movs	r2, #0
 800a042:	625a      	str	r2, [r3, #36]	; 0x24
  hpcd_USB_OTG_HS.Init.vbus_sensing_enable = DISABLE;
 800a044:	4b12      	ldr	r3, [pc, #72]	; (800a090 <USBD_LL_Init+0x9c>)
 800a046:	2200      	movs	r2, #0
 800a048:	62da      	str	r2, [r3, #44]	; 0x2c
  hpcd_USB_OTG_HS.Init.use_dedicated_ep1 = DISABLE;
 800a04a:	4b11      	ldr	r3, [pc, #68]	; (800a090 <USBD_LL_Init+0x9c>)
 800a04c:	2200      	movs	r2, #0
 800a04e:	631a      	str	r2, [r3, #48]	; 0x30
  hpcd_USB_OTG_HS.Init.use_external_vbus = DISABLE;
 800a050:	4b0f      	ldr	r3, [pc, #60]	; (800a090 <USBD_LL_Init+0x9c>)
 800a052:	2200      	movs	r2, #0
 800a054:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_PCD_Init(&hpcd_USB_OTG_HS) != HAL_OK)
 800a056:	480e      	ldr	r0, [pc, #56]	; (800a090 <USBD_LL_Init+0x9c>)
 800a058:	f7f7 fbdf 	bl	800181a <HAL_PCD_Init>
 800a05c:	4603      	mov	r3, r0
 800a05e:	2b00      	cmp	r3, #0
 800a060:	d001      	beq.n	800a066 <USBD_LL_Init+0x72>
  {
    Error_Handler( );
 800a062:	f7f6 fbcb 	bl	80007fc <Error_Handler>
  HAL_PCD_RegisterDataInStageCallback(&hpcd_USB_OTG_HS, PCD_DataInStageCallback);
  HAL_PCD_RegisterIsoOutIncpltCallback(&hpcd_USB_OTG_HS, PCD_ISOOUTIncompleteCallback);
  HAL_PCD_RegisterIsoInIncpltCallback(&hpcd_USB_OTG_HS, PCD_ISOINIncompleteCallback);
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  /* USER CODE BEGIN TxRx_Configuration */
  HAL_PCDEx_SetRxFiFo(&hpcd_USB_OTG_HS, 0x200);
 800a066:	f44f 7100 	mov.w	r1, #512	; 0x200
 800a06a:	4809      	ldr	r0, [pc, #36]	; (800a090 <USBD_LL_Init+0x9c>)
 800a06c:	f7f8 fe69 	bl	8002d42 <HAL_PCDEx_SetRxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_HS, 0, 0x80);
 800a070:	2280      	movs	r2, #128	; 0x80
 800a072:	2100      	movs	r1, #0
 800a074:	4806      	ldr	r0, [pc, #24]	; (800a090 <USBD_LL_Init+0x9c>)
 800a076:	f7f8 fe1d 	bl	8002cb4 <HAL_PCDEx_SetTxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_HS, 1, 0x174);
 800a07a:	f44f 72ba 	mov.w	r2, #372	; 0x174
 800a07e:	2101      	movs	r1, #1
 800a080:	4803      	ldr	r0, [pc, #12]	; (800a090 <USBD_LL_Init+0x9c>)
 800a082:	f7f8 fe17 	bl	8002cb4 <HAL_PCDEx_SetTxFiFo>
  /* USER CODE END TxRx_Configuration */
  }
  return USBD_OK;
 800a086:	2300      	movs	r3, #0
}
 800a088:	4618      	mov	r0, r3
 800a08a:	3708      	adds	r7, #8
 800a08c:	46bd      	mov	sp, r7
 800a08e:	bd80      	pop	{r7, pc}
 800a090:	240016f4 	.word	0x240016f4
 800a094:	40040000 	.word	0x40040000

0800a098 <USBD_LL_Start>:
  * @brief  Starts the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Start(USBD_HandleTypeDef *pdev)
{
 800a098:	b580      	push	{r7, lr}
 800a09a:	b084      	sub	sp, #16
 800a09c:	af00      	add	r7, sp, #0
 800a09e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800a0a0:	2300      	movs	r3, #0
 800a0a2:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800a0a4:	2300      	movs	r3, #0
 800a0a6:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_Start(pdev->pData);
 800a0a8:	687b      	ldr	r3, [r7, #4]
 800a0aa:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 800a0ae:	4618      	mov	r0, r3
 800a0b0:	f7f7 fcd7 	bl	8001a62 <HAL_PCD_Start>
 800a0b4:	4603      	mov	r3, r0
 800a0b6:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800a0b8:	7bfb      	ldrb	r3, [r7, #15]
 800a0ba:	4618      	mov	r0, r3
 800a0bc:	f000 f942 	bl	800a344 <USBD_Get_USB_Status>
 800a0c0:	4603      	mov	r3, r0
 800a0c2:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800a0c4:	7bbb      	ldrb	r3, [r7, #14]
}
 800a0c6:	4618      	mov	r0, r3
 800a0c8:	3710      	adds	r7, #16
 800a0ca:	46bd      	mov	sp, r7
 800a0cc:	bd80      	pop	{r7, pc}

0800a0ce <USBD_LL_OpenEP>:
  * @param  ep_type: Endpoint type
  * @param  ep_mps: Endpoint max packet size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_OpenEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t ep_type, uint16_t ep_mps)
{
 800a0ce:	b580      	push	{r7, lr}
 800a0d0:	b084      	sub	sp, #16
 800a0d2:	af00      	add	r7, sp, #0
 800a0d4:	6078      	str	r0, [r7, #4]
 800a0d6:	4608      	mov	r0, r1
 800a0d8:	4611      	mov	r1, r2
 800a0da:	461a      	mov	r2, r3
 800a0dc:	4603      	mov	r3, r0
 800a0de:	70fb      	strb	r3, [r7, #3]
 800a0e0:	460b      	mov	r3, r1
 800a0e2:	70bb      	strb	r3, [r7, #2]
 800a0e4:	4613      	mov	r3, r2
 800a0e6:	803b      	strh	r3, [r7, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800a0e8:	2300      	movs	r3, #0
 800a0ea:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800a0ec:	2300      	movs	r3, #0
 800a0ee:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Open(pdev->pData, ep_addr, ep_mps, ep_type);
 800a0f0:	687b      	ldr	r3, [r7, #4]
 800a0f2:	f8d3 02c8 	ldr.w	r0, [r3, #712]	; 0x2c8
 800a0f6:	78bb      	ldrb	r3, [r7, #2]
 800a0f8:	883a      	ldrh	r2, [r7, #0]
 800a0fa:	78f9      	ldrb	r1, [r7, #3]
 800a0fc:	f7f8 f9d5 	bl	80024aa <HAL_PCD_EP_Open>
 800a100:	4603      	mov	r3, r0
 800a102:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800a104:	7bfb      	ldrb	r3, [r7, #15]
 800a106:	4618      	mov	r0, r3
 800a108:	f000 f91c 	bl	800a344 <USBD_Get_USB_Status>
 800a10c:	4603      	mov	r3, r0
 800a10e:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800a110:	7bbb      	ldrb	r3, [r7, #14]
}
 800a112:	4618      	mov	r0, r3
 800a114:	3710      	adds	r7, #16
 800a116:	46bd      	mov	sp, r7
 800a118:	bd80      	pop	{r7, pc}

0800a11a <USBD_LL_CloseEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_CloseEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800a11a:	b580      	push	{r7, lr}
 800a11c:	b084      	sub	sp, #16
 800a11e:	af00      	add	r7, sp, #0
 800a120:	6078      	str	r0, [r7, #4]
 800a122:	460b      	mov	r3, r1
 800a124:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800a126:	2300      	movs	r3, #0
 800a128:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800a12a:	2300      	movs	r3, #0
 800a12c:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Close(pdev->pData, ep_addr);
 800a12e:	687b      	ldr	r3, [r7, #4]
 800a130:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 800a134:	78fa      	ldrb	r2, [r7, #3]
 800a136:	4611      	mov	r1, r2
 800a138:	4618      	mov	r0, r3
 800a13a:	f7f8 fa1e 	bl	800257a <HAL_PCD_EP_Close>
 800a13e:	4603      	mov	r3, r0
 800a140:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800a142:	7bfb      	ldrb	r3, [r7, #15]
 800a144:	4618      	mov	r0, r3
 800a146:	f000 f8fd 	bl	800a344 <USBD_Get_USB_Status>
 800a14a:	4603      	mov	r3, r0
 800a14c:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800a14e:	7bbb      	ldrb	r3, [r7, #14]
}
 800a150:	4618      	mov	r0, r3
 800a152:	3710      	adds	r7, #16
 800a154:	46bd      	mov	sp, r7
 800a156:	bd80      	pop	{r7, pc}

0800a158 <USBD_LL_StallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_StallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800a158:	b580      	push	{r7, lr}
 800a15a:	b084      	sub	sp, #16
 800a15c:	af00      	add	r7, sp, #0
 800a15e:	6078      	str	r0, [r7, #4]
 800a160:	460b      	mov	r3, r1
 800a162:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800a164:	2300      	movs	r3, #0
 800a166:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800a168:	2300      	movs	r3, #0
 800a16a:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_SetStall(pdev->pData, ep_addr);
 800a16c:	687b      	ldr	r3, [r7, #4]
 800a16e:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 800a172:	78fa      	ldrb	r2, [r7, #3]
 800a174:	4611      	mov	r1, r2
 800a176:	4618      	mov	r0, r3
 800a178:	f7f8 faf6 	bl	8002768 <HAL_PCD_EP_SetStall>
 800a17c:	4603      	mov	r3, r0
 800a17e:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800a180:	7bfb      	ldrb	r3, [r7, #15]
 800a182:	4618      	mov	r0, r3
 800a184:	f000 f8de 	bl	800a344 <USBD_Get_USB_Status>
 800a188:	4603      	mov	r3, r0
 800a18a:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800a18c:	7bbb      	ldrb	r3, [r7, #14]
}
 800a18e:	4618      	mov	r0, r3
 800a190:	3710      	adds	r7, #16
 800a192:	46bd      	mov	sp, r7
 800a194:	bd80      	pop	{r7, pc}

0800a196 <USBD_LL_ClearStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_ClearStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800a196:	b580      	push	{r7, lr}
 800a198:	b084      	sub	sp, #16
 800a19a:	af00      	add	r7, sp, #0
 800a19c:	6078      	str	r0, [r7, #4]
 800a19e:	460b      	mov	r3, r1
 800a1a0:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800a1a2:	2300      	movs	r3, #0
 800a1a4:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800a1a6:	2300      	movs	r3, #0
 800a1a8:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_ClrStall(pdev->pData, ep_addr);
 800a1aa:	687b      	ldr	r3, [r7, #4]
 800a1ac:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 800a1b0:	78fa      	ldrb	r2, [r7, #3]
 800a1b2:	4611      	mov	r1, r2
 800a1b4:	4618      	mov	r0, r3
 800a1b6:	f7f8 fb3b 	bl	8002830 <HAL_PCD_EP_ClrStall>
 800a1ba:	4603      	mov	r3, r0
 800a1bc:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800a1be:	7bfb      	ldrb	r3, [r7, #15]
 800a1c0:	4618      	mov	r0, r3
 800a1c2:	f000 f8bf 	bl	800a344 <USBD_Get_USB_Status>
 800a1c6:	4603      	mov	r3, r0
 800a1c8:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800a1ca:	7bbb      	ldrb	r3, [r7, #14]
}
 800a1cc:	4618      	mov	r0, r3
 800a1ce:	3710      	adds	r7, #16
 800a1d0:	46bd      	mov	sp, r7
 800a1d2:	bd80      	pop	{r7, pc}

0800a1d4 <USBD_LL_IsStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Stall (1: Yes, 0: No)
  */
uint8_t USBD_LL_IsStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800a1d4:	b480      	push	{r7}
 800a1d6:	b085      	sub	sp, #20
 800a1d8:	af00      	add	r7, sp, #0
 800a1da:	6078      	str	r0, [r7, #4]
 800a1dc:	460b      	mov	r3, r1
 800a1de:	70fb      	strb	r3, [r7, #3]
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef*) pdev->pData;
 800a1e0:	687b      	ldr	r3, [r7, #4]
 800a1e2:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 800a1e6:	60fb      	str	r3, [r7, #12]

  if((ep_addr & 0x80) == 0x80)
 800a1e8:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800a1ec:	2b00      	cmp	r3, #0
 800a1ee:	da0b      	bge.n	800a208 <USBD_LL_IsStallEP+0x34>
  {
    return hpcd->IN_ep[ep_addr & 0x7F].is_stall;
 800a1f0:	78fb      	ldrb	r3, [r7, #3]
 800a1f2:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800a1f6:	68f9      	ldr	r1, [r7, #12]
 800a1f8:	4613      	mov	r3, r2
 800a1fa:	00db      	lsls	r3, r3, #3
 800a1fc:	4413      	add	r3, r2
 800a1fe:	009b      	lsls	r3, r3, #2
 800a200:	440b      	add	r3, r1
 800a202:	333e      	adds	r3, #62	; 0x3e
 800a204:	781b      	ldrb	r3, [r3, #0]
 800a206:	e00b      	b.n	800a220 <USBD_LL_IsStallEP+0x4c>
  }
  else
  {
    return hpcd->OUT_ep[ep_addr & 0x7F].is_stall;
 800a208:	78fb      	ldrb	r3, [r7, #3]
 800a20a:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800a20e:	68f9      	ldr	r1, [r7, #12]
 800a210:	4613      	mov	r3, r2
 800a212:	00db      	lsls	r3, r3, #3
 800a214:	4413      	add	r3, r2
 800a216:	009b      	lsls	r3, r3, #2
 800a218:	440b      	add	r3, r1
 800a21a:	f203 237e 	addw	r3, r3, #638	; 0x27e
 800a21e:	781b      	ldrb	r3, [r3, #0]
  }
}
 800a220:	4618      	mov	r0, r3
 800a222:	3714      	adds	r7, #20
 800a224:	46bd      	mov	sp, r7
 800a226:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a22a:	4770      	bx	lr

0800a22c <USBD_LL_SetUSBAddress>:
  * @param  pdev: Device handle
  * @param  dev_addr: Device address
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_SetUSBAddress(USBD_HandleTypeDef *pdev, uint8_t dev_addr)
{
 800a22c:	b580      	push	{r7, lr}
 800a22e:	b084      	sub	sp, #16
 800a230:	af00      	add	r7, sp, #0
 800a232:	6078      	str	r0, [r7, #4]
 800a234:	460b      	mov	r3, r1
 800a236:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800a238:	2300      	movs	r3, #0
 800a23a:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800a23c:	2300      	movs	r3, #0
 800a23e:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_SetAddress(pdev->pData, dev_addr);
 800a240:	687b      	ldr	r3, [r7, #4]
 800a242:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 800a246:	78fa      	ldrb	r2, [r7, #3]
 800a248:	4611      	mov	r1, r2
 800a24a:	4618      	mov	r0, r3
 800a24c:	f7f8 f908 	bl	8002460 <HAL_PCD_SetAddress>
 800a250:	4603      	mov	r3, r0
 800a252:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800a254:	7bfb      	ldrb	r3, [r7, #15]
 800a256:	4618      	mov	r0, r3
 800a258:	f000 f874 	bl	800a344 <USBD_Get_USB_Status>
 800a25c:	4603      	mov	r3, r0
 800a25e:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800a260:	7bbb      	ldrb	r3, [r7, #14]
}
 800a262:	4618      	mov	r0, r3
 800a264:	3710      	adds	r7, #16
 800a266:	46bd      	mov	sp, r7
 800a268:	bd80      	pop	{r7, pc}

0800a26a <USBD_LL_Transmit>:
  * @param  pbuf: Pointer to data to be sent
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Transmit(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 800a26a:	b580      	push	{r7, lr}
 800a26c:	b086      	sub	sp, #24
 800a26e:	af00      	add	r7, sp, #0
 800a270:	60f8      	str	r0, [r7, #12]
 800a272:	607a      	str	r2, [r7, #4]
 800a274:	603b      	str	r3, [r7, #0]
 800a276:	460b      	mov	r3, r1
 800a278:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800a27a:	2300      	movs	r3, #0
 800a27c:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800a27e:	2300      	movs	r3, #0
 800a280:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Transmit(pdev->pData, ep_addr, pbuf, size);
 800a282:	68fb      	ldr	r3, [r7, #12]
 800a284:	f8d3 02c8 	ldr.w	r0, [r3, #712]	; 0x2c8
 800a288:	7af9      	ldrb	r1, [r7, #11]
 800a28a:	683b      	ldr	r3, [r7, #0]
 800a28c:	687a      	ldr	r2, [r7, #4]
 800a28e:	f7f8 fa21 	bl	80026d4 <HAL_PCD_EP_Transmit>
 800a292:	4603      	mov	r3, r0
 800a294:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800a296:	7dfb      	ldrb	r3, [r7, #23]
 800a298:	4618      	mov	r0, r3
 800a29a:	f000 f853 	bl	800a344 <USBD_Get_USB_Status>
 800a29e:	4603      	mov	r3, r0
 800a2a0:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 800a2a2:	7dbb      	ldrb	r3, [r7, #22]
}
 800a2a4:	4618      	mov	r0, r3
 800a2a6:	3718      	adds	r7, #24
 800a2a8:	46bd      	mov	sp, r7
 800a2aa:	bd80      	pop	{r7, pc}

0800a2ac <USBD_LL_PrepareReceive>:
  * @param  pbuf: Pointer to data to be received
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_PrepareReceive(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 800a2ac:	b580      	push	{r7, lr}
 800a2ae:	b086      	sub	sp, #24
 800a2b0:	af00      	add	r7, sp, #0
 800a2b2:	60f8      	str	r0, [r7, #12]
 800a2b4:	607a      	str	r2, [r7, #4]
 800a2b6:	603b      	str	r3, [r7, #0]
 800a2b8:	460b      	mov	r3, r1
 800a2ba:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800a2bc:	2300      	movs	r3, #0
 800a2be:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800a2c0:	2300      	movs	r3, #0
 800a2c2:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Receive(pdev->pData, ep_addr, pbuf, size);
 800a2c4:	68fb      	ldr	r3, [r7, #12]
 800a2c6:	f8d3 02c8 	ldr.w	r0, [r3, #712]	; 0x2c8
 800a2ca:	7af9      	ldrb	r1, [r7, #11]
 800a2cc:	683b      	ldr	r3, [r7, #0]
 800a2ce:	687a      	ldr	r2, [r7, #4]
 800a2d0:	f7f8 f99d 	bl	800260e <HAL_PCD_EP_Receive>
 800a2d4:	4603      	mov	r3, r0
 800a2d6:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800a2d8:	7dfb      	ldrb	r3, [r7, #23]
 800a2da:	4618      	mov	r0, r3
 800a2dc:	f000 f832 	bl	800a344 <USBD_Get_USB_Status>
 800a2e0:	4603      	mov	r3, r0
 800a2e2:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 800a2e4:	7dbb      	ldrb	r3, [r7, #22]
}
 800a2e6:	4618      	mov	r0, r3
 800a2e8:	3718      	adds	r7, #24
 800a2ea:	46bd      	mov	sp, r7
 800a2ec:	bd80      	pop	{r7, pc}

0800a2ee <USBD_LL_GetRxDataSize>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Received Data Size
  */
uint32_t USBD_LL_GetRxDataSize(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800a2ee:	b580      	push	{r7, lr}
 800a2f0:	b082      	sub	sp, #8
 800a2f2:	af00      	add	r7, sp, #0
 800a2f4:	6078      	str	r0, [r7, #4]
 800a2f6:	460b      	mov	r3, r1
 800a2f8:	70fb      	strb	r3, [r7, #3]
  return HAL_PCD_EP_GetRxCount((PCD_HandleTypeDef*) pdev->pData, ep_addr);
 800a2fa:	687b      	ldr	r3, [r7, #4]
 800a2fc:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 800a300:	78fa      	ldrb	r2, [r7, #3]
 800a302:	4611      	mov	r1, r2
 800a304:	4618      	mov	r0, r3
 800a306:	f7f8 f9cd 	bl	80026a4 <HAL_PCD_EP_GetRxCount>
 800a30a:	4603      	mov	r3, r0
}
 800a30c:	4618      	mov	r0, r3
 800a30e:	3708      	adds	r7, #8
 800a310:	46bd      	mov	sp, r7
 800a312:	bd80      	pop	{r7, pc}

0800a314 <USBD_static_malloc>:
  * @brief  Static single allocation.
  * @param  size: Size of allocated memory
  * @retval None
  */
void *USBD_static_malloc(uint32_t size)
{
 800a314:	b480      	push	{r7}
 800a316:	b083      	sub	sp, #12
 800a318:	af00      	add	r7, sp, #0
 800a31a:	6078      	str	r0, [r7, #4]
  static uint32_t mem[(sizeof(USBD_CDC_HandleTypeDef)/4)+1];/* On 32-bit boundary */
  return mem;
 800a31c:	4b03      	ldr	r3, [pc, #12]	; (800a32c <USBD_static_malloc+0x18>)
}
 800a31e:	4618      	mov	r0, r3
 800a320:	370c      	adds	r7, #12
 800a322:	46bd      	mov	sp, r7
 800a324:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a328:	4770      	bx	lr
 800a32a:	bf00      	nop
 800a32c:	24001c00 	.word	0x24001c00

0800a330 <USBD_static_free>:
  * @brief  Dummy memory free
  * @param  p: Pointer to allocated  memory address
  * @retval None
  */
void USBD_static_free(void *p)
{
 800a330:	b480      	push	{r7}
 800a332:	b083      	sub	sp, #12
 800a334:	af00      	add	r7, sp, #0
 800a336:	6078      	str	r0, [r7, #4]

}
 800a338:	bf00      	nop
 800a33a:	370c      	adds	r7, #12
 800a33c:	46bd      	mov	sp, r7
 800a33e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a342:	4770      	bx	lr

0800a344 <USBD_Get_USB_Status>:
  * @brief  Returns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBD_StatusTypeDef USBD_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 800a344:	b480      	push	{r7}
 800a346:	b085      	sub	sp, #20
 800a348:	af00      	add	r7, sp, #0
 800a34a:	4603      	mov	r3, r0
 800a34c:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800a34e:	2300      	movs	r3, #0
 800a350:	73fb      	strb	r3, [r7, #15]

  switch (hal_status)
 800a352:	79fb      	ldrb	r3, [r7, #7]
 800a354:	2b03      	cmp	r3, #3
 800a356:	d817      	bhi.n	800a388 <USBD_Get_USB_Status+0x44>
 800a358:	a201      	add	r2, pc, #4	; (adr r2, 800a360 <USBD_Get_USB_Status+0x1c>)
 800a35a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a35e:	bf00      	nop
 800a360:	0800a371 	.word	0x0800a371
 800a364:	0800a377 	.word	0x0800a377
 800a368:	0800a37d 	.word	0x0800a37d
 800a36c:	0800a383 	.word	0x0800a383
  {
    case HAL_OK :
      usb_status = USBD_OK;
 800a370:	2300      	movs	r3, #0
 800a372:	73fb      	strb	r3, [r7, #15]
    break;
 800a374:	e00b      	b.n	800a38e <USBD_Get_USB_Status+0x4a>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 800a376:	2303      	movs	r3, #3
 800a378:	73fb      	strb	r3, [r7, #15]
    break;
 800a37a:	e008      	b.n	800a38e <USBD_Get_USB_Status+0x4a>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 800a37c:	2301      	movs	r3, #1
 800a37e:	73fb      	strb	r3, [r7, #15]
    break;
 800a380:	e005      	b.n	800a38e <USBD_Get_USB_Status+0x4a>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 800a382:	2303      	movs	r3, #3
 800a384:	73fb      	strb	r3, [r7, #15]
    break;
 800a386:	e002      	b.n	800a38e <USBD_Get_USB_Status+0x4a>
    default :
      usb_status = USBD_FAIL;
 800a388:	2303      	movs	r3, #3
 800a38a:	73fb      	strb	r3, [r7, #15]
    break;
 800a38c:	bf00      	nop
  }
  return usb_status;
 800a38e:	7bfb      	ldrb	r3, [r7, #15]
}
 800a390:	4618      	mov	r0, r3
 800a392:	3714      	adds	r7, #20
 800a394:	46bd      	mov	sp, r7
 800a396:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a39a:	4770      	bx	lr

0800a39c <__errno>:
 800a39c:	4b01      	ldr	r3, [pc, #4]	; (800a3a4 <__errno+0x8>)
 800a39e:	6818      	ldr	r0, [r3, #0]
 800a3a0:	4770      	bx	lr
 800a3a2:	bf00      	nop
 800a3a4:	24000100 	.word	0x24000100

0800a3a8 <__libc_init_array>:
 800a3a8:	b570      	push	{r4, r5, r6, lr}
 800a3aa:	4d0d      	ldr	r5, [pc, #52]	; (800a3e0 <__libc_init_array+0x38>)
 800a3ac:	4c0d      	ldr	r4, [pc, #52]	; (800a3e4 <__libc_init_array+0x3c>)
 800a3ae:	1b64      	subs	r4, r4, r5
 800a3b0:	10a4      	asrs	r4, r4, #2
 800a3b2:	2600      	movs	r6, #0
 800a3b4:	42a6      	cmp	r6, r4
 800a3b6:	d109      	bne.n	800a3cc <__libc_init_array+0x24>
 800a3b8:	4d0b      	ldr	r5, [pc, #44]	; (800a3e8 <__libc_init_array+0x40>)
 800a3ba:	4c0c      	ldr	r4, [pc, #48]	; (800a3ec <__libc_init_array+0x44>)
 800a3bc:	f000 fc8e 	bl	800acdc <_init>
 800a3c0:	1b64      	subs	r4, r4, r5
 800a3c2:	10a4      	asrs	r4, r4, #2
 800a3c4:	2600      	movs	r6, #0
 800a3c6:	42a6      	cmp	r6, r4
 800a3c8:	d105      	bne.n	800a3d6 <__libc_init_array+0x2e>
 800a3ca:	bd70      	pop	{r4, r5, r6, pc}
 800a3cc:	f855 3b04 	ldr.w	r3, [r5], #4
 800a3d0:	4798      	blx	r3
 800a3d2:	3601      	adds	r6, #1
 800a3d4:	e7ee      	b.n	800a3b4 <__libc_init_array+0xc>
 800a3d6:	f855 3b04 	ldr.w	r3, [r5], #4
 800a3da:	4798      	blx	r3
 800a3dc:	3601      	adds	r6, #1
 800a3de:	e7f2      	b.n	800a3c6 <__libc_init_array+0x1e>
 800a3e0:	0800adac 	.word	0x0800adac
 800a3e4:	0800adac 	.word	0x0800adac
 800a3e8:	0800adac 	.word	0x0800adac
 800a3ec:	0800adb0 	.word	0x0800adb0

0800a3f0 <memset>:
 800a3f0:	4402      	add	r2, r0
 800a3f2:	4603      	mov	r3, r0
 800a3f4:	4293      	cmp	r3, r2
 800a3f6:	d100      	bne.n	800a3fa <memset+0xa>
 800a3f8:	4770      	bx	lr
 800a3fa:	f803 1b01 	strb.w	r1, [r3], #1
 800a3fe:	e7f9      	b.n	800a3f4 <memset+0x4>

0800a400 <siprintf>:
 800a400:	b40e      	push	{r1, r2, r3}
 800a402:	b500      	push	{lr}
 800a404:	b09c      	sub	sp, #112	; 0x70
 800a406:	ab1d      	add	r3, sp, #116	; 0x74
 800a408:	9002      	str	r0, [sp, #8]
 800a40a:	9006      	str	r0, [sp, #24]
 800a40c:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 800a410:	4809      	ldr	r0, [pc, #36]	; (800a438 <siprintf+0x38>)
 800a412:	9107      	str	r1, [sp, #28]
 800a414:	9104      	str	r1, [sp, #16]
 800a416:	4909      	ldr	r1, [pc, #36]	; (800a43c <siprintf+0x3c>)
 800a418:	f853 2b04 	ldr.w	r2, [r3], #4
 800a41c:	9105      	str	r1, [sp, #20]
 800a41e:	6800      	ldr	r0, [r0, #0]
 800a420:	9301      	str	r3, [sp, #4]
 800a422:	a902      	add	r1, sp, #8
 800a424:	f000 f868 	bl	800a4f8 <_svfiprintf_r>
 800a428:	9b02      	ldr	r3, [sp, #8]
 800a42a:	2200      	movs	r2, #0
 800a42c:	701a      	strb	r2, [r3, #0]
 800a42e:	b01c      	add	sp, #112	; 0x70
 800a430:	f85d eb04 	ldr.w	lr, [sp], #4
 800a434:	b003      	add	sp, #12
 800a436:	4770      	bx	lr
 800a438:	24000100 	.word	0x24000100
 800a43c:	ffff0208 	.word	0xffff0208

0800a440 <__ssputs_r>:
 800a440:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800a444:	688e      	ldr	r6, [r1, #8]
 800a446:	429e      	cmp	r6, r3
 800a448:	4682      	mov	sl, r0
 800a44a:	460c      	mov	r4, r1
 800a44c:	4690      	mov	r8, r2
 800a44e:	461f      	mov	r7, r3
 800a450:	d838      	bhi.n	800a4c4 <__ssputs_r+0x84>
 800a452:	898a      	ldrh	r2, [r1, #12]
 800a454:	f412 6f90 	tst.w	r2, #1152	; 0x480
 800a458:	d032      	beq.n	800a4c0 <__ssputs_r+0x80>
 800a45a:	6825      	ldr	r5, [r4, #0]
 800a45c:	6909      	ldr	r1, [r1, #16]
 800a45e:	eba5 0901 	sub.w	r9, r5, r1
 800a462:	6965      	ldr	r5, [r4, #20]
 800a464:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800a468:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 800a46c:	3301      	adds	r3, #1
 800a46e:	444b      	add	r3, r9
 800a470:	106d      	asrs	r5, r5, #1
 800a472:	429d      	cmp	r5, r3
 800a474:	bf38      	it	cc
 800a476:	461d      	movcc	r5, r3
 800a478:	0553      	lsls	r3, r2, #21
 800a47a:	d531      	bpl.n	800a4e0 <__ssputs_r+0xa0>
 800a47c:	4629      	mov	r1, r5
 800a47e:	f000 fb63 	bl	800ab48 <_malloc_r>
 800a482:	4606      	mov	r6, r0
 800a484:	b950      	cbnz	r0, 800a49c <__ssputs_r+0x5c>
 800a486:	230c      	movs	r3, #12
 800a488:	f8ca 3000 	str.w	r3, [sl]
 800a48c:	89a3      	ldrh	r3, [r4, #12]
 800a48e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800a492:	81a3      	strh	r3, [r4, #12]
 800a494:	f04f 30ff 	mov.w	r0, #4294967295
 800a498:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800a49c:	6921      	ldr	r1, [r4, #16]
 800a49e:	464a      	mov	r2, r9
 800a4a0:	f000 fabe 	bl	800aa20 <memcpy>
 800a4a4:	89a3      	ldrh	r3, [r4, #12]
 800a4a6:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 800a4aa:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800a4ae:	81a3      	strh	r3, [r4, #12]
 800a4b0:	6126      	str	r6, [r4, #16]
 800a4b2:	6165      	str	r5, [r4, #20]
 800a4b4:	444e      	add	r6, r9
 800a4b6:	eba5 0509 	sub.w	r5, r5, r9
 800a4ba:	6026      	str	r6, [r4, #0]
 800a4bc:	60a5      	str	r5, [r4, #8]
 800a4be:	463e      	mov	r6, r7
 800a4c0:	42be      	cmp	r6, r7
 800a4c2:	d900      	bls.n	800a4c6 <__ssputs_r+0x86>
 800a4c4:	463e      	mov	r6, r7
 800a4c6:	6820      	ldr	r0, [r4, #0]
 800a4c8:	4632      	mov	r2, r6
 800a4ca:	4641      	mov	r1, r8
 800a4cc:	f000 fab6 	bl	800aa3c <memmove>
 800a4d0:	68a3      	ldr	r3, [r4, #8]
 800a4d2:	1b9b      	subs	r3, r3, r6
 800a4d4:	60a3      	str	r3, [r4, #8]
 800a4d6:	6823      	ldr	r3, [r4, #0]
 800a4d8:	4433      	add	r3, r6
 800a4da:	6023      	str	r3, [r4, #0]
 800a4dc:	2000      	movs	r0, #0
 800a4de:	e7db      	b.n	800a498 <__ssputs_r+0x58>
 800a4e0:	462a      	mov	r2, r5
 800a4e2:	f000 fba5 	bl	800ac30 <_realloc_r>
 800a4e6:	4606      	mov	r6, r0
 800a4e8:	2800      	cmp	r0, #0
 800a4ea:	d1e1      	bne.n	800a4b0 <__ssputs_r+0x70>
 800a4ec:	6921      	ldr	r1, [r4, #16]
 800a4ee:	4650      	mov	r0, sl
 800a4f0:	f000 fabe 	bl	800aa70 <_free_r>
 800a4f4:	e7c7      	b.n	800a486 <__ssputs_r+0x46>
	...

0800a4f8 <_svfiprintf_r>:
 800a4f8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a4fc:	4698      	mov	r8, r3
 800a4fe:	898b      	ldrh	r3, [r1, #12]
 800a500:	061b      	lsls	r3, r3, #24
 800a502:	b09d      	sub	sp, #116	; 0x74
 800a504:	4607      	mov	r7, r0
 800a506:	460d      	mov	r5, r1
 800a508:	4614      	mov	r4, r2
 800a50a:	d50e      	bpl.n	800a52a <_svfiprintf_r+0x32>
 800a50c:	690b      	ldr	r3, [r1, #16]
 800a50e:	b963      	cbnz	r3, 800a52a <_svfiprintf_r+0x32>
 800a510:	2140      	movs	r1, #64	; 0x40
 800a512:	f000 fb19 	bl	800ab48 <_malloc_r>
 800a516:	6028      	str	r0, [r5, #0]
 800a518:	6128      	str	r0, [r5, #16]
 800a51a:	b920      	cbnz	r0, 800a526 <_svfiprintf_r+0x2e>
 800a51c:	230c      	movs	r3, #12
 800a51e:	603b      	str	r3, [r7, #0]
 800a520:	f04f 30ff 	mov.w	r0, #4294967295
 800a524:	e0d1      	b.n	800a6ca <_svfiprintf_r+0x1d2>
 800a526:	2340      	movs	r3, #64	; 0x40
 800a528:	616b      	str	r3, [r5, #20]
 800a52a:	2300      	movs	r3, #0
 800a52c:	9309      	str	r3, [sp, #36]	; 0x24
 800a52e:	2320      	movs	r3, #32
 800a530:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800a534:	f8cd 800c 	str.w	r8, [sp, #12]
 800a538:	2330      	movs	r3, #48	; 0x30
 800a53a:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 800a6e4 <_svfiprintf_r+0x1ec>
 800a53e:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800a542:	f04f 0901 	mov.w	r9, #1
 800a546:	4623      	mov	r3, r4
 800a548:	469a      	mov	sl, r3
 800a54a:	f813 2b01 	ldrb.w	r2, [r3], #1
 800a54e:	b10a      	cbz	r2, 800a554 <_svfiprintf_r+0x5c>
 800a550:	2a25      	cmp	r2, #37	; 0x25
 800a552:	d1f9      	bne.n	800a548 <_svfiprintf_r+0x50>
 800a554:	ebba 0b04 	subs.w	fp, sl, r4
 800a558:	d00b      	beq.n	800a572 <_svfiprintf_r+0x7a>
 800a55a:	465b      	mov	r3, fp
 800a55c:	4622      	mov	r2, r4
 800a55e:	4629      	mov	r1, r5
 800a560:	4638      	mov	r0, r7
 800a562:	f7ff ff6d 	bl	800a440 <__ssputs_r>
 800a566:	3001      	adds	r0, #1
 800a568:	f000 80aa 	beq.w	800a6c0 <_svfiprintf_r+0x1c8>
 800a56c:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800a56e:	445a      	add	r2, fp
 800a570:	9209      	str	r2, [sp, #36]	; 0x24
 800a572:	f89a 3000 	ldrb.w	r3, [sl]
 800a576:	2b00      	cmp	r3, #0
 800a578:	f000 80a2 	beq.w	800a6c0 <_svfiprintf_r+0x1c8>
 800a57c:	2300      	movs	r3, #0
 800a57e:	f04f 32ff 	mov.w	r2, #4294967295
 800a582:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800a586:	f10a 0a01 	add.w	sl, sl, #1
 800a58a:	9304      	str	r3, [sp, #16]
 800a58c:	9307      	str	r3, [sp, #28]
 800a58e:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800a592:	931a      	str	r3, [sp, #104]	; 0x68
 800a594:	4654      	mov	r4, sl
 800a596:	2205      	movs	r2, #5
 800a598:	f814 1b01 	ldrb.w	r1, [r4], #1
 800a59c:	4851      	ldr	r0, [pc, #324]	; (800a6e4 <_svfiprintf_r+0x1ec>)
 800a59e:	f7f5 fea7 	bl	80002f0 <memchr>
 800a5a2:	9a04      	ldr	r2, [sp, #16]
 800a5a4:	b9d8      	cbnz	r0, 800a5de <_svfiprintf_r+0xe6>
 800a5a6:	06d0      	lsls	r0, r2, #27
 800a5a8:	bf44      	itt	mi
 800a5aa:	2320      	movmi	r3, #32
 800a5ac:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800a5b0:	0711      	lsls	r1, r2, #28
 800a5b2:	bf44      	itt	mi
 800a5b4:	232b      	movmi	r3, #43	; 0x2b
 800a5b6:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800a5ba:	f89a 3000 	ldrb.w	r3, [sl]
 800a5be:	2b2a      	cmp	r3, #42	; 0x2a
 800a5c0:	d015      	beq.n	800a5ee <_svfiprintf_r+0xf6>
 800a5c2:	9a07      	ldr	r2, [sp, #28]
 800a5c4:	4654      	mov	r4, sl
 800a5c6:	2000      	movs	r0, #0
 800a5c8:	f04f 0c0a 	mov.w	ip, #10
 800a5cc:	4621      	mov	r1, r4
 800a5ce:	f811 3b01 	ldrb.w	r3, [r1], #1
 800a5d2:	3b30      	subs	r3, #48	; 0x30
 800a5d4:	2b09      	cmp	r3, #9
 800a5d6:	d94e      	bls.n	800a676 <_svfiprintf_r+0x17e>
 800a5d8:	b1b0      	cbz	r0, 800a608 <_svfiprintf_r+0x110>
 800a5da:	9207      	str	r2, [sp, #28]
 800a5dc:	e014      	b.n	800a608 <_svfiprintf_r+0x110>
 800a5de:	eba0 0308 	sub.w	r3, r0, r8
 800a5e2:	fa09 f303 	lsl.w	r3, r9, r3
 800a5e6:	4313      	orrs	r3, r2
 800a5e8:	9304      	str	r3, [sp, #16]
 800a5ea:	46a2      	mov	sl, r4
 800a5ec:	e7d2      	b.n	800a594 <_svfiprintf_r+0x9c>
 800a5ee:	9b03      	ldr	r3, [sp, #12]
 800a5f0:	1d19      	adds	r1, r3, #4
 800a5f2:	681b      	ldr	r3, [r3, #0]
 800a5f4:	9103      	str	r1, [sp, #12]
 800a5f6:	2b00      	cmp	r3, #0
 800a5f8:	bfbb      	ittet	lt
 800a5fa:	425b      	neglt	r3, r3
 800a5fc:	f042 0202 	orrlt.w	r2, r2, #2
 800a600:	9307      	strge	r3, [sp, #28]
 800a602:	9307      	strlt	r3, [sp, #28]
 800a604:	bfb8      	it	lt
 800a606:	9204      	strlt	r2, [sp, #16]
 800a608:	7823      	ldrb	r3, [r4, #0]
 800a60a:	2b2e      	cmp	r3, #46	; 0x2e
 800a60c:	d10c      	bne.n	800a628 <_svfiprintf_r+0x130>
 800a60e:	7863      	ldrb	r3, [r4, #1]
 800a610:	2b2a      	cmp	r3, #42	; 0x2a
 800a612:	d135      	bne.n	800a680 <_svfiprintf_r+0x188>
 800a614:	9b03      	ldr	r3, [sp, #12]
 800a616:	1d1a      	adds	r2, r3, #4
 800a618:	681b      	ldr	r3, [r3, #0]
 800a61a:	9203      	str	r2, [sp, #12]
 800a61c:	2b00      	cmp	r3, #0
 800a61e:	bfb8      	it	lt
 800a620:	f04f 33ff 	movlt.w	r3, #4294967295
 800a624:	3402      	adds	r4, #2
 800a626:	9305      	str	r3, [sp, #20]
 800a628:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 800a6f4 <_svfiprintf_r+0x1fc>
 800a62c:	7821      	ldrb	r1, [r4, #0]
 800a62e:	2203      	movs	r2, #3
 800a630:	4650      	mov	r0, sl
 800a632:	f7f5 fe5d 	bl	80002f0 <memchr>
 800a636:	b140      	cbz	r0, 800a64a <_svfiprintf_r+0x152>
 800a638:	2340      	movs	r3, #64	; 0x40
 800a63a:	eba0 000a 	sub.w	r0, r0, sl
 800a63e:	fa03 f000 	lsl.w	r0, r3, r0
 800a642:	9b04      	ldr	r3, [sp, #16]
 800a644:	4303      	orrs	r3, r0
 800a646:	3401      	adds	r4, #1
 800a648:	9304      	str	r3, [sp, #16]
 800a64a:	f814 1b01 	ldrb.w	r1, [r4], #1
 800a64e:	4826      	ldr	r0, [pc, #152]	; (800a6e8 <_svfiprintf_r+0x1f0>)
 800a650:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800a654:	2206      	movs	r2, #6
 800a656:	f7f5 fe4b 	bl	80002f0 <memchr>
 800a65a:	2800      	cmp	r0, #0
 800a65c:	d038      	beq.n	800a6d0 <_svfiprintf_r+0x1d8>
 800a65e:	4b23      	ldr	r3, [pc, #140]	; (800a6ec <_svfiprintf_r+0x1f4>)
 800a660:	bb1b      	cbnz	r3, 800a6aa <_svfiprintf_r+0x1b2>
 800a662:	9b03      	ldr	r3, [sp, #12]
 800a664:	3307      	adds	r3, #7
 800a666:	f023 0307 	bic.w	r3, r3, #7
 800a66a:	3308      	adds	r3, #8
 800a66c:	9303      	str	r3, [sp, #12]
 800a66e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800a670:	4433      	add	r3, r6
 800a672:	9309      	str	r3, [sp, #36]	; 0x24
 800a674:	e767      	b.n	800a546 <_svfiprintf_r+0x4e>
 800a676:	fb0c 3202 	mla	r2, ip, r2, r3
 800a67a:	460c      	mov	r4, r1
 800a67c:	2001      	movs	r0, #1
 800a67e:	e7a5      	b.n	800a5cc <_svfiprintf_r+0xd4>
 800a680:	2300      	movs	r3, #0
 800a682:	3401      	adds	r4, #1
 800a684:	9305      	str	r3, [sp, #20]
 800a686:	4619      	mov	r1, r3
 800a688:	f04f 0c0a 	mov.w	ip, #10
 800a68c:	4620      	mov	r0, r4
 800a68e:	f810 2b01 	ldrb.w	r2, [r0], #1
 800a692:	3a30      	subs	r2, #48	; 0x30
 800a694:	2a09      	cmp	r2, #9
 800a696:	d903      	bls.n	800a6a0 <_svfiprintf_r+0x1a8>
 800a698:	2b00      	cmp	r3, #0
 800a69a:	d0c5      	beq.n	800a628 <_svfiprintf_r+0x130>
 800a69c:	9105      	str	r1, [sp, #20]
 800a69e:	e7c3      	b.n	800a628 <_svfiprintf_r+0x130>
 800a6a0:	fb0c 2101 	mla	r1, ip, r1, r2
 800a6a4:	4604      	mov	r4, r0
 800a6a6:	2301      	movs	r3, #1
 800a6a8:	e7f0      	b.n	800a68c <_svfiprintf_r+0x194>
 800a6aa:	ab03      	add	r3, sp, #12
 800a6ac:	9300      	str	r3, [sp, #0]
 800a6ae:	462a      	mov	r2, r5
 800a6b0:	4b0f      	ldr	r3, [pc, #60]	; (800a6f0 <_svfiprintf_r+0x1f8>)
 800a6b2:	a904      	add	r1, sp, #16
 800a6b4:	4638      	mov	r0, r7
 800a6b6:	f3af 8000 	nop.w
 800a6ba:	1c42      	adds	r2, r0, #1
 800a6bc:	4606      	mov	r6, r0
 800a6be:	d1d6      	bne.n	800a66e <_svfiprintf_r+0x176>
 800a6c0:	89ab      	ldrh	r3, [r5, #12]
 800a6c2:	065b      	lsls	r3, r3, #25
 800a6c4:	f53f af2c 	bmi.w	800a520 <_svfiprintf_r+0x28>
 800a6c8:	9809      	ldr	r0, [sp, #36]	; 0x24
 800a6ca:	b01d      	add	sp, #116	; 0x74
 800a6cc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a6d0:	ab03      	add	r3, sp, #12
 800a6d2:	9300      	str	r3, [sp, #0]
 800a6d4:	462a      	mov	r2, r5
 800a6d6:	4b06      	ldr	r3, [pc, #24]	; (800a6f0 <_svfiprintf_r+0x1f8>)
 800a6d8:	a904      	add	r1, sp, #16
 800a6da:	4638      	mov	r0, r7
 800a6dc:	f000 f87a 	bl	800a7d4 <_printf_i>
 800a6e0:	e7eb      	b.n	800a6ba <_svfiprintf_r+0x1c2>
 800a6e2:	bf00      	nop
 800a6e4:	0800ad78 	.word	0x0800ad78
 800a6e8:	0800ad82 	.word	0x0800ad82
 800a6ec:	00000000 	.word	0x00000000
 800a6f0:	0800a441 	.word	0x0800a441
 800a6f4:	0800ad7e 	.word	0x0800ad7e

0800a6f8 <_printf_common>:
 800a6f8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800a6fc:	4616      	mov	r6, r2
 800a6fe:	4699      	mov	r9, r3
 800a700:	688a      	ldr	r2, [r1, #8]
 800a702:	690b      	ldr	r3, [r1, #16]
 800a704:	f8dd 8020 	ldr.w	r8, [sp, #32]
 800a708:	4293      	cmp	r3, r2
 800a70a:	bfb8      	it	lt
 800a70c:	4613      	movlt	r3, r2
 800a70e:	6033      	str	r3, [r6, #0]
 800a710:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 800a714:	4607      	mov	r7, r0
 800a716:	460c      	mov	r4, r1
 800a718:	b10a      	cbz	r2, 800a71e <_printf_common+0x26>
 800a71a:	3301      	adds	r3, #1
 800a71c:	6033      	str	r3, [r6, #0]
 800a71e:	6823      	ldr	r3, [r4, #0]
 800a720:	0699      	lsls	r1, r3, #26
 800a722:	bf42      	ittt	mi
 800a724:	6833      	ldrmi	r3, [r6, #0]
 800a726:	3302      	addmi	r3, #2
 800a728:	6033      	strmi	r3, [r6, #0]
 800a72a:	6825      	ldr	r5, [r4, #0]
 800a72c:	f015 0506 	ands.w	r5, r5, #6
 800a730:	d106      	bne.n	800a740 <_printf_common+0x48>
 800a732:	f104 0a19 	add.w	sl, r4, #25
 800a736:	68e3      	ldr	r3, [r4, #12]
 800a738:	6832      	ldr	r2, [r6, #0]
 800a73a:	1a9b      	subs	r3, r3, r2
 800a73c:	42ab      	cmp	r3, r5
 800a73e:	dc26      	bgt.n	800a78e <_printf_common+0x96>
 800a740:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 800a744:	1e13      	subs	r3, r2, #0
 800a746:	6822      	ldr	r2, [r4, #0]
 800a748:	bf18      	it	ne
 800a74a:	2301      	movne	r3, #1
 800a74c:	0692      	lsls	r2, r2, #26
 800a74e:	d42b      	bmi.n	800a7a8 <_printf_common+0xb0>
 800a750:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800a754:	4649      	mov	r1, r9
 800a756:	4638      	mov	r0, r7
 800a758:	47c0      	blx	r8
 800a75a:	3001      	adds	r0, #1
 800a75c:	d01e      	beq.n	800a79c <_printf_common+0xa4>
 800a75e:	6823      	ldr	r3, [r4, #0]
 800a760:	68e5      	ldr	r5, [r4, #12]
 800a762:	6832      	ldr	r2, [r6, #0]
 800a764:	f003 0306 	and.w	r3, r3, #6
 800a768:	2b04      	cmp	r3, #4
 800a76a:	bf08      	it	eq
 800a76c:	1aad      	subeq	r5, r5, r2
 800a76e:	68a3      	ldr	r3, [r4, #8]
 800a770:	6922      	ldr	r2, [r4, #16]
 800a772:	bf0c      	ite	eq
 800a774:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800a778:	2500      	movne	r5, #0
 800a77a:	4293      	cmp	r3, r2
 800a77c:	bfc4      	itt	gt
 800a77e:	1a9b      	subgt	r3, r3, r2
 800a780:	18ed      	addgt	r5, r5, r3
 800a782:	2600      	movs	r6, #0
 800a784:	341a      	adds	r4, #26
 800a786:	42b5      	cmp	r5, r6
 800a788:	d11a      	bne.n	800a7c0 <_printf_common+0xc8>
 800a78a:	2000      	movs	r0, #0
 800a78c:	e008      	b.n	800a7a0 <_printf_common+0xa8>
 800a78e:	2301      	movs	r3, #1
 800a790:	4652      	mov	r2, sl
 800a792:	4649      	mov	r1, r9
 800a794:	4638      	mov	r0, r7
 800a796:	47c0      	blx	r8
 800a798:	3001      	adds	r0, #1
 800a79a:	d103      	bne.n	800a7a4 <_printf_common+0xac>
 800a79c:	f04f 30ff 	mov.w	r0, #4294967295
 800a7a0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800a7a4:	3501      	adds	r5, #1
 800a7a6:	e7c6      	b.n	800a736 <_printf_common+0x3e>
 800a7a8:	18e1      	adds	r1, r4, r3
 800a7aa:	1c5a      	adds	r2, r3, #1
 800a7ac:	2030      	movs	r0, #48	; 0x30
 800a7ae:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 800a7b2:	4422      	add	r2, r4
 800a7b4:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 800a7b8:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 800a7bc:	3302      	adds	r3, #2
 800a7be:	e7c7      	b.n	800a750 <_printf_common+0x58>
 800a7c0:	2301      	movs	r3, #1
 800a7c2:	4622      	mov	r2, r4
 800a7c4:	4649      	mov	r1, r9
 800a7c6:	4638      	mov	r0, r7
 800a7c8:	47c0      	blx	r8
 800a7ca:	3001      	adds	r0, #1
 800a7cc:	d0e6      	beq.n	800a79c <_printf_common+0xa4>
 800a7ce:	3601      	adds	r6, #1
 800a7d0:	e7d9      	b.n	800a786 <_printf_common+0x8e>
	...

0800a7d4 <_printf_i>:
 800a7d4:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800a7d8:	7e0f      	ldrb	r7, [r1, #24]
 800a7da:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 800a7dc:	2f78      	cmp	r7, #120	; 0x78
 800a7de:	4691      	mov	r9, r2
 800a7e0:	4680      	mov	r8, r0
 800a7e2:	460c      	mov	r4, r1
 800a7e4:	469a      	mov	sl, r3
 800a7e6:	f101 0243 	add.w	r2, r1, #67	; 0x43
 800a7ea:	d807      	bhi.n	800a7fc <_printf_i+0x28>
 800a7ec:	2f62      	cmp	r7, #98	; 0x62
 800a7ee:	d80a      	bhi.n	800a806 <_printf_i+0x32>
 800a7f0:	2f00      	cmp	r7, #0
 800a7f2:	f000 80d8 	beq.w	800a9a6 <_printf_i+0x1d2>
 800a7f6:	2f58      	cmp	r7, #88	; 0x58
 800a7f8:	f000 80a3 	beq.w	800a942 <_printf_i+0x16e>
 800a7fc:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800a800:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 800a804:	e03a      	b.n	800a87c <_printf_i+0xa8>
 800a806:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 800a80a:	2b15      	cmp	r3, #21
 800a80c:	d8f6      	bhi.n	800a7fc <_printf_i+0x28>
 800a80e:	a101      	add	r1, pc, #4	; (adr r1, 800a814 <_printf_i+0x40>)
 800a810:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 800a814:	0800a86d 	.word	0x0800a86d
 800a818:	0800a881 	.word	0x0800a881
 800a81c:	0800a7fd 	.word	0x0800a7fd
 800a820:	0800a7fd 	.word	0x0800a7fd
 800a824:	0800a7fd 	.word	0x0800a7fd
 800a828:	0800a7fd 	.word	0x0800a7fd
 800a82c:	0800a881 	.word	0x0800a881
 800a830:	0800a7fd 	.word	0x0800a7fd
 800a834:	0800a7fd 	.word	0x0800a7fd
 800a838:	0800a7fd 	.word	0x0800a7fd
 800a83c:	0800a7fd 	.word	0x0800a7fd
 800a840:	0800a98d 	.word	0x0800a98d
 800a844:	0800a8b1 	.word	0x0800a8b1
 800a848:	0800a96f 	.word	0x0800a96f
 800a84c:	0800a7fd 	.word	0x0800a7fd
 800a850:	0800a7fd 	.word	0x0800a7fd
 800a854:	0800a9af 	.word	0x0800a9af
 800a858:	0800a7fd 	.word	0x0800a7fd
 800a85c:	0800a8b1 	.word	0x0800a8b1
 800a860:	0800a7fd 	.word	0x0800a7fd
 800a864:	0800a7fd 	.word	0x0800a7fd
 800a868:	0800a977 	.word	0x0800a977
 800a86c:	682b      	ldr	r3, [r5, #0]
 800a86e:	1d1a      	adds	r2, r3, #4
 800a870:	681b      	ldr	r3, [r3, #0]
 800a872:	602a      	str	r2, [r5, #0]
 800a874:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800a878:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800a87c:	2301      	movs	r3, #1
 800a87e:	e0a3      	b.n	800a9c8 <_printf_i+0x1f4>
 800a880:	6820      	ldr	r0, [r4, #0]
 800a882:	6829      	ldr	r1, [r5, #0]
 800a884:	0606      	lsls	r6, r0, #24
 800a886:	f101 0304 	add.w	r3, r1, #4
 800a88a:	d50a      	bpl.n	800a8a2 <_printf_i+0xce>
 800a88c:	680e      	ldr	r6, [r1, #0]
 800a88e:	602b      	str	r3, [r5, #0]
 800a890:	2e00      	cmp	r6, #0
 800a892:	da03      	bge.n	800a89c <_printf_i+0xc8>
 800a894:	232d      	movs	r3, #45	; 0x2d
 800a896:	4276      	negs	r6, r6
 800a898:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800a89c:	485e      	ldr	r0, [pc, #376]	; (800aa18 <_printf_i+0x244>)
 800a89e:	230a      	movs	r3, #10
 800a8a0:	e019      	b.n	800a8d6 <_printf_i+0x102>
 800a8a2:	680e      	ldr	r6, [r1, #0]
 800a8a4:	602b      	str	r3, [r5, #0]
 800a8a6:	f010 0f40 	tst.w	r0, #64	; 0x40
 800a8aa:	bf18      	it	ne
 800a8ac:	b236      	sxthne	r6, r6
 800a8ae:	e7ef      	b.n	800a890 <_printf_i+0xbc>
 800a8b0:	682b      	ldr	r3, [r5, #0]
 800a8b2:	6820      	ldr	r0, [r4, #0]
 800a8b4:	1d19      	adds	r1, r3, #4
 800a8b6:	6029      	str	r1, [r5, #0]
 800a8b8:	0601      	lsls	r1, r0, #24
 800a8ba:	d501      	bpl.n	800a8c0 <_printf_i+0xec>
 800a8bc:	681e      	ldr	r6, [r3, #0]
 800a8be:	e002      	b.n	800a8c6 <_printf_i+0xf2>
 800a8c0:	0646      	lsls	r6, r0, #25
 800a8c2:	d5fb      	bpl.n	800a8bc <_printf_i+0xe8>
 800a8c4:	881e      	ldrh	r6, [r3, #0]
 800a8c6:	4854      	ldr	r0, [pc, #336]	; (800aa18 <_printf_i+0x244>)
 800a8c8:	2f6f      	cmp	r7, #111	; 0x6f
 800a8ca:	bf0c      	ite	eq
 800a8cc:	2308      	moveq	r3, #8
 800a8ce:	230a      	movne	r3, #10
 800a8d0:	2100      	movs	r1, #0
 800a8d2:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 800a8d6:	6865      	ldr	r5, [r4, #4]
 800a8d8:	60a5      	str	r5, [r4, #8]
 800a8da:	2d00      	cmp	r5, #0
 800a8dc:	bfa2      	ittt	ge
 800a8de:	6821      	ldrge	r1, [r4, #0]
 800a8e0:	f021 0104 	bicge.w	r1, r1, #4
 800a8e4:	6021      	strge	r1, [r4, #0]
 800a8e6:	b90e      	cbnz	r6, 800a8ec <_printf_i+0x118>
 800a8e8:	2d00      	cmp	r5, #0
 800a8ea:	d04d      	beq.n	800a988 <_printf_i+0x1b4>
 800a8ec:	4615      	mov	r5, r2
 800a8ee:	fbb6 f1f3 	udiv	r1, r6, r3
 800a8f2:	fb03 6711 	mls	r7, r3, r1, r6
 800a8f6:	5dc7      	ldrb	r7, [r0, r7]
 800a8f8:	f805 7d01 	strb.w	r7, [r5, #-1]!
 800a8fc:	4637      	mov	r7, r6
 800a8fe:	42bb      	cmp	r3, r7
 800a900:	460e      	mov	r6, r1
 800a902:	d9f4      	bls.n	800a8ee <_printf_i+0x11a>
 800a904:	2b08      	cmp	r3, #8
 800a906:	d10b      	bne.n	800a920 <_printf_i+0x14c>
 800a908:	6823      	ldr	r3, [r4, #0]
 800a90a:	07de      	lsls	r6, r3, #31
 800a90c:	d508      	bpl.n	800a920 <_printf_i+0x14c>
 800a90e:	6923      	ldr	r3, [r4, #16]
 800a910:	6861      	ldr	r1, [r4, #4]
 800a912:	4299      	cmp	r1, r3
 800a914:	bfde      	ittt	le
 800a916:	2330      	movle	r3, #48	; 0x30
 800a918:	f805 3c01 	strble.w	r3, [r5, #-1]
 800a91c:	f105 35ff 	addle.w	r5, r5, #4294967295
 800a920:	1b52      	subs	r2, r2, r5
 800a922:	6122      	str	r2, [r4, #16]
 800a924:	f8cd a000 	str.w	sl, [sp]
 800a928:	464b      	mov	r3, r9
 800a92a:	aa03      	add	r2, sp, #12
 800a92c:	4621      	mov	r1, r4
 800a92e:	4640      	mov	r0, r8
 800a930:	f7ff fee2 	bl	800a6f8 <_printf_common>
 800a934:	3001      	adds	r0, #1
 800a936:	d14c      	bne.n	800a9d2 <_printf_i+0x1fe>
 800a938:	f04f 30ff 	mov.w	r0, #4294967295
 800a93c:	b004      	add	sp, #16
 800a93e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800a942:	4835      	ldr	r0, [pc, #212]	; (800aa18 <_printf_i+0x244>)
 800a944:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 800a948:	6829      	ldr	r1, [r5, #0]
 800a94a:	6823      	ldr	r3, [r4, #0]
 800a94c:	f851 6b04 	ldr.w	r6, [r1], #4
 800a950:	6029      	str	r1, [r5, #0]
 800a952:	061d      	lsls	r5, r3, #24
 800a954:	d514      	bpl.n	800a980 <_printf_i+0x1ac>
 800a956:	07df      	lsls	r7, r3, #31
 800a958:	bf44      	itt	mi
 800a95a:	f043 0320 	orrmi.w	r3, r3, #32
 800a95e:	6023      	strmi	r3, [r4, #0]
 800a960:	b91e      	cbnz	r6, 800a96a <_printf_i+0x196>
 800a962:	6823      	ldr	r3, [r4, #0]
 800a964:	f023 0320 	bic.w	r3, r3, #32
 800a968:	6023      	str	r3, [r4, #0]
 800a96a:	2310      	movs	r3, #16
 800a96c:	e7b0      	b.n	800a8d0 <_printf_i+0xfc>
 800a96e:	6823      	ldr	r3, [r4, #0]
 800a970:	f043 0320 	orr.w	r3, r3, #32
 800a974:	6023      	str	r3, [r4, #0]
 800a976:	2378      	movs	r3, #120	; 0x78
 800a978:	4828      	ldr	r0, [pc, #160]	; (800aa1c <_printf_i+0x248>)
 800a97a:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 800a97e:	e7e3      	b.n	800a948 <_printf_i+0x174>
 800a980:	0659      	lsls	r1, r3, #25
 800a982:	bf48      	it	mi
 800a984:	b2b6      	uxthmi	r6, r6
 800a986:	e7e6      	b.n	800a956 <_printf_i+0x182>
 800a988:	4615      	mov	r5, r2
 800a98a:	e7bb      	b.n	800a904 <_printf_i+0x130>
 800a98c:	682b      	ldr	r3, [r5, #0]
 800a98e:	6826      	ldr	r6, [r4, #0]
 800a990:	6961      	ldr	r1, [r4, #20]
 800a992:	1d18      	adds	r0, r3, #4
 800a994:	6028      	str	r0, [r5, #0]
 800a996:	0635      	lsls	r5, r6, #24
 800a998:	681b      	ldr	r3, [r3, #0]
 800a99a:	d501      	bpl.n	800a9a0 <_printf_i+0x1cc>
 800a99c:	6019      	str	r1, [r3, #0]
 800a99e:	e002      	b.n	800a9a6 <_printf_i+0x1d2>
 800a9a0:	0670      	lsls	r0, r6, #25
 800a9a2:	d5fb      	bpl.n	800a99c <_printf_i+0x1c8>
 800a9a4:	8019      	strh	r1, [r3, #0]
 800a9a6:	2300      	movs	r3, #0
 800a9a8:	6123      	str	r3, [r4, #16]
 800a9aa:	4615      	mov	r5, r2
 800a9ac:	e7ba      	b.n	800a924 <_printf_i+0x150>
 800a9ae:	682b      	ldr	r3, [r5, #0]
 800a9b0:	1d1a      	adds	r2, r3, #4
 800a9b2:	602a      	str	r2, [r5, #0]
 800a9b4:	681d      	ldr	r5, [r3, #0]
 800a9b6:	6862      	ldr	r2, [r4, #4]
 800a9b8:	2100      	movs	r1, #0
 800a9ba:	4628      	mov	r0, r5
 800a9bc:	f7f5 fc98 	bl	80002f0 <memchr>
 800a9c0:	b108      	cbz	r0, 800a9c6 <_printf_i+0x1f2>
 800a9c2:	1b40      	subs	r0, r0, r5
 800a9c4:	6060      	str	r0, [r4, #4]
 800a9c6:	6863      	ldr	r3, [r4, #4]
 800a9c8:	6123      	str	r3, [r4, #16]
 800a9ca:	2300      	movs	r3, #0
 800a9cc:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800a9d0:	e7a8      	b.n	800a924 <_printf_i+0x150>
 800a9d2:	6923      	ldr	r3, [r4, #16]
 800a9d4:	462a      	mov	r2, r5
 800a9d6:	4649      	mov	r1, r9
 800a9d8:	4640      	mov	r0, r8
 800a9da:	47d0      	blx	sl
 800a9dc:	3001      	adds	r0, #1
 800a9de:	d0ab      	beq.n	800a938 <_printf_i+0x164>
 800a9e0:	6823      	ldr	r3, [r4, #0]
 800a9e2:	079b      	lsls	r3, r3, #30
 800a9e4:	d413      	bmi.n	800aa0e <_printf_i+0x23a>
 800a9e6:	68e0      	ldr	r0, [r4, #12]
 800a9e8:	9b03      	ldr	r3, [sp, #12]
 800a9ea:	4298      	cmp	r0, r3
 800a9ec:	bfb8      	it	lt
 800a9ee:	4618      	movlt	r0, r3
 800a9f0:	e7a4      	b.n	800a93c <_printf_i+0x168>
 800a9f2:	2301      	movs	r3, #1
 800a9f4:	4632      	mov	r2, r6
 800a9f6:	4649      	mov	r1, r9
 800a9f8:	4640      	mov	r0, r8
 800a9fa:	47d0      	blx	sl
 800a9fc:	3001      	adds	r0, #1
 800a9fe:	d09b      	beq.n	800a938 <_printf_i+0x164>
 800aa00:	3501      	adds	r5, #1
 800aa02:	68e3      	ldr	r3, [r4, #12]
 800aa04:	9903      	ldr	r1, [sp, #12]
 800aa06:	1a5b      	subs	r3, r3, r1
 800aa08:	42ab      	cmp	r3, r5
 800aa0a:	dcf2      	bgt.n	800a9f2 <_printf_i+0x21e>
 800aa0c:	e7eb      	b.n	800a9e6 <_printf_i+0x212>
 800aa0e:	2500      	movs	r5, #0
 800aa10:	f104 0619 	add.w	r6, r4, #25
 800aa14:	e7f5      	b.n	800aa02 <_printf_i+0x22e>
 800aa16:	bf00      	nop
 800aa18:	0800ad89 	.word	0x0800ad89
 800aa1c:	0800ad9a 	.word	0x0800ad9a

0800aa20 <memcpy>:
 800aa20:	440a      	add	r2, r1
 800aa22:	4291      	cmp	r1, r2
 800aa24:	f100 33ff 	add.w	r3, r0, #4294967295
 800aa28:	d100      	bne.n	800aa2c <memcpy+0xc>
 800aa2a:	4770      	bx	lr
 800aa2c:	b510      	push	{r4, lr}
 800aa2e:	f811 4b01 	ldrb.w	r4, [r1], #1
 800aa32:	f803 4f01 	strb.w	r4, [r3, #1]!
 800aa36:	4291      	cmp	r1, r2
 800aa38:	d1f9      	bne.n	800aa2e <memcpy+0xe>
 800aa3a:	bd10      	pop	{r4, pc}

0800aa3c <memmove>:
 800aa3c:	4288      	cmp	r0, r1
 800aa3e:	b510      	push	{r4, lr}
 800aa40:	eb01 0402 	add.w	r4, r1, r2
 800aa44:	d902      	bls.n	800aa4c <memmove+0x10>
 800aa46:	4284      	cmp	r4, r0
 800aa48:	4623      	mov	r3, r4
 800aa4a:	d807      	bhi.n	800aa5c <memmove+0x20>
 800aa4c:	1e43      	subs	r3, r0, #1
 800aa4e:	42a1      	cmp	r1, r4
 800aa50:	d008      	beq.n	800aa64 <memmove+0x28>
 800aa52:	f811 2b01 	ldrb.w	r2, [r1], #1
 800aa56:	f803 2f01 	strb.w	r2, [r3, #1]!
 800aa5a:	e7f8      	b.n	800aa4e <memmove+0x12>
 800aa5c:	4402      	add	r2, r0
 800aa5e:	4601      	mov	r1, r0
 800aa60:	428a      	cmp	r2, r1
 800aa62:	d100      	bne.n	800aa66 <memmove+0x2a>
 800aa64:	bd10      	pop	{r4, pc}
 800aa66:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800aa6a:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800aa6e:	e7f7      	b.n	800aa60 <memmove+0x24>

0800aa70 <_free_r>:
 800aa70:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800aa72:	2900      	cmp	r1, #0
 800aa74:	d044      	beq.n	800ab00 <_free_r+0x90>
 800aa76:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800aa7a:	9001      	str	r0, [sp, #4]
 800aa7c:	2b00      	cmp	r3, #0
 800aa7e:	f1a1 0404 	sub.w	r4, r1, #4
 800aa82:	bfb8      	it	lt
 800aa84:	18e4      	addlt	r4, r4, r3
 800aa86:	f000 f913 	bl	800acb0 <__malloc_lock>
 800aa8a:	4a1e      	ldr	r2, [pc, #120]	; (800ab04 <_free_r+0x94>)
 800aa8c:	9801      	ldr	r0, [sp, #4]
 800aa8e:	6813      	ldr	r3, [r2, #0]
 800aa90:	b933      	cbnz	r3, 800aaa0 <_free_r+0x30>
 800aa92:	6063      	str	r3, [r4, #4]
 800aa94:	6014      	str	r4, [r2, #0]
 800aa96:	b003      	add	sp, #12
 800aa98:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800aa9c:	f000 b90e 	b.w	800acbc <__malloc_unlock>
 800aaa0:	42a3      	cmp	r3, r4
 800aaa2:	d908      	bls.n	800aab6 <_free_r+0x46>
 800aaa4:	6825      	ldr	r5, [r4, #0]
 800aaa6:	1961      	adds	r1, r4, r5
 800aaa8:	428b      	cmp	r3, r1
 800aaaa:	bf01      	itttt	eq
 800aaac:	6819      	ldreq	r1, [r3, #0]
 800aaae:	685b      	ldreq	r3, [r3, #4]
 800aab0:	1949      	addeq	r1, r1, r5
 800aab2:	6021      	streq	r1, [r4, #0]
 800aab4:	e7ed      	b.n	800aa92 <_free_r+0x22>
 800aab6:	461a      	mov	r2, r3
 800aab8:	685b      	ldr	r3, [r3, #4]
 800aaba:	b10b      	cbz	r3, 800aac0 <_free_r+0x50>
 800aabc:	42a3      	cmp	r3, r4
 800aabe:	d9fa      	bls.n	800aab6 <_free_r+0x46>
 800aac0:	6811      	ldr	r1, [r2, #0]
 800aac2:	1855      	adds	r5, r2, r1
 800aac4:	42a5      	cmp	r5, r4
 800aac6:	d10b      	bne.n	800aae0 <_free_r+0x70>
 800aac8:	6824      	ldr	r4, [r4, #0]
 800aaca:	4421      	add	r1, r4
 800aacc:	1854      	adds	r4, r2, r1
 800aace:	42a3      	cmp	r3, r4
 800aad0:	6011      	str	r1, [r2, #0]
 800aad2:	d1e0      	bne.n	800aa96 <_free_r+0x26>
 800aad4:	681c      	ldr	r4, [r3, #0]
 800aad6:	685b      	ldr	r3, [r3, #4]
 800aad8:	6053      	str	r3, [r2, #4]
 800aada:	4421      	add	r1, r4
 800aadc:	6011      	str	r1, [r2, #0]
 800aade:	e7da      	b.n	800aa96 <_free_r+0x26>
 800aae0:	d902      	bls.n	800aae8 <_free_r+0x78>
 800aae2:	230c      	movs	r3, #12
 800aae4:	6003      	str	r3, [r0, #0]
 800aae6:	e7d6      	b.n	800aa96 <_free_r+0x26>
 800aae8:	6825      	ldr	r5, [r4, #0]
 800aaea:	1961      	adds	r1, r4, r5
 800aaec:	428b      	cmp	r3, r1
 800aaee:	bf04      	itt	eq
 800aaf0:	6819      	ldreq	r1, [r3, #0]
 800aaf2:	685b      	ldreq	r3, [r3, #4]
 800aaf4:	6063      	str	r3, [r4, #4]
 800aaf6:	bf04      	itt	eq
 800aaf8:	1949      	addeq	r1, r1, r5
 800aafa:	6021      	streq	r1, [r4, #0]
 800aafc:	6054      	str	r4, [r2, #4]
 800aafe:	e7ca      	b.n	800aa96 <_free_r+0x26>
 800ab00:	b003      	add	sp, #12
 800ab02:	bd30      	pop	{r4, r5, pc}
 800ab04:	24001e20 	.word	0x24001e20

0800ab08 <sbrk_aligned>:
 800ab08:	b570      	push	{r4, r5, r6, lr}
 800ab0a:	4e0e      	ldr	r6, [pc, #56]	; (800ab44 <sbrk_aligned+0x3c>)
 800ab0c:	460c      	mov	r4, r1
 800ab0e:	6831      	ldr	r1, [r6, #0]
 800ab10:	4605      	mov	r5, r0
 800ab12:	b911      	cbnz	r1, 800ab1a <sbrk_aligned+0x12>
 800ab14:	f000 f8bc 	bl	800ac90 <_sbrk_r>
 800ab18:	6030      	str	r0, [r6, #0]
 800ab1a:	4621      	mov	r1, r4
 800ab1c:	4628      	mov	r0, r5
 800ab1e:	f000 f8b7 	bl	800ac90 <_sbrk_r>
 800ab22:	1c43      	adds	r3, r0, #1
 800ab24:	d00a      	beq.n	800ab3c <sbrk_aligned+0x34>
 800ab26:	1cc4      	adds	r4, r0, #3
 800ab28:	f024 0403 	bic.w	r4, r4, #3
 800ab2c:	42a0      	cmp	r0, r4
 800ab2e:	d007      	beq.n	800ab40 <sbrk_aligned+0x38>
 800ab30:	1a21      	subs	r1, r4, r0
 800ab32:	4628      	mov	r0, r5
 800ab34:	f000 f8ac 	bl	800ac90 <_sbrk_r>
 800ab38:	3001      	adds	r0, #1
 800ab3a:	d101      	bne.n	800ab40 <sbrk_aligned+0x38>
 800ab3c:	f04f 34ff 	mov.w	r4, #4294967295
 800ab40:	4620      	mov	r0, r4
 800ab42:	bd70      	pop	{r4, r5, r6, pc}
 800ab44:	24001e24 	.word	0x24001e24

0800ab48 <_malloc_r>:
 800ab48:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800ab4c:	1ccd      	adds	r5, r1, #3
 800ab4e:	f025 0503 	bic.w	r5, r5, #3
 800ab52:	3508      	adds	r5, #8
 800ab54:	2d0c      	cmp	r5, #12
 800ab56:	bf38      	it	cc
 800ab58:	250c      	movcc	r5, #12
 800ab5a:	2d00      	cmp	r5, #0
 800ab5c:	4607      	mov	r7, r0
 800ab5e:	db01      	blt.n	800ab64 <_malloc_r+0x1c>
 800ab60:	42a9      	cmp	r1, r5
 800ab62:	d905      	bls.n	800ab70 <_malloc_r+0x28>
 800ab64:	230c      	movs	r3, #12
 800ab66:	603b      	str	r3, [r7, #0]
 800ab68:	2600      	movs	r6, #0
 800ab6a:	4630      	mov	r0, r6
 800ab6c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800ab70:	4e2e      	ldr	r6, [pc, #184]	; (800ac2c <_malloc_r+0xe4>)
 800ab72:	f000 f89d 	bl	800acb0 <__malloc_lock>
 800ab76:	6833      	ldr	r3, [r6, #0]
 800ab78:	461c      	mov	r4, r3
 800ab7a:	bb34      	cbnz	r4, 800abca <_malloc_r+0x82>
 800ab7c:	4629      	mov	r1, r5
 800ab7e:	4638      	mov	r0, r7
 800ab80:	f7ff ffc2 	bl	800ab08 <sbrk_aligned>
 800ab84:	1c43      	adds	r3, r0, #1
 800ab86:	4604      	mov	r4, r0
 800ab88:	d14d      	bne.n	800ac26 <_malloc_r+0xde>
 800ab8a:	6834      	ldr	r4, [r6, #0]
 800ab8c:	4626      	mov	r6, r4
 800ab8e:	2e00      	cmp	r6, #0
 800ab90:	d140      	bne.n	800ac14 <_malloc_r+0xcc>
 800ab92:	6823      	ldr	r3, [r4, #0]
 800ab94:	4631      	mov	r1, r6
 800ab96:	4638      	mov	r0, r7
 800ab98:	eb04 0803 	add.w	r8, r4, r3
 800ab9c:	f000 f878 	bl	800ac90 <_sbrk_r>
 800aba0:	4580      	cmp	r8, r0
 800aba2:	d13a      	bne.n	800ac1a <_malloc_r+0xd2>
 800aba4:	6821      	ldr	r1, [r4, #0]
 800aba6:	3503      	adds	r5, #3
 800aba8:	1a6d      	subs	r5, r5, r1
 800abaa:	f025 0503 	bic.w	r5, r5, #3
 800abae:	3508      	adds	r5, #8
 800abb0:	2d0c      	cmp	r5, #12
 800abb2:	bf38      	it	cc
 800abb4:	250c      	movcc	r5, #12
 800abb6:	4629      	mov	r1, r5
 800abb8:	4638      	mov	r0, r7
 800abba:	f7ff ffa5 	bl	800ab08 <sbrk_aligned>
 800abbe:	3001      	adds	r0, #1
 800abc0:	d02b      	beq.n	800ac1a <_malloc_r+0xd2>
 800abc2:	6823      	ldr	r3, [r4, #0]
 800abc4:	442b      	add	r3, r5
 800abc6:	6023      	str	r3, [r4, #0]
 800abc8:	e00e      	b.n	800abe8 <_malloc_r+0xa0>
 800abca:	6822      	ldr	r2, [r4, #0]
 800abcc:	1b52      	subs	r2, r2, r5
 800abce:	d41e      	bmi.n	800ac0e <_malloc_r+0xc6>
 800abd0:	2a0b      	cmp	r2, #11
 800abd2:	d916      	bls.n	800ac02 <_malloc_r+0xba>
 800abd4:	1961      	adds	r1, r4, r5
 800abd6:	42a3      	cmp	r3, r4
 800abd8:	6025      	str	r5, [r4, #0]
 800abda:	bf18      	it	ne
 800abdc:	6059      	strne	r1, [r3, #4]
 800abde:	6863      	ldr	r3, [r4, #4]
 800abe0:	bf08      	it	eq
 800abe2:	6031      	streq	r1, [r6, #0]
 800abe4:	5162      	str	r2, [r4, r5]
 800abe6:	604b      	str	r3, [r1, #4]
 800abe8:	4638      	mov	r0, r7
 800abea:	f104 060b 	add.w	r6, r4, #11
 800abee:	f000 f865 	bl	800acbc <__malloc_unlock>
 800abf2:	f026 0607 	bic.w	r6, r6, #7
 800abf6:	1d23      	adds	r3, r4, #4
 800abf8:	1af2      	subs	r2, r6, r3
 800abfa:	d0b6      	beq.n	800ab6a <_malloc_r+0x22>
 800abfc:	1b9b      	subs	r3, r3, r6
 800abfe:	50a3      	str	r3, [r4, r2]
 800ac00:	e7b3      	b.n	800ab6a <_malloc_r+0x22>
 800ac02:	6862      	ldr	r2, [r4, #4]
 800ac04:	42a3      	cmp	r3, r4
 800ac06:	bf0c      	ite	eq
 800ac08:	6032      	streq	r2, [r6, #0]
 800ac0a:	605a      	strne	r2, [r3, #4]
 800ac0c:	e7ec      	b.n	800abe8 <_malloc_r+0xa0>
 800ac0e:	4623      	mov	r3, r4
 800ac10:	6864      	ldr	r4, [r4, #4]
 800ac12:	e7b2      	b.n	800ab7a <_malloc_r+0x32>
 800ac14:	4634      	mov	r4, r6
 800ac16:	6876      	ldr	r6, [r6, #4]
 800ac18:	e7b9      	b.n	800ab8e <_malloc_r+0x46>
 800ac1a:	230c      	movs	r3, #12
 800ac1c:	603b      	str	r3, [r7, #0]
 800ac1e:	4638      	mov	r0, r7
 800ac20:	f000 f84c 	bl	800acbc <__malloc_unlock>
 800ac24:	e7a1      	b.n	800ab6a <_malloc_r+0x22>
 800ac26:	6025      	str	r5, [r4, #0]
 800ac28:	e7de      	b.n	800abe8 <_malloc_r+0xa0>
 800ac2a:	bf00      	nop
 800ac2c:	24001e20 	.word	0x24001e20

0800ac30 <_realloc_r>:
 800ac30:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800ac34:	4680      	mov	r8, r0
 800ac36:	4614      	mov	r4, r2
 800ac38:	460e      	mov	r6, r1
 800ac3a:	b921      	cbnz	r1, 800ac46 <_realloc_r+0x16>
 800ac3c:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800ac40:	4611      	mov	r1, r2
 800ac42:	f7ff bf81 	b.w	800ab48 <_malloc_r>
 800ac46:	b92a      	cbnz	r2, 800ac54 <_realloc_r+0x24>
 800ac48:	f7ff ff12 	bl	800aa70 <_free_r>
 800ac4c:	4625      	mov	r5, r4
 800ac4e:	4628      	mov	r0, r5
 800ac50:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800ac54:	f000 f838 	bl	800acc8 <_malloc_usable_size_r>
 800ac58:	4284      	cmp	r4, r0
 800ac5a:	4607      	mov	r7, r0
 800ac5c:	d802      	bhi.n	800ac64 <_realloc_r+0x34>
 800ac5e:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 800ac62:	d812      	bhi.n	800ac8a <_realloc_r+0x5a>
 800ac64:	4621      	mov	r1, r4
 800ac66:	4640      	mov	r0, r8
 800ac68:	f7ff ff6e 	bl	800ab48 <_malloc_r>
 800ac6c:	4605      	mov	r5, r0
 800ac6e:	2800      	cmp	r0, #0
 800ac70:	d0ed      	beq.n	800ac4e <_realloc_r+0x1e>
 800ac72:	42bc      	cmp	r4, r7
 800ac74:	4622      	mov	r2, r4
 800ac76:	4631      	mov	r1, r6
 800ac78:	bf28      	it	cs
 800ac7a:	463a      	movcs	r2, r7
 800ac7c:	f7ff fed0 	bl	800aa20 <memcpy>
 800ac80:	4631      	mov	r1, r6
 800ac82:	4640      	mov	r0, r8
 800ac84:	f7ff fef4 	bl	800aa70 <_free_r>
 800ac88:	e7e1      	b.n	800ac4e <_realloc_r+0x1e>
 800ac8a:	4635      	mov	r5, r6
 800ac8c:	e7df      	b.n	800ac4e <_realloc_r+0x1e>
	...

0800ac90 <_sbrk_r>:
 800ac90:	b538      	push	{r3, r4, r5, lr}
 800ac92:	4d06      	ldr	r5, [pc, #24]	; (800acac <_sbrk_r+0x1c>)
 800ac94:	2300      	movs	r3, #0
 800ac96:	4604      	mov	r4, r0
 800ac98:	4608      	mov	r0, r1
 800ac9a:	602b      	str	r3, [r5, #0]
 800ac9c:	f7f5 feda 	bl	8000a54 <_sbrk>
 800aca0:	1c43      	adds	r3, r0, #1
 800aca2:	d102      	bne.n	800acaa <_sbrk_r+0x1a>
 800aca4:	682b      	ldr	r3, [r5, #0]
 800aca6:	b103      	cbz	r3, 800acaa <_sbrk_r+0x1a>
 800aca8:	6023      	str	r3, [r4, #0]
 800acaa:	bd38      	pop	{r3, r4, r5, pc}
 800acac:	24001e28 	.word	0x24001e28

0800acb0 <__malloc_lock>:
 800acb0:	4801      	ldr	r0, [pc, #4]	; (800acb8 <__malloc_lock+0x8>)
 800acb2:	f000 b811 	b.w	800acd8 <__retarget_lock_acquire_recursive>
 800acb6:	bf00      	nop
 800acb8:	24001e2c 	.word	0x24001e2c

0800acbc <__malloc_unlock>:
 800acbc:	4801      	ldr	r0, [pc, #4]	; (800acc4 <__malloc_unlock+0x8>)
 800acbe:	f000 b80c 	b.w	800acda <__retarget_lock_release_recursive>
 800acc2:	bf00      	nop
 800acc4:	24001e2c 	.word	0x24001e2c

0800acc8 <_malloc_usable_size_r>:
 800acc8:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800accc:	1f18      	subs	r0, r3, #4
 800acce:	2b00      	cmp	r3, #0
 800acd0:	bfbc      	itt	lt
 800acd2:	580b      	ldrlt	r3, [r1, r0]
 800acd4:	18c0      	addlt	r0, r0, r3
 800acd6:	4770      	bx	lr

0800acd8 <__retarget_lock_acquire_recursive>:
 800acd8:	4770      	bx	lr

0800acda <__retarget_lock_release_recursive>:
 800acda:	4770      	bx	lr

0800acdc <_init>:
 800acdc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800acde:	bf00      	nop
 800ace0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800ace2:	bc08      	pop	{r3}
 800ace4:	469e      	mov	lr, r3
 800ace6:	4770      	bx	lr

0800ace8 <_fini>:
 800ace8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800acea:	bf00      	nop
 800acec:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800acee:	bc08      	pop	{r3}
 800acf0:	469e      	mov	lr, r3
 800acf2:	4770      	bx	lr
